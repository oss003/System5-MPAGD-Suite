ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "kcmunchkin.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 8E 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  58 3C        msgptr:		.word msgdat	; messages
002811  3  C4 3C        blkptr:		.word chgfx	; block graphics.
002813  3  CA 3C        proptr:		.word bprop	; address of char properties.
002815  3  CD 3C        sptptr:		.word sprgfx	; sprite graphics
002817  3  05 3E        frmptr:		.word frmlst	; sprite frames.
002819  3  13 3E        scrptr:		.word scdat	; address of screens.
00281B  3  8A 3F        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  93 3F        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3  04 03 02 01  txtcol:		.byte green,yellow,blue,red
002823  3               
002823  3               ; Don't change the order of these four.
002823  3               ; Menu routine relies on winlft following wintop.
002823  3               
002823  3  00           wintop:		.byte WINDOWTOP	; top of window.
002824  3  01           winlft:		.byte WINDOWLFT	; left edge.
002825  3  19           winhgt:		.byte WINDOWHGT	; window height.
002826  3  27           winwid:		.byte WINDOWWID	; window width.
002827  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002828  3               
002828  3               ; Variables start here.
002828  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002828  3               
002828  3  00           wntopx:		.byte (3 * WINDOWTOP)
002829  3  02           wnlftx:		.byte (2 * WINDOWLFT)
00282A  3  42           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
00282B  3  46           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
00282C  3               
00282C  3               ; Assorted game routines which can go in contended memory.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for inventory called by the INV command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with objects seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected objectnr of INV menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               .if mflag
00282C  3               minve:
00282C  3               .if gflag
00282C  3               	lda #$ff		; blue frontcolour
00282C  3               	sta andeor
00282C  3               	lda #$aa		; yellow backcoloour
00282C  3               	sta andeor+1
00282C  3               .endif
00282C  3               	lda #<(invdis)		; routine address.
00282C  3               	sta mod0+1		; set up menu routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(invdis)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               	lda #<(fopt)		; find option from available objects.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fopt)
00282C  3               	sta mod1+1+1
00282C  3               	jmp dbox		; do menu routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for menu called by the MENU command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with menu items seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected line nr of MENU menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               mmenu:
00282C  3               	lda #<(always)		; routine address.
00282C  3               	sta mod0+1		; set up routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(always)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               
00282C  3               	lda #<(fstd)		; standard option selection.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fstd)
00282C  3               	sta mod1+2
00282C  3               
00282C  3               ; Drop through into box routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Work out size of box for message or menu.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               dbox:
00282C  3               	lda #<(msgdat)		; pointer to messages.
00282C  3               	sta z80_l
00282C  3               	lda #>(msgdat)
00282C  3               	sta z80_h
00282C  3               
00282C  3               	jsr getwrd		; get message number.
00282C  3               
00282C  3               	lda z80_h		; store pointer to message.
00282C  3               	sta TmpAddr
00282C  3               	lda z80_l
00282C  3               	sta TmpAddr+1
00282C  3               
00282C  3               	lda #1			; height.
00282C  3               	sta z80_d
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               	sta z80_e		; maximum width.
00282C  3               dbox5:
00282C  3               	lda #0			; this line"s width.
00282C  3               	sta z80_b
00282C  3               mod2:
00282C  3               	jsr always		; item in player"s possession?
00282C  3               	cmp #255
00282C  3               	bne dbox6		; not in inventory, skip this line.
00282C  3               	inc z80_d		; add to tally.
00282C  3               dbox6:
00282C  3               	ldy #0			; get character.
00282C  3               	lda (z80_hl),y
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a		; reached end of line?
00282C  3               	cmp #','
00282C  3               	beq dbox3		; yes.
00282C  3               	cmp #13
00282C  3               	beq dbox3		; yes.
00282C  3               	inc z80_b		; add to this line"s width.
00282C  3               	lda z80_a
00282C  3               	bmi dbox4		; end of message? yes, end count.
00282C  3               	jmp dbox6		; repeat until we find the end.
00282C  3               dbox3:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox5		; no, carry on looking.
00282C  3               	lda z80_b		; make this the widest so far.
00282C  3               	sta z80_e
00282C  3               	jmp dbox5		; keep looking.
00282C  3               dbox4:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox8		; no, carry on looking.
00282C  3               	lda z80_b		; final line is the longest so far.
00282C  3               	sta z80_e
00282C  3               dbox8:
00282C  3               	dec z80_d		; decrement items found.
00282C  3               	bne :+			; total was zero.
00282C  3               	lda #255
00282C  3               	sta varopt
00282C  3               	jmp dbox15
00282C  3               :
00282C  3               	lda z80_e		; longest line.
00282C  3               	bne :+			; was it zero?
00282C  3               	jmp dbox15		; total was zero.
00282C  3               :
00282C  3               	sta bwid		; set up size.
00282C  3               	lda z80_d
00282C  3               	sta blen
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; That's set up our box size.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               	lda winhgt		; window height in characters.
00282C  3               	sec
00282C  3               	sbc z80_d		; subtract height of box.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc wintop		; add top edge of window.
00282C  3               	sta btop		; set up box top.
00282C  3               
00282C  3               	lda winwid		; window width in characters.
00282C  3               	sec
00282C  3               	sbc z80_e		; subtract box width.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc winlft		; add left edge of window.
00282C  3               	sta blft		; box left.
00282C  3               
00282C  3               	lda #<(FONT-256)		; font.
00282C  3               	sta grbase		; set up for text display.
00282C  3               	lda #>(FONT-256)
00282C  3               	sta grbase+1
00282C  3               
00282C  3               	lda TmpAddr+1		; restore message pointer.
00282C  3               	sta z80_l
00282C  3               	lda TmpAddr
00282C  3               	sta z80_h
00282C  3               
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set display coordinate.
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               dbox2:
00282C  3               	lda combyt		; get object number.
00282C  3               	sta z80_a
00282C  3               mod0:
00282C  3               	jsr always		; check inventory for display.
00282C  3               	cmp #255
00282C  3               	beq :+
00282C  3               	jmp dbox13		; not in inventory, skip this line.
00282C  3               :
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set left display position.
00282C  3               	lda bwid		; box width.
00282C  3               	sta z80_b		; store width.
00282C  3               
00282C  3               	lda fcolour		; Set textcolour
00282C  3               	jsr pchar
00282C  3               	jsr nexpos
00282C  3               dbox0:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	cmp #','		; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               	cmp #13			; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               
00282C  3               	cmp #141			; end of line?
00282C  3               	bne :+
00282C  3               	dec bwid
00282C  3               	jmp dbox7		; yes, next one.
00282C  3               :
00282C  3               	dec z80_b		; one less to display.
00282C  3               	and #127		; remove terminator.
00282C  3               
00282C  3               	jsr pchr		; display on screen.
00282C  3               
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a
00282C  3               	cmp #128		; end of message?
00282C  3               	bmi :+
00282C  3               	jsr dscor2
00282C  3               	jmp dbox7		; yes, job done.
00282C  3               :
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	beq :+			; are any left?
00282C  3               	jmp dbox0		; yes, continue.
00282C  3               :
00282C  3               ;---------------------------------------------------
00282C  3               ; Reached limit of characters per line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dbox9:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #13			; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #128		; end of message?
00282C  3               	bcs :+
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox9
00282C  3               
00282C  3               ;---------------------------------------------------
00282C  3               ; Fill box to end of line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dboxf:
00282C  3               	lda #32			; space character.
00282C  3               	jsr pchr		; display character.
00282C  3               	dec z80_b
00282C  3               	beq :+
00282C  3               	jmp dboxf		; repeat for remaining chars on line.
00282C  3               :
00282C  3               	rts
00282C  3               dbox1:
00282C  3               	inc z80_l		; skip character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	jsr dboxf		; fill box out to right side.
00282C  3               dbox10:
00282C  3               	inc dispy		; y coordinate down a line next position.
00282C  3               	jmp dbox2		; next line.
00282C  3               dbox7:
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	bne :+			; are any left?
00282C  3               	jmp dbox11		; no, nothing to draw.
00282C  3               :
00282C  3               	jsr dboxf		; fill message to line.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Drawn the box menu, now select option.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox11:
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set bar position.
00282C  3               dbox14:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	bne dbox14		; yes, debounce it.
00282C  3               	jsr dbar		; draw bar.
00282C  3               dbox12:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	beq dbox12		; no, nothing.
00282C  3               	and #16			; fire button pressed?
00282C  3               	bne :+
00282C  3               mod1:
00282C  3               	jmp fstd		; yes, job done.
00282C  3               :
00282C  3               	jsr dbar		; delete bar.
00282C  3               
00282C  3               	lda joyval		; joystick reading.
00282C  3               	and #8			; going up?
00282C  3               	beq dboxu		; yes, go up.
00282C  3               
00282C  3               	ldx dispy		; vertical position of bar.
00282C  3               	inx			; look down.
00282C  3               	txa
00282C  3               	sec
00282C  3               	sbc btop		; find distance from top.
00282C  3               	cmp blen		; top of box.
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	inc dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               dboxu:
00282C  3               	lda dispy		; vertical position of bar.
00282C  3               	cmp btop		; are we at the top?
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	dec dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               fstd:
00282C  3               	lda dispy		; bar position.
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta varopt		; store the option.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Option not available.  Skip this line.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox13:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               	cmp #13			; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               
00282C  3               	bpl :+			; end of message?
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox13
00282C  3               dbox15:
00282C  3               	lda TmpAddr		; pop message pointer from the stack.
00282C  3               	sta z80_h
00282C  3               	lda TmpAddr+1
00282C  3               	sta z80_l
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Invert bar
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbar:
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set display coordinate.
00282C  3               	jsr gprad		; get printing address.
00282C  3               
00282C  3               ;	lda bwid		; box width.
00282C  3               ;	sta z80_c		; loop counter in c.
00282C  3               ;	lda z80_h
00282C  3               ;	sta z80_d		; store screen address high byte.
00282C  3               ;dbar1:
00282C  3               ;	ldx #7			; pixel height in b.
00282C  3               ;dbar0:
00282C  3               ;	ldy scrtab,x
00282C  3               ;	lda (scraddr),y		; get screen byte.
00282C  3               ;	eor #255		; reverse all bits.
00282C  3               ;	sta (scraddr),y		; write back to screen.
00282C  3               ;	dex			; next line down.
00282C  3               ;	bpl dbar0		; draw rest of character.
00282C  3               
00282C  3               ;	inc scraddr		; one char right.
00282C  3               ;	dec z80_c		; decrement character counter.
00282C  3               ;	bne dbar1		; repeat for whole line.
00282C  3               
00282C  3               	ldy #0
00282C  3               	lda (scraddr),y
00282C  3               	eor #7
00282C  3               	sta (scraddr),y
00282C  3               
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Point to object
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  combyt
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  A = object number, A=255 if already in possession
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               invdis:
00282C  3               	lda z80_l		; store message text pointer.
00282C  3               	pha
00282C  3               	lda z80_h
00282C  3               	pha
00282C  3               	lda combyt		; object number.
00282C  3               	inc combyt		; ready for next one.
00282C  3               	jsr gotob		; check if we have object.
00282C  3               	tay
00282C  3               	pla
00282C  3               	sta z80_h
00282C  3               	pla
00282C  3               	sta z80_l
00282C  3               	tya
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Find option selected.
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  -
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected object
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               fopt:
00282C  3               	lda dispy
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta tmp+2		; option selected in b register.
00282C  3               	inc tmp+2
00282C  3               
00282C  3               	lda #0			; set to first item.
00282C  3               	sta combyt		; object number.
00282C  3               fopt0:
00282C  3               	jsr fobj		; find next object in inventory.
00282C  3               	dec tmp+2
00282C  3               	bne fopt0		; repeat for relevant steps down the list.
00282C  3               
00282C  3               	lda combyt		; get option.
00282C  3               	sta varopt		; store the option.
00282C  3               	dec varopt		; one less, due to where we increment combyt.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               fobj:
00282C  3               	ldy combyt		; object number.
00282C  3               	inc combyt		; ready for next item.
00282C  3               	tya
00282C  3               	jsr gotob		; do we have this item?
00282C  3               	cmp #255
00282C  3               	bne :+
00282C  3               	rts
00282C  3               :
00282C  3               	jmp fobj		; yes, it's on the list.
00282C  3               
00282C  3               ;bwid:	.byte 0              ; box/menu width.
00282C  3               ;blen:	.byte 0              ; box/menu height.
00282C  3               ;btop:	.byte 0              ; box coordinates.
00282C  3               ;blft:	.byte 0
00282C  3               .endif
00282C  3               
00282C  3               ;----------------------------------------------------
00282C  3               ; Delay routine 1/50 sec
00282C  3               ;
00282C  3               ; Wait 1/60 sec = 16666 usec
00282C  3               ; Wait 208 x 16 =  3328 usec
00282C  3               ;                 19994 usec
00282C  3               ; rts           =     6 usec
00282C  3               ; Total         = 20000 usec
00282C  3               ;----------------------------------------------------
00282C  3               
00282C  3               delay:
00282C  3  85 rr        	sta xtmp
00282E  3               del_loop:
00282E  3  20 F4 FF     	jsr SCRSYNC		; wait for flyback
002831  3               
002831  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002833  3               delay1:
002833  3  61 80        	adc ($80,x)		;	 6 usec
002835  3  61 80        	adc ($80,x)		;	 6 usec
002837  3  88           	dey			;	 2 usec
002838  3  D0 F9        	bne delay1		;	 2 usec
00283A  3  EA           	nop			; 2 usec
00283B  3  EA           	nop			; 2 usec
00283C  3               				; tot: 20000 usec
00283C  3  C6 rr        	dec xtmp
00283E  3  D0 EE        	bne del_loop
002840  3  60           	rts
002841  3               
002841  3               ;----------------------------------------------------
002841  3               ; Clear sprite table.
002841  3               ;
002841  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002841  3               ;----------------------------------------------------
002841  3               
002841  3               xspr:
002841  3  A9 FF        	lda #255		; clear byte.
002843  3  A2 00        	ldx #0			; length of table.
002845  3               xspr0:
002845  3  9D B3 38     	sta sprtab,x		; sprite table.
002848  3  E8           	inx			; move to next byte.
002849  3  E0 CC        	cpx #SPRBUF
00284B  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284D  3  60           	rts
00284E  3               
00284E  3               ;-------------------------------------------------------------
00284E  3               ; Initialise all objects.
00284E  3               ;
00284E  3               ; Reset current room,y,x to start room,y,x for all objects
00284E  3               ;-------------------------------------------------------------
00284E  3               
00284E  3               .if oflag
00284E  3               iniob:
00284E  3               	lda #<objdta 		; objects table.
00284E  3               	sta z80_x
00284E  3               	lda #>objdta
00284E  3               	sta z80_i
00284E  3               
00284E  3               	ldx numob 		; number of objects in the game.
00284E  3               iniob0:
00284E  3               	ldy #35
00284E  3               	lda (z80_ix),y 		; start screen.
00284E  3               	ldy #32
00284E  3               	sta (z80_ix),y 		; set start screen.
00284E  3               
00284E  3               	ldy #36
00284E  3               	lda (z80_ix),y 		; find start y.
00284E  3               	ldy #33
00284E  3               	sta (z80_ix),y 		; set start y.
00284E  3               
00284E  3               	ldy #37
00284E  3               	lda (z80_ix),y 		; get initial x.
00284E  3               	ldy #34
00284E  3               	sta (z80_ix),y 		; set x coord.
00284E  3               
00284E  3               	clc 			; point to next object.
00284E  3               	lda z80_x
00284E  3               	adc #38			; distance between objects.
00284E  3               	sta z80_x
00284E  3               	bcc :+
00284E  3               	inc z80_i
00284E  3               :
00284E  3               	dex 			; repeat.
00284E  3               	bne iniob0
00284E  3               
00284E  3               	rts
00284E  3               .endif
00284E  3               
00284E  3               ;-----------------------------------------------
00284E  3               ; Redraw the screen.
00284E  3               ;
00284E  3               ; Remove old copy of all sprites for redraw.
00284E  3               ;-----------------------------------------------
00284E  3               
00284E  3               redraw:
00284E  3               .if gflag
00284E  3               	lda #$ff
00284E  3               	sta andeor
00284E  3               	lda #$00
00284E  3               	sta andeor+1
00284E  3               .endif
00284E  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002850  3  48           	pha
002851  3  A5 68        	lda z80_x
002853  3  48           	pha
002854  3               
002854  3  20 4C 2D     	jsr droom		; show screen layout.
002857  3               .if oflag
002857  3               	jsr shwob		; draw objects.
002857  3               .endif
002857  3               numsp0:
002857  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002859  3  85 rr        	sta tmp
00285B  3               
00285B  3  A9 B3        	lda #<sprtab		; sprite table.
00285D  3  85 68        	sta z80_x
00285F  3  A9 38        	lda #>sprtab
002861  3  85 69        	sta z80_i
002863  3               redrw0:
002863  3  A0 00        	ldy #0
002865  3  B1 68        	lda (z80_ix),y		; old sprite type.
002867  3  C9 FF        	cmp #255		; is it enabled?
002869  3  F0 0B        	beq redrw1 		; no, find next one.
00286B  3               
00286B  3  A0 03        	ldy #3
00286D  3  B1 68        	lda (z80_ix),y 		; sprite y.
00286F  3  C9 B1        	cmp #177		; beyond maximum?
002871  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002873  3               
002873  3  20 4C 33     	jsr sspria		; show single sprite.
002876  3               redrw1:
002876  3  18           	clc			; next sprite.
002877  3  A5 68        	lda z80_x
002879  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00287B  3  85 68        	sta z80_x
00287D  3  90 02        	bcc :+
00287F  3  E6 69        	inc z80_i
002881  3               :
002881  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002883  3  D0 DE        	bne redrw0
002885  3               rpblc1:
002885  3               ;	jsr dshrp		; redraw shrapnel.
002885  3               
002885  3               .if aflag
002885  3               	jsr rbloc		; draw blocks for this screen
002885  3               .endif
002885  3  68           	pla			; retrieve sprite pointer.
002886  3  85 68        	sta z80_x
002888  3  68           	pla
002889  3  85 69        	sta z80_i
00288B  3               
00288B  3  60           	rts
00288C  3               
00288C  3               ;----------------------------------------------------------------------
00288C  3               ; Atomic palette is static
00288C  3               ;----------------------------------------------------------------------
00288C  3               
00288C  3               setpal:
00288C  3  60           	rts
00288D  3               
00288D  3               ;----------------------------------------------------------------------
00288D  3               ; FODDER check
00288D  3               ;----------------------------------------------------------------------
00288D  3               
00288D  3               .if pflag .or dflag
00288D  3               fdchk:
00288D  3               	cmp #FODDER 		; is it fodder?
00288D  3               	beq :+
00288D  3               	rts 			; no.
00288D  3               :
00288D  3               	lda #0			; wipe fodder in MAP
00288D  3               	ldy #0
00288D  3               	sta (bufaddr),y 	; rewrite block type.
00288D  3               
00288D  3               	lda dispx		; x=x/8
00288D  3               	pha
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	sta dispx
00288D  3               
00288D  3               	lda dispy		; y=y/8
00288D  3               	pha
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	sta dispy
00288D  3               
00288D  3               	lda #0 			; block to write.
00288D  3               	jsr pattr 		; write block.
00288D  3               
00288D  3               	pla
00288D  3               	sta dispy
00288D  3               	pla
00288D  3               	sta dispx
00288D  3               	rts
00288D  3               .endif
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Scrolly text and puzzle variables.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               .if sflag
00288D  3               txtbit:	.byte 128		; bit to write.
00288D  3               txtwid:	.byte 16		; width of ticker message.
00288D  3               txtpos:	.word msgdat
00288D  3               txtini:	.word msgdat
00288D  3               txtscr:	.word ScreenAddr
00288D  3               .endif
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Specialist routines.
00288D  3               ; Process shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               proshr:
00288D  3               .if pflag
00288D  3               	lda #<SHRAPN		; table.
00288D  3               	sta z80_x
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_i
00288D  3               
00288D  3               	lda #NUMSHR		; shrapnel pieces to process.
00288D  3               	sta shrctr
00288D  3               prosh0:
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; on/off marker.
00288D  3               	asl a
00288D  3               proshx:
00288D  3               	bcs :+
00288D  3               	jsr prosh1 		; on, so process it.
00288D  3               :
00288D  3               	clc
00288D  3               	lda z80_x
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_x
00288D  3               	bcc :+
00288D  3               	inc z80_i
00288D  3               :
00288D  3               	dec shrctr		; round again.
00288D  3               	bne prosh0
00288D  3               .endif
00288D  3               .if sflag
00288D  3               	jsr scrly
00288D  3               .endif
00288D  3  60           	rts
00288E  3               
00288E  3               .if pflag
00288E  3               ;shrctr:	.byte 0
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Proces shrapnel piece
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               prosh1:
00288E  3               	jsr plot 		; delete the pixel.
00288E  3               
00288E  3               	lda #<shrptr		; shrapnel routine pointers.
00288E  3               	sta z80_l
00288E  3               	lda #>shrptr
00288E  3               	sta z80_h
00288E  3               
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y		; restore shrapnel type.
00288E  3               	jsr prosh2 		; run the routine.
00288E  3               	jsr chkxy		; check x and y are good before we redisplay.
00288E  3               
00288E  3               	lda #<SHRSIZ 		; distance to next.
00288E  3               	sta z80_e
00288E  3               	lda #>SHRSIZ
00288E  3               	sta z80_d
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Run the routine
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               prosh2:
00288E  3               	asl a 			; 2 bytes per address.
00288E  3               	tay
00288E  3               	lda shrptr,y
00288E  3               	sta z80_l
00288E  3               	lda shrptr+1,y 		; fetch high byte from table.
00288E  3               	sta z80_h
00288E  3               	jmp (z80_hl) 		; jump to routine.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Paricle routine table
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shrptr:	.word laser		; laser.
00288E  3               	.word trail		; vapour trail.
00288E  3               	.word shrap		; shrapnel from explosion.
00288E  3               	.word dotl		; horizontal starfield left.
00288E  3               	.word dotr		; horizontal starfield right.
00288E  3               	.word dotu		; vertical starfield up.
00288E  3               	.word dotd		; vertical starfield down.
00288E  3               	.word ptcusr		; user particle.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Explosion shrapnel.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shrap:
00288E  3               	ldy #1
00288E  3               	lda (z80_ix),y 		; get the angle.
00288E  3               	clc
00288E  3               	adc #<shrsin		; shrapnel sine table.
00288E  3               	sta z80_l
00288E  3               	lda #>shrsin
00288E  3               	adc #0
00288E  3               	sta z80_h
00288E  3               
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; fetch value from table.
00288E  3               	sta z80_e
00288E  3               	inc z80_l 		; next byte of table.
00288E  3               	bne :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y		; fetch value from table.
00288E  3               	sta z80_d
00288E  3               	inc z80_l		; next byte of table.
00288E  3               	bne :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; fetch value from table.
00288E  3               	sta z80_c
00288E  3               	inc z80_l 		; next byte of table.
00288E  3               	bne :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; fetch value from table.
00288E  3               	sta z80_b
00288E  3               
00288E  3               	ldy #2
00288E  3               	lda (z80_ix),y 		; x coordinate in hl.
00288E  3               	clc
00288E  3               	adc z80_e		; add sine lb
00288E  3               	sta (z80_ix),y		; store new coordinate lb.
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	adc z80_d		; add sine hb
00288E  3               	sta (z80_ix),y		; store new coordinate hb.
00288E  3               
00288E  3               	ldy #4
00288E  3               	lda (z80_ix),y	 	; y coordinate in hl.
00288E  3               	clc
00288E  3               	adc z80_c		; add cosine lb
00288E  3               	sta (z80_ix),y		; store new coordinate lb.
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	adc z80_b		; add cosine lb
00288E  3               	sta (z80_ix),y		; store new coordinate hb.
00288E  3               
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Move dots
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               dotl:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1		 	; move left.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               dotr:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1		 	; move left.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               dotu:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1		 	; move up.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               dotd:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1			; move down.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Check if coordinates are ok before redrawing at new position.
00288E  3               ;
00288E  3               ; left:   X>L		X=L	Ok
00288E  3               ; right:  R+15>X	X=R	Ok
00288E  3               ; top:    Y>T		Y=T	Ok
00288E  3               ; bottom: B+15>Y	Y=B	Ok
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               chkxy:
00288E  3               
00288E  3               ; top:    Y>T		Y=T	Ok
00288E  3               
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	cmp wntopx		; window top.
00288E  3               	bcs :+			; compare with top window limit.
00288E  3               	jmp kilshr		; out of window, kill shrapnel.
00288E  3               :
00288E  3               ; left:   X>L		X=L	Ok
00288E  3               
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	cmp wnlftx		; left edge.
00288E  3               	bcs :+			; compare with left window limit.
00288E  3               	jmp kilshr		; out of window, kill shrapnel.
00288E  3               :
00288E  3               ; bottom: B+15>Y	Y=B	Ok
00288E  3               
00288E  3               	lda wnbotx		; point to bottom.
00288E  3               	clc
00288E  3               	adc #15
00288E  3               	ldy #3
00288E  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	bcs :+			; compare with shrapnel x coordinate.
00288E  3               	jmp kilshr		; off screen, kill shrapnel..
00288E  3               :
00288E  3               ; right:  R+15>X	X=R	Ok
00288E  3               
00288E  3               	lda wnrgtx		; point to right edge.
00288E  3               	clc
00288E  3               	adc #15
00288E  3               	ldy #5
00288E  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	bcs :+			; compare with window limit.
00288E  3               	jmp kilshr		; off screen, kill shrapnel.
00288E  3               :
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Drop through.
00288E  3               ; Display shrapnel.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               plot:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y		; y integer.
00288E  3               	sta dispy	 	; workspace coordinates.
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y	 	; x integer.
00288E  3               	sta dispx 		; workspace coordinates.
00288E  3               
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y 		; type.
00288E  3               	bne :+			; is it a laser?
00288E  3               	jmp plot1 		; yes, draw laser instead.
00288E  3               :
00288E  3               plot0:
00288E  3               	lda dispx		; which pixel within byte do we
00288E  3               	and #7			; want to set first?
00288E  3               	tay
00288E  3               	lda dots,y 		; table of small pixel positions.
00288E  3               	sta z80_e 		; get value.
00288E  3               
00288E  3               	jsr scadd 		; screen address.
00288E  3               	ldy #0
00288E  3               	lda (scraddr),y		; see what's already there.
00288E  3               	eor z80_e
00288E  3               	sta (scraddr),y 	; put back on screen.
00288E  3               	rts
00288E  3               
00288E  3               plot1:
00288E  3               	jsr scadd 		; screen address.
00288E  3               	ldy #0
00288E  3               	lda (scraddr),y 	; fetch byte there.
00288E  3               	eor #255 		; toggle all bits.
00288E  3               	sta (scraddr),y 	; new byte.
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Switch off shrapnel
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               kilshr:
00288E  3               	lda #128
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y	; switch off shrapnel.
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Sine/cosine table
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shrsin:	.word 0,1024,391,946,724,724,946,391
00288E  3               	.word 1024,0,946,65144,724,64811,391,64589
00288E  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
00288E  3               	.word 64512,0,64589,391,64811,724,65144,946
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create trail
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               trail:
00288E  3               	ldy #1
00288E  3               	lda (z80_ix),y 	; time remaining.
00288E  3               	sec
00288E  3               	sbc #1
00288E  3               	sta (z80_ix),y
00288E  3               	bne :+
00288E  3               	jmp trailk		; time to switch it off.
00288E  3               :
00288E  3               	jsr qrand		; get a random number.
00288E  3               	lsr a 			; x or y axis?
00288E  3               	bcc :+
00288E  3               	jmp trailv		; use y.
00288E  3               :
00288E  3               ; Trail horizontal
00288E  3               
00288E  3               	lsr a 			; which direction?
00288E  3               	bcc :+
00288E  3               	jmp traill		; go left.
00288E  3               :
00288E  3               ; Trail right
00288E  3               
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1	 		; go right.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Trail left
00288E  3               
00288E  3               traill:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1 			; go left.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Trail vertical
00288E  3               
00288E  3               trailv:
00288E  3               	lsr a		 	; which direction?
00288E  3               	bcc :+
00288E  3               	jmp trailu		; go up.
00288E  3               :
00288E  3               ; Trail down
00288E  3               
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1 			; go down.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Trail up
00288E  3               
00288E  3               trailu:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1 			; go up.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Kill trail
00288E  3               
00288E  3               trailk:
00288E  3               	lda #200		; set off-screen to kill vapour trail.
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create laser beam
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               laser:
00288E  3               	ldy #1
00288E  3               	lda (z80_ix),y 		; direction.
00288E  3               	ror a 			; left or right?
00288E  3               	bcs :+
00288E  3               	jmp laserl		; move left.
00288E  3               :
00288E  3               ; Laser right
00288E  3               
00288E  3               	lda #8			; distance to travel.
00288E  3               	sta z80_b
00288E  3               	jmp laserm		; move laser.
00288E  3               
00288E  3               ; Laser left
00288E  3               
00288E  3               laserl:
00288E  3               	lda #248		; distance to travel.
00288E  3               	sta z80_b
00288E  3               laserm:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y		; x position.
00288E  3               	clc
00288E  3               	adc z80_b		; add distance.
00288E  3               	sta (z80_ix),y		; set new x coordinate.
00288E  3               
00288E  3               ; Test new block.
00288E  3               
00288E  3               	sta dispx 		; set x for block collision detection purposes.
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y 		; get y.
00288E  3               	sta dispy		; set coordinate for collision test.
00288E  3               	jsr tstbl 		; get block type there.
00288E  3               	cmp #WALL		; is it solid?
00288E  3               	bne :+
00288E  3               	jmp trailk		; yes, it cannot pass.
00288E  3               :
00288E  3               .if pflag .or dflag
00288E  3                       cmp #FODDER             ; is it fodder?
00288E  3                       bne :+
00288E  3                       jsr fdchk               ; remove fodder block.
00288E  3                       jmp trailk              ; destroy laser.
00288E  3               :
00288E  3               .endif
00288E  3                       rts                     ; no, ignore it.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Dots mask
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               dots:	.byte 128,64,32,16,8,4,2,1
00288E  3               
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Plot, preserving de.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               plotde:
00288E  3               	lda z80_d 		; put de on stack.
00288E  3               	pha
00288E  3               	lda z80_e
00288E  3               	pha
00288E  3               
00288E  3               	jsr plot 		; plot pixel.
00288E  3               
00288E  3               	pla			; restore de from stack.
00288E  3               	sta z80_e
00288E  3               	pla
00288E  3               	sta z80_d
00288E  3               
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Shoot a laser.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shoot:
00288E  3               	sta z80_c		; store direction in c register.
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	clc
00288E  3               shoot1:
00288E  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
00288E  3               	sta z80_l 		; puty y coordinate in l.
00288E  3               
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y 		; x coordinate in h.
00288E  3               	sta z80_h
00288E  3               
00288E  3               	lda z80_i		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcs :+
00288E  3               	jmp vapou2		; failed, restore ix.
00288E  3               :
00288E  3               	lda #0
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y 		; set up a laser.
00288E  3               
00288E  3               	lda z80_c
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y 		; set the direction.
00288E  3               
00288E  3               	lda z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; set y coordinate.
00288E  3               
00288E  3               	ror z80_c		; check direction we want.
00288E  3               	bcc :+
00288E  3               	jmp shootr		; shoot right.
00288E  3               :
00288E  3               	lda z80_h		; X position.
00288E  3               shoot0:
00288E  3               	and #248		; align on character boundary.
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; set x coordinate.
00288E  3               	jmp vapou0 		; draw first image.
00288E  3               shootr:
00288E  3               	lda z80_h		; x position.
00288E  3               	clc
00288E  3               	adc #15			; look right.
00288E  3               	jmp shoot0		; align and continue.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create a bit of vapour trail.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               vapour:
00288E  3               	lda z80_i		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	clc
00288E  3               vapou3:
00288E  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00288E  3               	sta z80_l
00288E  3               
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y 		; x coordinate.
00288E  3               	adc #7
00288E  3               	sta z80_h
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcc :+
00288E  3               	jmp vapou1		; no, we can use it.
00288E  3               :
00288E  3               vapou2:
00288E  3               	pla
00288E  3               	sta z80_x
00288E  3               	pla
00288E  3               	sta z80_i
00288E  3               	rts
00288E  3               vapou1:
00288E  3               	lda z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; set up y.
00288E  3               
00288E  3               	lda z80_h
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y 		; set up x coordinate.
00288E  3               
00288E  3               	jsr qrand		; get quick random number.
00288E  3               	and #15			; random time.
00288E  3               	clc
00288E  3               	adc #15			; minimum time on screen.
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y		; set time on screen.
00288E  3               
00288E  3               	lda #1
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; define particle as vapour trail.
00288E  3               vapou0:
00288E  3               	jsr chkxy		; plot first position.
00288E  3               	jmp vapou2
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create a user particle.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               ptusr:
00288E  3               	sta z80_f		; store timer.
00288E  3               
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	clc
00288E  3               	adc #7			; mid-point of sprite.
00288E  3               	sta z80_l
00288E  3               
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y 		; x coordinate.
00288E  3               	clc
00288E  3               	adc #7			; mid-point of sprite.
00288E  3               	sta z80_h
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcs ptusr1
00288E  3               	rts 			; out of slots, can't generate anything.
00288E  3               ptusr1:
00288E  3               	lda z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y 		; set up y.
00288E  3               
00288E  3               	lda z80_h
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; set up x coordinate.
00288E  3               
00288E  3               	lda z80_f 		; restore timer.
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y		; set time on screen.
00288E  3               
00288E  3               	lda #7
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; define particle as user particle.
00288E  3               
00288E  3               	jmp chkxy		; plot first position.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create a vertical or horizontal star.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               star:
00288E  3               	lda z80_i		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcs star7		; found one we can use.
00288E  3               star0:
00288E  3               	pla 			; restore sprite pointer.
00288E  3               	sta z80_x
00288E  3               	pla
00288E  3               	sta z80_i
00288E  3               	rts 			; out of slots, can't generate anything.
00288E  3               star7:
00288E  3               	lda z80_c		; direction.
00288E  3               	and #3 			; is it left?
00288E  3               	bne :+
00288E  3               	jmp star1 		; yes, it's left.
00288E  3               :
00288E  3               	cmp #1 			; is it right?
00288E  3               	bne :+
00288E  3               	jmp star2 		; yes, it's right.
00288E  3               :
00288E  3               	cmp #2 			; is it up?
00288E  3               	bne :+
00288E  3               	jmp star3 		; yes, it's up.
00288E  3               :
00288E  3               	ldy wntopx 		; get edge of screen.
00288E  3               	iny			; down one pixel.
00288E  3               	tya
00288E  3               star8:
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y 		; set y coord.
00288E  3               	jsr qrand 		; get quick random number.
00288E  3               star9:
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; set x position.
00288E  3               
00288E  3               	lda z80_c		; direction.
00288E  3               	and #3			; zero to three.
00288E  3               	clc
00288E  3               	adc #3			; 3 to 6 for starfield.
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; define particle as star.
00288E  3               	jsr chkxy		; plot first position.
00288E  3               	jmp star0
00288E  3               star1:
00288E  3               	jsr qrand		; get quick random number.
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y 		; set y coord.
00288E  3               
00288E  3               	lda wnrgtx 		; get edge of screen.
00288E  3               	clc
00288E  3               	adc #15			; add width of sprite minus 1.
00288E  3               	jmp star9
00288E  3               star2:
00288E  3               	jsr qrand 		; get quick random number.
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; set y coord.
00288E  3               
00288E  3               	lda wnlftx		; get edge of screen.
00288E  3               	jmp star9
00288E  3               star3:
00288E  3               	lda wnbotx 		; get edge of screen.
00288E  3               	clc
00288E  3               	adc #15 		; height of sprite minus one pixel.
00288E  3               	jmp star8
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Find particle slot for lasers or vapour trail.
00288E  3               ; can't use alternate accumulator.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               fpslot:
00288E  3               	lda #<SHRAPN 		; shrapnel table.
00288E  3               	sta z80_x
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_i
00288E  3               
00288E  3               	lda #NUMSHR		; number of pieces in table.
00288E  3               	sta z80_b
00288E  3               fpslt0:
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y		; get type.
00288E  3               	asl a  			; is this slot in use?
00288E  3               	bcc :+
00288E  3               	rts			; no, we can use it.
00288E  3               :
00288E  3               	clc			; point to more shrapnel.
00288E  3               	lda z80_x
00288E  3               	adc #SHRSIZ
00288E  3               	sta z80_x
00288E  3               	bcc :+
00288E  3               	inc z80_i
00288E  3               :
00288E  3               	dec z80_b		; repeat for all shrapnel.
00288E  3               	bne fpslt0
00288E  3               
00288E  3               	clc
00288E  3               	rts 			; out of slots, can't generate anything.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create an explosion at sprite position.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               explod:
00288E  3               	sta z80_c 		; particles to create.
00288E  3               
00288E  3               	lda z80_i 		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	sta z80_l
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y		; x coordinate.
00288E  3               	sta z80_h
00288E  3               
00288E  3               	lda #<SHRAPN		; shrapnel table.
00288E  3               	sta z80_x
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_i
00288E  3               
00288E  3               	lda #NUMSHR		; number of pieces in table.
00288E  3               	sta explcnt
00288E  3               expld0:
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y		; get type.
00288E  3               	asl a 			; is this slot in use?
00288E  3               	bcs expld1		; no, we can use it.
00288E  3               expld2:
00288E  3               	clc
00288E  3               	lda z80_x
00288E  3               	adc #SHRSIZ
00288E  3               	sta z80_x
00288E  3               	bcc :+
00288E  3               	inc z80_i
00288E  3               :
00288E  3               	dec explcnt		; repeat for all shrapnel.
00288E  3               	bne expld0
00288E  3               expld3:
00288E  3               	pla			; restore sprite pointer.
00288E  3               	sta z80_x
00288E  3               	pla
00288E  3               	sta z80_i
00288E  3               	rts 			; out of slots, can't generate any more.
00288E  3               
00288E  3               expld1:
00288E  3               	lda z80_c		; shrapnel counter.
00288E  3               	and #15			; 0 to 15.
00288E  3               	clc			; add to x.
00288E  3               	adc z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; y coord.
00288E  3               
00288E  3               	lda seed3 		; crap random number.
00288E  3               	and #15			; 0 to 15.
00288E  3               	clc 			; add to y.
00288E  3               	adc z80_h
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; x coord.
00288E  3               
00288E  3               	lda #2
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; switch it on.
00288E  3               
00288E  3               	jsr chkxy		; plot first position.
00288E  3               	jsr qrand		; quick random angle.
00288E  3               	and #60 		; keep within range.
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y		; angle.
00288E  3               
00288E  3               	dec z80_c		; one less piece of shrapnel to generate.
00288E  3               	bne expld2 		; back to main explosion loop.
00288E  3               	jmp expld3 		; restore sprite pointer and exit.
00288E  3               
00288E  3               ;explcnt:	.byte 0
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Quick random
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               qrand:
00288E  3               	jsr random		; r register.
00288E  3               	eor seed3		; combine with seed.
00288E  3               	sta seed3 		; new seed.
00288E  3               	rts
00288E  3               
00288E  3               ;seed3:	.byte 0
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Display all shrapnel.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               dshrp:
00288E  3               	lda #<plotde		; display routine.
00288E  3               	sta proshx+1
00288E  3               	lda #>plotde
00288E  3               	sta proshx+2
00288E  3               	jsr proshr		; process shrapnel.
00288E  3               
00288E  3               	lda #<prosh1		; processing routine.
00288E  3               	sta proshx+1
00288E  3               	lda #>prosh1
00288E  3               	sta proshx+2
00288E  3               	rts
00288E  3               
00288E  3               ;------------------------------------------------------
00288E  3               ; Particle engine.
00288E  3               ;
00288E  3               ; Init particle data for 55 particles in SHRAPN table.
00288E  3               ; Every particle has 6 bytes.
00288E  3               ;
00288E  3               ; global:	-
00288E  3               ; local:	x,y,hl
00288E  3               ; calls:	-
00288E  3               ;------------------------------------------------------
00288E  3               
00288E  3               inishr:
00288E  3               	lda #<SHRAPN 		; table.
00288E  3               	sta z80_l
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_h
00288E  3               
00288E  3               	ldy #0
00288E  3               	ldx #NUMSHR		; shrapnel pieces to process.
00288E  3               inish0:
00288E  3               	lda #255 		; kill the shrapnel.
00288E  3               	sta (z80_hl),y
00288E  3               
00288E  3               	clc 			; point there.
00288E  3               	lda z80_l
00288E  3               	adc #SHRSIZ		; distance to next.
00288E  3               	sta z80_l
00288E  3               	bcc :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	dex
00288E  3               	bne inish0 		; round again.
00288E  3               	rts
00288E  3               
00288E  3               ;------------------------------------------------------
00288E  3               ; Check for collision between laser and sprite.
00288E  3               ;------------------------------------------------------
00288E  3               
00288E  3               lcol:
00288E  3               	lda #<SHRAPN		; shrapnel table.
00288E  3               	sta z80_l
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_h
00288E  3               
00288E  3               	lda #NUMSHR		; number of pieces in table.
00288E  3               	sta z80_b
00288E  3               lcol0:
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; get type.
00288E  3               	beq lcol1		; yes, check collision.
00288E  3               lcol3:
00288E  3               	clc			; point to more shrapnel.
00288E  3               	lda z80_l
00288E  3               	adc #SHRSIZ
00288E  3               	sta z80_l
00288E  3               	bcc :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	dec z80_b		; repeat for all shrapnel.
00288E  3               	bne lcol0
00288E  3               	rts 			; no collision, carry not set.
00288E  3               lcol1:
00288E  3               	ldy #3
00288E  3               	lda (z80_hl),y		; get y.
00288E  3               	sec
00288E  3               	ldy #8
00288E  3               	sbc (z80_ix),y		; subtract sprite y.
00288E  3               lcolh:
00288E  3               	cmp #SPR_HGT 		; within range?
00288E  3               	bcc :+
00288E  3               	jmp lcol2		; no, missed.
00288E  3               :
00288E  3               	ldy #5
00288E  3               	lda (z80_hl),y 		; get x.
00288E  3               	sec
00288E  3               	ldy #9
00288E  3               	sbc (z80_ix),y 		; subtract sprite y.
00288E  3               	cmp #16			; within range?
00288E  3               	bcs :+
00288E  3               	jmp lcol4 		; yes, collision occurred.
00288E  3               :
00288E  3               lcol2:
00288E  3               	jmp lcol3
00288E  3               lcol4:
00288E  3               	sec
00288E  3               	rts 			; return with carry set for collision.
00288E  3               .endif
00288E  3               
00288E  3               ;------------------------------------------------------
00288E  3               ; Main game engine code starts here.
00288E  3               ; After initialisation, mloop is the main loop
00288E  3               ;------------------------------------------------------
00288E  3               
00288E  3               game:
00288E  3               
00288E  3               ; Set up screen address table.
00288E  3               
00288E  3               setsat:
00288E  3  A9 00        	lda #<ScreenAddr	; start of screen.
002890  3  85 rr        	sta scraddr
002892  3  A9 04        	lda #>ScreenAddr
002894  3  85 rr        	sta scraddr+1
002896  3               
002896  3  A2 00        	ldx #0
002898  3  A0 00        	ldy #0			; vertical lines on screen.
00289A  3               setsa0:
00289A  3  A5 rr        	lda scraddr
00289C  3  99 00 DC     	sta SCADTB_lb,y		; write low byte.
00289F  3  A5 rr        	lda scraddr+1
0028A1  3  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
0028A3  3  90 02        	bcc :+
0028A5  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0028A7  3               :
0028A7  3  99 00 DD     	sta SCADTB_hb,y		; write high byte.
0028AA  3  E8           	inx
0028AB  3  E0 03        	cpx #3
0028AD  3  D0 05        	bne :+
0028AF  3  20 65 34     	jsr nline		; next line down.
0028B2  3  A2 00        	ldx #0
0028B4  3               :
0028B4  3  C8           	iny			; next position in table.
0028B5  3  D0 E3        	bne setsa0
0028B7  3               
0028B7  3               ; Init hardware and graphics mode
0028B7  3               
0028B7  3  20 C6 42     	jsr init 		; Init hardware
0028BA  3               
0028BA  3               ; Init joystick
0028BA  3               
0028BA  3  20 7E 43     	jsr joyinit		; Init joystick
0028BD  3               
0028BD  3               rpblc2:
0028BD  3               .if pflag
0028BD  3               	jsr inishr 		; initialise particle engine.
0028BD  3               .endif
0028BD  3               evintr:
0028BD  3  20 0E 3C     	jsr evnt12 		; call intro/menu event.
0028C0  3               
0028C0  3  A9 02        	lda #WALL 		; write default property.
0028C2  3  A2 00        	ldx #0
0028C4  3               clrmap:
0028C4  3  9D 00 D8     	sta MAP,x 		; block properties.
0028C7  3  9D 00 D9     	sta MAP+256,x
0028CA  3  9D 00 DA     	sta MAP+512,x
0028CD  3  9D 00 DB     	sta MAP+768,x
0028D0  3  E8           	inx			; next byte.
0028D1  3  D0 F1        	bne clrmap
0028D3  3               
0028D3  3               .if oflag
0028D3  3               	jsr iniob 		; initialise objects.
0028D3  3               .endif
0028D3  3  A9 00        	lda #0			; put zero in accumulator.
0028D5  3  85 rr        	sta gamwon		; reset game won flag.
0028D7  3               
0028D7  3  20 42 2A     	jsr inisc 		; init the score.
0028DA  3               mapst:
0028DA  3  AD AD 39     	lda stmap 		; start position on map.
0028DD  3  8D 90 39     	sta roomtb		; set up position in table, if there is one.
0028E0  3               
0028E0  3               inipbl:
0028E0  3               .if aflag
0028E0  3               	lda #<eop		; reset blockpointer
0028E0  3               	sta pbptr
0028E0  3               	lda #>eop
0028E0  3               	sta pbptr+1
0028E0  3               .endif
0028E0  3               
0028E0  3  20 78 35     	jsr initsc 		; set up first screen.
0028E3  3               
0028E3  3  A9 7F        	lda #<ssprit 		; default to spare sprite in table.
0028E5  3  85 68        	sta z80_x
0028E7  3  A9 39        	lda #>ssprit
0028E9  3  85 69        	sta z80_i
0028EB  3               evini:
0028EB  3  20 17 3C     	jsr evnt13 		; initialisation.
0028EE  3               
0028EE  3               ; Two restarts.
0028EE  3               ; First restart - clear all sprites and initialise everything.
0028EE  3               
0028EE  3               rstrt:
0028EE  3  20 E2 29     	jsr rsevt 		; restart events.
0028F1  3  20 41 28     	jsr xspr 		; clear sprite table.
0028F4  3  20 E4 36     	jsr sprlst 		; fetch pointer to screen sprites.
0028F7  3  20 6D 37     	jsr ispr 		; initialise sprite table.
0028FA  3               
0028FA  3  4C 09 29     	jmp rstrt0
0028FD  3               
0028FD  3               ; Second restart - clear all but player, and don't initialise him.
0028FD  3               
0028FD  3               rstrtn:
0028FD  3  20 E2 29     	jsr rsevt		; restart events.
002900  3  20 11 37     	jsr nspr 		; clear all non-player sprites.
002903  3  20 E4 36     	jsr sprlst 		; fetch pointer to screen sprites.
002906  3  20 AA 37     	jsr kspr 		; initialise sprite table, no more players.
002909  3               
002909  3               ; Set up the player and/or enemy sprites.
002909  3               
002909  3               rstrt0:
002909  3  A9 00        	lda #0 			; zero in accumulator.
00290B  3  85 rr        	sta nexlev 		; reset next level flag.
00290D  3  85 rr        	sta restfl 		; reset restart flag.
00290F  3  85 rr        	sta deadf 		; reset dead flag.
002911  3               
002911  3  20 4C 2D     	jsr droom 		; show screen layout.
002914  3               
002914  3               rpblc0:
002914  3               .if pflag
002914  3               	jsr inishr 		; initialise particle engine.
002914  3               .endif
002914  3               .if aflag
002914  3               	jsr rbloc		; draw blocks for this screen
002914  3               .endif
002914  3               .if oflag
002914  3               	jsr shwob		; draw objects.
002914  3               .endif
002914  3               
002914  3  A9 B3        	lda #<sprtab 		; address of sprite table, even sprites.
002916  3  85 68        	sta z80_x
002918  3  A9 38        	lda #>sprtab
00291A  3  85 69        	sta z80_i
00291C  3  20 05 32     	jsr dspr 		; display sprites.
00291F  3               
00291F  3  A9 C4        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002921  3  85 68        	sta z80_x
002923  3  A9 38        	lda #>(sprtab+TABSIZ)
002925  3  85 69        	sta z80_i
002927  3  20 05 32     	jsr dspr 		; display sprites.
00292A  3               
00292A  3               
00292A  3               mloop:
00292A  3  20 5A 43     	jsr vsync 		; synchronise with display.
00292D  3  A9 B3        	lda #<sprtab 		; address of sprite table, even sprites.
00292F  3  85 68        	sta z80_x
002931  3  A9 38        	lda #>sprtab
002933  3  85 69        	sta z80_i
002935  3  20 05 32     	jsr dspr 		; display even sprites.
002938  3               
002938  3               ;	jsr plsnd 		; play sounds.
002938  3               
002938  3  20 8D 28     	jsr proshr
00293B  3  A9 C4        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00293D  3  85 68        	sta z80_x
00293F  3  A9 38        	lda #>(sprtab+TABSIZ)
002941  3  85 69        	sta z80_i
002943  3  20 05 32     	jsr dspr 		; display odd sprites.
002946  3               
002946  3  A9 7F        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002948  3  85 68        	sta z80_x
00294A  3  A9 39        	lda #>(ssprit)
00294C  3  85 69        	sta z80_i
00294E  3               evlp1:
00294E  3  20 0C 3C     	jsr evnt10 		; called once per main loop.
002951  3               
002951  3  20 83 31     	jsr pspr 		; process sprites.
002954  3               
002954  3               ; Main loop events.
002954  3               
002954  3  A9 7F        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002956  3  85 68        	sta z80_x
002958  3  A9 39        	lda #>ssprit
00295A  3  85 69        	sta z80_i
00295C  3               evlp2:
00295C  3  20 0D 3C     	jsr evnt11 		; called once per main loop.
00295F  3               bsortx:
00295F  3  20 F9 30     	jsr bsort 		; sort sprites.
002962  3               
002962  3  A5 rr        	lda nexlev		; finished level flag.
002964  3  F0 03        	beq :+
002966  3  4C 8E 29     	jmp newlev		; is set, go to next level.
002969  3               :
002969  3  A5 rr        	lda gamwon		; finished game flag.
00296B  3  F0 03        	beq :+
00296D  3  4C 9D 29     	jmp evwon		; is set, finish the game.
002970  3               :
002970  3  A5 rr        	lda restfl 		; finished level flag.
002972  3  C9 01        	cmp #1			; has it been set?
002974  3  D0 03        	bne :+
002976  3  4C EE 28     	jmp rstrt		; yes, go to next level.
002979  3               :
002979  3  C9 02        	cmp #2			; has it been set?
00297B  3  D0 03        	bne :+
00297D  3  4C FD 28     	jmp rstrtn		; yes, go to next level.
002980  3               :
002980  3  A5 rr        	lda deadf 		; dead flag.
002982  3  F0 03        	beq :+
002984  3  4C A3 29     	jmp pdead		; yes, player dead.
002987  3               :
002987  3               ; back to start of main loop.
002987  3               
002987  3  E6 rr        	inc frmno
002989  3  E6 rr        	inc clock
00298B  3  4C 2A 29     	jmp mloop		; switched to a jmp mloop during test mode.
00298E  3               
00298E  3               ;----------------------------------------------------------
00298E  3               ; Read blocks from list and update screen accordingly.
00298E  3               ;----------------------------------------------------------
00298E  3               
00298E  3               .if aflag
00298E  3               rbloc:
00298E  3               	lda #<eop		; reset temp blockpointer
00298E  3               	sta pbbuf
00298E  3               	lda #>eop
00298E  3               	sta pbbuf+1
00298E  3               
00298E  3               rbloc2:
00298E  3               	lda pbbuf			; check for last block
00298E  3               	cmp pbptr
00298E  3               	bne rbloc1
00298E  3               	lda pbbuf+1
00298E  3               	cmp pbptr+1
00298E  3               	bne rbloc1
00298E  3               	rts
00298E  3               rbloc1:
00298E  3               	ldy #0
00298E  3               	lda (pbbuf),y		; check if block for this scno
00298E  3               	cmp scno
00298E  3               	bne rbloc0		; if not, skip
00298E  3               	iny
00298E  3               	lda (pbbuf),y		; get y
00298E  3               	sta dispy
00298E  3               	iny
00298E  3               	lda (pbbuf),y		; get x
00298E  3               	sta dispx
00298E  3               	iny
00298E  3               	lda (pbbuf),y		; get blocknr
00298E  3               	jsr pattr2		; draw block
00298E  3               rbloc0:
00298E  3               	clc			; point to next block
00298E  3               	lda pbbuf
00298E  3               	adc #4
00298E  3               	sta pbbuf
00298E  3               	bcc rbloc2
00298E  3               	inc pbbuf+1
00298E  3               	jmp rbloc2
00298E  3               .endif
00298E  3               
00298E  3               ;----------------------------------------------------------
00298E  3               ; New level
00298E  3               ;----------------------------------------------------------
00298E  3               
00298E  3               newlev:
00298E  3  A5 rr        	lda scno 			; current screen.
002990  3  18           	clc
002991  3  69 01        	adc #1				; next screen.
002993  3  CD 89 3F     	cmp numsc			; total number of screens.
002996  3  B0 05        	bcs evwon			; yes, game finished.
002998  3  85 rr        	sta scno			; set new level number.
00299A  3  4C EE 28     	jmp rstrt			; restart, clearing all aliens.
00299D  3               
00299D  3               evwon:
00299D  3  20 47 3C     	jsr evnt18		 	; game completed.
0029A0  3  4C B7 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0029A3  3               
0029A3  3               ;----------------------------------------------------------
0029A3  3               ; Player dead.
0029A3  3               ;----------------------------------------------------------
0029A3  3               
0029A3  3               pdead:
0029A3  3  A9 00        	lda #0				; zeroise accumulator.
0029A5  3  85 rr        	sta deadf			; reset dead flag.
0029A7  3               evdie:
0029A7  3  20 1D 3C     	jsr evnt16 			; death subroutine.
0029AA  3  A5 rr        	lda numlif			; number of lives.
0029AC  3  F0 03        	beq :+
0029AE  3  4C EE 28     	jmp rstrt 			; restart game.
0029B1  3               :
0029B1  3               evfail:
0029B1  3  20 1E 3C     	jsr evnt17 			; failure event.
0029B4  3  4C 8E 28     	jmp game			; restart game
0029B7  3               
0029B7  3               ;----------------------------------------------------------
0029B7  3               ; Tidy things up
0029B7  3               ;----------------------------------------------------------
0029B7  3               
0029B7  3               tidyup:
0029B7  3  A0 00        	ldy #0				; digits to check.
0029B9  3               tidyu2:
0029B9  3  B9 2B 2B     	lda score,y 			; get score digit.
0029BC  3  CD 31 2B     	cmp hiscor 			; are we larger than high score digit?
0029BF  3  90 07        	bcc tidyu0			; high score is bigger.
0029C1  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0029C3  3  C8           	iny				; next digit of high score.
0029C4  3  C0 06        	cpy #6
0029C6  3  D0 F1        	bne tidyu2			; repeat for all digits
0029C8  3               tidyu0:
0029C8  3  A9 2B        	lda #<score			; return pointing to score.
0029CA  3  85 62        	sta z80_c
0029CC  3  A9 2B        	lda #>score
0029CE  3  85 63        	sta z80_b
0029D0  3  60           	rts
0029D1  3               tidyu1:
0029D1  3  A0 05        	ldy #5
0029D3  3               tidyu3:
0029D3  3  B9 2B 2B     	lda score,y			; score.
0029D6  3  99 31 2B     	sta hiscor,y			; high score.
0029D9  3  88           	dey
0029DA  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029DC  3               evnewh:
0029DC  3  20 48 3C     	jsr evnt19			; new high score event.
0029DF  3  4C C8 29     	jmp tidyu0			; tidy up.
0029E2  3               
0029E2  3               ;--------------------------------------------------
0029E2  3               ; Restart event.
0029E2  3               ;--------------------------------------------------
0029E2  3               
0029E2  3               rsevt:
0029E2  3  A9 7F        	lda #<ssprit 			; default to spare element in table.
0029E4  3  85 68        	sta z80_x
0029E6  3  A9 39        	lda #>ssprit
0029E8  3  85 69        	sta z80_i
0029EA  3               evrs:
0029EA  3  4C 18 3C     	jmp evnt14	 		; call restart event.
0029ED  3               
0029ED  3               ;------------------------------------------------------------------
0029ED  3               ; Copy number passed in a to string position bc, right-justified.
0029ED  3               ;
0029ED  3               ; Input:
0029ED  3               ;  A  = number
0029ED  3               ;  BC = string address
0029ED  3               ;
0029ED  3               ; Output:
0029ED  3               ;  BC = string with number
0029ED  3               ;-----------------------------------------------------------------
0029ED  3               
0029ED  3               num2ch:
0029ED  3  85 65        	sta z80_d		; Save number
0029EF  3               
0029EF  3  A9 00        	lda #0
0029F1  3  85 rr        	sta flag
0029F3  3               numdg3:
0029F3  3  A2 64        	ldx #100		; hundreds column.
0029F5  3  86 64        	stx z80_e
0029F7  3  20 07 2A     	jsr numdg		; show digit.
0029FA  3               numdg2:
0029FA  3  A2 0A        	ldx #10			; tens column.
0029FC  3  86 64        	stx z80_e
0029FE  3  20 07 2A     	jsr numdg		; show digit.
002A01  3               
002A01  3  E6 rr        	inc flag
002A03  3  A2 01        	ldx #1			; units column.
002A05  3  86 64        	stx z80_e
002A07  3               numdg:
002A07  3  A9 30        	lda #48			; clear digit.
002A09  3  85 61        	sta z80_a
002A0B  3               numdg1:
002A0B  3  A5 65        	lda z80_d
002A0D  3  C5 64        	cmp z80_e
002A0F  3  90 0E        	bcc numdg0		; nothing to show.
002A11  3  38           	sec
002A12  3  A5 65        	lda z80_d
002A14  3  E5 64        	sbc z80_e		; subtract from column.
002A16  3  85 65        	sta z80_d
002A18  3  E6 61        	inc z80_a		; increment digit.
002A1A  3  E6 rr        	inc flag
002A1C  3  4C 0B 2A     	jmp numdg1		; repeat until column is zero.
002A1F  3               numdg0:
002A1F  3  A0 00        	ldy #0
002A21  3  A5 61        	lda z80_a
002A23  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002A25  3  A5 rr        	lda flag
002A27  3  F0 06        	beq :+
002A29  3  E6 62        	inc z80_c		; next buffer position.
002A2B  3  D0 02        	bne :+
002A2D  3  E6 63        	inc z80_b
002A2F  3               :
002A2F  3  60           	rts
002A30  3               num2dd:
002A30  3  85 65        	sta z80_d		; Save number
002A32  3               
002A32  3  A9 01        	lda #1
002A34  3  85 rr        	sta flag
002A36  3               
002A36  3  4C FA 29     	jmp numdg2
002A39  3               num2td:
002A39  3  85 65        	sta z80_d		; Save number
002A3B  3               
002A3B  3  A9 01        	lda #1
002A3D  3  85 rr        	sta flag
002A3F  3  4C F3 29     	jmp numdg3
002A42  3               
002A42  3               ;flag:	.byte 0
002A42  3               
002A42  3               ;---------------------------------------------------------
002A42  3               ; Reset score to "000000"
002A42  3               ;---------------------------------------------------------
002A42  3               
002A42  3               inisc:
002A42  3  A9 30        	lda #'0'
002A44  3  A2 05        	ldx #5			; digits to initialise.
002A46  3               inisc0:
002A46  3  9D 2B 2B     	sta score,x 		; write zero digit.
002A49  3  CA           	dex			; next column.
002A4A  3  10 FA        	bpl inisc0		; repeat for all digits.
002A4C  3               
002A4C  3  60           	rts
002A4D  3               
002A4D  3               ;-----------------------------------------------------
002A4D  3               ; Multiply h by d and return in hl.
002A4D  3               ;
002A4D  3               ; Input:
002A4D  3               ;  H = first number
002A4D  3               ;  D = second number
002A4D  3               ;
002A4D  3               ; Output:
002A4D  3               ;  HL = result H x D
002A4D  3               ;-----------------------------------------------------
002A4D  3               
002A4D  3               imul:
002A4D  3  A5 65        	lda z80_d		; HL = H * D
002A4F  3  85 64        	sta z80_e
002A51  3  A5 67        	lda z80_h
002A53  3  85 62        	sta z80_c		; make c first multiplier.
002A55  3               imul0:
002A55  3  A9 00        	lda #0			; zeroise total.
002A57  3  85 66        	sta z80_l
002A59  3  85 67        	sta z80_h
002A5B  3               
002A5B  3  A5 67        	lda z80_h
002A5D  3  85 65        	sta z80_d		; zeroise high byte.
002A5F  3               
002A5F  3  A9 08        	lda #8			; repeat 8 times.
002A61  3  85 63        	sta z80_b
002A63  3               imul1:
002A63  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A65  3  90 0E        	bcc imul2		; wasn't set.
002A67  3  18           	clc			; bit was set, so add de.
002A68  3  A5 66        	lda z80_l
002A6A  3  65 64        	adc z80_e
002A6C  3  85 66        	sta z80_l
002A6E  3  A5 67        	lda z80_h
002A70  3  65 65        	adc z80_d
002A72  3  85 67        	sta z80_h
002A74  3  18           	clc 			; reset carry.
002A75  3               imul2:
002A75  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A77  3  26 65        	rol z80_d
002A79  3  C6 63        	dec z80_b
002A7B  3  D0 E6        	bne imul1		; repeat 8 times.
002A7D  3               
002A7D  3  60           	rts
002A7E  3               
002A7E  3               ;-----------------------------------------------
002A7E  3               ; Divide d by e and return in d, remainder in a.
002A7E  3               ;
002A7E  3               ; Input:
002A7E  3               ;  D = first number
002A7E  3               ;  E = second number
002A7E  3               ;
002A7E  3               ; Output:
002A7E  3               ;  D = result D/E
002A7E  3               ;  A = remainder
002A7E  3               ;-----------------------------------------------
002A7E  3               
002A7E  3               idiv:
002A7E  3  A9 00        	lda #0
002A80  3  A0 08        	ldy #8		 	; bits to shift.
002A82  3  06 65        	asl z80_d
002A84  3               idiv0:
002A84  3  2A           	rol a 			; multiply d by 2.
002A85  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A87  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A89  3  E5 64        	sbc z80_e		; subtract it.
002A8B  3               idiv1:
002A8B  3  26 65        	rol z80_d		; rotate into d.
002A8D  3  88           	dey
002A8E  3  D0 F4        	bne idiv0		; repeat
002A90  3  60           	rts
002A91  3               
002A91  3               ;---------------------------------------------------
002A91  3               ; Play AY sound effect
002A91  3               ;---------------------------------------------------
002A91  3               
002A91  3               plsnd:
002A91  3  60           	rts
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Objects handling.
002A92  3               ; 32 bytes for image
002A92  3               ; 3 for room, y and x
002A92  3               ; 3 for starting room, y and x.
002A92  3               ; 254 = disabled.
002A92  3               ; 255 = object in player"s pockets.
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Show items present.
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               .if oflag
002A92  3               shwob:
002A92  3               	lda #<objdta 			; objects table.
002A92  3               	sta z80_l
002A92  3               	lda #>objdta
002A92  3               	sta z80_h
002A92  3               
002A92  3               	lda numob 			; number of objects in the game.
002A92  3               	sta sprcnt
002A92  3               shwob0:
002A92  3               	ldy #32 			; distance to room number.
002A92  3               	lda (z80_hl),y 			; same as an item?
002A92  3               	cmp scno 			; current location.
002A92  3               	bne :+
002A92  3               	jsr dobj 			; yes, display object.
002A92  3               :
002A92  3               	clc
002A92  3               	lda z80_l
002A92  3               	adc #38 			; distance to next item.
002A92  3               	sta z80_l
002A92  3               	lda z80_h
002A92  3               	adc #0
002A92  3               	sta z80_h	 		; point to it.
002A92  3               	dec sprcnt
002A92  3               	bne shwob0 			; repeat for others.
002A92  3               	rts
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Display object.
002A92  3               ; hl must point to object's start address.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  HL = object address
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               dobj:
002A92  3               	ldy #33
002A92  3               	lda (z80_hl),y 			; point to y.
002A92  3               	sta dispy
002A92  3               	iny
002A92  3               	lda (z80_hl),y 			; point to x.
002A92  3               	sta dispx
002A92  3               dobj1:
002A92  3               	jmp sprite 			; draw this sprite.
002A92  3               
002A92  3               ;--------------------------------------
002A92  3               ; Remove an object.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;--------------------------------------
002A92  3               
002A92  3               remob:
002A92  3               	cmp numob			; number of objects in game.
002A92  3               	bcc :+				; are we checking past the end?
002A92  3               	rts				; yes, can't get non-existent item.
002A92  3               :
002A92  3               	pha				; remember object.
002A92  3               	jsr getob			; pick it up if we haven't already got it.
002A92  3               	pla				; retrieve object number.
002A92  3               	jsr gotob			; get its address.
002A92  3               	lda #254
002A92  3               	ldy #32
002A92  3               	sta (z80_hl),y			; remove it.
002A92  3               	rts
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Pick up object number held in the accumulator.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               getob:
002A92  3               	cmp numob 		; number of objects in game.
002A92  3               	bcc :+			; are we checking past the end?
002A92  3               	rts			; yes, can't get non-existent item.
002A92  3               :
002A92  3               	jsr gotob 		; check if we already have it.
002A92  3               	cmp #255
002A92  3               	bne :+
002A92  3               	rts			; we already do.
002A92  3               :
002A92  3               	ldy #32
002A92  3               	lda (z80_hl),y		; is it on this screen?
002A92  3               	cmp scno 		; current screen.
002A92  3               	bne getob0		; not on screen, so nothing to delete.
002A92  3               
002A92  3               	lda #255
002A92  3               	sta (z80_hl),y		; pick it up.
002A92  3               	iny 			; point to y coord.
002A92  3               getob1:
002A92  3               	ldy #33
002A92  3               	lda (z80_hl),y		; y coord.
002A92  3               	sta dispy
002A92  3               	ldy #34
002A92  3               	lda (z80_hl),y 		; x coord.
002A92  3               	sta dispx
002A92  3               	jmp dobj1 		; delete object sprite.
002A92  3               getob0:
002A92  3               	lda #255
002A92  3               	sta (z80_hl),y 		; pick it up.
002A92  3               	rts
002A92  3               .endif
002A92  3               
002A92  3               ;-----------------------------------------------------------------
002A92  3               ; Got object check.
002A92  3               ; Call with object in accumulator, returns zero set if in pockets.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;-----------------------------------------------------------------
002A92  3               .if oflag .or mflag
002A92  3               gotob:
002A92  3               	cmp numob 		; number of objects in game.
002A92  3               	bcc :+ 			; are we checking past the end?
002A92  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A92  3               :
002A92  3               	jsr findob		; find the object.
002A92  3               gotob1:
002A92  3               	rts
002A92  3               
002A92  3               gotob0:
002A92  3               	lda #254 		; missing.
002A92  3               	jmp gotob1
002A92  3               
002A92  3               findob:
002A92  3               	pha			; save object number
002A92  3               	lda #<objdta 		; objects.
002A92  3               	sta z80_l
002A92  3               	lda #>objdta
002A92  3               	sta z80_h
002A92  3               	pla			; retreive object number
002A92  3               	beq fndob1 		; is it zero? yes, skip loop.
002A92  3               	tax 			; loop counter
002A92  3               fndob2:
002A92  3               	clc
002A92  3               	lda z80_l
002A92  3               	adc #38 		; size of each object.
002A92  3               	sta z80_l
002A92  3               	bcc :+
002A92  3               	inc z80_h
002A92  3               :
002A92  3               	dex 			; repeat until we find address.
002A92  3               	bne fndob2
002A92  3               fndob1:
002A92  3               	ldy #32			; distance to room it's in.
002A92  3               	lda (z80_hl),y		; fetch status.
002A92  3               	rts
002A92  3               .endif
002A92  3               
002A92  3               ;---------------------------------------------
002A92  3               ; Drop object number at (dispx, dispy).
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;---------------------------------------------
002A92  3               
002A92  3               .if oflag
002A92  3               drpob:
002A92  3               	cmp numob 		; are we checking past the end?
002A92  3               	bcc :+
002A92  3               	rts			; yes, can't drop non-existent item.
002A92  3               :
002A92  3               	jsr gotob		; make sure object is in inventory.
002A92  3               	cmp scno		; already on this screen?
002A92  3               	bne :+
002A92  3               	rts			; yes, nothing to do.
002A92  3               :
002A92  3               	ldy #32
002A92  3               	lda scno
002A92  3               	sta (z80_hl),y		; bring onto screen.
002A92  3               	lda dispy		; sprite y coordinate.
002A92  3               	iny
002A92  3               	sta (z80_hl),y		; point to object y.
002A92  3               	lda dispx 		; sprite x coordinate.
002A92  3               	iny
002A92  3               	sta (z80_hl),y 		; point to object x
002A92  3               	jmp dobj		; draw the object sprite.
002A92  3               
002A92  3               ;-----------------------------------------------
002A92  3               ; Seek objects at sprite position.
002A92  3               ;
002A92  3               ; Output:
002A92  3               ;  A = object number, if not found A=255
002A92  3               ;-----------------------------------------------
002A92  3               
002A92  3               skobj:
002A92  3               	lda #<objdta 		; pointer to objects.
002A92  3               	sta z80_l
002A92  3               	lda #>objdta
002A92  3               	sta z80_h
002A92  3               
002A92  3               	lda numob 		; number of objects in game.
002A92  3               	sta z80_b 		; set up the loop counter.
002A92  3               skobj0:
002A92  3               	lda scno		; current room number.
002A92  3               	ldy #32
002A92  3               	cmp (z80_hl),y		; is object in here?
002A92  3               	bne :+
002A92  3               	jsr skobj1		; yes, check coordinates.
002A92  3               :
002A92  3               	clc			; point to next object in table.
002A92  3               	lda z80_l
002A92  3               	adc #38			; size of each object.
002A92  3               	sta z80_l
002A92  3               	bcc :+
002A92  3               	inc z80_h
002A92  3               :
002A92  3               	dec z80_b
002A92  3               	bne skobj0		; repeat for all objects.
002A92  3               
002A92  3               	lda #255		; end of list and nothing found, return 255.
002A92  3               	rts
002A92  3               
002A92  3               skobj1:
002A92  3               	ldy #33			; point to y coordinate.
002A92  3               	lda (z80_hl),y		; point to y coordinate.
002A92  3               	sec
002A92  3               	ldy #8
002A92  3               	sbc (z80_ix),y 		; subtract sprite y.
002A92  3               	clc
002A92  3               	adc #15			; add sprite height minus one.
002A92  3               	cmp #31			; within range?
002A92  3               	bcs skobj2		; no, ignore object.
002A92  3               
002A92  3               	ldy #34			; point to x coordinate now.
002A92  3               	lda (z80_hl),y 		; get coordinate.
002A92  3               	sec
002A92  3               	ldy #9
002A92  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A92  3               	clc			; add sprite width minus one.
002A92  3               	adc #15
002A92  3               	cmp #31			; within range?
002A92  3               	bcs skobj2		; no, ignore object.
002A92  3               
002A92  3               	pla			; remove return address from stack.
002A92  3               	pla
002A92  3               
002A92  3               	lda numob 		; objects in game.
002A92  3               	sec
002A92  3               	sbc z80_b		; subtract loop counter.
002A92  3               skobj2:
002A92  3               	rts			; accumulator now points to object.
002A92  3               .endif
002A92  3               
002A92  3               ;---------------------------------------------------------------------
002A92  3               ; Spawn a new sprite.
002A92  3               ;---------------------------------------------------------------------
002A92  3               
002A92  3               .if gflag
002A92  3                 offset = 0
002A92  3               .else
002A92  3                 offset = 20
002A92  3               .endif
002A92  3               
002A92  3               spawn:
002A92  3  A9 B3        	lda #<sprtab		; sprite table.
002A94  3  85 66        	sta z80_l
002A96  3  A9 38        	lda #>sprtab
002A98  3  85 67        	sta z80_h
002A9A  3               numsp1:
002A9A  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A9C  3  85 rr        	sta spcnt
002A9E  3               spaw0:
002A9E  3  A0 00        	ldy #0
002AA0  3  B1 66        	lda (z80_hl),y		; get sprite type.
002AA2  3  C9 FF        	cmp #255		; is it an unused slot?
002AA4  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002AA6  3               
002AA6  3  18           	clc 			; point to next sprite in table.
002AA7  3  A5 66        	lda z80_l
002AA9  3  69 11        	adc #TABSIZ		; size of each entry.
002AAB  3  85 66        	sta z80_l
002AAD  3  90 02        	bcc :+
002AAF  3  E6 67        	inc z80_h
002AB1  3               :
002AB1  3  C6 rr        	dec spcnt		; one less iteration.
002AB3  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002AB5  3               
002AB5  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002AB5  3               
002AB5  3               spaw1:
002AB5  3  A5 69        	lda z80_i		; address of original sprite.
002AB7  3  48           	pha
002AB8  3  A5 68        	lda z80_x
002ABA  3  48           	pha
002ABB  3               
002ABB  3  A5 66        	lda z80_l		; store spawned sprite address.
002ABD  3  85 rr        	sta spptr
002ABF  3  A5 67        	lda z80_h
002AC1  3  85 rr        	sta spptr+1
002AC3  3               
002AC3  3  A5 62        	lda z80_c
002AC5  3  A0 00        	ldy #0
002AC7  3  91 66        	sta (z80_hl),y 		; set the type.
002AC9  3  A0 05        	ldy #5
002ACB  3  91 66        	sta (z80_hl),y		; copy
002ACD  3               
002ACD  3  A5 63        	lda z80_b
002ACF  3  A0 01        	ldy #1
002AD1  3  91 66        	sta (z80_hl),y		; set the image.
002AD3  3  A0 06        	ldy #6
002AD5  3  91 66        	sta (z80_hl),y		; copy
002AD7  3               
002AD7  3  A9 00        	lda #0 			; frame zero.
002AD9  3  A0 02        	ldy #2
002ADB  3  91 66        	sta (z80_hl),y		; set frame.
002ADD  3  A0 07        	ldy #7
002ADF  3  91 66        	sta (z80_hl),y		; copy
002AE1  3               
002AE1  3  A0 08        	ldy #8
002AE3  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002AE5  3  A0 03        	ldy #3
002AE7  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AE9  3  A0 08        	ldy #8
002AEB  3  91 66        	sta (z80_hl),y		; copy
002AED  3               
002AED  3  A0 09        	ldy #9
002AEF  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AF1  3  A0 04        	ldy #4
002AF3  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AF5  3  A0 09        	ldy #9
002AF7  3  91 66        	sta (z80_hl),y		; copy
002AF9  3               
002AF9  3  A0 0A        	ldy #10			; direction of original.
002AFB  3  B1 68        	lda (z80_ix),y
002AFD  3  91 66        	sta (z80_hl),y		; direction
002AFF  3               
002AFF  3  A9 00        	lda #0
002B01  3  A0 0B        	ldy #11
002B03  3  91 66        	sta (z80_hl),y		; reset parameter.
002B05  3  C8           	iny
002B06  3  91 66        	sta (z80_hl),y		; reset parameter.
002B08  3  C8           	iny
002B09  3  91 66        	sta (z80_hl),y		; reset parameter.
002B0B  3  C8           	iny
002B0C  3  91 66        	sta (z80_hl),y		; reset parameter.
002B0E  3               rtssp:
002B0E  3  A5 rr        	lda spptr		; address of new sprite.
002B10  3  85 68        	sta z80_x
002B12  3  A5 rr        	lda spptr+1
002B14  3  85 69        	sta z80_i
002B16  3               evis1:
002B16  3  20 E9 3B     	jsr evnt09 		; call sprite initialisation event.
002B19  3               
002B19  3  A5 rr        	lda spptr 		; address of new sprite.
002B1B  3  85 68        	sta z80_x
002B1D  3  A5 rr        	lda spptr+1
002B1F  3  85 69        	sta z80_i
002B21  3  20 4C 33     	jsr sspria 		; display the new sprite.
002B24  3               
002B24  3  68           	pla			; address of original sprite.
002B25  3  85 68        	sta z80_x
002B27  3  68           	pla
002B28  3  85 69        	sta z80_i
002B2A  3               
002B2A  3  60           	rts
002B2B  3               
002B2B  3               ;spcnt:	.byte 0
002B2B  3               ;spptr:	.word 0			; spawned sprite pointer.
002B2B  3               ;seed:	.byte 0			; seed for random numbers.
002B2B  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B2F  3  30 30        
002B31  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B35  3  30 30        
002B37  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B3B  3  30 30        
002B3D  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B3F  3               
002B3F  3               ;----------------------------------------------------
002B3F  3               ; Check y-pos
002B3F  3               ;----------------------------------------------------
002B3F  3               
002B3F  3               checkx:
002B3F  3  A5 rr        	lda dispy		; y position.
002B41  3  C9 19        	cmp #ScrHeight			; off screen?
002B43  3  B0 01        	bcs :+
002B45  3  60           	rts			; no, it's okay.
002B46  3               :
002B46  3  68           	pla			; remove return address from stack.
002B47  3  85 66        	sta z80_l
002B49  3  68           	pla
002B4A  3  85 67        	sta z80_h
002B4C  3  60           	rts
002B4D  3               
002B4D  3               ;-----------------------------------------------
002B4D  3               ; Displays the current high score.
002B4D  3               ;-----------------------------------------------
002B4D  3               
002B4D  3               dhisc:
002B4D  3  A9 31        	lda #<hiscor 		; high score text.
002B4F  3  8D 84 2B     	sta dscor3+1
002B52  3  8D A8 2B     	sta bscor3+1
002B55  3  A9 2B        	lda #>hiscor
002B57  3  8D 85 2B     	sta dscor3+2
002B5A  3  8D A9 2B     	sta bscor3+2
002B5D  3  4C 70 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B60  3               
002B60  3               ;------------------------------------------------------
002B60  3               ; Displays the current score.
002B60  3               ;------------------------------------------------------
002B60  3               
002B60  3               dscor:
002B60  3  A9 2B        	lda #<score		; score text.
002B62  3  8D 84 2B     	sta dscor3+1
002B65  3  8D A8 2B     	sta bscor3+1
002B68  3  A9 2B        	lda #>score
002B6A  3  8D 85 2B     	sta dscor3+2
002B6D  3  8D A9 2B     	sta bscor3+2
002B70  3               dscor1:
002B70  3  8C A4 2B     	sty tmpscr
002B73  3  20 D7 30     	jsr preprt		; set up font and print position.
002B76  3  20 3F 2B     	jsr checkx		; make sure we're in a printable range.
002B79  3               
002B79  3               ;	lda #6			; digits to display.
002B79  3               ;	sta z80_b
002B79  3  A5 rr        	lda prtmod		; get print mode.
002B7B  3  F0 03        	beq :+			; standard size text?
002B7D  3  4C A5 2B     	jmp bscor0		; no, show double-height.
002B80  3               :
002B80  3               dscor0:
002B80  3               ;	ldy #0
002B80  3               ;	lda (z80_hl),y 		; fetch character.
002B80  3  AC A4 2B     	ldy tmpscr
002B83  3               dscor3:
002B83  3  B9 2B 2B     	lda score,y
002B86  3  20 BD 2C     	jsr pchar 		; display character.
002B89  3  E6 rr        	inc dispx		; move along x coordinate
002B8B  3               
002B8B  3               ;	inc z80_l		; next score column.
002B8B  3               ;	bne :+
002B8B  3               ;	inc z80_h
002B8B  3               ;:
002B8B  3  EE A4 2B     	inc tmpscr
002B8E  3  C6 63        	dec z80_b
002B90  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B92  3               dscor2:
002B92  3  AD A2 39     	lda bcolour
002B95  3  20 BD 2C     	jsr pchar
002B98  3  20 C4 30     	jsr nexpos
002B9B  3               
002B9B  3  A5 rr        	lda dispx 		; set up display coordinates.
002B9D  3  85 rr        	sta charx
002B9F  3  A5 rr        	lda dispy
002BA1  3  85 rr        	sta chary
002BA3  3  60           	rts
002BA4  3               
002BA4  3  00           tmpscr:	.byte 0
002BA5  3               ;------------------------------------------------------
002BA5  3               ; Displays the current score in double-height characters.
002BA5  3               ;
002BA5  3               ; Input:
002BA5  3               ;  B  = digit number
002BA5  3               ;  HL = score string
002BA5  3               ;------------------------------------------------------
002BA5  3               
002BA5  3               bscor0:
002BA5  3               ;	ldy #0
002BA5  3               
002BA5  3               ;	lda (z80_hl),y 		; fetch character.
002BA5  3  A4 rr        	ldy tmp
002BA7  3               bscor3:
002BA7  3  B9 2B 2B     	lda score,y
002BAA  3  20 95 30     	jsr bchar 		; display big char.
002BAD  3               
002BAD  3               ;	inc z80_l 		; next score column.
002BAD  3               ;	bne :+
002BAD  3               ;	inc z80_h
002BAD  3               ;:
002BAD  3  E6 rr        	inc tmp
002BAF  3  C6 63        	dec z80_b
002BB1  3  F0 03        	beq :+
002BB3  3  4C A5 2B     	jmp bscor0 		; repeat for all digits.
002BB6  3               :
002BB6  3  4C 92 2B     	jmp dscor2 		; tidy up line and column variables.
002BB9  3               
002BB9  3               ;-----------------------------------------------------
002BB9  3               ; Adds number in the hl pair to the score.
002BB9  3               ;-----------------------------------------------------
002BB9  3               
002BB9  3               addsc:
002BB9  3  A9 2C        	lda #<(score+1) 	; ten thousands column.
002BBB  3  85 64        	sta z80_e
002BBD  3  A9 2B        	lda #>(score+1)
002BBF  3  85 65        	sta z80_d
002BC1  3  A9 10        	lda #<10000		; amount to add each time.
002BC3  3  85 62        	sta z80_c
002BC5  3  A9 27        	lda #>10000
002BC7  3  85 63        	sta z80_b
002BC9  3  20 0D 2C     	jsr incsc		; add to score.
002BCC  3               
002BCC  3  E6 64        	inc z80_e		; thousands column.
002BCE  3  D0 02        	bne :+
002BD0  3  E6 65        	inc z80_d
002BD2  3               :
002BD2  3  A9 E8        	lda #<1000		; amount to add each time.
002BD4  3  85 62        	sta z80_c
002BD6  3  A9 03        	lda #>1000
002BD8  3  85 63        	sta z80_b
002BDA  3  20 0D 2C     	jsr incsc 		; add to score.
002BDD  3               
002BDD  3  E6 64        	inc z80_e		; hundreds column.
002BDF  3  D0 02        	bne :+
002BE1  3  E6 65        	inc z80_d
002BE3  3               :
002BE3  3  A9 64        	lda #<100		; amount to add each time.
002BE5  3  85 62        	sta z80_c
002BE7  3  A9 00        	lda #>100
002BE9  3  85 63        	sta z80_b
002BEB  3  20 0D 2C     	jsr incsc		; add to score.
002BEE  3               
002BEE  3  E6 64        	inc z80_e 		; tens column.
002BF0  3  D0 02        	bne :+
002BF2  3  E6 65        	inc z80_d
002BF4  3               :
002BF4  3  A9 0A        	lda #<10		; amount to add each time.
002BF6  3  85 62        	sta z80_c
002BF8  3  A9 00        	lda #>10
002BFA  3  85 63        	sta z80_b
002BFC  3  20 0D 2C     	jsr incsc 		; add to score.
002BFF  3               
002BFF  3  E6 64        	inc z80_e		; units column.
002C01  3  D0 02        	bne :+
002C03  3  E6 65        	inc z80_d
002C05  3               :
002C05  3  A9 01        	lda #<1			; units.
002C07  3  85 62        	sta z80_c
002C09  3  A9 00        	lda #>1
002C0B  3  85 63        	sta z80_b
002C0D  3               incsc:
002C0D  3  A5 67        	lda z80_h		; store amount to add.
002C0F  3  48           	pha
002C10  3  A5 66        	lda z80_l
002C12  3  48           	pha
002C13  3               
002C13  3  38           	sec			; subtract from amount to add.
002C14  3  A5 66        	lda z80_l
002C16  3  E5 62        	sbc z80_c
002C18  3  85 66        	sta z80_l
002C1A  3  A5 67        	lda z80_h
002C1C  3  E5 63        	sbc z80_b
002C1E  3  85 67        	sta z80_h
002C20  3  90 14        	bcc incsc0		; too much, restore value.
002C22  3               
002C22  3  68           	pla			; delete the previous amount from the stack.
002C23  3  68           	pla
002C24  3               
002C24  3  A5 65        	lda z80_d 		; store column position.
002C26  3  48           	pha
002C27  3  A5 64        	lda z80_e
002C29  3  48           	pha
002C2A  3  20 3D 2C     	jsr incsc2		; do the increment.
002C2D  3               
002C2D  3  68           	pla			; restore column.
002C2E  3  85 64        	sta z80_e
002C30  3  68           	pla
002C31  3  85 65        	sta z80_d
002C33  3  4C 0D 2C     	jmp incsc		; repeat until all added.
002C36  3               
002C36  3               incsc0:
002C36  3  68           	pla			; restore previous value.
002C37  3  85 66        	sta z80_l
002C39  3  68           	pla
002C3A  3  85 67        	sta z80_h
002C3C  3  60           	rts
002C3D  3               incsc2:
002C3D  3  A0 00        	ldy #0
002C3F  3  B1 64        	lda (z80_de),y 		; get amount.
002C41  3  18           	clc
002C42  3  69 01        	adc #1			; add one to column.
002C44  3  91 64        	sta (z80_de),y		; write new column total.
002C46  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C48  3  B0 01        	bcs :+
002C4A  3  60           	rts			; no, carry on.
002C4B  3               :
002C4B  3  A9 30        	lda #'0'		; make it zero.
002C4D  3  91 64        	sta (z80_de),y		; write new column total.
002C4F  3  C6 64        	dec z80_e		; back one column.
002C51  3  D0 02        	bne :+
002C53  3  C6 65        	dec z80_d
002C55  3               :
002C55  3  4C 3D 2C     	jmp incsc2
002C58  3               
002C58  3               ;------------------------------------
002C58  3               ; Add bonus to score and reset bonus
002C58  3               ;------------------------------------
002C58  3               
002C58  3               addbo:
002C58  3  A2 05        	ldx #5			; last digit.
002C5A  3  18           	clc
002C5B  3               addbo0:
002C5B  3  BD 2B 2B     	lda score,x		; get score.
002C5E  3  7D 37 2B     	adc bonus,x		; add bonus.
002C61  3  38           	sec			; 0 to 18.
002C62  3  E9 30        	sbc #48
002C64  3  48           	pha
002C65  3  A9 30        	lda #'0'
002C67  3  9D 37 2B     	sta bonus,x
002C6A  3  68           	pla
002C6B  3  C9 3A        	cmp #58
002C6D  3  90 03        	bcc addbo1
002C6F  3  38           	sec
002C70  3  E9 0A        	sbc #10
002C72  3               addbo1:
002C72  3  9D 2B 2B     	sta score,x		; zeroise bonus.
002C75  3  CA           	dex			; next digit.
002C76  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C78  3  60           	rts
002C79  3               
002C79  3               ;------------------------------------
002C79  3               ; Swap score and bonus.
002C79  3               ;------------------------------------
002C79  3               
002C79  3               swpsb:
002C79  3  A2 05        	ldx #5			; digits to add.
002C7B  3               swpsb0:
002C7B  3  BD 2B 2B     	lda score,x 		; get score digits.
002C7E  3  48           	pha			; save digit
002C7F  3  BD 37 2B     	lda bonus,x 		; get bonus digits.
002C82  3  9D 2B 2B     	sta score,x		; switch score-bonus
002C85  3  68           	pla
002C86  3  9D 37 2B     	sta bonus,x
002C89  3  CA           	dex 			; repeat for all 6 digits.
002C8A  3  10 EF        	bpl swpsb0
002C8C  3  60           	rts
002C8D  3               
002C8D  3               ;----------------------------------------------------
002C8D  3               ; Get print address.
002C8D  3               ;----------------------------------------------------
002C8D  3               
002C8D  3               gprad:
002C8D  3  A5 rr        	lda dispy
002C8F  3  85 rr        	sta tmp
002C91  3  0A           	asl a
002C92  3  18           	clc
002C93  3  65 rr        	adc tmp
002C95  3  A8           	tay
002C96  3  B9 00 DC     	lda SCADTB_lb,y
002C99  3  18           	clc
002C9A  3  65 rr        	adc dispx
002C9C  3  85 rr        	sta scraddr
002C9E  3  B9 00 DD     	lda SCADTB_hb,y
002CA1  3  69 00        	adc #0
002CA3  3  85 rr        	sta scraddr+1
002CA5  3  60           	rts
002CA6  3               
002CA6  3               ;--------------------------------------------------------------
002CA6  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002CA6  3               ;
002CA6  3               ; Output:
002CA6  3               ;  bufaddr = MAP + dispy*40 + dispx
002CA6  3               ;--------------------------------------------------------------
002CA6  3               
002CA6  3               pradd:
002CA6  3  A5 rr        	lda dispy 		; y coordinate.
002CA8  3  0A           	asl a
002CA9  3  18           	clc
002CAA  3  65 rr        	adc dispy
002CAC  3  AA           	tax
002CAD  3               
002CAD  3  18           	clc
002CAE  3  BD 00 DC     	lda SCADTB_lb,x
002CB1  3  65 rr        	adc dispx
002CB3  3  85 rr        	sta bufaddr
002CB5  3               
002CB5  3  BD 00 DD     	lda SCADTB_hb,x
002CB8  3  69 D4        	adc #(>MAP->ScreenAddr)
002CBA  3  85 rr        	sta bufaddr+1
002CBC  3  60           	rts
002CBD  3               
002CBD  3               ;----------------------------------------------------
002CBD  3               ; Display character in A at dispx,dispy.
002CBD  3               ;
002CBD  3               ; Input:
002CBD  3               ;  A 	   = character to print
002CBD  3               ;----------------------------------------------------
002CBD  3               
002CBD  3               pchar:
002CBD  3  48           	pha
002CBE  3  20 8D 2C     	jsr gprad		; get screen address.
002CC1  3               .if gflag
002CC1  3               	and andeor
002CC1  3               	eor andeor+1
002CC1  3               .endif
002CC1  3               .if iflag
002CC1  3               	eor #$ff
002CC1  3               .endif
002CC1  3  68           	pla
002CC2  3  A0 00        	ldy #0
002CC4  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CC6  3  60           	rts
002CC7  3               
002CC7  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002CCB  3  60 40 20 00  
002CCF  3               
002CCF  3               ;----------------------------------------------
002CCF  3               
002CCF  3               ; Print attributes, properties and pixels.
002CCF  3               ;
002CCF  3               ; Input:
002CCF  3               ;  A	= tile number
002CCF  3               ;----------------------------------------------
002CCF  3               
002CCF  3               pbpattr:			; entry PUTBLOCK command
002CCF  3  A4 rr        	ldy charx
002CD1  3  84 rr        	sty dispx
002CD3  3  A4 rr        	ldy chary
002CD5  3  84 rr        	sty dispy
002CD7  3               pattr:
002CD7  3               .if aflag
002CD7  3               	pha
002CD7  3               	jsr wbloc		; save blockinfo
002CD7  3               	pla
002CD7  3               .endif
002CD7  3               
002CD7  3               pattr2:
002CD7  3  85 63        	sta z80_b		; store cell in b register for now.
002CD9  3  AA           	tax
002CDA  3  BD CA 3C     	lda bprop,x 		; block properties.
002CDD  3  85 62        	sta z80_c
002CDF  3  C9 08        	cmp #COLECT
002CE1  3  D0 05        	bne :+
002CE3  3  A5 63        	lda z80_b
002CE5  3  8D F6 2C     	sta colpatt
002CE8  3               :
002CE8  3  20 A6 2C     	jsr pradd 		; get property buffer address.
002CEB  3  A5 62        	lda z80_c
002CED  3  A0 00        	ldy #0
002CEF  3  91 rr        	sta (bufaddr),y 	; write property.
002CF1  3  A5 63        	lda z80_b 		; restore cell.
002CF3  3  4C F7 2C     	jmp panp
002CF6  3               ; Print attributes, no properties.
002CF6  3               
002CF6  3  00           colpatt:	.byte 0
002CF7  3               
002CF7  3               panp:
002CF7  3               ;	sta z80_e		; displacement in e.
002CF7  3               ;	lda #0
002CF7  3               ;	sta z80_d		; no high byte.
002CF7  3               ;	asl z80_e  		; multiply char by 8.
002CF7  3               ;	rol z80_d
002CF7  3               ;	asl z80_e
002CF7  3               ;	rol z80_d
002CF7  3               ;	asl z80_e
002CF7  3               ;	rol z80_d
002CF7  3  0A           	asl a
002CF8  3  18           	clc
002CF9  3               ;	lda z80_e
002CF9  3  69 C4        	adc #<chgfx 		; address of graphics.
002CFB  3  85 rr        	sta tileaddr
002CFD  3  A5 65        	lda z80_d
002CFF  3  69 3C        	adc #>chgfx
002D01  3  85 rr        	sta tileaddr+1
002D03  3  20 8D 2C     	jsr gprad 		; get screen address.
002D06  3               panp0:
002D06  3  A0 00        	ldy #0
002D08  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002D0A  3               .if iflag
002D0A  3               	eor #$ff		; Invert
002D0A  3               .endif
002D0A  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D0C  3  E6 rr        	inc dispx 		; move along one.
002D0E  3  E6 rr        	inc charx
002D10  3  60           	rts
002D11  3               
002D11  3               ;----------------------------------------------
002D11  3               ; Write block
002D11  3               ;----------------------------------------------
002D11  3               
002D11  3               .if aflag
002D11  3               wbloc:
002D11  3               	ldy #3
002D11  3               	sta (pbptr),y		; store block number
002D11  3               	dey
002D11  3               	lda dispx
002D11  3               	sta (pbptr),y		; write x position of block.
002D11  3               	dey
002D11  3               	lda dispy
002D11  3               	sta (pbptr),y		; write y position of block.
002D11  3               	dey
002D11  3               	lda scno
002D11  3               	sta (pbptr),y		; write screen.
002D11  3               	clc			; point to next free location
002D11  3               	lda pbptr
002D11  3               	adc #4
002D11  3               	sta pbptr
002D11  3               	bcc :+
002D11  3               	inc pbptr+1
002D11  3               :
002D11  3               	rts
002D11  3               .endif
002D11  3               
002D11  3               ;----------------------------------------------
002D11  3               ; Print character pixels, no more.
002D11  3               ;
002D11  3               ; Input:
002D11  3               ;  A	= character to print
002D11  3               ;----------------------------------------------
002D11  3               
002D11  3               pchr:
002D11  3  20 BD 2C     	jsr pchar 		; show character in accumulator.
002D14  3  E6 rr        	inc dispx		; move along one.
002D16  3  60           	rts
002D17  3               
002D17  3               ;----------------------------------------------------
002D17  3               ; Shifter sprite routine for objects.
002D17  3               ;----------------------------------------------------
002D17  3               
002D17  3               .if oflag
002D17  3               sprit7:
002D17  3               	lda z80_b
002D17  3               	beq sprit0
002D17  3               	sta z80_a
002D17  3               sprit3:
002D17  3               	lsr spr			; shift into position.
002D17  3               	ror spr+1
002D17  3               	ror spr+2
002D17  3               	dec z80_a		; one less iteration.
002D17  3               	bne sprit3
002D17  3               sprit0:
002D17  3               	rts 			; now apply to screen.
002D17  3               
002D17  3               ;----------------------------------------------------
002D17  3               ; Draw sprite
002D17  3               ;----------------------------------------------------
002D17  3               
002D17  3               sprite:
002D17  3               	stx xtmp		; Save X-reg
002D17  3               	jsr scadd 		; get screen address in scraddr.
002D17  3               
002D17  3               	lda dispx 		; x position.
002D17  3               	and #7 			; position straddling cells.
002D17  3               	sta z80_b		; store in b register.
002D17  3               
002D17  3               	lda z80_l		; store sprite graphic address.
002D17  3               	sta sprit1+1
002D17  3               	sta sprit2+1
002D17  3               	lda z80_h
002D17  3               	sta sprit1+2
002D17  3               	sta sprit2+2
002D17  3               
002D17  3               	ldx #0			; pixel height.
002D17  3               	ldy #0
002D17  3               sprit1:
002D17  3               	lda objdta,x		; fetch first byte.
002D17  3               	sta spr
002D17  3               	inx
002D17  3               sprit2:
002D17  3               	lda objdta,x
002D17  3               	sta spr+1
002D17  3               
002D17  3               	lda #0
002D17  3               	sta spr+2
002D17  3               	jsr sprit7		; shift sprite
002D17  3               
002D17  3               	dex
002D17  3               	lda spr			; fetch graphic.
002D17  3               	ldy spritetab,x
002D17  3               	eor (scraddr),y		; merge with screen image.
002D17  3               	sta (scraddr),y		; write to screen.
002D17  3               	inx			; next screen byte.
002D17  3               
002D17  3               	lda spr+1		; fetch graphic.
002D17  3               	ldy spritetab,x
002D17  3               	eor (scraddr),y		; merge with screen image.
002D17  3               	sta (scraddr),y		; write to screen.
002D17  3               	iny
002D17  3               
002D17  3               	lda spr+2		; fetch graphic.
002D17  3               	eor (scraddr),y		; merge with screen image.
002D17  3               	sta (scraddr),y		; write to screen.
002D17  3               
002D17  3               	inx			; next source byte.
002D17  3               	cpx #16
002D17  3               	bne :+
002D17  3               	inc scraddr+1
002D17  3               :
002D17  3               	cpx #32
002D17  3               	bne sprit1		; repeat
002D17  3               
002D17  3               	ldx xtmp		; retreive X-reg
002D17  3               	rts
002D17  3               
002D17  3               spritetab:
002D17  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D17  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D17  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D17  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D17  3               
002D17  3               spr:	.byte 0,0,0
002D17  3               
002D17  3               ;xtmp:	.byte 0
002D17  3               .endif
002D17  3               
002D17  3               ;-----------------------------------------------------------
002D17  3               ; Get room address.
002D17  3               ;-----------------------------------------------------------
002D17  3               
002D17  3               groom:
002D17  3  A6 rr        	ldx scno 		; screen number.
002D19  3  A0 00        	ldy #0
002D1B  3               groomx:
002D1B  3  A9 13        	lda #<scdat 		; pointer to screens.
002D1D  3  85 66        	sta z80_l
002D1F  3  A9 3E        	lda #>scdat
002D21  3  85 67        	sta z80_h
002D23  3               groom1:
002D23  3  E0 00        	cpx #0			; is it the first one?
002D25  3  F0 15        	beq groom0 		; no more screens to skip.
002D27  3               
002D27  3  18           	clc
002D28  3  A5 66        	lda z80_l
002D2A  3  79 13 3E     	adc scdat,y 		; low byte of screen size.
002D2D  3  85 66        	sta z80_l
002D2F  3  C8           	iny			; point to high byte.
002D30  3  A5 67        	lda z80_h
002D32  3  79 13 3E     	adc scdat,y 		; high byte of screen size.
002D35  3  85 67        	sta z80_h
002D37  3  C8           	iny			; next address.
002D38  3               
002D38  3  CA           	dex 			; one less iteration.
002D39  3  4C 23 2D     	jmp groom1 		; loop until we reach the end.
002D3C  3               groom0:
002D3C  3  AD 89 3F     	lda numsc 		; add displacement.
002D3F  3  0A           	asl a
002D40  3  18           	clc			; add double displacement to address.
002D41  3  65 66        	adc z80_l
002D43  3  85 66        	sta z80_l
002D45  3  A5 67        	lda z80_h
002D47  3  69 00        	adc #0
002D49  3  85 67        	sta z80_h
002D4B  3  60           	rts
002D4C  3               
002D4C  3               ;-----------------------------------------------------------
002D4C  3               ; Draw present room.
002D4C  3               ;-----------------------------------------------------------
002D4C  3               
002D4C  3               droom:
002D4C  3  AD 23 28     	lda wintop 		; window top.
002D4F  3  85 rr        	sta dispy		; set cursor y position.
002D51  3               droom2:
002D51  3  20 17 2D     	jsr groom 		; get address of current room.
002D54  3  A9 00        	lda #0	 		; zero in accumulator.
002D56  3  85 rr        	sta comcnt 		; reset compression counter.
002D58  3  AD 25 28     	lda winhgt 		; height of window.
002D5B  3  85 rr        	sta rrow		; set row counter
002D5D  3               droom0:
002D5D  3  AD 24 28     	lda winlft 		; window left edge.
002D60  3  85 rr        	sta dispx 		; set cursor x position.
002D62  3  AD 26 28     	lda winwid 		; width of window.
002D65  3  85 rr        	sta rcol		; set column counter
002D67  3               droom1:
002D67  3  20 78 2D     	jsr flbyt 		; decompress next byte on the fly.
002D6A  3  20 D7 2C     	jsr pattr2 		; show attributes and block.
002D6D  3  C6 rr        	dec rcol		; one less column.
002D6F  3  D0 F6        	bne droom1 		; repeat for entire line.
002D71  3  E6 rr        	inc dispy		; move down one line.
002D73  3  C6 rr        	dec rrow 		; one less row.
002D75  3  D0 E6        	bne droom0 		; repeat for all rows.
002D77  3  60           	rts
002D78  3               
002D78  3               ;rcol:	.byte 0
002D78  3               ;rrow:	.byte 0
002D78  3               
002D78  3               ;----------------------------------------------
002D78  3               ; Decompress bytes on-the-fly.
002D78  3               ;----------------------------------------------
002D78  3               
002D78  3               flbyt:
002D78  3  A5 rr        	lda comcnt 		; compression counter.
002D7A  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D7C  3               
002D7C  3  A0 00        	ldy #0
002D7E  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D80  3  E6 66        	inc z80_l 		; point to next cell.
002D82  3  D0 02        	bne :+
002D84  3  E6 67        	inc z80_h
002D86  3               :
002D86  3  C9 FF        	cmp #255 		; is this byte a control code?
002D88  3  F0 01        	beq :+
002D8A  3  60           	rts 			; no, this byte is uncompressed.
002D8B  3               :
002D8B  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002D8D  3  85 rr        	sta combyt 		; set up the type.
002D8F  3  E6 66        	inc z80_l 		; point to quantity.
002D91  3  D0 02        	bne :+
002D93  3  E6 67        	inc z80_h
002D95  3               :
002D95  3  B1 66        	lda (z80_hl),y 		; get quantity.
002D97  3  E6 66        	inc z80_l 		; point to next byte.
002D99  3  D0 02        	bne :+
002D9B  3  E6 67        	inc z80_h
002D9D  3               :
002D9D  3               flbyt1:
002D9D  3  85 rr        	sta comcnt 		; store new quantity.
002D9F  3  C6 rr        	dec comcnt		; one less.
002DA1  3  A5 rr        	lda combyt 		; byte to expand.
002DA3  3  60           	rts
002DA4  3               
002DA4  3               ;combyt:	.byte 0			; byte type compressed.
002DA4  3               ;comcnt:	.byte 0			; compression counter.
002DA4  3               
002DA4  3               ;------------------------------------------
002DA4  3               ; Ladder down check.
002DA4  3               ;
002DA4  3               ; Input:
002DA4  3               ;  IX = sprite pointer
002DA4  3               ;------------------------------------------
002DA4  3               
002DA4  3               .if lflag
002DA4  3               laddd:
002DA4  3               	ldy #9
002DA4  3               	lda (z80_ix),y		; x coordinate.
002DA4  3               	sta dispx
002DA4  3               
002DA4  3               	ldy #8
002DA4  3               	lda (z80_ix),y		; y coordinate.
002DA4  3               	and #254		; make it even.
002DA4  3               	sta (z80_ix),y 		; reset it.
002DA4  3               	clc 			; look down 16 pixels.
002DA4  3               numsp5:
002DA4  3               	adc #SPR_HGT
002DA4  3               	sta dispy		; coords in dispx,dispy.
002DA4  3               	jmp laddv
002DA4  3               
002DA4  3               ;------------------------------------------
002DA4  3               ; Ladder up check.
002DA4  3               ;
002DA4  3               ; Input:
002DA4  3               ;  IX = sprite pointer
002DA4  3               ;
002DA4  3               ; Output:
002DA4  3               ;  A  = 0 is ok, A <>0 is not ok
002DA4  3               ;------------------------------------------
002DA4  3               
002DA4  3               laddu:
002DA4  3               	ldy #9
002DA4  3               	lda (z80_ix),y		; x coordinate.
002DA4  3               	sta dispx
002DA4  3               
002DA4  3               	ldy #8
002DA4  3               	lda (z80_ix),y		; y coordinate.
002DA4  3               	and #254 		; make it even.
002DA4  3               	sta (z80_ix),y		; reset it.
002DA4  3               	clc 			; look 2 pixels above feet.
002DA4  3               numsp6:
002DA4  3               	adc #SPR_HGT-2
002DA4  3               	sta dispy		; coords in dispx,dispy.
002DA4  3               laddv:
002DA4  3               	jsr tstbl 		; get map address.
002DA4  3               	jsr ldchk 		; standard ladder check.
002DA4  3               	beq :+
002DA4  3               	rts 			; no way through.
002DA4  3               :
002DA4  3               	inc bufaddr 		; look right one cell.
002DA4  3               	bne :+
002DA4  3               	inc bufaddr+1
002DA4  3               :
002DA4  3               	jsr ldchk 		; do the check.
002DA4  3               	beq :+
002DA4  3               	rts 			; impassable.
002DA4  3               :
002DA4  3               	lda dispx 		; y coordinate.
002DA4  3               	and #7 			; position straddling block cells.
002DA4  3               	bne :+
002DA4  3               	rts 			; no more checks needed.
002DA4  3               :
002DA4  3               	inc bufaddr 		; look to third cell.
002DA4  3               	bne :+
002DA4  3               	inc bufaddr+1
002DA4  3               :
002DA4  3               	jsr ldchk 		; do the check.
002DA4  3               	rts  			; return with zero flag set accordingly.
002DA4  3               .endif
002DA4  3               
002DA4  3               ;---------------------------------------------------------
002DA4  3               ; Can go up check.
002DA4  3               ;
002DA4  3               ; Input:
002DA4  3               ;  IX = sprite pointer
002DA4  3               ;
002DA4  3               ; Output:
002DA4  3               ;  A  = 0 is ok, A <>0 is not ok
002DA4  3               ;---------------------------------------------------------
002DA4  3               
002DA4  3               cangu:
002DA4  3  A0 09        	ldy #9
002DA6  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DA8  3  85 rr        	sta dispx
002DAA  3  A0 08        	ldy #8
002DAC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002DAE  3  38           	sec
002DAF  3  E9 01        	sbc #1
002DB1  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DB3  3  20 6E 2F     	jsr tstbl 		; get map address.
002DB6  3  20 86 2E     	jsr lrchk 		; standard left/right check.
002DB9  3  F0 01        	beq :+
002DBB  3  60           	rts			; no way through.
002DBC  3               :
002DBC  3  E6 rr        	inc bufaddr		; look right one cell.
002DBE  3  D0 02        	bne :+
002DC0  3  E6 rr        	inc bufaddr+1
002DC2  3               :
002DC2  3  20 86 2E     	jsr lrchk 		; do the check.
002DC5  3  F0 01        	beq :+
002DC7  3  60           	rts			; impassable.
002DC8  3               :
002DC8  3  E6 rr        	inc bufaddr		; look right one cell.
002DCA  3  D0 02        	bne :+
002DCC  3  E6 rr        	inc bufaddr+1
002DCE  3               :
002DCE  3  20 86 2E     	jsr lrchk 		; do the check.
002DD1  3  F0 01        	beq :+
002DD3  3  60           	rts			; impassable.
002DD4  3               :
002DD4  3  E6 rr        	inc bufaddr		; look right one cell.
002DD6  3  D0 02        	bne :+
002DD8  3  E6 rr        	inc bufaddr+1
002DDA  3               :
002DDA  3  20 86 2E     	jsr lrchk 		; do the check.
002DDD  3  F0 01        	beq :+
002DDF  3  60           	rts			; impassable.
002DE0  3               :
002DE0  3  A5 rr        	lda dispx		; x coordinate.
002DE2  3  29 01        	and #1			; position straddling block cells.
002DE4  3  D0 01        	bne :+
002DE6  3  60           	rts			; no more checks needed.
002DE7  3               :
002DE7  3  E6 rr        	inc bufaddr		; look to third cell.
002DE9  3  D0 02        	bne :+
002DEB  3  E6 rr        	inc bufaddr+1
002DED  3               :
002DED  3  20 86 2E     	jsr lrchk		; do the check.
002DF0  3  60           	rts 			; return with zero flag set accordingly.
002DF1  3               
002DF1  3               ;---------------------------------------------------------
002DF1  3               ; Can go down check.
002DF1  3               ;
002DF1  3               ; Input:
002DF1  3               ;  IX = sprite pointer
002DF1  3               ;
002DF1  3               ; Output:
002DF1  3               ;  A  = 0 is ok, A <>0 is not ok
002DF1  3               ;---------------------------------------------------------
002DF1  3               
002DF1  3               cangd:
002DF1  3  A0 09        	ldy #9
002DF3  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002DF5  3  85 rr        	sta dispx
002DF7  3  A0 08        	ldy #8
002DF9  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DFB  3  18           	clc
002DFC  3               numsp3:
002DFC  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002DFE  3  85 rr        	sta dispy		; coords in dispx,dispy.
002E00  3  20 6E 2F     	jsr tstbl 		; get map address.
002E03  3  20 9B 2E     	jsr plchk 		; block, platform check.
002E06  3  F0 01        	beq :+
002E08  3  60           	rts			; no way through.
002E09  3               :
002E09  3  E6 rr        	inc bufaddr		; look right one cell.
002E0B  3  D0 02        	bne :+
002E0D  3  E6 rr        	inc bufaddr+1
002E0F  3               :
002E0F  3  20 9B 2E     	jsr plchk		; block, platform check.
002E12  3  F0 01        	beq :+
002E14  3  60           	rts			; impassable.
002E15  3               :
002E15  3  E6 rr        	inc bufaddr		; look right one cell.
002E17  3  D0 02        	bne :+
002E19  3  E6 rr        	inc bufaddr+1
002E1B  3               :
002E1B  3  20 9B 2E     	jsr plchk		; block, platform check.
002E1E  3  F0 01        	beq :+
002E20  3  60           	rts			; impassable.
002E21  3               :
002E21  3  E6 rr        	inc bufaddr		; look right one cell.
002E23  3  D0 02        	bne :+
002E25  3  E6 rr        	inc bufaddr+1
002E27  3               :
002E27  3  20 9B 2E     	jsr plchk		; block, platform check.
002E2A  3  F0 01        	beq :+
002E2C  3  60           	rts			; impassable.
002E2D  3               :
002E2D  3  A5 rr        	lda dispx		; x coordinate.
002E2F  3  29 01        	and #1			; position straddling block cells.
002E31  3  D0 01        	bne :+
002E33  3  60           	rts			; no more checks needed.
002E34  3               :
002E34  3  E6 rr        	inc bufaddr		; look to third cell.
002E36  3  D0 02        	bne :+
002E38  3  E6 rr        	inc bufaddr+1
002E3A  3               :
002E3A  3  20 9B 2E     	jsr plchk		; block, platform check.
002E3D  3  60           	rts			; return with zero flag set accordingly.
002E3E  3               
002E3E  3               ;---------------------------------------------------------
002E3E  3               ; Can go left check.
002E3E  3               ;
002E3E  3               ; Input:
002E3E  3               ;  IX = sprite pointer
002E3E  3               ;
002E3E  3               ; Output:
002E3E  3               ;  A  = 0 is ok, A <>0 is not ok
002E3E  3               ;---------------------------------------------------------
002E3E  3               
002E3E  3               cangl:
002E3E  3  A0 08        	ldy #8
002E40  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E42  3  85 rr        	sta dispy
002E44  3  A0 09        	ldy #9
002E46  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E48  3  38           	sec
002E49  3  E9 01        	sbc #1			; look left 2 pixels.
002E4B  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E4D  3  4C 5F 2E     	jmp cangh		; test if we can go there.
002E50  3               
002E50  3               ;---------------------------------------------------------
002E50  3               ; Can go right check.
002E50  3               ;
002E50  3               ; Input:
002E50  3               ;  IX = sprite pointer
002E50  3               ;
002E50  3               ; Output:
002E50  3               ;  A  = 0 is ok, A <>0 is not ok
002E50  3               ;---------------------------------------------------------
002E50  3               
002E50  3               cangr:
002E50  3  A0 08        	ldy #8
002E52  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E54  3  85 rr        	sta dispy
002E56  3  A0 09        	ldy #9
002E58  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E5A  3  18           	clc
002E5B  3  69 08        	adc #SPR_WID		; look right 8 pixels.
002E5D  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E5F  3               cangh:
002E5F  3               cangh2:
002E5F  3  A9 03        	lda #(SPR_HGT/4+1)	; default rows to write.
002E61  3  85 63        	sta z80_b
002E63  3  A5 rr        	lda dispy		; y position.
002E65  3  29 03        	and #3			; does x straddle cells?
002E67  3  D0 02        	bne cangh0		; yes, loop counter is good.
002E69  3  C6 63        	dec z80_b		; one less row to write.
002E6B  3               cangh0:
002E6B  3  20 6E 2F     	jsr tstbl		; get map address.
002E6E  3               cangh1:
002E6E  3  20 86 2E     	jsr lrchk		; standard left/right check.
002E71  3  F0 01        	beq :+
002E73  3  60           	rts			; no way through.
002E74  3               :
002E74  3  48           	pha
002E75  3  18           	clc
002E76  3  A5 rr        	lda bufaddr
002E78  3  69 28        	adc #ScrWidth		; look down.
002E7A  3  85 rr        	sta bufaddr
002E7C  3  90 02        	bcc :+
002E7E  3  E6 rr        	inc bufaddr+1
002E80  3               :
002E80  3  68           	pla
002E81  3               
002E81  3  C6 63        	dec z80_b
002E83  3  D0 E9        	bne cangh1
002E85  3  60           	rts
002E86  3               
002E86  3               ;-------------------------------------
002E86  3               ; Check left/right movement is okay.
002E86  3               ;
002E86  3               ; Input:
002E86  3               ;  bufaddr = MAP + x/8 + y/8*32
002E86  3               ;
002E86  3               ; Output:
002E86  3               ;  A  = 0 is ok, A <>0 is not ok
002E86  3               ;-------------------------------------
002E86  3               
002E86  3               lrchk:
002E86  3  A0 00        	ldy #0
002E88  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002E8A  3  C9 02        	cmp #WALL 		; is it passable?
002E8C  3  F0 0A        	beq lrchkx		; no.
002E8E  3               
002E8E  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002E90  3  F0 06        	beq lrchkx		; not passable.
002E92  3  A9 00        	lda #0
002E94  3  60           	rts
002E95  3               
002E95  3               ;--------------------------------------------------------------
002E95  3               ; Called by mmenu
002E95  3               ;--------------------------------------------------------------
002E95  3               
002E95  3               always:
002E95  3  A9 FF        	lda #255		; report it as okay.
002E97  3  60           	rts
002E98  3               
002E98  3               lrchkx:
002E98  3  A9 01        	lda #1 			; reset all bits.
002E9A  3  60           	rts
002E9B  3               
002E9B  3               
002E9B  3               ;--------------------------------------------------------------
002E9B  3               ; Check platform or solid item is not in way.
002E9B  3               ;
002E9B  3               ; Input:
002E9B  3               ;  bufaddr = MAP + x/2 + y/3*40
002E9B  3               ;
002E9B  3               ; Output:
002E9B  3               ;  A  = 0 is ok, A <>0 is not ok
002E9B  3               ;--------------------------------------------------------------
002E9B  3               
002E9B  3               plchk:
002E9B  3  A0 00        	ldy #0
002E9D  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002E9F  3  C9 02        	cmp #WALL 		; is it passable?
002EA1  3  F0 F5        	beq lrchkx		; no.
002EA3  3               .if pflag .or dflag
002EA3  3               	cmp #FODDER		; fodder has to be dug.
002EA3  3               	beq lrchkx		; not passable.
002EA3  3               .endif
002EA3  3  C9 01        	cmp #PLATFM		; platform is solid.
002EA5  3  F0 03        	beq plchkx		; not passable.
002EA7  3               .if lflag
002EA7  3               	cmp #LADDER		; is it a ladder?
002EA7  3               	beq lrchkx		; on ladder, deny movement.
002EA7  3               .endif
002EA7  3               plchk0:
002EA7  3  A9 00        	lda #0			; report as ok
002EA9  3  60           	rts
002EAA  3               plchkx:
002EAA  3  A5 rr        	lda dispy		; y coordinate.
002EAC  3  29 03        	and #3			; position straddling blocks.
002EAE  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002EB0  3  4C A7 2E     	jmp plchk0
002EB3  3               
002EB3  3               ;--------------------------------------------------------------
002EB3  3               ; Check ladder is available.
002EB3  3               ;
002EB3  3               ; Input:
002EB3  3               ;  bufaddr = MAP + x/8 + y/8*32
002EB3  3               ;
002EB3  3               ; Output:
002EB3  3               ;  A  = 0 is ok, A <>0 is not ok
002EB3  3               ;--------------------------------------------------------------
002EB3  3               
002EB3  3               .if lflag
002EB3  3               ldchk:
002EB3  3               	ldy #0
002EB3  3               	lda (bufaddr),y 	; fetch cell.
002EB3  3               	cmp #LADDER 		; is it a ladder?
002EB3  3               	beq :+
002EB3  3               	lda #1
002EB3  3               	rts  			; return with zero flag set accordingly.
002EB3  3               :
002EB3  3               	lda #0
002EB3  3               	rts
002EB3  3               .endif
002EB3  3               
002EB3  3               ;--------------------------------------------------------------
002EB3  3               ; Get collectables.
002EB3  3               ;--------------------------------------------------------------
002EB3  3               
002EB3  3               .if cflag
002EB3  3               getcol:
002EB3  3                       lda #COLECT             ; collectable blocks.
002EB3  3                       sta z80_b
002EB3  3                       jsr tded                ; test for collectable blocks.
002EB3  3                       cmp z80_b               ; did we find one?
002EB3  3                       beq :+
002EB3  3                       rts                     ; none were found, job done.
002EB3  3               :
002EB3  3                       jsr gtblk               ; get block.
002EB3  3                       jsr evnt20              ; collected block event.
002EB3  3                       jmp getcol              ; repeat until none left.
002EB3  3               
002EB3  3               ; Get collectable block.
002EB3  3               
002EB3  3               gtblk:
002EB3  3               	ldy #0
002EB3  3               	lda (bufaddr),y
002EB3  3               	sta z80_a
002EB3  3                       lda #0
002EB3  3                       sta (bufaddr),y		; make it empty now.
002EB3  3               
002EB3  3               	lda bufaddr		; set dispx
002EB3  3               	and #31
002EB3  3               	sta dispx
002EB3  3               
002EB3  3               	lda bufaddr+1		; Set dispy
002EB3  3               	sec
002EB3  3               	sbc #>MAP
002EB3  3               	sta bufaddr+1
002EB3  3               	asl bufaddr
002EB3  3               	rol bufaddr+1
002EB3  3               	asl bufaddr
002EB3  3               	rol bufaddr+1
002EB3  3               	asl bufaddr
002EB3  3               	rol bufaddr+1
002EB3  3               	lda bufaddr+1
002EB3  3               	sta dispy
002EB3  3               
002EB3  3               	lda colpatt		; get blocknr
002EB3  3               	sta z80_e		; displacement in e.
002EB3  3               	lda #0
002EB3  3               	sta z80_d		; no high byte.
002EB3  3               	asl z80_e  		; multiply char by 8.
002EB3  3               	rol z80_d
002EB3  3               	asl z80_e
002EB3  3               	rol z80_d
002EB3  3               	asl z80_e
002EB3  3               	rol z80_d
002EB3  3               	clc
002EB3  3               	lda z80_e
002EB3  3               	adc #<chgfx 		; address of graphics.
002EB3  3               	sta tileaddr
002EB3  3               	lda z80_d
002EB3  3               	adc #>chgfx
002EB3  3               	sta tileaddr+1
002EB3  3               	jsr gprad 		; get screen address.
002EB3  3               	ldx #7			; number of pixel rows to write.
002EB3  3               gtblk0:
002EB3  3               	ldy #0
002EB3  3               	lda (tileaddr),y 	; get image byte.
002EB3  3               	ldy scrtab,x
002EB3  3               	eor (scraddr),y 	; XOR tile on screen
002EB3  3               	sta (scraddr),y 	; copy to screen.
002EB3  3               	inc tileaddr 		; next image byte.
002EB3  3               	bne :+
002EB3  3               	inc tileaddr+1
002EB3  3               :
002EB3  3               	dex	 		; repeat for 8 pixel rows.
002EB3  3               	bpl gtblk0
002EB3  3               	rts
002EB3  3               .endif
002EB3  3               
002EB3  3               ;--------------------------------------------------------------
002EB3  3               ; Touched deadly block check.
002EB3  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002EB3  3               ;
002EB3  3               ; Input:
002EB3  3               ;  IX = sprite address
002EB3  3               ;
002EB3  3               ; Output:
002EB3  3               ;  A  = 0 is ok, A=5 is not ok
002EB3  3               ;--------------------------------------------------------------
002EB3  3               
002EB3  3               tded:
002EB3  3  A0 08        	ldy #8
002EB5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002EB7  3  85 rr        	sta dispy
002EB9  3  C8           	iny
002EBA  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002EBC  3  85 rr        	sta dispx		; coords in dispx,dispy.
002EBE  3  20 6E 2F     	jsr tstbl		; get map address.
002EC1  3  48           	pha
002EC2  3  A9 27        	lda #ScrWidth-1		; default distance to next line down.
002EC4  3  85 64        	sta z80_e
002EC6  3  68           	pla
002EC7  3  C5 63        	cmp z80_b		; is this the required block?
002EC9  3  D0 01        	bne :+
002ECB  3  60           	rts			; yes.
002ECC  3               :
002ECC  3  E6 rr        	inc bufaddr 		; next cell.
002ECE  3  D0 02        	bne :+
002ED0  3  E6 rr        	inc bufaddr+1
002ED2  3               :
002ED2  3  A0 00        	ldy #0
002ED4  3  B1 rr        	lda (bufaddr),y		; fetch type.
002ED6  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002ED8  3  D0 01        	bne :+
002EDA  3  60           	rts			; yes.
002EDB  3               :
002EDB  3  A5 rr        	lda dispx		; horizontal position.
002EDD  3  85 62        	sta z80_c 		; store column in c register.
002EDF  3  29 01        	and #1			; is it straddling cells?
002EE1  3  D0 03        	bne :+
002EE3  3  4C F7 2E     	jmp tded0		; no.
002EE6  3               :
002EE6  3  E6 rr        	inc bufaddr 		; last cell.
002EE8  3  D0 02        	bne :+
002EEA  3  E6 rr        	inc bufaddr+1
002EEC  3               :
002EEC  3  A0 00        	ldy #0
002EEE  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002EF0  3  C5 63        	cmp z80_b		; is this the block?
002EF2  3  D0 01        	bne :+
002EF4  3  60           	rts			; yes.
002EF5  3               :
002EF5  3  C6 64        	dec z80_e		; one less cell to next row down.
002EF7  3               tded0:
002EF7  3  18           	clc 			; point to next row.
002EF8  3  A5 rr        	lda bufaddr
002EFA  3  65 64        	adc z80_e
002EFC  3  85 rr        	sta bufaddr
002EFE  3  90 02        	bcc :+
002F00  3  E6 rr        	inc bufaddr+1
002F02  3               :
002F02  3  A0 00        	ldy #0
002F04  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002F06  3  C5 63        	cmp z80_b		; is this fatal?
002F08  3  D0 01        	bne :+
002F0A  3  60           	rts			; yes.
002F0B  3               :
002F0B  3  E6 rr        	inc bufaddr 		; next cell.
002F0D  3  D0 02        	bne :+
002F0F  3  E6 rr        	inc bufaddr+1
002F11  3               :
002F11  3  A0 00        	ldy #0
002F13  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F15  3  C5 63        	cmp z80_b		; is this fatal?
002F17  3  D0 01        	bne :+
002F19  3  60           	rts			; yes.
002F1A  3               :
002F1A  3  A5 62        	lda z80_c		; horizontal position.
002F1C  3  29 01        	and #1			; is it straddling cells?
002F1E  3  D0 03        	bne :+
002F20  3  4C 32 2F     	jmp tded1 		; no.
002F23  3               :
002F23  3  E6 rr        	inc bufaddr		; last cell.
002F25  3  D0 02        	bne :+
002F27  3  E6 rr        	inc bufaddr+1
002F29  3               :
002F29  3  A0 00        	ldy #0
002F2B  3  B1 rr        	lda (bufaddr),y		; fetch type.
002F2D  3  C5 63        	cmp z80_b		; is this fatal?
002F2F  3  D0 01        	bne :+
002F31  3  60           	rts			; yes.
002F32  3               :
002F32  3               tded1:
002F32  3  A5 rr        	lda dispy		; vertical position.
002F34  3  29 03        	and #3 			; is it straddling cells?
002F36  3  D0 01        	bne :+
002F38  3  60           	rts			; no, job done.
002F39  3               :
002F39  3  18           	clc			; point to next row.
002F3A  3  A5 rr        	lda bufaddr
002F3C  3  65 64        	adc z80_e
002F3E  3  85 rr        	sta bufaddr
002F40  3  90 02        	bcc :+
002F42  3  E6 rr        	inc bufaddr+1
002F44  3               :
002F44  3  A0 00        	ldy #0
002F46  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002F48  3  C5 63        	cmp z80_b		; is this fatal?
002F4A  3  D0 01        	bne :+
002F4C  3  60           	rts			; yes.
002F4D  3               :
002F4D  3  E6 rr        	inc bufaddr		; next cell.
002F4F  3  D0 02        	bne :+
002F51  3  E6 rr        	inc bufaddr+1
002F53  3               :
002F53  3  A0 00        	ldy #0
002F55  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F57  3  C5 63        	cmp z80_b		; is this fatal?
002F59  3  D0 01        	bne :+
002F5B  3  60           	rts			; yes.
002F5C  3               :
002F5C  3  A5 62        	lda z80_c		; horizontal position.
002F5E  3  29 01        	and #1			; is it straddling cells?
002F60  3  D0 01        	bne :+
002F62  3  60           	rts			; no.
002F63  3               :
002F63  3  E6 rr        	inc bufaddr		; last cell.
002F65  3  D0 02        	bne :+
002F67  3  E6 rr        	inc bufaddr+1
002F69  3               :
002F69  3  A0 00        	ldy #0
002F6B  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002F6D  3  60           	rts 			; return with final type in accumulator.
002F6E  3               
002F6E  3               ;---------------------------------------------------
002F6E  3               ; Fetch block type at (dispx, dispy).
002F6E  3               ;
002F6E  3               ; Output:
002F6E  3               ;  A = block type
002F6E  3               ;---------------------------------------------------
002F6E  3               
002F6E  3               tstbl:
002F6E  3  A5 rr        	lda dispy 		; fetch y coord.
002F70  3  AA           	tax
002F71  3               
002F71  3  A5 rr        	lda dispx		; x/8
002F73  3  4A           	lsr a
002F74  3  85 rr        	sta charx
002F76  3               
002F76  3  18           	clc
002F77  3  BD 00 DC     	lda SCADTB_lb,x
002F7A  3  65 rr        	adc charx
002F7C  3  85 rr        	sta bufaddr
002F7E  3               
002F7E  3  BD 00 DD     	lda SCADTB_hb,x
002F81  3  69 D4        	adc #(>MAP->ScreenAddr)
002F83  3  85 rr        	sta bufaddr+1
002F85  3               
002F85  3  A0 00        	ldy #0
002F87  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002F89  3  60           	rts
002F8A  3               
002F8A  3               ;-------------------------------------------------------------------
002F8A  3               ; Jump - if we can.
002F8A  3               ; Requires initial speed to be set up in accumulator prior to call.
002F8A  3               ;
002F8A  3               ; Input:
002F8A  3               ;  IX = sprite address
002F8A  3               ;-------------------------------------------------------------------
002F8A  3               
002F8A  3               jump:
002F8A  3  A0 0D        	ldy #13
002F8C  3  B1 68        	lda (z80_ix),y		; jump table low.
002F8E  3  A0 0E        	ldy #14
002F90  3  11 68        	ora (z80_ix),y		; jump table high.
002F92  3  F0 01        	beq :+
002F94  3  60           	rts			; already in the air.
002F95  3               :
002F95  3  A9 42        	lda #>jtab
002F97  3  A0 0E        	ldy #14
002F99  3  91 68        	sta (z80_ix),y		; set jump high.
002F9B  3  A9 B9        	lda #<jtab		; jump table start.
002F9D  3  A0 0D        	ldy #13
002F9F  3  91 68        	sta (z80_ix),y		; set jump low.
002FA1  3  60           	rts
002FA2  3               
002FA2  3               ; Jump table.
002FA2  3               
002FA2  3               ;jtab:
002FA2  3               ;	.byte 248,250,252
002FA2  3               ;	.byte 254,254,255
002FA2  3               ;	.byte 255,255,0,0
002FA2  3               ;	.byte 0,1,1,1,2,2
002FA2  3               ;	.byte 4,6,8,8,8,99
002FA2  3               
002FA2  3               ;------------------------------------------------
002FA2  3               ; Random numbers code.
002FA2  3               ; Pseudo-random number generator, 8-bit.
002FA2  3               ;
002FA2  3               ; Output:
002FA2  3               ;  RND = random number
002FA2  3               ;------------------------------------------------
002FA2  3               
002FA2  3               random:
002FA2  3  A5 rr        	lda seed
002FA4  3  F0 05        	beq doEor
002FA6  3  0A           	asl a
002FA7  3  F0 04        	beq noEor
002FA9  3  90 02        	bcc noEor
002FAB  3  49 1D        doEor:	eor #$1d
002FAD  3  85 rr        noEor:	sta seed
002FAF  3  60           	rts
002FB0  3               
002FB0  3  A5 rr        	lda seed		; get last random number.
002FB2  3  0A           	asl a
002FB3  3  0A           	asl a
002FB4  3  18           	clc
002FB5  3  65 rr        	adc seed
002FB7  3  18           	clc
002FB8  3  69 45        	adc #$45
002FBA  3  85 rr        	sta seed		; store new seed.
002FBC  3  85 rr        	sta varrnd		; return number in variable.
002FBE  3  60           	rts
002FBF  3               
002FBF  3               ;--------------------------------------------------------
002FBF  3               ; Keys
002FBF  3               ;
002FBF  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002FBF  3               ;             ||||||||
002FBF  3               ;             |||||||+> Right    KEY 0  - X
002FBF  3               ;             ||||||+-> Left     KEY 1  - Z
002FBF  3               ;             |||||+--> Down     KEY 2  - .
002FBF  3               ;             ||||+---> Up       KEY 3  - ;
002FBF  3               ;             |||+----> Fire1    KEY 4  - SPC
002FBF  3               ;             ||+-----> Fire2    KEY 5  - Q
002FBF  3               ;             |+------> Fire3    KEY 6  - P
002FBF  3               ;             +-------> Not used
002FBF  3               ;
002FBF  3               ;                       Option1  KEY 7  - 1
002FBF  3               ;                       Option2  KEY 8  - 2
002FBF  3               ;                       Option3  KEY 9  - 3
002FBF  3               ;                       Option4  KEY 10 - 4
002FBF  3               ;--------------------------------------------------------
002FBF  3               
002FBF  3               ;              X   Z   .   ;  SPC  Q   P
002FBF  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002FBF  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002FBF  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002FC3  3  00 04 14     
002FC6  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002FCA  3               
002FCA  3               ;-------------------------------------------------------
002FCA  3               ; Joystick and keyboard reading routines.
002FCA  3               ;
002FCA  3               ; contrl = 0, Keyboard
002FCA  3               ;          1, JoyKeyb
002FCA  3               ;          2, JoyMMC
002FCA  3               ;-------------------------------------------------------
002FCA  3               
002FCA  3               joykey:
002FCA  3  A5 rr        	lda contrl 		; control flag.
002FCC  3  C9 01        	cmp #1
002FCE  3  D0 03        	bne :+
002FD0  3  4C 7F 43     	jmp joy1 		; read keyboard joystick
002FD3  3               :
002FD3  3  C9 02        	cmp #2
002FD5  3  D0 03        	bne :+
002FD7  3  4C 80 43     	jmp joy2 		; read MMC joystick.
002FDA  3               :
002FDA  3               ; Keyboard controls.
002FDA  3               
002FDA  3  A9 00        	lda #0		 	; zero reading.
002FDC  3  85 64        	sta z80_e
002FDE  3               
002FDE  3  A0 06        	ldy #6	 		; address of last key.
002FE0  3               joyke0:
002FE0  3  B9 BA 42     	lda keys,y 		; get key from table.
002FE3  3  20 81 43     	jsr ktest		; being pressed?
002FE6  3  26 64        	rol z80_e 		; rotate into reading.
002FE8  3               
002FE8  3  88           	dey		 	; next key.
002FE9  3  10 F5        	bpl joyke0 		; repeat for all keys.
002FEB  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002FED  3  85 rr        	sta joyval		; remember value.
002FEF  3  60           	rts
002FF0  3               
002FF0  3               ;---------------------------------------------------------------
002FF0  3               ; Getkey in column,row format
002FF0  3               ;
002FF0  3               ; Output:
002FF0  3               ;  A = high nibble=row and low nibble=column key in matrix
002FF0  3               ;---------------------------------------------------------------
002FF0  3               
002FF0  3               ;kget:
002FF0  3               ;	lda #ScrMode		; high-mono mode.
002FF0  3               ;	sta ScrSelAddr		; screen select port
002FF0  3               ;	stx xtmp
002FF0  3               ;kget4:
002FF0  3               ;	jsr READKEY		; read key until pressed
002FF0  3               ;	cpy #255
002FF0  3               ;	beq kget4
002FF0  3               ;	sta rcol		; save column
002FF0  3               ;	stx rrow		; determine row
002FF0  3               ;kget3:
002FF0  3               ;	jsr READKEY		; wait until key released
002FF0  3               ;	cpy #255
002FF0  3               ;	bne kget3
002FF0  3               ;
002FF0  3               ;	sec			; calculate matrix row
002FF0  3               ;	lda #10
002FF0  3               ;	sbc rrow
002FF0  3               ;	asl a
002FF0  3               ;	asl a
002FF0  3               ;	asl a
002FF0  3               ;	asl a
002FF0  3               ;	sta rrow
002FF0  3               ;
002FF0  3               ;	ldy #255		; find column mask
002FF0  3               ;kget1:
002FF0  3               ;	iny
002FF0  3               ;	lda keymask,y
002FF0  3               ;	cmp rcol
002FF0  3               ;	beq kget2
002FF0  3               ;	jmp kget1
002FF0  3               ;kget2:
002FF0  3               ;	tya			; determine column
002FF0  3               ;	clc
002FF0  3               ;	adc rrow
002FF0  3               ;	ldx xtmp
002FF0  3               ;	rts
002FF0  3               
002FF0  3               ;---------------------------------------------------------------
002FF0  3               ; Display message.
002FF0  3               ;
002FF0  3               ; Input:
002FF0  3               ;  A = message number
002FF0  3               ;---------------------------------------------------------------
002FF0  3               
002FF0  3               dmsg:
002FF0  3  AA           	tax
002FF1  3  A9 58        	lda #<msgdat		; pointer to messages.
002FF3  3  85 66        	sta z80_l
002FF5  3  A9 3C        	lda #>msgdat
002FF7  3  85 67        	sta z80_h
002FF9  3  20 E0 30     	jsr getwrd		; get message number.
002FFC  3               dmsg3:
002FFC  3  20 D7 30     	jsr preprt		; pre-printing stuff.
002FFF  3  20 3F 2B     	jsr checkx		; make sure we"re in a printable range.
003002  3  A5 rr        	lda prtmod		; print mode.
003004  3  D0 50        	bne bmsg1		; no, double-height text.
003006  3               
003006  3  AD A1 39     	lda fcolour		; Set textcolour
003009  3  20 BD 2C     	jsr pchar
00300C  3  20 C4 30     	jsr nexpos
00300F  3               dmsg0:
00300F  3  A5 67        	lda z80_h		; store string pointer.
003011  3  48           	pha
003012  3  A5 66        	lda z80_l
003014  3  48           	pha
003015  3               
003015  3  A0 00        	ldy #0
003017  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
003019  3  29 7F        	and #127		; remove any end marker.
00301B  3  C9 0D        	cmp #13
00301D  3  F0 24        	beq dmsg1
00301F  3  20 BD 2C     	jsr pchar		; display character.
003022  3  20 C4 30     	jsr nexpos 		; display position.
003025  3  D0 03        	bne dmsg2		; not on a new line.
003027  3  20 C9 30     	jsr nexlin		; next line down.
00302A  3               dmsg2:
00302A  3  68           	pla			; retrieve string pointer
00302B  3  85 66        	sta z80_l
00302D  3  68           	pla
00302E  3  85 67        	sta z80_h
003030  3               
003030  3  A0 00        	ldy #0
003032  3  B1 66        	lda (z80_hl),y		; fetch last character.
003034  3  0A           	asl a  			; was it the end?
003035  3  90 03        	bcc :+
003037  3  4C 92 2B     	jmp dscor2		; yes, job done.
00303A  3               :
00303A  3  E6 66        	inc z80_l		; next character to display.
00303C  3  D0 02        	bne :+
00303E  3  E6 67        	inc z80_h
003040  3               :
003040  3  4C 0F 30     	jmp dmsg0
003043  3               dmsg1:
003043  3  E6 rr        	inc dispy
003045  3  A5 rr        	lda dispy
003047  3  C9 19        	cmp #ScrHeight
003049  3  90 04        	bcc dmsg4
00304B  3  A9 00        	lda #0
00304D  3  85 rr        	sta dispy
00304F  3               dmsg4:
00304F  3  A9 00        	lda #0
003051  3  85 rr        	sta dispx
003053  3  4C 2A 30     	jmp dmsg2
003056  3               
003056  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
003056  3               
003056  3               ;----------------------------------------------------------
003056  3               ; Display message in big text.
003056  3               ;
003056  3               ; Input:
003056  3               ;  HL = string pointer
003056  3               ;----------------------------------------------------------
003056  3               
003056  3               bmsg1:
003056  3  AD A1 39     	lda fcolour		; Set textcolour
003059  3  20 95 30     	jsr bchar
00305C  3  A9 0D        	lda #13			; Set double height
00305E  3  20 95 30     	jsr bchar
003061  3               bmsg4:
003061  3  A0 00        	ldy #0
003063  3  B1 66        	lda (z80_hl),y 		; get character to display.
003065  3  29 7F        	and #127		; only want 7 bits.
003067  3  C9 0D        	cmp #13
003069  3  F0 15        	beq bmsg2
00306B  3  20 95 30     	jsr bchar 		; display big char.
00306E  3               bmsg3:
00306E  3  A0 00        	ldy #0
003070  3  B1 66        	lda (z80_hl),y 		; look at last character.
003072  3  48           	pha
003073  3  E6 66        	inc z80_l 		; next character in list.
003075  3  D0 02        	bne :+
003077  3  E6 67        	inc z80_h
003079  3               :
003079  3  68           	pla
00307A  3  0A           	asl a  			; was terminator flag set?
00307B  3  90 E4        	bcc bmsg4		; no, keep going.
00307D  3  4C 92 2B     	jmp dscor2
003080  3               bmsg2:
003080  3  A9 00        	lda #0
003082  3  85 rr        	sta dispx
003084  3  E6 rr        	inc dispy
003086  3  E6 rr        	inc dispy
003088  3  A5 rr        	lda dispy
00308A  3  C9 18        	cmp #ScrHeight-1
00308C  3  90 E0        	bcc bmsg3
00308E  3  A9 00        	lda #0
003090  3  85 rr        	sta dispy
003092  3  4C 6E 30     	jmp bmsg3
003095  3               
003095  3               ;----------------------------------------------------------
003095  3               ; Big character display.
003095  3               ;
003095  3               ; Input:
003095  3               ;  A = character
003095  3               ;----------------------------------------------------------
003095  3               
003095  3               bchar:
003095  3  20 BD 2C     	jsr pchar 		; display big char.
003098  3  E6 rr        	inc dispy
00309A  3  20 BD 2C     	jsr pchar
00309D  3  C6 rr        	dec dispy
00309F  3  20 C4 30     	jsr nexpos		; display position.
0030A2  3  60           	rts
0030A3  3               
0030A3  3               bchar3:
0030A3  3  E6 rr        	inc dispy
0030A5  3  20 C9 30     	jsr nexlin 		; next line check.
0030A8  3               bchar2:
0030A8  3  4C 92 2B     	jmp dscor2		; tidy up line and column variables.
0030AB  3               
0030AB  3               
0030AB  3               ;-------------------------------------------------
0030AB  3               ; Display a character.
0030AB  3               ;
0030AB  3               ; Input:
0030AB  3               ;  A = character
0030AB  3               ;-------------------------------------------------
0030AB  3               
0030AB  3               achar:
0030AB  3  85 63        	sta z80_b 		; copy to b.
0030AD  3  20 D7 30     	jsr preprt 		; get ready to print.
0030B0  3  A5 63        	lda z80_b		; character in accumulator.
0030B2  3  A6 rr        	ldx prtmod 		; print mode.
0030B4  3  F0 03        	beq :+
0030B6  3  4C 95 30     	jmp bchar 		; no, double-height text.
0030B9  3               :
0030B9  3  20 BD 2C     	jsr pchar 		; display character.
0030BC  3  20 C4 30     	jsr nexpos 		; display position.
0030BF  3  F0 E2        	beq bchar3		; next line down.
0030C1  3  4C A8 30     	jmp bchar2 		; tidy up.
0030C4  3               
0030C4  3               
0030C4  3               ;-------------------------------------------------
0030C4  3               ; Get next print column position.
0030C4  3               ;-------------------------------------------------
0030C4  3               
0030C4  3               nexpos:
0030C4  3  E6 rr        	inc dispx		; move along one position.
0030C6  3  A5 rr        	lda dispx 		; get coordinate.
0030C8  3               ;	and #31
0030C8  3  60           	rts 			; return with status in zero flag.
0030C9  3               
0030C9  3               ;-------------------------------------------------
0030C9  3               ; Get next print line position.
0030C9  3               ;-------------------------------------------------
0030C9  3               
0030C9  3               nexlin:
0030C9  3  E6 rr        	inc dispy 		; newline.
0030CB  3  A5 rr        	lda dispy		; vertical position.
0030CD  3  C9 19        	cmp #ScrHeight			; past screen edge?
0030CF  3  B0 01        	bcs :+
0030D1  3  60           	rts			; no, still okay.
0030D2  3               :
0030D2  3  A9 00        	lda #0			; restart at top.
0030D4  3  85 rr        	sta dispy
0030D6  3  60           	rts
0030D7  3               
0030D7  3               ;--------------------------------------------------------
0030D7  3               ; Pre-print preliminaries.
0030D7  3               ;--------------------------------------------------------
0030D7  3               
0030D7  3               preprt:
0030D7  3               ;	lda #<(FONT-256)		; font pointer.
0030D7  3               ;	sta grbase		; set up graphics base.
0030D7  3               ;	lda #>(FONT-256)
0030D7  3               ;	sta grbase+1
0030D7  3               prescr:
0030D7  3  A5 rr        	lda charx 		; display coordinates.
0030D9  3  85 rr        	sta dispx		; set up general coordinates.
0030DB  3  A5 rr        	lda chary
0030DD  3  85 rr        	sta dispy
0030DF  3  60           	rts
0030E0  3               
0030E0  3               ;--------------------------------------------------------------
0030E0  3               ; Get messagenr x in hl
0030E0  3               ;
0030E0  3               ; Input:
0030E0  3               ;  HL = pointer to message list
0030E0  3               ;  X  = message number.
0030E0  3               ;--------------------------------------------------------------
0030E0  3               
0030E0  3               getwrd:
0030E0  3  E0 00        	cpx #0
0030E2  3  D0 01        	bne:+ 			; first word in list?
0030E4  3  60           	rts 			; yep, don't search.
0030E5  3               :
0030E5  3  A0 00        	ldy #0
0030E7  3               getwd0:
0030E7  3  B1 66        	lda (z80_hl),y
0030E9  3  48           	pha
0030EA  3  E6 66        	inc z80_l
0030EC  3  D0 02        	bne :+
0030EE  3  E6 67        	inc z80_h
0030F0  3               :
0030F0  3  68           	pla
0030F1  3  C9 80        	cmp #128		; found end?
0030F3  3  30 F2        	bmi getwd0		; no, carry on.
0030F5  3  CA           	dex			; until we have right number.
0030F6  3  D0 EF        	bne getwd0
0030F8  3  60           	rts
0030F9  3               
0030F9  3               ;-----------------------------------------------------------
0030F9  3               ; Bubble sort.
0030F9  3               ;-----------------------------------------------------------
0030F9  3               
0030F9  3               bsort:
0030F9  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0030FB  3  85 rr        	sta qscnt
0030FD  3               
0030FD  3  A9 B3        	lda #<sprtab 		; sprite table.
0030FF  3  85 68        	sta z80_x
003101  3  A9 38        	lda #>sprtab
003103  3  85 69        	sta z80_i
003105  3               bsort0:
003105  3  A0 00        	ldy #0
003107  3  B1 68        	lda (z80_ix),y 		; first sprite type.
003109  3  C9 FF        	cmp #255 		; is it switched off?
00310B  3  F0 30        	beq swemp		; yes, may need to switch another in here.
00310D  3               
00310D  3  A0 11        	ldy #TABSIZ
00310F  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
003111  3  C9 FF        	cmp #255 		; is it enabled?
003113  3  F0 0A        	beq bsort2 		; no, nothing to swap.
003115  3               
003115  3  A0 14        	ldy #TABSIZ+3
003117  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
003119  3  A0 03        	ldy #3
00311B  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
00311D  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
00311F  3               bsort2:
00311F  3  18           	clc
003120  3  A5 68        	lda z80_x
003122  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003124  3  85 68        	sta z80_x
003126  3  90 02        	bcc :+
003128  3  E6 69        	inc z80_i
00312A  3               :
00312A  3  C6 rr        	dec qscnt
00312C  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
00312E  3  60           	rts
00312F  3               
00312F  3               ;qscnt:	.byte 0
00312F  3               
00312F  3               bsort1:
00312F  3  A0 11        	ldy #TABSIZ
003131  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
003133  3  C9 FF        	cmp #255		; is it enabled?
003135  3  F0 E8        	beq bsort2		; no, nothing to swap.
003137  3  20 4B 31     	jsr swspr		; swap positions.
00313A  3  4C 1F 31     	jmp bsort2
00313D  3               swemp:
00313D  3  A0 11        	ldy #TABSIZ
00313F  3  B1 68        	lda (z80_ix),y		; next table entry.
003141  3  C9 FF        	cmp #255		; is that one on?
003143  3  F0 DA        	beq bsort2		; no, nothing to swap.
003145  3  20 4B 31     	jsr swspr		; swap positions.
003148  3  4C 1F 31     	jmp bsort2
00314B  3               
00314B  3               ; Swap sprites.
00314B  3               
00314B  3               swspr:
00314B  3  A5 68        	lda z80_x		; table address
00314D  3  85 64        	sta z80_e		; copy to de pair.
00314F  3  85 66        	sta z80_l		; copy to hl pair.
003151  3  A5 69        	lda z80_i
003153  3  85 67        	sta z80_h
003155  3  85 65        	sta z80_d
003157  3               
003157  3  18           	clc
003158  3  A5 66        	lda z80_l
00315A  3  69 11        	adc #TABSIZ		; distance to second entry.
00315C  3  85 66        	sta z80_l
00315E  3  90 02        	bcc :+
003160  3  E6 67        	inc z80_h
003162  3               :
003162  3  A9 11        	lda #TABSIZ		; bytes to swap.
003164  3  85 63        	sta z80_b
003166  3  A0 00        	ldy #0
003168  3               swspr0:
003168  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00316A  3  48           	pha
00316B  3  B1 64        	lda (z80_de),y 		; fetch first byte.
00316D  3  91 66        	sta (z80_hl),y 		; copy to second.
00316F  3  68           	pla
003170  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
003172  3               
003172  3  E6 64        	inc z80_e 		; next byte.
003174  3  D0 02        	bne :+
003176  3  E6 65        	inc z80_d
003178  3               :
003178  3  E6 66        	inc z80_l 		; next byte.
00317A  3  D0 02        	bne :+
00317C  3  E6 67        	inc z80_h
00317E  3               :
00317E  3  C6 63        	dec z80_b
003180  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
003182  3  60           	rts
003183  3               
003183  3               ;----------------------------------------------------
003183  3               ; Process sprites.
003183  3               ;----------------------------------------------------
003183  3               
003183  3               pspr:
003183  3  A9 0C        	lda #NUMSPR		; sprites to process.
003185  3  85 rr        	sta sprptr
003187  3               
003187  3  A9 B3        	lda #<sprtab 		; sprite table.
003189  3  85 68        	sta z80_x
00318B  3  A9 38        	lda #>sprtab
00318D  3  85 69        	sta z80_i
00318F  3               pspr1:
00318F  3  A0 00        	ldy #0
003191  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
003193  3  C9 09        	cmp #9 			; within range of sprite types?
003195  3  B0 03        	bcs :+
003197  3  20 AA 31     	jsr pspr2 		; yes, process this one.
00319A  3               :
00319A  3  18           	clc
00319B  3  A5 68        	lda z80_x
00319D  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00319F  3  85 68        	sta z80_x
0031A1  3  90 02        	bcc :+
0031A3  3  E6 69        	inc z80_i		; next sprite.
0031A5  3               :
0031A5  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
0031A7  3  D0 E6        	bne pspr1
0031A9  3  60           	rts
0031AA  3               
0031AA  3               ;sprptr:	.byte 0
0031AA  3               
0031AA  3               pspr2:
0031AA  3  A5 68        	lda z80_x 		; store original sprite pointer.
0031AC  3  85 rr        	sta ogptr
0031AE  3  A5 69        	lda z80_i
0031B0  3  85 rr        	sta ogptr+1
0031B2  3  20 BE 31     	jsr pspr3		; do the routine.
0031B5  3               rtorg:
0031B5  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0031B7  3  85 68        	sta z80_x
0031B9  3  A5 rr        	lda ogptr+1
0031BB  3  85 69        	sta z80_i
0031BD  3               rtorg0:
0031BD  3  60           	rts
0031BE  3               
0031BE  3               pspr3:
0031BE  3  A9 F3        	lda #<evtyp0		; sprite type events list.
0031C0  3  85 66        	sta z80_l
0031C2  3  A9 31        	lda #>evtyp0
0031C4  3  85 67        	sta z80_h
0031C6  3               pspr4:
0031C6  3  B1 68        	lda (z80_ix),y
0031C8  3  0A           	asl a			; double accumulator.
0031C9  3  18           	clc
0031CA  3  65 66        	adc z80_l
0031CC  3  85 66        	sta z80_l
0031CE  3  90 02        	bcc :+
0031D0  3  E6 67        	inc z80_h
0031D2  3               :
0031D2  3  B1 66        	lda (z80_hl),y
0031D4  3  85 64        	sta z80_e 		; copy to de.
0031D6  3  48           	pha
0031D7  3               
0031D7  3  E6 66        	inc z80_l 		; next byte of address.
0031D9  3  D0 02        	bne :+
0031DB  3  E6 67        	inc z80_h
0031DD  3               :
0031DD  3  B1 66        	lda (z80_hl),y 		; address high.
0031DF  3  85 65        	sta z80_d
0031E1  3               
0031E1  3  48           	pha	 		; swap address into hl.
0031E2  3  A5 67        	lda z80_h
0031E4  3  85 65        	sta z80_d
0031E6  3  68           	pla
0031E7  3  85 67        	sta z80_h
0031E9  3  68           	pla
0031EA  3  85 66        	sta z80_l
0031EC  3  A5 66        	lda z80_l
0031EE  3  85 64        	sta z80_e
0031F0  3               
0031F0  3  6C 66 00     	jmp (z80_hl) 		; go there.
0031F3  3               
0031F3  3               ;ogptr:	.word 0			; original sprite pointer.
0031F3  3               
0031F3  3               ; Address of each sprite type's routine.
0031F3  3               
0031F3  3  AE 39        evtyp0:	.word evnt00
0031F5  3  9D 3A        evtyp1:	.word evnt01
0031F7  3  E2 3B        evtyp2:	.word evnt02
0031F9  3  E3 3B        evtyp3:	.word evnt03
0031FB  3  E4 3B        evtyp4:	.word evnt04
0031FD  3  E5 3B        evtyp5:	.word evnt05
0031FF  3  E6 3B        evtyp6:	.word evnt06
003201  3  E7 3B        evtyp7:	.word evnt07
003203  3  E8 3B        evtyp8:	.word evnt08
003205  3               
003205  3               ;--------------------------------------------------------------
003205  3               ; Display sprites.
003205  3               ;
003205  3               ; Input:
003205  3               ;  IX = sprite table
003205  3               ;--------------------------------------------------------------
003205  3               
003205  3               dspr:
003205  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003207  3  85 rr        	sta sprcnt
003209  3               dspr0:
003209  3  A0 00        	ldy #0
00320B  3  B1 68        	lda (z80_ix),y 		; get sprite type.
00320D  3  C9 FF        	cmp #255 		; is it enabled?
00320F  3  D0 42        	bne dspr1 		; yes, it needs deleting.
003211  3               dspr5:
003211  3  A0 05        	ldy #5
003213  3  B1 68        	lda (z80_ix),y 		; new type.
003215  3  C9 FF        	cmp #255		; is it enabled?
003217  3  D0 76        	bne dspr3 		; yes, it needs drawing.
003219  3               dspr2:
003219  3  A0 05        	ldy #5
00321B  3  B1 68        	lda (z80_ix),y 		; copy new type.
00321D  3  A0 00        	ldy #0
00321F  3  91 68        	sta (z80_ix),y
003221  3  A0 06        	ldy #6
003223  3  B1 68        	lda (z80_ix),y 		; copy new image number.
003225  3  A0 01        	ldy #1
003227  3  91 68        	sta (z80_ix),y
003229  3  A0 07        	ldy #7
00322B  3  B1 68        	lda (z80_ix),y 		; copy new frame.
00322D  3  A0 02        	ldy #2
00322F  3  91 68        	sta (z80_ix),y
003231  3  A0 08        	ldy #8
003233  3  B1 68        	lda (z80_ix),y 		; copy new y.
003235  3  A0 03        	ldy #3
003237  3  91 68        	sta (z80_ix),y
003239  3  A0 09        	ldy #9
00323B  3  B1 68        	lda (z80_ix),y 		; copy new x.
00323D  3  A0 04        	ldy #4
00323F  3  91 68        	sta (z80_ix),y
003241  3               
003241  3  18           	clc
003242  3  A5 68        	lda z80_x
003244  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
003246  3  85 68        	sta z80_x
003248  3  A5 69        	lda z80_i
00324A  3  69 00        	adc #0
00324C  3  85 69        	sta z80_i 		; next sprite.
00324E  3  C6 rr        	dec sprcnt
003250  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
003252  3  60           	rts
003253  3               dspr1:
003253  3  A0 05        	ldy #5
003255  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
003257  3  C9 FF        	cmp #255		; is this enabled?
003259  3  D0 06        	bne dspr4 		; yes, display both.
00325B  3               dspr6:
00325B  3  20 4C 33     	jsr sspria 		; show single sprite.
00325E  3  4C 19 32     	jmp dspr2
003261  3               
003261  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
003261  3               
003261  3               dspr4:
003261  3  A0 04        	ldy #4
003263  3  B1 68        	lda (z80_ix),y		; old x.
003265  3  A0 09        	ldy #9
003267  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
003269  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
00326B  3               
00326B  3  A0 03        	ldy #3
00326D  3  B1 68        	lda (z80_ix),y		; old y.
00326F  3  A0 08        	ldy #8
003271  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003273  3  D0 14        	bne dspr7		; they differ, need to redraw.
003275  3               
003275  3  A0 02        	ldy #2
003277  3  B1 68        	lda (z80_ix),y 		; old frame.
003279  3  A0 07        	ldy #7
00327B  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00327D  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
00327F  3               
00327F  3  A0 01        	ldy #1
003281  3  B1 68        	lda (z80_ix),y 		; old image.
003283  3  A0 06        	ldy #6
003285  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003287  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
003289  3               dspr7:
003289  3  20 7F 33     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00328C  3  4C 19 32     	jmp dspr2
00328F  3               dspr3:
00328F  3  20 79 33     	jsr ssprib 		; show single sprite.
003292  3  4C 19 32     	jmp dspr2
003295  3               
003295  3               ;sprcnt:	.byte 0
003295  3               
003295  3               ;-----------------------------------------
003295  3               ; Get sprite address calculations.
003295  3               ; gspran = new sprite, gsprad = old sprite.
003295  3               ;
003295  3               ; Input:
003295  3               ;  IX = sprite address
003295  3               ;-----------------------------------------
003295  3               
003295  3               gspran:
003295  3  A0 08        	ldy #8
003297  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003299  3  85 rr        	sta dispy
00329B  3  A0 09        	ldy #9
00329D  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00329F  3  85 rr        	sta dispx
0032A1  3  A0 06        	ldy #6
0032A3  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0032A5  3  20 D5 36     	jsr gfrm		; fetch start frame for this sprite.
0032A8  3               
0032A8  3  A0 00        	ldy #0
0032AA  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032AC  3  A0 07        	ldy #7
0032AE  3  18           	clc
0032AF  3  71 68        	adc (z80_ix),y 		; new add frame number.
0032B1  3  4C D0 32     	jmp gspra0
0032B4  3               
0032B4  3               ;-----------------------------------------
0032B4  3               ; Calculate old sprite address
0032B4  3               ;
0032B4  3               ; Input:
0032B4  3               ;  IX = sprite address
0032B4  3               ;
0032B4  3               ; Output:
0032B4  3               ;  B  = right byte mask
0032B4  3               ;  C  = left byte mask
0032B4  3               ;  DE = spriteframe address
0032B4  3               ;  scraddr = screenaddress(dispx,dispy)
0032B4  3               ;-----------------------------------------
0032B4  3               
0032B4  3               gsprad:
0032B4  3  A0 03        	ldy #3
0032B6  3  B1 68        	lda (z80_ix),y		; y coordinate.
0032B8  3  85 rr        	sta dispy
0032BA  3  A0 04        	ldy #4
0032BC  3  B1 68        	lda (z80_ix),y		; x coordinate.
0032BE  3  85 rr        	sta dispx
0032C0  3  A0 01        	ldy #1
0032C2  3  B1 68        	lda (z80_ix),y 		; sprite image.
0032C4  3  20 D5 36     	jsr gfrm 		; fetch start frame for this sprite.
0032C7  3               
0032C7  3               ; z80_hl = sprite framenr
0032C7  3               
0032C7  3  A0 00        	ldy #0
0032C9  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032CB  3               
0032CB  3               ; z80_ix+2 = current framenr
0032CB  3               
0032CB  3  A0 02        	ldy #2
0032CD  3  18           	clc
0032CE  3  71 68        	adc (z80_ix),y 		; add frame number.
0032D0  3               
0032D0  3               ; A = sprite framenr + current framenr
0032D0  3               ;
0032D0  3               ; framestartaddress = 24 * A (Normal 4 x 32 = 128)
0032D0  3               ; frameoffset =  + 6 * (x and 2)   (Normal steps of 32)
0032D0  3               ; framedataptr = framestartaddress + frameoffset + sprgfx
0032D0  3               
0032D0  3               gspra0:
0032D0  3               
0032D0  3               ; framestartaddress = 24 * sprite image (Normal 4 x 32 = 128)
0032D0  3               
0032D0  3  85 64        	sta z80_e
0032D2  3  A9 00        	lda #0
0032D4  3  85 65        	sta z80_d
0032D6  3               
0032D6  3  06 64        	asl z80_e		; a x 8
0032D8  3  26 65        	rol z80_d
0032DA  3  06 64        	asl z80_e
0032DC  3  26 65        	rol z80_d
0032DE  3  06 64        	asl z80_e
0032E0  3  26 65        	rol z80_d
0032E2  3               
0032E2  3  A5 64        	lda z80_e		; save a x 8
0032E4  3  8D 4A 33     	sta tmp1
0032E7  3  A5 65        	lda z80_d
0032E9  3  8D 4B 33     	sta tmp2
0032EC  3               
0032EC  3  06 64        	asl z80_e		; a x 16
0032EE  3  26 65        	rol z80_d
0032F0  3               
0032F0  3  18           	clc			; z80_de = ax8 + ax16 = ax24
0032F1  3  A5 64        	lda z80_e
0032F3  3  6D 4A 33     	adc tmp1
0032F6  3  85 64        	sta z80_e
0032F8  3  A5 65        	lda z80_d
0032FA  3  6D 4B 33     	adc tmp2
0032FD  3  85 65        	sta z80_d
0032FF  3               
0032FF  3               ;.if bflag
0032FF  3               ;	lsr tmp1
0032FF  3               ;	ror tmp2
0032FF  3               ;	clc
0032FF  3               ;	lda tmp2
0032FF  3               ;	adc z80_e
0032FF  3               ;	sta z80_e
0032FF  3               ;	lda tmp1
0032FF  3               ;	adc z80_d
0032FF  3               ;	sta z80_d
0032FF  3               ;.endif
0032FF  3               
0032FF  3  18           	clc 			; address of play sprites.
003300  3  A5 64        	lda z80_e
003302  3  69 CD        	adc #<sprgfx
003304  3  85 64        	sta z80_e
003306  3  A5 65        	lda z80_d
003308  3  69 3C        	adc #>sprgfx
00330A  3  85 65        	sta z80_d
00330C  3               
00330C  3               ; frameoffset =  + 12 * (x and 1) (steps of 32)
00330C  3               
00330C  3  A5 rr        	lda dispx 		; x coordinate.
00330E  3  29 01        	and #1
003310  3  F0 0B        	beq no_shift
003312  3  18           	clc			; Point to odd frame
003313  3  A5 64        	lda z80_e
003315  3  69 0C        	adc #12
003317  3  85 64        	sta z80_e
003319  3  90 02        	bcc :+
00331B  3  E6 65        	inc z80_d
00331D  3               :
00331D  3               ; Spritemask is z80_c = mask_left and z80_b = mask_right
00331D  3               
00331D  3               no_shift:
00331D  3  A5 rr        	lda dispx
00331F  3  29 01        	and #1
003321  3  0A           	asl a
003322  3  AA           	tax
003323  3  BD 46 33     	lda spmask,x		 ; pointer to mask table.
003326  3  85 62        	sta z80_c 		; left mask.
003328  3  BD 47 33     	lda spmask+1,x
00332B  3  85 63        	sta z80_b 		; right mask.
00332D  3               
00332D  3               ;------------------------------------------------------------------
00332D  3               ; Drop into screen address routine.
00332D  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
00332D  3               ;------------------------------------------------------------------
00332D  3               
00332D  3               ; Check for bottom of screen
00332D  3               
00332D  3               scadd:
00332D  3  A6 rr        	ldx dispy
00332F  3  E0 4C        	cpx #76
003331  3  90 02        	bcc :+
003333  3  A2 4C        	ldx #76
003335  3               :
003335  3               
003335  3  A5 rr        	lda dispx
003337  3  4A           	lsr a
003338  3  18           	clc
003339  3  7D 00 DC     	adc SCADTB_lb,x
00333C  3  85 rr        	sta scraddr
00333E  3  BD 00 DD     	lda SCADTB_hb,x
003341  3  69 00        	adc #0
003343  3  85 rr        	sta scraddr+1
003345  3  60           	rts
003346  3               
003346  3               spmask:
003346  3  FF 00        	.byte $ff,$00
003348  3  6A 35        	.byte $6a,$35
00334A  3               
00334A  3  00           tmp1:	.byte 0
00334B  3  00           tmp2:	.byte 0
00334C  3               
00334C  3               ;-----------------------------------------------------------------
00334C  3               ; These are the sprite routines.
00334C  3               ; sspria = single sprite, old (ix).
00334C  3               ; ssprib = single sprite, new (ix+5).
00334C  3               ; sspric = both sprites, old (ix) and new (ix+5).
00334C  3               ;-----------------------------------------------------------------
00334C  3               
00334C  3               sspria:
00334C  3  20 B4 32     	jsr gsprad		; get old sprite address.
00334F  3               sspri2:
00334F  3  A5 64        	lda z80_e
003351  3  8D D9 33     	sta dline1+1		; Set spritedata address
003354  3  8D EA 33     	sta dline2a+1
003357  3  8D F5 33     	sta dline2b+1
00335A  3  8D 00 34     	sta dline2c+1
00335D  3  A5 65        	lda z80_d
00335F  3  8D DA 33     	sta dline1+2
003362  3  8D EB 33     	sta dline2a+2
003365  3  8D F6 33     	sta dline2b+2
003368  3  8D 01 34     	sta dline2c+2
00336B  3  86 rr        	stx xtmp
00336D  3  A2 00        	ldx #0			; vertical lines.
00336F  3               sspri0:
00336F  3  20 D5 33     	jsr dline		; draw a line.
003372  3               
003372  3               .if bflag
003372  3               	cpx #16			; Detect end of line 3
003372  3               .else
003372  3  E0 0C        	cpx #12			; Detect end of line 2
003374  3               .endif
003374  3               
003374  3  D0 F9        	bne sspri0		; no, repeat
003376  3  A6 rr        	ldx xtmp
003378  3  60           	rts
003379  3               
003379  3               ;-----------------------------------------------------------------
003379  3               ; ssprib = single sprite, new (ix).
003379  3               ;-----------------------------------------------------------------
003379  3               
003379  3               ssprib:
003379  3  20 95 32     	jsr gspran 		; get new sprite address.
00337C  3               				; z80_de = new sprite address
00337C  3  4C 4F 33     	jmp sspri2
00337F  3               
00337F  3               ;-----------------------------------------------------------------
00337F  3               ; sspric = erase old sprite and plot new sprite line by line
00337F  3               ;-----------------------------------------------------------------
00337F  3               
00337F  3               sspric:
00337F  3  20 B4 32     	jsr gsprad 		; get old sprite address.
003382  3               				; z80_de = old sprite address
003382  3  A5 64        	lda z80_e
003384  3  8D 19 34     	sta ddline1+1		; Set spritedata address
003387  3  8D 2A 34     	sta ddline2a+1
00338A  3  8D 35 34     	sta ddline2b+1
00338D  3  8D 40 34     	sta ddline2c+1
003390  3  A5 65        	lda z80_d
003392  3  8D 1A 34     	sta ddline1+2
003395  3  8D 2B 34     	sta ddline2a+2
003398  3  8D 36 34     	sta ddline2b+2
00339B  3  8D 41 34     	sta ddline2c+2
00339E  3  20 9E 43     	jsr exx  		; store addresses.
0033A1  3               
0033A1  3  20 95 32     	jsr gspran 		; get new sprite addresses.
0033A4  3               				; z80_de = old sprite address
0033A4  3  A5 64        	lda z80_e
0033A6  3  8D D9 33     	sta dline1+1		; Set spritedata address
0033A9  3  8D EA 33     	sta dline2a+1
0033AC  3  8D F5 33     	sta dline2b+1
0033AF  3  8D 00 34     	sta dline2c+1
0033B2  3  A5 65        	lda z80_d
0033B4  3  8D DA 33     	sta dline1+2
0033B7  3  8D EB 33     	sta dline2a+2
0033BA  3  8D F6 33     	sta dline2b+2
0033BD  3  8D 01 34     	sta dline2c+2
0033C0  3               
0033C0  3  86 rr        	stx xtmp
0033C2  3  A2 00        	ldx #0			; vertical lines.
0033C4  3               lloop:
0033C4  3  20 D5 33     	jsr dline 		; draw a line.
0033C7  3  CA           	dex
0033C8  3  CA           	dex
0033C9  3  CA           	dex
0033CA  3  CA           	dex
0033CB  3  20 15 34     	jsr ddline 		; delete a line.
0033CE  3               
0033CE  3               .if bflag
0033CE  3               	cpx #16			; Detect end of line 3
0033CE  3               .else
0033CE  3  E0 0C        	cpx #12			; Detect end of line 2
0033D0  3               .endif
0033D0  3  D0 F2        	bne lloop		; no, repeat
0033D2  3  A6 rr        	ldx xtmp
0033D4  3  60           	rts
0033D5  3               
0033D5  3               
0033D5  3               ;-----------------------------------------------------------------
0033D5  3               
0033D5  3               dline:
0033D5  3  BC 55 34     	ldy sprline,x		; point to screenleft
0033D8  3               dline1:
0033D8  3  BD 93 3F     	lda objdta,x		; fetch spriteleft byte
0033DB  3  85 61        	sta z80_a		; save spriteright byte
0033DD  3  A5 61        	lda z80_a
0033DF  3  25 62        	and z80_c		; mask left
0033E1  3  51 rr        	eor (scraddr),y		; merge with screenleft
0033E3  3  09 20        	ora #$20		; Set bit 5
0033E5  3  91 rr        	sta (scraddr),y		; write screenleft
0033E7  3  E8           	inx			; next spritebyte
0033E8  3  C8           	iny			; point to screenmiddle
0033E9  3               dline2a:
0033E9  3  BD 93 3F     	lda objdta,x		; fetch spritemiddle byte
0033EC  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0033EE  3  09 20        	ora #$20		; Set bit 5
0033F0  3  91 rr        	sta (scraddr),y		; write screenmiddle
0033F2  3  E8           	inx			; next spritebyte
0033F3  3  C8           	iny			; point to screenmiddle
0033F4  3               dline2b:
0033F4  3  BD 93 3F     	lda objdta,x		; fetch spritemiddle byte
0033F7  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0033F9  3  09 20        	ora #$20		; Set bit 5
0033FB  3  91 rr        	sta (scraddr),y		; write screenmiddle
0033FD  3  E8           	inx			; next spritebyte
0033FE  3  C8           	iny			; point to screenmiddle
0033FF  3               dline2c:
0033FF  3  BD 93 3F     	lda objdta,x		; fetch spritemiddle byte
003402  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
003404  3  09 20        	ora #$20		; Set bit 5
003406  3  91 rr        	sta (scraddr),y		; write screenmiddle
003408  3  E8           	inx			; next spritebyte
003409  3  C8           	iny			; point to screenmiddle
00340A  3               
00340A  3  A5 61        	lda z80_a		; fetch spriteright byte
00340C  3  25 63        	and z80_b		; mask right
00340E  3  51 rr        	eor (scraddr),y		; merge with screenright
003410  3  09 20        	ora #$20		; Set bit 5
003412  3  91 rr        	sta (scraddr),y		; write screenright
003414  3               
003414  3  60           	rts
003415  3               
003415  3               ;-----------------------------------------------------------------
003415  3               
003415  3               ddline:
003415  3  BC 55 34     	ldy sprline,x		; point to screenleft
003418  3               ddline1:
003418  3  BD 93 3F     	lda objdta,x		; fetch spriteleft byte
00341B  3  85 61        	sta z80_a		; save spriteright byte
00341D  3               
00341D  3  A5 61        	lda z80_a
00341F  3  25 6E        	and z80_cp		; mask left
003421  3  51 72        	eor (z80_hlp),y		; merge with screenleft
003423  3  09 20        	ora #$20		; Set bit 5
003425  3  91 72        	sta (z80_hlp),y		; write spritedata0
003427  3  E8           	inx			; next spritebyte
003428  3  C8           	iny			; point to screenmiddle
003429  3               ddline2a:
003429  3  BD 93 3F     	lda objdta,x		; fetch spritemiddle byte
00342C  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
00342E  3  09 20        	ora #$20		; Set bit 5
003430  3  91 72        	sta (z80_hlp),y		; write spritedata1
003432  3  E8           	inx			; next spritebyte
003433  3  C8           	iny			; point to screenmiddle
003434  3               ddline2b:
003434  3  BD 93 3F     	lda objdta,x		; fetch spritemiddle byte
003437  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003439  3  09 20        	ora #$20		; Set bit 5
00343B  3  91 72        	sta (z80_hlp),y		; write spritedata2
00343D  3  E8           	inx			; next spritebyte
00343E  3  C8           	iny			; point to screenmiddle
00343F  3               ddline2c:
00343F  3  BD 93 3F     	lda objdta,x		; fetch spritemiddle byte
003442  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003444  3  09 20        	ora #$20		; Set bit 5
003446  3  91 72        	sta (z80_hlp),y		; write spritedata3
003448  3  E8           	inx			; next spritebyte
003449  3  C8           	iny			; point to screenright
00344A  3               
00344A  3  A5 61        	lda z80_a		; fetch spriteright byte
00344C  3  25 6F        	and z80_bp		; mask right
00344E  3  51 72        	eor (z80_hlp),y		; merge with screenright
003450  3  09 20        	ora #$20		; Set bit 5
003452  3  91 72        	sta (z80_hlp),y		; write spritedata5
003454  3               
003454  3  60           	rts
003455  3               
003455  3               sprline:
003455  3  00 01 02 03  	.byte $00,$01,$02,$03
003459  3  28 29 2A 2B  	.byte $28,$29,$2a,$2b
00345D  3  50 51 52 53  	.byte $50,$51,$52,$53
003461  3  78 79 7A 7B  	.byte $78,$79,$7a,$7b
003465  3               
003465  3               ;----------------------------------------------------------------------
003465  3               ; Line drawn, now work out next target address.
003465  3               ;----------------------------------------------------------------------
003465  3               
003465  3               nline:
003465  3  18           	clc
003466  3  A5 rr        	lda scraddr 		; get low byte of address.
003468  3  69 28        	adc #ScrWidth
00346A  3  85 rr        	sta scraddr 		; new low byte of address.
00346C  3  90 02        	bcc :+
00346E  3  E6 rr        	inc scraddr+1 		; new high byte of address.
003470  3               :
003470  3  60           	rts
003471  3               
003471  3               ;-----------------------------------------------------------
003471  3               ; Animates a sprite.
003471  3               ;
003471  3               ; Input:
003471  3               ;  IX = sprite address
003471  3               ;  HL = last sprite address
003471  3               ;-----------------------------------------------------------
003471  3               
003471  3               animsp:
003471  3  25 rr        	and frmno
003473  3  F0 01        	beq :+
003475  3  60           	rts
003476  3               :
003476  3  A0 06        	ldy #6
003478  3  B1 68        	lda (z80_ix),y		; sprite image
00347A  3  20 D5 36     	jsr gfrm		; get frame data.
00347D  3               
00347D  3  E6 66        	inc z80_l		; point to frames.
00347F  3  D0 02        	bne :+
003481  3  E6 67        	inc z80_h
003483  3               :
003483  3  A0 07        	ldy #7
003485  3  B1 68        	lda (z80_ix),y		; sprite frame.
003487  3  18           	clc
003488  3  69 01        	adc #1			; next one along.
00348A  3  A0 00        	ldy #0
00348C  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
00348E  3  90 02        	bcc anims0		; no, not yet.
003490  3  A9 00        	lda #0			; start at first frame.
003492  3               anims0:
003492  3  A0 07        	ldy #7
003494  3  91 68        	sta (z80_ix),y		; new frame.
003496  3  60           	rts
003497  3               
003497  3               ;--------------------------------------------------------------
003497  3               ; Animate back
003497  3               ;
003497  3               ; Input:
003497  3               ;  IX = sprite address
003497  3               ;  HL = last sprite address
003497  3               ;--------------------------------------------------------------
003497  3               
003497  3               animbk:
003497  3  25 rr        	and frmno
003499  3  F0 01        	beq :+
00349B  3  60           	rts
00349C  3               :
00349C  3  A0 06        	ldy #6
00349E  3  B1 68        	lda (z80_ix),y		; sprite image.
0034A0  3  20 D5 36     	jsr gfrm		; get frame data.
0034A3  3               
0034A3  3  E6 66        	inc z80_l 		; point to frames.
0034A5  3  D0 02        	bne :+
0034A7  3  E6 67        	inc z80_h
0034A9  3               :
0034A9  3  A0 07        	ldy #7
0034AB  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0034AD  3  F0 03        	beq :+
0034AF  3  4C B6 34     	jmp rtanb0 		; yes, start at end.
0034B2  3               :
0034B2  3  A0 00        	ldy #0
0034B4  3  B1 66        	lda (z80_hl),y 		; last sprite.
0034B6  3               rtanb0:
0034B6  3  38           	sec
0034B7  3  E9 01        	sbc #1			; next one along.
0034B9  3  4C 92 34     	jmp anims0		; set new frame.
0034BC  3               
0034BC  3               ;--------------------------------------------------------------
0034BC  3               ; Check for collision with other sprite, strict enforcement.
0034BC  3               ;
0034BC  3               ; Input:
0034BC  3               ;  b		= sprite to test for
0034BC  3               ;  ix		= current sprite pointer
0034BC  3               ;
0034BC  3               ; global:	b
0034BC  3               ; local:	x,y,hl,de,skptr
0034BC  3               ; calls:	-
0034BC  3               ;--------------------------------------------------------------
0034BC  3               
0034BC  3               sktyp:
0034BC  3  A9 B3        	lda #<sprtab				; sprite table.
0034BE  3  85 66        	sta z80_l
0034C0  3  A9 38        	lda #>sprtab
0034C2  3  85 67        	sta z80_h
0034C4  3               numsp2:
0034C4  3  A9 0C        	lda #NUMSPR				; number of sprites.
0034C6  3  85 rr        	sta sktptr
0034C8  3               sktyp0:
0034C8  3  A5 66        	lda z80_l 				; store pointer to sprite.
0034CA  3  85 rr        	sta skptr
0034CC  3  A5 67        	lda z80_h
0034CE  3  85 rr        	sta skptr+1
0034D0  3               
0034D0  3  A0 00        	ldy #0
0034D2  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0034D4  3  C5 63        	cmp z80_b				; is it the type we seek?
0034D6  3  F0 1D        	beq coltyp				; yes, we can use this one.
0034D8  3               sktyp1:
0034D8  3  18           	clc
0034D9  3  A5 rr        	lda skptr				; retrieve sprite pointer.
0034DB  3  69 11        	adc #TABSIZ				; size of each entry.
0034DD  3  85 66        	sta z80_l
0034DF  3  A5 rr        	lda skptr+1
0034E1  3  69 00        	adc #0
0034E3  3  85 67        	sta z80_h
0034E5  3  C6 rr        	dec sktptr					; one less iteration.
0034E7  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0034E9  3  A9 00        	lda #0					; default to ROM address - no sprite.
0034EB  3  85 66        	sta z80_l
0034ED  3  85 67        	sta z80_h
0034EF  3  85 rr        	sta skptr				; store pointer to sprite.
0034F1  3  85 rr        	sta skptr+1
0034F3  3               
0034F3  3  18           	clc					; don't return with zero flag set.
0034F4  3  60           	rts 					; didn't find one.
0034F5  3               
0034F5  3               ;skptr:	.word 0					; search pointer.
0034F5  3               ;sktptr:	.byte 0
0034F5  3               
0034F5  3               coltyp:
0034F5  3  A0 00        	ldy #0
0034F7  3  B1 68        	lda (z80_ix),y				; current sprite type.
0034F9  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0034FB  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0034FD  3               colty0:
0034FD  3  A0 09        	ldy #9					; distance to x position in table.
0034FF  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
003501  3  85 64        	sta z80_e
003503  3  88           	dey
003504  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
003506  3  85 65        	sta z80_d
003508  3               
003508  3               ; Drop into collision detection.
003508  3               
003508  3               colc16:
003508  3  A0 09        	ldy #9
00350A  3  B1 68        	lda (z80_ix),y			 	; x coord.
00350C  3  38           	sec					; subtract x.
00350D  3  E5 64        	sbc z80_e
00350F  3  B0 05        	bcs  colc1a 				; result is positive.
003511  3  49 FF        	eor #$ff				; make negative positive.
003513  3  18           	clc
003514  3  69 01        	adc #1
003516  3               colc1a:
003516  3  C9 08        	cmp #SPR_WID				; within x range?
003518  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
00351A  3  85 62        	sta z80_c				; store difference.
00351C  3               
00351C  3  A0 08        	ldy #8
00351E  3  B1 68        	lda (z80_ix),y				; y coord.
003520  3  38           	sec
003521  3  E5 65        	sbc z80_d				; subtract y.
003523  3  B0 05        	bcs colc1b				; result is positive.
003525  3  49 FF        	eor #$ff				; make negative positive.
003527  3  18           	clc
003528  3  69 01        	adc #1
00352A  3               colc1b:
00352A  3  C9 09        	cmp #SPR_HGT					; within y range?
00352C  3  B0 AA        	bcs sktyp1 				; no - they've missed.
00352E  3  18           	clc					; add x difference.
00352F  3  65 62        	adc z80_c
003531  3  C9 0C        	cmp #12					; only 5 corner pixels touching?
003533  3  B0 02        	bcs :+
003535  3  38           	sec
003536  3  60           	rts 					; carry set if there's a collision.
003537  3               :
003537  3  4C D8 34     	jmp sktyp1				; try next sprite in table.
00353A  3               colty1:
00353A  3  A5 68        	lda z80_x  				; compare the two.
00353C  3  C5 66        	cmp z80_l
00353E  3  D0 09        	bne end_col
003540  3  A5 69        	lda z80_i
003542  3  C5 67        	cmp z80_h
003544  3  D0 03        	bne end_col
003546  3  4C D8 34     	jmp sktyp1 				; addresses are identical.
003549  3               end_col:
003549  3  4C FD 34     	jmp colty0
00354C  3               
00354C  3               ;-----------------------------------------------------------
00354C  3               ; Display number, left aligned
00354C  3               ;
00354C  3               ; Input:
00354C  3               ;  a		= number
00354C  3               ;
00354C  3               ; global:	-
00354C  3               ; local:	a,y,bc,hl,displ0
00354C  3               ; calls:	num2ch,dmsg3
00354C  3               ;-----------------------------------------------------------
00354C  3               
00354C  3               disply:
00354C  3  85 61        	sta z80_a
00354E  3  A9 74        	lda #<displ0				; display workspace.
003550  3  85 62        	sta z80_c
003552  3  A9 35        	lda #>displ0
003554  3  85 63        	sta z80_b
003556  3  A5 61        	lda z80_a
003558  3  20 ED 29     	jsr num2ch				; convert accumulator to string.
00355B  3               displ1:
00355B  3  C6 62        	dec z80_c				; back one character.
00355D  3  D0 02        	bne :+
00355F  3  C6 63        	dec z80_b
003561  3               :
003561  3  A0 00        	ldy #0
003563  3  B1 62        	lda (z80_bc),y				; fetch digit.
003565  3  09 80        	ora #128				; insert end marker.
003567  3  91 62        	sta (z80_bc),y				; new value.
003569  3               
003569  3  A9 74        	lda #<displ0				; display space.
00356B  3  85 66        	sta z80_l
00356D  3  A9 35        	lda #>displ0
00356F  3  85 67        	sta z80_h
003571  3               
003571  3  4C FC 2F     	jmp dmsg3				; display the string.
003574  3               
003574  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003578  3               
003578  3               ;----------------------------------------------------------------
003578  3               ; Initialise screen.
003578  3               ;
003578  3               ; global:	roomtb,scno
003578  3               ; local:	-
003578  3               ; calls:	tstcs
003578  3               ;----------------------------------------------------------------
003578  3               
003578  3               initsc:
003578  3  AD 90 39     	lda roomtb 			; whereabouts in the map are we?
00357B  3  20 85 35     	jsr tstsc 			; find displacement.
00357E  3  C9 FF        	cmp #255 			; is it valid?
003580  3  F0 02        	beq init_end 			; no, it's rubbish.
003582  3  85 rr        	sta scno			; store new room number.
003584  3               init_end:
003584  3  60           	rts
003585  3               
003585  3               ;----------------------------------------------------------------
003585  3               ; Test screen.
003585  3               ;
003585  3               ; global:	-
003585  3               ; local:	x
003585  3               ; calls:	-
003585  3               ;----------------------------------------------------------------
003585  3               
003585  3               tstsc:
003585  3  85 rr        	sta tmproom
003587  3  18           	clc
003588  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
00358A  3  AA           	tax 				; add displacement to map data.
00358B  3  BD A4 39     	lda mapdat-MAPWID,x 		; find room number there.
00358E  3  60           	rts
00358F  3               
00358F  3               ;tmproom:	.byte 0
00358F  3               
00358F  3               ;--------------------------
00358F  3               ; Screen left.
00358F  3               ;--------------------------
00358F  3               
00358F  3               scrl:
00358F  3  AD 90 39     	lda roomtb 			; present room table pointer.
003592  3  38           	sec
003593  3  E9 01        	sbc #1				; room left.
003595  3               scrl0:
003595  3  20 85 35     	jsr tstsc			; test screen.
003598  3  C9 FF        	cmp #255			; is there a screen this way?
00359A  3  D0 01        	bne :+
00359C  3  60           	rts				; no, return to loop.
00359D  3               :
00359D  3  A5 rr        	lda tmproom			; restore room displacement.
00359F  3  8D 90 39     	sta roomtb			; new room table position.
0035A2  3               scrl1:
0035A2  3  20 78 35     	jsr initsc 			; set new screen.
0035A5  3  A9 02        	lda #2
0035A7  3  85 rr        	sta restfl 			; set it.
0035A9  3  60           	rts
0035AA  3               scrr:
0035AA  3  AD 90 39     	lda roomtb 			; room table pointer.
0035AD  3  18           	clc
0035AE  3  69 01        	adc #1				; room right.
0035B0  3  4C 95 35     	jmp scrl0
0035B3  3               scru:
0035B3  3  AD 90 39     	lda roomtb 			; room table pointer.
0035B6  3  38           	sec
0035B7  3  E9 03        	sbc #MAPWID 			; room up.
0035B9  3  4C 95 35     	jmp scrl0
0035BC  3               scrd:
0035BC  3  AD 90 39     	lda roomtb 			; room table pointer.
0035BF  3  18           	clc
0035C0  3  69 03        	adc #MAPWID 			; room down.
0035C2  3  4C 95 35     	jmp scrl0
0035C5  3               
0035C5  3               ;-----------------------------------------
0035C5  3               ; Jump to new screen.
0035C5  3               ;-----------------------------------------
0035C5  3               
0035C5  3               nwscr:
0035C5  3  A2 00        	ldx #0				; start of map data.
0035C7  3               nwscr0:
0035C7  3  DD A7 39     	cmp mapdat,x
0035CA  3  F0 06        	beq nwscr1			; have we found a match for screen?
0035CC  3  E8           	inx 				; next room.
0035CD  3  E0 50        	cpx #80				; zero room count, 80 to search.
0035CF  3  D0 F6        	bne nwscr0			; keep looking.
0035D1  3  60           	rts
0035D2  3               nwscr1:
0035D2  3  8E 90 39     	stx roomtb			; set the map position.
0035D5  3  4C A2 35     	jmp scrl1			; draw new room.
0035D8  3               
0035D8  3               
0035D8  3               ;----------------------------------------------------------
0035D8  3               ; Gravity processing.
0035D8  3               ;----------------------------------------------------------
0035D8  3               
0035D8  3               grav:
0035D8  3  A0 0D        	ldy #13
0035DA  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0035DC  3  85 66        	sta z80_l
0035DE  3  A0 0E        	ldy #14
0035E0  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0035E2  3  85 67        	sta z80_h
0035E4  3  05 66        	ora z80_l			; merge in low byte.
0035E6  3  D0 01        	bne :+
0035E8  3  60           	rts				; if neither is set, we're not in the air.
0035E9  3               :
0035E9  3  A0 00        	ldy #0
0035EB  3  B1 66        	lda (z80_hl),y			; pixels to move.
0035ED  3  85 61        	sta z80_a
0035EF  3  C9 63        	cmp #99				; reached the end?
0035F1  3  D0 0C        	bne grav0			; no, continue.
0035F3  3               grav2:
0035F3  3  C6 66        	dec z80_l			; go back to previous value.
0035F5  3  C9 FF        	cmp #$ff
0035F7  3  D0 02        	bne :+
0035F9  3  C6 67        	dec z80_h
0035FB  3               :
0035FB  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0035FD  3  85 61        	sta z80_a
0035FF  3               grav0:
0035FF  3  E6 66        	inc z80_l			; point to next table entry.
003601  3  D0 02        	bne :+
003603  3  E6 67        	inc z80_h
003605  3               :
003605  3  A5 66        	lda z80_l
003607  3  A0 0D        	ldy #13
003609  3  91 68        	sta (z80_ix),y			; store new pointer low.
00360B  3  A5 67        	lda z80_h
00360D  3  A0 0E        	ldy #14
00360F  3  91 68        	sta (z80_ix),y			; store new pointer high.
003611  3               grav1:
003611  3  A5 61        	lda z80_a
003613  3  D0 01        	bne :+				; any movement required?
003615  3  60           	rts				; no, not this time.
003616  3               :
003616  3  A5 61        	lda z80_a
003618  3  C9 80        	cmp #128			; is it up or down?
00361A  3  B0 15        	bcs gravu			; it's up.
00361C  3               gravd:
00361C  3  85 63        	sta z80_b			; set pixels to move.
00361E  3               gravd0:
00361E  3  20 F1 2D     	jsr cangd			; can we go down?
003621  3  D0 28        	bne gravst			; can't move down, so stop.
003623  3  A0 08        	ldy #8
003625  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003627  3  18           	clc
003628  3  69 01        	adc #1
00362A  3  91 68        	sta (z80_ix),y
00362C  3  C6 63        	dec z80_b
00362E  3  D0 EE        	bne gravd0
003630  3  60           	rts
003631  3               gravu:
003631  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003633  3  18           	clc
003634  3  69 01        	adc #1
003636  3  85 63        	sta z80_b			; set pixels to move.
003638  3               gravu0:
003638  3  20 A4 2D     	jsr cangu			; can we go up?
00363B  3  D0 6E        	bne ifalls			; can't move up, go down next.
00363D  3  A0 08        	ldy #8
00363F  3  B1 68        	lda (z80_ix),y
003641  3  38           	sec
003642  3  E9 01        	sbc #1
003644  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003646  3  C6 63        	dec z80_b
003648  3  D0 EE        	bne gravu0
00364A  3  60           	rts
00364B  3               gravst:
00364B  3  A0 0D        	ldy #13
00364D  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00364F  3  85 66        	sta z80_l
003651  3  A0 0E        	ldy #14
003653  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003655  3  85 67        	sta z80_h
003657  3               
003657  3  A9 00        	lda #0				; null value in pointer.
003659  3  A0 0D        	ldy #13
00365B  3  91 68        	sta (z80_ix),y			; store new pointer low.
00365D  3  C8           	iny
00365E  3  91 68        	sta (z80_ix),y			; store new pointer high.
003660  3               
003660  3  A0 00        	ldy #0
003662  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
003664  3  C9 63        	cmp #99				; is it the end marker?
003666  3               evftf:
003666  3  F0 01        	beq :+				; yes, fallen too far.
003668  3  60           	rts
003669  3               :
003669  3  4C 1C 3C     	jmp evnt15			; EVENT FELLTOOFAR
00366C  3               
00366C  3               ;------------------------------------------------
00366C  3               ; Initiate fall check.
00366C  3               ;------------------------------------------------
00366C  3               
00366C  3               ifall:
00366C  3  A0 0D        	ldy #13
00366E  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
003670  3  85 66        	sta z80_l
003672  3  A0 0E        	ldy #14
003674  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
003676  3  85 67        	sta z80_h			; high byte in accumulator.
003678  3  05 66        	ora z80_l			; merge in low byte.
00367A  3  F0 01        	beq :+
00367C  3  60           	rts				; if either is set, we're already in the air.
00367D  3               :
00367D  3  A0 09        	ldy #9
00367F  3  B1 68        	lda (z80_ix),y			; y coordinate.
003681  3  85 rr        	sta dispx
003683  3  A0 08        	ldy #8
003685  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003687  3  18           	clc
003688  3               numsp7:
003688  3  69 09        	adc #SPR_HGT			; add 16 pixels.
00368A  3  85 rr        	sta dispy			; set up test coordinates.
00368C  3  20 6E 2F     	jsr tstbl			; get map address.
00368F  3  20 9B 2E     	jsr plchk			; block, platform check.
003692  3  F0 01        	beq :+
003694  3  60           	rts				; it's solid, don't fall.
003695  3               :
003695  3  E6 rr        	inc bufaddr			; look right one cell.
003697  3  20 9B 2E     	jsr plchk			; block, platform check.
00369A  3  F0 01        	beq :+
00369C  3  60           	rts				; it's solid, don't fall.
00369D  3               :
00369D  3  A5 rr        	lda dispx			; y coordinate.
00369F  3  29 07        	and #7				; position straddling block cells.
0036A1  3  F0 08        	beq ifalls			; no more checks needed.
0036A3  3  E6 rr        	inc bufaddr			; look to third cell.
0036A5  3  20 9B 2E     	jsr plchk			; block, platform check.
0036A8  3  F0 01        	beq :+
0036AA  3  60           	rts				; it's solid, don't fall.
0036AB  3               :
0036AB  3               ifalls:
0036AB  3  A9 B9        	lda #<jtab			; jump table start.
0036AD  3  85 66        	sta z80_l
0036AF  3  A9 42        	lda #>jtab
0036B1  3  85 67        	sta z80_h
0036B3  3               ifal0:
0036B3  3  E6 66        	inc z80_l			; point to next value.
0036B5  3  D0 02        	bne :+
0036B7  3  E6 67        	inc z80_h
0036B9  3               :
0036B9  3  A0 00        	ldy #0
0036BB  3  B1 66        	lda (z80_hl),y			; fetch value.
0036BD  3  F0 F4        	beq ifal0			; no, get next value.
0036BF  3  C9 63        	cmp #99				; reached end of table?
0036C1  3  D0 01        	bne :+
0036C3  3  60           	rts				; yes, don't fall.
0036C4  3               :
0036C4  3  C9 80        	cmp #128			; is it going up?
0036C6  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0036C8  3               
0036C8  3  A0 0D        	ldy #13
0036CA  3  A5 66        	lda z80_l
0036CC  3  91 68        	sta (z80_ix),y 			; set jump low.
0036CE  3  A0 0E        	ldy #14
0036D0  3  A5 67        	lda z80_h
0036D2  3  91 68        	sta (z80_ix),y 			; set jump high.
0036D4  3  60           	rts
0036D5  3               
0036D5  3               
0036D5  3               ;----------------------------------------------------
0036D5  3               ; Get frame data for a particular sprite.
0036D5  3               ; Input:
0036D5  3               ;  a		= framenumer
0036D5  3               ; Output:
0036D5  3               ;  hl		= frame address
0036D5  3               ;
0036D5  3               ; global:	hl,frmptr
0036D5  3               ; local:	-
0036D5  3               ; calls:	-
0036D5  3               ;----------------------------------------------------
0036D5  3               
0036D5  3               gfrm:
0036D5  3  0A           	asl a	 		 	; multiple of 2.
0036D6  3  18           	clc
0036D7  3  6D 17 28     	adc frmptr 			; frames used by game.
0036DA  3  85 66        	sta z80_l
0036DC  3  AD 18 28     	lda frmptr+1
0036DF  3  69 00        	adc #0
0036E1  3  85 67        	sta z80_h 			; point to frame start.
0036E3  3  60           	rts
0036E4  3               
0036E4  3               ;----------------------------------------------------
0036E4  3               ; Find sprite list for current room.
0036E4  3               ;
0036E4  3               ; global:	hl
0036E4  3               ; local:	x,y
0036E4  3               ; calls:	-
0036E4  3               ;----------------------------------------------------
0036E4  3               
0036E4  3               sprlst:
0036E4  3  A9 8A        	lda #<nmedat 			; list of enemy sprites.
0036E6  3  85 66        	sta z80_l
0036E8  3  A9 3F        	lda #>nmedat
0036EA  3  85 67        	sta z80_h
0036EC  3  A6 rr        	ldx scno 			; screen number.
0036EE  3  D0 01        	bne sprls2 			; is it the first screen?
0036F0  3  60           	rts 				; yes, don't need to search data.
0036F1  3               sprls2:
0036F1  3  A0 00        	ldy #0
0036F3  3               sprls1:
0036F3  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0036F5  3  C9 FF        	cmp #255			; is it an end marker?
0036F7  3  F0 0E        	beq sprls0 			; yes, end of this room.
0036F9  3               
0036F9  3  18           	clc 				; point to next sprite in list.
0036FA  3  A5 66        	lda z80_l
0036FC  3  69 04        	adc #NMESIZ
0036FE  3  85 66        	sta z80_l
003700  3  90 02        	bcc :+
003702  3  E6 67        	inc z80_h
003704  3               :
003704  3  4C F3 36     	jmp sprls1 			; continue until end of room.
003707  3               sprls0:
003707  3  E6 66        	inc z80_l 			; point to start of next screen.s
003709  3  D0 02        	bne :+
00370B  3  E6 67        	inc z80_h
00370D  3               :
00370D  3  CA           	dex
00370E  3  D0 E3        	bne sprls1 			; continue until room found.
003710  3  60           	rts
003711  3               
003711  3               
003711  3               ;----------------------------------------------------
003711  3               ; Clear all but a single player sprite.
003711  3               ;
003711  3               ; global:	-
003711  3               ; local:	x,y,ix
003711  3               ; calls:	-
003711  3               ;----------------------------------------------------
003711  3               
003711  3               nspr:
003711  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003713  3  85 rr        	sta sprcnt
003715  3  A9 B3        	lda #<sprtab 			; sprite table.
003717  3  85 68        	sta z80_x
003719  3  A9 38        	lda #>sprtab
00371B  3  85 69        	sta z80_i
00371D  3               nspr0:
00371D  3  A0 00        	ldy #0 				; fetch sprite type.
00371F  3  B1 68        	lda (z80_ix),y 			; is it a player?
003721  3  F0 1A        	beq nspr1 			; yes, keep this one.
003723  3               
003723  3  A9 FF        	lda #255
003725  3  A0 00        	ldy #0 				; fetch sprite type.
003727  3  91 68        	sta (z80_ix),y 			; delete sprite.
003729  3  A0 05        	ldy #5
00372B  3  91 68        	sta (z80_ix),y 			; remove next type.
00372D  3               
00372D  3  18           	clc	 			; next sprite.
00372E  3  A5 68        	lda z80_x
003730  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003732  3  85 68        	sta z80_x
003734  3  90 02        	bcc :+
003736  3  E6 69        	inc z80_i
003738  3               :
003738  3  C6 rr        	dec sprcnt	 			; one less space in the table.
00373A  3  D0 E1        	bne nspr0
00373C  3  60           	rts
00373D  3               nspr1:
00373D  3  A9 FF        	lda #255
00373F  3  A0 00        	ldy #0
003741  3  91 68        	sta (z80_ix),y 			; delete sprite.
003743  3               
003743  3  18           	clc	 			; point to next sprite.
003744  3  A5 68        	lda z80_x
003746  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003748  3  85 68        	sta z80_x
00374A  3  90 02        	bcc :+
00374C  3  E6 69        	inc z80_i
00374E  3               :
00374E  3  C6 rr        	dec sprcnt	 			; one less to do.
003750  3  D0 01        	bne nspr2
003752  3  60           	rts
003753  3               nspr2:
003753  3  A9 FF        	lda #255
003755  3  A0 00        	ldy #0
003757  3  91 68        	sta (z80_ix),y 			; delete sprite.
003759  3  A0 05        	ldy #5
00375B  3  91 68        	sta (z80_ix),y 			; remove next type.
00375D  3               
00375D  3  18           	clc	 			; next sprite.
00375E  3  A5 68        	lda z80_x
003760  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003762  3  85 68        	sta z80_x
003764  3  90 02        	bcc :+
003766  3  E6 69        	inc z80_i
003768  3               :
003768  3  C6 rr        	dec sprcnt	 			; one less space in table.
00376A  3  D0 E7        	bne nspr2
00376C  3  60           	rts
00376D  3               
00376D  3               ;----------------------------------------------------------
00376D  3               ; Two initialisation routines.
00376D  3               ; Initialise sprites - copy everything from list to table.
00376D  3               ;
00376D  3               ; global:	-
00376D  3               ; local:	x,y,ix
00376D  3               ; calls:	cpsp
00376D  3               ;----------------------------------------------------------
00376D  3               
00376D  3               ispr:
00376D  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00376F  3  85 rr        	sta sprcnt
003771  3  A9 B3        	lda #<sprtab			; sprite table.
003773  3  85 68        	sta z80_x
003775  3  A9 38        	lda #>sprtab
003777  3  85 69        	sta z80_i
003779  3               ispr2:
003779  3  A0 00        	ldy #0
00377B  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00377D  3  C9 FF        	cmp #255 			; is it an end marker?
00377F  3  D0 01        	bne :+
003781  3  60           	rts 				; yes, no more to do.
003782  3               :
003782  3               ispr1:
003782  3  A0 00        	ldy #0
003784  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003786  3  C9 FF        	cmp #255 			; is it enabled yet?
003788  3  D0 08        	bne ispr4			; yes, try another slot.
00378A  3               
00378A  3  A0 05        	ldy #5
00378C  3  B1 68        	lda (z80_ix),y		 	; next type.
00378E  3  C9 FF        	cmp #255 			; is it enabled yet?
003790  3  F0 10        	beq ispr3 			; no, process this one.
003792  3               ispr4:
003792  3  18           	clc 				; next sprite.
003793  3  A5 68        	lda z80_x
003795  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003797  3  85 68        	sta z80_x
003799  3  90 02        	bcc :+
00379B  3  E6 69        	inc z80_i
00379D  3               :
00379D  3  C6 rr        	dec sprcnt
00379F  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0037A1  3  60           	rts  				; no more room in table.
0037A2  3               ispr3:
0037A2  3  20 F5 37     	jsr cpsp			; initialise a sprite.
0037A5  3  C6 rr        	dec sprcnt			; one less space in the table.
0037A7  3  D0 D0        	bne ispr2
0037A9  3  60           	rts
0037AA  3               
0037AA  3               
0037AA  3               ;-----------------------------------------------------------------------
0037AA  3               ; Initialise sprites - but not player, we're keeping the old one.
0037AA  3               ;
0037AA  3               ; global:	-
0037AA  3               ; local:	x,y,ix
0037AA  3               ; calls:	cpsp
0037AA  3               ;-----------------------------------------------------------------------
0037AA  3               
0037AA  3               kspr:
0037AA  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0037AC  3  A9 B3        	lda #<sprtab 			; sprite table.
0037AE  3  85 68        	sta z80_x
0037B0  3  A9 38        	lda #>sprtab
0037B2  3  85 69        	sta z80_i
0037B4  3               kspr2:
0037B4  3  A0 00        	ldy #0
0037B6  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0037B8  3  C9 FF        	cmp #255 			; is it an end marker?
0037BA  3  D0 01        	bne :+
0037BC  3  60           	rts 				; yes, no more to do.
0037BD  3               :
0037BD  3  C9 00        	cmp #0
0037BF  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0037C1  3               
0037C1  3  18           	clc 				; next sprite.
0037C2  3  A5 66        	lda z80_l
0037C4  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0037C6  3  85 66        	sta z80_l
0037C8  3  90 02        	bcc :+
0037CA  3  E6 67        	inc z80_h
0037CC  3               :
0037CC  3  4C B4 37     	jmp kspr2
0037CF  3               kspr1:
0037CF  3  A0 00        	ldy #0 				; fetch sprite type.
0037D1  3  B1 68        	lda (z80_ix),y
0037D3  3  C9 FF        	cmp #255 			; is it enabled yet?
0037D5  3  D0 08        	bne kspr4 			; yes, try another slot.
0037D7  3               
0037D7  3  A0 05        	ldy #5 				; next type.
0037D9  3  B1 68        	lda (z80_ix),y
0037DB  3  C9 FF        	cmp #255 			; is it enabled yet?
0037DD  3  F0 0F        	beq kspr3 			; no, process this one.
0037DF  3               kspr4:
0037DF  3  18           	clc 				; next sprite.
0037E0  3  A5 68        	lda z80_x
0037E2  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0037E4  3  85 68        	sta z80_x
0037E6  3  90 02        	bcc :+
0037E8  3  E6 69        	inc z80_i
0037EA  3               :
0037EA  3  CA           	dex	 			; repeat for remaining sprites.
0037EB  3  D0 E2        	bne kspr1
0037ED  3  60           	rts  				; no more room in table.
0037EE  3               kspr3:
0037EE  3  20 F5 37     	jsr cpsp 			; copy sprite to table.
0037F1  3  CA           	dex	 			; one less space in the table.
0037F2  3  D0 C0        	bne kspr2
0037F4  3  60           	rts
0037F5  3               
0037F5  3               ;----------------------------------------------
0037F5  3               ; Copy sprite from list to table.
0037F5  3               ;
0037F5  3               ; global:	hl,ix
0037F5  3               ; local:	y
0037F5  3               ; calls:	evnt09
0037F5  3               ;----------------------------------------------
0037F5  3               
0037F5  3               cpsp:
0037F5  3  A0 00        	ldy #0				; fetch byte from table.
0037F7  3  B1 66        	lda (z80_hl),y
0037F9  3  91 68        	sta (z80_ix),y			; set up type.
0037FB  3  A0 05        	ldy #PAM1ST
0037FD  3  91 68        	sta (z80_ix),y 			; set up type.
0037FF  3               
0037FF  3  E6 66        	inc z80_l 			; move to next byte.
003801  3  D0 02        	bne :+
003803  3  E6 67        	inc z80_h
003805  3               :
003805  3  A0 00        	ldy #0 				; fetch byte from table.
003807  3  B1 66        	lda (z80_hl),y
003809  3  A0 06        	ldy #6
00380B  3  91 68        	sta (z80_ix),y			; set up image.
00380D  3               
00380D  3  E6 66        	inc z80_l 			; move to next byte.
00380F  3  D0 02        	bne :+
003811  3  E6 67        	inc z80_h
003813  3               :
003813  3  A0 00        	ldy #0
003815  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003817  3  A0 08        	ldy #8
003819  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00381B  3               
00381B  3  A9 C8        	lda #200 			; set initial coordinate off screen.
00381D  3  A0 03        	ldy #3
00381F  3  91 68        	sta (z80_ix),y
003821  3               
003821  3  E6 66        	inc z80_l 			; move to next byte.
003823  3  D0 02        	bne :+
003825  3  E6 67        	inc z80_h
003827  3               :
003827  3  A0 00        	ldy #0 				; fetch byte from table.
003829  3  B1 66        	lda (z80_hl),y
00382B  3  A0 09        	ldy #9
00382D  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00382F  3               
00382F  3  E6 66        	inc z80_l 			; move to next byte.
003831  3  D0 02        	bne :+
003833  3  E6 67        	inc z80_h
003835  3               :
003835  3  A9 00        	lda #0				; zeroes in accumulator.
003837  3  A0 07        	ldy #7 				; reset frame number.
003839  3  91 68        	sta (z80_ix),y
00383B  3  A0 0A        	ldy #10 			; reset direction.
00383D  3  91 68        	sta (z80_ix),y
00383F  3  A0 0D        	ldy #13				; reset jump pointer low.
003841  3  91 68        	sta (z80_ix),y
003843  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003845  3  91 68        	sta (z80_ix),y
003847  3               
003847  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003849  3  A0 10        	ldy #16
00384B  3  91 68        	sta (z80_ix),y
00384D  3               evis0:
00384D  3  A5 69        	lda z80_i
00384F  3  48           	pha
003850  3  A5 68        	lda z80_x
003852  3  48           	pha
003853  3  A5 67        	lda z80_h
003855  3  48           	pha
003856  3  A5 66        	lda z80_l
003858  3  48           	pha
003859  3               
003859  3  20 E9 3B     	jsr evnt09 			; perform event.
00385C  3               
00385C  3  68           	pla
00385D  3  85 66        	sta z80_l
00385F  3  68           	pla
003860  3  85 67        	sta z80_h
003862  3  68           	pla
003863  3  85 68        	sta z80_x
003865  3  68           	pla
003866  3  85 69        	sta z80_i
003868  3               
003868  3  18           	clc
003869  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
00386B  3  69 11        	adc #TABSIZ		 	; next sprite.
00386D  3  85 68        	sta z80_x
00386F  3  90 02        	bcc :+
003871  3  E6 69        	inc z80_i
003873  3               :
003873  3  60           	rts
003874  3               
003874  3               
003874  3               ;-------------------------------------
003874  3               ; Clear the play area window.
003874  3               ;-------------------------------------
003874  3               
003874  3               clw:
003874  3  AD 23 28     	lda wintop			; get coordinates of window.
003877  3  85 rr        	sta dispy			; put into dispx for calculation.
003879  3  AD 24 28     	lda winlft
00387C  3  85 rr        	sta dispx
00387E  3               
00387E  3  AD 25 28     	lda winhgt			; height of window.
003881  3  85 rr        	sta rrow			; copy to b register.
003883  3               clw3:
003883  3  AD 26 28     	lda winwid 			; width of window.
003886  3  85 rr        	sta rcol
003888  3               clw2:
003888  3  20 8D 2C     	jsr gprad 			; get print address.
00388B  3  A9 00        	lda #0				; zero byte to write.
00388D  3  A2 07        	ldx #7				; pixel height of each cell.
00388F  3               clw1:
00388F  3  BC C7 2C     	ldy scrtab,x
003892  3  91 rr        	sta (scraddr),y 			; copy to screen.
003894  3  CA           	dex				; next screen row down.
003895  3  10 F8        	bpl clw1
003897  3               
003897  3  E6 rr        	inc dispx			; next column.
003899  3  C6 rr        	dec rcol			; one less to do.
00389B  3  D0 EB        	bne clw2			; repeat for remaining columns.
00389D  3               
00389D  3  AD 24 28     	lda winlft			; get left edge.
0038A0  3  85 rr        	sta dispx 			; reset x.
0038A2  3  E6 rr        	inc dispy 			; next line down.
0038A4  3               
0038A4  3  C6 rr        	dec rrow
0038A6  3  D0 DB        	bne clw3			; repeat down the screen.
0038A8  3               
0038A8  3  AD 23 28     	lda wintop			; get coordinates of window.
0038AB  3  85 rr        	sta chary			; put into display position.
0038AD  3  AD 24 28     	lda winlft
0038B0  3  85 rr        	sta charx
0038B2  3  60           	rts
0038B3  3               
0038B3  3               
0038B3  3               ;----------------------------------------------------------
0038B3  3               ; Effects code.
0038B3  3               ; Ticker routine is called 25 times per second.
0038B3  3               ;
0038B3  3               ; HL = txtscr = left text screen address
0038B3  3               ; DE = txtscr+txtwid-1 = right text screen address
0038B3  3               ; BC = txtpos = text scroller position
0038B3  3               ;
0038B3  3               ;----------------------------------------------------------
0038B3  3               
0038B3  3               .if sflag
0038B3  3               scrly:
0038B3  3               	rts
0038B3  3               	.word txtscr         	; get left screen address.
0038B3  3               	sta scr_l
0038B3  3               	lda txtscr+1
0038B3  3               	sta scr_l+1
0038B3  3               	sta scr_r+1
0038B3  3               
0038B3  3               	stx xtmp
0038B3  3               
0038B3  3               	clc         		; get right screen address.
0038B3  3               	lda scr_l
0038B3  3               	adc txtwid
0038B3  3               	sta scr_r
0038B3  3               	dec scr_r
0038B3  3               scrly1:
0038B3  3               	ldy txtwid		; set txtwide
0038B3  3               	dey
0038B3  3               	clc
0038B3  3               scrly0:
0038B3  3               	lda (scr_l),y		; scroll 1 line
0038B3  3               	rol a
0038B3  3               	sta (scr_l),y
0038B3  3               	dey
0038B3  3               	bpl scrly0
0038B3  3               
0038B3  3               	clc			; point to next line
0038B3  3               	lda scr_l
0038B3  3               	adc #32
0038B3  3               	sta scr_l
0038B3  3               	bcc scrly1		; repeat 8 times
0038B3  3               
0038B3  3               	lda txtpos 		; get text pointer.
0038B3  3               	sta scr_txt
0038B3  3               	lda txtpos+1
0038B3  3               	sta scr_txt+1
0038B3  3               
0038B3  3               	ldy #0
0038B3  3               	lda (scr_txt),y 		; find character we're displaying.
0038B3  3               	and #127 		; remove end marker bit if applicable.
0038B3  3               	cmp #13			; is it newline?
0038B3  3               	bne scrly5 		; no, it's okay.
0038B3  3               	lda #32			; convert to a space instead.
0038B3  3               scrly5:
0038B3  3               	sta fntaddr		; calculate char address
0038B3  3               	lda #0
0038B3  3               	sta fntaddr+1
0038B3  3               	asl fntaddr  		; multiply char by 8.
0038B3  3               	rol fntaddr+1
0038B3  3               	asl fntaddr
0038B3  3               	rol fntaddr+1
0038B3  3               	asl fntaddr
0038B3  3               	rol fntaddr+1
0038B3  3               	lda fntaddr
0038B3  3               	clc
0038B3  3               	adc #<(FONT-256)
0038B3  3               	sta scrly3+1		; that's the low byte.
0038B3  3               	lda fntaddr+1
0038B3  3               	adc #>(FONT-256)
0038B3  3               	sta scrly3+2		; add displacement.
0038B3  3               
0038B3  3               	ldx #0
0038B3  3               scrly3:
0038B3  3               	lda $3333,x		; get image of char line.
0038B3  3               	and txtbit
0038B3  3               	beq scrly2		; don't plot pixel
0038B3  3               	ldy scrline,x
0038B3  3               	lda (scr_r),y
0038B3  3               	clc
0038B3  3               	ora #1
0038B3  3               	sta (scr_r),y		; plot pixel
0038B3  3               scrly2:
0038B3  3               	inx			; next line of char.
0038B3  3               	cpx #8
0038B3  3               	bne scrly3
0038B3  3               
0038B3  3               	lsr txtbit		; bit of text to display.
0038B3  3               	bcs :+
0038B3  3               	rts
0038B3  3               :
0038B3  3               	ldy #0
0038B3  3               	lda (scr_txt),y 	; what was the character?
0038B3  3               	asl a	  		; end of message?
0038B3  3               	bcs scrly4
0038B3  3               	inc txtpos
0038B3  3               	bne :+
0038B3  3               	inc txtpos+1
0038B3  3               :
0038B3  3               	jmp scrly6 		; not yet - continue.
0038B3  3               scrly4:
0038B3  3               	lda txtini 		; start of scrolling message.
0038B3  3               	sta txtpos
0038B3  3               	lda txtini+1
0038B3  3               	sta txtpos+1
0038B3  3               scrly6:
0038B3  3               	lda #128
0038B3  3               	sta txtbit
0038B3  3               	ldx xtmp
0038B3  3               	rts
0038B3  3               
0038B3  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0038B3  3               
0038B3  3               ;-------------------------------------------------------
0038B3  3               ; Entry TICKER command
0038B3  3               ;
0038B3  3               ; Entry:
0038B3  3               ;  z80_b = message nr
0038B3  3               ;  z80_c = width
0038B3  3               ;-------------------------------------------------------
0038B3  3               
0038B3  3               iscrly:
0038B3  3               	jsr prescr 		; set up display position.
0038B3  3               
0038B3  3               	lda #<msgdat 		; text messages.
0038B3  3               	sta z80_l
0038B3  3               	lda #>msgdat
0038B3  3               	sta z80_h
0038B3  3               
0038B3  3               	lda z80_c 		; width.
0038B3  3               	sec
0038B3  3               	sbc #1			; subtract one.
0038B3  3               	cmp #32 		; is it between 1 and 32?
0038B3  3               	bcc :+
0038B3  3               	lda #$60
0038B3  3               	jmp iscrl0		; no, disable messages.
0038B3  3               :
0038B3  3               	ldx z80_b		; message number.
0038B3  3               	jsr getwrd 		; find message start.
0038B3  3               
0038B3  3               	lda z80_l		; set initial text position.
0038B3  3               	sta txtini
0038B3  3               	lda z80_h
0038B3  3               	sta txtini+1
0038B3  3               
0038B3  3               	lda #$ad		; code for lda adrr
0038B3  3               iscrl0:
0038B3  3               	sta scrly		; enable/disable scrolling routine.
0038B3  3               
0038B3  3               	jsr prescr 		; set up display position.
0038B3  3               	jsr gprad 		; get print address.
0038B3  3               
0038B3  3               	lda scraddr 		; set text screen address.
0038B3  3               	sta txtscr
0038B3  3               	lda scraddr+1
0038B3  3               	sta txtscr+1
0038B3  3               
0038B3  3               	lda z80_c		; width.
0038B3  3               	sta txtwid		; set width in working storage.
0038B3  3               
0038B3  3               	lda #128 		; start with leftmost bit.
0038B3  3               	sta txtbit
0038B3  3               
0038B3  3               	jmp scrly4
0038B3  3               .endif
0038B3  3               
0038B3  3               ;------------------------------------------------------------------
0038B3  3               ; Dig routine, conditional assembly depending on dflag
0038B3  3               ;------------------------------------------------------------------
0038B3  3               .if dflag
0038B3  3               dig:
0038B3  3               	and #3
0038B3  3               	beq digr		; dig right
0038B3  3               	cmp #1
0038B3  3               	beq digl		; dig left
0038B3  3               	cmp #2
0038B3  3               	beq digd		; dig down
0038B3  3               
0038B3  3               ; Dig up.
0038B3  3               
0038B3  3               digu:				; dig up
0038B3  3               	ldy #8
0038B3  3               	lda (z80_ix),y
0038B3  3               	sec
0038B3  3               	sbc #2
0038B3  3               	sta dispy		; set y
0038B3  3               
0038B3  3               	iny
0038B3  3               	lda (z80_ix),y
0038B3  3               	sta dispx		; set x
0038B3  3               	jmp digv
0038B3  3               
0038B3  3               ; Dig down.
0038B3  3               
0038B3  3               digd:
0038B3  3               	ldy #9
0038B3  3               	lda (z80_ix),y
0038B3  3               	sta dispx		; set y
0038B3  3               
0038B3  3               	dey
0038B3  3               	clc
0038B3  3               	lda (z80_ix),y
0038B3  3               	adc #16
0038B3  3               	sta dispy		; set y
0038B3  3               	jmp digv
0038B3  3               
0038B3  3               ; Dig left.
0038B3  3               
0038B3  3               digl:
0038B3  3               	ldy #8
0038B3  3               	lda (z80_ix),y
0038B3  3               	sta dispy		; set y
0038B3  3               
0038B3  3               	iny
0038B3  3               	lda (z80_ix),y
0038B3  3               	sec
0038B3  3               	sbc #2			; x=x-2
0038B3  3               	sta dispx		; set x
0038B3  3               	jmp digh
0038B3  3               
0038B3  3               ; Dig right.
0038B3  3               
0038B3  3               digr:
0038B3  3               	ldy #8
0038B3  3               	lda (z80_ix),y
0038B3  3               	sta dispy		; set y
0038B3  3               
0038B3  3               	iny
0038B3  3               	lda (z80_ix),y
0038B3  3               	clc
0038B3  3               	adc #16
0038B3  3               	sta dispx		; set x+16
0038B3  3               	jmp digh
0038B3  3               
0038B3  3               ; Vertical digging
0038B3  3               
0038B3  3               digv:
0038B3  3               	jsr tstbl		; check blocktype in MAP
0038B3  3               	jsr fdchk		; test if FODDER
0038B3  3               
0038B3  3               	clc
0038B3  3               	lda dispx		; look 1 cell down
0038B3  3               	adc #8
0038B3  3               	sta dispx
0038B3  3               	jsr tstbl		; check blocktype in MAP
0038B3  3               	jsr fdchk
0038B3  3               	lda dispx
0038B3  3               	and #7
0038B3  3               	bne :+
0038B3  3               	rts
0038B3  3               :
0038B3  3               	clc
0038B3  3               	lda dispx		; look 1 cell down
0038B3  3               	adc #8
0038B3  3               	sta dispx
0038B3  3               	jsr tstbl		; check blocktype in MAP
0038B3  3               	jmp fdchk
0038B3  3               
0038B3  3               ; Horizontal digging
0038B3  3               
0038B3  3               digh:
0038B3  3               	jsr tstbl		; check blocktype in MAP
0038B3  3               	jsr fdchk		; test if FODDER
0038B3  3               
0038B3  3               	clc
0038B3  3               	lda dispy		; look 1 cell down
0038B3  3               	adc #8
0038B3  3               	sta dispy
0038B3  3               	jsr tstbl		; check blocktype in MAP
0038B3  3               	jsr fdchk
0038B3  3               	lda dispy
0038B3  3               	and #7
0038B3  3               	bne :+
0038B3  3               	rts
0038B3  3               :
0038B3  3               	clc
0038B3  3               	lda dispy		; look 1 cell down
0038B3  3               	adc #8
0038B3  3               	sta dispy
0038B3  3               	jsr tstbl		; check blocktype in MAP
0038B3  3               	jmp fdchk
0038B3  3               
0038B3  3               digcnt:	.byte 0
0038B3  3               
0038B3  3               .endif
0038B3  3               
0038B3  3               ;------------------------------------------------------------------
0038B3  3               ; Sprite table
0038B3  3               ;------------------------------------------------------------------
0038B3  3               
0038B3  3               
0038B3  3               ; ix+0  = type.
0038B3  3               ; ix+1  = sprite image number.
0038B3  3               ; ix+2  = frame.
0038B3  3               ; ix+3  = y coord.
0038B3  3               ; ix+4  = x coord.
0038B3  3               
0038B3  3               ; ix+5  = new type.
0038B3  3               ; ix+6  = new image number.
0038B3  3               ; ix+7  = new frame.
0038B3  3               ; ix+8  = new y coord.
0038B3  3               ; ix+9  = new x coord.
0038B3  3               
0038B3  3               ; ix+10 = direction.
0038B3  3               ; ix+11 = parameter 1.
0038B3  3               ; ix+12 = parameter 2.
0038B3  3               ; ix+13 = jump pointer low.
0038B3  3               ; ix+14 = jump pointer high.
0038B3  3               ; ix+15 = data pointer low.
0038B3  3               ; ix+16 = data pointer high.
0038B3  3               
0038B3  3               ; block NUMSPR * TABSIZ,255
0038B3  3               
0038B3  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0038B7  3  FF FF FF FF  
0038BB  3  FF FF FF FF  
00397F  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003983  3  FF FF FF 00  
003987  3  C0 78 00 00  
003990  3  07           roomtb:	.byte 7                      ; start room map offset.
003991  3               
003991  3               ; User routine.  Put your own code in here to be called with USER instruction.
003991  3               ; if USER has an argument it will be passed in the accumulator.
003991  3               
003991  3               user:
003991  3               	.include "user.inc"
003991  4  60           	rts
003992  4               
003992  3               
003992  3               setfgcol:
003992  3  29 07        	and #7
003994  3  8D A1 39     	sta fcolour
003997  3  60           	rts
003998  3               
003998  3               setbgcol:
003998  3  29 07        	and #7
00399A  3  18           	clc
00399B  3  69 10        	adc #16
00399D  3  8D A2 39     	sta bcolour
0039A0  3  60           	rts
0039A1  3               
0039A1  3  07           fcolour:	.byte t_white
0039A2  3  17           bcolour:	.byte g_white
0039A3  3               
0039A3  3               ; Everything below here will be generated by the editors.
0039A3  3               
0039A3  3  60                   rts
0039A4  3               WINDOWTOP = 0
0039A4  3               WINDOWLFT = 1
0039A4  3               WINDOWHGT = 25
0039A4  3               WINDOWWID = 39 ;
0039A4  3               MAPWID = 3
0039A4  3  FF FF FF             .byte 255,255,255
0039A7  3               mapdat:
0039A7  3  FF 00 FF             .byte 255,0,255
0039AA  3  FF FF FF             .byte 255,255,255
0039AD  3  01           stmap:  .byte 1
0039AE  3               
0039AE  3               evnt00:
0039AE  3  A0 0B                ldy #11
0039B0  3  B1 68                lda (z80_ix),y
0039B2  3  18                   clc
0039B3  3  69 01                adc #1
0039B5  3  A0 0B                ldy #11
0039B7  3  91 68                sta (z80_ix),y
0039B9  3  A9 00                lda #0
0039BB  3  85 rr                sta varm
0039BD  3  A5 rr                lda joyval	; KEY
0039BF  3  29 08                and #8
0039C1  3  F0 03                beq :+
0039C3  3  4C E1 39             jmp a00117
0039C6  3               :
0039C6  3  A9 04                lda #4
0039C8  3  A0 06                ldy #6
0039CA  3  91 68                sta (z80_ix),y
0039CC  3  A9 01                lda #1
0039CE  3  85 rr                sta varm
0039D0  3  20 A4 2D             jsr cangu	; CANGOUP
0039D3  3  F0 03                beq :+
0039D5  3  4C E1 39             jmp a00117
0039D8  3               :
0039D8  3  A0 08                ldy #8 		; SPRITEUP
0039DA  3  B1 68                lda (z80_ix),y
0039DC  3  38                   sec
0039DD  3  E9 01                sbc #1
0039DF  3  91 68                sta (z80_ix),y
0039E1  3  A5 rr        a00117: lda joyval	; KEY
0039E3  3  29 04                and #4
0039E5  3  F0 03                beq :+
0039E7  3  4C 05 3A             jmp a00200
0039EA  3               :
0039EA  3  A9 05                lda #5
0039EC  3  A0 06                ldy #6
0039EE  3  91 68                sta (z80_ix),y
0039F0  3  A9 01                lda #1
0039F2  3  85 rr                sta varm
0039F4  3  20 F1 2D             jsr cangd	; CANGODOWN
0039F7  3  F0 03                beq :+
0039F9  3  4C 05 3A             jmp a00200
0039FC  3               :
0039FC  3  A0 08                ldy #8 		; SPRITEDOWN
0039FE  3  B1 68                lda (z80_ix),y
003A00  3  18                   clc
003A01  3  69 01                adc #1
003A03  3  91 68                sta (z80_ix),y
003A05  3  A5 rr        a00200: lda joyval	; KEY
003A07  3  29 02                and #2
003A09  3  F0 03                beq :+
003A0B  3  4C 34 3A             jmp a00304
003A0E  3               :
003A0E  3  A9 03                lda #3
003A10  3  A0 06                ldy #6
003A12  3  91 68                sta (z80_ix),y
003A14  3  A9 01                lda #1
003A16  3  85 rr                sta varm
003A18  3  20 3E 2E             jsr cangl	; CANGOLEFT
003A1B  3  F0 03                beq :+
003A1D  3  4C 34 3A             jmp a00304
003A20  3               :
003A20  3  A9 04                lda #4
003A22  3  A0 09                ldy #9
003A24  3  D1 68                cmp (z80_ix),y
003A26  3  90 03                bcc *+5
003A28  3  4C 34 3A             jmp a00304
003A2B  3  A0 09                ldy #9 		; SPRITELEFT
003A2D  3  B1 68                lda (z80_ix),y
003A2F  3  38                   sec
003A30  3  E9 01                sbc #1
003A32  3  91 68                sta (z80_ix),y
003A34  3  A5 rr        a00304: lda joyval	; KEY
003A36  3  29 01                and #1
003A38  3  F0 03                beq :+
003A3A  3  4C 65 3A             jmp a00414
003A3D  3               :
003A3D  3  A9 02                lda #2
003A3F  3  A0 06                ldy #6
003A41  3  91 68                sta (z80_ix),y
003A43  3  A9 01                lda #1
003A45  3  85 rr                sta varm
003A47  3  20 50 2E             jsr cangr	; CANGORIGHT
003A4A  3  F0 03                beq :+
003A4C  3  4C 65 3A             jmp a00414
003A4F  3               :
003A4F  3  A9 46                lda #70
003A51  3  A0 09                ldy #9
003A53  3  D1 68                cmp (z80_ix),y
003A55  3  90 02                bcc *+4
003A57  3  D0 03                bne *+5
003A59  3  4C 65 3A             jmp a00414
003A5C  3  A0 09                ldy #9 		; SPRITERIGHT
003A5E  3  B1 68                lda (z80_ix),y
003A60  3  18                   clc
003A61  3  69 01                adc #1
003A63  3  91 68                sta (z80_ix),y
003A65  3  A9 00        a00414: lda #0
003A67  3  C5 rr                cmp varm
003A69  3  90 03                bcc *+5
003A6B  3  4C 73 3A             jmp a00442
003A6E  3  A9 00                lda #0		; ANIMATE
003A70  3  20 71 34             jsr animsp
003A73  3               a00442: ; SPRITEINK command
003A73  3  A9 01                lda #1 	; COLLISION
003A75  3  85 63                sta z80_b
003A77  3  20 BC 34             jsr sktyp
003A7A  3  B0 03                bcs :+
003A7C  3  4C 8F 3A             jmp a00507
003A7F  3               :
003A7F  3  A9 18                lda #24		; AT
003A81  3  85 rr                sta chary
003A83  3  A9 04                lda #4
003A85  3  85 rr                sta charx
003A87  3  A9 06                lda #6		; PRINT
003A89  3  20 F0 2F             jsr dmsg
003A8C  3  4C 9C 3A             jmp a00535
003A8F  3  A9 18        a00507: lda #24		; AT
003A91  3  85 rr                sta chary
003A93  3  A9 04                lda #4
003A95  3  85 rr                sta charx
003A97  3  A9 07                lda #7		; PRINT
003A99  3  20 F0 2F             jsr dmsg
003A9C  3  60           a00535: rts
003A9D  3               evnt01:
003A9D  3  A9 00                lda #0		; ANIMATE
003A9F  3  20 71 34             jsr animsp
003AA2  3  A9 00                lda #0
003AA4  3  C5 rr                cmp varc
003AA6  3  F0 03                beq *+5
003AA8  3  4C D6 3A             jmp b00120
003AAB  3  A9 06                lda #CUSTOM	; CUSTOM
003AAD  3  85 63                sta z80_b
003AAF  3  20 B3 2E             jsr tded
003AB2  3  C5 63                cmp z80_b
003AB4  3  F0 03                beq :+
003AB6  3  4C CF 3A             jmp b00108
003AB9  3               :
003AB9  3  A9 03                lda #3
003ABB  3  85 65                sta z80_d	; GETRANDOM
003ABD  3  20 A2 2F             jsr random
003AC0  3  85 67                sta z80_h
003AC2  3  20 4D 2A             jsr imul
003AC5  3  A5 67                lda z80_h
003AC7  3  85 rr                sta varrnd
003AC9  3  A5 rr                lda varrnd
003ACB  3  A0 0A                ldy #10
003ACD  3  91 68                sta (z80_ix),y
003ACF  3  A9 01        b00108: lda #1
003AD1  3  85 rr                sta varc
003AD3  3  4C DA 3A             jmp b00128
003AD6  3  A9 00        b00120: lda #0
003AD8  3  85 rr                sta varc
003ADA  3  A9 00        b00128: lda #0
003ADC  3  A0 0A                ldy #10
003ADE  3  D1 68                cmp (z80_ix),y
003AE0  3  F0 03                beq *+5
003AE2  3  4C 26 3B             jmp b00291
003AE5  3  20 3E 2E             jsr cangl	; CANGOLEFT
003AE8  3  F0 03                beq :+
003AEA  3  4C 0D 3B             jmp b00238
003AED  3               :
003AED  3  A9 04                lda #4
003AEF  3  A0 09                ldy #9
003AF1  3  D1 68                cmp (z80_ix),y
003AF3  3  90 03                bcc *+5
003AF5  3  4C 04 3B             jmp b00220
003AF8  3  A0 09                ldy #9 		; SPRITELEFT
003AFA  3  B1 68                lda (z80_ix),y
003AFC  3  38                   sec
003AFD  3  E9 01                sbc #1
003AFF  3  91 68                sta (z80_ix),y
003B01  3  4C 0A 3B             jmp b00233
003B04  3  A9 01        b00220: lda #1
003B06  3  A0 0A                ldy #10
003B08  3  91 68                sta (z80_ix),y
003B0A  3  4C 23 3B     b00233: jmp b00286
003B0D  3  A9 03        b00238: lda #3
003B0F  3  85 65                sta z80_d	; GETRANDOM
003B11  3  20 A2 2F             jsr random
003B14  3  85 67                sta z80_h
003B16  3  20 4D 2A             jsr imul
003B19  3  A5 67                lda z80_h
003B1B  3  85 rr                sta varrnd
003B1D  3  A5 rr                lda varrnd
003B1F  3  A0 0A                ldy #10
003B21  3  91 68                sta (z80_ix),y
003B23  3  4C E1 3B     b00286: jmp b00698
003B26  3  A9 01        b00291: lda #1
003B28  3  A0 0A                ldy #10
003B2A  3  D1 68                cmp (z80_ix),y
003B2C  3  F0 03                beq *+5
003B2E  3  4C 74 3B             jmp b00459
003B31  3  20 50 2E             jsr cangr	; CANGORIGHT
003B34  3  F0 03                beq :+
003B36  3  4C 5B 3B             jmp b00405
003B39  3               :
003B39  3  A9 46                lda #70
003B3B  3  A0 09                ldy #9
003B3D  3  D1 68                cmp (z80_ix),y
003B3F  3  90 02                bcc *+4
003B41  3  D0 03                bne *+5
003B43  3  4C 52 3B             jmp b00387
003B46  3  A0 09                ldy #9 		; SPRITERIGHT
003B48  3  B1 68                lda (z80_ix),y
003B4A  3  18                   clc
003B4B  3  69 01                adc #1
003B4D  3  91 68                sta (z80_ix),y
003B4F  3  4C 58 3B             jmp b00401
003B52  3  A9 00        b00387: lda #0
003B54  3  A0 0A                ldy #10
003B56  3  91 68                sta (z80_ix),y
003B58  3  4C 71 3B     b00401: jmp b00454
003B5B  3  A9 03        b00405: lda #3
003B5D  3  85 65                sta z80_d	; GETRANDOM
003B5F  3  20 A2 2F             jsr random
003B62  3  85 67                sta z80_h
003B64  3  20 4D 2A             jsr imul
003B67  3  A5 67                lda z80_h
003B69  3  85 rr                sta varrnd
003B6B  3  A5 rr                lda varrnd
003B6D  3  A0 0A                ldy #10
003B6F  3  91 68                sta (z80_ix),y
003B71  3  4C E1 3B     b00454: jmp b00698
003B74  3  A9 02        b00459: lda #2
003B76  3  A0 0A                ldy #10
003B78  3  D1 68                cmp (z80_ix),y
003B7A  3  F0 03                beq *+5
003B7C  3  4C AC 3B             jmp b00580
003B7F  3  20 A4 2D             jsr cangu	; CANGOUP
003B82  3  F0 03                beq :+
003B84  3  4C 93 3B             jmp b00527
003B87  3               :
003B87  3  A0 08                ldy #8 		; SPRITEUP
003B89  3  B1 68                lda (z80_ix),y
003B8B  3  38                   sec
003B8C  3  E9 01                sbc #1
003B8E  3  91 68                sta (z80_ix),y
003B90  3  4C A9 3B             jmp b00575
003B93  3  A9 03        b00527: lda #3
003B95  3  85 65                sta z80_d	; GETRANDOM
003B97  3  20 A2 2F             jsr random
003B9A  3  85 67                sta z80_h
003B9C  3  20 4D 2A             jsr imul
003B9F  3  A5 67                lda z80_h
003BA1  3  85 rr                sta varrnd
003BA3  3  A5 rr                lda varrnd
003BA5  3  A0 0A                ldy #10
003BA7  3  91 68                sta (z80_ix),y
003BA9  3  4C E1 3B     b00575: jmp b00698
003BAC  3  A9 03        b00580: lda #3
003BAE  3  A0 0A                ldy #10
003BB0  3  D1 68                cmp (z80_ix),y
003BB2  3  F0 03                beq *+5
003BB4  3  4C E1 3B             jmp b00698
003BB7  3  20 F1 2D             jsr cangd	; CANGODOWN
003BBA  3  F0 03                beq :+
003BBC  3  4C CB 3B             jmp b00649
003BBF  3               :
003BBF  3  A0 08                ldy #8 		; SPRITEDOWN
003BC1  3  B1 68                lda (z80_ix),y
003BC3  3  18                   clc
003BC4  3  69 01                adc #1
003BC6  3  91 68                sta (z80_ix),y
003BC8  3  4C E1 3B             jmp b00698
003BCB  3  A9 03        b00649: lda #3
003BCD  3  85 65                sta z80_d	; GETRANDOM
003BCF  3  20 A2 2F             jsr random
003BD2  3  85 67                sta z80_h
003BD4  3  20 4D 2A             jsr imul
003BD7  3  A5 67                lda z80_h
003BD9  3  85 rr                sta varrnd
003BDB  3  A5 rr                lda varrnd
003BDD  3  A0 0A                ldy #10
003BDF  3  91 68                sta (z80_ix),y
003BE1  3  60           b00698: rts
003BE2  3               evnt02:
003BE2  3  60                   rts
003BE3  3               evnt03:
003BE3  3  60                   rts
003BE4  3               evnt04:
003BE4  3  60                   rts
003BE5  3               evnt05:
003BE5  3  60                   rts
003BE6  3               evnt06:
003BE6  3  60                   rts
003BE7  3               evnt07:
003BE7  3  60                   rts
003BE8  3               evnt08:
003BE8  3  60                   rts
003BE9  3               evnt09:
003BE9  3  A9 01                lda #1
003BEB  3  A0 05                ldy #5
003BED  3  D1 68                cmp (z80_ix),y
003BEF  3  F0 03                beq *+5
003BF1  3  4C FA 3B             jmp j00037
003BF4  3  A9 00                lda #0
003BF6  3  A0 0A                ldy #10
003BF8  3  91 68                sta (z80_ix),y
003BFA  3  A9 02        j00037: lda #2
003BFC  3  A0 05                ldy #5
003BFE  3  D1 68                cmp (z80_ix),y
003C00  3  F0 03                beq *+5
003C02  3  4C 0B 3C             jmp j00073
003C05  3  A9 02                lda #2
003C07  3  A0 0A                ldy #10
003C09  3  91 68                sta (z80_ix),y
003C0B  3  60           j00073: rts
003C0C  3               evnt10:
003C0C  3  60                   rts
003C0D  3               evnt11:
003C0D  3  60                   rts
003C0E  3               evnt12:
003C0E  3  A9 05                lda #5 	; PAPER
003C10  3  20 98 39             jsr setbgcol
003C13  3  20 23 43             jsr cls		; CLS
003C16  3  60                   rts
003C17  3               evnt13:
003C17  3  60                   rts
003C18  3               evnt14:
003C18  3  20 23 43             jsr cls		; CLS
003C1B  3  60                   rts
003C1C  3               evnt15:
003C1C  3  60                   rts
003C1D  3               evnt16:
003C1D  3  60                   rts
003C1E  3               evnt17:
003C1E  3  A9 01                lda #1		; PRINTMODE
003C20  3  85 rr                sta prtmod
003C22  3  A9 08                lda #8
003C24  3  85 rr                sta chary
003C26  3  A9 0D                lda #13
003C28  3  85 rr                sta charx
003C2A  3                       ; COLOUR command
003C2A  3  A9 08                lda #8		; PRINT
003C2C  3  20 F0 2F             jsr dmsg
003C2F  3  A9 02                lda #2
003C31  3  85 62                sta z80_c
003C33  3  A5 rr                lda chary
003C35  3  18                   clc
003C36  3  65 62                adc z80_c
003C38  3  85 rr                sta chary
003C3A  3  A9 0D                lda #13
003C3C  3  85 rr                sta charx
003C3E  3                       ; COLOUR command
003C3E  3  A9 09                lda #9		; PRINT
003C40  3  20 F0 2F             jsr dmsg
003C43  3  20 93 43             jsr prskey	; WAITKEY
003C46  3  60                   rts
003C47  3               evnt18:
003C47  3  60                   rts
003C48  3               evnt19:
003C48  3                       ; COLOUR command
003C48  3  A9 0E                lda #14
003C4A  3  85 rr                sta chary
003C4C  3  A9 08                lda #8
003C4E  3  85 rr                sta charx
003C50  3  A9 0A                lda #10		; PRINT
003C52  3  20 F0 2F             jsr dmsg
003C55  3  60                   rts
003C56  3               evnt20:
003C56  3  60                   rts
003C57  3  60           ptcusr: rts
003C58  3               msgdat:
003C58  3  53 43 4F 52          .byte "SCOR",197
003C5C  3  C5           
003C5D  3  20 20 48 49          .byte "  HIG",200
003C61  3  47 C8        
003C63  3  4B 43 20 4D          .byte "KC MUNHCKI",206
003C67  3  55 4E 48 43  
003C6B  3  4B 49 CE     
003C6E  3  20 47 41 4D          .byte " GAM",197
003C72  3  C5           
003C73  3  20 4F 56 45          .byte " OVE",210
003C77  3  D2           
003C78  3  20 4E 45 57          .byte " NEW HIGH SCOR",197
003C7C  3  20 48 49 47  
003C80  3  48 20 53 43  
003C87  3  48 49 54 54          .byte "HITTING SPRITE:",177
003C8B  3  49 4E 47 20  
003C8F  3  53 50 52 49  
003C97  3  48 49 54 54          .byte "HITTING SPRITE:",160
003C9B  3  49 4E 47 20  
003C9F  3  53 50 52 49  
003CA7  3  20 47 41 4D          .byte " GAME",160
003CAB  3  45 A0        
003CAD  3  20 4F 56 45          .byte " OVER",160
003CB1  3  52 A0        
003CB3  3  20 4E 45 57          .byte " NEW HIGH SCORE",160
003CB7  3  20 48 49 47  
003CBB  3  48 20 53 43  
003CC3  3               nummsg:
003CC3  3  0B                   .byte 11
003CC4  3               chgfx:
003CC4  3  00 01                .byte 0,1
003CC6  3  7F 01                .byte 127,1
003CC8  3  00 01                .byte 0,1
003CCA  3               bprop:
003CCA  3  00                   .byte 0
003CCB  3  02                   .byte 2
003CCC  3  06                   .byte 6
003CCD  3               sprgfx:
003CCD  3  64 60 30 38          .byte 100,96,48,56,120,123,119,116,41,115,115,38
003CD1  3  78 7B 77 74  
003CD5  3  29 73 73 26  
003CD9  3  2C 30 70 60          .byte 44,48,112,96,112,118,127,121,35,102,115,57
003CDD  3  70 76 7F 79  
003CE1  3  23 66 73 39  
003CE5  3  64 60 30 38          .byte 100,96,48,56,120,123,119,116,41,112,112,38
003CE9  3  78 7B 77 74  
003CED  3  29 70 70 26  
003CF1  3  2C 30 70 60          .byte 44,48,112,96,112,118,127,121,35,100,112,56
003CF5  3  70 76 7F 79  
003CF9  3  23 64 70 38  
003CFD  3  64 60 30 38          .byte 100,96,48,56,120,123,119,116,43,127,127,39
003D01  3  78 7B 77 74  
003D05  3  2B 7F 7F 27  
003D09  3  2C 30 70 60          .byte 44,48,112,96,112,118,127,121,35,111,127,63
003D0D  3  70 76 7F 79  
003D11  3  23 6F 7F 3F  
003D15  3  64 7C 7C 38          .byte 100,124,124,56,117,127,122,127,110,43,55,61
003D19  3  75 7F 7A 7F  
003D1D  3  6E 2B 37 3D  
003D21  3  2C 78 7C 74          .byte 44,120,124,116,127,122,117,127,44,55,111,107
003D25  3  7F 7A 75 7F  
003D29  3  2C 37 6F 6B  
003D2D  3  64 7C 7C 38          .byte 100,124,124,56,117,127,122,127,62,107,39,109
003D31  3  75 7F 7A 7F  
003D35  3  3E 6B 27 6D  
003D39  3  2C 78 7C 74          .byte 44,120,124,116,127,122,117,127,124,39,63,43
003D3D  3  7F 7A 75 7F  
003D41  3  7C 27 3F 2B  
003D45  3  64 3C 7C 24          .byte 100,60,124,36,110,119,33,32,32,43,47,36
003D49  3  6E 77 21 20  
003D4D  3  20 2B 2F 24  
003D51  3  28 78 6C 3C          .byte 40,120,108,60,40,127,51,32,32,34,47,45
003D55  3  28 7F 33 20  
003D59  3  20 22 2F 2D  
003D5D  3  20 78 74 20          .byte 32,120,116,32,110,127,127,61,32,43,39,32
003D61  3  6E 7F 7F 3D  
003D65  3  20 2B 27 20  
003D69  3  20 60 7C 30          .byte 32,96,124,48,44,127,127,127,32,34,47,33
003D6D  3  2C 7F 7F 7F  
003D71  3  20 22 2F 21  
003D75  3  28 7C 6C 38          .byte 40,124,108,56,32,34,123,61,40,47,39,32
003D79  3  20 22 7B 3D  
003D7D  3  28 2F 27 20  
003D81  3  24 6C 3C 74          .byte 36,108,60,116,36,32,99,127,32,46,47,33
003D85  3  24 20 63 7F  
003D89  3  20 2E 2F 21  
003D8D  3  20 78 74 20          .byte 32,120,116,32,110,127,127,61,32,43,39,32
003D91  3  6E 7F 7F 3D  
003D95  3  20 2B 27 20  
003D99  3  20 60 7C 30          .byte 32,96,124,48,44,127,127,127,32,34,47,33
003D9D  3  2C 7F 7F 7F  
003DA1  3  20 22 2F 21  
003DA5  3  74 20 20 78          .byte 116,32,32,120,119,125,122,63,38,43,35,32
003DA9  3  77 7D 7A 3F  
003DAD  3  26 2B 23 20  
003DB1  3  7C 30 20 60          .byte 124,48,32,96,111,123,116,127,40,35,39,33
003DB5  3  6F 7B 74 7F  
003DB9  3  28 23 27 21  
003DBD  3  20 78 74 20          .byte 32,120,116,32,110,127,127,61,32,43,39,32
003DC1  3  6E 7F 7F 3D  
003DC5  3  20 2B 27 20  
003DC9  3  20 60 7C 30          .byte 32,96,124,48,44,127,127,127,32,34,47,33
003DCD  3  2C 7F 7F 7F  
003DD1  3  20 22 2F 21  
003DD5  3  64 78 70 20          .byte 100,120,112,32,119,63,107,125,39,32,32,43
003DD9  3  77 3F 6B 7D  
003DDD  3  27 20 20 2B  
003DE1  3  28 70 74 30          .byte 40,112,116,48,126,123,39,127,47,33,32,34
003DE5  3  7E 7B 27 7F  
003DE9  3  2F 21 20 22  
003DED  3  20 78 74 20          .byte 32,120,116,32,110,127,127,61,32,43,39,32
003DF1  3  6E 7F 7F 3D  
003DF5  3  20 2B 27 20  
003DF9  3  20 60 7C 30          .byte 32,96,124,48,44,127,127,127,32,34,47,33
003DFD  3  2C 7F 7F 7F  
003E01  3  20 22 2F 21  
003E05  3               frmlst:
003E05  3  00 03                .byte 0,3
003E07  3  03 02                .byte 3,2
003E09  3  05 02                .byte 5,2
003E0B  3  07 02                .byte 7,2
003E0D  3  09 02                .byte 9,2
003E0F  3  0B 02 0D 00          .byte 11,2,13,0
003E13  3               scdat:
003E13  3  74 01                .word 372
003E15  3  FF 01 28 02          .byte 255,1,40,2,2,255,0,7,1,255,0,4,1,0,0,0,1,255,0,8,1,255,0,9,1,1,255,0,9,1,255,0,4
003E19  3  02 FF 00 07  
003E1D  3  01 FF 00 04  
003E36  3  01 00 00 00          .byte 1,0,0,0,1,255,0,8,1,255,0,9,1,1,255,0,9,1,255,0,4,1,0,0,0,1,255,0,8,1,255,0,9
003E3A  3  01 FF 00 08  
003E3E  3  01 FF 00 09  
003E57  3  01 01 FF 00          .byte 1,1,255,0,4,255,1,6,255,0,4,1,0,0,0,1,255,0,4,255,1,5,255,0,4,255,1,7,2,2,255,0,9
003E5B  3  04 FF 01 06  
003E5F  3  FF 00 04 01  
003E78  3  02 02 FF 00          .byte 2,2,255,0,7,2,2,255,0,7,2,2,0,0,0,2,2,0,1,1,255,0,37,1,1,255,0,37,1,1,255,0,4
003E7C  3  07 02 02 FF  
003E80  3  00 07 02 02  
003E99  3  FF 01 06 FF          .byte 255,1,6,255,0,4,255,1,9,255,0,4,255,1,6,255,0,4,1,1,2,2,255,0,5,2,2,1,255,0,17,1,0
003E9D  3  00 04 FF 01  
003EA1  3  09 FF 00 04  
003EBA  3  02 02 00 00          .byte 2,2,0,0,0,2,2,0,1,1,255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17,1,255,0,9
003EBE  3  00 02 02 00  
003EC2  3  01 01 FF 00  
003EDC  3  FF 01 07 FF          .byte 255,1,7,255,0,4,255,1,19,255,0,4,255,1,6,255,0,7,2,2,255,0,21,2,2,255,0,85,255,1,6,255,0,4
003EE0  3  00 04 FF 01  
003EE4  3  13 FF 00 04  
003EFE  3  FF 01 13 FF          .byte 255,1,19,255,0,4,255,1,7,255,0,4,1,255,0,9,1,255,0,7,1,255,0,9,1,255,0,4,1,1,255,0,4
003F02  3  00 04 FF 01  
003F06  3  07 FF 00 04  
003F1F  3  01 FF 00 09          .byte 1,255,0,9,1,255,0,7,1,255,0,9,1,255,0,4,1,1,255,0,4,1,255,0,9,1,255,0,7,1,255,0,9
003F23  3  01 FF 00 07  
003F27  3  01 FF 00 09  
003F40  3  01 FF 00 04          .byte 1,255,0,4,1,1,255,0,4,1,255,0,4,1,255,0,4,255,1,9,255,0,4,1,255,0,4,1,255,0,4,1,1
003F44  3  01 01 FF 00  
003F48  3  04 01 FF 00  
003F61  3  FF 00 09 01          .byte 255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17
003F65  3  FF 00 11 01  
003F69  3  FF 00 09 01  
003F82  3  01 FF 00 09          .byte 1,255,0,9,255,1,40
003F86  3  FF 01 28     
003F89  3               numsc:
003F89  3  01                   .byte 1
003F8A  3               nmedat:
003F8A  3  00 00 28 14          .byte 0,0,40,20,1,1,40,10,255
003F8E  3  01 01 28 0A  
003F92  3  FF           
003F93  3               NUMOBJ = 1
003F93  3               objdta:
003F93  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
003F97  3  00 00 00 00  
003F9B  3  00 00 00 00  
003FB9  3               font:
003FB9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003FBD  3  00 00 00 00  
003FC1  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003FC5  3  30 00 30 00  
003FC9  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003FCD  3  00 00 00 00  
003FD1  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003FD5  3  6C FE 6C 00  
003FD9  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
003FDD  3  7E 1E 7E 18  
003FE1  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003FE5  3  30 6E CE 00  
003FE9  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
003FED  3  7E CC 7E 00  
003FF1  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
003FF5  3  00 00 00 00  
003FF9  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
003FFD  3  18 18 0C 00  
004001  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
004005  3  30 30 60 00  
004009  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
00400D  3  7E 18 3C 00  
004011  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
004015  3  7E 18 18 00  
004019  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
00401D  3  00 18 18 30  
004021  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
004025  3  7E 00 00 00  
004029  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
00402D  3  00 38 38 00  
004031  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
004035  3  18 30 60 00  
004039  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
00403D  3  F6 E6 7C 00  
004041  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
004045  3  18 18 7E 00  
004049  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
00404D  3  7C C0 FE 00  
004051  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
004055  3  06 C6 7C 00  
004059  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00405D  3  D8 FE 18 00  
004061  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
004065  3  06 C6 7C 00  
004069  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00406D  3  C6 C6 7C 00  
004071  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
004075  3  18 30 30 00  
004079  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00407D  3  C6 C6 7C 00  
004081  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
004085  3  7E 06 7C 00  
004089  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00408D  3  00 00 30 00  
004091  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
004095  3  00 30 30 60  
004099  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00409D  3  30 18 0C 00  
0040A1  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
0040A5  3  00 7E 00 00  
0040A9  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
0040AD  3  0C 18 30 00  
0040B1  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
0040B5  3  18 00 18 00  
0040B9  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
0040BD  3  FE C0 7C 00  
0040C1  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
0040C5  3  FE C6 C6 00  
0040C9  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0040CD  3  C6 C6 FC 00  
0040D1  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0040D5  3  C0 C6 7C 00  
0040D9  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0040DD  3  C6 CC F8 00  
0040E1  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0040E5  3  C0 C0 FE 00  
0040E9  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0040ED  3  C0 C0 C0 00  
0040F1  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0040F5  3  DE C6 7C 00  
0040F9  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0040FD  3  C6 C6 C6 00  
004101  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
004105  3  18 18 7E 00  
004109  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
00410D  3  C6 C6 7C 00  
004111  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
004115  3  D8 CC C6 00  
004119  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
00411D  3  C0 C0 FE 00  
004121  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
004125  3  C6 C6 C6 00  
004129  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
00412D  3  DE CE C6 00  
004131  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
004135  3  C6 C6 7C 00  
004139  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
00413D  3  FC C0 C0 00  
004141  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
004145  3  F6 DE 7C 00  
004149  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
00414D  3  FC CC C6 00  
004151  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
004155  3  06 C6 7C 00  
004159  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00415D  3  30 30 30 00  
004161  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
004165  3  C6 C6 7C 00  
004169  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00416D  3  C6 6C 38 00  
004171  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
004175  3  C6 FE 6C 00  
004179  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00417D  3  38 6C C6 00  
004181  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
004185  3  30 30 30 00  
004189  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00418D  3  30 60 FE 00  
004191  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
004195  3  18 18 1E 00  
004199  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00419D  3  30 18 0C 00  
0041A1  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
0041A5  3  30 30 F0 00  
0041A9  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
0041AD  3  30 30 30 00  
0041B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0041B5  3  00 00 00 FF  
0041B9  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0041BD  3  60 60 FE 00  
0041C1  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0041C5  3  7C CC 7C 00  
0041C9  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0041CD  3  66 66 7C 00  
0041D1  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0041D5  3  60 60 3C 00  
0041D9  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0041DD  3  CC CC 7C 00  
0041E1  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0041E5  3  F8 C0 7C 00  
0041E9  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0041ED  3  30 30 30 00  
0041F1  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0041F5  3  CC 7C 0C 78  
0041F9  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0041FD  3  CC CC CC 00  
004201  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
004205  3  30 30 78 00  
004209  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00420D  3  0C 0C 6C 38  
004211  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
004215  3  70 78 6C 00  
004219  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00421D  3  30 30 1C 00  
004221  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
004225  3  FC FC FC 00  
004229  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00422D  3  CC CC CC 00  
004231  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
004235  3  CC CC 78 00  
004239  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00423D  3  CC F8 C0 C0  
004241  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
004245  3  CC 7C 0C 0E  
004249  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00424D  3  60 60 60 00  
004251  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
004255  3  78 0C F8 00  
004259  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00425D  3  30 30 1C 00  
004261  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
004265  3  CC CC 78 00  
004269  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00426D  3  78 78 30 00  
004271  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
004275  3  FC FC 78 00  
004279  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00427D  3  30 78 CC 00  
004281  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
004285  3  CC 7C 0C 78  
004289  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00428D  3  30 60 FC 00  
004291  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
004295  3  18 18 1E 00  
004299  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00429D  3  18 18 18 00  
0042A1  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0042A5  3  30 30 F0 00  
0042A9  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0042AD  3  00 00 00 00  
0042B1  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0042B5  3  E3 BB C6 7C  
0042B9  3               jtab:
0042B9  3  63                   .byte 99
0042BA  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
0042BE  3  20 4E 4D 31  
0042C2  3  32 33 34     
0042C5  3               
0042C5  2               
0042C5  1               	.include "lib.inc"
0042C5  2               ;----------------------------------------------------------------------
0042C5  2               ; System 5 depending variables and routines
0042C5  2               ;----------------------------------------------------------------------
0042C5  2               
0042C5  2               ; Global variables
0042C5  2               
0042C5  2               	t_red		= 1	; Text colour definition filters
0042C5  2               	t_green		= 2
0042C5  2               	t_yellow	= 3
0042C5  2               	t_blue		= 4
0042C5  2               	t_magenta	= 5
0042C5  2               	t_cyan		= 6
0042C5  2               	t_white		= 7
0042C5  2               
0042C5  2               	g_red		= 17	; Graphics colour definition filters
0042C5  2               	g_green		= 18
0042C5  2               	g_yellow	= 19
0042C5  2               	g_blue		= 20
0042C5  2               	g_magenta	= 21
0042C5  2               	g_cyan		= 22
0042C5  2               	g_white		= 23
0042C5  2               
0042C5  2               	ScrWidth	= 40
0042C5  2               	ScrHeight	= 25
0042C5  2               
0042C5  2               ; System constants
0042C5  2               
0042C5  2               	ScreenAddr	= $0400	; Startaddress video RAM
0042C5  2               
0042C5  2               	PORT_A		= $0e21	; Keyboard
0042C5  2               	Timer1_Low  	= $0e24	; Timer 1 low byte
0042C5  2               	Timer1_High 	= $0e25	; Timer 1 high byte
0042C5  2               	Timer2_Low	= $0e28	; Timer 2 low byte
0042C5  2               	Timer2_High	= $0e29	; Timer 2 high byte
0042C5  2               	IFR		= $0e2d ; Interrupt Flag Register
0042C5  2               
0042C5  2               	MAP 		= $D800	; properties map buffer (4x256 bytes)
0042C5  2               	SCADTB_lb 	= $DC00	; screen address table lo-byte (256 bytes)
0042C5  2               	SCADTB_hb 	= $DD00	; screen address table hi-byte (256 bytes)
0042C5  2               	SHRAPN 		= $DE00	; shrapnel table (55x6 bytes)
0042C5  2               
0042C5  2               ;	ScrSelAddr	= $b000	; Screen selection address
0042C5  2               ;	KeyRowAddr	= $b000	; PIA key matrix row
0042C5  2               ;	KeyColAddr	= $b001	; PIA key matrix column
0042C5  2               ;	SpeakerBit	= $b002	; Speaker bit
0042C5  2               ;	CmdReg		= $b400	; Command register AtoMMC
0042C5  2               ;	DatReg		= $b401	; Data register AtoMMC
0042C5  2               
0042C5  2               ; System calls
0042C5  2               
0042C5  2               	OS_CLI   = $FFF7
0042C5  2               	OSBYTE   = $FFF4
0042C5  2               	OSWORD   = $FFF1
0042C5  2               	OSWRCH   = $FFEE
0042C5  2               	OSWRCR   = $FFEC
0042C5  2               	OSNEWL   = $FFE7
0042C5  2               	OSASCI   = $FFE3
0042C5  2               	OSRDCH   = $FFE0
0042C5  2               	OSFILE   = $FFDD
0042C5  2               	OSARGS   = $FFDA
0042C5  2               	OSBGET   = $FFD7
0042C5  2               	OSBPUT   = $FFD4
0042C5  2               	OSGBPB   = $FFD1
0042C5  2               	OSFIND   = $FFCE
0042C5  2               
0042C5  2               ; To be removed
0042C5  2               
0042C5  2               	SCRSYNC	= $fff4
0042C5  2               	READKEY	= $fff4
0042C5  2               	red    = 1
0042C5  2               	blue   = 2
0042C5  2               	yellow = 3
0042C5  2               	green  = 4
0042C5  2               keymask:
0042C5  2  00           	.byte 0
0042C6  2               
0042C6  2               ;======================================================================
0042C6  2               ; System depending routines
0042C6  2               ;======================================================================
0042C6  2               
0042C6  2               ;----------------------------------------------------------------------
0042C6  2               ; Init hardware
0042C6  2               ;----------------------------------------------------------------------
0042C6  2               
0042C6  2               init:
0042C6  2               
0042C6  2               ; Set timer at 50 Hz
0042C6  2               ;	lda #$e0		; T1 continuous
0042C6  2               ;	sta $0e2b
0042C6  2               ;	lda #$7f		; No int
0042C6  2               ;	sta $0e2e
0042C6  2               ;	lda #0
0042C6  2               ;	sta $0e2d		; Clear interrupt flags
0042C6  2               ;	lda #<40000
0042C6  2               ;	sta Timer1_Low
0042C6  2               ;	lda #>40000
0042C6  2               ;	sta Timer1_High
0042C6  2               
0042C6  2               ; Init VDU40x25
0042C6  2               
0042C6  2  A0 0F        	ldy #$f
0042C8  2               loops:
0042C8  2  8C 00 08     	sty $0800
0042CB  2  B9 13 43     	lda CRTTAB,y
0042CE  2  8D 01 08     	sta $0801
0042D1  2  88           	dey
0042D2  2  10 F4        	bpl loops
0042D4  2               
0042D4  2               ; Disable cursor
0042D4  2  A9 0A        	lda #$0a
0042D6  2  8D 00 08     	sta $0800
0042D9  2  A9 20        	lda #$20
0042DB  2  8D 01 08     	sta $801
0042DE  2               
0042DE  2  20 23 43     	jsr cls
0042E1  2               
0042E1  2               ; Set new interrupt routine
0042E1  2               
0042E1  2  A9 01        	lda #<irq_handler	; New interrupt handler
0042E3  2  8D 04 02     	sta $204
0042E6  2  A9 43        	lda #>irq_handler
0042E8  2  8D 05 02     	sta $205
0042EB  2               
0042EB  2  A9 30        	lda #<30000		; Interrupt at 50Hz
0042ED  2  8D 24 0E     	sta Timer1_Low
0042F0  2  A9 75        	lda #>30000
0042F2  2  8D 25 0E     	sta Timer1_High
0042F5  2  A9 40        	lda #$40
0042F7  2  8D 2B 0E     	sta $0e2b
0042FA  2  A9 C0        	lda #$c0
0042FC  2  8D 2E 0E     	sta $0e2e
0042FF  2  58           	cli
004300  2  60           	rts
004301  2               
004301  2               irq_handler:
004301  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
004304  2               
004304  2  8A           	txa			; Save x,y
004305  2  48           	pha
004306  2  98           	tya
004307  2  48           	pha
004308  2               
004308  2  EE 11 43     	inc frames_passed	; Nr of frames past
00430B  2               
00430B  2  68           	pla			; Restore x,y,a
00430C  2  A8           	tay
00430D  2  68           	pla
00430E  2  AA           	tax
00430F  2  68           	pla
004310  2  40           	rti
004311  2               
004311  2  00           frames_passed:	.byte 0
004312  2               
004312  2  60           	rts
004313  2               
004313  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
004317  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
00431B  2  03 12 72 13  	.byte $03,$12,$72,$13
00431F  2  04 00 07 FF  	.byte $04,$00,$07,$ff
004323  2               
004323  2               ;======================================================================
004323  2               ; Screen routines
004323  2               ;======================================================================
004323  2               
004323  2               ;----------------------------------------------------------------------
004323  2               ; Clear screen routine.
004323  2               ;
004323  2               ; Fill screenmem $0400-$07ff with ScrFillByte
004323  2               ; Set semigraphics at 1st column every line
004323  2               ;----------------------------------------------------------------------
004323  2               
004323  2               cls:
004323  2  A9 00        	lda #0
004325  2  A0 00        	ldy #0
004327  2               clsloop:
004327  2  99 00 04     	sta ScreenAddr,y
00432A  2  99 00 05     	sta ScreenAddr+256,y
00432D  2  99 00 06     	sta ScreenAddr+512,y
004330  2  99 00 07     	sta ScreenAddr+768,y
004333  2  C8           	iny
004334  2  D0 F1        	bne clsloop
004336  2               
004336  2  A0 00        	ldy #0
004338  2  A2 19        	ldx #ScrHeight
00433A  2  AD 00 DC     	lda SCADTB_lb
00433D  2  85 rr        	sta scraddr
00433F  2  AD 00 DD     	lda SCADTB_hb
004342  2  85 rr        	sta scraddr+1
004344  2  AD A2 39     	lda bcolour
004347  2               colloop:
004347  2  91 rr        	sta (scraddr),y
004349  2  48           	pha
00434A  2  A5 rr        	lda scraddr
00434C  2  18           	clc
00434D  2  69 28        	adc #ScrWidth
00434F  2  85 rr        	sta scraddr
004351  2  90 02        	bcc :+
004353  2  E6 rr        	inc scraddr+1
004355  2               :
004355  2  68           	pla
004356  2  CA           	dex
004357  2  D0 EE        	bne colloop
004359  2  60           	rts
00435A  2               
00435A  2               ;-------------------------------------------------------------
00435A  2               ; Screen synchronisation.
00435A  2               ;
00435A  2               ;  - read joystick/keyboard
00435A  2               ;  - handle sound
00435A  2               ;  - sync framerate with clock
00435A  2               ;  - handle shrapnel every even frame
00435A  2               ;-------------------------------------------------------------
00435A  2               
00435A  2               vsync:
00435A  2  48           	pha
00435B  2  98           	tya
00435C  2  48           	pha
00435D  2  8A           	txa
00435E  2  48           	pha
00435F  2  20 CA 2F     	jsr joykey		; read joystick/keyboard.
004362  2               ;vsync1:
004362  2               ;	bit IFR			; Check Interrupt Flag Register
004362  2               ;	beq vsync1
004362  2               ;	lda Timer1_Low		; Clear Timer interrupt
004362  2               
004362  2               ; Sync framerate to 25 Hz
004362  2               
004362  2               vsync1:
004362  2  AD 11 43     	lda frames_passed	; Wait if not at 25Hz
004365  2  C9 02        	cmp #2
004367  2  90 F9        	bcc vsync1
004369  2               
004369  2  A9 00        	lda #0			; sync framerate 25 Hz
00436B  2  8D 11 43     	sta frames_passed
00436E  2               
00436E  2               
00436E  2  A5 rr        	lda clock
004370  2  29 01        	and #1
004372  2  D0 03        	bne:+
004374  2  20 8D 28     	jsr proshr		; handle shrapnel every even frame
004377  2               :
004377  2               ;	lda sndtyp
004377  2               ;	beq sndskip
004377  2               ;sndloop:
004377  2               ;	lda SpeakerBit		; handle sound
004377  2               ;	ldy sndtyp
004377  2               ;sndwait:
004377  2               ;	dey
004377  2               ;	bne sndwait
004377  2               ;	eor #4
004377  2               ;	sta SpeakerBit
004377  2               ;	dec sndtyp
004377  2               ;	bne sndloop
004377  2               ;sndskip:
004377  2               
004377  2  68           	pla
004378  2  AA           	tax
004379  2  68           	pla
00437A  2  A8           	tay
00437B  2  68           	pla
00437C  2  60           	rts
00437D  2               
00437D  2  00           sndtyp:	.byte 0
00437E  2               
00437E  2               ;======================================================================
00437E  2               ; Joystick routines
00437E  2               ;======================================================================
00437E  2               
00437E  2               joyinit:
00437E  2  60           	rts
00437F  2               joy1:
00437F  2  60           	rts
004380  2               joy2:
004380  2  60           	rts
004381  2               
004381  2               ;======================================================================
004381  2               ; Keyboard routines
004381  2               ;======================================================================
004381  2               
004381  2               ;----------------------------------------------------------------------
004381  2               ; KTEST
004381  2               ; Check if key in A is pressed
004381  2               ; 	return clc if pressed
004381  2               ; 	return sec if not pressed
004381  2               ;----------------------------------------------------------------------
004381  2               
004381  2               ktest:
004381  2  85 rr        	sta tmp
004383  2  2C 21 0E     	bit PORT_A
004386  2  10 09        	bpl not_pressed	; BUG MAME, bit 7 not set ....
004388  2  AD 21 0E     	lda PORT_A
00438B  2  C5 rr        	cmp tmp
00438D  2  D0 02        	bne not_pressed
00438F  2               pressed:
00438F  2  18           	clc
004390  2  60           	rts
004391  2               not_pressed:
004391  2  38           	sec
004392  2  60           	rts
004393  2               
004393  2               ;======================================================================
004393  2               ; PRSKEY
004393  2               ; Wait for keypress and release
004393  2               ;======================================================================
004393  2               
004393  2               prskey:
004393  2  2C 21 0E     	bit PORT_A
004396  2  30 FB        	bmi prskey
004398  2               relkey:
004398  2  2C 21 0E     	bit PORT_A
00439B  2  10 FB        	bpl relkey
00439D  2  60           	rts
00439E  2               
00439E  2               
00439E  1               	.include "z80.asm"
00439E  2               ;------------------------------------------------------
00439E  2               ; z80.asm
00439E  2               ; spectrum stuff
00439E  2               ; adresses
00439E  2               
00439E  2               
00439E  2               ; Contains seperatly 1 bit set
00439E  2               
00439E  2               _bitmem0	= $f8
00439E  2               _bitmem1	= $f9
00439E  2               _bitmem2	= $fa
00439E  2               _bitmem3	= $fb
00439E  2               _bitmem4	= $fc
00439E  2               _bitmem5	= $fd
00439E  2               _bitmem6	= $fe
00439E  2               _bitmem7	= $ff
00439E  2               
00439E  2               ; constants
00439E  2               _bitvalue0	= $01
00439E  2               _bitvalue1	= $02
00439E  2               _bitvalue2	= $04
00439E  2               _bitvalue3	= $08
00439E  2               _bitvalue4	= $10
00439E  2               _bitvalue5	= $20
00439E  2               _bitvalue6	= $40
00439E  2               _bitvalue7	= $80
00439E  2               
00439E  2               _notbitvalue0	= $fe
00439E  2               _notbitvalue1	= $fd
00439E  2               _notbitvalue2	= $fb
00439E  2               _notbitvalue3	= $f7
00439E  2               _notbitvalue4	= $ef
00439E  2               _notbitvalue5	= $df
00439E  2               _notbitvalue6	= $bf
00439E  2               _notbitvalue7	= $7f
00439E  2               
00439E  2               
00439E  2               exx:
00439E  2  A5 62        		lda z80_c
0043A0  2  A4 6E        		ldy z80_cp
0043A2  2  84 62        		sty z80_c
0043A4  2  85 6E        		sta z80_cp
0043A6  2  A5 63        		lda z80_b
0043A8  2  A4 6F        		ldy z80_bp
0043AA  2  84 63        		sty z80_b
0043AC  2  85 6F        		sta z80_bp
0043AE  2  A5 64        		lda z80_e
0043B0  2  A4 70        		ldy z80_ep
0043B2  2  84 64        		sty z80_e
0043B4  2  85 70        		sta z80_ep
0043B6  2  A5 65        		lda z80_d
0043B8  2  A4 71        		ldy z80_dp
0043BA  2  84 65        		sty z80_d
0043BC  2  85 71        		sta z80_dp
0043BE  2  A5 rr        		lda scraddr
0043C0  2  A4 72        		ldy z80_lp
0043C2  2  84 rr        		sty scraddr
0043C4  2  85 72        		sta z80_lp
0043C6  2  A5 rr        		lda scraddr+1
0043C8  2  A4 73        		ldy z80_hp
0043CA  2  84 rr        		sty scraddr+1
0043CC  2  85 73        		sta z80_hp
0043CE  2  60           		rts
0043CF  2               
0043CF  2               
0043CF  1               eind_asm:
0043CF  1               eop:					; End Of Program
0043CF  1               
0043CF  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
0043CF  1               
