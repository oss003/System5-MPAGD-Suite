ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "testclock.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 8D 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  A4 38        msgptr:		.word msgdat	; messages
002811  3  D2 38        blkptr:		.word chgfx	; block graphics.
002813  3  D4 38        proptr:		.word bprop	; address of char properties.
002815  3  D5 38        sptptr:		.word sprgfx	; sprite graphics
002817  3  4D 39        frmptr:		.word frmlst	; sprite frames.
002819  3  51 39        scrptr:		.word scdat	; address of screens.
00281B  3  5A 39        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  5F 39        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3               ;txtcol:		.byte green,yellow,blue,red
00281F  3               
00281F  3               ; Don't change the order of these four.
00281F  3               ; Menu routine relies on winlft following wintop.
00281F  3               
00281F  3  00           wintop:		.byte WINDOWTOP	; top of window.
002820  3  00           winlft:		.byte WINDOWLFT	; left edge.
002821  3  14           winhgt:		.byte WINDOWHGT	; window height.
002822  3  19           winwid:		.byte WINDOWWID	; window width.
002823  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002824  3               
002824  3               ; Variables start here.
002824  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002824  3               
002824  3  00           wntopx:		.byte (3 * WINDOWTOP)
002825  3  00           wnlftx:		.byte (2 * WINDOWLFT)
002826  3  33           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
002827  3  28           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
002828  3               
002828  3               ; Assorted game routines which can go in contended memory.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for inventory called by the INV command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with objects seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected objectnr of INV menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if mflag
002828  3               minve:
002828  3               .if gflag
002828  3               	lda #$ff		; blue frontcolour
002828  3               	sta andeor
002828  3               	lda #$aa		; yellow backcoloour
002828  3               	sta andeor+1
002828  3               .endif
002828  3               	lda #<(invdis)		; routine address.
002828  3               	sta mod0+1		; set up menu routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(invdis)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               	lda #<(fopt)		; find option from available objects.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fopt)
002828  3               	sta mod1+1+1
002828  3               	jmp dbox		; do menu routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for menu called by the MENU command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with menu items seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected line nr of MENU menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               mmenu:
002828  3               	lda #<(always)		; routine address.
002828  3               	sta mod0+1		; set up routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(always)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               
002828  3               	lda #<(fstd)		; standard option selection.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fstd)
002828  3               	sta mod1+2
002828  3               
002828  3               ; Drop through into box routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Work out size of box for message or menu.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               dbox:
002828  3               	lda #<(msgdat)		; pointer to messages.
002828  3               	sta z80_l
002828  3               	lda #>(msgdat)
002828  3               	sta z80_h
002828  3               
002828  3               	jsr getwrd		; get message number.
002828  3               
002828  3               	lda z80_h		; store pointer to message.
002828  3               	sta TmpAddr
002828  3               	lda z80_l
002828  3               	sta TmpAddr+1
002828  3               
002828  3               	lda #1			; height.
002828  3               	sta z80_d
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               	sta z80_e		; maximum width.
002828  3               dbox5:
002828  3               	lda #0			; this line"s width.
002828  3               	sta z80_b
002828  3               mod2:
002828  3               	jsr always		; item in player"s possession?
002828  3               	cmp #255
002828  3               	bne dbox6		; not in inventory, skip this line.
002828  3               	inc z80_d		; add to tally.
002828  3               dbox6:
002828  3               	ldy #0			; get character.
002828  3               	lda (z80_hl),y
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a		; reached end of line?
002828  3               	cmp #','
002828  3               	beq dbox3		; yes.
002828  3               	cmp #13
002828  3               	beq dbox3		; yes.
002828  3               	inc z80_b		; add to this line"s width.
002828  3               	lda z80_a
002828  3               	bmi dbox4		; end of message? yes, end count.
002828  3               	jmp dbox6		; repeat until we find the end.
002828  3               dbox3:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox5		; no, carry on looking.
002828  3               	lda z80_b		; make this the widest so far.
002828  3               	sta z80_e
002828  3               	jmp dbox5		; keep looking.
002828  3               dbox4:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox8		; no, carry on looking.
002828  3               	lda z80_b		; final line is the longest so far.
002828  3               	sta z80_e
002828  3               dbox8:
002828  3               	dec z80_d		; decrement items found.
002828  3               	bne :+			; total was zero.
002828  3               	lda #255
002828  3               	sta varopt
002828  3               	jmp dbox15
002828  3               :
002828  3               	lda z80_e		; longest line.
002828  3               	bne :+			; was it zero?
002828  3               	jmp dbox15		; total was zero.
002828  3               :
002828  3               	sta bwid		; set up size.
002828  3               	lda z80_d
002828  3               	sta blen
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; That's set up our box size.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               	lda winhgt		; window height in characters.
002828  3               	sec
002828  3               	sbc z80_d		; subtract height of box.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc wintop		; add top edge of window.
002828  3               	sta btop		; set up box top.
002828  3               
002828  3               	lda winwid		; window width in characters.
002828  3               	sec
002828  3               	sbc z80_e		; subtract box width.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc winlft		; add left edge of window.
002828  3               	sta blft		; box left.
002828  3               
002828  3               	lda #<(FONT-256)		; font.
002828  3               	sta grbase		; set up for text display.
002828  3               	lda #>(FONT-256)
002828  3               	sta grbase+1
002828  3               
002828  3               	lda TmpAddr+1		; restore message pointer.
002828  3               	sta z80_l
002828  3               	lda TmpAddr
002828  3               	sta z80_h
002828  3               
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set display coordinate.
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               dbox2:
002828  3               	lda combyt		; get object number.
002828  3               	sta z80_a
002828  3               mod0:
002828  3               	jsr always		; check inventory for display.
002828  3               	cmp #255
002828  3               	beq :+
002828  3               	jmp dbox13		; not in inventory, skip this line.
002828  3               :
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set left display position.
002828  3               	lda bwid		; box width.
002828  3               	sta z80_b		; store width.
002828  3               
002828  3               	lda fcolour		; Set textcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               dbox0:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	cmp #','		; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               	cmp #13			; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               
002828  3               	cmp #141			; end of line?
002828  3               	bne :+
002828  3               	dec bwid
002828  3               	jmp dbox7		; yes, next one.
002828  3               :
002828  3               	dec z80_b		; one less to display.
002828  3               	and #127		; remove terminator.
002828  3               
002828  3               	jsr pchr		; display on screen.
002828  3               
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a
002828  3               	cmp #128		; end of message?
002828  3               	bmi :+
002828  3               	jsr dscor2
002828  3               	jmp dbox7		; yes, job done.
002828  3               :
002828  3               	lda z80_b		; chars remaining.
002828  3               	beq :+			; are any left?
002828  3               	jmp dbox0		; yes, continue.
002828  3               :
002828  3               ;---------------------------------------------------
002828  3               ; Reached limit of characters per line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dbox9:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #13			; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #128		; end of message?
002828  3               	bcs :+
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox9
002828  3               
002828  3               ;---------------------------------------------------
002828  3               ; Fill box to end of line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dboxf:
002828  3               	lda #32			; space character.
002828  3               	jsr pchr		; display character.
002828  3               	dec z80_b
002828  3               	beq :+
002828  3               	jmp dboxf		; repeat for remaining chars on line.
002828  3               :
002828  3               	rts
002828  3               dbox1:
002828  3               	inc z80_l		; skip character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	jsr dboxf		; fill box out to right side.
002828  3               dbox10:
002828  3               	inc dispy		; y coordinate down a line next position.
002828  3               	jmp dbox2		; next line.
002828  3               dbox7:
002828  3               	lda z80_b		; chars remaining.
002828  3               	bne :+			; are any left?
002828  3               	jmp dbox11		; no, nothing to draw.
002828  3               :
002828  3               	jsr dboxf		; fill message to line.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Drawn the box menu, now select option.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox11:
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set bar position.
002828  3               dbox14:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	bne dbox14		; yes, debounce it.
002828  3               	jsr dbar		; draw bar.
002828  3               dbox12:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	beq dbox12		; no, nothing.
002828  3               	and #16			; fire button pressed?
002828  3               	bne :+
002828  3               mod1:
002828  3               	jmp fstd		; yes, job done.
002828  3               :
002828  3               	jsr dbar		; delete bar.
002828  3               
002828  3               	lda joyval		; joystick reading.
002828  3               	and #8			; going up?
002828  3               	beq dboxu		; yes, go up.
002828  3               
002828  3               	ldx dispy		; vertical position of bar.
002828  3               	inx			; look down.
002828  3               	txa
002828  3               	sec
002828  3               	sbc btop		; find distance from top.
002828  3               	cmp blen		; top of box.
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	inc dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               dboxu:
002828  3               	lda dispy		; vertical position of bar.
002828  3               	cmp btop		; are we at the top?
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	dec dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               fstd:
002828  3               	lda dispy		; bar position.
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta varopt		; store the option.
002828  3               	jmp redraw		; redraw the screen.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Option not available.  Skip this line.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox13:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               	cmp #13			; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               
002828  3               	bpl :+			; end of message?
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox13
002828  3               dbox15:
002828  3               	lda TmpAddr		; pop message pointer from the stack.
002828  3               	sta z80_h
002828  3               	lda TmpAddr+1
002828  3               	sta z80_l
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Invert bar
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbar:
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set display coordinate.
002828  3               	jsr gprad		; get printing address.
002828  3               
002828  3               ;	lda bwid		; box width.
002828  3               ;	sta z80_c		; loop counter in c.
002828  3               ;	lda z80_h
002828  3               ;	sta z80_d		; store screen address high byte.
002828  3               ;dbar1:
002828  3               ;	ldx #7			; pixel height in b.
002828  3               ;dbar0:
002828  3               ;	ldy scrtab,x
002828  3               ;	lda (scraddr),y		; get screen byte.
002828  3               ;	eor #255		; reverse all bits.
002828  3               ;	sta (scraddr),y		; write back to screen.
002828  3               ;	dex			; next line down.
002828  3               ;	bpl dbar0		; draw rest of character.
002828  3               
002828  3               ;	inc scraddr		; one char right.
002828  3               ;	dec z80_c		; decrement character counter.
002828  3               ;	bne dbar1		; repeat for whole line.
002828  3               
002828  3               	ldy #0
002828  3               	lda (scraddr),y
002828  3               	eor #7
002828  3               	sta (scraddr),y
002828  3               
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Point to object
002828  3               ;
002828  3               ; Input:
002828  3               ;  combyt
002828  3               ;
002828  3               ; Output:
002828  3               ;  A = object number, A=255 if already in possession
002828  3               ;------------------------------------------------------
002828  3               
002828  3               invdis:
002828  3               	lda z80_l		; store message text pointer.
002828  3               	pha
002828  3               	lda z80_h
002828  3               	pha
002828  3               	lda combyt		; object number.
002828  3               	inc combyt		; ready for next one.
002828  3               	jsr gotob		; check if we have object.
002828  3               	tay
002828  3               	pla
002828  3               	sta z80_h
002828  3               	pla
002828  3               	sta z80_l
002828  3               	tya
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Find option selected.
002828  3               ;
002828  3               ; Input:
002828  3               ;  -
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected object
002828  3               ;------------------------------------------------------
002828  3               
002828  3               fopt:
002828  3               	lda dispy
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta tmp+2		; option selected in b register.
002828  3               	inc tmp+2
002828  3               
002828  3               	lda #0			; set to first item.
002828  3               	sta combyt		; object number.
002828  3               fopt0:
002828  3               	jsr fobj		; find next object in inventory.
002828  3               	dec tmp+2
002828  3               	bne fopt0		; repeat for relevant steps down the list.
002828  3               
002828  3               	lda combyt		; get option.
002828  3               	sta varopt		; store the option.
002828  3               	dec varopt		; one less, due to where we increment combyt.
002828  3               	jmp redraw		; redraw the screen.
002828  3               fobj:
002828  3               	ldy combyt		; object number.
002828  3               	inc combyt		; ready for next item.
002828  3               	tya
002828  3               	jsr gotob		; do we have this item?
002828  3               	cmp #255
002828  3               	bne :+
002828  3               	rts
002828  3               :
002828  3               	jmp fobj		; yes, it's on the list.
002828  3               .endif
002828  3               
002828  3               ;----------------------------------------------------
002828  3               ; Delay routine A * 1/25 sec
002828  3               ;----------------------------------------------------
002828  3               
002828  3               delay:
002828  3  85 rr        	sta xtmp
00282A  3               
00282A  3               del_start:
00282A  3  A9 00        	lda #0
00282C  3  8D 1A 3D     	sta frames_passed
00282F  3               del_loop:
00282F  3  AD 1A 3D     	lda frames_passed
002832  3  C9 02        	cmp #2
002834  3  90 F9        	bcc del_loop
002836  3               
002836  3  A9 00        	lda #0
002838  3  8D 1A 3D     	sta frames_passed
00283B  3  C6 rr        	dec xtmp
00283D  3  D0 EB        	bne del_start
00283F  3  60           	rts
002840  3               
002840  3               ;----------------------------------------------------
002840  3               ; Clear sprite table.
002840  3               ;
002840  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002840  3               ;----------------------------------------------------
002840  3               
002840  3               xspr:
002840  3  A9 FF        	lda #255		; clear byte.
002842  3  A2 00        	ldx #0			; length of table.
002844  3               xspr0:
002844  3  9D 30 37     	sta sprtab,x		; sprite table.
002847  3  E8           	inx			; move to next byte.
002848  3  E0 CC        	cpx #SPRBUF
00284A  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284C  3  60           	rts
00284D  3               
00284D  3               ;-------------------------------------------------------------
00284D  3               ; Initialise all objects.
00284D  3               ;
00284D  3               ; Reset current room,y,x to start room,y,x for all objects
00284D  3               ;-------------------------------------------------------------
00284D  3               
00284D  3               .if oflag
00284D  3               iniob:
00284D  3               	lda #<objdta 		; objects table.
00284D  3               	sta z80_x
00284D  3               	lda #>objdta
00284D  3               	sta z80_i
00284D  3               
00284D  3               	ldx numob 		; number of objects in the game.
00284D  3               iniob0:
00284D  3               	ldy #35
00284D  3               	lda (z80_ix),y 		; start screen.
00284D  3               	ldy #32
00284D  3               	sta (z80_ix),y 		; set start screen.
00284D  3               
00284D  3               	ldy #36
00284D  3               	lda (z80_ix),y 		; find start y.
00284D  3               	ldy #33
00284D  3               	sta (z80_ix),y 		; set start y.
00284D  3               
00284D  3               	ldy #37
00284D  3               	lda (z80_ix),y 		; get initial x.
00284D  3               	ldy #34
00284D  3               	sta (z80_ix),y 		; set x coord.
00284D  3               
00284D  3               	clc 			; point to next object.
00284D  3               	lda z80_x
00284D  3               	adc #38			; distance between objects.
00284D  3               	sta z80_x
00284D  3               	bcc :+
00284D  3               	inc z80_i
00284D  3               :
00284D  3               	dex 			; repeat.
00284D  3               	bne iniob0
00284D  3               
00284D  3               	rts
00284D  3               .endif
00284D  3               
00284D  3               ;-----------------------------------------------
00284D  3               ; Redraw the screen.
00284D  3               ;
00284D  3               ; Remove old copy of all sprites for redraw.
00284D  3               ;-----------------------------------------------
00284D  3               
00284D  3               redraw:
00284D  3               .if gflag
00284D  3               	lda #$ff
00284D  3               	sta andeor
00284D  3               	lda #$00
00284D  3               	sta andeor+1
00284D  3               .endif
00284D  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00284F  3  48           	pha
002850  3  A5 68        	lda z80_x
002852  3  48           	pha
002853  3               
002853  3  20 2D 2D     	jsr droom		; show screen layout.
002856  3               .if oflag
002856  3               	jsr shwob		; draw objects.
002856  3               .endif
002856  3               numsp0:
002856  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002858  3  85 rr        	sta tmp
00285A  3               
00285A  3  A9 30        	lda #<sprtab		; sprite table.
00285C  3  85 68        	sta z80_x
00285E  3  A9 37        	lda #>sprtab
002860  3  85 69        	sta z80_i
002862  3               redrw0:
002862  3  A0 00        	ldy #0
002864  3  B1 68        	lda (z80_ix),y		; old sprite type.
002866  3  C9 FF        	cmp #255		; is it enabled?
002868  3  F0 0B        	beq redrw1 		; no, find next one.
00286A  3               
00286A  3  A0 03        	ldy #3
00286C  3  B1 68        	lda (z80_ix),y 		; sprite y.
00286E  3  C9 B1        	cmp #177		; beyond maximum?
002870  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002872  3               
002872  3  20 A7 3D     	jsr sspria		; show single sprite.
002875  3               redrw1:
002875  3  18           	clc			; next sprite.
002876  3  A5 68        	lda z80_x
002878  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00287A  3  85 68        	sta z80_x
00287C  3  90 02        	bcc :+
00287E  3  E6 69        	inc z80_i
002880  3               :
002880  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002882  3  D0 DE        	bne redrw0
002884  3               rpblc1:
002884  3               ;	jsr dshrp		; redraw shrapnel.
002884  3               
002884  3               .if aflag
002884  3               	jsr rbloc		; draw blocks for this screen
002884  3               .endif
002884  3  68           	pla			; retrieve sprite pointer.
002885  3  85 68        	sta z80_x
002887  3  68           	pla
002888  3  85 69        	sta z80_i
00288A  3               
00288A  3  60           	rts
00288B  3               
00288B  3               ;----------------------------------------------------------------------
00288B  3               ; Atomic palette is static
00288B  3               ;----------------------------------------------------------------------
00288B  3               
00288B  3               setpal:
00288B  3  60           	rts
00288C  3               
00288C  3               ;----------------------------------------------------------------------
00288C  3               ; FODDER check
00288C  3               ;----------------------------------------------------------------------
00288C  3               
00288C  3               .if pflag .or dflag
00288C  3               fdchk:
00288C  3               	cmp #FODDER 		; is it fodder?
00288C  3               	beq :+
00288C  3               	rts 			; no.
00288C  3               :
00288C  3               	lda #0			; wipe fodder in MAP
00288C  3               	ldy #0
00288C  3               	sta (bufaddr),y 	; rewrite block type.
00288C  3               
00288C  3               	lda dispx		; x=x/8
00288C  3               	pha
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	sta dispx
00288C  3               
00288C  3               	lda dispy		; y=y/8
00288C  3               	pha
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	sta dispy
00288C  3               
00288C  3               	lda #0 			; block to write.
00288C  3               	jsr pattr 		; write block.
00288C  3               
00288C  3               	pla
00288C  3               	sta dispy
00288C  3               	pla
00288C  3               	sta dispx
00288C  3               	rts
00288C  3               .endif
00288C  3               
00288C  3               ;----------------------------------------------------
00288C  3               ; Scrolly text and puzzle variables.
00288C  3               ;----------------------------------------------------
00288C  3               
00288C  3               .if sflag
00288C  3               txtbit:	.byte 128		; bit to write.
00288C  3               txtwid:	.byte 16		; width of ticker message.
00288C  3               txtpos:	.word msgdat
00288C  3               txtini:	.word msgdat
00288C  3               txtscr:	.word ScreenAddr
00288C  3               .endif
00288C  3               
00288C  3               ;----------------------------------------------------
00288C  3               ; Specialist routines.
00288C  3               ; Process shrapnel.
00288C  3               ;----------------------------------------------------
00288C  3               proshr:
00288C  3               .if pflag
00288C  3               	lda #<SHRAPN		; table.
00288C  3               	sta z80_x
00288C  3               	lda #>SHRAPN
00288C  3               	sta z80_i
00288C  3               
00288C  3               	lda #NUMSHR		; shrapnel pieces to process.
00288C  3               	sta shrctr
00288C  3               prosh0:
00288C  3               	ldy #0
00288C  3               	lda (z80_ix),y		; on/off marker.
00288C  3               	asl a
00288C  3               proshx:
00288C  3               	bcs :+
00288C  3               	jsr prosh1 		; on, so process it.
00288C  3               :
00288C  3               	clc
00288C  3               	lda z80_x
00288C  3               	adc #SHRSIZ
00288C  3               	sta z80_x
00288C  3               	bcc :+
00288C  3               	inc z80_i
00288C  3               :
00288C  3               	dec shrctr		; round again.
00288C  3               	bne prosh0
00288C  3               .endif
00288C  3               .if sflag
00288C  3               	jsr scrly
00288C  3               .endif
00288C  3  60           	rts
00288D  3               
00288D  3               .if pflag
00288D  3               ;shrctr:	.byte 0
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Proces shrapnel piece
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               prosh1:
00288D  3               	jsr plot 		; delete the pixel.
00288D  3               
00288D  3               	lda #<shrptr		; shrapnel routine pointers.
00288D  3               	sta z80_l
00288D  3               	lda #>shrptr
00288D  3               	sta z80_h
00288D  3               
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; restore shrapnel type.
00288D  3               	jsr prosh2 		; run the routine.
00288D  3               	jsr chkxy		; check x and y are good before we redisplay.
00288D  3               
00288D  3               	lda #<SHRSIZ 		; distance to next.
00288D  3               	sta z80_e
00288D  3               	lda #>SHRSIZ
00288D  3               	sta z80_d
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Run the routine
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               prosh2:
00288D  3               	asl a 			; 2 bytes per address.
00288D  3               	tay
00288D  3               	lda shrptr,y
00288D  3               	sta z80_l
00288D  3               	lda shrptr+1,y 		; fetch high byte from table.
00288D  3               	sta z80_h
00288D  3               	jmp (z80_hl) 		; jump to routine.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Paricle routine table
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shrptr:	.word laser		; laser.
00288D  3               	.word trail		; vapour trail.
00288D  3               	.word shrap		; shrapnel from explosion.
00288D  3               	.word dotl		; horizontal starfield left.
00288D  3               	.word dotr		; horizontal starfield right.
00288D  3               	.word dotu		; vertical starfield up.
00288D  3               	.word dotd		; vertical starfield down.
00288D  3               	.word ptcusr		; user particle.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Explosion shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shrap:
00288D  3               	ldy #1
00288D  3               	lda (z80_ix),y 		; get the angle.
00288D  3               	clc
00288D  3               	adc #<shrsin		; shrapnel sine table.
00288D  3               	sta z80_l
00288D  3               	lda #>shrsin
00288D  3               	adc #0
00288D  3               	sta z80_h
00288D  3               
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; fetch value from table.
00288D  3               	sta z80_e
00288D  3               	inc z80_l 		; next byte of table.
00288D  3               	bne :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y		; fetch value from table.
00288D  3               	sta z80_d
00288D  3               	inc z80_l		; next byte of table.
00288D  3               	bne :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; fetch value from table.
00288D  3               	sta z80_c
00288D  3               	inc z80_l 		; next byte of table.
00288D  3               	bne :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; fetch value from table.
00288D  3               	sta z80_b
00288D  3               
00288D  3               	ldy #2
00288D  3               	lda (z80_ix),y 		; x coordinate in hl.
00288D  3               	clc
00288D  3               	adc z80_e		; add sine lb
00288D  3               	sta (z80_ix),y		; store new coordinate lb.
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	adc z80_d		; add sine hb
00288D  3               	sta (z80_ix),y		; store new coordinate hb.
00288D  3               
00288D  3               	ldy #4
00288D  3               	lda (z80_ix),y	 	; y coordinate in hl.
00288D  3               	clc
00288D  3               	adc z80_c		; add cosine lb
00288D  3               	sta (z80_ix),y		; store new coordinate lb.
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	adc z80_b		; add cosine lb
00288D  3               	sta (z80_ix),y		; store new coordinate hb.
00288D  3               
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Move dots
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               dotl:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1		 	; move left.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               dotr:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1		 	; move left.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               dotu:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1		 	; move up.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               dotd:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1			; move down.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Check if coordinates are ok before redrawing at new position.
00288D  3               ;
00288D  3               ; left:   X>L		X=L	Ok
00288D  3               ; right:  R+15>X	X=R	Ok
00288D  3               ; top:    Y>T		Y=T	Ok
00288D  3               ; bottom: B+15>Y	Y=B	Ok
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               chkxy:
00288D  3               
00288D  3               ; top:    Y>T		Y=T	Ok
00288D  3               
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	cmp wntopx		; window top.
00288D  3               	bcs :+			; compare with top window limit.
00288D  3               	jmp kilshr		; out of window, kill shrapnel.
00288D  3               :
00288D  3               ; left:   X>L		X=L	Ok
00288D  3               
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	cmp wnlftx		; left edge.
00288D  3               	bcs :+			; compare with left window limit.
00288D  3               	jmp kilshr		; out of window, kill shrapnel.
00288D  3               :
00288D  3               ; bottom: B+15>Y	Y=B	Ok
00288D  3               
00288D  3               	lda wnbotx		; point to bottom.
00288D  3               	clc
00288D  3               	adc #15
00288D  3               	ldy #3
00288D  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	bcs :+			; compare with shrapnel x coordinate.
00288D  3               	jmp kilshr		; off screen, kill shrapnel..
00288D  3               :
00288D  3               ; right:  R+15>X	X=R	Ok
00288D  3               
00288D  3               	lda wnrgtx		; point to right edge.
00288D  3               	clc
00288D  3               	adc #15
00288D  3               	ldy #5
00288D  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	bcs :+			; compare with window limit.
00288D  3               	jmp kilshr		; off screen, kill shrapnel.
00288D  3               :
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Drop through.
00288D  3               ; Display shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               plot:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y		; y integer.
00288D  3               	sta dispy	 	; workspace coordinates.
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y	 	; x integer.
00288D  3               	sta dispx 		; workspace coordinates.
00288D  3               
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y 		; type.
00288D  3               	bne :+			; is it a laser?
00288D  3               	jmp plot1 		; yes, draw laser instead.
00288D  3               :
00288D  3               plot0:
00288D  3               	lda dispx		; which pixel within byte do we
00288D  3               	and #7			; want to set first?
00288D  3               	tay
00288D  3               	lda dots,y 		; table of small pixel positions.
00288D  3               	sta z80_e 		; get value.
00288D  3               
00288D  3               	jsr scadd 		; screen address.
00288D  3               	ldy #0
00288D  3               	lda (scraddr),y		; see what's already there.
00288D  3               	eor z80_e
00288D  3               	sta (scraddr),y 	; put back on screen.
00288D  3               	rts
00288D  3               
00288D  3               plot1:
00288D  3               	jsr scadd 		; screen address.
00288D  3               	ldy #0
00288D  3               	lda (scraddr),y 	; fetch byte there.
00288D  3               	eor #255 		; toggle all bits.
00288D  3               	sta (scraddr),y 	; new byte.
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Switch off shrapnel
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               kilshr:
00288D  3               	lda #128
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y	; switch off shrapnel.
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Sine/cosine table
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shrsin:	.word 0,1024,391,946,724,724,946,391
00288D  3               	.word 1024,0,946,65144,724,64811,391,64589
00288D  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
00288D  3               	.word 64512,0,64589,391,64811,724,65144,946
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create trail
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               trail:
00288D  3               	ldy #1
00288D  3               	lda (z80_ix),y 	; time remaining.
00288D  3               	sec
00288D  3               	sbc #1
00288D  3               	sta (z80_ix),y
00288D  3               	bne :+
00288D  3               	jmp trailk		; time to switch it off.
00288D  3               :
00288D  3               	jsr qrand		; get a random number.
00288D  3               	lsr a 			; x or y axis?
00288D  3               	bcc :+
00288D  3               	jmp trailv		; use y.
00288D  3               :
00288D  3               ; Trail horizontal
00288D  3               
00288D  3               	lsr a 			; which direction?
00288D  3               	bcc :+
00288D  3               	jmp traill		; go left.
00288D  3               :
00288D  3               ; Trail right
00288D  3               
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1	 		; go right.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Trail left
00288D  3               
00288D  3               traill:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1 			; go left.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Trail vertical
00288D  3               
00288D  3               trailv:
00288D  3               	lsr a		 	; which direction?
00288D  3               	bcc :+
00288D  3               	jmp trailu		; go up.
00288D  3               :
00288D  3               ; Trail down
00288D  3               
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1 			; go down.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Trail up
00288D  3               
00288D  3               trailu:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1 			; go up.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Kill trail
00288D  3               
00288D  3               trailk:
00288D  3               	lda #200		; set off-screen to kill vapour trail.
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create laser beam
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               laser:
00288D  3               	ldy #1
00288D  3               	lda (z80_ix),y 		; direction.
00288D  3               	ror a 			; left or right?
00288D  3               	bcs :+
00288D  3               	jmp laserl		; move left.
00288D  3               :
00288D  3               ; Laser right
00288D  3               
00288D  3               	lda #8			; distance to travel.
00288D  3               	sta z80_b
00288D  3               	jmp laserm		; move laser.
00288D  3               
00288D  3               ; Laser left
00288D  3               
00288D  3               laserl:
00288D  3               	lda #248		; distance to travel.
00288D  3               	sta z80_b
00288D  3               laserm:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y		; x position.
00288D  3               	clc
00288D  3               	adc z80_b		; add distance.
00288D  3               	sta (z80_ix),y		; set new x coordinate.
00288D  3               
00288D  3               ; Test new block.
00288D  3               
00288D  3               	sta dispx 		; set x for block collision detection purposes.
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y 		; get y.
00288D  3               	sta dispy		; set coordinate for collision test.
00288D  3               	jsr tstbl 		; get block type there.
00288D  3               	cmp #WALL		; is it solid?
00288D  3               	bne :+
00288D  3               	jmp trailk		; yes, it cannot pass.
00288D  3               :
00288D  3               .if pflag .or dflag
00288D  3                       cmp #FODDER             ; is it fodder?
00288D  3                       bne :+
00288D  3                       jsr fdchk               ; remove fodder block.
00288D  3                       jmp trailk              ; destroy laser.
00288D  3               :
00288D  3               .endif
00288D  3                       rts                     ; no, ignore it.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Dots mask
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               dots:	.byte 128,64,32,16,8,4,2,1
00288D  3               
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Plot, preserving de.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               plotde:
00288D  3               	lda z80_d 		; put de on stack.
00288D  3               	pha
00288D  3               	lda z80_e
00288D  3               	pha
00288D  3               
00288D  3               	jsr plot 		; plot pixel.
00288D  3               
00288D  3               	pla			; restore de from stack.
00288D  3               	sta z80_e
00288D  3               	pla
00288D  3               	sta z80_d
00288D  3               
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Shoot a laser.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shoot:
00288D  3               	sta z80_c		; store direction in c register.
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	clc
00288D  3               shoot1:
00288D  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
00288D  3               	sta z80_l 		; puty y coordinate in l.
00288D  3               
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y 		; x coordinate in h.
00288D  3               	sta z80_h
00288D  3               
00288D  3               	lda z80_i		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcs :+
00288D  3               	jmp vapou2		; failed, restore ix.
00288D  3               :
00288D  3               	lda #0
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y 		; set up a laser.
00288D  3               
00288D  3               	lda z80_c
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y 		; set the direction.
00288D  3               
00288D  3               	lda z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; set y coordinate.
00288D  3               
00288D  3               	ror z80_c		; check direction we want.
00288D  3               	bcc :+
00288D  3               	jmp shootr		; shoot right.
00288D  3               :
00288D  3               	lda z80_h		; X position.
00288D  3               shoot0:
00288D  3               	and #248		; align on character boundary.
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; set x coordinate.
00288D  3               	jmp vapou0 		; draw first image.
00288D  3               shootr:
00288D  3               	lda z80_h		; x position.
00288D  3               	clc
00288D  3               	adc #15			; look right.
00288D  3               	jmp shoot0		; align and continue.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create a bit of vapour trail.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               vapour:
00288D  3               	lda z80_i		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	clc
00288D  3               vapou3:
00288D  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00288D  3               	sta z80_l
00288D  3               
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y 		; x coordinate.
00288D  3               	adc #7
00288D  3               	sta z80_h
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcc :+
00288D  3               	jmp vapou1		; no, we can use it.
00288D  3               :
00288D  3               vapou2:
00288D  3               	pla
00288D  3               	sta z80_x
00288D  3               	pla
00288D  3               	sta z80_i
00288D  3               	rts
00288D  3               vapou1:
00288D  3               	lda z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; set up y.
00288D  3               
00288D  3               	lda z80_h
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y 		; set up x coordinate.
00288D  3               
00288D  3               	jsr qrand		; get quick random number.
00288D  3               	and #15			; random time.
00288D  3               	clc
00288D  3               	adc #15			; minimum time on screen.
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y		; set time on screen.
00288D  3               
00288D  3               	lda #1
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; define particle as vapour trail.
00288D  3               vapou0:
00288D  3               	jsr chkxy		; plot first position.
00288D  3               	jmp vapou2
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create a user particle.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               ptusr:
00288D  3               	sta z80_f		; store timer.
00288D  3               
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	clc
00288D  3               	adc #7			; mid-point of sprite.
00288D  3               	sta z80_l
00288D  3               
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y 		; x coordinate.
00288D  3               	clc
00288D  3               	adc #7			; mid-point of sprite.
00288D  3               	sta z80_h
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcs ptusr1
00288D  3               	rts 			; out of slots, can't generate anything.
00288D  3               ptusr1:
00288D  3               	lda z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y 		; set up y.
00288D  3               
00288D  3               	lda z80_h
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; set up x coordinate.
00288D  3               
00288D  3               	lda z80_f 		; restore timer.
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y		; set time on screen.
00288D  3               
00288D  3               	lda #7
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; define particle as user particle.
00288D  3               
00288D  3               	jmp chkxy		; plot first position.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create a vertical or horizontal star.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               star:
00288D  3               	lda z80_i		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcs star7		; found one we can use.
00288D  3               star0:
00288D  3               	pla 			; restore sprite pointer.
00288D  3               	sta z80_x
00288D  3               	pla
00288D  3               	sta z80_i
00288D  3               	rts 			; out of slots, can't generate anything.
00288D  3               star7:
00288D  3               	lda z80_c		; direction.
00288D  3               	and #3 			; is it left?
00288D  3               	bne :+
00288D  3               	jmp star1 		; yes, it's left.
00288D  3               :
00288D  3               	cmp #1 			; is it right?
00288D  3               	bne :+
00288D  3               	jmp star2 		; yes, it's right.
00288D  3               :
00288D  3               	cmp #2 			; is it up?
00288D  3               	bne :+
00288D  3               	jmp star3 		; yes, it's up.
00288D  3               :
00288D  3               	ldy wntopx 		; get edge of screen.
00288D  3               	iny			; down one pixel.
00288D  3               	tya
00288D  3               star8:
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y 		; set y coord.
00288D  3               	jsr qrand 		; get quick random number.
00288D  3               star9:
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; set x position.
00288D  3               
00288D  3               	lda z80_c		; direction.
00288D  3               	and #3			; zero to three.
00288D  3               	clc
00288D  3               	adc #3			; 3 to 6 for starfield.
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; define particle as star.
00288D  3               	jsr chkxy		; plot first position.
00288D  3               	jmp star0
00288D  3               star1:
00288D  3               	jsr qrand		; get quick random number.
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y 		; set y coord.
00288D  3               
00288D  3               	lda wnrgtx 		; get edge of screen.
00288D  3               	clc
00288D  3               	adc #15			; add width of sprite minus 1.
00288D  3               	jmp star9
00288D  3               star2:
00288D  3               	jsr qrand 		; get quick random number.
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; set y coord.
00288D  3               
00288D  3               	lda wnlftx		; get edge of screen.
00288D  3               	jmp star9
00288D  3               star3:
00288D  3               	lda wnbotx 		; get edge of screen.
00288D  3               	clc
00288D  3               	adc #15 		; height of sprite minus one pixel.
00288D  3               	jmp star8
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Find particle slot for lasers or vapour trail.
00288D  3               ; can't use alternate accumulator.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               fpslot:
00288D  3               	lda #<SHRAPN 		; shrapnel table.
00288D  3               	sta z80_x
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_i
00288D  3               
00288D  3               	lda #NUMSHR		; number of pieces in table.
00288D  3               	sta z80_b
00288D  3               fpslt0:
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; get type.
00288D  3               	asl a  			; is this slot in use?
00288D  3               	bcc :+
00288D  3               	rts			; no, we can use it.
00288D  3               :
00288D  3               	clc			; point to more shrapnel.
00288D  3               	lda z80_x
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_x
00288D  3               	bcc :+
00288D  3               	inc z80_i
00288D  3               :
00288D  3               	dec z80_b		; repeat for all shrapnel.
00288D  3               	bne fpslt0
00288D  3               
00288D  3               	clc
00288D  3               	rts 			; out of slots, can't generate anything.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create an explosion at sprite position.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               explod:
00288D  3               	sta z80_c 		; particles to create.
00288D  3               
00288D  3               	lda z80_i 		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	sta z80_l
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y		; x coordinate.
00288D  3               	sta z80_h
00288D  3               
00288D  3               	lda #<SHRAPN		; shrapnel table.
00288D  3               	sta z80_x
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_i
00288D  3               
00288D  3               	lda #NUMSHR		; number of pieces in table.
00288D  3               	sta explcnt
00288D  3               expld0:
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; get type.
00288D  3               	asl a 			; is this slot in use?
00288D  3               	bcs expld1		; no, we can use it.
00288D  3               expld2:
00288D  3               	clc
00288D  3               	lda z80_x
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_x
00288D  3               	bcc :+
00288D  3               	inc z80_i
00288D  3               :
00288D  3               	dec explcnt		; repeat for all shrapnel.
00288D  3               	bne expld0
00288D  3               expld3:
00288D  3               	pla			; restore sprite pointer.
00288D  3               	sta z80_x
00288D  3               	pla
00288D  3               	sta z80_i
00288D  3               	rts 			; out of slots, can't generate any more.
00288D  3               
00288D  3               expld1:
00288D  3               	lda z80_c		; shrapnel counter.
00288D  3               	and #15			; 0 to 15.
00288D  3               	clc			; add to x.
00288D  3               	adc z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; y coord.
00288D  3               
00288D  3               	lda seed3 		; crap random number.
00288D  3               	and #15			; 0 to 15.
00288D  3               	clc 			; add to y.
00288D  3               	adc z80_h
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; x coord.
00288D  3               
00288D  3               	lda #2
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; switch it on.
00288D  3               
00288D  3               	jsr chkxy		; plot first position.
00288D  3               	jsr qrand		; quick random angle.
00288D  3               	and #60 		; keep within range.
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y		; angle.
00288D  3               
00288D  3               	dec z80_c		; one less piece of shrapnel to generate.
00288D  3               	bne expld2 		; back to main explosion loop.
00288D  3               	jmp expld3 		; restore sprite pointer and exit.
00288D  3               
00288D  3               ;explcnt:	.byte 0
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Quick random
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               qrand:
00288D  3               	jsr random		; r register.
00288D  3               	eor seed3		; combine with seed.
00288D  3               	sta seed3 		; new seed.
00288D  3               	rts
00288D  3               
00288D  3               ;seed3:	.byte 0
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Display all shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               dshrp:
00288D  3               	lda #<plotde		; display routine.
00288D  3               	sta proshx+1
00288D  3               	lda #>plotde
00288D  3               	sta proshx+2
00288D  3               	jsr proshr		; process shrapnel.
00288D  3               
00288D  3               	lda #<prosh1		; processing routine.
00288D  3               	sta proshx+1
00288D  3               	lda #>prosh1
00288D  3               	sta proshx+2
00288D  3               	rts
00288D  3               
00288D  3               ;------------------------------------------------------
00288D  3               ; Particle engine.
00288D  3               ;
00288D  3               ; Init particle data for 55 particles in SHRAPN table.
00288D  3               ; Every particle has 6 bytes.
00288D  3               ;
00288D  3               ; global:	-
00288D  3               ; local:	x,y,hl
00288D  3               ; calls:	-
00288D  3               ;------------------------------------------------------
00288D  3               
00288D  3               inishr:
00288D  3               	lda #<SHRAPN 		; table.
00288D  3               	sta z80_l
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_h
00288D  3               
00288D  3               	ldy #0
00288D  3               	ldx #NUMSHR		; shrapnel pieces to process.
00288D  3               inish0:
00288D  3               	lda #255 		; kill the shrapnel.
00288D  3               	sta (z80_hl),y
00288D  3               
00288D  3               	clc 			; point there.
00288D  3               	lda z80_l
00288D  3               	adc #SHRSIZ		; distance to next.
00288D  3               	sta z80_l
00288D  3               	bcc :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	dex
00288D  3               	bne inish0 		; round again.
00288D  3               	rts
00288D  3               
00288D  3               ;------------------------------------------------------
00288D  3               ; Check for collision between laser and sprite.
00288D  3               ;------------------------------------------------------
00288D  3               
00288D  3               lcol:
00288D  3               	lda #<SHRAPN		; shrapnel table.
00288D  3               	sta z80_l
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_h
00288D  3               
00288D  3               	lda #NUMSHR		; number of pieces in table.
00288D  3               	sta z80_b
00288D  3               lcol0:
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; get type.
00288D  3               	beq lcol1		; yes, check collision.
00288D  3               lcol3:
00288D  3               	clc			; point to more shrapnel.
00288D  3               	lda z80_l
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_l
00288D  3               	bcc :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	dec z80_b		; repeat for all shrapnel.
00288D  3               	bne lcol0
00288D  3               	rts 			; no collision, carry not set.
00288D  3               lcol1:
00288D  3               	ldy #3
00288D  3               	lda (z80_hl),y		; get y.
00288D  3               	sec
00288D  3               	ldy #8
00288D  3               	sbc (z80_ix),y		; subtract sprite y.
00288D  3               lcolh:
00288D  3               	cmp #SPR_HGT 		; within range?
00288D  3               	bcc :+
00288D  3               	jmp lcol2		; no, missed.
00288D  3               :
00288D  3               	ldy #5
00288D  3               	lda (z80_hl),y 		; get x.
00288D  3               	sec
00288D  3               	ldy #9
00288D  3               	sbc (z80_ix),y 		; subtract sprite y.
00288D  3               	cmp #16			; within range?
00288D  3               	bcs :+
00288D  3               	jmp lcol4 		; yes, collision occurred.
00288D  3               :
00288D  3               lcol2:
00288D  3               	jmp lcol3
00288D  3               lcol4:
00288D  3               	sec
00288D  3               	rts 			; return with carry set for collision.
00288D  3               .endif
00288D  3               
00288D  3               ;------------------------------------------------------
00288D  3               ; Main game engine code starts here.
00288D  3               ; After initialisation, mloop is the main loop
00288D  3               ;------------------------------------------------------
00288D  3               
00288D  3               game:
00288D  3               
00288D  3               
00288D  3               ; Init hardware and graphics mode
00288D  3               
00288D  3  20 91 3C     	jsr init 		; Init hardware
002890  3               
002890  3               ; Init joystick
002890  3               
002890  3  20 87 3D     	jsr joyinit		; Init joystick
002893  3               
002893  3               rpblc2:
002893  3               .if pflag
002893  3               	jsr inishr 		; initialise particle engine.
002893  3               .endif
002893  3               evintr:
002893  3  20 97 38     	jsr evnt12 		; call intro/menu event.
002896  3               
002896  3  A9 02        	lda #WALL 		; write default property.
002898  3  A2 00        	ldx #0
00289A  3               clrmap:
00289A  3  9D 00 D8     	sta MAP,x 		; block properties.
00289D  3  9D 00 D9     	sta MAP+256,x
0028A0  3  9D 00 DA     	sta MAP+512,x
0028A3  3  9D 00 DB     	sta MAP+768,x
0028A6  3  E8           	inx			; next byte.
0028A7  3  D0 F1        	bne clrmap
0028A9  3               
0028A9  3               .if oflag
0028A9  3               	jsr iniob 		; initialise objects.
0028A9  3               .endif
0028A9  3  A9 00        	lda #0			; put zero in accumulator.
0028AB  3  85 rr        	sta gamwon		; reset game won flag.
0028AD  3               
0028AD  3  20 18 2A     	jsr inisc 		; init the score.
0028B0  3               mapst:
0028B0  3  AD 2A 38     	lda stmap 		; start position on map.
0028B3  3  8D 0D 38     	sta roomtb		; set up position in table, if there is one.
0028B6  3               
0028B6  3               inipbl:
0028B6  3               .if aflag
0028B6  3               	lda #<eop		; reset blockpointer
0028B6  3               	sta pbptr
0028B6  3               	lda #>eop
0028B6  3               	sta pbptr+1
0028B6  3               .endif
0028B6  3               
0028B6  3  20 F5 33     	jsr initsc 		; set up first screen.
0028B9  3               
0028B9  3  A9 FC        	lda #<ssprit 		; default to spare sprite in table.
0028BB  3  85 68        	sta z80_x
0028BD  3  A9 37        	lda #>ssprit
0028BF  3  85 69        	sta z80_i
0028C1  3               evini:
0028C1  3  20 9B 38     	jsr evnt13 		; initialisation.
0028C4  3               
0028C4  3               ; Two restarts.
0028C4  3               ; First restart - clear all sprites and initialise everything.
0028C4  3               
0028C4  3               rstrt:
0028C4  3  20 B8 29     	jsr rsevt 		; restart events.
0028C7  3  20 40 28     	jsr xspr 		; clear sprite table.
0028CA  3  20 61 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028CD  3  20 EA 35     	jsr ispr 		; initialise sprite table.
0028D0  3               
0028D0  3  4C DF 28     	jmp rstrt0
0028D3  3               
0028D3  3               ; Second restart - clear all but player, and don't initialise him.
0028D3  3               
0028D3  3               rstrtn:
0028D3  3  20 B8 29     	jsr rsevt		; restart events.
0028D6  3  20 8E 35     	jsr nspr 		; clear all non-player sprites.
0028D9  3  20 61 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028DC  3  20 27 36     	jsr kspr 		; initialise sprite table, no more players.
0028DF  3               
0028DF  3               ; Set up the player and/or enemy sprites.
0028DF  3               
0028DF  3               rstrt0:
0028DF  3  A9 00        	lda #0 			; zero in accumulator.
0028E1  3  85 rr        	sta nexlev 		; reset next level flag.
0028E3  3  85 rr        	sta restfl 		; reset restart flag.
0028E5  3  85 rr        	sta deadf 		; reset dead flag.
0028E7  3               
0028E7  3  20 2D 2D     	jsr droom 		; show screen layout.
0028EA  3               
0028EA  3               rpblc0:
0028EA  3               .if pflag
0028EA  3               	jsr inishr 		; initialise particle engine.
0028EA  3               .endif
0028EA  3               .if aflag
0028EA  3               	jsr rbloc		; draw blocks for this screen
0028EA  3               .endif
0028EA  3               .if oflag
0028EA  3               	jsr shwob		; draw objects.
0028EA  3               .endif
0028EA  3               
0028EA  3  A9 30        	lda #<sprtab 		; address of sprite table, even sprites.
0028EC  3  85 68        	sta z80_x
0028EE  3  A9 37        	lda #>sprtab
0028F0  3  85 69        	sta z80_i
0028F2  3  20 A5 31     	jsr dspr 		; display sprites.
0028F5  3               
0028F5  3  A9 41        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0028F7  3  85 68        	sta z80_x
0028F9  3  A9 37        	lda #>(sprtab+TABSIZ)
0028FB  3  85 69        	sta z80_i
0028FD  3  20 A5 31     	jsr dspr 		; display sprites.
002900  3               
002900  3               
002900  3               mloop:
002900  3  20 63 3D     	jsr vsync 		; synchronise with display.
002903  3  A9 30        	lda #<sprtab 		; address of sprite table, even sprites.
002905  3  85 68        	sta z80_x
002907  3  A9 37        	lda #>sprtab
002909  3  85 69        	sta z80_i
00290B  3  20 A5 31     	jsr dspr 		; display even sprites.
00290E  3               
00290E  3               ;	jsr plsnd 		; play sounds.
00290E  3               
00290E  3  20 8C 28     	jsr proshr
002911  3  A9 41        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002913  3  85 68        	sta z80_x
002915  3  A9 37        	lda #>(sprtab+TABSIZ)
002917  3  85 69        	sta z80_i
002919  3  20 A5 31     	jsr dspr 		; display odd sprites.
00291C  3               
00291C  3  A9 FC        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00291E  3  85 68        	sta z80_x
002920  3  A9 37        	lda #>(ssprit)
002922  3  85 69        	sta z80_i
002924  3               evlp1:
002924  3  20 35 38     	jsr evnt10 		; called once per main loop.
002927  3               
002927  3  20 23 31     	jsr pspr 		; process sprites.
00292A  3               
00292A  3               ; Main loop events.
00292A  3               
00292A  3  A9 FC        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00292C  3  85 68        	sta z80_x
00292E  3  A9 37        	lda #>ssprit
002930  3  85 69        	sta z80_i
002932  3               evlp2:
002932  3  20 96 38     	jsr evnt11 		; called once per main loop.
002935  3               bsortx:
002935  3  20 99 30     	jsr bsort 		; sort sprites.
002938  3               
002938  3  A5 rr        	lda nexlev		; finished level flag.
00293A  3  F0 03        	beq :+
00293C  3  4C 64 29     	jmp newlev		; is set, go to next level.
00293F  3               :
00293F  3  A5 rr        	lda gamwon		; finished game flag.
002941  3  F0 03        	beq :+
002943  3  4C 73 29     	jmp evwon		; is set, finish the game.
002946  3               :
002946  3  A5 rr        	lda restfl 		; finished level flag.
002948  3  C9 01        	cmp #1			; has it been set?
00294A  3  D0 03        	bne :+
00294C  3  4C C4 28     	jmp rstrt		; yes, go to next level.
00294F  3               :
00294F  3  C9 02        	cmp #2			; has it been set?
002951  3  D0 03        	bne :+
002953  3  4C D3 28     	jmp rstrtn		; yes, go to next level.
002956  3               :
002956  3  A5 rr        	lda deadf 		; dead flag.
002958  3  F0 03        	beq :+
00295A  3  4C 79 29     	jmp pdead		; yes, player dead.
00295D  3               :
00295D  3               ; back to start of main loop.
00295D  3               
00295D  3  E6 rr        	inc frmno
00295F  3  E6 rr        	inc clock
002961  3  4C 00 29     	jmp mloop		; switched to a jmp mloop during test mode.
002964  3               
002964  3               ;----------------------------------------------------------
002964  3               ; Read blocks from list and update screen accordingly.
002964  3               ;----------------------------------------------------------
002964  3               
002964  3               .if aflag
002964  3               rbloc:
002964  3               	lda #<eop		; reset temp blockpointer
002964  3               	sta pbbuf
002964  3               	lda #>eop
002964  3               	sta pbbuf+1
002964  3               
002964  3               rbloc2:
002964  3               	lda pbbuf			; check for last block
002964  3               	cmp pbptr
002964  3               	bne rbloc1
002964  3               	lda pbbuf+1
002964  3               	cmp pbptr+1
002964  3               	bne rbloc1
002964  3               	rts
002964  3               rbloc1:
002964  3               	ldy #0
002964  3               	lda (pbbuf),y		; check if block for this scno
002964  3               	cmp scno
002964  3               	bne rbloc0		; if not, skip
002964  3               	iny
002964  3               	lda (pbbuf),y		; get y
002964  3               	sta dispy
002964  3               	iny
002964  3               	lda (pbbuf),y		; get x
002964  3               	sta dispx
002964  3               	iny
002964  3               	lda (pbbuf),y		; get blocknr
002964  3               	jsr pattr2		; draw block
002964  3               rbloc0:
002964  3               	clc			; point to next block
002964  3               	lda pbbuf
002964  3               	adc #4
002964  3               	sta pbbuf
002964  3               	bcc rbloc2
002964  3               	inc pbbuf+1
002964  3               	jmp rbloc2
002964  3               .endif
002964  3               
002964  3               ;----------------------------------------------------------
002964  3               ; New level
002964  3               ;----------------------------------------------------------
002964  3               
002964  3               newlev:
002964  3  A5 rr        	lda scno 			; current screen.
002966  3  18           	clc
002967  3  69 01        	adc #1				; next screen.
002969  3  CD 59 39     	cmp numsc			; total number of screens.
00296C  3  B0 05        	bcs evwon			; yes, game finished.
00296E  3  85 rr        	sta scno			; set new level number.
002970  3  4C C4 28     	jmp rstrt			; restart, clearing all aliens.
002973  3               
002973  3               evwon:
002973  3  20 A0 38     	jsr evnt18		 	; game completed.
002976  3  4C 8D 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002979  3               
002979  3               ;----------------------------------------------------------
002979  3               ; Player dead.
002979  3               ;----------------------------------------------------------
002979  3               
002979  3               pdead:
002979  3  A9 00        	lda #0				; zeroise accumulator.
00297B  3  85 rr        	sta deadf			; reset dead flag.
00297D  3               evdie:
00297D  3  20 9E 38     	jsr evnt16 			; death subroutine.
002980  3  A5 rr        	lda numlif			; number of lives.
002982  3  F0 03        	beq :+
002984  3  4C C4 28     	jmp rstrt 			; restart game.
002987  3               :
002987  3               evfail:
002987  3  20 9F 38     	jsr evnt17 			; failure event.
00298A  3  4C 8D 28     	jmp game			; restart game
00298D  3               
00298D  3               ;----------------------------------------------------------
00298D  3               ; Tidy things up
00298D  3               ;----------------------------------------------------------
00298D  3               
00298D  3               tidyup:
00298D  3  A0 00        	ldy #0				; digits to check.
00298F  3               tidyu2:
00298F  3  B9 01 2B     	lda score,y 			; get score digit.
002992  3  CD 07 2B     	cmp hiscor 			; are we larger than high score digit?
002995  3  90 07        	bcc tidyu0			; high score is bigger.
002997  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002999  3  C8           	iny				; next digit of high score.
00299A  3  C0 06        	cpy #6
00299C  3  D0 F1        	bne tidyu2			; repeat for all digits
00299E  3               tidyu0:
00299E  3  A9 01        	lda #<score			; return pointing to score.
0029A0  3  85 62        	sta z80_c
0029A2  3  A9 2B        	lda #>score
0029A4  3  85 63        	sta z80_b
0029A6  3  60           	rts
0029A7  3               tidyu1:
0029A7  3  A0 05        	ldy #5
0029A9  3               tidyu3:
0029A9  3  B9 01 2B     	lda score,y			; score.
0029AC  3  99 07 2B     	sta hiscor,y			; high score.
0029AF  3  88           	dey
0029B0  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029B2  3               evnewh:
0029B2  3  20 A1 38     	jsr evnt19			; new high score event.
0029B5  3  4C 9E 29     	jmp tidyu0			; tidy up.
0029B8  3               
0029B8  3               ;--------------------------------------------------
0029B8  3               ; Restart event.
0029B8  3               ;--------------------------------------------------
0029B8  3               
0029B8  3               rsevt:
0029B8  3  A9 FC        	lda #<ssprit 			; default to spare element in table.
0029BA  3  85 68        	sta z80_x
0029BC  3  A9 37        	lda #>ssprit
0029BE  3  85 69        	sta z80_i
0029C0  3               evrs:
0029C0  3  4C 9C 38     	jmp evnt14	 		; call restart event.
0029C3  3               
0029C3  3               ;------------------------------------------------------------------
0029C3  3               ; Copy number passed in a to string position bc, right-justified.
0029C3  3               ;
0029C3  3               ; Input:
0029C3  3               ;  A  = number
0029C3  3               ;  BC = string address
0029C3  3               ;
0029C3  3               ; Output:
0029C3  3               ;  BC = string with number
0029C3  3               ;-----------------------------------------------------------------
0029C3  3               
0029C3  3               num2ch:
0029C3  3  85 65        	sta z80_d		; Save number
0029C5  3               
0029C5  3  A9 00        	lda #0
0029C7  3  85 rr        	sta flag
0029C9  3               numdg3:
0029C9  3  A2 64        	ldx #100		; hundreds column.
0029CB  3  86 64        	stx z80_e
0029CD  3  20 DD 29     	jsr numdg		; show digit.
0029D0  3               numdg2:
0029D0  3  A2 0A        	ldx #10			; tens column.
0029D2  3  86 64        	stx z80_e
0029D4  3  20 DD 29     	jsr numdg		; show digit.
0029D7  3               
0029D7  3  E6 rr        	inc flag
0029D9  3  A2 01        	ldx #1			; units column.
0029DB  3  86 64        	stx z80_e
0029DD  3               numdg:
0029DD  3  A9 30        	lda #48			; clear digit.
0029DF  3  85 61        	sta z80_a
0029E1  3               numdg1:
0029E1  3  A5 65        	lda z80_d
0029E3  3  C5 64        	cmp z80_e
0029E5  3  90 0E        	bcc numdg0		; nothing to show.
0029E7  3  38           	sec
0029E8  3  A5 65        	lda z80_d
0029EA  3  E5 64        	sbc z80_e		; subtract from column.
0029EC  3  85 65        	sta z80_d
0029EE  3  E6 61        	inc z80_a		; increment digit.
0029F0  3  E6 rr        	inc flag
0029F2  3  4C E1 29     	jmp numdg1		; repeat until column is zero.
0029F5  3               numdg0:
0029F5  3  A0 00        	ldy #0
0029F7  3  A5 61        	lda z80_a
0029F9  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0029FB  3  A5 rr        	lda flag
0029FD  3  F0 06        	beq :+
0029FF  3  E6 62        	inc z80_c		; next buffer position.
002A01  3  D0 02        	bne :+
002A03  3  E6 63        	inc z80_b
002A05  3               :
002A05  3  60           	rts
002A06  3               num2dd:
002A06  3  85 65        	sta z80_d		; Save number
002A08  3               
002A08  3  A9 01        	lda #1
002A0A  3  85 rr        	sta flag
002A0C  3               
002A0C  3  4C D0 29     	jmp numdg2
002A0F  3               num2td:
002A0F  3  85 65        	sta z80_d		; Save number
002A11  3               
002A11  3  A9 01        	lda #1
002A13  3  85 rr        	sta flag
002A15  3  4C C9 29     	jmp numdg3
002A18  3               
002A18  3               ;flag:	.byte 0
002A18  3               
002A18  3               ;---------------------------------------------------------
002A18  3               ; Reset score to "000000"
002A18  3               ;---------------------------------------------------------
002A18  3               
002A18  3               inisc:
002A18  3  A9 30        	lda #'0'
002A1A  3  A2 05        	ldx #5			; digits to initialise.
002A1C  3               inisc0:
002A1C  3  9D 01 2B     	sta score,x 		; write zero digit.
002A1F  3  CA           	dex			; next column.
002A20  3  10 FA        	bpl inisc0		; repeat for all digits.
002A22  3               
002A22  3  60           	rts
002A23  3               
002A23  3               ;-----------------------------------------------------
002A23  3               ; Multiply h by d and return in hl.
002A23  3               ;
002A23  3               ; Input:
002A23  3               ;  H = first number
002A23  3               ;  D = second number
002A23  3               ;
002A23  3               ; Output:
002A23  3               ;  HL = result H x D
002A23  3               ;-----------------------------------------------------
002A23  3               
002A23  3               imul:
002A23  3  A5 65        	lda z80_d		; HL = H * D
002A25  3  85 64        	sta z80_e
002A27  3  A5 67        	lda z80_h
002A29  3  85 62        	sta z80_c		; make c first multiplier.
002A2B  3               imul0:
002A2B  3  A9 00        	lda #0			; zeroise total.
002A2D  3  85 66        	sta z80_l
002A2F  3  85 67        	sta z80_h
002A31  3               
002A31  3  A5 67        	lda z80_h
002A33  3  85 65        	sta z80_d		; zeroise high byte.
002A35  3               
002A35  3  A9 08        	lda #8			; repeat 8 times.
002A37  3  85 63        	sta z80_b
002A39  3               imul1:
002A39  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A3B  3  90 0E        	bcc imul2		; wasn't set.
002A3D  3  18           	clc			; bit was set, so add de.
002A3E  3  A5 66        	lda z80_l
002A40  3  65 64        	adc z80_e
002A42  3  85 66        	sta z80_l
002A44  3  A5 67        	lda z80_h
002A46  3  65 65        	adc z80_d
002A48  3  85 67        	sta z80_h
002A4A  3  18           	clc 			; reset carry.
002A4B  3               imul2:
002A4B  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A4D  3  26 65        	rol z80_d
002A4F  3  C6 63        	dec z80_b
002A51  3  D0 E6        	bne imul1		; repeat 8 times.
002A53  3               
002A53  3  60           	rts
002A54  3               
002A54  3               ;-----------------------------------------------
002A54  3               ; Divide d by e and return in d, remainder in a.
002A54  3               ;
002A54  3               ; Input:
002A54  3               ;  D = first number
002A54  3               ;  E = second number
002A54  3               ;
002A54  3               ; Output:
002A54  3               ;  D = result D/E
002A54  3               ;  A = remainder
002A54  3               ;-----------------------------------------------
002A54  3               
002A54  3               idiv:
002A54  3  A9 00        	lda #0
002A56  3  A0 08        	ldy #8		 	; bits to shift.
002A58  3  06 65        	asl z80_d
002A5A  3               idiv0:
002A5A  3  2A           	rol a 			; multiply d by 2.
002A5B  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A5D  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A5F  3  E5 64        	sbc z80_e		; subtract it.
002A61  3               idiv1:
002A61  3  26 65        	rol z80_d		; rotate into d.
002A63  3  88           	dey
002A64  3  D0 F4        	bne idiv0		; repeat
002A66  3  60           	rts
002A67  3               
002A67  3               ;---------------------------------------------------
002A67  3               ; Play AY sound effect
002A67  3               ;---------------------------------------------------
002A67  3               
002A67  3               plsnd:
002A67  3  60           	rts
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Objects handling.
002A68  3               ; 32 bytes for image
002A68  3               ; 3 for room, y and x
002A68  3               ; 3 for starting room, y and x.
002A68  3               ; 254 = disabled.
002A68  3               ; 255 = object in player"s pockets.
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Show items present.
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               .if oflag
002A68  3               shwob:
002A68  3               	lda #<objdta 			; objects table.
002A68  3               	sta z80_l
002A68  3               	lda #>objdta
002A68  3               	sta z80_h
002A68  3               
002A68  3               	lda numob 			; number of objects in the game.
002A68  3               	sta sprcnt
002A68  3               shwob0:
002A68  3               	ldy #32 			; distance to room number.
002A68  3               	lda (z80_hl),y 			; same as an item?
002A68  3               	cmp scno 			; current location.
002A68  3               	bne :+
002A68  3               	jsr dobj 			; yes, display object.
002A68  3               :
002A68  3               	clc
002A68  3               	lda z80_l
002A68  3               	adc #38 			; distance to next item.
002A68  3               	sta z80_l
002A68  3               	lda z80_h
002A68  3               	adc #0
002A68  3               	sta z80_h	 		; point to it.
002A68  3               	dec sprcnt
002A68  3               	bne shwob0 			; repeat for others.
002A68  3               	rts
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Display object.
002A68  3               ; hl must point to object's start address.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  HL = object address
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               dobj:
002A68  3               	ldy #33
002A68  3               	lda (z80_hl),y 			; point to y.
002A68  3               	sta dispy
002A68  3               	iny
002A68  3               	lda (z80_hl),y 			; point to x.
002A68  3               	sta dispx
002A68  3               dobj1:
002A68  3               	jmp sprite 			; draw this sprite.
002A68  3               
002A68  3               ;--------------------------------------
002A68  3               ; Remove an object.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;--------------------------------------
002A68  3               
002A68  3               remob:
002A68  3               	cmp numob			; number of objects in game.
002A68  3               	bcc :+				; are we checking past the end?
002A68  3               	rts				; yes, can't get non-existent item.
002A68  3               :
002A68  3               	pha				; remember object.
002A68  3               	jsr getob			; pick it up if we haven't already got it.
002A68  3               	pla				; retrieve object number.
002A68  3               	jsr gotob			; get its address.
002A68  3               	lda #254
002A68  3               	ldy #32
002A68  3               	sta (z80_hl),y			; remove it.
002A68  3               	rts
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Pick up object number held in the accumulator.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               getob:
002A68  3               	cmp numob 		; number of objects in game.
002A68  3               	bcc :+			; are we checking past the end?
002A68  3               	rts			; yes, can't get non-existent item.
002A68  3               :
002A68  3               	jsr gotob 		; check if we already have it.
002A68  3               	cmp #255
002A68  3               	bne :+
002A68  3               	rts			; we already do.
002A68  3               :
002A68  3               	ldy #32
002A68  3               	lda (z80_hl),y		; is it on this screen?
002A68  3               	cmp scno 		; current screen.
002A68  3               	bne getob0		; not on screen, so nothing to delete.
002A68  3               
002A68  3               	lda #255
002A68  3               	sta (z80_hl),y		; pick it up.
002A68  3               	iny 			; point to y coord.
002A68  3               getob1:
002A68  3               	ldy #33
002A68  3               	lda (z80_hl),y		; y coord.
002A68  3               	sta dispy
002A68  3               	ldy #34
002A68  3               	lda (z80_hl),y 		; x coord.
002A68  3               	sta dispx
002A68  3               	jmp dobj1 		; delete object sprite.
002A68  3               getob0:
002A68  3               	lda #255
002A68  3               	sta (z80_hl),y 		; pick it up.
002A68  3               	rts
002A68  3               .endif
002A68  3               
002A68  3               ;-----------------------------------------------------------------
002A68  3               ; Got object check.
002A68  3               ; Call with object in accumulator, returns zero set if in pockets.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;-----------------------------------------------------------------
002A68  3               .if oflag .or mflag
002A68  3               gotob:
002A68  3               	cmp numob 		; number of objects in game.
002A68  3               	bcc :+ 			; are we checking past the end?
002A68  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A68  3               :
002A68  3               	jsr findob		; find the object.
002A68  3               gotob1:
002A68  3               	rts
002A68  3               
002A68  3               gotob0:
002A68  3               	lda #254 		; missing.
002A68  3               	jmp gotob1
002A68  3               
002A68  3               findob:
002A68  3               	pha			; save object number
002A68  3               	lda #<objdta 		; objects.
002A68  3               	sta z80_l
002A68  3               	lda #>objdta
002A68  3               	sta z80_h
002A68  3               	pla			; retreive object number
002A68  3               	beq fndob1 		; is it zero? yes, skip loop.
002A68  3               	tax 			; loop counter
002A68  3               fndob2:
002A68  3               	clc
002A68  3               	lda z80_l
002A68  3               	adc #38 		; size of each object.
002A68  3               	sta z80_l
002A68  3               	bcc :+
002A68  3               	inc z80_h
002A68  3               :
002A68  3               	dex 			; repeat until we find address.
002A68  3               	bne fndob2
002A68  3               fndob1:
002A68  3               	ldy #32			; distance to room it's in.
002A68  3               	lda (z80_hl),y		; fetch status.
002A68  3               	rts
002A68  3               .endif
002A68  3               
002A68  3               ;---------------------------------------------
002A68  3               ; Drop object number at (dispx, dispy).
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;---------------------------------------------
002A68  3               
002A68  3               .if oflag
002A68  3               drpob:
002A68  3               	cmp numob 		; are we checking past the end?
002A68  3               	bcc :+
002A68  3               	rts			; yes, can't drop non-existent item.
002A68  3               :
002A68  3               	jsr gotob		; make sure object is in inventory.
002A68  3               	cmp scno		; already on this screen?
002A68  3               	bne :+
002A68  3               	rts			; yes, nothing to do.
002A68  3               :
002A68  3               	ldy #32
002A68  3               	lda scno
002A68  3               	sta (z80_hl),y		; bring onto screen.
002A68  3               	lda dispy		; sprite y coordinate.
002A68  3               	iny
002A68  3               	sta (z80_hl),y		; point to object y.
002A68  3               	lda dispx 		; sprite x coordinate.
002A68  3               	iny
002A68  3               	sta (z80_hl),y 		; point to object x
002A68  3               	jmp dobj		; draw the object sprite.
002A68  3               
002A68  3               ;-----------------------------------------------
002A68  3               ; Seek objects at sprite position.
002A68  3               ;
002A68  3               ; Output:
002A68  3               ;  A = object number, if not found A=255
002A68  3               ;-----------------------------------------------
002A68  3               
002A68  3               skobj:
002A68  3               	lda #<objdta 		; pointer to objects.
002A68  3               	sta z80_l
002A68  3               	lda #>objdta
002A68  3               	sta z80_h
002A68  3               
002A68  3               	lda numob 		; number of objects in game.
002A68  3               	sta z80_b 		; set up the loop counter.
002A68  3               skobj0:
002A68  3               	lda scno		; current room number.
002A68  3               	ldy #32
002A68  3               	cmp (z80_hl),y		; is object in here?
002A68  3               	bne :+
002A68  3               	jsr skobj1		; yes, check coordinates.
002A68  3               :
002A68  3               	clc			; point to next object in table.
002A68  3               	lda z80_l
002A68  3               	adc #38			; size of each object.
002A68  3               	sta z80_l
002A68  3               	bcc :+
002A68  3               	inc z80_h
002A68  3               :
002A68  3               	dec z80_b
002A68  3               	bne skobj0		; repeat for all objects.
002A68  3               
002A68  3               	lda #255		; end of list and nothing found, return 255.
002A68  3               	rts
002A68  3               
002A68  3               skobj1:
002A68  3               	ldy #33			; point to y coordinate.
002A68  3               	lda (z80_hl),y		; point to y coordinate.
002A68  3               	sec
002A68  3               	ldy #8
002A68  3               	sbc (z80_ix),y 		; subtract sprite y.
002A68  3               	clc
002A68  3               	adc #15			; add sprite height minus one.
002A68  3               	cmp #31			; within range?
002A68  3               	bcs skobj2		; no, ignore object.
002A68  3               
002A68  3               	ldy #34			; point to x coordinate now.
002A68  3               	lda (z80_hl),y 		; get coordinate.
002A68  3               	sec
002A68  3               	ldy #9
002A68  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A68  3               	clc			; add sprite width minus one.
002A68  3               	adc #15
002A68  3               	cmp #31			; within range?
002A68  3               	bcs skobj2		; no, ignore object.
002A68  3               
002A68  3               	pla			; remove return address from stack.
002A68  3               	pla
002A68  3               
002A68  3               	lda numob 		; objects in game.
002A68  3               	sec
002A68  3               	sbc z80_b		; subtract loop counter.
002A68  3               skobj2:
002A68  3               	rts			; accumulator now points to object.
002A68  3               .endif
002A68  3               
002A68  3               ;---------------------------------------------------------------------
002A68  3               ; Spawn a new sprite.
002A68  3               ;---------------------------------------------------------------------
002A68  3               
002A68  3               .if gflag
002A68  3                 offset = 0
002A68  3               .else
002A68  3                 offset = 20
002A68  3               .endif
002A68  3               
002A68  3               spawn:
002A68  3  A9 30        	lda #<sprtab		; sprite table.
002A6A  3  85 66        	sta z80_l
002A6C  3  A9 37        	lda #>sprtab
002A6E  3  85 67        	sta z80_h
002A70  3               numsp1:
002A70  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A72  3  85 rr        	sta spcnt
002A74  3               spaw0:
002A74  3  A0 00        	ldy #0
002A76  3  B1 66        	lda (z80_hl),y		; get sprite type.
002A78  3  C9 FF        	cmp #255		; is it an unused slot?
002A7A  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002A7C  3               
002A7C  3  18           	clc 			; point to next sprite in table.
002A7D  3  A5 66        	lda z80_l
002A7F  3  69 11        	adc #TABSIZ		; size of each entry.
002A81  3  85 66        	sta z80_l
002A83  3  90 02        	bcc :+
002A85  3  E6 67        	inc z80_h
002A87  3               :
002A87  3  C6 rr        	dec spcnt		; one less iteration.
002A89  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002A8B  3               
002A8B  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002A8B  3               
002A8B  3               spaw1:
002A8B  3  A5 69        	lda z80_i		; address of original sprite.
002A8D  3  48           	pha
002A8E  3  A5 68        	lda z80_x
002A90  3  48           	pha
002A91  3               
002A91  3  A5 66        	lda z80_l		; store spawned sprite address.
002A93  3  85 rr        	sta spptr
002A95  3  A5 67        	lda z80_h
002A97  3  85 rr        	sta spptr+1
002A99  3               
002A99  3  A5 62        	lda z80_c
002A9B  3  A0 00        	ldy #0
002A9D  3  91 66        	sta (z80_hl),y 		; set the type.
002A9F  3  A0 05        	ldy #5
002AA1  3  91 66        	sta (z80_hl),y		; copy
002AA3  3               
002AA3  3  A5 63        	lda z80_b
002AA5  3  A0 01        	ldy #1
002AA7  3  91 66        	sta (z80_hl),y		; set the image.
002AA9  3  A0 06        	ldy #6
002AAB  3  91 66        	sta (z80_hl),y		; copy
002AAD  3               
002AAD  3  A9 00        	lda #0 			; frame zero.
002AAF  3  A0 02        	ldy #2
002AB1  3  91 66        	sta (z80_hl),y		; set frame.
002AB3  3  A0 07        	ldy #7
002AB5  3  91 66        	sta (z80_hl),y		; copy
002AB7  3               
002AB7  3  A0 08        	ldy #8
002AB9  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002ABB  3  A0 03        	ldy #3
002ABD  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002ABF  3  A0 08        	ldy #8
002AC1  3  91 66        	sta (z80_hl),y		; copy
002AC3  3               
002AC3  3  A0 09        	ldy #9
002AC5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AC7  3  A0 04        	ldy #4
002AC9  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002ACB  3  A0 09        	ldy #9
002ACD  3  91 66        	sta (z80_hl),y		; copy
002ACF  3               
002ACF  3  A0 0A        	ldy #10			; direction of original.
002AD1  3  B1 68        	lda (z80_ix),y
002AD3  3  91 66        	sta (z80_hl),y		; direction
002AD5  3               
002AD5  3  A9 00        	lda #0
002AD7  3  A0 0B        	ldy #11
002AD9  3  91 66        	sta (z80_hl),y		; reset parameter.
002ADB  3  C8           	iny
002ADC  3  91 66        	sta (z80_hl),y		; reset parameter.
002ADE  3  C8           	iny
002ADF  3  91 66        	sta (z80_hl),y		; reset parameter.
002AE1  3  C8           	iny
002AE2  3  91 66        	sta (z80_hl),y		; reset parameter.
002AE4  3               rtssp:
002AE4  3  A5 rr        	lda spptr		; address of new sprite.
002AE6  3  85 68        	sta z80_x
002AE8  3  A5 rr        	lda spptr+1
002AEA  3  85 69        	sta z80_i
002AEC  3               evis1:
002AEC  3  20 34 38     	jsr evnt09 		; call sprite initialisation event.
002AEF  3               
002AEF  3  A5 rr        	lda spptr 		; address of new sprite.
002AF1  3  85 68        	sta z80_x
002AF3  3  A5 rr        	lda spptr+1
002AF5  3  85 69        	sta z80_i
002AF7  3  20 A7 3D     	jsr sspria 		; display the new sprite.
002AFA  3               
002AFA  3  68           	pla			; address of original sprite.
002AFB  3  85 68        	sta z80_x
002AFD  3  68           	pla
002AFE  3  85 69        	sta z80_i
002B00  3               
002B00  3  60           	rts
002B01  3               
002B01  3               ;spcnt:	.byte 0
002B01  3               ;spptr:	.word 0			; spawned sprite pointer.
002B01  3               ;seed:	.byte 0			; seed for random numbers.
002B01  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B05  3  30 30        
002B07  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B0B  3  30 30        
002B0D  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B11  3  30 30        
002B13  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B15  3               
002B15  3               ;----------------------------------------------------
002B15  3               ; Check y-pos
002B15  3               ;----------------------------------------------------
002B15  3               
002B15  3               checkx:
002B15  3  A5 rr        	lda dispy		; y position.
002B17  3  C9 19        	cmp #ScrHeight			; off screen?
002B19  3  B0 01        	bcs :+
002B1B  3  60           	rts			; no, it's okay.
002B1C  3               :
002B1C  3  68           	pla			; remove return address from stack.
002B1D  3  85 66        	sta z80_l
002B1F  3  68           	pla
002B20  3  85 67        	sta z80_h
002B22  3  60           	rts
002B23  3               
002B23  3               ;-----------------------------------------------
002B23  3               ; Displays the current high score.
002B23  3               ;-----------------------------------------------
002B23  3               
002B23  3               dhisc:
002B23  3  A9 07        	lda #<hiscor 		; high score text.
002B25  3  8D 5A 2B     	sta dscor3+1
002B28  3  8D 7E 2B     	sta bscor3+1
002B2B  3  A9 2B        	lda #>hiscor
002B2D  3  8D 5B 2B     	sta dscor3+2
002B30  3  8D 7F 2B     	sta bscor3+2
002B33  3  4C 46 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B36  3               
002B36  3               ;------------------------------------------------------
002B36  3               ; Displays the current score.
002B36  3               ;------------------------------------------------------
002B36  3               
002B36  3               dscor:
002B36  3  A9 01        	lda #<score		; score text.
002B38  3  8D 5A 2B     	sta dscor3+1
002B3B  3  8D 7E 2B     	sta bscor3+1
002B3E  3  A9 2B        	lda #>score
002B40  3  8D 5B 2B     	sta dscor3+2
002B43  3  8D 7F 2B     	sta bscor3+2
002B46  3               dscor1:
002B46  3  8C 7A 2B     	sty tmpscr
002B49  3  20 77 30     	jsr preprt		; set up font and print position.
002B4C  3  20 15 2B     	jsr checkx		; make sure we're in a printable range.
002B4F  3               
002B4F  3               ;	lda #6			; digits to display.
002B4F  3               ;	sta z80_b
002B4F  3  A5 rr        	lda prtmod		; get print mode.
002B51  3  F0 03        	beq :+			; standard size text?
002B53  3  4C 7B 2B     	jmp bscor0		; no, show double-height.
002B56  3               :
002B56  3               dscor0:
002B56  3               ;	ldy #0
002B56  3               ;	lda (z80_hl),y 		; fetch character.
002B56  3  AC 7A 2B     	ldy tmpscr
002B59  3               dscor3:
002B59  3  B9 01 2B     	lda score,y
002B5C  3  20 93 2C     	jsr pchar 		; display character.
002B5F  3  E6 rr        	inc dispx		; move along x coordinate
002B61  3               
002B61  3               ;	inc z80_l		; next score column.
002B61  3               ;	bne :+
002B61  3               ;	inc z80_h
002B61  3               ;:
002B61  3  EE 7A 2B     	inc tmpscr
002B64  3  C6 63        	dec z80_b
002B66  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B68  3               dscor2:
002B68  3  AD 1F 38     	lda bcolour
002B6B  3  20 93 2C     	jsr pchar
002B6E  3  20 64 30     	jsr nexpos
002B71  3               
002B71  3  A5 rr        	lda dispx 		; set up display coordinates.
002B73  3  85 rr        	sta charx
002B75  3  A5 rr        	lda dispy
002B77  3  85 rr        	sta chary
002B79  3  60           	rts
002B7A  3               
002B7A  3  00           tmpscr:	.byte 0
002B7B  3               ;------------------------------------------------------
002B7B  3               ; Displays the current score in double-height characters.
002B7B  3               ;
002B7B  3               ; Input:
002B7B  3               ;  B  = digit number
002B7B  3               ;  HL = score string
002B7B  3               ;------------------------------------------------------
002B7B  3               
002B7B  3               bscor0:
002B7B  3               ;	ldy #0
002B7B  3               
002B7B  3               ;	lda (z80_hl),y 		; fetch character.
002B7B  3  A4 rr        	ldy tmp
002B7D  3               bscor3:
002B7D  3  B9 01 2B     	lda score,y
002B80  3  20 35 30     	jsr bchar 		; display big char.
002B83  3               
002B83  3               ;	inc z80_l 		; next score column.
002B83  3               ;	bne :+
002B83  3               ;	inc z80_h
002B83  3               ;:
002B83  3  E6 rr        	inc tmp
002B85  3  C6 63        	dec z80_b
002B87  3  F0 03        	beq :+
002B89  3  4C 7B 2B     	jmp bscor0 		; repeat for all digits.
002B8C  3               :
002B8C  3  4C 68 2B     	jmp dscor2 		; tidy up line and column variables.
002B8F  3               
002B8F  3               ;-----------------------------------------------------
002B8F  3               ; Adds number in the hl pair to the score.
002B8F  3               ;-----------------------------------------------------
002B8F  3               
002B8F  3               addsc:
002B8F  3  A9 02        	lda #<(score+1) 	; ten thousands column.
002B91  3  85 64        	sta z80_e
002B93  3  A9 2B        	lda #>(score+1)
002B95  3  85 65        	sta z80_d
002B97  3  A9 10        	lda #<10000		; amount to add each time.
002B99  3  85 62        	sta z80_c
002B9B  3  A9 27        	lda #>10000
002B9D  3  85 63        	sta z80_b
002B9F  3  20 E3 2B     	jsr incsc		; add to score.
002BA2  3               
002BA2  3  E6 64        	inc z80_e		; thousands column.
002BA4  3  D0 02        	bne :+
002BA6  3  E6 65        	inc z80_d
002BA8  3               :
002BA8  3  A9 E8        	lda #<1000		; amount to add each time.
002BAA  3  85 62        	sta z80_c
002BAC  3  A9 03        	lda #>1000
002BAE  3  85 63        	sta z80_b
002BB0  3  20 E3 2B     	jsr incsc 		; add to score.
002BB3  3               
002BB3  3  E6 64        	inc z80_e		; hundreds column.
002BB5  3  D0 02        	bne :+
002BB7  3  E6 65        	inc z80_d
002BB9  3               :
002BB9  3  A9 64        	lda #<100		; amount to add each time.
002BBB  3  85 62        	sta z80_c
002BBD  3  A9 00        	lda #>100
002BBF  3  85 63        	sta z80_b
002BC1  3  20 E3 2B     	jsr incsc		; add to score.
002BC4  3               
002BC4  3  E6 64        	inc z80_e 		; tens column.
002BC6  3  D0 02        	bne :+
002BC8  3  E6 65        	inc z80_d
002BCA  3               :
002BCA  3  A9 0A        	lda #<10		; amount to add each time.
002BCC  3  85 62        	sta z80_c
002BCE  3  A9 00        	lda #>10
002BD0  3  85 63        	sta z80_b
002BD2  3  20 E3 2B     	jsr incsc 		; add to score.
002BD5  3               
002BD5  3  E6 64        	inc z80_e		; units column.
002BD7  3  D0 02        	bne :+
002BD9  3  E6 65        	inc z80_d
002BDB  3               :
002BDB  3  A9 01        	lda #<1			; units.
002BDD  3  85 62        	sta z80_c
002BDF  3  A9 00        	lda #>1
002BE1  3  85 63        	sta z80_b
002BE3  3               incsc:
002BE3  3  A5 67        	lda z80_h		; store amount to add.
002BE5  3  48           	pha
002BE6  3  A5 66        	lda z80_l
002BE8  3  48           	pha
002BE9  3               
002BE9  3  38           	sec			; subtract from amount to add.
002BEA  3  A5 66        	lda z80_l
002BEC  3  E5 62        	sbc z80_c
002BEE  3  85 66        	sta z80_l
002BF0  3  A5 67        	lda z80_h
002BF2  3  E5 63        	sbc z80_b
002BF4  3  85 67        	sta z80_h
002BF6  3  90 14        	bcc incsc0		; too much, restore value.
002BF8  3               
002BF8  3  68           	pla			; delete the previous amount from the stack.
002BF9  3  68           	pla
002BFA  3               
002BFA  3  A5 65        	lda z80_d 		; store column position.
002BFC  3  48           	pha
002BFD  3  A5 64        	lda z80_e
002BFF  3  48           	pha
002C00  3  20 13 2C     	jsr incsc2		; do the increment.
002C03  3               
002C03  3  68           	pla			; restore column.
002C04  3  85 64        	sta z80_e
002C06  3  68           	pla
002C07  3  85 65        	sta z80_d
002C09  3  4C E3 2B     	jmp incsc		; repeat until all added.
002C0C  3               
002C0C  3               incsc0:
002C0C  3  68           	pla			; restore previous value.
002C0D  3  85 66        	sta z80_l
002C0F  3  68           	pla
002C10  3  85 67        	sta z80_h
002C12  3  60           	rts
002C13  3               incsc2:
002C13  3  A0 00        	ldy #0
002C15  3  B1 64        	lda (z80_de),y 		; get amount.
002C17  3  18           	clc
002C18  3  69 01        	adc #1			; add one to column.
002C1A  3  91 64        	sta (z80_de),y		; write new column total.
002C1C  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C1E  3  B0 01        	bcs :+
002C20  3  60           	rts			; no, carry on.
002C21  3               :
002C21  3  A9 30        	lda #'0'		; make it zero.
002C23  3  91 64        	sta (z80_de),y		; write new column total.
002C25  3  C6 64        	dec z80_e		; back one column.
002C27  3  D0 02        	bne :+
002C29  3  C6 65        	dec z80_d
002C2B  3               :
002C2B  3  4C 13 2C     	jmp incsc2
002C2E  3               
002C2E  3               ;------------------------------------
002C2E  3               ; Add bonus to score and reset bonus
002C2E  3               ;------------------------------------
002C2E  3               
002C2E  3               addbo:
002C2E  3  A2 05        	ldx #5			; last digit.
002C30  3  18           	clc
002C31  3               addbo0:
002C31  3  BD 01 2B     	lda score,x		; get score.
002C34  3  7D 0D 2B     	adc bonus,x		; add bonus.
002C37  3  38           	sec			; 0 to 18.
002C38  3  E9 30        	sbc #48
002C3A  3  48           	pha
002C3B  3  A9 30        	lda #'0'
002C3D  3  9D 0D 2B     	sta bonus,x
002C40  3  68           	pla
002C41  3  C9 3A        	cmp #58
002C43  3  90 03        	bcc addbo1
002C45  3  38           	sec
002C46  3  E9 0A        	sbc #10
002C48  3               addbo1:
002C48  3  9D 01 2B     	sta score,x		; zeroise bonus.
002C4B  3  CA           	dex			; next digit.
002C4C  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C4E  3  60           	rts
002C4F  3               
002C4F  3               ;------------------------------------
002C4F  3               ; Swap score and bonus.
002C4F  3               ;------------------------------------
002C4F  3               
002C4F  3               swpsb:
002C4F  3  A2 05        	ldx #5			; digits to add.
002C51  3               swpsb0:
002C51  3  BD 01 2B     	lda score,x 		; get score digits.
002C54  3  48           	pha			; save digit
002C55  3  BD 0D 2B     	lda bonus,x 		; get bonus digits.
002C58  3  9D 01 2B     	sta score,x		; switch score-bonus
002C5B  3  68           	pla
002C5C  3  9D 0D 2B     	sta bonus,x
002C5F  3  CA           	dex 			; repeat for all 6 digits.
002C60  3  10 EF        	bpl swpsb0
002C62  3  60           	rts
002C63  3               
002C63  3               ;----------------------------------------------------
002C63  3               ; Get print address.
002C63  3               ;----------------------------------------------------
002C63  3               
002C63  3               gprad:
002C63  3  A5 rr        	lda dispy
002C65  3  85 rr        	sta tmp
002C67  3  0A           	asl a
002C68  3  18           	clc
002C69  3  65 rr        	adc tmp
002C6B  3  A8           	tay
002C6C  3  B9 00 DC     	lda SCADTB_lb,y
002C6F  3  18           	clc
002C70  3  65 rr        	adc dispx
002C72  3  85 rr        	sta scraddr
002C74  3  B9 00 DD     	lda SCADTB_hb,y
002C77  3  69 00        	adc #0
002C79  3  85 rr        	sta scraddr+1
002C7B  3  60           	rts
002C7C  3               
002C7C  3               ;--------------------------------------------------------------
002C7C  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002C7C  3               ;
002C7C  3               ; Output:
002C7C  3               ;  bufaddr = MAP + dispy*40 + dispx
002C7C  3               ;--------------------------------------------------------------
002C7C  3               
002C7C  3               pradd:
002C7C  3  A5 rr        	lda dispy 		; y coordinate.
002C7E  3  0A           	asl a
002C7F  3  18           	clc
002C80  3  65 rr        	adc dispy
002C82  3  AA           	tax
002C83  3               
002C83  3  18           	clc
002C84  3  BD 00 DC     	lda SCADTB_lb,x
002C87  3  65 rr        	adc dispx
002C89  3  85 rr        	sta bufaddr
002C8B  3               
002C8B  3  BD 00 DD     	lda SCADTB_hb,x
002C8E  3  69 D4        	adc #(>MAP->ScreenAddr)
002C90  3  85 rr        	sta bufaddr+1
002C92  3  60           	rts
002C93  3               
002C93  3               ;----------------------------------------------------
002C93  3               ; Display character in A at dispx,dispy.
002C93  3               ;
002C93  3               ; Input:
002C93  3               ;  A 	   = character to print
002C93  3               ;----------------------------------------------------
002C93  3               
002C93  3               pchar:
002C93  3  48           	pha
002C94  3  20 63 2C     	jsr gprad		; get screen address.
002C97  3               .if gflag
002C97  3               	and andeor
002C97  3               	eor andeor+1
002C97  3               .endif
002C97  3               .if iflag
002C97  3               	eor #$ff
002C97  3               .endif
002C97  3  68           	pla
002C98  3  A0 00        	ldy #0
002C9A  3  91 rr        	sta (scraddr),y 	; copy to screen.
002C9C  3  60           	rts
002C9D  3               
002C9D  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002CA1  3  60 40 20 00  
002CA5  3               
002CA5  3               ;----------------------------------------------
002CA5  3               
002CA5  3               ; Print attributes, properties and pixels.
002CA5  3               ;
002CA5  3               ; Input:
002CA5  3               ;  A	= tile number
002CA5  3               ;----------------------------------------------
002CA5  3               
002CA5  3               pbpattr:			; entry PUTBLOCK command
002CA5  3  A4 rr        	ldy charx
002CA7  3  84 rr        	sty dispx
002CA9  3  A4 rr        	ldy chary
002CAB  3  84 rr        	sty dispy
002CAD  3               pattr:
002CAD  3               .if aflag
002CAD  3               	pha
002CAD  3               	jsr wbloc		; save blockinfo
002CAD  3               	pla
002CAD  3               .endif
002CAD  3               
002CAD  3               pattr2:
002CAD  3  85 63        	sta z80_b		; store cell in b register for now.
002CAF  3  AA           	tax
002CB0  3  BD D4 38     	lda bprop,x 		; block properties.
002CB3  3  85 62        	sta z80_c
002CB5  3  C9 08        	cmp #COLECT
002CB7  3  D0 05        	bne :+
002CB9  3  A5 63        	lda z80_b
002CBB  3  8D CC 2C     	sta colpatt
002CBE  3               :
002CBE  3  20 7C 2C     	jsr pradd 		; get property buffer address.
002CC1  3  A5 62        	lda z80_c
002CC3  3  A0 00        	ldy #0
002CC5  3  91 rr        	sta (bufaddr),y 	; write property.
002CC7  3  A5 63        	lda z80_b 		; restore cell.
002CC9  3  4C CD 2C     	jmp panp
002CCC  3               ; Print attributes, no properties.
002CCC  3               
002CCC  3  00           colpatt:	.byte 0
002CCD  3               
002CCD  3               panp:
002CCD  3  85 64        	sta z80_e		; displacement in e.
002CCF  3  A9 00        	lda #0
002CD1  3  85 65        	sta z80_d		; no high byte.
002CD3  3  06 64        	asl z80_e  		; multiply char by 8.
002CD5  3  26 65        	rol z80_d
002CD7  3  18           	clc
002CD8  3  A5 64        	lda z80_e
002CDA  3  69 D2        	adc #<chgfx 		; address of graphics.
002CDC  3  85 rr        	sta tileaddr
002CDE  3  A5 65        	lda z80_d
002CE0  3  69 38        	adc #>chgfx
002CE2  3  85 rr        	sta tileaddr+1
002CE4  3  20 63 2C     	jsr gprad 		; get screen address.
002CE7  3               panp0:
002CE7  3  A0 00        	ldy #0
002CE9  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002CEB  3               .if iflag
002CEB  3               	eor #$ff		; Invert
002CEB  3               .endif
002CEB  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CED  3  E6 rr        	inc dispx 		; move along one.
002CEF  3  E6 rr        	inc charx
002CF1  3  60           	rts
002CF2  3               
002CF2  3               ;----------------------------------------------
002CF2  3               ; Write block
002CF2  3               ;----------------------------------------------
002CF2  3               
002CF2  3               .if aflag
002CF2  3               wbloc:
002CF2  3               	ldy #3
002CF2  3               	sta (pbptr),y		; store block number
002CF2  3               	dey
002CF2  3               	lda dispx
002CF2  3               	sta (pbptr),y		; write x position of block.
002CF2  3               	dey
002CF2  3               	lda dispy
002CF2  3               	sta (pbptr),y		; write y position of block.
002CF2  3               	dey
002CF2  3               	lda scno
002CF2  3               	sta (pbptr),y		; write screen.
002CF2  3               	clc			; point to next free location
002CF2  3               	lda pbptr
002CF2  3               	adc #4
002CF2  3               	sta pbptr
002CF2  3               	bcc :+
002CF2  3               	inc pbptr+1
002CF2  3               :
002CF2  3               	rts
002CF2  3               .endif
002CF2  3               
002CF2  3               ;----------------------------------------------
002CF2  3               ; Print character pixels, no more.
002CF2  3               ;
002CF2  3               ; Input:
002CF2  3               ;  A	= character to print
002CF2  3               ;----------------------------------------------
002CF2  3               
002CF2  3               pchr:
002CF2  3  20 93 2C     	jsr pchar 		; show character in accumulator.
002CF5  3  E6 rr        	inc dispx		; move along one.
002CF7  3  60           	rts
002CF8  3               
002CF8  3               ;----------------------------------------------------
002CF8  3               ; Shifter sprite routine for objects.
002CF8  3               ;----------------------------------------------------
002CF8  3               
002CF8  3               .if oflag
002CF8  3               sprit7:
002CF8  3               	lda z80_b
002CF8  3               	beq sprit0
002CF8  3               	sta z80_a
002CF8  3               sprit3:
002CF8  3               	lsr spr			; shift into position.
002CF8  3               	ror spr+1
002CF8  3               	ror spr+2
002CF8  3               	dec z80_a		; one less iteration.
002CF8  3               	bne sprit3
002CF8  3               sprit0:
002CF8  3               	rts 			; now apply to screen.
002CF8  3               
002CF8  3               ;----------------------------------------------------
002CF8  3               ; Draw sprite
002CF8  3               ;----------------------------------------------------
002CF8  3               
002CF8  3               sprite:
002CF8  3               	stx xtmp		; Save X-reg
002CF8  3               	jsr scadd 		; get screen address in scraddr.
002CF8  3               
002CF8  3               	lda dispx 		; x position.
002CF8  3               	and #7 			; position straddling cells.
002CF8  3               	sta z80_b		; store in b register.
002CF8  3               
002CF8  3               	lda z80_l		; store sprite graphic address.
002CF8  3               	sta sprit1+1
002CF8  3               	sta sprit2+1
002CF8  3               	lda z80_h
002CF8  3               	sta sprit1+2
002CF8  3               	sta sprit2+2
002CF8  3               
002CF8  3               	ldx #0			; pixel height.
002CF8  3               	ldy #0
002CF8  3               sprit1:
002CF8  3               	lda objdta,x		; fetch first byte.
002CF8  3               	sta spr
002CF8  3               	inx
002CF8  3               sprit2:
002CF8  3               	lda objdta,x
002CF8  3               	sta spr+1
002CF8  3               
002CF8  3               	lda #0
002CF8  3               	sta spr+2
002CF8  3               	jsr sprit7		; shift sprite
002CF8  3               
002CF8  3               	dex
002CF8  3               	lda spr			; fetch graphic.
002CF8  3               	ldy spritetab,x
002CF8  3               	eor (scraddr),y		; merge with screen image.
002CF8  3               	sta (scraddr),y		; write to screen.
002CF8  3               	inx			; next screen byte.
002CF8  3               
002CF8  3               	lda spr+1		; fetch graphic.
002CF8  3               	ldy spritetab,x
002CF8  3               	eor (scraddr),y		; merge with screen image.
002CF8  3               	sta (scraddr),y		; write to screen.
002CF8  3               	iny
002CF8  3               
002CF8  3               	lda spr+2		; fetch graphic.
002CF8  3               	eor (scraddr),y		; merge with screen image.
002CF8  3               	sta (scraddr),y		; write to screen.
002CF8  3               
002CF8  3               	inx			; next source byte.
002CF8  3               	cpx #16
002CF8  3               	bne :+
002CF8  3               	inc scraddr+1
002CF8  3               :
002CF8  3               	cpx #32
002CF8  3               	bne sprit1		; repeat
002CF8  3               
002CF8  3               	ldx xtmp		; retreive X-reg
002CF8  3               	rts
002CF8  3               
002CF8  3               spritetab:
002CF8  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002CF8  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002CF8  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002CF8  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002CF8  3               
002CF8  3               spr:	.byte 0,0,0
002CF8  3               
002CF8  3               ;xtmp:	.byte 0
002CF8  3               .endif
002CF8  3               
002CF8  3               ;-----------------------------------------------------------
002CF8  3               ; Get room address.
002CF8  3               ;-----------------------------------------------------------
002CF8  3               
002CF8  3               groom:
002CF8  3  A6 rr        	ldx scno 		; screen number.
002CFA  3  A0 00        	ldy #0
002CFC  3               groomx:
002CFC  3  A9 51        	lda #<scdat 		; pointer to screens.
002CFE  3  85 66        	sta z80_l
002D00  3  A9 39        	lda #>scdat
002D02  3  85 67        	sta z80_h
002D04  3               groom1:
002D04  3  E0 00        	cpx #0			; is it the first one?
002D06  3  F0 15        	beq groom0 		; no more screens to skip.
002D08  3               
002D08  3  18           	clc
002D09  3  A5 66        	lda z80_l
002D0B  3  79 51 39     	adc scdat,y 		; low byte of screen size.
002D0E  3  85 66        	sta z80_l
002D10  3  C8           	iny			; point to high byte.
002D11  3  A5 67        	lda z80_h
002D13  3  79 51 39     	adc scdat,y 		; high byte of screen size.
002D16  3  85 67        	sta z80_h
002D18  3  C8           	iny			; next address.
002D19  3               
002D19  3  CA           	dex 			; one less iteration.
002D1A  3  4C 04 2D     	jmp groom1 		; loop until we reach the end.
002D1D  3               groom0:
002D1D  3  AD 59 39     	lda numsc 		; add displacement.
002D20  3  0A           	asl a
002D21  3  18           	clc			; add double displacement to address.
002D22  3  65 66        	adc z80_l
002D24  3  85 66        	sta z80_l
002D26  3  A5 67        	lda z80_h
002D28  3  69 00        	adc #0
002D2A  3  85 67        	sta z80_h
002D2C  3  60           	rts
002D2D  3               
002D2D  3               ;-----------------------------------------------------------
002D2D  3               ; Draw present room.
002D2D  3               ;-----------------------------------------------------------
002D2D  3               
002D2D  3               droom:
002D2D  3  AD 1F 28     	lda wintop 		; window top.
002D30  3  85 rr        	sta dispy		; set cursor y position.
002D32  3               droom2:
002D32  3  20 F8 2C     	jsr groom 		; get address of current room.
002D35  3  A9 00        	lda #0	 		; zero in accumulator.
002D37  3  85 rr        	sta comcnt 		; reset compression counter.
002D39  3  AD 21 28     	lda winhgt 		; height of window.
002D3C  3  85 rr        	sta rrow		; set row counter
002D3E  3               droom0:
002D3E  3  AD 20 28     	lda winlft 		; window left edge.
002D41  3  85 rr        	sta dispx 		; set cursor x position.
002D43  3  AD 22 28     	lda winwid 		; width of window.
002D46  3  85 rr        	sta rcol		; set column counter
002D48  3               droom1:
002D48  3  20 59 2D     	jsr flbyt 		; decompress next byte on the fly.
002D4B  3  20 AD 2C     	jsr pattr2 		; show attributes and block.
002D4E  3  C6 rr        	dec rcol		; one less column.
002D50  3  D0 F6        	bne droom1 		; repeat for entire line.
002D52  3  E6 rr        	inc dispy		; move down one line.
002D54  3  C6 rr        	dec rrow 		; one less row.
002D56  3  D0 E6        	bne droom0 		; repeat for all rows.
002D58  3  60           	rts
002D59  3               
002D59  3               ;rcol:	.byte 0
002D59  3               ;rrow:	.byte 0
002D59  3               
002D59  3               ;----------------------------------------------
002D59  3               ; Decompress bytes on-the-fly.
002D59  3               ;----------------------------------------------
002D59  3               
002D59  3               flbyt:
002D59  3  A5 rr        	lda comcnt 		; compression counter.
002D5B  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D5D  3               
002D5D  3  A0 00        	ldy #0
002D5F  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D61  3  E6 66        	inc z80_l 		; point to next cell.
002D63  3  D0 02        	bne :+
002D65  3  E6 67        	inc z80_h
002D67  3               :
002D67  3  C9 FF        	cmp #255 		; is this byte a control code?
002D69  3  F0 01        	beq :+
002D6B  3  60           	rts 			; no, this byte is uncompressed.
002D6C  3               :
002D6C  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002D6E  3  85 rr        	sta combyt 		; set up the type.
002D70  3  E6 66        	inc z80_l 		; point to quantity.
002D72  3  D0 02        	bne :+
002D74  3  E6 67        	inc z80_h
002D76  3               :
002D76  3  B1 66        	lda (z80_hl),y 		; get quantity.
002D78  3  E6 66        	inc z80_l 		; point to next byte.
002D7A  3  D0 02        	bne :+
002D7C  3  E6 67        	inc z80_h
002D7E  3               :
002D7E  3               flbyt1:
002D7E  3  85 rr        	sta comcnt 		; store new quantity.
002D80  3  C6 rr        	dec comcnt		; one less.
002D82  3  A5 rr        	lda combyt 		; byte to expand.
002D84  3  60           	rts
002D85  3               
002D85  3               ;combyt:	.byte 0			; byte type compressed.
002D85  3               ;comcnt:	.byte 0			; compression counter.
002D85  3               
002D85  3               ;------------------------------------------
002D85  3               ; Ladder down check.
002D85  3               ;
002D85  3               ; Input:
002D85  3               ;  IX = sprite pointer
002D85  3               ;------------------------------------------
002D85  3               
002D85  3               .if lflag
002D85  3               laddd:
002D85  3               	ldy #9
002D85  3               	lda (z80_ix),y		; x coordinate.
002D85  3               	sta dispx
002D85  3               
002D85  3               	ldy #8
002D85  3               	lda (z80_ix),y		; y coordinate.
002D85  3               	and #254		; make it even.
002D85  3               	sta (z80_ix),y 		; reset it.
002D85  3               	clc 			; look down 16 pixels.
002D85  3               numsp5:
002D85  3               	adc #SPR_HGT
002D85  3               	sta dispy		; coords in dispx,dispy.
002D85  3               	jmp laddv
002D85  3               
002D85  3               ;------------------------------------------
002D85  3               ; Ladder up check.
002D85  3               ;
002D85  3               ; Input:
002D85  3               ;  IX = sprite pointer
002D85  3               ;
002D85  3               ; Output:
002D85  3               ;  A  = 0 is ok, A <>0 is not ok
002D85  3               ;------------------------------------------
002D85  3               
002D85  3               laddu:
002D85  3               	ldy #9
002D85  3               	lda (z80_ix),y		; x coordinate.
002D85  3               	sta dispx
002D85  3               
002D85  3               	ldy #8
002D85  3               	lda (z80_ix),y		; y coordinate.
002D85  3               	and #254 		; make it even.
002D85  3               	sta (z80_ix),y		; reset it.
002D85  3               	clc 			; look 2 pixels above feet.
002D85  3               numsp6:
002D85  3               	adc #SPR_HGT-2
002D85  3               	sta dispy		; coords in dispx,dispy.
002D85  3               laddv:
002D85  3               	jsr tstbl 		; get map address.
002D85  3               	jsr ldchk 		; standard ladder check.
002D85  3               	beq :+
002D85  3               	rts 			; no way through.
002D85  3               :
002D85  3               	inc bufaddr 		; look right one cell.
002D85  3               	bne :+
002D85  3               	inc bufaddr+1
002D85  3               :
002D85  3               	jsr ldchk 		; do the check.
002D85  3               	beq :+
002D85  3               	rts 			; impassable.
002D85  3               :
002D85  3               	lda dispx 		; y coordinate.
002D85  3               	and #7 			; position straddling block cells.
002D85  3               	bne :+
002D85  3               	rts 			; no more checks needed.
002D85  3               :
002D85  3               	inc bufaddr 		; look to third cell.
002D85  3               	bne :+
002D85  3               	inc bufaddr+1
002D85  3               :
002D85  3               	jsr ldchk 		; do the check.
002D85  3               	rts  			; return with zero flag set accordingly.
002D85  3               .endif
002D85  3               
002D85  3               ;---------------------------------------------------------
002D85  3               ; Can go up check.
002D85  3               ;
002D85  3               ; Input:
002D85  3               ;  IX = sprite pointer
002D85  3               ;
002D85  3               ; Output:
002D85  3               ;  A  = 0 is ok, A <>0 is not ok
002D85  3               ;---------------------------------------------------------
002D85  3               
002D85  3               cangu:
002D85  3  A0 09        	ldy #9
002D87  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D89  3  85 rr        	sta dispx
002D8B  3  A0 08        	ldy #8
002D8D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002D8F  3  38           	sec
002D90  3  E9 01        	sbc #1
002D92  3  85 rr        	sta dispy		; coords in dispx,dispy.
002D94  3  20 04 2F     	jsr tstbl 		; get map address.
002D97  3  20 68 2E     	jsr lrchk 		; standard left/right check.
002D9A  3  F0 01        	beq :+
002D9C  3  60           	rts			; no way through.
002D9D  3               :
002D9D  3  E6 rr        	inc bufaddr		; look right one cell.
002D9F  3  D0 02        	bne :+
002DA1  3  E6 rr        	inc bufaddr+1
002DA3  3               :
002DA3  3  20 68 2E     	jsr lrchk 		; do the check.
002DA6  3  F0 01        	beq :+
002DA8  3  60           	rts			; impassable.
002DA9  3               :
002DA9  3  E6 rr        	inc bufaddr		; look right one cell.
002DAB  3  D0 02        	bne :+
002DAD  3  E6 rr        	inc bufaddr+1
002DAF  3               :
002DAF  3  20 68 2E     	jsr lrchk 		; do the check.
002DB2  3  F0 01        	beq :+
002DB4  3  60           	rts			; impassable.
002DB5  3               :
002DB5  3  E6 rr        	inc bufaddr		; look right one cell.
002DB7  3  D0 02        	bne :+
002DB9  3  E6 rr        	inc bufaddr+1
002DBB  3               :
002DBB  3  20 68 2E     	jsr lrchk 		; do the check.
002DBE  3  F0 01        	beq :+
002DC0  3  60           	rts			; impassable.
002DC1  3               :
002DC1  3  A5 rr        	lda dispx		; x coordinate.
002DC3  3  29 01        	and #1			; position straddling block cells.
002DC5  3  D0 01        	bne :+
002DC7  3  60           	rts			; no more checks needed.
002DC8  3               :
002DC8  3  E6 rr        	inc bufaddr		; look to third cell.
002DCA  3  D0 02        	bne :+
002DCC  3  E6 rr        	inc bufaddr+1
002DCE  3               :
002DCE  3  20 68 2E     	jsr lrchk		; do the check.
002DD1  3  60           	rts 			; return with zero flag set accordingly.
002DD2  3               
002DD2  3               ;---------------------------------------------------------
002DD2  3               ; Can go down check.
002DD2  3               ;
002DD2  3               ; Input:
002DD2  3               ;  IX = sprite pointer
002DD2  3               ;
002DD2  3               ; Output:
002DD2  3               ;  A  = 0 is ok, A <>0 is not ok
002DD2  3               ;---------------------------------------------------------
002DD2  3               
002DD2  3               cangd:
002DD2  3  A0 09        	ldy #9
002DD4  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002DD6  3  85 rr        	sta dispx
002DD8  3  A0 08        	ldy #8
002DDA  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DDC  3  18           	clc
002DDD  3               numsp3:
002DDD  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002DDF  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DE1  3  20 04 2F     	jsr tstbl 		; get map address.
002DE4  3  20 7D 2E     	jsr plchk 		; block, platform check.
002DE7  3  F0 01        	beq :+
002DE9  3  60           	rts			; no way through.
002DEA  3               :
002DEA  3  E6 rr        	inc bufaddr		; look right one cell.
002DEC  3  D0 02        	bne :+
002DEE  3  E6 rr        	inc bufaddr+1
002DF0  3               :
002DF0  3  20 7D 2E     	jsr plchk		; block, platform check.
002DF3  3  F0 01        	beq :+
002DF5  3  60           	rts			; impassable.
002DF6  3               :
002DF6  3  E6 rr        	inc bufaddr		; look right one cell.
002DF8  3  D0 02        	bne :+
002DFA  3  E6 rr        	inc bufaddr+1
002DFC  3               :
002DFC  3  20 7D 2E     	jsr plchk		; block, platform check.
002DFF  3  F0 01        	beq :+
002E01  3  60           	rts			; impassable.
002E02  3               :
002E02  3  E6 rr        	inc bufaddr		; look right one cell.
002E04  3  D0 02        	bne :+
002E06  3  E6 rr        	inc bufaddr+1
002E08  3               :
002E08  3  20 7D 2E     	jsr plchk		; block, platform check.
002E0B  3  F0 01        	beq :+
002E0D  3  60           	rts			; impassable.
002E0E  3               :
002E0E  3  A5 rr        	lda dispx		; x coordinate.
002E10  3  29 01        	and #1			; position straddling block cells.
002E12  3  D0 01        	bne :+
002E14  3  60           	rts			; no more checks needed.
002E15  3               :
002E15  3  E6 rr        	inc bufaddr		; look to third cell.
002E17  3  D0 02        	bne :+
002E19  3  E6 rr        	inc bufaddr+1
002E1B  3               :
002E1B  3  20 7D 2E     	jsr plchk		; block, platform check.
002E1E  3  60           	rts			; return with zero flag set accordingly.
002E1F  3               
002E1F  3               ;---------------------------------------------------------
002E1F  3               ; Can go left check.
002E1F  3               ;
002E1F  3               ; Input:
002E1F  3               ;  IX = sprite pointer
002E1F  3               ;
002E1F  3               ; Output:
002E1F  3               ;  A  = 0 is ok, A <>0 is not ok
002E1F  3               ;---------------------------------------------------------
002E1F  3               
002E1F  3               cangl:
002E1F  3  A0 08        	ldy #8
002E21  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E23  3  85 rr        	sta dispy
002E25  3  A0 09        	ldy #9
002E27  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E29  3  38           	sec
002E2A  3  E9 01        	sbc #1			; look left 2 pixels.
002E2C  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E2E  3  4C 40 2E     	jmp cangh		; test if we can go there.
002E31  3               
002E31  3               ;---------------------------------------------------------
002E31  3               ; Can go right check.
002E31  3               ;
002E31  3               ; Input:
002E31  3               ;  IX = sprite pointer
002E31  3               ;
002E31  3               ; Output:
002E31  3               ;  A  = 0 is ok, A <>0 is not ok
002E31  3               ;---------------------------------------------------------
002E31  3               
002E31  3               cangr:
002E31  3  A0 08        	ldy #8
002E33  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E35  3  85 rr        	sta dispy
002E37  3  A0 09        	ldy #9
002E39  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E3B  3  18           	clc
002E3C  3  69 08        	adc #SPR_WID		; look right 8 pixels.
002E3E  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E40  3               cangh:
002E40  3               cangh2:
002E40  3  A9 04        	lda #(SPR_HGT/3+1)	; default rows to write.
002E42  3  85 63        	sta z80_b
002E44  3  A4 rr        	ldy dispy		; y position.
002E46  3  B9 4A DF     	lda V_SPR_PTR,y		; does x straddle cells?
002E49  3  D0 02        	bne cangh0		; yes, loop counter is good.
002E4B  3  C6 63        	dec z80_b		; one less row to write.
002E4D  3               cangh0:
002E4D  3  20 04 2F     	jsr tstbl		; get map address.
002E50  3               cangh1:
002E50  3  20 68 2E     	jsr lrchk		; standard left/right check.
002E53  3  F0 01        	beq :+
002E55  3  60           	rts			; no way through.
002E56  3               :
002E56  3  48           	pha
002E57  3  18           	clc
002E58  3  A5 rr        	lda bufaddr
002E5A  3  69 28        	adc #ScrWidth		; look down.
002E5C  3  85 rr        	sta bufaddr
002E5E  3  90 02        	bcc :+
002E60  3  E6 rr        	inc bufaddr+1
002E62  3               :
002E62  3  68           	pla
002E63  3               
002E63  3  C6 63        	dec z80_b
002E65  3  D0 E9        	bne cangh1
002E67  3  60           	rts
002E68  3               
002E68  3               ;-------------------------------------
002E68  3               ; Check left/right movement is okay.
002E68  3               ;
002E68  3               ; Input:
002E68  3               ;  bufaddr = MAP + x/8 + y/8*32
002E68  3               ;
002E68  3               ; Output:
002E68  3               ;  A  = 0 is ok, A <>0 is not ok
002E68  3               ;-------------------------------------
002E68  3               
002E68  3               lrchk:
002E68  3  A0 00        	ldy #0
002E6A  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002E6C  3  C9 02        	cmp #WALL 		; is it passable?
002E6E  3  F0 0A        	beq lrchkx		; no.
002E70  3               
002E70  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002E72  3  F0 06        	beq lrchkx		; not passable.
002E74  3  A9 00        	lda #0
002E76  3  60           	rts
002E77  3               
002E77  3               ;--------------------------------------------------------------
002E77  3               ; Called by mmenu
002E77  3               ;--------------------------------------------------------------
002E77  3               
002E77  3               always:
002E77  3  A9 FF        	lda #255		; report it as okay.
002E79  3  60           	rts
002E7A  3               
002E7A  3               lrchkx:
002E7A  3  A9 01        	lda #1 			; reset all bits.
002E7C  3  60           	rts
002E7D  3               
002E7D  3               
002E7D  3               ;--------------------------------------------------------------
002E7D  3               ; Check platform or solid item is not in way.
002E7D  3               ;
002E7D  3               ; Input:
002E7D  3               ;  bufaddr = MAP + x/2 + y/3*40
002E7D  3               ;
002E7D  3               ; Output:
002E7D  3               ;  A  = 0 is ok, A <>0 is not ok
002E7D  3               ;--------------------------------------------------------------
002E7D  3               
002E7D  3               plchk:
002E7D  3  A0 00        	ldy #0
002E7F  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002E81  3  C9 02        	cmp #WALL 		; is it passable?
002E83  3  F0 F5        	beq lrchkx		; no.
002E85  3               .if pflag .or dflag
002E85  3               	cmp #FODDER		; fodder has to be dug.
002E85  3               	beq lrchkx		; not passable.
002E85  3               .endif
002E85  3  C9 01        	cmp #PLATFM		; platform is solid.
002E87  3  F0 03        	beq plchkx		; not passable.
002E89  3               .if lflag
002E89  3               	cmp #LADDER		; is it a ladder?
002E89  3               	beq lrchkx		; on ladder, deny movement.
002E89  3               .endif
002E89  3               plchk0:
002E89  3  A9 00        	lda #0			; report as ok
002E8B  3  60           	rts
002E8C  3               plchkx:
002E8C  3  A5 rr        	lda dispy		; y coordinate.
002E8E  3  29 03        	and #3			; position straddling blocks.
002E90  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002E92  3  4C 89 2E     	jmp plchk0
002E95  3               
002E95  3               ;--------------------------------------------------------------
002E95  3               ; Check ladder is available.
002E95  3               ;
002E95  3               ; Input:
002E95  3               ;  bufaddr = MAP + x/8 + y/8*32
002E95  3               ;
002E95  3               ; Output:
002E95  3               ;  A  = 0 is ok, A <>0 is not ok
002E95  3               ;--------------------------------------------------------------
002E95  3               
002E95  3               .if lflag
002E95  3               ldchk:
002E95  3               	ldy #0
002E95  3               	lda (bufaddr),y 	; fetch cell.
002E95  3               	cmp #LADDER 		; is it a ladder?
002E95  3               	beq :+
002E95  3               	lda #1
002E95  3               	rts  			; return with zero flag set accordingly.
002E95  3               :
002E95  3               	lda #0
002E95  3               	rts
002E95  3               .endif
002E95  3               
002E95  3               ;--------------------------------------------------------------
002E95  3               ; Get collectables.
002E95  3               ;--------------------------------------------------------------
002E95  3               
002E95  3               .if cflag
002E95  3               getcol:
002E95  3                       lda #COLECT             ; collectable blocks.
002E95  3                       sta z80_b
002E95  3                       jsr tded                ; test for collectable blocks.
002E95  3                       cmp z80_b               ; did we find one?
002E95  3                       beq :+
002E95  3                       rts                     ; none were found, job done.
002E95  3               :
002E95  3                       jsr gtblk               ; get block.
002E95  3                       jsr evnt20              ; collected block event.
002E95  3                       jmp getcol              ; repeat until none left.
002E95  3               
002E95  3               ; Get collectable block.
002E95  3               
002E95  3               gtblk:
002E95  3               	ldy #0
002E95  3               	lda (bufaddr),y
002E95  3               	sta colpatt		; save collectable block nr
002E95  3               
002E95  3                       lda #0
002E95  3                       sta (bufaddr),y		; make it empty now in MAP.
002E95  3               
002E95  3               	lda bufaddr		; calculate screenaddr
002E95  3               	sta scraddr
002E95  3               	sec
002E95  3               	lda bufaddr+1
002E95  3               	sbc #>(MAP-ScreenAddr)	;$d4
002E95  3               	sta scraddr+1
002E95  3               
002E95  3               	ldy #0			; erase block on screen
002E95  3               	lda (scraddr),y
002E95  3               	eor colpatt
002E95  3               	sta (scraddr),y
002E95  3               
002E95  3               	rts
002E95  3               .endif
002E95  3               
002E95  3               ;--------------------------------------------------------------
002E95  3               ; Touched deadly block check.
002E95  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002E95  3               ;
002E95  3               ; Input:
002E95  3               ;  IX = sprite address
002E95  3               ;
002E95  3               ; Output:
002E95  3               ;  A  = 0 is ok, A=5 is not ok
002E95  3               ;--------------------------------------------------------------
002E95  3               
002E95  3               ; Calculate map address from dispx,dispy
002E95  3               
002E95  3               tded:
002E95  3  A0 08        	ldy #8
002E97  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E99  3  85 rr        	sta dispy
002E9B  3  C8           	iny
002E9C  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E9E  3  85 rr        	sta dispx		; coords in dispx,dispy.
002EA0  3  20 04 2F     	jsr tstbl		; get map address in bufaddr.
002EA3  3               
002EA3  3               ; Set variables
002EA3  3               
002EA3  3  A9 00        	lda #0
002EA5  3  85 62        	sta z80_c		; reset x-stradding skip flag
002EA7  3               
002EA7  3  A9 04        	lda #4			; Set nr of sprite columns
002EA9  3  85 rr        	sta rcol
002EAB  3  A5 rr        	lda dispx
002EAD  3  29 01        	and #1
002EAF  3  D0 04        	bne :+
002EB1  3  C6 rr        	dec rcol
002EB3  3  E6 62        	inc z80_c		; set x-stradding skip flag
002EB5  3               :
002EB5  3  A5 rr        	lda rcol
002EB7  3  85 64        	sta z80_e
002EB9  3               
002EB9  3  A9 03        	lda #3			; Set nr of sprite rows
002EBB  3  85 rr        	sta rrow
002EBD  3  A4 rr        	ldy dispy
002EBF  3  B9 4A DF     	lda V_SPR_PTR,y
002EC2  3  D0 02        	bne :+
002EC4  3  C6 rr        	dec rrow
002EC6  3               :
002EC6  3  A2 00        	ldx #0
002EC8  3               vspr_loop:
002EC8  3  A5 64        	lda z80_e
002ECA  3  85 rr        	sta rcol
002ECC  3               hspr_loop:
002ECC  3  BC F0 2E     	ldy spr_ptr,x
002ECF  3  B1 rr        	lda (bufaddr),y
002ED1  3  C5 63        	cmp z80_b
002ED3  3  F0 0E        	beq end_sprloop
002ED5  3  E8           	inx
002ED6  3  C6 rr        	dec rcol
002ED8  3  10 F2        	bpl hspr_loop
002EDA  3               ;	inx
002EDA  3  A4 62        	ldy z80_c		; Test x-stradding skip flag
002EDC  3  F0 01        	beq :+			; If reset, no skipping
002EDE  3  E8           	inx			; If set, skip 1 byte
002EDF  3               :
002EDF  3  C6 rr        	dec rrow
002EE1  3  10 E5        	bpl vspr_loop
002EE3  3               end_sprloop:
002EE3  3  48           	pha
002EE4  3  18           	clc
002EE5  3  98           	tya
002EE6  3  65 rr        	adc bufaddr
002EE8  3  85 rr        	sta bufaddr
002EEA  3  90 02        	bcc :+
002EEC  3  E6 rr        	inc bufaddr+1
002EEE  3               :
002EEE  3  68           	pla
002EEF  3  60           	rts
002EF0  3               
002EF0  3               spr_ptr:
002EF0  3  00 01 02 03  	.byte   0,  1,  2,  3,  4
002EF4  3  04           
002EF5  3  28 29 2A 2B  	.byte  40, 41, 42, 43, 44
002EF9  3  2C           
002EFA  3  50 51 52 53  	.byte  80, 81, 82, 83, 84
002EFE  3  54           
002EFF  3  78 79 7A 7B  	.byte 120,121,122,123,124
002F03  3  7C           
002F04  3               
002F04  3               ;---------------------------------------------------
002F04  3               ; Fetch block type at (dispx, dispy).
002F04  3               ;
002F04  3               ; Output:
002F04  3               ;  A = block type
002F04  3               ;---------------------------------------------------
002F04  3               
002F04  3               tstbl:
002F04  3  A5 rr        	lda dispy 		; fetch y coord.
002F06  3  AA           	tax
002F07  3               
002F07  3  A5 rr        	lda dispx		; x/8
002F09  3  4A           	lsr a
002F0A  3  85 rr        	sta charx
002F0C  3               
002F0C  3  18           	clc
002F0D  3  BD 00 DC     	lda SCADTB_lb,x
002F10  3  65 rr        	adc charx
002F12  3  85 rr        	sta bufaddr
002F14  3               
002F14  3  BD 00 DD     	lda SCADTB_hb,x
002F17  3  69 D4        	adc #(>MAP->ScreenAddr)
002F19  3  85 rr        	sta bufaddr+1
002F1B  3               
002F1B  3  A0 00        	ldy #0
002F1D  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002F1F  3  60           	rts
002F20  3               
002F20  3               ;-------------------------------------------------------------------
002F20  3               ; Jump - if we can.
002F20  3               ; Requires initial speed to be set up in accumulator prior to call.
002F20  3               ;
002F20  3               ; Input:
002F20  3               ;  IX = sprite address
002F20  3               ;-------------------------------------------------------------------
002F20  3               
002F20  3               jump:
002F20  3  A0 0D        	ldy #13
002F22  3  B1 68        	lda (z80_ix),y		; jump table low.
002F24  3  A0 0E        	ldy #14
002F26  3  11 68        	ora (z80_ix),y		; jump table high.
002F28  3  F0 01        	beq :+
002F2A  3  60           	rts			; already in the air.
002F2B  3               :
002F2B  3  A9 3C        	lda #>jtab
002F2D  3  A0 0E        	ldy #14
002F2F  3  91 68        	sta (z80_ix),y		; set jump high.
002F31  3  A9 85        	lda #<jtab		; jump table start.
002F33  3  A0 0D        	ldy #13
002F35  3  91 68        	sta (z80_ix),y		; set jump low.
002F37  3  60           	rts
002F38  3               
002F38  3               ; Jump table.
002F38  3               
002F38  3               ;jtab:
002F38  3               ;	.byte 248,250,252
002F38  3               ;	.byte 254,254,255
002F38  3               ;	.byte 255,255,0,0
002F38  3               ;	.byte 0,1,1,1,2,2
002F38  3               ;	.byte 4,6,8,8,8,99
002F38  3               
002F38  3               ;------------------------------------------------
002F38  3               ; Random numbers code.
002F38  3               ; Pseudo-random number generator, 8-bit.
002F38  3               ;
002F38  3               ; Output:
002F38  3               ;  RND = random number
002F38  3               ;------------------------------------------------
002F38  3               
002F38  3               random:
002F38  3  A5 rr        	lda seed
002F3A  3  F0 05        	beq doEor
002F3C  3  0A           	asl a
002F3D  3  F0 04        	beq noEor
002F3F  3  90 02        	bcc noEor
002F41  3  49 1D        doEor:	eor #$1d
002F43  3  85 rr        noEor:	sta seed
002F45  3  60           	rts
002F46  3               
002F46  3  A5 rr        	lda seed		; get last random number.
002F48  3  0A           	asl a
002F49  3  0A           	asl a
002F4A  3  18           	clc
002F4B  3  65 rr        	adc seed
002F4D  3  18           	clc
002F4E  3  69 45        	adc #$45
002F50  3  85 rr        	sta seed		; store new seed.
002F52  3  85 rr        	sta varrnd		; return number in variable.
002F54  3  60           	rts
002F55  3               
002F55  3               ;--------------------------------------------------------
002F55  3               ; Keys
002F55  3               ;
002F55  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002F55  3               ;             ||||||||
002F55  3               ;             |||||||+> Right    KEY 0  - X
002F55  3               ;             ||||||+-> Left     KEY 1  - Z
002F55  3               ;             |||||+--> Down     KEY 2  - .
002F55  3               ;             ||||+---> Up       KEY 3  - ;
002F55  3               ;             |||+----> Fire1    KEY 4  - SPC
002F55  3               ;             ||+-----> Fire2    KEY 5  - Q
002F55  3               ;             |+------> Fire3    KEY 6  - P
002F55  3               ;             +-------> Not used
002F55  3               ;
002F55  3               ;                       Option1  KEY 7  - 1
002F55  3               ;                       Option2  KEY 8  - 2
002F55  3               ;                       Option3  KEY 9  - 3
002F55  3               ;                       Option4  KEY 10 - 4
002F55  3               ;--------------------------------------------------------
002F55  3               
002F55  3               ;              X   Z   .   ;  SPC  Q   P
002F55  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002F55  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002F55  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002F59  3  00 04 14     
002F5C  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002F60  3               
002F60  3               ;-------------------------------------------------------
002F60  3               ; Joystick and keyboard reading routines.
002F60  3               ;
002F60  3               ; contrl = 0, Keyboard
002F60  3               ;          1, JoyKeyb
002F60  3               ;          2, JoyMMC
002F60  3               ;-------------------------------------------------------
002F60  3               
002F60  3               joykey:
002F60  3  A5 rr        	lda contrl 		; control flag.
002F62  3  C9 01        	cmp #1
002F64  3  D0 03        	bne :+
002F66  3  4C 88 3D     	jmp joy1 		; read keyboard joystick
002F69  3               :
002F69  3  C9 02        	cmp #2
002F6B  3  D0 03        	bne :+
002F6D  3  4C 89 3D     	jmp joy2 		; read MMC joystick.
002F70  3               :
002F70  3               ; Keyboard controls.
002F70  3               
002F70  3  A9 00        	lda #0		 	; zero reading.
002F72  3  85 64        	sta z80_e
002F74  3               
002F74  3  A0 06        	ldy #6	 		; address of last key.
002F76  3               joyke0:
002F76  3  B9 86 3C     	lda keys,y 		; get key from table.
002F79  3  20 8A 3D     	jsr ktest		; being pressed?
002F7C  3  26 64        	rol z80_e 		; rotate into reading.
002F7E  3               
002F7E  3  88           	dey		 	; next key.
002F7F  3  10 F5        	bpl joyke0 		; repeat for all keys.
002F81  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002F83  3  85 rr        	sta joyval		; remember value.
002F85  3  60           	rts
002F86  3               
002F86  3               ;---------------------------------------------------------------
002F86  3               ; Getkey in column,row format
002F86  3               ;
002F86  3               ; Output:
002F86  3               ;  A = high nibble=row and low nibble=column key in matrix
002F86  3               ;---------------------------------------------------------------
002F86  3               
002F86  3               ;kget:
002F86  3               ;	lda #ScrMode		; high-mono mode.
002F86  3               ;	sta ScrSelAddr		; screen select port
002F86  3               ;	stx xtmp
002F86  3               ;kget4:
002F86  3               ;	jsr READKEY		; read key until pressed
002F86  3               ;	cpy #255
002F86  3               ;	beq kget4
002F86  3               ;	sta rcol		; save column
002F86  3               ;	stx rrow		; determine row
002F86  3               ;kget3:
002F86  3               ;	jsr READKEY		; wait until key released
002F86  3               ;	cpy #255
002F86  3               ;	bne kget3
002F86  3               ;
002F86  3               ;	sec			; calculate matrix row
002F86  3               ;	lda #10
002F86  3               ;	sbc rrow
002F86  3               ;	asl a
002F86  3               ;	asl a
002F86  3               ;	asl a
002F86  3               ;	asl a
002F86  3               ;	sta rrow
002F86  3               ;
002F86  3               ;	ldy #255		; find column mask
002F86  3               ;kget1:
002F86  3               ;	iny
002F86  3               ;	lda keymask,y
002F86  3               ;	cmp rcol
002F86  3               ;	beq kget2
002F86  3               ;	jmp kget1
002F86  3               ;kget2:
002F86  3               ;	tya			; determine column
002F86  3               ;	clc
002F86  3               ;	adc rrow
002F86  3               ;	ldx xtmp
002F86  3               ;	rts
002F86  3               
002F86  3               ;---------------------------------------------------------------
002F86  3               ; Display message.
002F86  3               ;
002F86  3               ; Input:
002F86  3               ;  A = message number
002F86  3               ;---------------------------------------------------------------
002F86  3               
002F86  3               dmsg:
002F86  3  AA           	tax
002F87  3  A9 A4        	lda #<msgdat		; pointer to messages.
002F89  3  85 66        	sta z80_l
002F8B  3  A9 38        	lda #>msgdat
002F8D  3  85 67        	sta z80_h
002F8F  3  20 80 30     	jsr getwrd		; get message number.
002F92  3               dmsg3:
002F92  3  20 77 30     	jsr preprt		; pre-printing stuff.
002F95  3  20 15 2B     	jsr checkx		; make sure we"re in a printable range.
002F98  3  A5 rr        	lda prtmod		; print mode.
002F9A  3  D0 50        	bne bmsg1		; no, double-height text.
002F9C  3               
002F9C  3  AD 1E 38     	lda fcolour		; Set textcolour
002F9F  3  20 93 2C     	jsr pchar
002FA2  3  20 64 30     	jsr nexpos
002FA5  3               dmsg0:
002FA5  3  A5 67        	lda z80_h		; store string pointer.
002FA7  3  48           	pha
002FA8  3  A5 66        	lda z80_l
002FAA  3  48           	pha
002FAB  3               
002FAB  3  A0 00        	ldy #0
002FAD  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002FAF  3  29 7F        	and #127		; remove any end marker.
002FB1  3  C9 0D        	cmp #13
002FB3  3  F0 24        	beq dmsg1
002FB5  3  20 93 2C     	jsr pchar		; display character.
002FB8  3  20 64 30     	jsr nexpos 		; display position.
002FBB  3  D0 03        	bne dmsg2		; not on a new line.
002FBD  3  20 69 30     	jsr nexlin		; next line down.
002FC0  3               dmsg2:
002FC0  3  68           	pla			; retrieve string pointer
002FC1  3  85 66        	sta z80_l
002FC3  3  68           	pla
002FC4  3  85 67        	sta z80_h
002FC6  3               
002FC6  3  A0 00        	ldy #0
002FC8  3  B1 66        	lda (z80_hl),y		; fetch last character.
002FCA  3  0A           	asl a  			; was it the end?
002FCB  3  90 03        	bcc :+
002FCD  3  4C 68 2B     	jmp dscor2		; yes, job done.
002FD0  3               :
002FD0  3  E6 66        	inc z80_l		; next character to display.
002FD2  3  D0 02        	bne :+
002FD4  3  E6 67        	inc z80_h
002FD6  3               :
002FD6  3  4C A5 2F     	jmp dmsg0
002FD9  3               dmsg1:
002FD9  3  E6 rr        	inc dispy
002FDB  3  A5 rr        	lda dispy
002FDD  3  C9 19        	cmp #ScrHeight
002FDF  3  90 04        	bcc dmsg4
002FE1  3  A9 00        	lda #0
002FE3  3  85 rr        	sta dispy
002FE5  3               dmsg4:
002FE5  3  A9 00        	lda #0
002FE7  3  85 rr        	sta dispx
002FE9  3  4C C0 2F     	jmp dmsg2
002FEC  3               
002FEC  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
002FEC  3               
002FEC  3               ;----------------------------------------------------------
002FEC  3               ; Display message in big text.
002FEC  3               ;
002FEC  3               ; Input:
002FEC  3               ;  HL = string pointer
002FEC  3               ;----------------------------------------------------------
002FEC  3               
002FEC  3               bmsg1:
002FEC  3  AD 1E 38     	lda fcolour		; Set textcolour
002FEF  3  20 35 30     	jsr bchar
002FF2  3  A9 0D        	lda #13			; Set double height
002FF4  3  20 35 30     	jsr bchar
002FF7  3               bmsg4:
002FF7  3  A0 00        	ldy #0
002FF9  3  B1 66        	lda (z80_hl),y 		; get character to display.
002FFB  3  29 7F        	and #127		; only want 7 bits.
002FFD  3  C9 0D        	cmp #13
002FFF  3  F0 1F        	beq bmsg2
003001  3  20 35 30     	jsr bchar 		; display big char.
003004  3               bmsg3:
003004  3  A0 00        	ldy #0
003006  3  B1 66        	lda (z80_hl),y 		; look at last character.
003008  3  48           	pha
003009  3  E6 66        	inc z80_l 		; next character in list.
00300B  3  D0 02        	bne :+
00300D  3  E6 67        	inc z80_h
00300F  3               :
00300F  3  68           	pla
003010  3  0A           	asl a  			; was terminator flag set?
003011  3  90 E4        	bcc bmsg4		; no, keep going.
003013  3  20 68 2B     	jsr dscor2
003016  3  C6 rr        	dec dispx
003018  3  E6 rr        	inc dispy
00301A  3  20 68 2B     	jsr dscor2
00301D  3  C6 rr        	dec dispy
00301F  3  60           	rts
003020  3               bmsg2:
003020  3  A9 00        	lda #0
003022  3  85 rr        	sta dispx
003024  3  E6 rr        	inc dispy
003026  3  E6 rr        	inc dispy
003028  3  A5 rr        	lda dispy
00302A  3  C9 18        	cmp #ScrHeight-1
00302C  3  90 D6        	bcc bmsg3
00302E  3  A9 00        	lda #0
003030  3  85 rr        	sta dispy
003032  3  4C 04 30     	jmp bmsg3
003035  3               
003035  3               ;----------------------------------------------------------
003035  3               ; Big character display.
003035  3               ;
003035  3               ; Input:
003035  3               ;  A = character
003035  3               ;----------------------------------------------------------
003035  3               
003035  3               bchar:
003035  3  20 93 2C     	jsr pchar 		; display big char.
003038  3  E6 rr        	inc dispy
00303A  3  20 93 2C     	jsr pchar
00303D  3  C6 rr        	dec dispy
00303F  3  20 64 30     	jsr nexpos		; display position.
003042  3  60           	rts
003043  3               
003043  3               bchar3:
003043  3  E6 rr        	inc dispy
003045  3  20 69 30     	jsr nexlin 		; next line check.
003048  3               bchar2:
003048  3  4C 68 2B     	jmp dscor2		; tidy up line and column variables.
00304B  3               
00304B  3               
00304B  3               ;-------------------------------------------------
00304B  3               ; Display a character.
00304B  3               ;
00304B  3               ; Input:
00304B  3               ;  A = character
00304B  3               ;-------------------------------------------------
00304B  3               
00304B  3               achar:
00304B  3  85 63        	sta z80_b 		; copy to b.
00304D  3  20 77 30     	jsr preprt 		; get ready to print.
003050  3  A5 63        	lda z80_b		; character in accumulator.
003052  3  A6 rr        	ldx prtmod 		; print mode.
003054  3  F0 03        	beq :+
003056  3  4C 35 30     	jmp bchar 		; no, double-height text.
003059  3               :
003059  3  20 93 2C     	jsr pchar 		; display character.
00305C  3  20 64 30     	jsr nexpos 		; display position.
00305F  3  F0 E2        	beq bchar3		; next line down.
003061  3  4C 48 30     	jmp bchar2 		; tidy up.
003064  3               
003064  3               
003064  3               ;-------------------------------------------------
003064  3               ; Get next print column position.
003064  3               ;-------------------------------------------------
003064  3               
003064  3               nexpos:
003064  3  E6 rr        	inc dispx		; move along one position.
003066  3  A5 rr        	lda dispx 		; get coordinate.
003068  3               ;	and #31
003068  3  60           	rts 			; return with status in zero flag.
003069  3               
003069  3               ;-------------------------------------------------
003069  3               ; Get next print line position.
003069  3               ;-------------------------------------------------
003069  3               
003069  3               nexlin:
003069  3  E6 rr        	inc dispy 		; newline.
00306B  3  A5 rr        	lda dispy		; vertical position.
00306D  3  C9 19        	cmp #ScrHeight			; past screen edge?
00306F  3  B0 01        	bcs :+
003071  3  60           	rts			; no, still okay.
003072  3               :
003072  3  A9 00        	lda #0			; restart at top.
003074  3  85 rr        	sta dispy
003076  3  60           	rts
003077  3               
003077  3               ;--------------------------------------------------------
003077  3               ; Pre-print preliminaries.
003077  3               ;--------------------------------------------------------
003077  3               
003077  3               preprt:
003077  3               ;	lda #<(FONT-256)		; font pointer.
003077  3               ;	sta grbase		; set up graphics base.
003077  3               ;	lda #>(FONT-256)
003077  3               ;	sta grbase+1
003077  3               prescr:
003077  3  A5 rr        	lda charx 		; display coordinates.
003079  3  85 rr        	sta dispx		; set up general coordinates.
00307B  3  A5 rr        	lda chary
00307D  3  85 rr        	sta dispy
00307F  3  60           	rts
003080  3               
003080  3               ;--------------------------------------------------------------
003080  3               ; Get messagenr x in hl
003080  3               ;
003080  3               ; Input:
003080  3               ;  HL = pointer to message list
003080  3               ;  X  = message number.
003080  3               ;--------------------------------------------------------------
003080  3               
003080  3               getwrd:
003080  3  E0 00        	cpx #0
003082  3  D0 01        	bne:+ 			; first word in list?
003084  3  60           	rts 			; yep, don't search.
003085  3               :
003085  3  A0 00        	ldy #0
003087  3               getwd0:
003087  3  B1 66        	lda (z80_hl),y
003089  3  48           	pha
00308A  3  E6 66        	inc z80_l
00308C  3  D0 02        	bne :+
00308E  3  E6 67        	inc z80_h
003090  3               :
003090  3  68           	pla
003091  3  C9 80        	cmp #128		; found end?
003093  3  30 F2        	bmi getwd0		; no, carry on.
003095  3  CA           	dex			; until we have right number.
003096  3  D0 EF        	bne getwd0
003098  3  60           	rts
003099  3               
003099  3               ;-----------------------------------------------------------
003099  3               ; Bubble sort.
003099  3               ;-----------------------------------------------------------
003099  3               
003099  3               bsort:
003099  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
00309B  3  85 rr        	sta qscnt
00309D  3               
00309D  3  A9 30        	lda #<sprtab 		; sprite table.
00309F  3  85 68        	sta z80_x
0030A1  3  A9 37        	lda #>sprtab
0030A3  3  85 69        	sta z80_i
0030A5  3               bsort0:
0030A5  3  A0 00        	ldy #0
0030A7  3  B1 68        	lda (z80_ix),y 		; first sprite type.
0030A9  3  C9 FF        	cmp #255 		; is it switched off?
0030AB  3  F0 30        	beq swemp		; yes, may need to switch another in here.
0030AD  3               
0030AD  3  A0 11        	ldy #TABSIZ
0030AF  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
0030B1  3  C9 FF        	cmp #255 		; is it enabled?
0030B3  3  F0 0A        	beq bsort2 		; no, nothing to swap.
0030B5  3               
0030B5  3  A0 14        	ldy #TABSIZ+3
0030B7  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0030B9  3  A0 03        	ldy #3
0030BB  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
0030BD  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0030BF  3               bsort2:
0030BF  3  18           	clc
0030C0  3  A5 68        	lda z80_x
0030C2  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0030C4  3  85 68        	sta z80_x
0030C6  3  90 02        	bcc :+
0030C8  3  E6 69        	inc z80_i
0030CA  3               :
0030CA  3  C6 rr        	dec qscnt
0030CC  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0030CE  3  60           	rts
0030CF  3               
0030CF  3               ;qscnt:	.byte 0
0030CF  3               
0030CF  3               bsort1:
0030CF  3  A0 11        	ldy #TABSIZ
0030D1  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
0030D3  3  C9 FF        	cmp #255		; is it enabled?
0030D5  3  F0 E8        	beq bsort2		; no, nothing to swap.
0030D7  3  20 EB 30     	jsr swspr		; swap positions.
0030DA  3  4C BF 30     	jmp bsort2
0030DD  3               swemp:
0030DD  3  A0 11        	ldy #TABSIZ
0030DF  3  B1 68        	lda (z80_ix),y		; next table entry.
0030E1  3  C9 FF        	cmp #255		; is that one on?
0030E3  3  F0 DA        	beq bsort2		; no, nothing to swap.
0030E5  3  20 EB 30     	jsr swspr		; swap positions.
0030E8  3  4C BF 30     	jmp bsort2
0030EB  3               
0030EB  3               ; Swap sprites.
0030EB  3               
0030EB  3               swspr:
0030EB  3  A5 68        	lda z80_x		; table address
0030ED  3  85 64        	sta z80_e		; copy to de pair.
0030EF  3  85 66        	sta z80_l		; copy to hl pair.
0030F1  3  A5 69        	lda z80_i
0030F3  3  85 67        	sta z80_h
0030F5  3  85 65        	sta z80_d
0030F7  3               
0030F7  3  18           	clc
0030F8  3  A5 66        	lda z80_l
0030FA  3  69 11        	adc #TABSIZ		; distance to second entry.
0030FC  3  85 66        	sta z80_l
0030FE  3  90 02        	bcc :+
003100  3  E6 67        	inc z80_h
003102  3               :
003102  3  A9 11        	lda #TABSIZ		; bytes to swap.
003104  3  85 63        	sta z80_b
003106  3  A0 00        	ldy #0
003108  3               swspr0:
003108  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00310A  3  48           	pha
00310B  3  B1 64        	lda (z80_de),y 		; fetch first byte.
00310D  3  91 66        	sta (z80_hl),y 		; copy to second.
00310F  3  68           	pla
003110  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
003112  3               
003112  3  E6 64        	inc z80_e 		; next byte.
003114  3  D0 02        	bne :+
003116  3  E6 65        	inc z80_d
003118  3               :
003118  3  E6 66        	inc z80_l 		; next byte.
00311A  3  D0 02        	bne :+
00311C  3  E6 67        	inc z80_h
00311E  3               :
00311E  3  C6 63        	dec z80_b
003120  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
003122  3  60           	rts
003123  3               
003123  3               ;----------------------------------------------------
003123  3               ; Process sprites.
003123  3               ;----------------------------------------------------
003123  3               
003123  3               pspr:
003123  3  A9 0C        	lda #NUMSPR		; sprites to process.
003125  3  85 rr        	sta sprptr
003127  3               
003127  3  A9 30        	lda #<sprtab 		; sprite table.
003129  3  85 68        	sta z80_x
00312B  3  A9 37        	lda #>sprtab
00312D  3  85 69        	sta z80_i
00312F  3               pspr1:
00312F  3  A0 00        	ldy #0
003131  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
003133  3  C9 09        	cmp #9 			; within range of sprite types?
003135  3  B0 03        	bcs :+
003137  3  20 4A 31     	jsr pspr2 		; yes, process this one.
00313A  3               :
00313A  3  18           	clc
00313B  3  A5 68        	lda z80_x
00313D  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00313F  3  85 68        	sta z80_x
003141  3  90 02        	bcc :+
003143  3  E6 69        	inc z80_i		; next sprite.
003145  3               :
003145  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
003147  3  D0 E6        	bne pspr1
003149  3  60           	rts
00314A  3               
00314A  3               ;sprptr:	.byte 0
00314A  3               
00314A  3               pspr2:
00314A  3  A5 68        	lda z80_x 		; store original sprite pointer.
00314C  3  85 rr        	sta ogptr
00314E  3  A5 69        	lda z80_i
003150  3  85 rr        	sta ogptr+1
003152  3  20 5E 31     	jsr pspr3		; do the routine.
003155  3               rtorg:
003155  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
003157  3  85 68        	sta z80_x
003159  3  A5 rr        	lda ogptr+1
00315B  3  85 69        	sta z80_i
00315D  3               rtorg0:
00315D  3  60           	rts
00315E  3               
00315E  3               pspr3:
00315E  3  A9 93        	lda #<evtyp0		; sprite type events list.
003160  3  85 66        	sta z80_l
003162  3  A9 31        	lda #>evtyp0
003164  3  85 67        	sta z80_h
003166  3               pspr4:
003166  3  B1 68        	lda (z80_ix),y
003168  3  0A           	asl a			; double accumulator.
003169  3  18           	clc
00316A  3  65 66        	adc z80_l
00316C  3  85 66        	sta z80_l
00316E  3  90 02        	bcc :+
003170  3  E6 67        	inc z80_h
003172  3               :
003172  3  B1 66        	lda (z80_hl),y
003174  3  85 64        	sta z80_e 		; copy to de.
003176  3  48           	pha
003177  3               
003177  3  E6 66        	inc z80_l 		; next byte of address.
003179  3  D0 02        	bne :+
00317B  3  E6 67        	inc z80_h
00317D  3               :
00317D  3  B1 66        	lda (z80_hl),y 		; address high.
00317F  3  85 65        	sta z80_d
003181  3               
003181  3  48           	pha	 		; swap address into hl.
003182  3  A5 67        	lda z80_h
003184  3  85 65        	sta z80_d
003186  3  68           	pla
003187  3  85 67        	sta z80_h
003189  3  68           	pla
00318A  3  85 66        	sta z80_l
00318C  3  A5 66        	lda z80_l
00318E  3  85 64        	sta z80_e
003190  3               
003190  3  6C 66 00     	jmp (z80_hl) 		; go there.
003193  3               
003193  3               ;ogptr:	.word 0			; original sprite pointer.
003193  3               
003193  3               ; Address of each sprite type's routine.
003193  3               
003193  3  2B 38        evtyp0:	.word evnt00
003195  3  2C 38        evtyp1:	.word evnt01
003197  3  2D 38        evtyp2:	.word evnt02
003199  3  2E 38        evtyp3:	.word evnt03
00319B  3  2F 38        evtyp4:	.word evnt04
00319D  3  30 38        evtyp5:	.word evnt05
00319F  3  31 38        evtyp6:	.word evnt06
0031A1  3  32 38        evtyp7:	.word evnt07
0031A3  3  33 38        evtyp8:	.word evnt08
0031A5  3               
0031A5  3               ;--------------------------------------------------------------
0031A5  3               ; Display sprites.
0031A5  3               ;
0031A5  3               ; Input:
0031A5  3               ;  IX = sprite table
0031A5  3               ;--------------------------------------------------------------
0031A5  3               
0031A5  3               dspr:
0031A5  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0031A7  3  85 rr        	sta sprcnt
0031A9  3               dspr0:
0031A9  3  A0 00        	ldy #0
0031AB  3  B1 68        	lda (z80_ix),y 		; get sprite type.
0031AD  3  C9 FF        	cmp #255 		; is it enabled?
0031AF  3  D0 42        	bne dspr1 		; yes, it needs deleting.
0031B1  3               dspr5:
0031B1  3  A0 05        	ldy #5
0031B3  3  B1 68        	lda (z80_ix),y 		; new type.
0031B5  3  C9 FF        	cmp #255		; is it enabled?
0031B7  3  D0 76        	bne dspr3 		; yes, it needs drawing.
0031B9  3               dspr2:
0031B9  3  A0 05        	ldy #5
0031BB  3  B1 68        	lda (z80_ix),y 		; copy new type.
0031BD  3  A0 00        	ldy #0
0031BF  3  91 68        	sta (z80_ix),y
0031C1  3  A0 06        	ldy #6
0031C3  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0031C5  3  A0 01        	ldy #1
0031C7  3  91 68        	sta (z80_ix),y
0031C9  3  A0 07        	ldy #7
0031CB  3  B1 68        	lda (z80_ix),y 		; copy new frame.
0031CD  3  A0 02        	ldy #2
0031CF  3  91 68        	sta (z80_ix),y
0031D1  3  A0 08        	ldy #8
0031D3  3  B1 68        	lda (z80_ix),y 		; copy new y.
0031D5  3  A0 03        	ldy #3
0031D7  3  91 68        	sta (z80_ix),y
0031D9  3  A0 09        	ldy #9
0031DB  3  B1 68        	lda (z80_ix),y 		; copy new x.
0031DD  3  A0 04        	ldy #4
0031DF  3  91 68        	sta (z80_ix),y
0031E1  3               
0031E1  3  18           	clc
0031E2  3  A5 68        	lda z80_x
0031E4  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0031E6  3  85 68        	sta z80_x
0031E8  3  A5 69        	lda z80_i
0031EA  3  69 00        	adc #0
0031EC  3  85 69        	sta z80_i 		; next sprite.
0031EE  3  C6 rr        	dec sprcnt
0031F0  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0031F2  3  60           	rts
0031F3  3               dspr1:
0031F3  3  A0 05        	ldy #5
0031F5  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0031F7  3  C9 FF        	cmp #255		; is this enabled?
0031F9  3  D0 06        	bne dspr4 		; yes, display both.
0031FB  3               dspr6:
0031FB  3  20 A7 3D     	jsr sspria 		; show single sprite.
0031FE  3  4C B9 31     	jmp dspr2
003201  3               
003201  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
003201  3               
003201  3               dspr4:
003201  3  A0 04        	ldy #4
003203  3  B1 68        	lda (z80_ix),y		; old x.
003205  3  A0 09        	ldy #9
003207  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
003209  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
00320B  3               
00320B  3  A0 03        	ldy #3
00320D  3  B1 68        	lda (z80_ix),y		; old y.
00320F  3  A0 08        	ldy #8
003211  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003213  3  D0 14        	bne dspr7		; they differ, need to redraw.
003215  3               
003215  3  A0 02        	ldy #2
003217  3  B1 68        	lda (z80_ix),y 		; old frame.
003219  3  A0 07        	ldy #7
00321B  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00321D  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
00321F  3               
00321F  3  A0 01        	ldy #1
003221  3  B1 68        	lda (z80_ix),y 		; old image.
003223  3  A0 06        	ldy #6
003225  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003227  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
003229  3               dspr7:
003229  3  20 C8 3D     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00322C  3  4C B9 31     	jmp dspr2
00322F  3               dspr3:
00322F  3  20 C2 3D     	jsr ssprib 		; show single sprite.
003232  3  4C B9 31     	jmp dspr2
003235  3               
003235  3               ;sprcnt:	.byte 0
003235  3               
003235  3               ;-----------------------------------------
003235  3               ; Get sprite address calculations.
003235  3               ; gspran = new sprite, gsprad = old sprite.
003235  3               ;
003235  3               ; Input:
003235  3               ;  IX = sprite address
003235  3               ;-----------------------------------------
003235  3               
003235  3               gspran:
003235  3  A0 08        	ldy #8
003237  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003239  3  85 rr        	sta dispy
00323B  3  A0 09        	ldy #9
00323D  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00323F  3  85 rr        	sta dispx
003241  3  A0 06        	ldy #6
003243  3  B1 68        	lda (z80_ix),y 		; new sprite image.
003245  3  20 52 35     	jsr gfrm		; fetch start frame for this sprite.
003248  3               
003248  3  A0 00        	ldy #0
00324A  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00324C  3  A0 07        	ldy #7
00324E  3  18           	clc
00324F  3  71 68        	adc (z80_ix),y 		; new add frame number.
003251  3  4C 70 32     	jmp gspra0
003254  3               
003254  3               ;-----------------------------------------
003254  3               ; Calculate old sprite address
003254  3               ;
003254  3               ; Input:
003254  3               ;  IX = sprite address
003254  3               ;
003254  3               ; Output:
003254  3               ;  B  = right byte mask
003254  3               ;  C  = left byte mask
003254  3               ;  DE = spriteframe address
003254  3               ;  scraddr = screenaddress(dispx,dispy)
003254  3               ;-----------------------------------------
003254  3               
003254  3               gsprad:
003254  3  A0 03        	ldy #3
003256  3  B1 68        	lda (z80_ix),y		; y coordinate.
003258  3  85 rr        	sta dispy
00325A  3  A0 04        	ldy #4
00325C  3  B1 68        	lda (z80_ix),y		; x coordinate.
00325E  3  85 rr        	sta dispx
003260  3  A0 01        	ldy #1
003262  3  B1 68        	lda (z80_ix),y 		; sprite image.
003264  3  20 52 35     	jsr gfrm 		; fetch start frame for this sprite.
003267  3               
003267  3               ; z80_hl = sprite framenr
003267  3               
003267  3  A0 00        	ldy #0
003269  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00326B  3               
00326B  3               ; z80_ix+2 = current framenr
00326B  3               
00326B  3  A0 02        	ldy #2
00326D  3  18           	clc
00326E  3  71 68        	adc (z80_ix),y 		; add frame number.
003270  3               
003270  3               ; A = sprite framenr + current framenr
003270  3               ;
003270  3               ; framestart = z80_d/e = 120 * A (Normal 4 x 32 = 128)
003270  3               ; framestart = framestart + (x AND 1) * 60
003270  3               ; framestart = framestart + (reftable(dispy) * 20)
003270  3               
003270  3               gspra0:
003270  3               
003270  3               ; Calculate framestart = 120 * sprite image
003270  3               
003270  3  85 65        	sta z80_d
003272  3  85 rr        	sta tmp
003274  3  A9 00        	lda #0
003276  3  85 64        	sta z80_e
003278  3  85 rr        	sta tmp+1
00327A  3               
00327A  3  46 65        	lsr z80_d	; a * 128
00327C  3  66 64        	ror z80_e
00327E  3               
00327E  3  06 rr        	asl tmp		; a x 8
003280  3  26 rr        	rol tmp+1
003282  3  06 rr        	asl tmp
003284  3  26 rr        	rol tmp+1
003286  3  06 rr        	asl tmp
003288  3  26 rr        	rol tmp+1
00328A  3               
00328A  3  38           	sec		; a*128 - a*8
00328B  3  A5 64        	lda z80_e
00328D  3  E5 rr        	sbc tmp
00328F  3  85 64        	sta z80_e
003291  3  A5 65        	lda z80_d
003293  3  E5 rr        	sbc tmp+1
003295  3  85 65        	sta z80_d
003297  3               
003297  3               ;.if bflag
003297  3               ;	lsr tmp1
003297  3               ;	ror tmp2
003297  3               ;	clc
003297  3               ;	lda tmp2
003297  3               ;	adc z80_e
003297  3               ;	sta z80_e
003297  3               ;	lda tmp1
003297  3               ;	adc z80_d
003297  3               ;	sta z80_d
003297  3               ;.endif
003297  3               
003297  3               ; Add spritedata address
003297  3               
003297  3  18           	clc 			; address of play sprites.
003298  3  A5 64        	lda z80_e
00329A  3  69 D5        	adc #<sprgfx
00329C  3  85 64        	sta z80_e
00329E  3  A5 65        	lda z80_d
0032A0  3  69 38        	adc #>sprgfx
0032A2  3  85 65        	sta z80_d
0032A4  3               
0032A4  3               ; Check for x-shift
0032A4  3               
0032A4  3  A5 rr        	lda dispx 		; x coordinate.
0032A6  3  29 01        	and #1
0032A8  3  F0 0B        	beq chk_y_shift
0032AA  3  18           	clc			; Point to odd frame
0032AB  3  A5 64        	lda z80_e
0032AD  3  69 3C        	adc #60
0032AF  3  85 64        	sta z80_e
0032B1  3  90 02        	bcc :+
0032B3  3  E6 65        	inc z80_d
0032B5  3               :
0032B5  3               ; SCheck for y-shift
0032B5  3               
0032B5  3               chk_y_shift:
0032B5  3  A6 rr        	ldx dispy
0032B7  3  BD 4A DF     	lda V_SPR_PTR,x
0032BA  3  18           	clc
0032BB  3  65 64        	adc z80_e
0032BD  3  85 64        	sta z80_e
0032BF  3  90 02        	bcc :+
0032C1  3  E6 65        	inc z80_d
0032C3  3               :
0032C3  3               
0032C3  3               ;------------------------------------------------------------------
0032C3  3               ; Drop into screen address routine.
0032C3  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0032C3  3               ;------------------------------------------------------------------
0032C3  3               
0032C3  3               ; Check for bottom of screen
0032C3  3               
0032C3  3               scadd:
0032C3  3  A6 rr        	ldx dispy
0032C5  3  E0 4C        	cpx #76
0032C7  3  90 02        	bcc :+
0032C9  3  A2 4C        	ldx #76
0032CB  3               :
0032CB  3               
0032CB  3  A5 rr        	lda dispx
0032CD  3  4A           	lsr a
0032CE  3  18           	clc
0032CF  3  7D 00 DC     	adc SCADTB_lb,x
0032D2  3  85 rr        	sta scraddr
0032D4  3  BD 00 DD     	lda SCADTB_hb,x
0032D7  3  69 00        	adc #0
0032D9  3  85 rr        	sta scraddr+1
0032DB  3  60           	rts
0032DC  3               
0032DC  3               spmask:
0032DC  3  FF 00        	.byte $ff,$00
0032DE  3  6A 35        	.byte $6a,$35
0032E0  3               
0032E0  3  00           tmp1:	.byte 0
0032E1  3  00           tmp2:	.byte 0
0032E2  3               
0032E2  3               
0032E2  3               ;----------------------------------------------------------------------
0032E2  3               ; Line drawn, now work out next target address.
0032E2  3               ;----------------------------------------------------------------------
0032E2  3               
0032E2  3               nline:
0032E2  3  18           	clc
0032E3  3  A5 rr        	lda scraddr 		; get low byte of address.
0032E5  3  69 28        	adc #ScrWidth
0032E7  3  85 rr        	sta scraddr 		; new low byte of address.
0032E9  3  90 02        	bcc :+
0032EB  3  E6 rr        	inc scraddr+1 		; new high byte of address.
0032ED  3               :
0032ED  3  60           	rts
0032EE  3               
0032EE  3               ;-----------------------------------------------------------
0032EE  3               ; Animates a sprite.
0032EE  3               ;
0032EE  3               ; Input:
0032EE  3               ;  IX = sprite address
0032EE  3               ;  HL = last sprite address
0032EE  3               ;-----------------------------------------------------------
0032EE  3               
0032EE  3               animsp:
0032EE  3  25 rr        	and frmno
0032F0  3  F0 01        	beq :+
0032F2  3  60           	rts
0032F3  3               :
0032F3  3  A0 06        	ldy #6
0032F5  3  B1 68        	lda (z80_ix),y		; sprite image
0032F7  3  20 52 35     	jsr gfrm		; get frame data.
0032FA  3               
0032FA  3  E6 66        	inc z80_l		; point to frames.
0032FC  3  D0 02        	bne :+
0032FE  3  E6 67        	inc z80_h
003300  3               :
003300  3  A0 07        	ldy #7
003302  3  B1 68        	lda (z80_ix),y		; sprite frame.
003304  3  18           	clc
003305  3  69 01        	adc #1			; next one along.
003307  3  A0 00        	ldy #0
003309  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
00330B  3  90 02        	bcc anims0		; no, not yet.
00330D  3  A9 00        	lda #0			; start at first frame.
00330F  3               anims0:
00330F  3  A0 07        	ldy #7
003311  3  91 68        	sta (z80_ix),y		; new frame.
003313  3  60           	rts
003314  3               
003314  3               ;--------------------------------------------------------------
003314  3               ; Animate back
003314  3               ;
003314  3               ; Input:
003314  3               ;  IX = sprite address
003314  3               ;  HL = last sprite address
003314  3               ;--------------------------------------------------------------
003314  3               
003314  3               animbk:
003314  3  25 rr        	and frmno
003316  3  F0 01        	beq :+
003318  3  60           	rts
003319  3               :
003319  3  A0 06        	ldy #6
00331B  3  B1 68        	lda (z80_ix),y		; sprite image.
00331D  3  20 52 35     	jsr gfrm		; get frame data.
003320  3               
003320  3  E6 66        	inc z80_l 		; point to frames.
003322  3  D0 02        	bne :+
003324  3  E6 67        	inc z80_h
003326  3               :
003326  3  A0 07        	ldy #7
003328  3  B1 68        	lda (z80_ix),y 		; sprite frame.
00332A  3  F0 03        	beq :+
00332C  3  4C 33 33     	jmp rtanb0 		; yes, start at end.
00332F  3               :
00332F  3  A0 00        	ldy #0
003331  3  B1 66        	lda (z80_hl),y 		; last sprite.
003333  3               rtanb0:
003333  3  38           	sec
003334  3  E9 01        	sbc #1			; next one along.
003336  3  4C 0F 33     	jmp anims0		; set new frame.
003339  3               
003339  3               ;--------------------------------------------------------------
003339  3               ; Check for collision with other sprite, strict enforcement.
003339  3               ;
003339  3               ; Input:
003339  3               ;  b		= sprite to test for
003339  3               ;  ix		= current sprite pointer
003339  3               ;
003339  3               ; global:	b
003339  3               ; local:	x,y,hl,de,skptr
003339  3               ; calls:	-
003339  3               ;--------------------------------------------------------------
003339  3               
003339  3               sktyp:
003339  3  A9 30        	lda #<sprtab				; sprite table.
00333B  3  85 66        	sta z80_l
00333D  3  A9 37        	lda #>sprtab
00333F  3  85 67        	sta z80_h
003341  3               numsp2:
003341  3  A9 0C        	lda #NUMSPR				; number of sprites.
003343  3  85 rr        	sta sktptr
003345  3               sktyp0:
003345  3  A5 66        	lda z80_l 				; store pointer to sprite.
003347  3  85 rr        	sta skptr
003349  3  A5 67        	lda z80_h
00334B  3  85 rr        	sta skptr+1
00334D  3               
00334D  3  A0 00        	ldy #0
00334F  3  B1 66        	lda (z80_hl),y 				; get sprite type.
003351  3  C5 63        	cmp z80_b				; is it the type we seek?
003353  3  F0 1D        	beq coltyp				; yes, we can use this one.
003355  3               sktyp1:
003355  3  18           	clc
003356  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003358  3  69 11        	adc #TABSIZ				; size of each entry.
00335A  3  85 66        	sta z80_l
00335C  3  A5 rr        	lda skptr+1
00335E  3  69 00        	adc #0
003360  3  85 67        	sta z80_h
003362  3  C6 rr        	dec sktptr					; one less iteration.
003364  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
003366  3  A9 00        	lda #0					; default to ROM address - no sprite.
003368  3  85 66        	sta z80_l
00336A  3  85 67        	sta z80_h
00336C  3  85 rr        	sta skptr				; store pointer to sprite.
00336E  3  85 rr        	sta skptr+1
003370  3               
003370  3  18           	clc					; don't return with zero flag set.
003371  3  60           	rts 					; didn't find one.
003372  3               
003372  3               ;skptr:	.word 0					; search pointer.
003372  3               ;sktptr:	.byte 0
003372  3               
003372  3               coltyp:
003372  3  A0 00        	ldy #0
003374  3  B1 68        	lda (z80_ix),y				; current sprite type.
003376  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003378  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
00337A  3               colty0:
00337A  3  A0 09        	ldy #9					; distance to x position in table.
00337C  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00337E  3  85 64        	sta z80_e
003380  3  88           	dey
003381  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
003383  3  85 65        	sta z80_d
003385  3               
003385  3               ; Drop into collision detection.
003385  3               
003385  3               colc16:
003385  3  A0 09        	ldy #9
003387  3  B1 68        	lda (z80_ix),y			 	; x coord.
003389  3  38           	sec					; subtract x.
00338A  3  E5 64        	sbc z80_e
00338C  3  B0 05        	bcs  colc1a 				; result is positive.
00338E  3  49 FF        	eor #$ff				; make negative positive.
003390  3  18           	clc
003391  3  69 01        	adc #1
003393  3               colc1a:
003393  3  C9 08        	cmp #SPR_WID				; within x range?
003395  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003397  3  85 62        	sta z80_c				; store difference.
003399  3               
003399  3  A0 08        	ldy #8
00339B  3  B1 68        	lda (z80_ix),y				; y coord.
00339D  3  38           	sec
00339E  3  E5 65        	sbc z80_d				; subtract y.
0033A0  3  B0 05        	bcs colc1b				; result is positive.
0033A2  3  49 FF        	eor #$ff				; make negative positive.
0033A4  3  18           	clc
0033A5  3  69 01        	adc #1
0033A7  3               colc1b:
0033A7  3  C9 09        	cmp #SPR_HGT					; within y range?
0033A9  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0033AB  3  18           	clc					; add x difference.
0033AC  3  65 62        	adc z80_c
0033AE  3  C9 0C        	cmp #12					; only 5 corner pixels touching?
0033B0  3  B0 02        	bcs :+
0033B2  3  38           	sec
0033B3  3  60           	rts 					; carry set if there's a collision.
0033B4  3               :
0033B4  3  4C 55 33     	jmp sktyp1				; try next sprite in table.
0033B7  3               colty1:
0033B7  3  A5 68        	lda z80_x  				; compare the two.
0033B9  3  C5 66        	cmp z80_l
0033BB  3  D0 09        	bne end_col
0033BD  3  A5 69        	lda z80_i
0033BF  3  C5 67        	cmp z80_h
0033C1  3  D0 03        	bne end_col
0033C3  3  4C 55 33     	jmp sktyp1 				; addresses are identical.
0033C6  3               end_col:
0033C6  3  4C 7A 33     	jmp colty0
0033C9  3               
0033C9  3               ;-----------------------------------------------------------
0033C9  3               ; Display number, left aligned
0033C9  3               ;
0033C9  3               ; Input:
0033C9  3               ;  a		= number
0033C9  3               ;
0033C9  3               ; global:	-
0033C9  3               ; local:	a,y,bc,hl,displ0
0033C9  3               ; calls:	num2ch,dmsg3
0033C9  3               ;-----------------------------------------------------------
0033C9  3               
0033C9  3               disply:
0033C9  3  85 61        	sta z80_a
0033CB  3  A9 F1        	lda #<displ0				; display workspace.
0033CD  3  85 62        	sta z80_c
0033CF  3  A9 33        	lda #>displ0
0033D1  3  85 63        	sta z80_b
0033D3  3  A5 61        	lda z80_a
0033D5  3  20 C3 29     	jsr num2ch				; convert accumulator to string.
0033D8  3               displ1:
0033D8  3  C6 62        	dec z80_c				; back one character.
0033DA  3  D0 02        	bne :+
0033DC  3  C6 63        	dec z80_b
0033DE  3               :
0033DE  3  A0 00        	ldy #0
0033E0  3  B1 62        	lda (z80_bc),y				; fetch digit.
0033E2  3  09 80        	ora #128				; insert end marker.
0033E4  3  91 62        	sta (z80_bc),y				; new value.
0033E6  3               
0033E6  3  A9 F1        	lda #<displ0				; display space.
0033E8  3  85 66        	sta z80_l
0033EA  3  A9 33        	lda #>displ0
0033EC  3  85 67        	sta z80_h
0033EE  3               
0033EE  3  4C 92 2F     	jmp dmsg3				; display the string.
0033F1  3               
0033F1  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0033F5  3               
0033F5  3               ;----------------------------------------------------------------
0033F5  3               ; Initialise screen.
0033F5  3               ;
0033F5  3               ; global:	roomtb,scno
0033F5  3               ; local:	-
0033F5  3               ; calls:	tstcs
0033F5  3               ;----------------------------------------------------------------
0033F5  3               
0033F5  3               initsc:
0033F5  3  AD 0D 38     	lda roomtb 			; whereabouts in the map are we?
0033F8  3  20 02 34     	jsr tstsc 			; find displacement.
0033FB  3  C9 FF        	cmp #255 			; is it valid?
0033FD  3  F0 02        	beq init_end 			; no, it's rubbish.
0033FF  3  85 rr        	sta scno			; store new room number.
003401  3               init_end:
003401  3  60           	rts
003402  3               
003402  3               ;----------------------------------------------------------------
003402  3               ; Test screen.
003402  3               ;
003402  3               ; global:	-
003402  3               ; local:	x
003402  3               ; calls:	-
003402  3               ;----------------------------------------------------------------
003402  3               
003402  3               tstsc:
003402  3  85 rr        	sta tmproom
003404  3  18           	clc
003405  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
003407  3  AA           	tax 				; add displacement to map data.
003408  3  BD 21 38     	lda mapdat-MAPWID,x 		; find room number there.
00340B  3  60           	rts
00340C  3               
00340C  3               ;tmproom:	.byte 0
00340C  3               
00340C  3               ;--------------------------
00340C  3               ; Screen left.
00340C  3               ;--------------------------
00340C  3               
00340C  3               scrl:
00340C  3  AD 0D 38     	lda roomtb 			; present room table pointer.
00340F  3  38           	sec
003410  3  E9 01        	sbc #1				; room left.
003412  3               scrl0:
003412  3  20 02 34     	jsr tstsc			; test screen.
003415  3  C9 FF        	cmp #255			; is there a screen this way?
003417  3  D0 01        	bne :+
003419  3  60           	rts				; no, return to loop.
00341A  3               :
00341A  3  A5 rr        	lda tmproom			; restore room displacement.
00341C  3  8D 0D 38     	sta roomtb			; new room table position.
00341F  3               scrl1:
00341F  3  20 F5 33     	jsr initsc 			; set new screen.
003422  3  A9 02        	lda #2
003424  3  85 rr        	sta restfl 			; set it.
003426  3  60           	rts
003427  3               scrr:
003427  3  AD 0D 38     	lda roomtb 			; room table pointer.
00342A  3  18           	clc
00342B  3  69 01        	adc #1				; room right.
00342D  3  4C 12 34     	jmp scrl0
003430  3               scru:
003430  3  AD 0D 38     	lda roomtb 			; room table pointer.
003433  3  38           	sec
003434  3  E9 03        	sbc #MAPWID 			; room up.
003436  3  4C 12 34     	jmp scrl0
003439  3               scrd:
003439  3  AD 0D 38     	lda roomtb 			; room table pointer.
00343C  3  18           	clc
00343D  3  69 03        	adc #MAPWID 			; room down.
00343F  3  4C 12 34     	jmp scrl0
003442  3               
003442  3               ;-----------------------------------------
003442  3               ; Jump to new screen.
003442  3               ;-----------------------------------------
003442  3               
003442  3               nwscr:
003442  3  A2 00        	ldx #0				; start of map data.
003444  3               nwscr0:
003444  3  DD 24 38     	cmp mapdat,x
003447  3  F0 06        	beq nwscr1			; have we found a match for screen?
003449  3  E8           	inx 				; next room.
00344A  3  E0 50        	cpx #80				; zero room count, 80 to search.
00344C  3  D0 F6        	bne nwscr0			; keep looking.
00344E  3  60           	rts
00344F  3               nwscr1:
00344F  3  8E 0D 38     	stx roomtb			; set the map position.
003452  3  4C 1F 34     	jmp scrl1			; draw new room.
003455  3               
003455  3               
003455  3               ;----------------------------------------------------------
003455  3               ; Gravity processing.
003455  3               ;----------------------------------------------------------
003455  3               
003455  3               grav:
003455  3  A0 0D        	ldy #13
003457  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003459  3  85 66        	sta z80_l
00345B  3  A0 0E        	ldy #14
00345D  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00345F  3  85 67        	sta z80_h
003461  3  05 66        	ora z80_l			; merge in low byte.
003463  3  D0 01        	bne :+
003465  3  60           	rts				; if neither is set, we're not in the air.
003466  3               :
003466  3  A0 00        	ldy #0
003468  3  B1 66        	lda (z80_hl),y			; pixels to move.
00346A  3  85 61        	sta z80_a
00346C  3  C9 63        	cmp #99				; reached the end?
00346E  3  D0 0C        	bne grav0			; no, continue.
003470  3               grav2:
003470  3  C6 66        	dec z80_l			; go back to previous value.
003472  3  C9 FF        	cmp #$ff
003474  3  D0 02        	bne :+
003476  3  C6 67        	dec z80_h
003478  3               :
003478  3  B1 66        	lda (z80_hl),y			; fetch that from table.
00347A  3  85 61        	sta z80_a
00347C  3               grav0:
00347C  3  E6 66        	inc z80_l			; point to next table entry.
00347E  3  D0 02        	bne :+
003480  3  E6 67        	inc z80_h
003482  3               :
003482  3  A5 66        	lda z80_l
003484  3  A0 0D        	ldy #13
003486  3  91 68        	sta (z80_ix),y			; store new pointer low.
003488  3  A5 67        	lda z80_h
00348A  3  A0 0E        	ldy #14
00348C  3  91 68        	sta (z80_ix),y			; store new pointer high.
00348E  3               grav1:
00348E  3  A5 61        	lda z80_a
003490  3  D0 01        	bne :+				; any movement required?
003492  3  60           	rts				; no, not this time.
003493  3               :
003493  3  A5 61        	lda z80_a
003495  3  C9 80        	cmp #128			; is it up or down?
003497  3  B0 15        	bcs gravu			; it's up.
003499  3               gravd:
003499  3  85 63        	sta z80_b			; set pixels to move.
00349B  3               gravd0:
00349B  3  20 D2 2D     	jsr cangd			; can we go down?
00349E  3  D0 28        	bne gravst			; can't move down, so stop.
0034A0  3  A0 08        	ldy #8
0034A2  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0034A4  3  18           	clc
0034A5  3  69 01        	adc #1
0034A7  3  91 68        	sta (z80_ix),y
0034A9  3  C6 63        	dec z80_b
0034AB  3  D0 EE        	bne gravd0
0034AD  3  60           	rts
0034AE  3               gravu:
0034AE  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0034B0  3  18           	clc
0034B1  3  69 01        	adc #1
0034B3  3  85 63        	sta z80_b			; set pixels to move.
0034B5  3               gravu0:
0034B5  3  20 85 2D     	jsr cangu			; can we go up?
0034B8  3  D0 6E        	bne ifalls			; can't move up, go down next.
0034BA  3  A0 08        	ldy #8
0034BC  3  B1 68        	lda (z80_ix),y
0034BE  3  38           	sec
0034BF  3  E9 01        	sbc #1
0034C1  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0034C3  3  C6 63        	dec z80_b
0034C5  3  D0 EE        	bne gravu0
0034C7  3  60           	rts
0034C8  3               gravst:
0034C8  3  A0 0D        	ldy #13
0034CA  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0034CC  3  85 66        	sta z80_l
0034CE  3  A0 0E        	ldy #14
0034D0  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0034D2  3  85 67        	sta z80_h
0034D4  3               
0034D4  3  A9 00        	lda #0				; null value in pointer.
0034D6  3  A0 0D        	ldy #13
0034D8  3  91 68        	sta (z80_ix),y			; store new pointer low.
0034DA  3  C8           	iny
0034DB  3  91 68        	sta (z80_ix),y			; store new pointer high.
0034DD  3               
0034DD  3  A0 00        	ldy #0
0034DF  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0034E1  3  C9 63        	cmp #99				; is it the end marker?
0034E3  3               evftf:
0034E3  3  F0 01        	beq :+				; yes, fallen too far.
0034E5  3  60           	rts
0034E6  3               :
0034E6  3  4C 9D 38     	jmp evnt15			; EVENT FELLTOOFAR
0034E9  3               
0034E9  3               ;------------------------------------------------
0034E9  3               ; Initiate fall check.
0034E9  3               ;------------------------------------------------
0034E9  3               
0034E9  3               ifall:
0034E9  3  A0 0D        	ldy #13
0034EB  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0034ED  3  85 66        	sta z80_l
0034EF  3  A0 0E        	ldy #14
0034F1  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0034F3  3  85 67        	sta z80_h			; high byte in accumulator.
0034F5  3  05 66        	ora z80_l			; merge in low byte.
0034F7  3  F0 01        	beq :+
0034F9  3  60           	rts				; if either is set, we're already in the air.
0034FA  3               :
0034FA  3  A0 09        	ldy #9
0034FC  3  B1 68        	lda (z80_ix),y			; y coordinate.
0034FE  3  85 rr        	sta dispx
003500  3  A0 08        	ldy #8
003502  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003504  3  18           	clc
003505  3               numsp7:
003505  3  69 09        	adc #SPR_HGT			; add 16 pixels.
003507  3  85 rr        	sta dispy			; set up test coordinates.
003509  3  20 04 2F     	jsr tstbl			; get map address.
00350C  3  20 7D 2E     	jsr plchk			; block, platform check.
00350F  3  F0 01        	beq :+
003511  3  60           	rts				; it's solid, don't fall.
003512  3               :
003512  3  E6 rr        	inc bufaddr			; look right one cell.
003514  3  20 7D 2E     	jsr plchk			; block, platform check.
003517  3  F0 01        	beq :+
003519  3  60           	rts				; it's solid, don't fall.
00351A  3               :
00351A  3  A5 rr        	lda dispx			; y coordinate.
00351C  3  29 07        	and #7				; position straddling block cells.
00351E  3  F0 08        	beq ifalls			; no more checks needed.
003520  3  E6 rr        	inc bufaddr			; look to third cell.
003522  3  20 7D 2E     	jsr plchk			; block, platform check.
003525  3  F0 01        	beq :+
003527  3  60           	rts				; it's solid, don't fall.
003528  3               :
003528  3               ifalls:
003528  3  A9 85        	lda #<jtab			; jump table start.
00352A  3  85 66        	sta z80_l
00352C  3  A9 3C        	lda #>jtab
00352E  3  85 67        	sta z80_h
003530  3               ifal0:
003530  3  E6 66        	inc z80_l			; point to next value.
003532  3  D0 02        	bne :+
003534  3  E6 67        	inc z80_h
003536  3               :
003536  3  A0 00        	ldy #0
003538  3  B1 66        	lda (z80_hl),y			; fetch value.
00353A  3  F0 F4        	beq ifal0			; no, get next value.
00353C  3  C9 63        	cmp #99				; reached end of table?
00353E  3  D0 01        	bne :+
003540  3  60           	rts				; yes, don't fall.
003541  3               :
003541  3  C9 80        	cmp #128			; is it going up?
003543  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003545  3               
003545  3  A0 0D        	ldy #13
003547  3  A5 66        	lda z80_l
003549  3  91 68        	sta (z80_ix),y 			; set jump low.
00354B  3  A0 0E        	ldy #14
00354D  3  A5 67        	lda z80_h
00354F  3  91 68        	sta (z80_ix),y 			; set jump high.
003551  3  60           	rts
003552  3               
003552  3               
003552  3               ;----------------------------------------------------
003552  3               ; Get frame data for a particular sprite.
003552  3               ; Input:
003552  3               ;  a		= framenumer
003552  3               ; Output:
003552  3               ;  hl		= frame address
003552  3               ;
003552  3               ; global:	hl,frmptr
003552  3               ; local:	-
003552  3               ; calls:	-
003552  3               ;----------------------------------------------------
003552  3               
003552  3               gfrm:
003552  3  0A           	asl a	 		 	; multiple of 2.
003553  3  18           	clc
003554  3  6D 17 28     	adc frmptr 			; frames used by game.
003557  3  85 66        	sta z80_l
003559  3  AD 18 28     	lda frmptr+1
00355C  3  69 00        	adc #0
00355E  3  85 67        	sta z80_h 			; point to frame start.
003560  3  60           	rts
003561  3               
003561  3               ;----------------------------------------------------
003561  3               ; Find sprite list for current room.
003561  3               ;
003561  3               ; global:	hl
003561  3               ; local:	x,y
003561  3               ; calls:	-
003561  3               ;----------------------------------------------------
003561  3               
003561  3               sprlst:
003561  3  A9 5A        	lda #<nmedat 			; list of enemy sprites.
003563  3  85 66        	sta z80_l
003565  3  A9 39        	lda #>nmedat
003567  3  85 67        	sta z80_h
003569  3  A6 rr        	ldx scno 			; screen number.
00356B  3  D0 01        	bne sprls2 			; is it the first screen?
00356D  3  60           	rts 				; yes, don't need to search data.
00356E  3               sprls2:
00356E  3  A0 00        	ldy #0
003570  3               sprls1:
003570  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003572  3  C9 FF        	cmp #255			; is it an end marker?
003574  3  F0 0E        	beq sprls0 			; yes, end of this room.
003576  3               
003576  3  18           	clc 				; point to next sprite in list.
003577  3  A5 66        	lda z80_l
003579  3  69 04        	adc #NMESIZ
00357B  3  85 66        	sta z80_l
00357D  3  90 02        	bcc :+
00357F  3  E6 67        	inc z80_h
003581  3               :
003581  3  4C 70 35     	jmp sprls1 			; continue until end of room.
003584  3               sprls0:
003584  3  E6 66        	inc z80_l 			; point to start of next screen.s
003586  3  D0 02        	bne :+
003588  3  E6 67        	inc z80_h
00358A  3               :
00358A  3  CA           	dex
00358B  3  D0 E3        	bne sprls1 			; continue until room found.
00358D  3  60           	rts
00358E  3               
00358E  3               
00358E  3               ;----------------------------------------------------
00358E  3               ; Clear all but a single player sprite.
00358E  3               ;
00358E  3               ; global:	-
00358E  3               ; local:	x,y,ix
00358E  3               ; calls:	-
00358E  3               ;----------------------------------------------------
00358E  3               
00358E  3               nspr:
00358E  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003590  3  85 rr        	sta sprcnt
003592  3  A9 30        	lda #<sprtab 			; sprite table.
003594  3  85 68        	sta z80_x
003596  3  A9 37        	lda #>sprtab
003598  3  85 69        	sta z80_i
00359A  3               nspr0:
00359A  3  A0 00        	ldy #0 				; fetch sprite type.
00359C  3  B1 68        	lda (z80_ix),y 			; is it a player?
00359E  3  F0 1A        	beq nspr1 			; yes, keep this one.
0035A0  3               
0035A0  3  A9 FF        	lda #255
0035A2  3  A0 00        	ldy #0 				; fetch sprite type.
0035A4  3  91 68        	sta (z80_ix),y 			; delete sprite.
0035A6  3  A0 05        	ldy #5
0035A8  3  91 68        	sta (z80_ix),y 			; remove next type.
0035AA  3               
0035AA  3  18           	clc	 			; next sprite.
0035AB  3  A5 68        	lda z80_x
0035AD  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0035AF  3  85 68        	sta z80_x
0035B1  3  90 02        	bcc :+
0035B3  3  E6 69        	inc z80_i
0035B5  3               :
0035B5  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0035B7  3  D0 E1        	bne nspr0
0035B9  3  60           	rts
0035BA  3               nspr1:
0035BA  3  A9 FF        	lda #255
0035BC  3  A0 00        	ldy #0
0035BE  3  91 68        	sta (z80_ix),y 			; delete sprite.
0035C0  3               
0035C0  3  18           	clc	 			; point to next sprite.
0035C1  3  A5 68        	lda z80_x
0035C3  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0035C5  3  85 68        	sta z80_x
0035C7  3  90 02        	bcc :+
0035C9  3  E6 69        	inc z80_i
0035CB  3               :
0035CB  3  C6 rr        	dec sprcnt	 			; one less to do.
0035CD  3  D0 01        	bne nspr2
0035CF  3  60           	rts
0035D0  3               nspr2:
0035D0  3  A9 FF        	lda #255
0035D2  3  A0 00        	ldy #0
0035D4  3  91 68        	sta (z80_ix),y 			; delete sprite.
0035D6  3  A0 05        	ldy #5
0035D8  3  91 68        	sta (z80_ix),y 			; remove next type.
0035DA  3               
0035DA  3  18           	clc	 			; next sprite.
0035DB  3  A5 68        	lda z80_x
0035DD  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0035DF  3  85 68        	sta z80_x
0035E1  3  90 02        	bcc :+
0035E3  3  E6 69        	inc z80_i
0035E5  3               :
0035E5  3  C6 rr        	dec sprcnt	 			; one less space in table.
0035E7  3  D0 E7        	bne nspr2
0035E9  3  60           	rts
0035EA  3               
0035EA  3               ;----------------------------------------------------------
0035EA  3               ; Two initialisation routines.
0035EA  3               ; Initialise sprites - copy everything from list to table.
0035EA  3               ;
0035EA  3               ; global:	-
0035EA  3               ; local:	x,y,ix
0035EA  3               ; calls:	cpsp
0035EA  3               ;----------------------------------------------------------
0035EA  3               
0035EA  3               ispr:
0035EA  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0035EC  3  85 rr        	sta sprcnt
0035EE  3  A9 30        	lda #<sprtab			; sprite table.
0035F0  3  85 68        	sta z80_x
0035F2  3  A9 37        	lda #>sprtab
0035F4  3  85 69        	sta z80_i
0035F6  3               ispr2:
0035F6  3  A0 00        	ldy #0
0035F8  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0035FA  3  C9 FF        	cmp #255 			; is it an end marker?
0035FC  3  D0 01        	bne :+
0035FE  3  60           	rts 				; yes, no more to do.
0035FF  3               :
0035FF  3               ispr1:
0035FF  3  A0 00        	ldy #0
003601  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003603  3  C9 FF        	cmp #255 			; is it enabled yet?
003605  3  D0 08        	bne ispr4			; yes, try another slot.
003607  3               
003607  3  A0 05        	ldy #5
003609  3  B1 68        	lda (z80_ix),y		 	; next type.
00360B  3  C9 FF        	cmp #255 			; is it enabled yet?
00360D  3  F0 10        	beq ispr3 			; no, process this one.
00360F  3               ispr4:
00360F  3  18           	clc 				; next sprite.
003610  3  A5 68        	lda z80_x
003612  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003614  3  85 68        	sta z80_x
003616  3  90 02        	bcc :+
003618  3  E6 69        	inc z80_i
00361A  3               :
00361A  3  C6 rr        	dec sprcnt
00361C  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00361E  3  60           	rts  				; no more room in table.
00361F  3               ispr3:
00361F  3  20 72 36     	jsr cpsp			; initialise a sprite.
003622  3  C6 rr        	dec sprcnt			; one less space in the table.
003624  3  D0 D0        	bne ispr2
003626  3  60           	rts
003627  3               
003627  3               
003627  3               ;-----------------------------------------------------------------------
003627  3               ; Initialise sprites - but not player, we're keeping the old one.
003627  3               ;
003627  3               ; global:	-
003627  3               ; local:	x,y,ix
003627  3               ; calls:	cpsp
003627  3               ;-----------------------------------------------------------------------
003627  3               
003627  3               kspr:
003627  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003629  3  A9 30        	lda #<sprtab 			; sprite table.
00362B  3  85 68        	sta z80_x
00362D  3  A9 37        	lda #>sprtab
00362F  3  85 69        	sta z80_i
003631  3               kspr2:
003631  3  A0 00        	ldy #0
003633  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003635  3  C9 FF        	cmp #255 			; is it an end marker?
003637  3  D0 01        	bne :+
003639  3  60           	rts 				; yes, no more to do.
00363A  3               :
00363A  3  C9 00        	cmp #0
00363C  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00363E  3               
00363E  3  18           	clc 				; next sprite.
00363F  3  A5 66        	lda z80_l
003641  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003643  3  85 66        	sta z80_l
003645  3  90 02        	bcc :+
003647  3  E6 67        	inc z80_h
003649  3               :
003649  3  4C 31 36     	jmp kspr2
00364C  3               kspr1:
00364C  3  A0 00        	ldy #0 				; fetch sprite type.
00364E  3  B1 68        	lda (z80_ix),y
003650  3  C9 FF        	cmp #255 			; is it enabled yet?
003652  3  D0 08        	bne kspr4 			; yes, try another slot.
003654  3               
003654  3  A0 05        	ldy #5 				; next type.
003656  3  B1 68        	lda (z80_ix),y
003658  3  C9 FF        	cmp #255 			; is it enabled yet?
00365A  3  F0 0F        	beq kspr3 			; no, process this one.
00365C  3               kspr4:
00365C  3  18           	clc 				; next sprite.
00365D  3  A5 68        	lda z80_x
00365F  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003661  3  85 68        	sta z80_x
003663  3  90 02        	bcc :+
003665  3  E6 69        	inc z80_i
003667  3               :
003667  3  CA           	dex	 			; repeat for remaining sprites.
003668  3  D0 E2        	bne kspr1
00366A  3  60           	rts  				; no more room in table.
00366B  3               kspr3:
00366B  3  20 72 36     	jsr cpsp 			; copy sprite to table.
00366E  3  CA           	dex	 			; one less space in the table.
00366F  3  D0 C0        	bne kspr2
003671  3  60           	rts
003672  3               
003672  3               ;----------------------------------------------
003672  3               ; Copy sprite from list to table.
003672  3               ;
003672  3               ; global:	hl,ix
003672  3               ; local:	y
003672  3               ; calls:	evnt09
003672  3               ;----------------------------------------------
003672  3               
003672  3               cpsp:
003672  3  A0 00        	ldy #0				; fetch byte from table.
003674  3  B1 66        	lda (z80_hl),y
003676  3  91 68        	sta (z80_ix),y			; set up type.
003678  3  A0 05        	ldy #PAM1ST
00367A  3  91 68        	sta (z80_ix),y 			; set up type.
00367C  3               
00367C  3  E6 66        	inc z80_l 			; move to next byte.
00367E  3  D0 02        	bne :+
003680  3  E6 67        	inc z80_h
003682  3               :
003682  3  A0 00        	ldy #0 				; fetch byte from table.
003684  3  B1 66        	lda (z80_hl),y
003686  3  A0 06        	ldy #6
003688  3  91 68        	sta (z80_ix),y			; set up image.
00368A  3               
00368A  3  E6 66        	inc z80_l 			; move to next byte.
00368C  3  D0 02        	bne :+
00368E  3  E6 67        	inc z80_h
003690  3               :
003690  3  A0 00        	ldy #0
003692  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003694  3  A0 08        	ldy #8
003696  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003698  3               
003698  3  A9 C8        	lda #200 			; set initial coordinate off screen.
00369A  3  A0 03        	ldy #3
00369C  3  91 68        	sta (z80_ix),y
00369E  3               
00369E  3  E6 66        	inc z80_l 			; move to next byte.
0036A0  3  D0 02        	bne :+
0036A2  3  E6 67        	inc z80_h
0036A4  3               :
0036A4  3  A0 00        	ldy #0 				; fetch byte from table.
0036A6  3  B1 66        	lda (z80_hl),y
0036A8  3  A0 09        	ldy #9
0036AA  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0036AC  3               
0036AC  3  E6 66        	inc z80_l 			; move to next byte.
0036AE  3  D0 02        	bne :+
0036B0  3  E6 67        	inc z80_h
0036B2  3               :
0036B2  3  A9 00        	lda #0				; zeroes in accumulator.
0036B4  3  A0 07        	ldy #7 				; reset frame number.
0036B6  3  91 68        	sta (z80_ix),y
0036B8  3  A0 0A        	ldy #10 			; reset direction.
0036BA  3  91 68        	sta (z80_ix),y
0036BC  3  A0 0D        	ldy #13				; reset jump pointer low.
0036BE  3  91 68        	sta (z80_ix),y
0036C0  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0036C2  3  91 68        	sta (z80_ix),y
0036C4  3               
0036C4  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0036C6  3  A0 10        	ldy #16
0036C8  3  91 68        	sta (z80_ix),y
0036CA  3               evis0:
0036CA  3  A5 69        	lda z80_i
0036CC  3  48           	pha
0036CD  3  A5 68        	lda z80_x
0036CF  3  48           	pha
0036D0  3  A5 67        	lda z80_h
0036D2  3  48           	pha
0036D3  3  A5 66        	lda z80_l
0036D5  3  48           	pha
0036D6  3               
0036D6  3  20 34 38     	jsr evnt09 			; perform event.
0036D9  3               
0036D9  3  68           	pla
0036DA  3  85 66        	sta z80_l
0036DC  3  68           	pla
0036DD  3  85 67        	sta z80_h
0036DF  3  68           	pla
0036E0  3  85 68        	sta z80_x
0036E2  3  68           	pla
0036E3  3  85 69        	sta z80_i
0036E5  3               
0036E5  3  18           	clc
0036E6  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0036E8  3  69 11        	adc #TABSIZ		 	; next sprite.
0036EA  3  85 68        	sta z80_x
0036EC  3  90 02        	bcc :+
0036EE  3  E6 69        	inc z80_i
0036F0  3               :
0036F0  3  60           	rts
0036F1  3               
0036F1  3               
0036F1  3               ;-------------------------------------
0036F1  3               ; Clear the play area window.
0036F1  3               ;-------------------------------------
0036F1  3               
0036F1  3               clw:
0036F1  3  AD 1F 28     	lda wintop			; get coordinates of window.
0036F4  3  85 rr        	sta dispy			; put into dispx for calculation.
0036F6  3  AD 20 28     	lda winlft
0036F9  3  85 rr        	sta dispx
0036FB  3               
0036FB  3  AD 21 28     	lda winhgt			; height of window.
0036FE  3  85 rr        	sta rrow			; copy to b register.
003700  3               clw3:
003700  3  AD 22 28     	lda winwid 			; width of window.
003703  3  85 rr        	sta rcol
003705  3               clw2:
003705  3  20 63 2C     	jsr gprad 			; get print address.
003708  3  A9 00        	lda #0				; zero byte to write.
00370A  3  A2 07        	ldx #7				; pixel height of each cell.
00370C  3               clw1:
00370C  3  BC 9D 2C     	ldy scrtab,x
00370F  3  91 rr        	sta (scraddr),y 			; copy to screen.
003711  3  CA           	dex				; next screen row down.
003712  3  10 F8        	bpl clw1
003714  3               
003714  3  E6 rr        	inc dispx			; next column.
003716  3  C6 rr        	dec rcol			; one less to do.
003718  3  D0 EB        	bne clw2			; repeat for remaining columns.
00371A  3               
00371A  3  AD 20 28     	lda winlft			; get left edge.
00371D  3  85 rr        	sta dispx 			; reset x.
00371F  3  E6 rr        	inc dispy 			; next line down.
003721  3               
003721  3  C6 rr        	dec rrow
003723  3  D0 DB        	bne clw3			; repeat down the screen.
003725  3               
003725  3  AD 1F 28     	lda wintop			; get coordinates of window.
003728  3  85 rr        	sta chary			; put into display position.
00372A  3  AD 20 28     	lda winlft
00372D  3  85 rr        	sta charx
00372F  3  60           	rts
003730  3               
003730  3               
003730  3               ;----------------------------------------------------------
003730  3               ; Effects code.
003730  3               ; Ticker routine is called 25 times per second.
003730  3               ;
003730  3               ; HL = txtscr = left text screen address
003730  3               ; DE = txtscr+txtwid-1 = right text screen address
003730  3               ; BC = txtpos = text scroller position
003730  3               ;
003730  3               ;----------------------------------------------------------
003730  3               
003730  3               .if sflag
003730  3               scrly:
003730  3               	rts
003730  3               	.word txtscr         	; get left screen address.
003730  3               	sta scr_l
003730  3               	lda txtscr+1
003730  3               	sta scr_l+1
003730  3               	sta scr_r+1
003730  3               
003730  3               	stx xtmp
003730  3               
003730  3               	clc         		; get right screen address.
003730  3               	lda scr_l
003730  3               	adc txtwid
003730  3               	sta scr_r
003730  3               	dec scr_r
003730  3               scrly1:
003730  3               	ldy txtwid		; set txtwide
003730  3               	dey
003730  3               	clc
003730  3               scrly0:
003730  3               	lda (scr_l),y		; scroll 1 line
003730  3               	rol a
003730  3               	sta (scr_l),y
003730  3               	dey
003730  3               	bpl scrly0
003730  3               
003730  3               	clc			; point to next line
003730  3               	lda scr_l
003730  3               	adc #32
003730  3               	sta scr_l
003730  3               	bcc scrly1		; repeat 8 times
003730  3               
003730  3               	lda txtpos 		; get text pointer.
003730  3               	sta scr_txt
003730  3               	lda txtpos+1
003730  3               	sta scr_txt+1
003730  3               
003730  3               	ldy #0
003730  3               	lda (scr_txt),y 		; find character we're displaying.
003730  3               	and #127 		; remove end marker bit if applicable.
003730  3               	cmp #13			; is it newline?
003730  3               	bne scrly5 		; no, it's okay.
003730  3               	lda #32			; convert to a space instead.
003730  3               scrly5:
003730  3               	sta fntaddr		; calculate char address
003730  3               	lda #0
003730  3               	sta fntaddr+1
003730  3               	asl fntaddr  		; multiply char by 8.
003730  3               	rol fntaddr+1
003730  3               	asl fntaddr
003730  3               	rol fntaddr+1
003730  3               	asl fntaddr
003730  3               	rol fntaddr+1
003730  3               	lda fntaddr
003730  3               	clc
003730  3               	adc #<(FONT-256)
003730  3               	sta scrly3+1		; that's the low byte.
003730  3               	lda fntaddr+1
003730  3               	adc #>(FONT-256)
003730  3               	sta scrly3+2		; add displacement.
003730  3               
003730  3               	ldx #0
003730  3               scrly3:
003730  3               	lda $3333,x		; get image of char line.
003730  3               	and txtbit
003730  3               	beq scrly2		; don't plot pixel
003730  3               	ldy scrline,x
003730  3               	lda (scr_r),y
003730  3               	clc
003730  3               	ora #1
003730  3               	sta (scr_r),y		; plot pixel
003730  3               scrly2:
003730  3               	inx			; next line of char.
003730  3               	cpx #8
003730  3               	bne scrly3
003730  3               
003730  3               	lsr txtbit		; bit of text to display.
003730  3               	bcs :+
003730  3               	rts
003730  3               :
003730  3               	ldy #0
003730  3               	lda (scr_txt),y 	; what was the character?
003730  3               	asl a	  		; end of message?
003730  3               	bcs scrly4
003730  3               	inc txtpos
003730  3               	bne :+
003730  3               	inc txtpos+1
003730  3               :
003730  3               	jmp scrly6 		; not yet - continue.
003730  3               scrly4:
003730  3               	lda txtini 		; start of scrolling message.
003730  3               	sta txtpos
003730  3               	lda txtini+1
003730  3               	sta txtpos+1
003730  3               scrly6:
003730  3               	lda #128
003730  3               	sta txtbit
003730  3               	ldx xtmp
003730  3               	rts
003730  3               
003730  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003730  3               
003730  3               ;-------------------------------------------------------
003730  3               ; Entry TICKER command
003730  3               ;
003730  3               ; Entry:
003730  3               ;  z80_b = message nr
003730  3               ;  z80_c = width
003730  3               ;-------------------------------------------------------
003730  3               
003730  3               iscrly:
003730  3               	jsr prescr 		; set up display position.
003730  3               
003730  3               	lda #<msgdat 		; text messages.
003730  3               	sta z80_l
003730  3               	lda #>msgdat
003730  3               	sta z80_h
003730  3               
003730  3               	lda z80_c 		; width.
003730  3               	sec
003730  3               	sbc #1			; subtract one.
003730  3               	cmp #32 		; is it between 1 and 32?
003730  3               	bcc :+
003730  3               	lda #$60
003730  3               	jmp iscrl0		; no, disable messages.
003730  3               :
003730  3               	ldx z80_b		; message number.
003730  3               	jsr getwrd 		; find message start.
003730  3               
003730  3               	lda z80_l		; set initial text position.
003730  3               	sta txtini
003730  3               	lda z80_h
003730  3               	sta txtini+1
003730  3               
003730  3               	lda #$ad		; code for lda adrr
003730  3               iscrl0:
003730  3               	sta scrly		; enable/disable scrolling routine.
003730  3               
003730  3               	jsr prescr 		; set up display position.
003730  3               	jsr gprad 		; get print address.
003730  3               
003730  3               	lda scraddr 		; set text screen address.
003730  3               	sta txtscr
003730  3               	lda scraddr+1
003730  3               	sta txtscr+1
003730  3               
003730  3               	lda z80_c		; width.
003730  3               	sta txtwid		; set width in working storage.
003730  3               
003730  3               	lda #128 		; start with leftmost bit.
003730  3               	sta txtbit
003730  3               
003730  3               	jmp scrly4
003730  3               .endif
003730  3               
003730  3               ;------------------------------------------------------------------
003730  3               ; Dig routine, conditional assembly depending on dflag
003730  3               ;------------------------------------------------------------------
003730  3               .if dflag
003730  3               dig:
003730  3               	and #3
003730  3               	beq digr		; dig right
003730  3               	cmp #1
003730  3               	beq digl		; dig left
003730  3               	cmp #2
003730  3               	beq digd		; dig down
003730  3               
003730  3               ; Dig up.
003730  3               
003730  3               digu:				; dig up
003730  3               	ldy #8
003730  3               	lda (z80_ix),y
003730  3               	sec
003730  3               	sbc #2
003730  3               	sta dispy		; set y
003730  3               
003730  3               	iny
003730  3               	lda (z80_ix),y
003730  3               	sta dispx		; set x
003730  3               	jmp digv
003730  3               
003730  3               ; Dig down.
003730  3               
003730  3               digd:
003730  3               	ldy #9
003730  3               	lda (z80_ix),y
003730  3               	sta dispx		; set y
003730  3               
003730  3               	dey
003730  3               	clc
003730  3               	lda (z80_ix),y
003730  3               	adc #16
003730  3               	sta dispy		; set y
003730  3               	jmp digv
003730  3               
003730  3               ; Dig left.
003730  3               
003730  3               digl:
003730  3               	ldy #8
003730  3               	lda (z80_ix),y
003730  3               	sta dispy		; set y
003730  3               
003730  3               	iny
003730  3               	lda (z80_ix),y
003730  3               	sec
003730  3               	sbc #2			; x=x-2
003730  3               	sta dispx		; set x
003730  3               	jmp digh
003730  3               
003730  3               ; Dig right.
003730  3               
003730  3               digr:
003730  3               	ldy #8
003730  3               	lda (z80_ix),y
003730  3               	sta dispy		; set y
003730  3               
003730  3               	iny
003730  3               	lda (z80_ix),y
003730  3               	clc
003730  3               	adc #16
003730  3               	sta dispx		; set x+16
003730  3               	jmp digh
003730  3               
003730  3               ; Vertical digging
003730  3               
003730  3               digv:
003730  3               	jsr tstbl		; check blocktype in MAP
003730  3               	jsr fdchk		; test if FODDER
003730  3               
003730  3               	clc
003730  3               	lda dispx		; look 1 cell down
003730  3               	adc #8
003730  3               	sta dispx
003730  3               	jsr tstbl		; check blocktype in MAP
003730  3               	jsr fdchk
003730  3               	lda dispx
003730  3               	and #7
003730  3               	bne :+
003730  3               	rts
003730  3               :
003730  3               	clc
003730  3               	lda dispx		; look 1 cell down
003730  3               	adc #8
003730  3               	sta dispx
003730  3               	jsr tstbl		; check blocktype in MAP
003730  3               	jmp fdchk
003730  3               
003730  3               ; Horizontal digging
003730  3               
003730  3               digh:
003730  3               	jsr tstbl		; check blocktype in MAP
003730  3               	jsr fdchk		; test if FODDER
003730  3               
003730  3               	clc
003730  3               	lda dispy		; look 1 cell down
003730  3               	adc #8
003730  3               	sta dispy
003730  3               	jsr tstbl		; check blocktype in MAP
003730  3               	jsr fdchk
003730  3               	lda dispy
003730  3               	and #7
003730  3               	bne :+
003730  3               	rts
003730  3               :
003730  3               	clc
003730  3               	lda dispy		; look 1 cell down
003730  3               	adc #8
003730  3               	sta dispy
003730  3               	jsr tstbl		; check blocktype in MAP
003730  3               	jmp fdchk
003730  3               
003730  3               digcnt:	.byte 0
003730  3               
003730  3               .endif
003730  3               
003730  3               ;------------------------------------------------------------------
003730  3               ; Sprite table
003730  3               ;------------------------------------------------------------------
003730  3               
003730  3               
003730  3               ; ix+0  = type.
003730  3               ; ix+1  = sprite image number.
003730  3               ; ix+2  = frame.
003730  3               ; ix+3  = y coord.
003730  3               ; ix+4  = x coord.
003730  3               
003730  3               ; ix+5  = new type.
003730  3               ; ix+6  = new image number.
003730  3               ; ix+7  = new frame.
003730  3               ; ix+8  = new y coord.
003730  3               ; ix+9  = new x coord.
003730  3               
003730  3               ; ix+10 = direction.
003730  3               ; ix+11 = parameter 1.
003730  3               ; ix+12 = parameter 2.
003730  3               ; ix+13 = jump pointer low.
003730  3               ; ix+14 = jump pointer high.
003730  3               ; ix+15 = data pointer low.
003730  3               ; ix+16 = data pointer high.
003730  3               
003730  3               ; block NUMSPR * TABSIZ,255
003730  3               
003730  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003734  3  FF FF FF FF  
003738  3  FF FF FF FF  
0037FC  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003800  3  FF FF FF 00  
003804  3  C0 78 00 00  
00380D  3  07           roomtb:	.byte 7                      ; start room map offset.
00380E  3               
00380E  3               ; User routine.  Put your own code in here to be called with USER instruction.
00380E  3               ; if USER has an argument it will be passed in the accumulator.
00380E  3               
00380E  3               user:
00380E  3               	.include "user.inc"
00380E  4  60           	rts
00380F  4               
00380F  3               
00380F  3               setfgcol:
00380F  3  29 07        	and #7
003811  3  8D 1E 38     	sta fcolour
003814  3  60           	rts
003815  3               
003815  3               setbgcol:
003815  3  29 07        	and #7
003817  3  18           	clc
003818  3  69 10        	adc #16
00381A  3  8D 1F 38     	sta bcolour
00381D  3  60           	rts
00381E  3               
00381E  3  07           fcolour:	.byte t_white
00381F  3  17           bcolour:	.byte g_white
003820  3               
003820  3               ; Everything below here will be generated by the editors.
003820  3               
003820  3  60                   rts
003821  3               WINDOWTOP = 0
003821  3               WINDOWLFT = 0
003821  3               WINDOWHGT = 20
003821  3               WINDOWWID = 25 ;b
003821  3               MAPWID = 3
003821  3  FF FF FF             .byte 255,255,255
003824  3               mapdat:
003824  3  FF 00 FF             .byte 255,0,255
003827  3  FF FF FF             .byte 255,255,255
00382A  3  01           stmap:  .byte 1
00382B  3               
00382B  3               evnt00:
00382B  3  60                   rts
00382C  3               evnt01:
00382C  3  60                   rts
00382D  3               evnt02:
00382D  3  60                   rts
00382E  3               evnt03:
00382E  3  60                   rts
00382F  3               evnt04:
00382F  3  60                   rts
003830  3               evnt05:
003830  3  60                   rts
003831  3               evnt06:
003831  3  60                   rts
003832  3               evnt07:
003832  3  60                   rts
003833  3               evnt08:
003833  3  60                   rts
003834  3               evnt09:
003834  3  60                   rts
003835  3               evnt10:
003835  3  A9 00                lda #0		; AT
003837  3  85 rr                sta chary
003839  3  A9 01                lda #1
00383B  3  85 rr                sta charx
00383D  3  A9 01                lda #1		; PRINTMODE
00383F  3  85 rr                sta prtmod
003841  3  A9 00                lda #0		; PRINT
003843  3  20 86 2F             jsr dmsg
003846  3  A9 00                lda #0		; PRINTMODE
003848  3  85 rr                sta prtmod
00384A  3  A9 03                lda #3		; AT
00384C  3  85 rr                sta chary
00384E  3  A9 01                lda #1
003850  3  85 rr                sta charx
003852  3  A9 01                lda #1		; PRINT
003854  3  20 86 2F             jsr dmsg
003857  3  A5 rr                lda clock	; DISPLAY
003859  3  20 C9 33             jsr disply
00385C  3  A9 02                lda #2		; PRINT
00385E  3  20 86 2F             jsr dmsg
003861  3  A9 06                lda #6		; AT
003863  3  85 rr                sta chary
003865  3  A9 01                lda #1
003867  3  85 rr                sta charx
003869  3  A9 03                lda #3		; PRINT
00386B  3  20 86 2F             jsr dmsg
00386E  3  A5 rr                lda clock		; DISPLAYCLOCK
003870  3  85 65                sta z80_d
003872  3  A9 3C                lda #60
003874  3  85 64                sta z80_e
003876  3  20 54 2A             jsr idiv
003879  3  48                   pha
00387A  3  A5 65                lda z80_d
00387C  3  20 C9 33             jsr disply
00387F  3  E6 rr                inc charx
003881  3  A9 F1                lda #<displ0
003883  3  85 62                sta z80_c
003885  3  A9 33                lda #>displ0
003887  3  85 63                sta z80_b
003889  3  68                   pla
00388A  3  20 06 2A             jsr num2dd
00388D  3  20 D8 33             jsr displ1
003890  3  A9 04                lda #4		; PRINT
003892  3  20 86 2F             jsr dmsg
003895  3  60                   rts
003896  3               evnt11:
003896  3  60                   rts
003897  3               evnt12:
003897  3  20 2C 3D             jsr cls		; CLS
00389A  3  60                   rts
00389B  3               evnt13:
00389B  3  60                   rts
00389C  3               evnt14:
00389C  3  60                   rts
00389D  3               evnt15:
00389D  3  60                   rts
00389E  3               evnt16:
00389E  3  60                   rts
00389F  3               evnt17:
00389F  3  60                   rts
0038A0  3               evnt18:
0038A0  3  60                   rts
0038A1  3               evnt19:
0038A1  3  60                   rts
0038A2  3               evnt20:
0038A2  3  60                   rts
0038A3  3  60           ptcusr: rts
0038A4  3               msgdat:
0038A4  3  43 4C 4F 43          .byte "CLOCK TEST:",160
0038A8  3  4B 20 54 45  
0038AC  3  53 54 3A A0  
0038B0  3  43 55 52 52          .byte "CURRENT CLOCK:",160
0038B4  3  45 4E 54 20  
0038B8  3  43 4C 4F 43  
0038BF  3  20 A0                .byte " ",160
0038C1  3  43 55 52 52          .byte "CURRENT TIME:",160
0038C5  3  45 4E 54 20  
0038C9  3  54 49 4D 45  
0038CF  3  20 A0                .byte " ",160
0038D1  3               nummsg:
0038D1  3  05                   .byte 5
0038D2  3               chgfx:
0038D2  3  00 01                .byte 0,1
0038D4  3               bprop:
0038D4  3  00                   .byte 0
0038D5  3               sprgfx:
0038D5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0038D9  3  00 00 00 00  
0038DD  3  00 00 00 00  
0038E9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0038ED  3  00 00 00 00  
0038F1  3  00 00 00 00  
0038FD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003901  3  00 00 00 00  
003905  3  00 00 00 00  
003911  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003915  3  00 00 00 00  
003919  3  00 00 00 00  
003925  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003929  3  00 00 00 00  
00392D  3  00 00 00 00  
003939  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00393D  3  00 00 00 00  
003941  3  00 00 00 00  
00394D  3               frmlst:
00394D  3  00 01 01 00          .byte 0,1,1,0
003951  3               scdat:
003951  3  06 00                .word 6
003953  3  FF 00 00 FF          .byte 255,0,0,255,0,244
003957  3  00 F4        
003959  3               numsc:
003959  3  01                   .byte 1
00395A  3               nmedat:
00395A  3  00 00 28 28          .byte 0,0,40,40,255
00395E  3  FF           
00395F  3               NUMOBJ = 1
00395F  3               objdta:
00395F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,40,40,254,40,40
003963  3  00 00 00 00  
003967  3  00 00 00 00  
003985  3               font:
003985  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003989  3  00 00 00 00  
00398D  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003991  3  30 00 30 00  
003995  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003999  3  00 00 00 00  
00399D  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0039A1  3  6C FE 6C 00  
0039A5  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0039A9  3  7E 1E 7E 18  
0039AD  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0039B1  3  30 6E CE 00  
0039B5  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0039B9  3  7E CC 7E 00  
0039BD  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0039C1  3  00 00 00 00  
0039C5  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0039C9  3  18 18 0C 00  
0039CD  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0039D1  3  30 30 60 00  
0039D5  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0039D9  3  7E 18 3C 00  
0039DD  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0039E1  3  7E 18 18 00  
0039E5  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0039E9  3  00 18 18 30  
0039ED  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0039F1  3  7E 00 00 00  
0039F5  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0039F9  3  00 38 38 00  
0039FD  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003A01  3  18 30 60 00  
003A05  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003A09  3  F6 E6 7C 00  
003A0D  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003A11  3  18 18 7E 00  
003A15  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003A19  3  7C C0 FE 00  
003A1D  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003A21  3  06 C6 7C 00  
003A25  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003A29  3  D8 FE 18 00  
003A2D  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003A31  3  06 C6 7C 00  
003A35  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003A39  3  C6 C6 7C 00  
003A3D  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003A41  3  18 30 30 00  
003A45  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003A49  3  C6 C6 7C 00  
003A4D  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003A51  3  7E 06 7C 00  
003A55  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003A59  3  00 00 30 00  
003A5D  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003A61  3  00 30 30 60  
003A65  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003A69  3  30 18 0C 00  
003A6D  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003A71  3  00 7E 00 00  
003A75  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003A79  3  0C 18 30 00  
003A7D  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003A81  3  18 00 18 00  
003A85  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003A89  3  FE C0 7C 00  
003A8D  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003A91  3  FE C6 C6 00  
003A95  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003A99  3  C6 C6 FC 00  
003A9D  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003AA1  3  C0 C6 7C 00  
003AA5  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
003AA9  3  C6 CC F8 00  
003AAD  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003AB1  3  C0 C0 FE 00  
003AB5  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
003AB9  3  C0 C0 C0 00  
003ABD  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
003AC1  3  DE C6 7C 00  
003AC5  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
003AC9  3  C6 C6 C6 00  
003ACD  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
003AD1  3  18 18 7E 00  
003AD5  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
003AD9  3  C6 C6 7C 00  
003ADD  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
003AE1  3  D8 CC C6 00  
003AE5  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
003AE9  3  C0 C0 FE 00  
003AED  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
003AF1  3  C6 C6 C6 00  
003AF5  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003AF9  3  DE CE C6 00  
003AFD  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
003B01  3  C6 C6 7C 00  
003B05  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003B09  3  FC C0 C0 00  
003B0D  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003B11  3  F6 DE 7C 00  
003B15  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003B19  3  FC CC C6 00  
003B1D  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003B21  3  06 C6 7C 00  
003B25  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003B29  3  30 30 30 00  
003B2D  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003B31  3  C6 C6 7C 00  
003B35  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003B39  3  C6 6C 38 00  
003B3D  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003B41  3  C6 FE 6C 00  
003B45  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003B49  3  38 6C C6 00  
003B4D  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003B51  3  30 30 30 00  
003B55  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003B59  3  30 60 FE 00  
003B5D  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003B61  3  18 18 1E 00  
003B65  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003B69  3  30 18 0C 00  
003B6D  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003B71  3  30 30 F0 00  
003B75  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003B79  3  30 30 30 00  
003B7D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003B81  3  00 00 00 FF  
003B85  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003B89  3  60 60 FE 00  
003B8D  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003B91  3  7C CC 7C 00  
003B95  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
003B99  3  66 66 7C 00  
003B9D  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003BA1  3  60 60 3C 00  
003BA5  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
003BA9  3  CC CC 7C 00  
003BAD  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
003BB1  3  F8 C0 7C 00  
003BB5  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
003BB9  3  30 30 30 00  
003BBD  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
003BC1  3  CC 7C 0C 78  
003BC5  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
003BC9  3  CC CC CC 00  
003BCD  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
003BD1  3  30 30 78 00  
003BD5  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
003BD9  3  0C 0C 6C 38  
003BDD  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
003BE1  3  70 78 6C 00  
003BE5  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
003BE9  3  30 30 1C 00  
003BED  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
003BF1  3  FC FC FC 00  
003BF5  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
003BF9  3  CC CC CC 00  
003BFD  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
003C01  3  CC CC 78 00  
003C05  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003C09  3  CC F8 C0 C0  
003C0D  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
003C11  3  CC 7C 0C 0E  
003C15  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003C19  3  60 60 60 00  
003C1D  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003C21  3  78 0C F8 00  
003C25  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003C29  3  30 30 1C 00  
003C2D  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003C31  3  CC CC 78 00  
003C35  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003C39  3  78 78 30 00  
003C3D  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003C41  3  FC FC 78 00  
003C45  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003C49  3  30 78 CC 00  
003C4D  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003C51  3  CC 7C 0C 78  
003C55  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003C59  3  30 60 FC 00  
003C5D  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003C61  3  18 18 1E 00  
003C65  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003C69  3  18 18 18 00  
003C6D  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003C71  3  30 30 F0 00  
003C75  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003C79  3  00 00 00 00  
003C7D  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003C81  3  E3 BB C6 7C  
003C85  3               jtab:
003C85  3  63                   .byte 99
003C86  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
003C8A  3  20 4E 4D 31  
003C8E  3  32 33 34     
003C91  3               
003C91  2               
003C91  1               	.include "lib.inc"
003C91  2               ;----------------------------------------------------------------------
003C91  2               ; System 5 depending variables and routines
003C91  2               ;----------------------------------------------------------------------
003C91  2               
003C91  2               ; Flags
003C91  2               
003C91  2               	real		= 0		; 0=emulator, 1=real system5
003C91  2               
003C91  2               ; Global variables
003C91  2               
003C91  2               	t_red		= 1		; Text colour definition filters
003C91  2               	t_green		= 2
003C91  2               	t_yellow	= 3
003C91  2               	t_blue		= 4
003C91  2               	t_magenta	= 5
003C91  2               	t_cyan		= 6
003C91  2               	t_white		= 7
003C91  2               
003C91  2               	g_red		= 17		; Graphics colour definition filters
003C91  2               	g_green		= 18
003C91  2               	g_yellow	= 19
003C91  2               	g_blue		= 20
003C91  2               	g_magenta	= 21
003C91  2               	g_cyan		= 22
003C91  2               	g_white		= 23
003C91  2               
003C91  2               	ScrWidth	= 40
003C91  2               	ScrHeight	= 25
003C91  2               
003C91  2               .if real=1
003C91  2               	IRQtime		= 20000
003C91  2               .else
003C91  2               	IRQtime		= 40000
003C91  2               .endif
003C91  2               
003C91  2               ; System constants
003C91  2               
003C91  2               	IRQVEC		= $0204		; Interrupt vector
003C91  2               	ScreenAddr	= $0400		; Startaddress video RAM
003C91  2               
003C91  2               	MC6845_Reg	= $0800		; MC6845 CRT controller register ptr
003C91  2               	MC6845_Dat	= $0801		; MC6845 CRT controller data
003C91  2               
003C91  2               	VIA1		= $0e20
003C91  2               	PORT_A		= VIA1+$1	; Keyboard
003C91  2               	Timer1_Low  	= VIA1+$4	; Timer 1 low byte
003C91  2               	Timer1_High 	= VIA1+$5	; Timer 1 high byte
003C91  2               	Timer2_Low	= VIA1+$8	; Timer 2 low byte
003C91  2               	Timer2_High	= VIA1+$9	; Timer 2 high byte
003C91  2               	ACR		= VIA1+$b	; Auxiliary Control Register
003C91  2               	IFR		= VIA1+$d 	; Interrupt Flag Register
003C91  2               	IER		= VIA1+$e	; Interupt Enable Register
003C91  2               
003C91  2               	MAP 		= $D800		; properties map buffer (4x256 bytes)
003C91  2               	SCADTB_lb 	= $DC00		; screen address table lo-byte (256 bytes)
003C91  2               	SCADTB_hb 	= $DD00		; screen address table hi-byte (256 bytes)
003C91  2               	SHRAPN 		= $DE00		; shrapnel table (55x6 bytes)
003C91  2               	V_SPR_PTR	= $DF4A		; Vertical spriteframe pointer (75 bytes)
003C91  2               
003C91  2               ; System calls
003C91  2               
003C91  2               	OS_CLI   = $FFF7
003C91  2               	OSBYTE   = $FFF4
003C91  2               	OSWORD   = $FFF1
003C91  2               	OSWRCH   = $FFEE
003C91  2               	OSWRCR   = $FFEC
003C91  2               	OSNEWL   = $FFE7
003C91  2               	OSASCI   = $FFE3
003C91  2               	OSRDCH   = $FFE0
003C91  2               	OSFILE   = $FFDD
003C91  2               	OSARGS   = $FFDA
003C91  2               	OSBGET   = $FFD7
003C91  2               	OSBPUT   = $FFD4
003C91  2               	OSGBPB   = $FFD1
003C91  2               	OSFIND   = $FFCE
003C91  2               
003C91  2               ; To be removed
003C91  2               
003C91  2               	SCRSYNC	= $fff4
003C91  2               
003C91  2               ;======================================================================
003C91  2               ; System depending routines
003C91  2               ;======================================================================
003C91  2               
003C91  2               ;----------------------------------------------------------------------
003C91  2               ; Init hardware
003C91  2               ;----------------------------------------------------------------------
003C91  2               
003C91  2               init:
003C91  2               
003C91  2               ; Set up screen address table.
003C91  2               
003C91  2               setsat:
003C91  2  A9 00        	lda #<ScreenAddr	; start of screen.
003C93  2  85 rr        	sta scraddr
003C95  2  A9 04        	lda #>ScreenAddr
003C97  2  85 rr        	sta scraddr+1
003C99  2               
003C99  2  A2 00        	ldx #0
003C9B  2  A0 00        	ldy #0			; vertical lines on screen.
003C9D  2               setsa0:
003C9D  2  A5 rr        	lda scraddr
003C9F  2  99 00 DC     	sta SCADTB_lb,y		; write low byte.
003CA2  2  A5 rr        	lda scraddr+1
003CA4  2  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
003CA6  2  90 02        	bcc :+
003CA8  2  09 F0        	ora #$F0		; plot sprites in rom if of screen
003CAA  2               :
003CAA  2  99 00 DD     	sta SCADTB_hb,y		; write high byte.
003CAD  2  E8           	inx
003CAE  2  E0 03        	cpx #3
003CB0  2  D0 05        	bne :+
003CB2  2  20 E2 32     	jsr nline		; next line down.
003CB5  2  A2 00        	ldx #0
003CB7  2               :
003CB7  2  C8           	iny			; next position in table.
003CB8  2  D0 E3        	bne setsa0
003CBA  2               
003CBA  2               ; Set up vertical sprite pointer table
003CBA  2               
003CBA  2  A0 00        	ldy #0
003CBC  2  A9 00        	lda #0
003CBE  2               vspriteloop:
003CBE  2  99 4A DF     	sta V_SPR_PTR,y
003CC1  2  18           	clc
003CC2  2  69 14        	adc #20
003CC4  2  C9 3C        	cmp #60
003CC6  2  D0 02        	bne :+
003CC8  2  A9 00        	lda #0
003CCA  2               :
003CCA  2  C8           	iny
003CCB  2  C0 4B        	cpy #75
003CCD  2  D0 EF        	bne vspriteloop
003CCF  2               
003CCF  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
003CCF  2               ; Hack for MAME to use VDU40x25
003CCF  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
003CCF  2               
003CCF  2               ; Init VDU40x25
003CCF  2               
003CCF  2  A0 0F        	ldy #$f
003CD1  2               loops:
003CD1  2  8C 00 08     	sty MC6845_Reg
003CD4  2  B9 1C 3D     	lda CRTTAB,y
003CD7  2  8D 01 08     	sta MC6845_Dat
003CDA  2  88           	dey
003CDB  2  10 F4        	bpl loops
003CDD  2               
003CDD  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
003CDD  2               
003CDD  2               ; Disable cursor
003CDD  2               
003CDD  2  A9 0A        	lda #$0a
003CDF  2  8D 00 08     	sta MC6845_Reg
003CE2  2  A9 20        	lda #$20
003CE4  2  8D 01 08     	sta MC6845_Dat
003CE7  2               
003CE7  2  20 2C 3D     	jsr cls
003CEA  2               
003CEA  2               ; Set new interrupt routine to sync at 25Hz
003CEA  2               
003CEA  2  A9 0A        	lda #<irq_handler	; New interrupt handler
003CEC  2  8D 04 02     	sta IRQVEC
003CEF  2  A9 3D        	lda #>irq_handler
003CF1  2  8D 05 02     	sta IRQVEC+1
003CF4  2               
003CF4  2  A9 40        	lda #<IRQtime		; Interrupt at 25Hz
003CF6  2  8D 24 0E     	sta Timer1_Low
003CF9  2  A9 9C        	lda #>IRQtime
003CFB  2  8D 25 0E     	sta Timer1_High
003CFE  2  A9 40        	lda #%01000000
003D00  2  8D 2B 0E     	sta ACR
003D03  2  A9 C0        	lda #%11000000
003D05  2  8D 2E 0E     	sta IER
003D08  2  58           	cli
003D09  2               
003D09  2  60           	rts
003D0A  2               
003D0A  2               irq_handler:
003D0A  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
003D0D  2               
003D0D  2  8A           	txa			; Save x,y
003D0E  2  48           	pha
003D0F  2  98           	tya
003D10  2  48           	pha
003D11  2               
003D11  2  EE 1A 3D     	inc frames_passed	; Nr of frames past
003D14  2               
003D14  2  68           	pla			; Restore x,y,a
003D15  2  A8           	tay
003D16  2  68           	pla
003D17  2  AA           	tax
003D18  2  68           	pla
003D19  2  40           	rti
003D1A  2               
003D1A  2  00           frames_passed:	.byte 0
003D1B  2               
003D1B  2  60           	rts
003D1C  2               
003D1C  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
003D20  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
003D24  2  03 12 72 13  	.byte $03,$12,$72,$13
003D28  2  04 00 07 FF  	.byte $04,$00,$07,$ff
003D2C  2               
003D2C  2               ;======================================================================
003D2C  2               ; Screen routines
003D2C  2               ;======================================================================
003D2C  2               
003D2C  2               ;----------------------------------------------------------------------
003D2C  2               ; Clear screen routine.
003D2C  2               ;
003D2C  2               ; Fill screenmem $0400-$07ff with ScrFillByte
003D2C  2               ; Set semigraphics at 1st column every line
003D2C  2               ;----------------------------------------------------------------------
003D2C  2               
003D2C  2               cls:
003D2C  2               
003D2C  2               ; Fill screen with 0
003D2C  2               
003D2C  2  A9 00        	lda #0
003D2E  2  A0 00        	ldy #0
003D30  2               clsloop:
003D30  2  99 00 04     	sta ScreenAddr,y
003D33  2  99 00 05     	sta ScreenAddr+256,y
003D36  2  99 00 06     	sta ScreenAddr+512,y
003D39  2  99 00 07     	sta ScreenAddr+768,y
003D3C  2  C8           	iny
003D3D  2  D0 F1        	bne clsloop
003D3F  2               
003D3F  2               ; Init every row as graphics
003D3F  2               
003D3F  2  A0 00        	ldy #0
003D41  2  A2 19        	ldx #ScrHeight
003D43  2  AD 00 DC     	lda SCADTB_lb
003D46  2  85 rr        	sta scraddr
003D48  2  AD 00 DD     	lda SCADTB_hb
003D4B  2  85 rr        	sta scraddr+1
003D4D  2  AD 1F 38     	lda bcolour
003D50  2               colloop:
003D50  2  91 rr        	sta (scraddr),y
003D52  2  48           	pha
003D53  2  A5 rr        	lda scraddr
003D55  2  18           	clc
003D56  2  69 28        	adc #ScrWidth
003D58  2  85 rr        	sta scraddr
003D5A  2  90 02        	bcc :+
003D5C  2  E6 rr        	inc scraddr+1
003D5E  2               :
003D5E  2  68           	pla
003D5F  2  CA           	dex
003D60  2  D0 EE        	bne colloop
003D62  2               
003D62  2  60           	rts
003D63  2               
003D63  2               ;-------------------------------------------------------------
003D63  2               ; Screen synchronisation.
003D63  2               ;
003D63  2               ;  - read joystick/keyboard
003D63  2               ;  - handle sound
003D63  2               ;  - sync framerate with clock
003D63  2               ;  - handle shrapnel every even frame
003D63  2               ;-------------------------------------------------------------
003D63  2               
003D63  2               vsync:
003D63  2  48           	pha
003D64  2  98           	tya
003D65  2  48           	pha
003D66  2  8A           	txa
003D67  2  48           	pha
003D68  2  20 60 2F     	jsr joykey		; read joystick/keyboard.
003D6B  2               
003D6B  2               ; Sync framerate to 25 Hz
003D6B  2               
003D6B  2               vsync1:
003D6B  2  AD 1A 3D     	lda frames_passed	; Wait if not at 25Hz
003D6E  2  C9 02        	cmp #2
003D70  2  90 F9        	bcc vsync1
003D72  2               
003D72  2  A9 00        	lda #0			; sync framerate 25 Hz
003D74  2  8D 1A 3D     	sta frames_passed
003D77  2               
003D77  2               
003D77  2  A5 rr        	lda clock
003D79  2  29 01        	and #1
003D7B  2  D0 03        	bne:+
003D7D  2  20 8C 28     	jsr proshr		; handle shrapnel every even frame
003D80  2               :
003D80  2               ;	lda sndtyp
003D80  2               ;	beq sndskip
003D80  2               ;sndloop:
003D80  2               ;	lda SpeakerBit		; handle sound
003D80  2               ;	ldy sndtyp
003D80  2               ;sndwait:
003D80  2               ;	dey
003D80  2               ;	bne sndwait
003D80  2               ;	eor #4
003D80  2               ;	sta SpeakerBit
003D80  2               ;	dec sndtyp
003D80  2               ;	bne sndloop
003D80  2               ;sndskip:
003D80  2               
003D80  2  68           	pla
003D81  2  AA           	tax
003D82  2  68           	pla
003D83  2  A8           	tay
003D84  2  68           	pla
003D85  2  60           	rts
003D86  2               
003D86  2  00           sndtyp:	.byte 0
003D87  2               
003D87  2               ;======================================================================
003D87  2               ; Joystick routines
003D87  2               ;======================================================================
003D87  2               
003D87  2               joyinit:
003D87  2  60           	rts
003D88  2               joy1:
003D88  2  60           	rts
003D89  2               joy2:
003D89  2  60           	rts
003D8A  2               
003D8A  2               ;======================================================================
003D8A  2               ; Keyboard routines
003D8A  2               ;======================================================================
003D8A  2               
003D8A  2               ;----------------------------------------------------------------------
003D8A  2               ; KTEST
003D8A  2               ; Check if key in A is pressed
003D8A  2               ; 	return clc if pressed
003D8A  2               ; 	return sec if not pressed
003D8A  2               ;----------------------------------------------------------------------
003D8A  2               
003D8A  2               ktest:
003D8A  2  85 rr        	sta tmp
003D8C  2  2C 21 0E     	bit PORT_A
003D8F  2               .if real=1
003D8F  2               	bpl not_pressed
003D8F  2               .else
003D8F  2  30 07        	bmi not_pressed	; BUG MAME, bit 7 not set ....
003D91  2               .endif
003D91  2  AD 21 0E     	lda PORT_A
003D94  2  C5 rr        	cmp tmp
003D96  2  F0 02        	beq pressed
003D98  2               not_pressed:
003D98  2  38           	sec
003D99  2  60           	rts
003D9A  2               pressed:
003D9A  2  18           	clc
003D9B  2  60           	rts
003D9C  2               
003D9C  2               ;======================================================================
003D9C  2               ; PRSKEY
003D9C  2               ; Wait for keypress and release
003D9C  2               ;======================================================================
003D9C  2               
003D9C  2               prskey:
003D9C  2  2C 21 0E     	bit PORT_A
003D9F  2  10 FB        	bpl prskey
003DA1  2               relkey:
003DA1  2  2C 21 0E     	bit PORT_A
003DA4  2  30 FB        	bmi relkey
003DA6  2  60           	rts
003DA7  2               
003DA7  2               ;======================================================================
003DA7  2               ; Sprite routines
003DA7  2               ;======================================================================
003DA7  2               
003DA7  2               ;-----------------------------------------------------------------
003DA7  2               ; These are the sprite routines.
003DA7  2               ; sspria = single sprite, old (ix).
003DA7  2               ; ssprib = single sprite, new (ix+5).
003DA7  2               ; sspric = both sprites, old (ix) and new (ix+5).
003DA7  2               ;-----------------------------------------------------------------
003DA7  2               
003DA7  2               sspria:
003DA7  2  20 54 32     	jsr gsprad		; get old sprite address.
003DAA  2               sspri2:
003DAA  2  A5 64        	lda z80_e
003DAC  2  8D 03 3E     	sta dline1+1		; Set spritedata address
003DAF  2  A5 65        	lda z80_d
003DB1  2  8D 04 3E     	sta dline1+2
003DB4  2               
003DB4  2  86 rr        	stx xtmp
003DB6  2  A2 00        	ldx #0			; vertical lines.
003DB8  2               sspri0:
003DB8  2  20 FB 3D     	jsr dline		; draw a line.
003DBB  2               
003DBB  2               ;.if bflag
003DBB  2               ;	cpx #16			; Detect end of line 3
003DBB  2               ;.else
003DBB  2  E0 14        	cpx #20			; Detect end of line 2
003DBD  2               ;.endif
003DBD  2               
003DBD  2  D0 F9        	bne sspri0		; no, repeat
003DBF  2  A6 rr        	ldx xtmp
003DC1  2  60           	rts
003DC2  2               
003DC2  2               ;-----------------------------------------------------------------
003DC2  2               ; ssprib = single sprite, new (ix).
003DC2  2               ;-----------------------------------------------------------------
003DC2  2               
003DC2  2               ssprib:
003DC2  2  20 35 32     	jsr gspran 		; get new sprite address.
003DC5  2               				; z80_de = new sprite address
003DC5  2  4C AA 3D     	jmp sspri2
003DC8  2               
003DC8  2               ;-----------------------------------------------------------------
003DC8  2               ; sspric = erase old sprite and plot new sprite line by line
003DC8  2               ;-----------------------------------------------------------------
003DC8  2               
003DC8  2               sspric:
003DC8  2  20 54 32     	jsr gsprad 		; get old sprite address.
003DCB  2               				; z80_de = old sprite address
003DCB  2  A5 64        	lda z80_e
003DCD  2  8D 1C 3E     	sta ddline1+1		; Set spritedata address
003DD0  2  A5 65        	lda z80_d
003DD2  2  8D 1D 3E     	sta ddline1+2
003DD5  2  20 41 3E     	jsr exx  		; store addresses.
003DD8  2               
003DD8  2  20 35 32     	jsr gspran 		; get new sprite addresses.
003DDB  2               				; z80_de = old sprite address
003DDB  2  A5 64        	lda z80_e
003DDD  2  8D 03 3E     	sta dline1+1		; Set spritedata address
003DE0  2  A5 65        	lda z80_d
003DE2  2  8D 04 3E     	sta dline1+2
003DE5  2               
003DE5  2  86 rr        	stx xtmp
003DE7  2  A2 00        	ldx #0			; vertical lines.
003DE9  2               lloop:
003DE9  2  20 FB 3D     	jsr dline 		; draw a line.
003DEC  2  CA           	dex
003DED  2  CA           	dex
003DEE  2  CA           	dex
003DEF  2  CA           	dex
003DF0  2  CA           	dex
003DF1  2  20 14 3E     	jsr ddline 		; delete a line.
003DF4  2               
003DF4  2               ;.if bflag
003DF4  2               ;	cpx #16			; Detect end of line 3
003DF4  2               ;.else
003DF4  2  E0 14        	cpx #20			; Detect end of line 2
003DF6  2               ;.endif
003DF6  2  D0 F1        	bne lloop		; no, repeat
003DF8  2  A6 rr        	ldx xtmp
003DFA  2  60           	rts
003DFB  2               
003DFB  2               ;-----------------------------------------------------------------
003DFB  2               ; Erase sprite line
003DFB  2               ;-----------------------------------------------------------------
003DFB  2               
003DFB  2               dline:
003DFB  2  BC 2D 3E     	ldy sprline,x		; point to screenleft
003DFE  2               
003DFE  2  A9 05        	lda #5
003E00  2  85 rr        	sta rrow
003E02  2               dline1:
003E02  2  BD 5F 39     	lda objdta,x		; fetch spriteleft byte
003E05  2  F0 06        	beq :+
003E07  2  51 rr        	eor (scraddr),y		; merge with screenleft
003E09  2  09 20        	ora #$20		; Set bit 5
003E0B  2  91 rr        	sta (scraddr),y		; write screenleft
003E0D  2               :
003E0D  2  E8           	inx			; next spritebyte
003E0E  2  C8           	iny			; point to screenmiddle
003E0F  2               
003E0F  2  C6 rr        	dec rrow
003E11  2  D0 EF        	bne dline1
003E13  2  60           	rts
003E14  2               
003E14  2               ;-----------------------------------------------------------------
003E14  2               ; Draw sprite line
003E14  2               ;-----------------------------------------------------------------
003E14  2               
003E14  2               ddline:
003E14  2  BC 2D 3E     	ldy sprline,x		; point to screenleft
003E17  2               
003E17  2  A9 05        	lda #5
003E19  2  85 rr        	sta rrow
003E1B  2               ddline1:
003E1B  2  BD 5F 39     	lda objdta,x		; fetch spriteleft byte
003E1E  2  F0 06        	beq :+
003E20  2  51 72        	eor (z80_hlp),y		; merge with screenleft
003E22  2  09 20        	ora #$20		; Set bit 5
003E24  2  91 72        	sta (z80_hlp),y		; write spritedata0
003E26  2               :
003E26  2  E8           	inx			; next spritebyte
003E27  2  C8           	iny			; point to screenmiddle
003E28  2               
003E28  2  C6 rr        	dec rrow
003E2A  2  D0 EF        	bne ddline1
003E2C  2  60           	rts
003E2D  2               
003E2D  2               ;-----------------------------------------------------------------
003E2D  2               ; Spritebyte location on screen
003E2D  2               ;-----------------------------------------------------------------
003E2D  2               
003E2D  2               sprline:
003E2D  2  00 01 02 03  	.byte $00,$01,$02,$03,$04
003E31  2  04           
003E32  2  28 29 2A 2B  	.byte $28,$29,$2a,$2b,$2c
003E36  2  2C           
003E37  2  50 51 52 53  	.byte $50,$51,$52,$53,$54
003E3B  2  54           
003E3C  2  78 79 7A 7B  	.byte $78,$79,$7a,$7b,$7c
003E40  2  7C           
003E41  2               
003E41  1               	.include "z80.asm"
003E41  2               ;------------------------------------------------------
003E41  2               ; z80.asm
003E41  2               ; spectrum stuff
003E41  2               ; adresses
003E41  2               
003E41  2               
003E41  2               ; Contains seperatly 1 bit set
003E41  2               
003E41  2               _bitmem0	= $f8
003E41  2               _bitmem1	= $f9
003E41  2               _bitmem2	= $fa
003E41  2               _bitmem3	= $fb
003E41  2               _bitmem4	= $fc
003E41  2               _bitmem5	= $fd
003E41  2               _bitmem6	= $fe
003E41  2               _bitmem7	= $ff
003E41  2               
003E41  2               ; constants
003E41  2               _bitvalue0	= $01
003E41  2               _bitvalue1	= $02
003E41  2               _bitvalue2	= $04
003E41  2               _bitvalue3	= $08
003E41  2               _bitvalue4	= $10
003E41  2               _bitvalue5	= $20
003E41  2               _bitvalue6	= $40
003E41  2               _bitvalue7	= $80
003E41  2               
003E41  2               _notbitvalue0	= $fe
003E41  2               _notbitvalue1	= $fd
003E41  2               _notbitvalue2	= $fb
003E41  2               _notbitvalue3	= $f7
003E41  2               _notbitvalue4	= $ef
003E41  2               _notbitvalue5	= $df
003E41  2               _notbitvalue6	= $bf
003E41  2               _notbitvalue7	= $7f
003E41  2               
003E41  2               
003E41  2               exx:
003E41  2  A5 62        		lda z80_c
003E43  2  A4 6E        		ldy z80_cp
003E45  2  84 62        		sty z80_c
003E47  2  85 6E        		sta z80_cp
003E49  2  A5 63        		lda z80_b
003E4B  2  A4 6F        		ldy z80_bp
003E4D  2  84 63        		sty z80_b
003E4F  2  85 6F        		sta z80_bp
003E51  2  A5 64        		lda z80_e
003E53  2  A4 70        		ldy z80_ep
003E55  2  84 64        		sty z80_e
003E57  2  85 70        		sta z80_ep
003E59  2  A5 65        		lda z80_d
003E5B  2  A4 71        		ldy z80_dp
003E5D  2  84 65        		sty z80_d
003E5F  2  85 71        		sta z80_dp
003E61  2  A5 rr        		lda scraddr
003E63  2  A4 72        		ldy z80_lp
003E65  2  84 rr        		sty scraddr
003E67  2  85 72        		sta z80_lp
003E69  2  A5 rr        		lda scraddr+1
003E6B  2  A4 73        		ldy z80_hp
003E6D  2  84 rr        		sty scraddr+1
003E6F  2  85 73        		sta z80_hp
003E71  2  60           		rts
003E72  2               
003E72  2               
003E72  1               eind_asm:
003E72  1               eop:					; End Of Program
003E72  1               
003E72  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
003E72  1               
