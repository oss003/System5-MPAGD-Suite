ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 1 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2  xx           shrctr:	    .res 1
000058r 2               .endif
000058r 2               .if pflag
000058r 2  xx           explcnt:    .res 1
000059r 2  xx           seed3:	    .res 1
00005Ar 2               .endif
00005Ar 2               
00005Ar 2               .if aflag
00005Ar 2               pbptr:       .res 2
00005Ar 2               pbbuf:	     .res 2
00005Ar 2               .endif
00005Ar 2               
00005Ar 2               ;sndtyp:     .res 1
00005Ar 2               
00005Ar 2               ;.if rflag
00005Ar 2               ;sprshft:     .res 1
00005Ar 2               ;.endif
00005Ar 2               
00005Ar 1               
00005Ar 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "testshoot.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 32 2D     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  DA 3E        msgptr:		.word msgdat	; messages
002811  3  FB 3E        blkptr:		.word chgfx	; block graphics.
002813  3  01 3F        proptr:		.word bprop	; address of char properties.
002815  3  04 3F        sptptr:		.word sprgfx	; sprite graphics
002817  3  2C 44        frmptr:		.word frmlst	; sprite frames.
002819  3  34 44        scrptr:		.word scdat	; address of screens.
00281B  3  FF 44        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  08 45        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3               ;txtcol:		.byte green,yellow,blue,red
00281F  3               
00281F  3               ; Don't change the order of these four.
00281F  3               ; Menu routine relies on winlft following wintop.
00281F  3               
00281F  3  01           wintop:		.byte WINDOWTOP	; top of window.
002820  3  01           winlft:		.byte WINDOWLFT	; left edge.
002821  3  16           winhgt:		.byte WINDOWHGT	; window height.
002822  3  20           winwid:		.byte WINDOWWID	; window width.
002823  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002824  3               
002824  3               ; Variables start here.
002824  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002824  3               
002824  3  03           wntopx:		.byte (3 * WINDOWTOP)
002825  3  02           wnlftx:		.byte (2 * WINDOWLFT)
002826  3  3C           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
002827  3  38           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
002828  3               
002828  3               ; Assorted game routines which can go in contended memory.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for inventory called by the INV command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with objects seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected objectnr of INV menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if mflag
002828  3               minve:
002828  3               .if gflag
002828  3               	lda #$ff		; blue frontcolour
002828  3               	sta andeor
002828  3               	lda #$aa		; yellow backcoloour
002828  3               	sta andeor+1
002828  3               .endif
002828  3               	lda #<(invdis)		; routine address.
002828  3               	sta mod0+1		; set up menu routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(invdis)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               	lda #<(fopt)		; find option from available objects.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fopt)
002828  3               	sta mod1+1+1
002828  3               	jmp dbox		; do menu routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for menu called by the MENU command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with menu items seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected line nr of MENU menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               mmenu:
002828  3               	lda #<(always)		; routine address.
002828  3               	sta mod0+1		; set up routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(always)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               
002828  3               	lda #<(fstd)		; standard option selection.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fstd)
002828  3               	sta mod1+2
002828  3               
002828  3               ; Drop through into box routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Work out size of box for message or menu.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               dbox:
002828  3               	lda #<(msgdat)		; pointer to messages.
002828  3               	sta z80_l
002828  3               	lda #>(msgdat)
002828  3               	sta z80_h
002828  3               
002828  3               	jsr getwrd		; get message number.
002828  3               
002828  3               	lda z80_h		; store pointer to message.
002828  3               	sta TmpAddr
002828  3               	lda z80_l
002828  3               	sta TmpAddr+1
002828  3               
002828  3               	lda #1			; height.
002828  3               	sta z80_d
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               	sta z80_e		; maximum width.
002828  3               dbox5:
002828  3               	lda #0			; this line"s width.
002828  3               	sta z80_b
002828  3               mod2:
002828  3               	jsr always		; item in player"s possession?
002828  3               	cmp #255
002828  3               	bne dbox6		; not in inventory, skip this line.
002828  3               	inc z80_d		; add to tally.
002828  3               dbox6:
002828  3               	ldy #0			; get character.
002828  3               	lda (z80_hl),y
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a		; reached end of line?
002828  3               	cmp #','
002828  3               	beq dbox3		; yes.
002828  3               	cmp #13
002828  3               	beq dbox3		; yes.
002828  3               	inc z80_b		; add to this line"s width.
002828  3               	lda z80_a
002828  3               	bmi dbox4		; end of message? yes, end count.
002828  3               	jmp dbox6		; repeat until we find the end.
002828  3               dbox3:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox5		; no, carry on looking.
002828  3               	lda z80_b		; make this the widest so far.
002828  3               	sta z80_e
002828  3               	jmp dbox5		; keep looking.
002828  3               dbox4:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox8		; no, carry on looking.
002828  3               	lda z80_b		; final line is the longest so far.
002828  3               	sta z80_e
002828  3               dbox8:
002828  3               	dec z80_d		; decrement items found.
002828  3               	bne :+			; total was zero.
002828  3               	lda #255
002828  3               	sta varopt
002828  3               	jmp dbox15
002828  3               :
002828  3               	lda z80_e		; longest line.
002828  3               	bne :+			; was it zero?
002828  3               	jmp dbox15		; total was zero.
002828  3               :
002828  3               	sta bwid		; set up size.
002828  3               	lda z80_d
002828  3               	sta blen
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; That's set up our box size.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               	lda winhgt		; window height in characters.
002828  3               	sec
002828  3               	sbc z80_d		; subtract height of box.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc wintop		; add top edge of window.
002828  3               	sta btop		; set up box top.
002828  3               
002828  3               	lda winwid		; window width in characters.
002828  3               	sec
002828  3               	sbc z80_e		; subtract box width.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc winlft		; add left edge of window.
002828  3               	sta blft		; box left.
002828  3               
002828  3               	lda #<(FONT-256)		; font.
002828  3               	sta grbase		; set up for text display.
002828  3               	lda #>(FONT-256)
002828  3               	sta grbase+1
002828  3               
002828  3               	lda TmpAddr+1		; restore message pointer.
002828  3               	sta z80_l
002828  3               	lda TmpAddr
002828  3               	sta z80_h
002828  3               
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set display coordinate.
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               dbox2:
002828  3               	lda combyt		; get object number.
002828  3               	sta z80_a
002828  3               mod0:
002828  3               	jsr always		; check inventory for display.
002828  3               	cmp #255
002828  3               	beq :+
002828  3               	jmp dbox13		; not in inventory, skip this line.
002828  3               :
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set left display position.
002828  3               	lda bwid		; box width.
002828  3               	sta z80_b		; store width.
002828  3               
002828  3               	lda fcolour		; Set textcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               dbox0:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	cmp #','		; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               	cmp #13			; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               
002828  3               	cmp #141			; end of line?
002828  3               	bne :+
002828  3               	dec bwid
002828  3               	jmp dbox7		; yes, next one.
002828  3               :
002828  3               	dec z80_b		; one less to display.
002828  3               	and #127		; remove terminator.
002828  3               
002828  3               	jsr pchr		; display on screen.
002828  3               
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a
002828  3               	cmp #128		; end of message?
002828  3               	bmi :+
002828  3               	jsr dscor2
002828  3               	jmp dbox7		; yes, job done.
002828  3               :
002828  3               	lda z80_b		; chars remaining.
002828  3               	beq :+			; are any left?
002828  3               	jmp dbox0		; yes, continue.
002828  3               :
002828  3               ;---------------------------------------------------
002828  3               ; Reached limit of characters per line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dbox9:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #13			; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #128		; end of message?
002828  3               	bcs :+
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox9
002828  3               
002828  3               ;---------------------------------------------------
002828  3               ; Fill box to end of line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dboxf:
002828  3               	lda #32			; space character.
002828  3               	jsr pchr		; display character.
002828  3               	dec z80_b
002828  3               	beq :+
002828  3               	jmp dboxf		; repeat for remaining chars on line.
002828  3               :
002828  3               	rts
002828  3               dbox1:
002828  3               	inc z80_l		; skip character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	jsr dboxf		; fill box out to right side.
002828  3               dbox10:
002828  3               	inc dispy		; y coordinate down a line next position.
002828  3               	jmp dbox2		; next line.
002828  3               dbox7:
002828  3               	lda z80_b		; chars remaining.
002828  3               	bne :+			; are any left?
002828  3               	jmp dbox11		; no, nothing to draw.
002828  3               :
002828  3               	jsr dboxf		; fill message to line.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Drawn the box menu, now select option.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox11:
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set bar position.
002828  3               dbox14:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	bne dbox14		; yes, debounce it.
002828  3               	jsr dbar		; draw bar.
002828  3               dbox12:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	beq dbox12		; no, nothing.
002828  3               	and #16			; fire button pressed?
002828  3               	bne :+
002828  3               mod1:
002828  3               	jmp fstd		; yes, job done.
002828  3               :
002828  3               	jsr dbar		; delete bar.
002828  3               
002828  3               	lda joyval		; joystick reading.
002828  3               	and #8			; going up?
002828  3               	beq dboxu		; yes, go up.
002828  3               
002828  3               	ldx dispy		; vertical position of bar.
002828  3               	inx			; look down.
002828  3               	txa
002828  3               	sec
002828  3               	sbc btop		; find distance from top.
002828  3               	cmp blen		; top of box.
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	inc dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               dboxu:
002828  3               	lda dispy		; vertical position of bar.
002828  3               	cmp btop		; are we at the top?
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	dec dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               fstd:
002828  3               	lda dispy		; bar position.
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta varopt		; store the option.
002828  3               	jmp redraw		; redraw the screen.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Option not available.  Skip this line.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox13:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               	cmp #13			; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               
002828  3               	bpl :+			; end of message?
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox13
002828  3               dbox15:
002828  3               	lda TmpAddr		; pop message pointer from the stack.
002828  3               	sta z80_h
002828  3               	lda TmpAddr+1
002828  3               	sta z80_l
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Invert bar
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbar:
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set display coordinate.
002828  3               	jsr gprad		; get printing address.
002828  3               
002828  3               ;	lda bwid		; box width.
002828  3               ;	sta z80_c		; loop counter in c.
002828  3               ;	lda z80_h
002828  3               ;	sta z80_d		; store screen address high byte.
002828  3               ;dbar1:
002828  3               ;	ldx #7			; pixel height in b.
002828  3               ;dbar0:
002828  3               ;	ldy scrtab,x
002828  3               ;	lda (scraddr),y		; get screen byte.
002828  3               ;	eor #255		; reverse all bits.
002828  3               ;	sta (scraddr),y		; write back to screen.
002828  3               ;	dex			; next line down.
002828  3               ;	bpl dbar0		; draw rest of character.
002828  3               
002828  3               ;	inc scraddr		; one char right.
002828  3               ;	dec z80_c		; decrement character counter.
002828  3               ;	bne dbar1		; repeat for whole line.
002828  3               
002828  3               	ldy #0
002828  3               	lda (scraddr),y
002828  3               	eor #7
002828  3               	sta (scraddr),y
002828  3               
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Point to object
002828  3               ;
002828  3               ; Input:
002828  3               ;  combyt
002828  3               ;
002828  3               ; Output:
002828  3               ;  A = object number, A=255 if already in possession
002828  3               ;------------------------------------------------------
002828  3               
002828  3               invdis:
002828  3               	lda z80_l		; store message text pointer.
002828  3               	pha
002828  3               	lda z80_h
002828  3               	pha
002828  3               	lda combyt		; object number.
002828  3               	inc combyt		; ready for next one.
002828  3               	jsr gotob		; check if we have object.
002828  3               	tay
002828  3               	pla
002828  3               	sta z80_h
002828  3               	pla
002828  3               	sta z80_l
002828  3               	tya
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Find option selected.
002828  3               ;
002828  3               ; Input:
002828  3               ;  -
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected object
002828  3               ;------------------------------------------------------
002828  3               
002828  3               fopt:
002828  3               	lda dispy
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta tmp+2		; option selected in b register.
002828  3               	inc tmp+2
002828  3               
002828  3               	lda #0			; set to first item.
002828  3               	sta combyt		; object number.
002828  3               fopt0:
002828  3               	jsr fobj		; find next object in inventory.
002828  3               	dec tmp+2
002828  3               	bne fopt0		; repeat for relevant steps down the list.
002828  3               
002828  3               	lda combyt		; get option.
002828  3               	sta varopt		; store the option.
002828  3               	dec varopt		; one less, due to where we increment combyt.
002828  3               	jmp redraw		; redraw the screen.
002828  3               fobj:
002828  3               	ldy combyt		; object number.
002828  3               	inc combyt		; ready for next item.
002828  3               	tya
002828  3               	jsr gotob		; do we have this item?
002828  3               	cmp #255
002828  3               	bne :+
002828  3               	rts
002828  3               :
002828  3               	jmp fobj		; yes, it's on the list.
002828  3               .endif
002828  3               
002828  3               ;----------------------------------------------------
002828  3               ; Delay routine A * 1/25 sec
002828  3               ;----------------------------------------------------
002828  3               
002828  3               delay:
002828  3  85 rr        	sta xtmp
00282A  3               
00282A  3               del_start:
00282A  3  A9 00        	lda #0
00282C  3  8D C3 48     	sta frames_passed
00282F  3               del_loop:
00282F  3  AD C3 48     	lda frames_passed
002832  3  C9 02        	cmp #2
002834  3  90 F9        	bcc del_loop
002836  3               
002836  3  A9 00        	lda #0
002838  3  8D C3 48     	sta frames_passed
00283B  3  C6 rr        	dec xtmp
00283D  3  D0 EB        	bne del_start
00283F  3  60           	rts
002840  3               
002840  3               ;----------------------------------------------------
002840  3               ; Clear sprite table.
002840  3               ;
002840  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002840  3               ;----------------------------------------------------
002840  3               
002840  3               xspr:
002840  3  A9 FF        	lda #255		; clear byte.
002842  3  A2 00        	ldx #0			; length of table.
002844  3               xspr0:
002844  3  9D F9 3B     	sta sprtab,x		; sprite table.
002847  3  E8           	inx			; move to next byte.
002848  3  E0 CC        	cpx #SPRBUF
00284A  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284C  3  60           	rts
00284D  3               
00284D  3               ;-------------------------------------------------------------
00284D  3               ; Initialise all objects.
00284D  3               ;
00284D  3               ; Reset current room,y,x to start room,y,x for all objects
00284D  3               ;-------------------------------------------------------------
00284D  3               
00284D  3               .if oflag
00284D  3               iniob:
00284D  3               	lda #<objdta 		; objects table.
00284D  3               	sta z80_x
00284D  3               	lda #>objdta
00284D  3               	sta z80_i
00284D  3               
00284D  3               	ldx numob 		; number of objects in the game.
00284D  3               iniob0:
00284D  3               	ldy #35
00284D  3               	lda (z80_ix),y 		; start screen.
00284D  3               	ldy #32
00284D  3               	sta (z80_ix),y 		; set start screen.
00284D  3               
00284D  3               	ldy #36
00284D  3               	lda (z80_ix),y 		; find start y.
00284D  3               	ldy #33
00284D  3               	sta (z80_ix),y 		; set start y.
00284D  3               
00284D  3               	ldy #37
00284D  3               	lda (z80_ix),y 		; get initial x.
00284D  3               	ldy #34
00284D  3               	sta (z80_ix),y 		; set x coord.
00284D  3               
00284D  3               	clc 			; point to next object.
00284D  3               	lda z80_x
00284D  3               	adc #38			; distance between objects.
00284D  3               	sta z80_x
00284D  3               	bcc :+
00284D  3               	inc z80_i
00284D  3               :
00284D  3               	dex 			; repeat.
00284D  3               	bne iniob0
00284D  3               
00284D  3               	rts
00284D  3               .endif
00284D  3               
00284D  3               ;-----------------------------------------------
00284D  3               ; Redraw the screen.
00284D  3               ;
00284D  3               ; Remove old copy of all sprites for redraw.
00284D  3               ;-----------------------------------------------
00284D  3               
00284D  3               redraw:
00284D  3               .if gflag
00284D  3               	lda #$ff
00284D  3               	sta andeor
00284D  3               	lda #$00
00284D  3               	sta andeor+1
00284D  3               .endif
00284D  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00284F  3  48           	pha
002850  3  A5 68        	lda z80_x
002852  3  48           	pha
002853  3               
002853  3  20 D8 31     	jsr droom		; show screen layout.
002856  3               .if oflag
002856  3               	jsr shwob		; draw objects.
002856  3               .endif
002856  3               numsp0:
002856  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002858  3  85 rr        	sta tmp
00285A  3               
00285A  3  A9 F9        	lda #<sprtab		; sprite table.
00285C  3  85 68        	sta z80_x
00285E  3  A9 3B        	lda #>sprtab
002860  3  85 69        	sta z80_i
002862  3               redrw0:
002862  3  A0 00        	ldy #0
002864  3  B1 68        	lda (z80_ix),y		; old sprite type.
002866  3  C9 FF        	cmp #255		; is it enabled?
002868  3  F0 0B        	beq redrw1 		; no, find next one.
00286A  3               
00286A  3  A0 03        	ldy #3
00286C  3  B1 68        	lda (z80_ix),y 		; sprite y.
00286E  3  C9 B1        	cmp #177		; beyond maximum?
002870  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002872  3               
002872  3  20 97 49     	jsr sspria		; show single sprite.
002875  3               redrw1:
002875  3  18           	clc			; next sprite.
002876  3  A5 68        	lda z80_x
002878  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00287A  3  85 68        	sta z80_x
00287C  3  90 02        	bcc :+
00287E  3  E6 69        	inc z80_i
002880  3               :
002880  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002882  3  D0 DE        	bne redrw0
002884  3               rpblc1:
002884  3               ;	jsr dshrp		; redraw shrapnel.
002884  3               
002884  3               .if aflag
002884  3               	jsr rbloc		; draw blocks for this screen
002884  3               .endif
002884  3  68           	pla			; retrieve sprite pointer.
002885  3  85 68        	sta z80_x
002887  3  68           	pla
002888  3  85 69        	sta z80_i
00288A  3               
00288A  3  60           	rts
00288B  3               
00288B  3               ;----------------------------------------------------------------------
00288B  3               ; Atomic palette is static
00288B  3               ;----------------------------------------------------------------------
00288B  3               
00288B  3               setpal:
00288B  3  60           	rts
00288C  3               
00288C  3               ;----------------------------------------------------------------------
00288C  3               ; FODDER check
00288C  3               ;----------------------------------------------------------------------
00288C  3               
00288C  3               .if pflag .or dflag
00288C  3               fdchk:
00288C  3  C9 04        	cmp #FODDER 		; is it fodder?
00288E  3  F0 01        	beq :+
002890  3  60           	rts 			; no.
002891  3               :
002891  3  A9 00        	lda #0			; wipe fodder in MAP
002893  3  A0 00        	ldy #0
002895  3  91 rr        	sta (bufaddr),y 	; rewrite block type.
002897  3               
002897  3  A5 rr        	lda bufaddr		; calculate screenaddr
002899  3  85 rr        	sta scraddr
00289B  3  38           	sec
00289C  3  A5 rr        	lda bufaddr+1
00289E  3  E9 D4        	sbc #>(MAP-ScreenAddr)	;$d4
0028A0  3  85 rr        	sta scraddr+1
0028A2  3               
0028A2  3  A9 00        	lda #0
0028A4  3  A0 00        	ldy #0			; erase block on screen
0028A6  3  91 rr        	sta (scraddr),y
0028A8  3               
0028A8  3               
0028A8  3               
0028A8  3               ;	lda dispx		; x=x/8
0028A8  3               ;	pha
0028A8  3               ;	lsr a
0028A8  3               ;	lsr a
0028A8  3               ;	lsr a
0028A8  3               ;	sta dispx
0028A8  3               
0028A8  3               ;	lda dispy		; y=y/8
0028A8  3               ;	pha
0028A8  3               ;	lsr a
0028A8  3               ;	lsr a
0028A8  3               ;	lsr a
0028A8  3               ;	sta dispy
0028A8  3               
0028A8  3               ;	lda #0 			; block to write.
0028A8  3               ;	jsr pattr 		; write block.
0028A8  3               
0028A8  3               ;	pla
0028A8  3               ;	sta dispy
0028A8  3               ;	pla
0028A8  3               ;	sta dispx
0028A8  3  60           	rts
0028A9  3               .endif
0028A9  3               
0028A9  3               ;----------------------------------------------------
0028A9  3               ; Scrolly text and puzzle variables.
0028A9  3               ;----------------------------------------------------
0028A9  3               
0028A9  3               .if sflag
0028A9  3               txtbit:	.byte 128		; bit to write.
0028A9  3               txtwid:	.byte 16		; width of ticker message.
0028A9  3               txtpos:	.word msgdat
0028A9  3               txtini:	.word msgdat
0028A9  3               txtscr:	.word ScreenAddr
0028A9  3               .endif
0028A9  3               
0028A9  3               ;----------------------------------------------------
0028A9  3               ; Specialist routines.
0028A9  3               ; Process shrapnel.
0028A9  3               ;----------------------------------------------------
0028A9  3               proshr:
0028A9  3               .if pflag
0028A9  3  A9 00        	lda #<SHRAPN		; table.
0028AB  3  85 68        	sta z80_x
0028AD  3  A9 DE        	lda #>SHRAPN
0028AF  3  85 69        	sta z80_i
0028B1  3               
0028B1  3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
0028B3  3  85 rr        	sta shrctr
0028B5  3               prosh0:
0028B5  3  A0 00        	ldy #0
0028B7  3  B1 68        	lda (z80_ix),y		; on/off marker.
0028B9  3  0A           	asl a
0028BA  3               proshx:
0028BA  3  B0 03        	bcs :+
0028BC  3  20 CF 28     	jsr prosh1 		; on, so process it.
0028BF  3               :
0028BF  3  18           	clc
0028C0  3  A5 68        	lda z80_x
0028C2  3  69 06        	adc #SHRSIZ
0028C4  3  85 68        	sta z80_x
0028C6  3  90 02        	bcc :+
0028C8  3  E6 69        	inc z80_i
0028CA  3               :
0028CA  3  C6 rr        	dec shrctr		; round again.
0028CC  3  D0 E7        	bne prosh0
0028CE  3               .endif
0028CE  3               .if sflag
0028CE  3               	jsr scrly
0028CE  3               .endif
0028CE  3  60           	rts
0028CF  3               
0028CF  3               .if pflag
0028CF  3               ;shrctr:	.byte 0
0028CF  3               
0028CF  3               ;----------------------------------------------------
0028CF  3               ; Proces shrapnel piece
0028CF  3               ;----------------------------------------------------
0028CF  3               
0028CF  3               prosh1:
0028CF  3  20 C0 29     	jsr plot 		; delete the pixel.
0028D2  3               
0028D2  3  A9 FC        	lda #<shrptr		; shrapnel routine pointers.
0028D4  3  85 66        	sta z80_l
0028D6  3  A9 28        	lda #>shrptr
0028D8  3  85 67        	sta z80_h
0028DA  3               
0028DA  3  A0 00        	ldy #0
0028DC  3  B1 68        	lda (z80_ix),y		; restore shrapnel type.
0028DE  3  20 ED 28     	jsr prosh2 		; run the routine.
0028E1  3  20 90 29     	jsr chkxy		; check x and y are good before we redisplay.
0028E4  3               
0028E4  3  A9 06        	lda #<SHRSIZ 		; distance to next.
0028E6  3  85 64        	sta z80_e
0028E8  3  A9 00        	lda #>SHRSIZ
0028EA  3  85 65        	sta z80_d
0028EC  3  60           	rts
0028ED  3               
0028ED  3               ;----------------------------------------------------
0028ED  3               ; Run the routine
0028ED  3               ;----------------------------------------------------
0028ED  3               
0028ED  3               prosh2:
0028ED  3  0A           	asl a 			; 2 bytes per address.
0028EE  3  A8           	tay
0028EF  3  B9 FC 28     	lda shrptr,y
0028F2  3  85 66        	sta z80_l
0028F4  3  B9 FD 28     	lda shrptr+1,y 		; fetch high byte from table.
0028F7  3  85 67        	sta z80_h
0028F9  3  6C 66 00     	jmp (z80_hl) 		; jump to routine.
0028FC  3               
0028FC  3               ;----------------------------------------------------
0028FC  3               ; Paricle routine table
0028FC  3               ;----------------------------------------------------
0028FC  3               
0028FC  3  94 2A        shrptr:	.word laser		; laser.
0028FE  3  42 2A        	.word trail		; vapour trail.
002900  3  0C 29        	.word shrap		; shrapnel from explosion.
002902  3  68 29        	.word dotl		; horizontal starfield left.
002904  3  72 29        	.word dotr		; horizontal starfield right.
002906  3  7C 29        	.word dotu		; vertical starfield up.
002908  3  86 29        	.word dotd		; vertical starfield down.
00290A  3  D9 3E        	.word ptcusr		; user particle.
00290C  3               
00290C  3               ;----------------------------------------------------
00290C  3               ; Explosion shrapnel.
00290C  3               ;----------------------------------------------------
00290C  3               
00290C  3               shrap:
00290C  3  A0 01        	ldy #1
00290E  3  B1 68        	lda (z80_ix),y 		; get the angle.
002910  3  18           	clc
002911  3  69 02        	adc #<shrsin		; shrapnel sine table.
002913  3  85 66        	sta z80_l
002915  3  A9 2A        	lda #>shrsin
002917  3  69 00        	adc #0
002919  3  85 67        	sta z80_h
00291B  3               
00291B  3  A0 00        	ldy #0
00291D  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
00291F  3  85 64        	sta z80_e
002921  3  E6 66        	inc z80_l 		; next byte of table.
002923  3  D0 02        	bne :+
002925  3  E6 67        	inc z80_h
002927  3               :
002927  3  A0 00        	ldy #0
002929  3  B1 66        	lda (z80_hl),y		; fetch value from table.
00292B  3  85 65        	sta z80_d
00292D  3  E6 66        	inc z80_l		; next byte of table.
00292F  3  D0 02        	bne :+
002931  3  E6 67        	inc z80_h
002933  3               :
002933  3  A0 00        	ldy #0
002935  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
002937  3  85 62        	sta z80_c
002939  3  E6 66        	inc z80_l 		; next byte of table.
00293B  3  D0 02        	bne :+
00293D  3  E6 67        	inc z80_h
00293F  3               :
00293F  3  A0 00        	ldy #0
002941  3  B1 66        	lda (z80_hl),y 		; fetch value from table.
002943  3  85 63        	sta z80_b
002945  3               
002945  3  A0 02        	ldy #2
002947  3  B1 68        	lda (z80_ix),y 		; x coordinate in hl.
002949  3  18           	clc
00294A  3  65 64        	adc z80_e		; add sine lb
00294C  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
00294E  3  A0 03        	ldy #3
002950  3  B1 68        	lda (z80_ix),y
002952  3  65 65        	adc z80_d		; add sine hb
002954  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
002956  3               
002956  3  A0 04        	ldy #4
002958  3  B1 68        	lda (z80_ix),y	 	; y coordinate in hl.
00295A  3  18           	clc
00295B  3  65 62        	adc z80_c		; add cosine lb
00295D  3  91 68        	sta (z80_ix),y		; store new coordinate lb.
00295F  3  A0 05        	ldy #5
002961  3  B1 68        	lda (z80_ix),y
002963  3  65 63        	adc z80_b		; add cosine lb
002965  3  91 68        	sta (z80_ix),y		; store new coordinate hb.
002967  3               
002967  3  60           	rts
002968  3               
002968  3               ;----------------------------------------------------
002968  3               ; Move dots
002968  3               ;----------------------------------------------------
002968  3               
002968  3               dotl:
002968  3  A0 05        	ldy #5
00296A  3  B1 68        	lda (z80_ix),y
00296C  3  38           	sec
00296D  3  E9 01        	sbc #1		 	; move left.
00296F  3  91 68        	sta (z80_ix),y
002971  3  60           	rts
002972  3               dotr:
002972  3  A0 05        	ldy #5
002974  3  B1 68        	lda (z80_ix),y
002976  3  18           	clc
002977  3  69 01        	adc #1		 	; move left.
002979  3  91 68        	sta (z80_ix),y
00297B  3  60           	rts
00297C  3               dotu:
00297C  3  A0 03        	ldy #3
00297E  3  B1 68        	lda (z80_ix),y
002980  3  38           	sec
002981  3  E9 01        	sbc #1		 	; move up.
002983  3  91 68        	sta (z80_ix),y
002985  3  60           	rts
002986  3               dotd:
002986  3  A0 03        	ldy #3
002988  3  B1 68        	lda (z80_ix),y
00298A  3  18           	clc
00298B  3  69 01        	adc #1			; move down.
00298D  3  91 68        	sta (z80_ix),y
00298F  3  60           	rts
002990  3               
002990  3               ;----------------------------------------------------
002990  3               ; Check if coordinates are ok before redrawing at new position.
002990  3               ;
002990  3               ; left:   X>L		X=L	Ok
002990  3               ; right:  R+15>X	X=R	Ok
002990  3               ; top:    Y>T		Y=T	Ok
002990  3               ; bottom: B+15>Y	Y=B	Ok
002990  3               ;----------------------------------------------------
002990  3               
002990  3               chkxy:
002990  3               
002990  3               ; top:    Y>T		Y=T	Ok
002990  3               
002990  3  A0 03        	ldy #3
002992  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002994  3  CD 24 28     	cmp wntopx		; window top.
002997  3  B0 03        	bcs :+			; compare with top window limit.
002999  3  4C FB 29     	jmp kilshr		; out of window, kill shrapnel.
00299C  3               :
00299C  3               ; left:   X>L		X=L	Ok
00299C  3               
00299C  3  A0 05        	ldy #5
00299E  3  B1 68        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0029A0  3  CD 25 28     	cmp wnlftx		; left edge.
0029A3  3  B0 03        	bcs :+			; compare with left window limit.
0029A5  3  4C FB 29     	jmp kilshr		; out of window, kill shrapnel.
0029A8  3               :
0029A8  3               ; bottom: B+15>Y	Y=B	Ok
0029A8  3               
0029A8  3  AD 26 28     	lda wnbotx		; point to bottom.
0029AB  3  A0 03        	ldy #3
0029AD  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0029AF  3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
0029B1  3  4C FB 29     	jmp kilshr		; off screen, kill shrapnel..
0029B4  3               :
0029B4  3               ; right:  R+15>X	X=R	Ok
0029B4  3  AD 27 28     	lda wnrgtx		; point to right edge.
0029B7  3  A0 05        	ldy #5
0029B9  3  D1 68        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0029BB  3  B0 03        	bcs :+			; compare with window limit.
0029BD  3  4C FB 29     	jmp kilshr		; off screen, kill shrapnel.
0029C0  3               :
0029C0  3               
0029C0  3               ;----------------------------------------------------
0029C0  3               ; Drop through.
0029C0  3               ; Display shrapnel.
0029C0  3               ;----------------------------------------------------
0029C0  3               
0029C0  3               plot:
0029C0  3  A0 03        	ldy #3
0029C2  3  B1 68        	lda (z80_ix),y		; y integer.
0029C4  3  85 rr        	sta dispy	 	; workspace coordinates.
0029C6  3  A0 05        	ldy #5
0029C8  3  B1 68        	lda (z80_ix),y	 	; x integer.
0029CA  3  85 rr        	sta dispx 		; workspace coordinates.
0029CC  3               
0029CC  3  A0 00        	ldy #0
0029CE  3  B1 68        	lda (z80_ix),y 		; type.
0029D0  3  D0 03        	bne :+			; is it a laser?
0029D2  3  4C ED 29     	jmp plot1 		; yes, draw laser instead.
0029D5  3               :
0029D5  3               plot0:
0029D5  3  A5 rr        	lda dispx		; which pixel within byte do we
0029D7  3  29 01        	and #1			; want to set first?
0029D9  3  A8           	tay
0029DA  3  B9 CF 2A     	lda dots,y 		; table of small pixel positions.
0029DD  3  85 64        	sta z80_e 		; get value.
0029DF  3               
0029DF  3  20 8C 37     	jsr scadd 		; screen address.
0029E2  3  A0 00        	ldy #0
0029E4  3  B1 rr        	lda (scraddr),y		; see what's already there.
0029E6  3  45 64        	eor z80_e
0029E8  3  09 20        	ora #$20
0029EA  3  91 rr        	sta (scraddr),y 	; put back on screen.
0029EC  3  60           	rts
0029ED  3               
0029ED  3               plot1:
0029ED  3  20 8C 37     	jsr scadd 		; screen address.
0029F0  3  A0 00        	ldy #0
0029F2  3  B1 rr        	lda (scraddr),y 	; fetch byte there.
0029F4  3  49 0C        	eor #12 		; toggle all bits.
0029F6  3  09 20        	ora #$20
0029F8  3  91 rr        	sta (scraddr),y 	; new byte.
0029FA  3  60           	rts
0029FB  3               
0029FB  3               ;----------------------------------------------------
0029FB  3               ; Switch off shrapnel
0029FB  3               ;----------------------------------------------------
0029FB  3               
0029FB  3               kilshr:
0029FB  3  A9 80        	lda #128
0029FD  3  A0 00        	ldy #0
0029FF  3  91 68        	sta (z80_ix),y	; switch off shrapnel.
002A01  3  60           	rts
002A02  3               
002A02  3               ;----------------------------------------------------
002A02  3               ; Sine/cosine table
002A02  3               ;----------------------------------------------------
002A02  3               
002A02  3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
002A06  3  87 01 B2 03  
002A0A  3  D4 02 D4 02  
002A12  3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
002A16  3  B2 03 78 FE  
002A1A  3  D4 02 2B FD  
002A22  3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
002A26  3  78 FE 4D FC  
002A2A  3  2B FD 2B FD  
002A32  3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
002A36  3  4D FC 87 01  
002A3A  3  2B FD D4 02  
002A42  3               
002A42  3               ;----------------------------------------------------
002A42  3               ; Create trail
002A42  3               ;----------------------------------------------------
002A42  3               
002A42  3               trail:
002A42  3  A0 01        	ldy #1
002A44  3  B1 68        	lda (z80_ix),y 	; time remaining.
002A46  3  38           	sec
002A47  3  E9 01        	sbc #1
002A49  3  91 68        	sta (z80_ix),y
002A4B  3  D0 03        	bne :+
002A4D  3  4C 8D 2A     	jmp trailk		; time to switch it off.
002A50  3               :
002A50  3  20 AC 2C     	jsr qrand		; get a random number.
002A53  3  4A           	lsr a 			; x or y axis?
002A54  3  90 03        	bcc :+
002A56  3  4C 73 2A     	jmp trailv		; use y.
002A59  3               :
002A59  3               ; Trail horizontal
002A59  3               
002A59  3  4A           	lsr a 			; which direction?
002A5A  3  90 03        	bcc :+
002A5C  3  4C 69 2A     	jmp traill		; go left.
002A5F  3               :
002A5F  3               ; Trail right
002A5F  3               
002A5F  3  A0 05        	ldy #5
002A61  3  B1 68        	lda (z80_ix),y
002A63  3  18           	clc
002A64  3  69 01        	adc #1	 		; go right.
002A66  3  91 68        	sta (z80_ix),y
002A68  3  60           	rts
002A69  3               
002A69  3               ; Trail left
002A69  3               
002A69  3               traill:
002A69  3  A0 05        	ldy #5
002A6B  3  B1 68        	lda (z80_ix),y
002A6D  3  38           	sec
002A6E  3  E9 01        	sbc #1 			; go left.
002A70  3  91 68        	sta (z80_ix),y
002A72  3  60           	rts
002A73  3               
002A73  3               ; Trail vertical
002A73  3               
002A73  3               trailv:
002A73  3  4A           	lsr a		 	; which direction?
002A74  3  90 03        	bcc :+
002A76  3  4C 83 2A     	jmp trailu		; go up.
002A79  3               :
002A79  3               ; Trail down
002A79  3               
002A79  3  A0 03        	ldy #3
002A7B  3  B1 68        	lda (z80_ix),y
002A7D  3  18           	clc
002A7E  3  69 01        	adc #1 			; go down.
002A80  3  91 68        	sta (z80_ix),y
002A82  3  60           	rts
002A83  3               
002A83  3               ; Trail up
002A83  3               
002A83  3               trailu:
002A83  3  A0 03        	ldy #3
002A85  3  B1 68        	lda (z80_ix),y
002A87  3  38           	sec
002A88  3  E9 01        	sbc #1 			; go up.
002A8A  3  91 68        	sta (z80_ix),y
002A8C  3  60           	rts
002A8D  3               
002A8D  3               ; Kill trail
002A8D  3               
002A8D  3               trailk:
002A8D  3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
002A8F  3  A0 03        	ldy #3
002A91  3  91 68        	sta (z80_ix),y
002A93  3  60           	rts
002A94  3               
002A94  3               ;----------------------------------------------------
002A94  3               ; Create laser beam
002A94  3               ;----------------------------------------------------
002A94  3               
002A94  3               laser:
002A94  3  A0 01        	ldy #1
002A96  3  B1 68        	lda (z80_ix),y 		; direction.
002A98  3  6A           	ror a 			; left or right?
002A99  3  90 03        	bcc :+
002A9B  3  4C A5 2A     	jmp laserl		; move left.
002A9E  3               :
002A9E  3               ; Laser right
002A9E  3               
002A9E  3  A9 02        	lda #2			; distance to travel.
002AA0  3  85 63        	sta z80_b
002AA2  3  4C A9 2A     	jmp laserm		; move laser.
002AA5  3               
002AA5  3               ; Laser left
002AA5  3               
002AA5  3               laserl:
002AA5  3  A9 FE        	lda #254		; distance to travel.
002AA7  3  85 63        	sta z80_b
002AA9  3               laserm:
002AA9  3  A0 05        	ldy #5
002AAB  3  B1 68        	lda (z80_ix),y		; x position.
002AAD  3  18           	clc
002AAE  3  65 63        	adc z80_b		; add distance.
002AB0  3  91 68        	sta (z80_ix),y		; set new x coordinate.
002AB2  3               
002AB2  3               ; Test new block.
002AB2  3               
002AB2  3  85 rr        	sta dispx 		; set x for block collision detection purposes.
002AB4  3  A0 03        	ldy #3
002AB6  3  B1 68        	lda (z80_ix),y 		; get y.
002AB8  3  85 rr        	sta dispy		; set coordinate for collision test.
002ABA  3  20 B4 33     	jsr tstbl 		; get block type there.
002ABD  3  C9 02        	cmp #WALL		; is it solid?
002ABF  3  D0 03        	bne :+
002AC1  3  4C 8D 2A     	jmp trailk		; yes, it cannot pass.
002AC4  3               :
002AC4  3               .if pflag .or dflag
002AC4  3  C9 04                cmp #FODDER             ; is it fodder?
002AC6  3  D0 06                bne :+
002AC8  3  20 8C 28             jsr fdchk               ; remove fodder block.
002ACB  3  4C 8D 2A             jmp trailk              ; destroy laser.
002ACE  3               :
002ACE  3               .endif
002ACE  3  60                   rts                     ; no, ignore it.
002ACF  3               
002ACF  3               ;----------------------------------------------------
002ACF  3               ; Dots mask
002ACF  3               ;----------------------------------------------------
002ACF  3               
002ACF  3  02 01        dots:	.byte 2,1
002AD1  3               
002AD1  3               
002AD1  3               ;----------------------------------------------------
002AD1  3               ; Plot, preserving de.
002AD1  3               ;----------------------------------------------------
002AD1  3               
002AD1  3               plotde:
002AD1  3  A5 65        	lda z80_d 		; put de on stack.
002AD3  3  48           	pha
002AD4  3  A5 64        	lda z80_e
002AD6  3  48           	pha
002AD7  3               
002AD7  3  20 C0 29     	jsr plot 		; plot pixel.
002ADA  3               
002ADA  3  68           	pla			; restore de from stack.
002ADB  3  85 64        	sta z80_e
002ADD  3  68           	pla
002ADE  3  85 65        	sta z80_d
002AE0  3               
002AE0  3  60           	rts
002AE1  3               
002AE1  3               ;----------------------------------------------------
002AE1  3               ; Shoot a laser.
002AE1  3               ;----------------------------------------------------
002AE1  3               
002AE1  3               shoot:
002AE1  3  85 62        	sta z80_c		; store type in c register.
002AE3  3  A0 08        	ldy #8
002AE5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AE7  3  18           	clc
002AE8  3               shoot1:
002AE8  3  69 04        	adc #(SPR_HGT/2)	; down 4 pixels.
002AEA  3  85 66        	sta z80_l 		; y coordinate in l.
002AEC  3               
002AEC  3  A0 09        	ldy #9
002AEE  3  B1 68        	lda (z80_ix),y 		; x coordinate in h.
002AF0  3  85 67        	sta z80_h
002AF2  3               
002AF2  3  A5 69        	lda z80_i		; store pointer to sprite.
002AF4  3  48           	pha
002AF5  3  A5 68        	lda z80_x
002AF7  3  48           	pha
002AF8  3               
002AF8  3  20 1B 2C     	jsr fpslot 		; find particle slot.
002AFB  3  B0 03        	bcs :+
002AFD  3  4C 4B 2B     	jmp vapou2		; failed, restore ix.
002B00  3               :
002B00  3  A9 00        	lda #0
002B02  3  A0 00        	ldy #0
002B04  3  91 68        	sta (z80_ix),y 		; set up type laser.
002B06  3               
002B06  3  A5 62        	lda z80_c
002B08  3  A0 01        	ldy #1
002B0A  3  91 68        	sta (z80_ix),y 		; set the direction.
002B0C  3               
002B0C  3  A5 66        	lda z80_l
002B0E  3  A0 03        	ldy #3
002B10  3  91 68        	sta (z80_ix),y		; set y coordinate.
002B12  3               
002B12  3  66 62        	ror z80_c		; check direction we want.
002B14  3  B0 03        	bcs :+
002B16  3  4C 24 2B     	jmp shootr		; shoot right.
002B19  3               :
002B19  3  A5 67        	lda z80_h		; X position.
002B1B  3               shoot0:
002B1B  3  29 FE        	and #$fe		; align on character boundary.
002B1D  3  A0 05        	ldy #5
002B1F  3  91 68        	sta (z80_ix),y		; set x coordinate.
002B21  3  4C 70 2B     	jmp vapou0 		; draw first image.
002B24  3               shootr:
002B24  3  A5 67        	lda z80_h		; x position.
002B26  3  18           	clc
002B27  3  69 07        	adc #SPR_WID-1		; look right.
002B29  3  4C 1B 2B     	jmp shoot0		; align and continue.
002B2C  3               
002B2C  3               ;----------------------------------------------------
002B2C  3               ; Create a bit of vapour trail.
002B2C  3               ;----------------------------------------------------
002B2C  3               
002B2C  3               vapour:
002B2C  3  A5 69        	lda z80_i		; store pointer to sprite.
002B2E  3  48           	pha
002B2F  3  A5 68        	lda z80_x
002B31  3  48           	pha
002B32  3               
002B32  3  A0 08        	ldy #8
002B34  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002B36  3  18           	clc
002B37  3               vapou3:
002B37  3  69 03        	adc #(SPR_HGT/2-1)	; mid-point of sprite.
002B39  3  85 66        	sta z80_l
002B3B  3               
002B3B  3  A0 09        	ldy #9
002B3D  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002B3F  3  69 07        	adc #7
002B41  3  85 67        	sta z80_h
002B43  3               
002B43  3  20 1B 2C     	jsr fpslot 		; find particle slot.
002B46  3  90 03        	bcc :+
002B48  3  4C 52 2B     	jmp vapou1		; no, we can use it.
002B4B  3               :
002B4B  3               vapou2:
002B4B  3  68           	pla
002B4C  3  85 68        	sta z80_x
002B4E  3  68           	pla
002B4F  3  85 69        	sta z80_i
002B51  3  60           	rts
002B52  3               vapou1:
002B52  3  A5 66        	lda z80_l
002B54  3  A0 03        	ldy #3
002B56  3  91 68        	sta (z80_ix),y		; set up y.
002B58  3               
002B58  3  A5 67        	lda z80_h
002B5A  3  A0 05        	ldy #5
002B5C  3  91 68        	sta (z80_ix),y 		; set up x coordinate.
002B5E  3               
002B5E  3  20 AC 2C     	jsr qrand		; get quick random number.
002B61  3  29 0F        	and #15			; random time.
002B63  3  18           	clc
002B64  3  69 0F        	adc #15			; minimum time on screen.
002B66  3  A0 01        	ldy #1
002B68  3  91 68        	sta (z80_ix),y		; set time on screen.
002B6A  3               
002B6A  3  A9 01        	lda #1
002B6C  3  A0 00        	ldy #0
002B6E  3  91 68        	sta (z80_ix),y		; define particle as vapour trail.
002B70  3               vapou0:
002B70  3  20 90 29     	jsr chkxy		; plot first position.
002B73  3  4C 4B 2B     	jmp vapou2
002B76  3               
002B76  3               ;----------------------------------------------------
002B76  3               ; Create a user particle.
002B76  3               ;----------------------------------------------------
002B76  3               
002B76  3               ptusr:
002B76  3  85 60        	sta z80_f		; store timer.
002B78  3               
002B78  3  A0 08        	ldy #8
002B7A  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002B7C  3  18           	clc
002B7D  3  69 07        	adc #7			; mid-point of sprite.
002B7F  3  85 66        	sta z80_l
002B81  3               
002B81  3  A0 09        	ldy #9
002B83  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002B85  3  18           	clc
002B86  3  69 07        	adc #7			; mid-point of sprite.
002B88  3  85 67        	sta z80_h
002B8A  3               
002B8A  3  20 1B 2C     	jsr fpslot 		; find particle slot.
002B8D  3  B0 01        	bcs ptusr1
002B8F  3  60           	rts 			; out of slots, can't generate anything.
002B90  3               ptusr1:
002B90  3  A5 66        	lda z80_l
002B92  3  A0 03        	ldy #3
002B94  3  91 68        	sta (z80_ix),y 		; set up y.
002B96  3               
002B96  3  A5 67        	lda z80_h
002B98  3  A0 05        	ldy #5
002B9A  3  91 68        	sta (z80_ix),y		; set up x coordinate.
002B9C  3               
002B9C  3  A5 60        	lda z80_f 		; restore timer.
002B9E  3  A0 01        	ldy #1
002BA0  3  91 68        	sta (z80_ix),y		; set time on screen.
002BA2  3               
002BA2  3  A9 07        	lda #7
002BA4  3  A0 00        	ldy #0
002BA6  3  91 68        	sta (z80_ix),y		; define particle as user particle.
002BA8  3               
002BA8  3  4C 90 29     	jmp chkxy		; plot first position.
002BAB  3               
002BAB  3               ;----------------------------------------------------
002BAB  3               ; Create a vertical or horizontal star.
002BAB  3               ;----------------------------------------------------
002BAB  3               
002BAB  3               star:
002BAB  3  A5 69        	lda z80_i		; store pointer to sprite.
002BAD  3  48           	pha
002BAE  3  A5 68        	lda z80_x
002BB0  3  48           	pha
002BB1  3               
002BB1  3  20 1B 2C     	jsr fpslot 		; find particle slot.
002BB4  3  B0 07        	bcs star7		; found one we can use.
002BB6  3               star0:
002BB6  3  68           	pla 			; restore sprite pointer.
002BB7  3  85 68        	sta z80_x
002BB9  3  68           	pla
002BBA  3  85 69        	sta z80_i
002BBC  3  60           	rts 			; out of slots, can't generate anything.
002BBD  3               star7:
002BBD  3  A5 62        	lda z80_c		; direction.
002BBF  3  29 03        	and #3 			; is it left?
002BC1  3  D0 03        	bne :+
002BC3  3  4C F5 2B     	jmp star1 		; yes, it's left.
002BC6  3               :
002BC6  3  C9 01        	cmp #1 			; is it right?
002BC8  3  D0 03        	bne :+
002BCA  3  4C 05 2C     	jmp star2 		; yes, it's right.
002BCD  3               :
002BCD  3  C9 02        	cmp #2 			; is it up?
002BCF  3  D0 03        	bne :+
002BD1  3  4C 12 2C     	jmp star3 		; yes, it's up.
002BD4  3               :
002BD4  3  AC 24 28     	ldy wntopx 		; get edge of screen.
002BD7  3  C8           	iny			; down one pixel.
002BD8  3  98           	tya
002BD9  3               star8:
002BD9  3  A0 03        	ldy #3
002BDB  3  91 68        	sta (z80_ix),y 		; set y coord.
002BDD  3  20 AC 2C     	jsr qrand 		; get quick random number.
002BE0  3               star9:
002BE0  3  A0 05        	ldy #5
002BE2  3  91 68        	sta (z80_ix),y		; set x position.
002BE4  3               
002BE4  3  A5 62        	lda z80_c		; direction.
002BE6  3  29 03        	and #3			; zero to three.
002BE8  3  18           	clc
002BE9  3  69 03        	adc #3			; 3 to 6 for starfield.
002BEB  3  A0 00        	ldy #0
002BED  3  91 68        	sta (z80_ix),y		; define particle as star.
002BEF  3  20 90 29     	jsr chkxy		; plot first position.
002BF2  3  4C B6 2B     	jmp star0
002BF5  3               star1:
002BF5  3  20 AC 2C     	jsr qrand		; get quick random number.
002BF8  3  A0 03        	ldy #3
002BFA  3  91 68        	sta (z80_ix),y 		; set y coord.
002BFC  3               
002BFC  3  AD 27 28     	lda wnrgtx 		; get edge of screen.
002BFF  3  18           	clc
002C00  3  69 0F        	adc #15			; add width of sprite minus 1.
002C02  3  4C E0 2B     	jmp star9
002C05  3               star2:
002C05  3  20 AC 2C     	jsr qrand 		; get quick random number.
002C08  3  A0 03        	ldy #3
002C0A  3  91 68        	sta (z80_ix),y		; set y coord.
002C0C  3               
002C0C  3  AD 25 28     	lda wnlftx		; get edge of screen.
002C0F  3  4C E0 2B     	jmp star9
002C12  3               star3:
002C12  3  AD 26 28     	lda wnbotx 		; get edge of screen.
002C15  3  18           	clc
002C16  3  69 0F        	adc #15 		; height of sprite minus one pixel.
002C18  3  4C D9 2B     	jmp star8
002C1B  3               
002C1B  3               ;----------------------------------------------------
002C1B  3               ; Find particle slot for lasers or vapour trail.
002C1B  3               ; can't use alternate accumulator.
002C1B  3               ;----------------------------------------------------
002C1B  3               
002C1B  3               fpslot:
002C1B  3  A9 00        	lda #<SHRAPN 		; shrapnel table.
002C1D  3  85 68        	sta z80_x
002C1F  3  A9 DE        	lda #>SHRAPN
002C21  3  85 69        	sta z80_i
002C23  3               
002C23  3  A9 37        	lda #NUMSHR		; number of pieces in table.
002C25  3  85 63        	sta z80_b
002C27  3               fpslt0:
002C27  3  A0 00        	ldy #0
002C29  3  B1 68        	lda (z80_ix),y		; get type.
002C2B  3  0A           	asl a  			; is this slot in use?
002C2C  3  90 01        	bcc :+
002C2E  3  60           	rts			; no, we can use it.
002C2F  3               :
002C2F  3  18           	clc			; point to more shrapnel.
002C30  3  A5 68        	lda z80_x
002C32  3  69 06        	adc #SHRSIZ
002C34  3  85 68        	sta z80_x
002C36  3  90 02        	bcc :+
002C38  3  E6 69        	inc z80_i
002C3A  3               :
002C3A  3  C6 63        	dec z80_b		; repeat for all shrapnel.
002C3C  3  D0 E9        	bne fpslt0
002C3E  3               
002C3E  3  18           	clc
002C3F  3  60           	rts 			; out of slots, can't generate anything.
002C40  3               
002C40  3               ;----------------------------------------------------
002C40  3               ; Create an explosion at sprite position.
002C40  3               ;----------------------------------------------------
002C40  3               
002C40  3               explod:
002C40  3  85 62        	sta z80_c 		; particles to create.
002C42  3               
002C42  3  A5 69        	lda z80_i 		; store pointer to sprite.
002C44  3  48           	pha
002C45  3  A5 68        	lda z80_x
002C47  3  48           	pha
002C48  3               
002C48  3  A0 08        	ldy #8
002C4A  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002C4C  3  85 66        	sta z80_l
002C4E  3  A0 09        	ldy #9
002C50  3  B1 68        	lda (z80_ix),y		; x coordinate.
002C52  3  85 67        	sta z80_h
002C54  3               
002C54  3  A9 00        	lda #<SHRAPN		; shrapnel table.
002C56  3  85 68        	sta z80_x
002C58  3  A9 DE        	lda #>SHRAPN
002C5A  3  85 69        	sta z80_i
002C5C  3               
002C5C  3  A9 37        	lda #NUMSHR		; number of pieces in table.
002C5E  3  85 rr        	sta explcnt
002C60  3               expld0:
002C60  3  A0 00        	ldy #0
002C62  3  B1 68        	lda (z80_ix),y		; get type.
002C64  3  0A           	asl a 			; is this slot in use?
002C65  3  B0 16        	bcs expld1		; no, we can use it.
002C67  3               expld2:
002C67  3  18           	clc
002C68  3  A5 68        	lda z80_x
002C6A  3  69 06        	adc #SHRSIZ
002C6C  3  85 68        	sta z80_x
002C6E  3  90 02        	bcc :+
002C70  3  E6 69        	inc z80_i
002C72  3               :
002C72  3  C6 rr        	dec explcnt		; repeat for all shrapnel.
002C74  3  D0 EA        	bne expld0
002C76  3               expld3:
002C76  3  68           	pla			; restore sprite pointer.
002C77  3  85 68        	sta z80_x
002C79  3  68           	pla
002C7A  3  85 69        	sta z80_i
002C7C  3  60           	rts 			; out of slots, can't generate any more.
002C7D  3               
002C7D  3               expld1:
002C7D  3  A5 62        	lda z80_c		; shrapnel counter.
002C7F  3  29 0F        	and #15			; 0 to 15.
002C81  3  18           	clc			; add to x.
002C82  3  65 66        	adc z80_l
002C84  3  A0 03        	ldy #3
002C86  3  91 68        	sta (z80_ix),y		; y coord.
002C88  3               
002C88  3  A5 rr        	lda seed3 		; crap random number.
002C8A  3  29 0F        	and #15			; 0 to 15.
002C8C  3  18           	clc 			; add to y.
002C8D  3  65 67        	adc z80_h
002C8F  3  A0 05        	ldy #5
002C91  3  91 68        	sta (z80_ix),y		; x coord.
002C93  3               
002C93  3  A9 02        	lda #2
002C95  3  A0 00        	ldy #0
002C97  3  91 68        	sta (z80_ix),y		; switch it on.
002C99  3               
002C99  3  20 90 29     	jsr chkxy		; plot first position.
002C9C  3  20 AC 2C     	jsr qrand		; quick random angle.
002C9F  3  29 3C        	and #60 		; keep within range.
002CA1  3  A0 01        	ldy #1
002CA3  3  91 68        	sta (z80_ix),y		; angle.
002CA5  3               
002CA5  3  C6 62        	dec z80_c		; one less piece of shrapnel to generate.
002CA7  3  D0 BE        	bne expld2 		; back to main explosion loop.
002CA9  3  4C 76 2C     	jmp expld3 		; restore sprite pointer and exit.
002CAC  3               
002CAC  3               ;explcnt:	.byte 0
002CAC  3               
002CAC  3               ;----------------------------------------------------
002CAC  3               ; Quick random
002CAC  3               ;----------------------------------------------------
002CAC  3               
002CAC  3               qrand:
002CAC  3  20 E8 33     	jsr random		; r register.
002CAF  3  45 rr        	eor seed3		; combine with seed.
002CB1  3  85 rr        	sta seed3 		; new seed.
002CB3  3  60           	rts
002CB4  3               
002CB4  3               ;seed3:	.byte 0
002CB4  3               
002CB4  3               ;----------------------------------------------------
002CB4  3               ; Display all shrapnel.
002CB4  3               ;----------------------------------------------------
002CB4  3               
002CB4  3               dshrp:
002CB4  3  A9 D1        	lda #<plotde		; display routine.
002CB6  3  8D BB 28     	sta proshx+1
002CB9  3  A9 2A        	lda #>plotde
002CBB  3  8D BC 28     	sta proshx+2
002CBE  3  20 A9 28     	jsr proshr		; process shrapnel.
002CC1  3               
002CC1  3  A9 CF        	lda #<prosh1		; processing routine.
002CC3  3  8D BB 28     	sta proshx+1
002CC6  3  A9 28        	lda #>prosh1
002CC8  3  8D BC 28     	sta proshx+2
002CCB  3  60           	rts
002CCC  3               
002CCC  3               ;------------------------------------------------------
002CCC  3               ; Particle engine.
002CCC  3               ;
002CCC  3               ; Init particle data for 55 particles in SHRAPN table.
002CCC  3               ; Every particle has 6 bytes.
002CCC  3               ;
002CCC  3               ; global:	-
002CCC  3               ; local:	x,y,hl
002CCC  3               ; calls:	-
002CCC  3               ;------------------------------------------------------
002CCC  3               
002CCC  3               inishr:
002CCC  3  A9 00        	lda #<SHRAPN 		; table.
002CCE  3  85 66        	sta z80_l
002CD0  3  A9 DE        	lda #>SHRAPN
002CD2  3  85 67        	sta z80_h
002CD4  3               
002CD4  3  A0 00        	ldy #0
002CD6  3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
002CD8  3               inish0:
002CD8  3  A9 FF        	lda #255 		; kill the shrapnel.
002CDA  3  91 66        	sta (z80_hl),y
002CDC  3               
002CDC  3  18           	clc 			; point there.
002CDD  3  A5 66        	lda z80_l
002CDF  3  69 06        	adc #SHRSIZ		; distance to next.
002CE1  3  85 66        	sta z80_l
002CE3  3  90 02        	bcc :+
002CE5  3  E6 67        	inc z80_h
002CE7  3               :
002CE7  3  CA           	dex
002CE8  3  D0 EE        	bne inish0 		; round again.
002CEA  3  60           	rts
002CEB  3               
002CEB  3               ;------------------------------------------------------
002CEB  3               ; Check for collision between laser and sprite.
002CEB  3               ;------------------------------------------------------
002CEB  3               
002CEB  3               lcol:
002CEB  3  A9 00        	lda #<SHRAPN		; shrapnel table.
002CED  3  85 66        	sta z80_l
002CEF  3  A9 DE        	lda #>SHRAPN
002CF1  3  85 67        	sta z80_h
002CF3  3               
002CF3  3  A9 37        	lda #NUMSHR		; number of pieces in table.
002CF5  3  85 63        	sta z80_b
002CF7  3               lcol0:
002CF7  3  A0 00        	ldy #0
002CF9  3  B1 66        	lda (z80_hl),y 		; get type.
002CFB  3  F0 10        	beq lcol1		; yes, check collision.
002CFD  3               lcol3:
002CFD  3  18           	clc			; point to more shrapnel.
002CFE  3  A5 66        	lda z80_l
002D00  3  69 06        	adc #SHRSIZ
002D02  3  85 66        	sta z80_l
002D04  3  90 02        	bcc :+
002D06  3  E6 67        	inc z80_h
002D08  3               :
002D08  3  C6 63        	dec z80_b		; repeat for all shrapnel.
002D0A  3  D0 EB        	bne lcol0
002D0C  3  60           	rts 			; no collision, carry not set.
002D0D  3               lcol1:
002D0D  3  A0 03        	ldy #3
002D0F  3  B1 66        	lda (z80_hl),y		; get y.
002D11  3  38           	sec
002D12  3  A0 08        	ldy #8
002D14  3  F1 68        	sbc (z80_ix),y		; subtract sprite y.
002D16  3               lcolh:
002D16  3  C9 09        	cmp #SPR_HGT 		; within range?
002D18  3  90 03        	bcc :+
002D1A  3  4C 2D 2D     	jmp lcol2		; no, missed.
002D1D  3               :
002D1D  3  A0 05        	ldy #5
002D1F  3  B1 66        	lda (z80_hl),y 		; get x.
002D21  3  38           	sec
002D22  3  A0 09        	ldy #9
002D24  3  F1 68        	sbc (z80_ix),y 		; subtract sprite y.
002D26  3  C9 10        	cmp #16			; within range?
002D28  3  B0 03        	bcs :+
002D2A  3  4C 30 2D     	jmp lcol4 		; yes, collision occurred.
002D2D  3               :
002D2D  3               lcol2:
002D2D  3  4C FD 2C     	jmp lcol3
002D30  3               lcol4:
002D30  3  38           	sec
002D31  3  60           	rts 			; return with carry set for collision.
002D32  3               .endif
002D32  3               
002D32  3               ;------------------------------------------------------
002D32  3               ; Main game engine code starts here.
002D32  3               ; After initialisation, mloop is the main loop
002D32  3               ;------------------------------------------------------
002D32  3               
002D32  3               game:
002D32  3               
002D32  3               
002D32  3               ; Init hardware and graphics mode
002D32  3               
002D32  3  20 3A 48     	jsr init 		; Init hardware
002D35  3               
002D35  3               ; Init joystick
002D35  3               
002D35  3  20 46 49     	jsr joyinit		; Init joystick
002D38  3               
002D38  3               rpblc2:
002D38  3               .if pflag
002D38  3  20 CC 2C     	jsr inishr 		; initialise particle engine.
002D3B  3               .endif
002D3B  3               evintr:
002D3B  3  20 A7 3E     	jsr evnt12 		; call intro/menu event.
002D3E  3               
002D3E  3  A9 02        	lda #WALL 		; write default property.
002D40  3  A2 00        	ldx #0
002D42  3               clrmap:
002D42  3  9D 00 D8     	sta MAP,x 		; block properties.
002D45  3  9D 00 D9     	sta MAP+256,x
002D48  3  9D 00 DA     	sta MAP+512,x
002D4B  3  9D 00 DB     	sta MAP+768,x
002D4E  3  E8           	inx			; next byte.
002D4F  3  D0 F1        	bne clrmap
002D51  3               
002D51  3               .if oflag
002D51  3               	jsr iniob 		; initialise objects.
002D51  3               .endif
002D51  3  A9 00        	lda #0			; put zero in accumulator.
002D53  3  85 rr        	sta gamwon		; reset game won flag.
002D55  3               
002D55  3  20 C3 2E     	jsr inisc 		; init the score.
002D58  3               mapst:
002D58  3  AD F3 3C     	lda stmap 		; start position on map.
002D5B  3  8D D6 3C     	sta roomtb		; set up position in table, if there is one.
002D5E  3               
002D5E  3               inipbl:
002D5E  3               .if aflag
002D5E  3               	lda #<eop		; reset blockpointer
002D5E  3               	sta pbptr
002D5E  3               	lda #>eop
002D5E  3               	sta pbptr+1
002D5E  3               .endif
002D5E  3               
002D5E  3  20 BE 38     	jsr initsc 		; set up first screen.
002D61  3               
002D61  3  A9 C5        	lda #<ssprit 		; default to spare sprite in table.
002D63  3  85 68        	sta z80_x
002D65  3  A9 3C        	lda #>ssprit
002D67  3  85 69        	sta z80_i
002D69  3               evini:
002D69  3  20 A8 3E     	jsr evnt13 		; initialisation.
002D6C  3               
002D6C  3               ; Two restarts.
002D6C  3               ; First restart - clear all sprites and initialise everything.
002D6C  3               
002D6C  3               rstrt:
002D6C  3  20 63 2E     	jsr rsevt 		; restart events.
002D6F  3  20 40 28     	jsr xspr 		; clear sprite table.
002D72  3  20 2A 3A     	jsr sprlst 		; fetch pointer to screen sprites.
002D75  3  20 B3 3A     	jsr ispr 		; initialise sprite table.
002D78  3               
002D78  3  4C 87 2D     	jmp rstrt0
002D7B  3               
002D7B  3               ; Second restart - clear all but player, and don't initialise him.
002D7B  3               
002D7B  3               rstrtn:
002D7B  3  20 63 2E     	jsr rsevt		; restart events.
002D7E  3  20 57 3A     	jsr nspr 		; clear all non-player sprites.
002D81  3  20 2A 3A     	jsr sprlst 		; fetch pointer to screen sprites.
002D84  3  20 F0 3A     	jsr kspr 		; initialise sprite table, no more players.
002D87  3               
002D87  3               ; Set up the player and/or enemy sprites.
002D87  3               
002D87  3               rstrt0:
002D87  3  A9 00        	lda #0 			; zero in accumulator.
002D89  3  85 rr        	sta nexlev 		; reset next level flag.
002D8B  3  85 rr        	sta restfl 		; reset restart flag.
002D8D  3  85 rr        	sta deadf 		; reset dead flag.
002D8F  3               
002D8F  3  20 D8 31     	jsr droom 		; show screen layout.
002D92  3               
002D92  3               rpblc0:
002D92  3               .if pflag
002D92  3  20 CC 2C     	jsr inishr 		; initialise particle engine.
002D95  3               .endif
002D95  3               .if aflag
002D95  3               	jsr rbloc		; draw blocks for this screen
002D95  3               .endif
002D95  3               .if oflag
002D95  3               	jsr shwob		; draw objects.
002D95  3               .endif
002D95  3               
002D95  3  A9 F9        	lda #<sprtab 		; address of sprite table, even sprites.
002D97  3  85 68        	sta z80_x
002D99  3  A9 3B        	lda #>sprtab
002D9B  3  85 69        	sta z80_i
002D9D  3  20 6E 36     	jsr dspr 		; display sprites.
002DA0  3               
002DA0  3  A9 0A        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002DA2  3  85 68        	sta z80_x
002DA4  3  A9 3C        	lda #>(sprtab+TABSIZ)
002DA6  3  85 69        	sta z80_i
002DA8  3  20 6E 36     	jsr dspr 		; display sprites.
002DAB  3               
002DAB  3               
002DAB  3               mloop:
002DAB  3  20 22 49     	jsr vsync 		; synchronise with display.
002DAE  3  A9 F9        	lda #<sprtab 		; address of sprite table, even sprites.
002DB0  3  85 68        	sta z80_x
002DB2  3  A9 3B        	lda #>sprtab
002DB4  3  85 69        	sta z80_i
002DB6  3  20 6E 36     	jsr dspr 		; display even sprites.
002DB9  3               
002DB9  3               ;	jsr plsnd 		; play sounds.
002DB9  3               
002DB9  3  20 A9 28     	jsr proshr
002DBC  3  A9 0A        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002DBE  3  85 68        	sta z80_x
002DC0  3  A9 3C        	lda #>(sprtab+TABSIZ)
002DC2  3  85 69        	sta z80_i
002DC4  3  20 6E 36     	jsr dspr 		; display odd sprites.
002DC7  3               
002DC7  3  A9 C5        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002DC9  3  85 68        	sta z80_x
002DCB  3  A9 3C        	lda #>(ssprit)
002DCD  3  85 69        	sta z80_i
002DCF  3               evlp1:
002DCF  3  20 A5 3E     	jsr evnt10 		; called once per main loop.
002DD2  3               
002DD2  3  20 EC 35     	jsr pspr 		; process sprites.
002DD5  3               
002DD5  3               ; Main loop events.
002DD5  3               
002DD5  3  A9 C5        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002DD7  3  85 68        	sta z80_x
002DD9  3  A9 3C        	lda #>ssprit
002DDB  3  85 69        	sta z80_i
002DDD  3               evlp2:
002DDD  3  20 A6 3E     	jsr evnt11 		; called once per main loop.
002DE0  3               bsortx:
002DE0  3  20 62 35     	jsr bsort 		; sort sprites.
002DE3  3               
002DE3  3  A5 rr        	lda nexlev		; finished level flag.
002DE5  3  F0 03        	beq :+
002DE7  3  4C 0F 2E     	jmp newlev		; is set, go to next level.
002DEA  3               :
002DEA  3  A5 rr        	lda gamwon		; finished game flag.
002DEC  3  F0 03        	beq :+
002DEE  3  4C 1E 2E     	jmp evwon		; is set, finish the game.
002DF1  3               :
002DF1  3  A5 rr        	lda restfl 		; finished level flag.
002DF3  3  C9 01        	cmp #1			; has it been set?
002DF5  3  D0 03        	bne :+
002DF7  3  4C 6C 2D     	jmp rstrt		; yes, go to next level.
002DFA  3               :
002DFA  3  C9 02        	cmp #2			; has it been set?
002DFC  3  D0 03        	bne :+
002DFE  3  4C 7B 2D     	jmp rstrtn		; yes, go to next level.
002E01  3               :
002E01  3  A5 rr        	lda deadf 		; dead flag.
002E03  3  F0 03        	beq :+
002E05  3  4C 24 2E     	jmp pdead		; yes, player dead.
002E08  3               :
002E08  3               ; back to start of main loop.
002E08  3               
002E08  3  E6 rr        	inc frmno
002E0A  3  E6 rr        	inc clock
002E0C  3  4C AB 2D     	jmp mloop		; switched to a jmp mloop during test mode.
002E0F  3               
002E0F  3               ;----------------------------------------------------------
002E0F  3               ; Read blocks from list and update screen accordingly.
002E0F  3               ;----------------------------------------------------------
002E0F  3               
002E0F  3               .if aflag
002E0F  3               rbloc:
002E0F  3               	lda #<eop		; reset temp blockpointer
002E0F  3               	sta pbbuf
002E0F  3               	lda #>eop
002E0F  3               	sta pbbuf+1
002E0F  3               
002E0F  3               rbloc2:
002E0F  3               	lda pbbuf			; check for last block
002E0F  3               	cmp pbptr
002E0F  3               	bne rbloc1
002E0F  3               	lda pbbuf+1
002E0F  3               	cmp pbptr+1
002E0F  3               	bne rbloc1
002E0F  3               	rts
002E0F  3               rbloc1:
002E0F  3               	ldy #0
002E0F  3               	lda (pbbuf),y		; check if block for this scno
002E0F  3               	cmp scno
002E0F  3               	bne rbloc0		; if not, skip
002E0F  3               	iny
002E0F  3               	lda (pbbuf),y		; get y
002E0F  3               	sta dispy
002E0F  3               	iny
002E0F  3               	lda (pbbuf),y		; get x
002E0F  3               	sta dispx
002E0F  3               	iny
002E0F  3               	lda (pbbuf),y		; get blocknr
002E0F  3               	jsr pattr2		; draw block
002E0F  3               rbloc0:
002E0F  3               	clc			; point to next block
002E0F  3               	lda pbbuf
002E0F  3               	adc #4
002E0F  3               	sta pbbuf
002E0F  3               	bcc rbloc2
002E0F  3               	inc pbbuf+1
002E0F  3               	jmp rbloc2
002E0F  3               .endif
002E0F  3               
002E0F  3               ;----------------------------------------------------------
002E0F  3               ; New level
002E0F  3               ;----------------------------------------------------------
002E0F  3               
002E0F  3               newlev:
002E0F  3  A5 rr        	lda scno 			; current screen.
002E11  3  18           	clc
002E12  3  69 01        	adc #1				; next screen.
002E14  3  CD FE 44     	cmp numsc			; total number of screens.
002E17  3  B0 05        	bcs evwon			; yes, game finished.
002E19  3  85 rr        	sta scno			; set new level number.
002E1B  3  4C 6C 2D     	jmp rstrt			; restart, clearing all aliens.
002E1E  3               
002E1E  3               evwon:
002E1E  3  20 D6 3E     	jsr evnt18		 	; game completed.
002E21  3  4C 38 2E     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002E24  3               
002E24  3               ;----------------------------------------------------------
002E24  3               ; Player dead.
002E24  3               ;----------------------------------------------------------
002E24  3               
002E24  3               pdead:
002E24  3  A9 00        	lda #0				; zeroise accumulator.
002E26  3  85 rr        	sta deadf			; reset dead flag.
002E28  3               evdie:
002E28  3  20 D4 3E     	jsr evnt16 			; death subroutine.
002E2B  3  A5 rr        	lda numlif			; number of lives.
002E2D  3  F0 03        	beq :+
002E2F  3  4C 6C 2D     	jmp rstrt 			; restart game.
002E32  3               :
002E32  3               evfail:
002E32  3  20 D5 3E     	jsr evnt17 			; failure event.
002E35  3  4C 32 2D     	jmp game			; restart game
002E38  3               
002E38  3               ;----------------------------------------------------------
002E38  3               ; Tidy things up
002E38  3               ;----------------------------------------------------------
002E38  3               
002E38  3               tidyup:
002E38  3  A0 00        	ldy #0				; digits to check.
002E3A  3               tidyu2:
002E3A  3  B9 AC 2F     	lda score,y 			; get score digit.
002E3D  3  CD B2 2F     	cmp hiscor 			; are we larger than high score digit?
002E40  3  90 07        	bcc tidyu0			; high score is bigger.
002E42  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002E44  3  C8           	iny				; next digit of high score.
002E45  3  C0 06        	cpy #6
002E47  3  D0 F1        	bne tidyu2			; repeat for all digits
002E49  3               tidyu0:
002E49  3  A9 AC        	lda #<score			; return pointing to score.
002E4B  3  85 62        	sta z80_c
002E4D  3  A9 2F        	lda #>score
002E4F  3  85 63        	sta z80_b
002E51  3  60           	rts
002E52  3               tidyu1:
002E52  3  A0 05        	ldy #5
002E54  3               tidyu3:
002E54  3  B9 AC 2F     	lda score,y			; score.
002E57  3  99 B2 2F     	sta hiscor,y			; high score.
002E5A  3  88           	dey
002E5B  3  10 F7        	bpl tidyu3 			; copy score to high score.
002E5D  3               evnewh:
002E5D  3  20 D7 3E     	jsr evnt19			; new high score event.
002E60  3  4C 49 2E     	jmp tidyu0			; tidy up.
002E63  3               
002E63  3               ;--------------------------------------------------
002E63  3               ; Restart event.
002E63  3               ;--------------------------------------------------
002E63  3               
002E63  3               rsevt:
002E63  3  A9 C5        	lda #<ssprit 			; default to spare element in table.
002E65  3  85 68        	sta z80_x
002E67  3  A9 3C        	lda #>ssprit
002E69  3  85 69        	sta z80_i
002E6B  3               evrs:
002E6B  3  4C A9 3E     	jmp evnt14	 		; call restart event.
002E6E  3               
002E6E  3               ;------------------------------------------------------------------
002E6E  3               ; Copy number passed in a to string position bc, right-justified.
002E6E  3               ;
002E6E  3               ; Input:
002E6E  3               ;  A  = number
002E6E  3               ;  BC = string address
002E6E  3               ;
002E6E  3               ; Output:
002E6E  3               ;  BC = string with number
002E6E  3               ;-----------------------------------------------------------------
002E6E  3               
002E6E  3               num2ch:
002E6E  3  85 65        	sta z80_d		; Save number
002E70  3               
002E70  3  A9 00        	lda #0
002E72  3  85 rr        	sta flag
002E74  3               numdg3:
002E74  3  A2 64        	ldx #100		; hundreds column.
002E76  3  86 64        	stx z80_e
002E78  3  20 88 2E     	jsr numdg		; show digit.
002E7B  3               numdg2:
002E7B  3  A2 0A        	ldx #10			; tens column.
002E7D  3  86 64        	stx z80_e
002E7F  3  20 88 2E     	jsr numdg		; show digit.
002E82  3               
002E82  3  E6 rr        	inc flag
002E84  3  A2 01        	ldx #1			; units column.
002E86  3  86 64        	stx z80_e
002E88  3               numdg:
002E88  3  A9 30        	lda #48			; clear digit.
002E8A  3  85 61        	sta z80_a
002E8C  3               numdg1:
002E8C  3  A5 65        	lda z80_d
002E8E  3  C5 64        	cmp z80_e
002E90  3  90 0E        	bcc numdg0		; nothing to show.
002E92  3  38           	sec
002E93  3  A5 65        	lda z80_d
002E95  3  E5 64        	sbc z80_e		; subtract from column.
002E97  3  85 65        	sta z80_d
002E99  3  E6 61        	inc z80_a		; increment digit.
002E9B  3  E6 rr        	inc flag
002E9D  3  4C 8C 2E     	jmp numdg1		; repeat until column is zero.
002EA0  3               numdg0:
002EA0  3  A0 00        	ldy #0
002EA2  3  A5 61        	lda z80_a
002EA4  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002EA6  3  A5 rr        	lda flag
002EA8  3  F0 06        	beq :+
002EAA  3  E6 62        	inc z80_c		; next buffer position.
002EAC  3  D0 02        	bne :+
002EAE  3  E6 63        	inc z80_b
002EB0  3               :
002EB0  3  60           	rts
002EB1  3               num2dd:
002EB1  3  85 65        	sta z80_d		; Save number
002EB3  3               
002EB3  3  A9 01        	lda #1
002EB5  3  85 rr        	sta flag
002EB7  3               
002EB7  3  4C 7B 2E     	jmp numdg2
002EBA  3               num2td:
002EBA  3  85 65        	sta z80_d		; Save number
002EBC  3               
002EBC  3  A9 01        	lda #1
002EBE  3  85 rr        	sta flag
002EC0  3  4C 74 2E     	jmp numdg3
002EC3  3               
002EC3  3               ;flag:	.byte 0
002EC3  3               
002EC3  3               ;---------------------------------------------------------
002EC3  3               ; Reset score to "000000"
002EC3  3               ;---------------------------------------------------------
002EC3  3               
002EC3  3               inisc:
002EC3  3  A9 30        	lda #'0'
002EC5  3  A2 05        	ldx #5			; digits to initialise.
002EC7  3               inisc0:
002EC7  3  9D AC 2F     	sta score,x 		; write zero digit.
002ECA  3  CA           	dex			; next column.
002ECB  3  10 FA        	bpl inisc0		; repeat for all digits.
002ECD  3               
002ECD  3  60           	rts
002ECE  3               
002ECE  3               ;-----------------------------------------------------
002ECE  3               ; Multiply h by d and return in hl.
002ECE  3               ;
002ECE  3               ; Input:
002ECE  3               ;  H = first number
002ECE  3               ;  D = second number
002ECE  3               ;
002ECE  3               ; Output:
002ECE  3               ;  HL = result H x D
002ECE  3               ;-----------------------------------------------------
002ECE  3               
002ECE  3               imul:
002ECE  3  A5 65        	lda z80_d		; HL = H * D
002ED0  3  85 64        	sta z80_e
002ED2  3  A5 67        	lda z80_h
002ED4  3  85 62        	sta z80_c		; make c first multiplier.
002ED6  3               imul0:
002ED6  3  A9 00        	lda #0			; zeroise total.
002ED8  3  85 66        	sta z80_l
002EDA  3  85 67        	sta z80_h
002EDC  3               
002EDC  3  A5 67        	lda z80_h
002EDE  3  85 65        	sta z80_d		; zeroise high byte.
002EE0  3               
002EE0  3  A9 08        	lda #8			; repeat 8 times.
002EE2  3  85 63        	sta z80_b
002EE4  3               imul1:
002EE4  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002EE6  3  90 0E        	bcc imul2		; wasn't set.
002EE8  3  18           	clc			; bit was set, so add de.
002EE9  3  A5 66        	lda z80_l
002EEB  3  65 64        	adc z80_e
002EED  3  85 66        	sta z80_l
002EEF  3  A5 67        	lda z80_h
002EF1  3  65 65        	adc z80_d
002EF3  3  85 67        	sta z80_h
002EF5  3  18           	clc 			; reset carry.
002EF6  3               imul2:
002EF6  3  06 64        	asl z80_e 		; shift de 1 bit left.
002EF8  3  26 65        	rol z80_d
002EFA  3  C6 63        	dec z80_b
002EFC  3  D0 E6        	bne imul1		; repeat 8 times.
002EFE  3               
002EFE  3  60           	rts
002EFF  3               
002EFF  3               ;-----------------------------------------------
002EFF  3               ; Divide d by e and return in d, remainder in a.
002EFF  3               ;
002EFF  3               ; Input:
002EFF  3               ;  D = first number
002EFF  3               ;  E = second number
002EFF  3               ;
002EFF  3               ; Output:
002EFF  3               ;  D = result D/E
002EFF  3               ;  A = remainder
002EFF  3               ;-----------------------------------------------
002EFF  3               
002EFF  3               idiv:
002EFF  3  A9 00        	lda #0
002F01  3  A0 08        	ldy #8		 	; bits to shift.
002F03  3  06 65        	asl z80_d
002F05  3               idiv0:
002F05  3  2A           	rol a 			; multiply d by 2.
002F06  3  C5 64        	cmp z80_e 		; test if e is smaller.
002F08  3  90 02        	bcc idiv1		; e is greater, no division this time.
002F0A  3  E5 64        	sbc z80_e		; subtract it.
002F0C  3               idiv1:
002F0C  3  26 65        	rol z80_d		; rotate into d.
002F0E  3  88           	dey
002F0F  3  D0 F4        	bne idiv0		; repeat
002F11  3  60           	rts
002F12  3               
002F12  3               ;---------------------------------------------------
002F12  3               ; Play AY sound effect
002F12  3               ;---------------------------------------------------
002F12  3               
002F12  3               plsnd:
002F12  3  60           	rts
002F13  3               
002F13  3               ;---------------------------------------------------
002F13  3               ; Objects handling.
002F13  3               ; 32 bytes for image
002F13  3               ; 3 for room, y and x
002F13  3               ; 3 for starting room, y and x.
002F13  3               ; 254 = disabled.
002F13  3               ; 255 = object in player"s pockets.
002F13  3               ;---------------------------------------------------
002F13  3               
002F13  3               ;---------------------------------------------------
002F13  3               ; Show items present.
002F13  3               ;---------------------------------------------------
002F13  3               
002F13  3               .if oflag
002F13  3               shwob:
002F13  3               	lda #<objdta 			; objects table.
002F13  3               	sta z80_l
002F13  3               	lda #>objdta
002F13  3               	sta z80_h
002F13  3               
002F13  3               	lda numob 			; number of objects in the game.
002F13  3               	sta sprcnt
002F13  3               shwob0:
002F13  3               	ldy #32 			; distance to room number.
002F13  3               	lda (z80_hl),y 			; same as an item?
002F13  3               	cmp scno 			; current location.
002F13  3               	bne :+
002F13  3               	jsr dobj 			; yes, display object.
002F13  3               :
002F13  3               	clc
002F13  3               	lda z80_l
002F13  3               	adc #38 			; distance to next item.
002F13  3               	sta z80_l
002F13  3               	lda z80_h
002F13  3               	adc #0
002F13  3               	sta z80_h	 		; point to it.
002F13  3               	dec sprcnt
002F13  3               	bne shwob0 			; repeat for others.
002F13  3               	rts
002F13  3               
002F13  3               ;---------------------------------------------------
002F13  3               ; Display object.
002F13  3               ; hl must point to object's start address.
002F13  3               ;
002F13  3               ; Input:
002F13  3               ;  HL = object address
002F13  3               ;---------------------------------------------------
002F13  3               
002F13  3               dobj:
002F13  3               	ldy #33
002F13  3               	lda (z80_hl),y 			; point to y.
002F13  3               	sta dispy
002F13  3               	iny
002F13  3               	lda (z80_hl),y 			; point to x.
002F13  3               	sta dispx
002F13  3               dobj1:
002F13  3               	jmp sprite 			; draw this sprite.
002F13  3               
002F13  3               ;--------------------------------------
002F13  3               ; Remove an object.
002F13  3               ;
002F13  3               ; Input:
002F13  3               ;  A = object number
002F13  3               ;--------------------------------------
002F13  3               
002F13  3               remob:
002F13  3               	cmp numob			; number of objects in game.
002F13  3               	bcc :+				; are we checking past the end?
002F13  3               	rts				; yes, can't get non-existent item.
002F13  3               :
002F13  3               	pha				; remember object.
002F13  3               	jsr getob			; pick it up if we haven't already got it.
002F13  3               	pla				; retrieve object number.
002F13  3               	jsr gotob			; get its address.
002F13  3               	lda #254
002F13  3               	ldy #32
002F13  3               	sta (z80_hl),y			; remove it.
002F13  3               	rts
002F13  3               
002F13  3               ;---------------------------------------------------
002F13  3               ; Pick up object number held in the accumulator.
002F13  3               ;
002F13  3               ; Input:
002F13  3               ;  A = object number
002F13  3               ;---------------------------------------------------
002F13  3               
002F13  3               getob:
002F13  3               	cmp numob 		; number of objects in game.
002F13  3               	bcc :+			; are we checking past the end?
002F13  3               	rts			; yes, can't get non-existent item.
002F13  3               :
002F13  3               	jsr gotob 		; check if we already have it.
002F13  3               	cmp #255
002F13  3               	bne :+
002F13  3               	rts			; we already do.
002F13  3               :
002F13  3               	ldy #32
002F13  3               	lda (z80_hl),y		; is it on this screen?
002F13  3               	cmp scno 		; current screen.
002F13  3               	bne getob0		; not on screen, so nothing to delete.
002F13  3               
002F13  3               	lda #255
002F13  3               	sta (z80_hl),y		; pick it up.
002F13  3               	iny 			; point to y coord.
002F13  3               getob1:
002F13  3               	ldy #33
002F13  3               	lda (z80_hl),y		; y coord.
002F13  3               	sta dispy
002F13  3               	ldy #34
002F13  3               	lda (z80_hl),y 		; x coord.
002F13  3               	sta dispx
002F13  3               	jmp dobj1 		; delete object sprite.
002F13  3               getob0:
002F13  3               	lda #255
002F13  3               	sta (z80_hl),y 		; pick it up.
002F13  3               	rts
002F13  3               .endif
002F13  3               
002F13  3               ;-----------------------------------------------------------------
002F13  3               ; Got object check.
002F13  3               ; Call with object in accumulator, returns zero set if in pockets.
002F13  3               ;
002F13  3               ; Input:
002F13  3               ;  A = object number
002F13  3               ;-----------------------------------------------------------------
002F13  3               .if oflag .or mflag
002F13  3               gotob:
002F13  3               	cmp numob 		; number of objects in game.
002F13  3               	bcc :+ 			; are we checking past the end?
002F13  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002F13  3               :
002F13  3               	jsr findob		; find the object.
002F13  3               gotob1:
002F13  3               	rts
002F13  3               
002F13  3               gotob0:
002F13  3               	lda #254 		; missing.
002F13  3               	jmp gotob1
002F13  3               
002F13  3               findob:
002F13  3               	pha			; save object number
002F13  3               	lda #<objdta 		; objects.
002F13  3               	sta z80_l
002F13  3               	lda #>objdta
002F13  3               	sta z80_h
002F13  3               	pla			; retreive object number
002F13  3               	beq fndob1 		; is it zero? yes, skip loop.
002F13  3               	tax 			; loop counter
002F13  3               fndob2:
002F13  3               	clc
002F13  3               	lda z80_l
002F13  3               	adc #38 		; size of each object.
002F13  3               	sta z80_l
002F13  3               	bcc :+
002F13  3               	inc z80_h
002F13  3               :
002F13  3               	dex 			; repeat until we find address.
002F13  3               	bne fndob2
002F13  3               fndob1:
002F13  3               	ldy #32			; distance to room it's in.
002F13  3               	lda (z80_hl),y		; fetch status.
002F13  3               	rts
002F13  3               .endif
002F13  3               
002F13  3               ;---------------------------------------------
002F13  3               ; Drop object number at (dispx, dispy).
002F13  3               ;
002F13  3               ; Input:
002F13  3               ;  A = object number
002F13  3               ;---------------------------------------------
002F13  3               
002F13  3               .if oflag
002F13  3               drpob:
002F13  3               	cmp numob 		; are we checking past the end?
002F13  3               	bcc :+
002F13  3               	rts			; yes, can't drop non-existent item.
002F13  3               :
002F13  3               	jsr gotob		; make sure object is in inventory.
002F13  3               	cmp scno		; already on this screen?
002F13  3               	bne :+
002F13  3               	rts			; yes, nothing to do.
002F13  3               :
002F13  3               	ldy #32
002F13  3               	lda scno
002F13  3               	sta (z80_hl),y		; bring onto screen.
002F13  3               	lda dispy		; sprite y coordinate.
002F13  3               	iny
002F13  3               	sta (z80_hl),y		; point to object y.
002F13  3               	lda dispx 		; sprite x coordinate.
002F13  3               	iny
002F13  3               	sta (z80_hl),y 		; point to object x
002F13  3               	jmp dobj		; draw the object sprite.
002F13  3               
002F13  3               ;-----------------------------------------------
002F13  3               ; Seek objects at sprite position.
002F13  3               ;
002F13  3               ; Output:
002F13  3               ;  A = object number, if not found A=255
002F13  3               ;-----------------------------------------------
002F13  3               
002F13  3               skobj:
002F13  3               	lda #<objdta 		; pointer to objects.
002F13  3               	sta z80_l
002F13  3               	lda #>objdta
002F13  3               	sta z80_h
002F13  3               
002F13  3               	lda numob 		; number of objects in game.
002F13  3               	sta z80_b 		; set up the loop counter.
002F13  3               skobj0:
002F13  3               	lda scno		; current room number.
002F13  3               	ldy #32
002F13  3               	cmp (z80_hl),y		; is object in here?
002F13  3               	bne :+
002F13  3               	jsr skobj1		; yes, check coordinates.
002F13  3               :
002F13  3               	clc			; point to next object in table.
002F13  3               	lda z80_l
002F13  3               	adc #38			; size of each object.
002F13  3               	sta z80_l
002F13  3               	bcc :+
002F13  3               	inc z80_h
002F13  3               :
002F13  3               	dec z80_b
002F13  3               	bne skobj0		; repeat for all objects.
002F13  3               
002F13  3               	lda #255		; end of list and nothing found, return 255.
002F13  3               	rts
002F13  3               
002F13  3               skobj1:
002F13  3               	ldy #33			; point to y coordinate.
002F13  3               	lda (z80_hl),y		; point to y coordinate.
002F13  3               	sec
002F13  3               	ldy #8
002F13  3               	sbc (z80_ix),y 		; subtract sprite y.
002F13  3               	clc
002F13  3               	adc #15			; add sprite height minus one.
002F13  3               	cmp #31			; within range?
002F13  3               	bcs skobj2		; no, ignore object.
002F13  3               
002F13  3               	ldy #34			; point to x coordinate now.
002F13  3               	lda (z80_hl),y 		; get coordinate.
002F13  3               	sec
002F13  3               	ldy #9
002F13  3               	sbc (z80_ix),y 		; subtract the sprite x.
002F13  3               	clc			; add sprite width minus one.
002F13  3               	adc #15
002F13  3               	cmp #31			; within range?
002F13  3               	bcs skobj2		; no, ignore object.
002F13  3               
002F13  3               	pla			; remove return address from stack.
002F13  3               	pla
002F13  3               
002F13  3               	lda numob 		; objects in game.
002F13  3               	sec
002F13  3               	sbc z80_b		; subtract loop counter.
002F13  3               skobj2:
002F13  3               	rts			; accumulator now points to object.
002F13  3               .endif
002F13  3               
002F13  3               ;---------------------------------------------------------------------
002F13  3               ; Spawn a new sprite.
002F13  3               ;---------------------------------------------------------------------
002F13  3               
002F13  3               .if gflag
002F13  3                 offset = 0
002F13  3               .else
002F13  3                 offset = 20
002F13  3               .endif
002F13  3               
002F13  3               spawn:
002F13  3  A9 F9        	lda #<sprtab		; sprite table.
002F15  3  85 66        	sta z80_l
002F17  3  A9 3B        	lda #>sprtab
002F19  3  85 67        	sta z80_h
002F1B  3               numsp1:
002F1B  3  A9 0C        	lda #NUMSPR		; number of sprites.
002F1D  3  85 rr        	sta spcnt
002F1F  3               spaw0:
002F1F  3  A0 00        	ldy #0
002F21  3  B1 66        	lda (z80_hl),y		; get sprite type.
002F23  3  C9 FF        	cmp #255		; is it an unused slot?
002F25  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002F27  3               
002F27  3  18           	clc 			; point to next sprite in table.
002F28  3  A5 66        	lda z80_l
002F2A  3  69 11        	adc #TABSIZ		; size of each entry.
002F2C  3  85 66        	sta z80_l
002F2E  3  90 02        	bcc :+
002F30  3  E6 67        	inc z80_h
002F32  3               :
002F32  3  C6 rr        	dec spcnt		; one less iteration.
002F34  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002F36  3               
002F36  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002F36  3               
002F36  3               spaw1:
002F36  3  A5 69        	lda z80_i		; address of original sprite.
002F38  3  48           	pha
002F39  3  A5 68        	lda z80_x
002F3B  3  48           	pha
002F3C  3               
002F3C  3  A5 66        	lda z80_l		; store spawned sprite address.
002F3E  3  85 rr        	sta spptr
002F40  3  A5 67        	lda z80_h
002F42  3  85 rr        	sta spptr+1
002F44  3               
002F44  3  A5 62        	lda z80_c
002F46  3  A0 00        	ldy #0
002F48  3  91 66        	sta (z80_hl),y 		; set the type.
002F4A  3  A0 05        	ldy #5
002F4C  3  91 66        	sta (z80_hl),y		; copy
002F4E  3               
002F4E  3  A5 63        	lda z80_b
002F50  3  A0 01        	ldy #1
002F52  3  91 66        	sta (z80_hl),y		; set the image.
002F54  3  A0 06        	ldy #6
002F56  3  91 66        	sta (z80_hl),y		; copy
002F58  3               
002F58  3  A9 00        	lda #0 			; frame zero.
002F5A  3  A0 02        	ldy #2
002F5C  3  91 66        	sta (z80_hl),y		; set frame.
002F5E  3  A0 07        	ldy #7
002F60  3  91 66        	sta (z80_hl),y		; copy
002F62  3               
002F62  3  A0 08        	ldy #8
002F64  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002F66  3  A0 03        	ldy #3
002F68  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002F6A  3  A0 08        	ldy #8
002F6C  3  91 66        	sta (z80_hl),y		; copy
002F6E  3               
002F6E  3  A0 09        	ldy #9
002F70  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002F72  3  A0 04        	ldy #4
002F74  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002F76  3  A0 09        	ldy #9
002F78  3  91 66        	sta (z80_hl),y		; copy
002F7A  3               
002F7A  3  A0 0A        	ldy #10			; direction of original.
002F7C  3  B1 68        	lda (z80_ix),y
002F7E  3  91 66        	sta (z80_hl),y		; direction
002F80  3               
002F80  3  A9 00        	lda #0
002F82  3  A0 0B        	ldy #11
002F84  3  91 66        	sta (z80_hl),y		; reset parameter.
002F86  3  C8           	iny
002F87  3  91 66        	sta (z80_hl),y		; reset parameter.
002F89  3  C8           	iny
002F8A  3  91 66        	sta (z80_hl),y		; reset parameter.
002F8C  3  C8           	iny
002F8D  3  91 66        	sta (z80_hl),y		; reset parameter.
002F8F  3               rtssp:
002F8F  3  A5 rr        	lda spptr		; address of new sprite.
002F91  3  85 68        	sta z80_x
002F93  3  A5 rr        	lda spptr+1
002F95  3  85 69        	sta z80_i
002F97  3               evis1:
002F97  3  20 A4 3E     	jsr evnt09 		; call sprite initialisation event.
002F9A  3               
002F9A  3  A5 rr        	lda spptr 		; address of new sprite.
002F9C  3  85 68        	sta z80_x
002F9E  3  A5 rr        	lda spptr+1
002FA0  3  85 69        	sta z80_i
002FA2  3  20 97 49     	jsr sspria 		; display the new sprite.
002FA5  3               
002FA5  3  68           	pla			; address of original sprite.
002FA6  3  85 68        	sta z80_x
002FA8  3  68           	pla
002FA9  3  85 69        	sta z80_i
002FAB  3               
002FAB  3  60           	rts
002FAC  3               
002FAC  3               ;spcnt:	.byte 0
002FAC  3               ;spptr:	.word 0			; spawned sprite pointer.
002FAC  3               ;seed:	.byte 0			; seed for random numbers.
002FAC  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002FB0  3  30 30        
002FB2  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002FB6  3  30 30        
002FB8  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002FBC  3  30 30        
002FBE  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002FC0  3               
002FC0  3               ;----------------------------------------------------
002FC0  3               ; Check y-pos
002FC0  3               ;----------------------------------------------------
002FC0  3               
002FC0  3               checkx:
002FC0  3  A5 rr        	lda dispy		; y position.
002FC2  3  C9 19        	cmp #ScrHeight			; off screen?
002FC4  3  B0 01        	bcs :+
002FC6  3  60           	rts			; no, it's okay.
002FC7  3               :
002FC7  3  68           	pla			; remove return address from stack.
002FC8  3  85 66        	sta z80_l
002FCA  3  68           	pla
002FCB  3  85 67        	sta z80_h
002FCD  3  60           	rts
002FCE  3               
002FCE  3               ;-----------------------------------------------
002FCE  3               ; Displays the current high score.
002FCE  3               ;-----------------------------------------------
002FCE  3               
002FCE  3               dhisc:
002FCE  3  A9 B2        	lda #<hiscor 		; high score text.
002FD0  3  8D 05 30     	sta dscor3+1
002FD3  3  8D 29 30     	sta bscor3+1
002FD6  3  A9 2F        	lda #>hiscor
002FD8  3  8D 06 30     	sta dscor3+2
002FDB  3  8D 2A 30     	sta bscor3+2
002FDE  3  4C F1 2F     	jmp dscor1		; check in printable range then show 6 digits.
002FE1  3               
002FE1  3               ;------------------------------------------------------
002FE1  3               ; Displays the current score.
002FE1  3               ;------------------------------------------------------
002FE1  3               
002FE1  3               dscor:
002FE1  3  A9 AC        	lda #<score		; score text.
002FE3  3  8D 05 30     	sta dscor3+1
002FE6  3  8D 29 30     	sta bscor3+1
002FE9  3  A9 2F        	lda #>score
002FEB  3  8D 06 30     	sta dscor3+2
002FEE  3  8D 2A 30     	sta bscor3+2
002FF1  3               dscor1:
002FF1  3  8C 25 30     	sty tmpscr
002FF4  3  20 40 35     	jsr preprt		; set up font and print position.
002FF7  3  20 C0 2F     	jsr checkx		; make sure we're in a printable range.
002FFA  3               
002FFA  3               ;	lda #6			; digits to display.
002FFA  3               ;	sta z80_b
002FFA  3  A5 rr        	lda prtmod		; get print mode.
002FFC  3  F0 03        	beq :+			; standard size text?
002FFE  3  4C 26 30     	jmp bscor0		; no, show double-height.
003001  3               :
003001  3               dscor0:
003001  3               ;	ldy #0
003001  3               ;	lda (z80_hl),y 		; fetch character.
003001  3  AC 25 30     	ldy tmpscr
003004  3               dscor3:
003004  3  B9 AC 2F     	lda score,y
003007  3  20 3E 31     	jsr pchar 		; display character.
00300A  3  E6 rr        	inc dispx		; move along x coordinate
00300C  3               
00300C  3               ;	inc z80_l		; next score column.
00300C  3               ;	bne :+
00300C  3               ;	inc z80_h
00300C  3               ;:
00300C  3  EE 25 30     	inc tmpscr
00300F  3  C6 63        	dec z80_b
003011  3  D0 EE        	bne dscor0 		; repeat for all digits.
003013  3               dscor2:
003013  3  AD E8 3C     	lda bcolour
003016  3  20 3E 31     	jsr pchar
003019  3  20 16 35     	jsr nexpos
00301C  3               
00301C  3  A5 rr        	lda dispx 		; set up display coordinates.
00301E  3  85 rr        	sta charx
003020  3  A5 rr        	lda dispy
003022  3  85 rr        	sta chary
003024  3  60           	rts
003025  3               
003025  3  00           tmpscr:	.byte 0
003026  3               ;------------------------------------------------------
003026  3               ; Displays the current score in double-height characters.
003026  3               ;
003026  3               ; Input:
003026  3               ;  B  = digit number
003026  3               ;  HL = score string
003026  3               ;------------------------------------------------------
003026  3               
003026  3               bscor0:
003026  3               ;	ldy #0
003026  3               
003026  3               ;	lda (z80_hl),y 		; fetch character.
003026  3  A4 rr        	ldy tmp
003028  3               bscor3:
003028  3  B9 AC 2F     	lda score,y
00302B  3  20 E7 34     	jsr bchar 		; display big char.
00302E  3               
00302E  3               ;	inc z80_l 		; next score column.
00302E  3               ;	bne :+
00302E  3               ;	inc z80_h
00302E  3               ;:
00302E  3  E6 rr        	inc tmp
003030  3  C6 63        	dec z80_b
003032  3  F0 03        	beq :+
003034  3  4C 26 30     	jmp bscor0 		; repeat for all digits.
003037  3               :
003037  3  4C 13 30     	jmp dscor2 		; tidy up line and column variables.
00303A  3               
00303A  3               ;-----------------------------------------------------
00303A  3               ; Adds number in the hl pair to the score.
00303A  3               ;-----------------------------------------------------
00303A  3               
00303A  3               addsc:
00303A  3  A9 AD        	lda #<(score+1) 	; ten thousands column.
00303C  3  85 64        	sta z80_e
00303E  3  A9 2F        	lda #>(score+1)
003040  3  85 65        	sta z80_d
003042  3  A9 10        	lda #<10000		; amount to add each time.
003044  3  85 62        	sta z80_c
003046  3  A9 27        	lda #>10000
003048  3  85 63        	sta z80_b
00304A  3  20 8E 30     	jsr incsc		; add to score.
00304D  3               
00304D  3  E6 64        	inc z80_e		; thousands column.
00304F  3  D0 02        	bne :+
003051  3  E6 65        	inc z80_d
003053  3               :
003053  3  A9 E8        	lda #<1000		; amount to add each time.
003055  3  85 62        	sta z80_c
003057  3  A9 03        	lda #>1000
003059  3  85 63        	sta z80_b
00305B  3  20 8E 30     	jsr incsc 		; add to score.
00305E  3               
00305E  3  E6 64        	inc z80_e		; hundreds column.
003060  3  D0 02        	bne :+
003062  3  E6 65        	inc z80_d
003064  3               :
003064  3  A9 64        	lda #<100		; amount to add each time.
003066  3  85 62        	sta z80_c
003068  3  A9 00        	lda #>100
00306A  3  85 63        	sta z80_b
00306C  3  20 8E 30     	jsr incsc		; add to score.
00306F  3               
00306F  3  E6 64        	inc z80_e 		; tens column.
003071  3  D0 02        	bne :+
003073  3  E6 65        	inc z80_d
003075  3               :
003075  3  A9 0A        	lda #<10		; amount to add each time.
003077  3  85 62        	sta z80_c
003079  3  A9 00        	lda #>10
00307B  3  85 63        	sta z80_b
00307D  3  20 8E 30     	jsr incsc 		; add to score.
003080  3               
003080  3  E6 64        	inc z80_e		; units column.
003082  3  D0 02        	bne :+
003084  3  E6 65        	inc z80_d
003086  3               :
003086  3  A9 01        	lda #<1			; units.
003088  3  85 62        	sta z80_c
00308A  3  A9 00        	lda #>1
00308C  3  85 63        	sta z80_b
00308E  3               incsc:
00308E  3  A5 67        	lda z80_h		; store amount to add.
003090  3  48           	pha
003091  3  A5 66        	lda z80_l
003093  3  48           	pha
003094  3               
003094  3  38           	sec			; subtract from amount to add.
003095  3  A5 66        	lda z80_l
003097  3  E5 62        	sbc z80_c
003099  3  85 66        	sta z80_l
00309B  3  A5 67        	lda z80_h
00309D  3  E5 63        	sbc z80_b
00309F  3  85 67        	sta z80_h
0030A1  3  90 14        	bcc incsc0		; too much, restore value.
0030A3  3               
0030A3  3  68           	pla			; delete the previous amount from the stack.
0030A4  3  68           	pla
0030A5  3               
0030A5  3  A5 65        	lda z80_d 		; store column position.
0030A7  3  48           	pha
0030A8  3  A5 64        	lda z80_e
0030AA  3  48           	pha
0030AB  3  20 BE 30     	jsr incsc2		; do the increment.
0030AE  3               
0030AE  3  68           	pla			; restore column.
0030AF  3  85 64        	sta z80_e
0030B1  3  68           	pla
0030B2  3  85 65        	sta z80_d
0030B4  3  4C 8E 30     	jmp incsc		; repeat until all added.
0030B7  3               
0030B7  3               incsc0:
0030B7  3  68           	pla			; restore previous value.
0030B8  3  85 66        	sta z80_l
0030BA  3  68           	pla
0030BB  3  85 67        	sta z80_h
0030BD  3  60           	rts
0030BE  3               incsc2:
0030BE  3  A0 00        	ldy #0
0030C0  3  B1 64        	lda (z80_de),y 		; get amount.
0030C2  3  18           	clc
0030C3  3  69 01        	adc #1			; add one to column.
0030C5  3  91 64        	sta (z80_de),y		; write new column total.
0030C7  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0030C9  3  B0 01        	bcs :+
0030CB  3  60           	rts			; no, carry on.
0030CC  3               :
0030CC  3  A9 30        	lda #'0'		; make it zero.
0030CE  3  91 64        	sta (z80_de),y		; write new column total.
0030D0  3  C6 64        	dec z80_e		; back one column.
0030D2  3  D0 02        	bne :+
0030D4  3  C6 65        	dec z80_d
0030D6  3               :
0030D6  3  4C BE 30     	jmp incsc2
0030D9  3               
0030D9  3               ;------------------------------------
0030D9  3               ; Add bonus to score and reset bonus
0030D9  3               ;------------------------------------
0030D9  3               
0030D9  3               addbo:
0030D9  3  A2 05        	ldx #5			; last digit.
0030DB  3  18           	clc
0030DC  3               addbo0:
0030DC  3  BD AC 2F     	lda score,x		; get score.
0030DF  3  7D B8 2F     	adc bonus,x		; add bonus.
0030E2  3  38           	sec			; 0 to 18.
0030E3  3  E9 30        	sbc #48
0030E5  3  48           	pha
0030E6  3  A9 30        	lda #'0'
0030E8  3  9D B8 2F     	sta bonus,x
0030EB  3  68           	pla
0030EC  3  C9 3A        	cmp #58
0030EE  3  90 03        	bcc addbo1
0030F0  3  38           	sec
0030F1  3  E9 0A        	sbc #10
0030F3  3               addbo1:
0030F3  3  9D AC 2F     	sta score,x		; zeroise bonus.
0030F6  3  CA           	dex			; next digit.
0030F7  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0030F9  3  60           	rts
0030FA  3               
0030FA  3               ;------------------------------------
0030FA  3               ; Swap score and bonus.
0030FA  3               ;------------------------------------
0030FA  3               
0030FA  3               swpsb:
0030FA  3  A2 05        	ldx #5			; digits to add.
0030FC  3               swpsb0:
0030FC  3  BD AC 2F     	lda score,x 		; get score digits.
0030FF  3  48           	pha			; save digit
003100  3  BD B8 2F     	lda bonus,x 		; get bonus digits.
003103  3  9D AC 2F     	sta score,x		; switch score-bonus
003106  3  68           	pla
003107  3  9D B8 2F     	sta bonus,x
00310A  3  CA           	dex 			; repeat for all 6 digits.
00310B  3  10 EF        	bpl swpsb0
00310D  3  60           	rts
00310E  3               
00310E  3               ;----------------------------------------------------
00310E  3               ; Get print address.
00310E  3               ;----------------------------------------------------
00310E  3               
00310E  3               gprad:
00310E  3  A5 rr        	lda dispy
003110  3  85 rr        	sta tmp
003112  3  0A           	asl a
003113  3  18           	clc
003114  3  65 rr        	adc tmp
003116  3  A8           	tay
003117  3  B9 00 DC     	lda SCADTB_lb,y
00311A  3  18           	clc
00311B  3  65 rr        	adc dispx
00311D  3  85 rr        	sta scraddr
00311F  3  B9 00 DD     	lda SCADTB_hb,y
003122  3  69 00        	adc #0
003124  3  85 rr        	sta scraddr+1
003126  3  60           	rts
003127  3               
003127  3               ;--------------------------------------------------------------
003127  3               ; Get property buffer address of char at (dispx, dispy) in hl.
003127  3               ;
003127  3               ; Output:
003127  3               ;  bufaddr = MAP + dispy*40 + dispx
003127  3               ;--------------------------------------------------------------
003127  3               
003127  3               pradd:
003127  3  A5 rr        	lda dispy 		; y coordinate.
003129  3  0A           	asl a
00312A  3  18           	clc
00312B  3  65 rr        	adc dispy
00312D  3  AA           	tax
00312E  3               
00312E  3  18           	clc
00312F  3  BD 00 DC     	lda SCADTB_lb,x
003132  3  65 rr        	adc dispx
003134  3  85 rr        	sta bufaddr
003136  3               
003136  3  BD 00 DD     	lda SCADTB_hb,x
003139  3  69 D4        	adc #(>MAP->ScreenAddr)
00313B  3  85 rr        	sta bufaddr+1
00313D  3  60           	rts
00313E  3               
00313E  3               ;----------------------------------------------------
00313E  3               ; Display character in A at dispx,dispy.
00313E  3               ;
00313E  3               ; Input:
00313E  3               ;  A 	   = character to print
00313E  3               ;----------------------------------------------------
00313E  3               
00313E  3               pchar:
00313E  3  48           	pha
00313F  3  20 0E 31     	jsr gprad		; get screen address.
003142  3               .if gflag
003142  3               	and andeor
003142  3               	eor andeor+1
003142  3               .endif
003142  3               .if iflag
003142  3               	eor #$ff
003142  3               .endif
003142  3  68           	pla
003143  3  A0 00        	ldy #0
003145  3  91 rr        	sta (scraddr),y 	; copy to screen.
003147  3  60           	rts
003148  3               
003148  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00314C  3  60 40 20 00  
003150  3               
003150  3               ;----------------------------------------------
003150  3               
003150  3               ; Print attributes, properties and pixels.
003150  3               ;
003150  3               ; Input:
003150  3               ;  A	= tile number
003150  3               ;----------------------------------------------
003150  3               
003150  3               pbpattr:			; entry PUTBLOCK command
003150  3  A4 rr        	ldy charx
003152  3  84 rr        	sty dispx
003154  3  A4 rr        	ldy chary
003156  3  84 rr        	sty dispy
003158  3               pattr:
003158  3               .if aflag
003158  3               	pha
003158  3               	jsr wbloc		; save blockinfo
003158  3               	pla
003158  3               .endif
003158  3               
003158  3               pattr2:
003158  3  85 63        	sta z80_b		; store cell in b register for now.
00315A  3  AA           	tax
00315B  3  BD 01 3F     	lda bprop,x 		; block properties.
00315E  3  85 62        	sta z80_c
003160  3  C9 08        	cmp #COLECT
003162  3  D0 05        	bne :+
003164  3  A5 63        	lda z80_b
003166  3  8D 77 31     	sta colpatt
003169  3               :
003169  3  20 27 31     	jsr pradd 		; get property buffer address.
00316C  3  A5 62        	lda z80_c
00316E  3  A0 00        	ldy #0
003170  3  91 rr        	sta (bufaddr),y 	; write property.
003172  3  A5 63        	lda z80_b 		; restore cell.
003174  3  4C 78 31     	jmp panp
003177  3               ; Print attributes, no properties.
003177  3               
003177  3  00           colpatt:	.byte 0
003178  3               
003178  3               panp:
003178  3  85 64        	sta z80_e		; displacement in e.
00317A  3  A9 00        	lda #0
00317C  3  85 65        	sta z80_d		; no high byte.
00317E  3  06 64        	asl z80_e  		; multiply char by 8.
003180  3  26 65        	rol z80_d
003182  3  18           	clc
003183  3  A5 64        	lda z80_e
003185  3  69 FB        	adc #<chgfx 		; address of graphics.
003187  3  85 rr        	sta tileaddr
003189  3  A5 65        	lda z80_d
00318B  3  69 3E        	adc #>chgfx
00318D  3  85 rr        	sta tileaddr+1
00318F  3  20 0E 31     	jsr gprad 		; get screen address.
003192  3               panp0:
003192  3  A0 00        	ldy #0
003194  3  B1 rr        	lda (tileaddr),y 	; get image byte.
003196  3               .if iflag
003196  3               	eor #$ff		; Invert
003196  3               .endif
003196  3  91 rr        	sta (scraddr),y 	; copy to screen.
003198  3  E6 rr        	inc dispx 		; move along one.
00319A  3  E6 rr        	inc charx
00319C  3  60           	rts
00319D  3               
00319D  3               ;----------------------------------------------
00319D  3               ; Write block
00319D  3               ;----------------------------------------------
00319D  3               
00319D  3               .if aflag
00319D  3               wbloc:
00319D  3               	ldy #3
00319D  3               	sta (pbptr),y		; store block number
00319D  3               	dey
00319D  3               	lda dispx
00319D  3               	sta (pbptr),y		; write x position of block.
00319D  3               	dey
00319D  3               	lda dispy
00319D  3               	sta (pbptr),y		; write y position of block.
00319D  3               	dey
00319D  3               	lda scno
00319D  3               	sta (pbptr),y		; write screen.
00319D  3               	clc			; point to next free location
00319D  3               	lda pbptr
00319D  3               	adc #4
00319D  3               	sta pbptr
00319D  3               	bcc :+
00319D  3               	inc pbptr+1
00319D  3               :
00319D  3               	rts
00319D  3               .endif
00319D  3               
00319D  3               ;----------------------------------------------
00319D  3               ; Print character pixels, no more.
00319D  3               ;
00319D  3               ; Input:
00319D  3               ;  A	= character to print
00319D  3               ;----------------------------------------------
00319D  3               
00319D  3               pchr:
00319D  3  20 3E 31     	jsr pchar 		; show character in accumulator.
0031A0  3  E6 rr        	inc dispx		; move along one.
0031A2  3  60           	rts
0031A3  3               
0031A3  3               ;----------------------------------------------------
0031A3  3               ; Shifter sprite routine for objects.
0031A3  3               ;----------------------------------------------------
0031A3  3               
0031A3  3               .if oflag
0031A3  3               sprit7:
0031A3  3               	lda z80_b
0031A3  3               	beq sprit0
0031A3  3               	sta z80_a
0031A3  3               sprit3:
0031A3  3               	lsr spr			; shift into position.
0031A3  3               	ror spr+1
0031A3  3               	ror spr+2
0031A3  3               	dec z80_a		; one less iteration.
0031A3  3               	bne sprit3
0031A3  3               sprit0:
0031A3  3               	rts 			; now apply to screen.
0031A3  3               
0031A3  3               ;----------------------------------------------------
0031A3  3               ; Draw sprite
0031A3  3               ;----------------------------------------------------
0031A3  3               
0031A3  3               sprite:
0031A3  3               	stx xtmp		; Save X-reg
0031A3  3               	jsr scadd 		; get screen address in scraddr.
0031A3  3               
0031A3  3               	lda dispx 		; x position.
0031A3  3               	and #7 			; position straddling cells.
0031A3  3               	sta z80_b		; store in b register.
0031A3  3               
0031A3  3               	lda z80_l		; store sprite graphic address.
0031A3  3               	sta sprit1+1
0031A3  3               	sta sprit2+1
0031A3  3               	lda z80_h
0031A3  3               	sta sprit1+2
0031A3  3               	sta sprit2+2
0031A3  3               
0031A3  3               	ldx #0			; pixel height.
0031A3  3               	ldy #0
0031A3  3               sprit1:
0031A3  3               	lda objdta,x		; fetch first byte.
0031A3  3               	sta spr
0031A3  3               	inx
0031A3  3               sprit2:
0031A3  3               	lda objdta,x
0031A3  3               	sta spr+1
0031A3  3               
0031A3  3               	lda #0
0031A3  3               	sta spr+2
0031A3  3               	jsr sprit7		; shift sprite
0031A3  3               
0031A3  3               	dex
0031A3  3               	lda spr			; fetch graphic.
0031A3  3               	ldy spritetab,x
0031A3  3               	eor (scraddr),y		; merge with screen image.
0031A3  3               	sta (scraddr),y		; write to screen.
0031A3  3               	inx			; next screen byte.
0031A3  3               
0031A3  3               	lda spr+1		; fetch graphic.
0031A3  3               	ldy spritetab,x
0031A3  3               	eor (scraddr),y		; merge with screen image.
0031A3  3               	sta (scraddr),y		; write to screen.
0031A3  3               	iny
0031A3  3               
0031A3  3               	lda spr+2		; fetch graphic.
0031A3  3               	eor (scraddr),y		; merge with screen image.
0031A3  3               	sta (scraddr),y		; write to screen.
0031A3  3               
0031A3  3               	inx			; next source byte.
0031A3  3               	cpx #16
0031A3  3               	bne :+
0031A3  3               	inc scraddr+1
0031A3  3               :
0031A3  3               	cpx #32
0031A3  3               	bne sprit1		; repeat
0031A3  3               
0031A3  3               	ldx xtmp		; retreive X-reg
0031A3  3               	rts
0031A3  3               
0031A3  3               spritetab:
0031A3  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0031A3  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0031A3  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
0031A3  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
0031A3  3               
0031A3  3               spr:	.byte 0,0,0
0031A3  3               
0031A3  3               ;xtmp:	.byte 0
0031A3  3               .endif
0031A3  3               
0031A3  3               ;-----------------------------------------------------------
0031A3  3               ; Get room address.
0031A3  3               ;-----------------------------------------------------------
0031A3  3               
0031A3  3               groom:
0031A3  3  A6 rr        	ldx scno 		; screen number.
0031A5  3  A0 00        	ldy #0
0031A7  3               groomx:
0031A7  3  A9 34        	lda #<scdat 		; pointer to screens.
0031A9  3  85 66        	sta z80_l
0031AB  3  A9 44        	lda #>scdat
0031AD  3  85 67        	sta z80_h
0031AF  3               groom1:
0031AF  3  E0 00        	cpx #0			; is it the first one?
0031B1  3  F0 15        	beq groom0 		; no more screens to skip.
0031B3  3               
0031B3  3  18           	clc
0031B4  3  A5 66        	lda z80_l
0031B6  3  79 34 44     	adc scdat,y 		; low byte of screen size.
0031B9  3  85 66        	sta z80_l
0031BB  3  C8           	iny			; point to high byte.
0031BC  3  A5 67        	lda z80_h
0031BE  3  79 34 44     	adc scdat,y 		; high byte of screen size.
0031C1  3  85 67        	sta z80_h
0031C3  3  C8           	iny			; next address.
0031C4  3               
0031C4  3  CA           	dex 			; one less iteration.
0031C5  3  4C AF 31     	jmp groom1 		; loop until we reach the end.
0031C8  3               groom0:
0031C8  3  AD FE 44     	lda numsc 		; add displacement.
0031CB  3  0A           	asl a
0031CC  3  18           	clc			; add double displacement to address.
0031CD  3  65 66        	adc z80_l
0031CF  3  85 66        	sta z80_l
0031D1  3  A5 67        	lda z80_h
0031D3  3  69 00        	adc #0
0031D5  3  85 67        	sta z80_h
0031D7  3  60           	rts
0031D8  3               
0031D8  3               ;-----------------------------------------------------------
0031D8  3               ; Draw present room.
0031D8  3               ;-----------------------------------------------------------
0031D8  3               
0031D8  3               droom:
0031D8  3  AD 1F 28     	lda wintop 		; window top.
0031DB  3  85 rr        	sta dispy		; set cursor y position.
0031DD  3               droom2:
0031DD  3  20 A3 31     	jsr groom 		; get address of current room.
0031E0  3  A9 00        	lda #0	 		; zero in accumulator.
0031E2  3  85 rr        	sta comcnt 		; reset compression counter.
0031E4  3  AD 21 28     	lda winhgt 		; height of window.
0031E7  3  85 rr        	sta rrow		; set row counter
0031E9  3               droom0:
0031E9  3  AD 20 28     	lda winlft 		; window left edge.
0031EC  3  85 rr        	sta dispx 		; set cursor x position.
0031EE  3  AD 22 28     	lda winwid 		; width of window.
0031F1  3  85 rr        	sta rcol		; set column counter
0031F3  3               droom1:
0031F3  3  20 04 32     	jsr flbyt 		; decompress next byte on the fly.
0031F6  3  20 58 31     	jsr pattr2 		; show attributes and block.
0031F9  3  C6 rr        	dec rcol		; one less column.
0031FB  3  D0 F6        	bne droom1 		; repeat for entire line.
0031FD  3  E6 rr        	inc dispy		; move down one line.
0031FF  3  C6 rr        	dec rrow 		; one less row.
003201  3  D0 E6        	bne droom0 		; repeat for all rows.
003203  3  60           	rts
003204  3               
003204  3               ;rcol:	.byte 0
003204  3               ;rrow:	.byte 0
003204  3               
003204  3               ;----------------------------------------------
003204  3               ; Decompress bytes on-the-fly.
003204  3               ;----------------------------------------------
003204  3               
003204  3               flbyt:
003204  3  A5 rr        	lda comcnt 		; compression counter.
003206  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
003208  3               
003208  3  A0 00        	ldy #0
00320A  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
00320C  3  E6 66        	inc z80_l 		; point to next cell.
00320E  3  D0 02        	bne :+
003210  3  E6 67        	inc z80_h
003212  3               :
003212  3  C9 FF        	cmp #255 		; is this byte a control code?
003214  3  F0 01        	beq :+
003216  3  60           	rts 			; no, this byte is uncompressed.
003217  3               :
003217  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
003219  3  85 rr        	sta combyt 		; set up the type.
00321B  3  E6 66        	inc z80_l 		; point to quantity.
00321D  3  D0 02        	bne :+
00321F  3  E6 67        	inc z80_h
003221  3               :
003221  3  B1 66        	lda (z80_hl),y 		; get quantity.
003223  3  E6 66        	inc z80_l 		; point to next byte.
003225  3  D0 02        	bne :+
003227  3  E6 67        	inc z80_h
003229  3               :
003229  3               flbyt1:
003229  3  85 rr        	sta comcnt 		; store new quantity.
00322B  3  C6 rr        	dec comcnt		; one less.
00322D  3  A5 rr        	lda combyt 		; byte to expand.
00322F  3  60           	rts
003230  3               
003230  3               ;combyt:	.byte 0			; byte type compressed.
003230  3               ;comcnt:	.byte 0			; compression counter.
003230  3               
003230  3               ;------------------------------------------
003230  3               ; Ladder down check.
003230  3               ;
003230  3               ; Input:
003230  3               ;  IX = sprite pointer
003230  3               ;------------------------------------------
003230  3               
003230  3               .if lflag
003230  3               laddd:
003230  3               	ldy #9
003230  3               	lda (z80_ix),y		; x coordinate.
003230  3               	sta dispx
003230  3               
003230  3               	ldy #8
003230  3               	lda (z80_ix),y		; y coordinate.
003230  3               	and #254		; make it even.
003230  3               	sta (z80_ix),y 		; reset it.
003230  3               	clc 			; look down 16 pixels.
003230  3               numsp5:
003230  3               	adc #SPR_HGT
003230  3               	sta dispy		; coords in dispx,dispy.
003230  3               	jmp laddv
003230  3               
003230  3               ;------------------------------------------
003230  3               ; Ladder up check.
003230  3               ;
003230  3               ; Input:
003230  3               ;  IX = sprite pointer
003230  3               ;
003230  3               ; Output:
003230  3               ;  A  = 0 is ok, A <>0 is not ok
003230  3               ;------------------------------------------
003230  3               
003230  3               laddu:
003230  3               	ldy #9
003230  3               	lda (z80_ix),y		; x coordinate.
003230  3               	sta dispx
003230  3               
003230  3               	ldy #8
003230  3               	lda (z80_ix),y		; y coordinate.
003230  3               	and #254 		; make it even.
003230  3               	sta (z80_ix),y		; reset it.
003230  3               	clc 			; look 2 pixels above feet.
003230  3               numsp6:
003230  3               	adc #SPR_HGT-2
003230  3               	sta dispy		; coords in dispx,dispy.
003230  3               laddv:
003230  3               	jsr tstbl 		; get map address.
003230  3               	jsr ldchk 		; standard ladder check.
003230  3               	beq :+
003230  3               	rts 			; no way through.
003230  3               :
003230  3               	inc bufaddr 		; look right one cell.
003230  3               	bne :+
003230  3               	inc bufaddr+1
003230  3               :
003230  3               	jsr ldchk 		; do the check.
003230  3               	beq :+
003230  3               	rts 			; impassable.
003230  3               :
003230  3               	lda dispx 		; y coordinate.
003230  3               	and #7 			; position straddling block cells.
003230  3               	bne :+
003230  3               	rts 			; no more checks needed.
003230  3               :
003230  3               	inc bufaddr 		; look to third cell.
003230  3               	bne :+
003230  3               	inc bufaddr+1
003230  3               :
003230  3               	jsr ldchk 		; do the check.
003230  3               	rts  			; return with zero flag set accordingly.
003230  3               .endif
003230  3               
003230  3               ;---------------------------------------------------------
003230  3               ; Can go up check.
003230  3               ;
003230  3               ; Input:
003230  3               ;  IX = sprite pointer
003230  3               ;
003230  3               ; Output:
003230  3               ;  A  = 0 is ok, A <>0 is not ok
003230  3               ;---------------------------------------------------------
003230  3               
003230  3               cangu:
003230  3  A0 09        	ldy #9
003232  3  B1 68        	lda (z80_ix),y		; x coordinate.
003234  3  85 rr        	sta dispx
003236  3  A0 08        	ldy #8
003238  3  B1 68        	lda (z80_ix),y 		; y coordinate.
00323A  3  38           	sec
00323B  3  E9 01        	sbc #1
00323D  3  85 rr        	sta dispy		; coords in dispx,dispy.
00323F  3  20 B4 33     	jsr tstbl 		; get map address.
003242  3  20 13 33     	jsr lrchk 		; standard left/right check.
003245  3  F0 01        	beq :+
003247  3  60           	rts			; no way through.
003248  3               :
003248  3  E6 rr        	inc bufaddr		; look right one cell.
00324A  3  D0 02        	bne :+
00324C  3  E6 rr        	inc bufaddr+1
00324E  3               :
00324E  3  20 13 33     	jsr lrchk 		; do the check.
003251  3  F0 01        	beq :+
003253  3  60           	rts			; impassable.
003254  3               :
003254  3  E6 rr        	inc bufaddr		; look right one cell.
003256  3  D0 02        	bne :+
003258  3  E6 rr        	inc bufaddr+1
00325A  3               :
00325A  3  20 13 33     	jsr lrchk 		; do the check.
00325D  3  F0 01        	beq :+
00325F  3  60           	rts			; impassable.
003260  3               :
003260  3  E6 rr        	inc bufaddr		; look right one cell.
003262  3  D0 02        	bne :+
003264  3  E6 rr        	inc bufaddr+1
003266  3               :
003266  3  20 13 33     	jsr lrchk 		; do the check.
003269  3  F0 01        	beq :+
00326B  3  60           	rts			; impassable.
00326C  3               :
00326C  3  A5 rr        	lda dispx		; x coordinate.
00326E  3  29 01        	and #1			; position straddling block cells.
003270  3  D0 01        	bne :+
003272  3  60           	rts			; no more checks needed.
003273  3               :
003273  3  E6 rr        	inc bufaddr		; look to third cell.
003275  3  D0 02        	bne :+
003277  3  E6 rr        	inc bufaddr+1
003279  3               :
003279  3  20 13 33     	jsr lrchk		; do the check.
00327C  3  60           	rts 			; return with zero flag set accordingly.
00327D  3               
00327D  3               ;---------------------------------------------------------
00327D  3               ; Can go down check.
00327D  3               ;
00327D  3               ; Input:
00327D  3               ;  IX = sprite pointer
00327D  3               ;
00327D  3               ; Output:
00327D  3               ;  A  = 0 is ok, A <>0 is not ok
00327D  3               ;---------------------------------------------------------
00327D  3               
00327D  3               cangd:
00327D  3  A0 09        	ldy #9
00327F  3  B1 68        	lda (z80_ix),y 		; x coordinate.
003281  3  85 rr        	sta dispx
003283  3  A0 08        	ldy #8
003285  3  B1 68        	lda (z80_ix),y		; y coordinate.
003287  3  18           	clc
003288  3               numsp3:
003288  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
00328A  3  85 rr        	sta dispy		; coords in dispx,dispy.
00328C  3  20 B4 33     	jsr tstbl 		; get map address.
00328F  3  20 28 33     	jsr plchk 		; block, platform check.
003292  3  F0 01        	beq :+
003294  3  60           	rts			; no way through.
003295  3               :
003295  3  E6 rr        	inc bufaddr		; look right one cell.
003297  3  D0 02        	bne :+
003299  3  E6 rr        	inc bufaddr+1
00329B  3               :
00329B  3  20 28 33     	jsr plchk		; block, platform check.
00329E  3  F0 01        	beq :+
0032A0  3  60           	rts			; impassable.
0032A1  3               :
0032A1  3  E6 rr        	inc bufaddr		; look right one cell.
0032A3  3  D0 02        	bne :+
0032A5  3  E6 rr        	inc bufaddr+1
0032A7  3               :
0032A7  3  20 28 33     	jsr plchk		; block, platform check.
0032AA  3  F0 01        	beq :+
0032AC  3  60           	rts			; impassable.
0032AD  3               :
0032AD  3  E6 rr        	inc bufaddr		; look right one cell.
0032AF  3  D0 02        	bne :+
0032B1  3  E6 rr        	inc bufaddr+1
0032B3  3               :
0032B3  3  20 28 33     	jsr plchk		; block, platform check.
0032B6  3  F0 01        	beq :+
0032B8  3  60           	rts			; impassable.
0032B9  3               :
0032B9  3  A5 rr        	lda dispx		; x coordinate.
0032BB  3  29 01        	and #1			; position straddling block cells.
0032BD  3  D0 01        	bne :+
0032BF  3  60           	rts			; no more checks needed.
0032C0  3               :
0032C0  3  E6 rr        	inc bufaddr		; look to third cell.
0032C2  3  D0 02        	bne :+
0032C4  3  E6 rr        	inc bufaddr+1
0032C6  3               :
0032C6  3  20 28 33     	jsr plchk		; block, platform check.
0032C9  3  60           	rts			; return with zero flag set accordingly.
0032CA  3               
0032CA  3               ;---------------------------------------------------------
0032CA  3               ; Can go left check.
0032CA  3               ;
0032CA  3               ; Input:
0032CA  3               ;  IX = sprite pointer
0032CA  3               ;
0032CA  3               ; Output:
0032CA  3               ;  A  = 0 is ok, A <>0 is not ok
0032CA  3               ;---------------------------------------------------------
0032CA  3               
0032CA  3               cangl:
0032CA  3  A0 08        	ldy #8
0032CC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
0032CE  3  85 rr        	sta dispy
0032D0  3  A0 09        	ldy #9
0032D2  3  B1 68        	lda (z80_ix),y 		; x coordinate.
0032D4  3  38           	sec
0032D5  3  E9 01        	sbc #1			; look left 2 pixels.
0032D7  3  85 rr        	sta dispx		; coords in dispx,dispy.
0032D9  3  4C EB 32     	jmp cangh		; test if we can go there.
0032DC  3               
0032DC  3               ;---------------------------------------------------------
0032DC  3               ; Can go right check.
0032DC  3               ;
0032DC  3               ; Input:
0032DC  3               ;  IX = sprite pointer
0032DC  3               ;
0032DC  3               ; Output:
0032DC  3               ;  A  = 0 is ok, A <>0 is not ok
0032DC  3               ;---------------------------------------------------------
0032DC  3               
0032DC  3               cangr:
0032DC  3  A0 08        	ldy #8
0032DE  3  B1 68        	lda (z80_ix),y		; y coordinate.
0032E0  3  85 rr        	sta dispy
0032E2  3  A0 09        	ldy #9
0032E4  3  B1 68        	lda (z80_ix),y		; x coordinate.
0032E6  3  18           	clc
0032E7  3  69 08        	adc #SPR_WID		; look right 8 pixels.
0032E9  3  85 rr        	sta dispx		; coords in dispx,dispy.
0032EB  3               cangh:
0032EB  3               cangh2:
0032EB  3  A9 04        	lda #(SPR_HGT/3+1)	; default rows to write.
0032ED  3  85 63        	sta z80_b
0032EF  3  A4 rr        	ldy dispy		; y position.
0032F1  3  B9 4A DF     	lda V_SPR_PTR,y		; does x straddle cells?
0032F4  3  D0 02        	bne cangh0		; yes, loop counter is good.
0032F6  3  C6 63        	dec z80_b		; one less row to write.
0032F8  3               cangh0:
0032F8  3  20 B4 33     	jsr tstbl		; get map address.
0032FB  3               cangh1:
0032FB  3  20 13 33     	jsr lrchk		; standard left/right check.
0032FE  3  F0 01        	beq :+
003300  3  60           	rts			; no way through.
003301  3               :
003301  3  48           	pha
003302  3  18           	clc
003303  3  A5 rr        	lda bufaddr
003305  3  69 28        	adc #ScrWidth		; look down.
003307  3  85 rr        	sta bufaddr
003309  3  90 02        	bcc :+
00330B  3  E6 rr        	inc bufaddr+1
00330D  3               :
00330D  3  68           	pla
00330E  3               
00330E  3  C6 63        	dec z80_b
003310  3  D0 E9        	bne cangh1
003312  3  60           	rts
003313  3               
003313  3               ;-------------------------------------
003313  3               ; Check left/right movement is okay.
003313  3               ;
003313  3               ; Input:
003313  3               ;  bufaddr = MAP + x/8 + y/8*32
003313  3               ;
003313  3               ; Output:
003313  3               ;  A  = 0 is ok, A <>0 is not ok
003313  3               ;-------------------------------------
003313  3               
003313  3               lrchk:
003313  3  A0 00        	ldy #0
003315  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
003317  3  C9 02        	cmp #WALL 		; is it passable?
003319  3  F0 0A        	beq lrchkx		; no.
00331B  3               
00331B  3  C9 04        	cmp #FODDER		; fodder has to be dug.
00331D  3  F0 06        	beq lrchkx		; not passable.
00331F  3  A9 00        	lda #0
003321  3  60           	rts
003322  3               
003322  3               ;--------------------------------------------------------------
003322  3               ; Called by mmenu
003322  3               ;--------------------------------------------------------------
003322  3               
003322  3               always:
003322  3  A9 FF        	lda #255		; report it as okay.
003324  3  60           	rts
003325  3               
003325  3               lrchkx:
003325  3  A9 01        	lda #1 			; reset all bits.
003327  3  60           	rts
003328  3               
003328  3               
003328  3               ;--------------------------------------------------------------
003328  3               ; Check platform or solid item is not in way.
003328  3               ;
003328  3               ; Input:
003328  3               ;  bufaddr = MAP + x/2 + y/3*40
003328  3               ;
003328  3               ; Output:
003328  3               ;  A  = 0 is ok, A <>0 is not ok
003328  3               ;--------------------------------------------------------------
003328  3               
003328  3               plchk:
003328  3  A0 00        	ldy #0
00332A  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
00332C  3  C9 02        	cmp #WALL 		; is it passable?
00332E  3  F0 F5        	beq lrchkx		; no.
003330  3               .if pflag .or dflag
003330  3  C9 04        	cmp #FODDER		; fodder has to be dug.
003332  3  F0 F1        	beq lrchkx		; not passable.
003334  3               .endif
003334  3  C9 01        	cmp #PLATFM		; platform is solid.
003336  3  F0 03        	beq plchkx		; not passable.
003338  3               .if lflag
003338  3               	cmp #LADDER		; is it a ladder?
003338  3               	beq lrchkx		; on ladder, deny movement.
003338  3               .endif
003338  3               plchk0:
003338  3  A9 00        	lda #0			; report as ok
00333A  3  60           	rts
00333B  3               plchkx:
00333B  3  A4 rr        	ldy dispy		; y coordinate.
00333D  3  B9 4A DF     	lda V_SPR_PTR,y		; position straddling blocks.
003340  3  F0 E3        	beq lrchkx		; on platform, deny movement.
003342  3  4C 38 33     	jmp plchk0
003345  3               
003345  3               ;--------------------------------------------------------------
003345  3               ; Check ladder is available.
003345  3               ;
003345  3               ; Input:
003345  3               ;  bufaddr = MAP + x/8 + y/8*32
003345  3               ;
003345  3               ; Output:
003345  3               ;  A  = 0 is ok, A <>0 is not ok
003345  3               ;--------------------------------------------------------------
003345  3               
003345  3               .if lflag
003345  3               ldchk:
003345  3               	ldy #0
003345  3               	lda (bufaddr),y 	; fetch cell.
003345  3               	cmp #LADDER 		; is it a ladder?
003345  3               	beq :+
003345  3               	lda #1
003345  3               	rts  			; return with zero flag set accordingly.
003345  3               :
003345  3               	lda #0
003345  3               	rts
003345  3               .endif
003345  3               
003345  3               ;--------------------------------------------------------------
003345  3               ; Get collectables.
003345  3               ;--------------------------------------------------------------
003345  3               
003345  3               .if cflag
003345  3               getcol:
003345  3                       lda #COLECT             ; collectable blocks.
003345  3                       sta z80_b
003345  3                       jsr tded                ; test for collectable blocks.
003345  3                       cmp z80_b               ; did we find one?
003345  3                       beq :+
003345  3                       rts                     ; none were found, job done.
003345  3               :
003345  3                       jsr gtblk               ; get block.
003345  3                       jsr evnt20              ; collected block event.
003345  3                       jmp getcol              ; repeat until none left.
003345  3               
003345  3               ; Get collectable block.
003345  3               
003345  3               gtblk:
003345  3               	ldy #0
003345  3               	lda (bufaddr),y
003345  3               	sta colpatt		; save collectable block nr
003345  3               
003345  3                       lda #0
003345  3                       sta (bufaddr),y		; make it empty now in MAP.
003345  3               
003345  3               	lda bufaddr		; calculate screenaddr
003345  3               	sta scraddr
003345  3               	sec
003345  3               	lda bufaddr+1
003345  3               	sbc #>(MAP-ScreenAddr)	;$d4
003345  3               	sta scraddr+1
003345  3               
003345  3               	ldy #0			; erase block on screen
003345  3               	lda (scraddr),y
003345  3               	eor colpatt
003345  3               	sta (scraddr),y
003345  3               
003345  3               	rts
003345  3               .endif
003345  3               
003345  3               ;--------------------------------------------------------------
003345  3               ; Touched deadly block check.
003345  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
003345  3               ;
003345  3               ; Input:
003345  3               ;  IX = sprite address
003345  3               ;
003345  3               ; Output:
003345  3               ;  A  = 0 is ok, A=5 is not ok
003345  3               ;--------------------------------------------------------------
003345  3               
003345  3               ; Calculate map address from dispx,dispy
003345  3               
003345  3               tded:
003345  3  A0 08        	ldy #8
003347  3  B1 68        	lda (z80_ix),y 		; y coordinate.
003349  3  85 rr        	sta dispy
00334B  3  C8           	iny
00334C  3  B1 68        	lda (z80_ix),y 		; x coordinate.
00334E  3  85 rr        	sta dispx		; coords in dispx,dispy.
003350  3  20 B4 33     	jsr tstbl		; get map address in bufaddr.
003353  3               
003353  3               ; Set variables
003353  3               
003353  3  A9 00        	lda #0
003355  3  85 62        	sta z80_c		; reset x-stradding skip flag
003357  3               
003357  3  A9 04        	lda #4			; Set nr of sprite columns
003359  3  85 rr        	sta rcol
00335B  3  A5 rr        	lda dispx
00335D  3  29 01        	and #1
00335F  3  D0 04        	bne :+
003361  3  C6 rr        	dec rcol
003363  3  E6 62        	inc z80_c		; set x-stradding skip flag
003365  3               :
003365  3  A5 rr        	lda rcol
003367  3  85 64        	sta z80_e
003369  3               
003369  3  A9 03        	lda #3			; Set nr of sprite rows
00336B  3  85 rr        	sta rrow
00336D  3  A4 rr        	ldy dispy
00336F  3  B9 4A DF     	lda V_SPR_PTR,y
003372  3  D0 02        	bne :+
003374  3  C6 rr        	dec rrow
003376  3               :
003376  3  A2 00        	ldx #0
003378  3               vspr_loop:
003378  3  A5 64        	lda z80_e
00337A  3  85 rr        	sta rcol
00337C  3               hspr_loop:
00337C  3  BC A0 33     	ldy spr_ptr,x
00337F  3  B1 rr        	lda (bufaddr),y
003381  3  C5 63        	cmp z80_b
003383  3  F0 0E        	beq end_sprloop
003385  3  E8           	inx
003386  3  C6 rr        	dec rcol
003388  3  10 F2        	bpl hspr_loop
00338A  3               ;	inx
00338A  3  A4 62        	ldy z80_c		; Test x-stradding skip flag
00338C  3  F0 01        	beq :+			; If reset, no skipping
00338E  3  E8           	inx			; If set, skip 1 byte
00338F  3               :
00338F  3  C6 rr        	dec rrow
003391  3  10 E5        	bpl vspr_loop
003393  3               end_sprloop:
003393  3  48           	pha
003394  3  18           	clc
003395  3  98           	tya
003396  3  65 rr        	adc bufaddr
003398  3  85 rr        	sta bufaddr
00339A  3  90 02        	bcc :+
00339C  3  E6 rr        	inc bufaddr+1
00339E  3               :
00339E  3  68           	pla
00339F  3  60           	rts
0033A0  3               
0033A0  3               spr_ptr:
0033A0  3  00 01 02 03  	.byte   0,  1,  2,  3,  4
0033A4  3  04           
0033A5  3  28 29 2A 2B  	.byte  40, 41, 42, 43, 44
0033A9  3  2C           
0033AA  3  50 51 52 53  	.byte  80, 81, 82, 83, 84
0033AE  3  54           
0033AF  3  78 79 7A 7B  	.byte 120,121,122,123,124
0033B3  3  7C           
0033B4  3               
0033B4  3               ;---------------------------------------------------
0033B4  3               ; Fetch block type at (dispx, dispy).
0033B4  3               ;
0033B4  3               ; Output:
0033B4  3               ;  A = block type
0033B4  3               ;---------------------------------------------------
0033B4  3               
0033B4  3               tstbl:
0033B4  3  A5 rr        	lda dispy 		; fetch y coord.
0033B6  3  AA           	tax
0033B7  3               
0033B7  3  A5 rr        	lda dispx		; x/8
0033B9  3  4A           	lsr a
0033BA  3  85 rr        	sta charx
0033BC  3               
0033BC  3  18           	clc
0033BD  3  BD 00 DC     	lda SCADTB_lb,x
0033C0  3  65 rr        	adc charx
0033C2  3  85 rr        	sta bufaddr
0033C4  3               
0033C4  3  BD 00 DD     	lda SCADTB_hb,x
0033C7  3  69 D4        	adc #(>MAP->ScreenAddr)
0033C9  3  85 rr        	sta bufaddr+1
0033CB  3               
0033CB  3  A0 00        	ldy #0
0033CD  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0033CF  3  60           	rts
0033D0  3               
0033D0  3               ;-------------------------------------------------------------------
0033D0  3               ; Jump - if we can.
0033D0  3               ; Requires initial speed to be set up in accumulator prior to call.
0033D0  3               ;
0033D0  3               ; Input:
0033D0  3               ;  IX = sprite address
0033D0  3               ;-------------------------------------------------------------------
0033D0  3               
0033D0  3               jump:
0033D0  3  A0 0D        	ldy #13
0033D2  3  B1 68        	lda (z80_ix),y		; jump table low.
0033D4  3  A0 0E        	ldy #14
0033D6  3  11 68        	ora (z80_ix),y		; jump table high.
0033D8  3  F0 01        	beq :+
0033DA  3  60           	rts			; already in the air.
0033DB  3               :
0033DB  3  A9 48        	lda #>jtab
0033DD  3  A0 0E        	ldy #14
0033DF  3  91 68        	sta (z80_ix),y		; set jump high.
0033E1  3  A9 2E        	lda #<jtab		; jump table start.
0033E3  3  A0 0D        	ldy #13
0033E5  3  91 68        	sta (z80_ix),y		; set jump low.
0033E7  3  60           	rts
0033E8  3               
0033E8  3               ; Jump table.
0033E8  3               
0033E8  3               ;jtab:
0033E8  3               ;	.byte 248,250,252
0033E8  3               ;	.byte 254,254,255
0033E8  3               ;	.byte 255,255,0,0
0033E8  3               ;	.byte 0,1,1,1,2,2
0033E8  3               ;	.byte 4,6,8,8,8,99
0033E8  3               
0033E8  3               ;------------------------------------------------
0033E8  3               ; Random numbers code.
0033E8  3               ; Pseudo-random number generator, 8-bit.
0033E8  3               ;
0033E8  3               ; Output:
0033E8  3               ;  RND = random number
0033E8  3               ;------------------------------------------------
0033E8  3               
0033E8  3               random:
0033E8  3  A5 rr        	lda seed
0033EA  3  F0 05        	beq doEor
0033EC  3  0A           	asl a
0033ED  3  F0 04        	beq noEor
0033EF  3  90 02        	bcc noEor
0033F1  3  49 1D        doEor:	eor #$1d
0033F3  3  85 rr        noEor:	sta seed
0033F5  3  60           	rts
0033F6  3               
0033F6  3  A5 rr        	lda seed		; get last random number.
0033F8  3  0A           	asl a
0033F9  3  0A           	asl a
0033FA  3  18           	clc
0033FB  3  65 rr        	adc seed
0033FD  3  18           	clc
0033FE  3  69 45        	adc #$45
003400  3  85 rr        	sta seed		; store new seed.
003402  3  85 rr        	sta varrnd		; return number in variable.
003404  3  60           	rts
003405  3               
003405  3               ;--------------------------------------------------------
003405  3               ; Keys
003405  3               ;
003405  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003405  3               ;             ||||||||
003405  3               ;             |||||||+> Right    KEY 0  - X
003405  3               ;             ||||||+-> Left     KEY 1  - Z
003405  3               ;             |||||+--> Down     KEY 2  - .
003405  3               ;             ||||+---> Up       KEY 3  - ;
003405  3               ;             |||+----> Fire1    KEY 4  - SPC
003405  3               ;             ||+-----> Fire2    KEY 5  - Q
003405  3               ;             |+------> Fire3    KEY 6  - P
003405  3               ;             +-------> Not used
003405  3               ;
003405  3               ;                       Option1  KEY 7  - 1
003405  3               ;                       Option2  KEY 8  - 2
003405  3               ;                       Option3  KEY 9  - 3
003405  3               ;                       Option4  KEY 10 - 4
003405  3               ;--------------------------------------------------------
003405  3               
003405  3               ;              X   Z   .   ;  SPC  Q   P
003405  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
003405  3               ;        .byte $21,$11,$01,$92                   ; menu options.
003405  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
003409  3  00 04 14     
00340C  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
003410  3               
003410  3               ;-------------------------------------------------------
003410  3               ; Joystick and keyboard reading routines.
003410  3               ;
003410  3               ; contrl = 0, Keyboard
003410  3               ;          1, JoyKeyb
003410  3               ;          2, JoyMMC
003410  3               ;-------------------------------------------------------
003410  3               
003410  3               joykey:
003410  3  A5 rr        	lda contrl 		; control flag.
003412  3  C9 01        	cmp #1
003414  3  D0 03        	bne :+
003416  3  4C 47 49     	jmp joy1 		; read keyboard joystick
003419  3               :
003419  3  C9 02        	cmp #2
00341B  3  D0 03        	bne :+
00341D  3  4C 79 49     	jmp joy2 		; read MMC joystick.
003420  3               :
003420  3               ; Keyboard controls.
003420  3               
003420  3  A9 00        	lda #0		 	; zero reading.
003422  3  85 64        	sta z80_e
003424  3               
003424  3  A0 06        	ldy #6	 		; address of last key.
003426  3               joyke0:
003426  3  B9 2F 48     	lda keys,y 		; get key from table.
003429  3  20 7A 49     	jsr ktest		; being pressed?
00342C  3  26 64        	rol z80_e 		; rotate into reading.
00342E  3               
00342E  3  88           	dey		 	; next key.
00342F  3  10 F5        	bpl joyke0 		; repeat for all keys.
003431  3  A5 64        	lda z80_e 		; copy e register to accumulator.
003433  3  85 rr        	sta joyval		; remember value.
003435  3  60           	rts
003436  3               
003436  3               ;---------------------------------------------------------------
003436  3               ; Getkey in column,row format
003436  3               ;
003436  3               ; Output:
003436  3               ;  A = high nibble=row and low nibble=column key in matrix
003436  3               ;---------------------------------------------------------------
003436  3               
003436  3               ;kget:
003436  3               ;	lda #ScrMode		; high-mono mode.
003436  3               ;	sta ScrSelAddr		; screen select port
003436  3               ;	stx xtmp
003436  3               ;kget4:
003436  3               ;	jsr READKEY		; read key until pressed
003436  3               ;	cpy #255
003436  3               ;	beq kget4
003436  3               ;	sta rcol		; save column
003436  3               ;	stx rrow		; determine row
003436  3               ;kget3:
003436  3               ;	jsr READKEY		; wait until key released
003436  3               ;	cpy #255
003436  3               ;	bne kget3
003436  3               ;
003436  3               ;	sec			; calculate matrix row
003436  3               ;	lda #10
003436  3               ;	sbc rrow
003436  3               ;	asl a
003436  3               ;	asl a
003436  3               ;	asl a
003436  3               ;	asl a
003436  3               ;	sta rrow
003436  3               ;
003436  3               ;	ldy #255		; find column mask
003436  3               ;kget1:
003436  3               ;	iny
003436  3               ;	lda keymask,y
003436  3               ;	cmp rcol
003436  3               ;	beq kget2
003436  3               ;	jmp kget1
003436  3               ;kget2:
003436  3               ;	tya			; determine column
003436  3               ;	clc
003436  3               ;	adc rrow
003436  3               ;	ldx xtmp
003436  3               ;	rts
003436  3               
003436  3               ;---------------------------------------------------------------
003436  3               ; Display message.
003436  3               ;
003436  3               ; Input:
003436  3               ;  A = message number
003436  3               ;---------------------------------------------------------------
003436  3               
003436  3               dmsg:
003436  3  AA           	tax
003437  3  A9 DA        	lda #<msgdat		; pointer to messages.
003439  3  85 66        	sta z80_l
00343B  3  A9 3E        	lda #>msgdat
00343D  3  85 67        	sta z80_h
00343F  3  20 49 35     	jsr getwrd		; get message number.
003442  3               dmsg3:
003442  3  20 40 35     	jsr preprt		; pre-printing stuff.
003445  3  20 C0 2F     	jsr checkx		; make sure we"re in a printable range.
003448  3  A5 rr        	lda prtmod		; print mode.
00344A  3  D0 50        	bne bmsg1		; no, double-height text.
00344C  3               
00344C  3  AD E7 3C     	lda fcolour		; Set textcolour
00344F  3  20 3E 31     	jsr pchar
003452  3  20 16 35     	jsr nexpos
003455  3               dmsg0:
003455  3  A5 67        	lda z80_h		; store string pointer.
003457  3  48           	pha
003458  3  A5 66        	lda z80_l
00345A  3  48           	pha
00345B  3               
00345B  3  A0 00        	ldy #0
00345D  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
00345F  3  29 7F        	and #127		; remove any end marker.
003461  3  C9 0D        	cmp #13
003463  3  F0 24        	beq dmsg1
003465  3  20 3E 31     	jsr pchar		; display character.
003468  3  20 16 35     	jsr nexpos 		; display position.
00346B  3  D0 03        	bne dmsg2		; not on a new line.
00346D  3  20 32 35     	jsr nexlin		; next line down.
003470  3               dmsg2:
003470  3  68           	pla			; retrieve string pointer
003471  3  85 66        	sta z80_l
003473  3  68           	pla
003474  3  85 67        	sta z80_h
003476  3               
003476  3  A0 00        	ldy #0
003478  3  B1 66        	lda (z80_hl),y		; fetch last character.
00347A  3  0A           	asl a  			; was it the end?
00347B  3  90 03        	bcc :+
00347D  3  4C 13 30     	jmp dscor2		; yes, job done.
003480  3               :
003480  3  E6 66        	inc z80_l		; next character to display.
003482  3  D0 02        	bne :+
003484  3  E6 67        	inc z80_h
003486  3               :
003486  3  4C 55 34     	jmp dmsg0
003489  3               dmsg1:
003489  3  E6 rr        	inc dispy
00348B  3  A5 rr        	lda dispy
00348D  3  C9 19        	cmp #ScrHeight
00348F  3  90 04        	bcc dmsg4
003491  3  A9 00        	lda #0
003493  3  85 rr        	sta dispy
003495  3               dmsg4:
003495  3  A9 00        	lda #0
003497  3  85 rr        	sta dispx
003499  3  4C 70 34     	jmp dmsg2
00349C  3               
00349C  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
00349C  3               
00349C  3               ;----------------------------------------------------------
00349C  3               ; Display message in big text.
00349C  3               ;
00349C  3               ; Input:
00349C  3               ;  HL = string pointer
00349C  3               ;----------------------------------------------------------
00349C  3               
00349C  3               bmsg1:
00349C  3  AD E7 3C     	lda fcolour		; Set textcolour
00349F  3  20 E7 34     	jsr bchar
0034A2  3  A9 0D        	lda #13			; Set double height
0034A4  3  20 E7 34     	jsr bchar
0034A7  3               bmsg4:
0034A7  3  A0 00        	ldy #0
0034A9  3  B1 66        	lda (z80_hl),y 		; get character to display.
0034AB  3  29 7F        	and #127		; only want 7 bits.
0034AD  3  C9 0D        	cmp #13
0034AF  3  F0 21        	beq bmsg2
0034B1  3  20 E7 34     	jsr bchar 		; display big char.
0034B4  3               bmsg3:
0034B4  3  A0 00        	ldy #0
0034B6  3  B1 66        	lda (z80_hl),y 		; look at last character.
0034B8  3  48           	pha
0034B9  3  E6 66        	inc z80_l 		; next character in list.
0034BB  3  D0 02        	bne :+
0034BD  3  E6 67        	inc z80_h
0034BF  3               :
0034BF  3  68           	pla
0034C0  3  0A           	asl a  			; was terminator flag set?
0034C1  3  90 E4        	bcc bmsg4		; no, keep going.
0034C3  3  20 13 30     	jsr dscor2
0034C6  3  C6 rr        	dec dispx
0034C8  3  E6 rr        	inc dispy
0034CA  3  20 13 30     	jsr dscor2
0034CD  3  C6 rr        	dec dispy
0034CF  3  C6 rr        	dec chary
0034D1  3  60           	rts
0034D2  3               bmsg2:
0034D2  3  A9 00        	lda #0
0034D4  3  85 rr        	sta dispx
0034D6  3  E6 rr        	inc dispy
0034D8  3  E6 rr        	inc dispy
0034DA  3  A5 rr        	lda dispy
0034DC  3  C9 18        	cmp #ScrHeight-1
0034DE  3  90 D4        	bcc bmsg3
0034E0  3  A9 00        	lda #0
0034E2  3  85 rr        	sta dispy
0034E4  3  4C B4 34     	jmp bmsg3
0034E7  3               
0034E7  3               ;----------------------------------------------------------
0034E7  3               ; Big character display.
0034E7  3               ;
0034E7  3               ; Input:
0034E7  3               ;  A = character
0034E7  3               ;----------------------------------------------------------
0034E7  3               
0034E7  3               bchar:
0034E7  3  20 3E 31     	jsr pchar 		; display big char.
0034EA  3  E6 rr        	inc dispy
0034EC  3  20 3E 31     	jsr pchar
0034EF  3  C6 rr        	dec dispy
0034F1  3  20 16 35     	jsr nexpos		; display position.
0034F4  3  60           	rts
0034F5  3               
0034F5  3               bchar3:
0034F5  3  E6 rr        	inc dispy
0034F7  3  20 32 35     	jsr nexlin 		; next line check.
0034FA  3               bchar2:
0034FA  3  4C 13 30     	jmp dscor2		; tidy up line and column variables.
0034FD  3               
0034FD  3               
0034FD  3               ;-------------------------------------------------
0034FD  3               ; Display a character.
0034FD  3               ;
0034FD  3               ; Input:
0034FD  3               ;  A = character
0034FD  3               ;-------------------------------------------------
0034FD  3               
0034FD  3               achar:
0034FD  3  85 63        	sta z80_b 		; copy to b.
0034FF  3  20 40 35     	jsr preprt 		; get ready to print.
003502  3  A5 63        	lda z80_b		; character in accumulator.
003504  3  A6 rr        	ldx prtmod 		; print mode.
003506  3  F0 03        	beq :+
003508  3  4C E7 34     	jmp bchar 		; no, double-height text.
00350B  3               :
00350B  3  20 3E 31     	jsr pchar 		; display character.
00350E  3  20 16 35     	jsr nexpos 		; display position.
003511  3  F0 E2        	beq bchar3		; next line down.
003513  3  4C FA 34     	jmp bchar2 		; tidy up.
003516  3               
003516  3               
003516  3               ;-------------------------------------------------
003516  3               ; Get next print column position.
003516  3               ;-------------------------------------------------
003516  3               
003516  3               nexpos:
003516  3  E6 rr        	inc dispx		; move along one position.
003518  3  A5 rr        	lda prtmod
00351A  3  F0 13        	beq skip
00351C  3  A5 rr        	lda dispx 		; get coordinate.
00351E  3  C9 28        	cmp #40
003520  3  D0 0D        	bne skip
003522  3  E6 rr        	inc dispy
003524  3  E6 rr        	inc dispy
003526  3  A9 01        	lda #1
003528  3  85 rr        	sta dispx
00352A  3  A9 0D        	lda #$d
00352C  3  20 E7 34     	jsr bchar
00352F  3               skip:
00352F  3  A5 rr        	lda dispx
003531  3  60           	rts 			; return with status in zero flag.
003532  3               
003532  3               ;-------------------------------------------------
003532  3               ; Get next print line position.
003532  3               ;-------------------------------------------------
003532  3               
003532  3               nexlin:
003532  3  E6 rr        	inc dispy 		; newline.
003534  3  A5 rr        	lda dispy		; vertical position.
003536  3  C9 19        	cmp #ScrHeight			; past screen edge?
003538  3  B0 01        	bcs :+
00353A  3  60           	rts			; no, still okay.
00353B  3               :
00353B  3  A9 00        	lda #0			; restart at top.
00353D  3  85 rr        	sta dispy
00353F  3  60           	rts
003540  3               
003540  3               ;--------------------------------------------------------
003540  3               ; Pre-print preliminaries.
003540  3               ;--------------------------------------------------------
003540  3               
003540  3               preprt:
003540  3               ;	lda #<(FONT-256)		; font pointer.
003540  3               ;	sta grbase		; set up graphics base.
003540  3               ;	lda #>(FONT-256)
003540  3               ;	sta grbase+1
003540  3               prescr:
003540  3  A5 rr        	lda charx 		; display coordinates.
003542  3  85 rr        	sta dispx		; set up general coordinates.
003544  3  A5 rr        	lda chary
003546  3  85 rr        	sta dispy
003548  3  60           	rts
003549  3               
003549  3               ;--------------------------------------------------------------
003549  3               ; Get messagenr x in hl
003549  3               ;
003549  3               ; Input:
003549  3               ;  HL = pointer to message list
003549  3               ;  X  = message number.
003549  3               ;--------------------------------------------------------------
003549  3               
003549  3               getwrd:
003549  3  E0 00        	cpx #0
00354B  3  D0 01        	bne:+ 			; first word in list?
00354D  3  60           	rts 			; yep, don't search.
00354E  3               :
00354E  3  A0 00        	ldy #0
003550  3               getwd0:
003550  3  B1 66        	lda (z80_hl),y
003552  3  48           	pha
003553  3  E6 66        	inc z80_l
003555  3  D0 02        	bne :+
003557  3  E6 67        	inc z80_h
003559  3               :
003559  3  68           	pla
00355A  3  C9 80        	cmp #128		; found end?
00355C  3  30 F2        	bmi getwd0		; no, carry on.
00355E  3  CA           	dex			; until we have right number.
00355F  3  D0 EF        	bne getwd0
003561  3  60           	rts
003562  3               
003562  3               ;-----------------------------------------------------------
003562  3               ; Bubble sort.
003562  3               ;-----------------------------------------------------------
003562  3               
003562  3               bsort:
003562  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
003564  3  85 rr        	sta qscnt
003566  3               
003566  3  A9 F9        	lda #<sprtab 		; sprite table.
003568  3  85 68        	sta z80_x
00356A  3  A9 3B        	lda #>sprtab
00356C  3  85 69        	sta z80_i
00356E  3               bsort0:
00356E  3  A0 00        	ldy #0
003570  3  B1 68        	lda (z80_ix),y 		; first sprite type.
003572  3  C9 FF        	cmp #255 		; is it switched off?
003574  3  F0 30        	beq swemp		; yes, may need to switch another in here.
003576  3               
003576  3  A0 11        	ldy #TABSIZ
003578  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00357A  3  C9 FF        	cmp #255 		; is it enabled?
00357C  3  F0 0A        	beq bsort2 		; no, nothing to swap.
00357E  3               
00357E  3  A0 14        	ldy #TABSIZ+3
003580  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
003582  3  A0 03        	ldy #3
003584  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
003586  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
003588  3               bsort2:
003588  3  18           	clc
003589  3  A5 68        	lda z80_x
00358B  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00358D  3  85 68        	sta z80_x
00358F  3  90 02        	bcc :+
003591  3  E6 69        	inc z80_i
003593  3               :
003593  3  C6 rr        	dec qscnt
003595  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
003597  3  60           	rts
003598  3               
003598  3               ;qscnt:	.byte 0
003598  3               
003598  3               bsort1:
003598  3  A0 11        	ldy #TABSIZ
00359A  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
00359C  3  C9 FF        	cmp #255		; is it enabled?
00359E  3  F0 E8        	beq bsort2		; no, nothing to swap.
0035A0  3  20 B4 35     	jsr swspr		; swap positions.
0035A3  3  4C 88 35     	jmp bsort2
0035A6  3               swemp:
0035A6  3  A0 11        	ldy #TABSIZ
0035A8  3  B1 68        	lda (z80_ix),y		; next table entry.
0035AA  3  C9 FF        	cmp #255		; is that one on?
0035AC  3  F0 DA        	beq bsort2		; no, nothing to swap.
0035AE  3  20 B4 35     	jsr swspr		; swap positions.
0035B1  3  4C 88 35     	jmp bsort2
0035B4  3               
0035B4  3               ; Swap sprites.
0035B4  3               
0035B4  3               swspr:
0035B4  3  A5 68        	lda z80_x		; table address
0035B6  3  85 64        	sta z80_e		; copy to de pair.
0035B8  3  85 66        	sta z80_l		; copy to hl pair.
0035BA  3  A5 69        	lda z80_i
0035BC  3  85 67        	sta z80_h
0035BE  3  85 65        	sta z80_d
0035C0  3               
0035C0  3  18           	clc
0035C1  3  A5 66        	lda z80_l
0035C3  3  69 11        	adc #TABSIZ		; distance to second entry.
0035C5  3  85 66        	sta z80_l
0035C7  3  90 02        	bcc :+
0035C9  3  E6 67        	inc z80_h
0035CB  3               :
0035CB  3  A9 11        	lda #TABSIZ		; bytes to swap.
0035CD  3  85 63        	sta z80_b
0035CF  3  A0 00        	ldy #0
0035D1  3               swspr0:
0035D1  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0035D3  3  48           	pha
0035D4  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0035D6  3  91 66        	sta (z80_hl),y 		; copy to second.
0035D8  3  68           	pla
0035D9  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0035DB  3               
0035DB  3  E6 64        	inc z80_e 		; next byte.
0035DD  3  D0 02        	bne :+
0035DF  3  E6 65        	inc z80_d
0035E1  3               :
0035E1  3  E6 66        	inc z80_l 		; next byte.
0035E3  3  D0 02        	bne :+
0035E5  3  E6 67        	inc z80_h
0035E7  3               :
0035E7  3  C6 63        	dec z80_b
0035E9  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0035EB  3  60           	rts
0035EC  3               
0035EC  3               ;----------------------------------------------------
0035EC  3               ; Process sprites.
0035EC  3               ;----------------------------------------------------
0035EC  3               
0035EC  3               pspr:
0035EC  3  A9 0C        	lda #NUMSPR		; sprites to process.
0035EE  3  85 rr        	sta sprptr
0035F0  3               
0035F0  3  A9 F9        	lda #<sprtab 		; sprite table.
0035F2  3  85 68        	sta z80_x
0035F4  3  A9 3B        	lda #>sprtab
0035F6  3  85 69        	sta z80_i
0035F8  3               pspr1:
0035F8  3  A0 00        	ldy #0
0035FA  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
0035FC  3  C9 09        	cmp #9 			; within range of sprite types?
0035FE  3  B0 03        	bcs :+
003600  3  20 13 36     	jsr pspr2 		; yes, process this one.
003603  3               :
003603  3  18           	clc
003604  3  A5 68        	lda z80_x
003606  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003608  3  85 68        	sta z80_x
00360A  3  90 02        	bcc :+
00360C  3  E6 69        	inc z80_i		; next sprite.
00360E  3               :
00360E  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
003610  3  D0 E6        	bne pspr1
003612  3  60           	rts
003613  3               
003613  3               ;sprptr:	.byte 0
003613  3               
003613  3               pspr2:
003613  3  A5 68        	lda z80_x 		; store original sprite pointer.
003615  3  85 rr        	sta ogptr
003617  3  A5 69        	lda z80_i
003619  3  85 rr        	sta ogptr+1
00361B  3  20 27 36     	jsr pspr3		; do the routine.
00361E  3               rtorg:
00361E  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
003620  3  85 68        	sta z80_x
003622  3  A5 rr        	lda ogptr+1
003624  3  85 69        	sta z80_i
003626  3               rtorg0:
003626  3  60           	rts
003627  3               
003627  3               pspr3:
003627  3  A9 5C        	lda #<evtyp0		; sprite type events list.
003629  3  85 66        	sta z80_l
00362B  3  A9 36        	lda #>evtyp0
00362D  3  85 67        	sta z80_h
00362F  3               pspr4:
00362F  3  B1 68        	lda (z80_ix),y
003631  3  0A           	asl a			; double accumulator.
003632  3  18           	clc
003633  3  65 66        	adc z80_l
003635  3  85 66        	sta z80_l
003637  3  90 02        	bcc :+
003639  3  E6 67        	inc z80_h
00363B  3               :
00363B  3  B1 66        	lda (z80_hl),y
00363D  3  85 64        	sta z80_e 		; copy to de.
00363F  3  48           	pha
003640  3               
003640  3  E6 66        	inc z80_l 		; next byte of address.
003642  3  D0 02        	bne :+
003644  3  E6 67        	inc z80_h
003646  3               :
003646  3  B1 66        	lda (z80_hl),y 		; address high.
003648  3  85 65        	sta z80_d
00364A  3               
00364A  3  48           	pha	 		; swap address into hl.
00364B  3  A5 67        	lda z80_h
00364D  3  85 65        	sta z80_d
00364F  3  68           	pla
003650  3  85 67        	sta z80_h
003652  3  68           	pla
003653  3  85 66        	sta z80_l
003655  3  A5 66        	lda z80_l
003657  3  85 64        	sta z80_e
003659  3               
003659  3  6C 66 00     	jmp (z80_hl) 		; go there.
00365C  3               
00365C  3               ;ogptr:	.word 0			; original sprite pointer.
00365C  3               
00365C  3               ; Address of each sprite type's routine.
00365C  3               
00365C  3  F4 3C        evtyp0:	.word evnt00
00365E  3  D9 3D        evtyp1:	.word evnt01
003660  3  9D 3E        evtyp2:	.word evnt02
003662  3  9E 3E        evtyp3:	.word evnt03
003664  3  9F 3E        evtyp4:	.word evnt04
003666  3  A0 3E        evtyp5:	.word evnt05
003668  3  A1 3E        evtyp6:	.word evnt06
00366A  3  A2 3E        evtyp7:	.word evnt07
00366C  3  A3 3E        evtyp8:	.word evnt08
00366E  3               
00366E  3               ;--------------------------------------------------------------
00366E  3               ; Display sprites.
00366E  3               ;
00366E  3               ; Input:
00366E  3               ;  IX = sprite table
00366E  3               ;--------------------------------------------------------------
00366E  3               
00366E  3               dspr:
00366E  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003670  3  85 rr        	sta sprcnt
003672  3               dspr0:
003672  3  A0 00        	ldy #0
003674  3  B1 68        	lda (z80_ix),y 		; get sprite type.
003676  3  C9 FF        	cmp #255 		; is it enabled?
003678  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00367A  3               dspr5:
00367A  3  A0 05        	ldy #5
00367C  3  B1 68        	lda (z80_ix),y 		; new type.
00367E  3  C9 FF        	cmp #255		; is it enabled?
003680  3  D0 76        	bne dspr3 		; yes, it needs drawing.
003682  3               dspr2:
003682  3  A0 05        	ldy #5
003684  3  B1 68        	lda (z80_ix),y 		; copy new type.
003686  3  A0 00        	ldy #0
003688  3  91 68        	sta (z80_ix),y
00368A  3  A0 06        	ldy #6
00368C  3  B1 68        	lda (z80_ix),y 		; copy new image number.
00368E  3  A0 01        	ldy #1
003690  3  91 68        	sta (z80_ix),y
003692  3  A0 07        	ldy #7
003694  3  B1 68        	lda (z80_ix),y 		; copy new frame.
003696  3  A0 02        	ldy #2
003698  3  91 68        	sta (z80_ix),y
00369A  3  A0 08        	ldy #8
00369C  3  B1 68        	lda (z80_ix),y 		; copy new y.
00369E  3  A0 03        	ldy #3
0036A0  3  91 68        	sta (z80_ix),y
0036A2  3  A0 09        	ldy #9
0036A4  3  B1 68        	lda (z80_ix),y 		; copy new x.
0036A6  3  A0 04        	ldy #4
0036A8  3  91 68        	sta (z80_ix),y
0036AA  3               
0036AA  3  18           	clc
0036AB  3  A5 68        	lda z80_x
0036AD  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0036AF  3  85 68        	sta z80_x
0036B1  3  A5 69        	lda z80_i
0036B3  3  69 00        	adc #0
0036B5  3  85 69        	sta z80_i 		; next sprite.
0036B7  3  C6 rr        	dec sprcnt
0036B9  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0036BB  3  60           	rts
0036BC  3               dspr1:
0036BC  3  A0 05        	ldy #5
0036BE  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0036C0  3  C9 FF        	cmp #255		; is this enabled?
0036C2  3  D0 06        	bne dspr4 		; yes, display both.
0036C4  3               dspr6:
0036C4  3  20 97 49     	jsr sspria 		; show single sprite.
0036C7  3  4C 82 36     	jmp dspr2
0036CA  3               
0036CA  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0036CA  3               
0036CA  3               dspr4:
0036CA  3  A0 04        	ldy #4
0036CC  3  B1 68        	lda (z80_ix),y		; old x.
0036CE  3  A0 09        	ldy #9
0036D0  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0036D2  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
0036D4  3               
0036D4  3  A0 03        	ldy #3
0036D6  3  B1 68        	lda (z80_ix),y		; old y.
0036D8  3  A0 08        	ldy #8
0036DA  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0036DC  3  D0 14        	bne dspr7		; they differ, need to redraw.
0036DE  3               
0036DE  3  A0 02        	ldy #2
0036E0  3  B1 68        	lda (z80_ix),y 		; old frame.
0036E2  3  A0 07        	ldy #7
0036E4  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0036E6  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
0036E8  3               
0036E8  3  A0 01        	ldy #1
0036EA  3  B1 68        	lda (z80_ix),y 		; old image.
0036EC  3  A0 06        	ldy #6
0036EE  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0036F0  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
0036F2  3               dspr7:
0036F2  3  20 B8 49     	jsr sspric 		; delete old sprite, draw new one simultaneously.
0036F5  3  4C 82 36     	jmp dspr2
0036F8  3               dspr3:
0036F8  3  20 B2 49     	jsr ssprib 		; show single sprite.
0036FB  3  4C 82 36     	jmp dspr2
0036FE  3               
0036FE  3               ;sprcnt:	.byte 0
0036FE  3               
0036FE  3               ;-----------------------------------------
0036FE  3               ; Get sprite address calculations.
0036FE  3               ; gspran = new sprite, gsprad = old sprite.
0036FE  3               ;
0036FE  3               ; Input:
0036FE  3               ;  IX = sprite address
0036FE  3               ;-----------------------------------------
0036FE  3               
0036FE  3               gspran:
0036FE  3  A0 08        	ldy #8
003700  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003702  3  85 rr        	sta dispy
003704  3  A0 09        	ldy #9
003706  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
003708  3  85 rr        	sta dispx
00370A  3  A0 06        	ldy #6
00370C  3  B1 68        	lda (z80_ix),y 		; new sprite image.
00370E  3  20 1B 3A     	jsr gfrm		; fetch start frame for this sprite.
003711  3               
003711  3  A0 00        	ldy #0
003713  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003715  3  A0 07        	ldy #7
003717  3  18           	clc
003718  3  71 68        	adc (z80_ix),y 		; new add frame number.
00371A  3  4C 39 37     	jmp gspra0
00371D  3               
00371D  3               ;-----------------------------------------
00371D  3               ; Calculate old sprite address
00371D  3               ;
00371D  3               ; Input:
00371D  3               ;  IX = sprite address
00371D  3               ;
00371D  3               ; Output:
00371D  3               ;  B  = right byte mask
00371D  3               ;  C  = left byte mask
00371D  3               ;  DE = spriteframe address
00371D  3               ;  scraddr = screenaddress(dispx,dispy)
00371D  3               ;-----------------------------------------
00371D  3               
00371D  3               gsprad:
00371D  3  A0 03        	ldy #3
00371F  3  B1 68        	lda (z80_ix),y		; y coordinate.
003721  3  85 rr        	sta dispy
003723  3  A0 04        	ldy #4
003725  3  B1 68        	lda (z80_ix),y		; x coordinate.
003727  3  85 rr        	sta dispx
003729  3  A0 01        	ldy #1
00372B  3  B1 68        	lda (z80_ix),y 		; sprite image.
00372D  3  20 1B 3A     	jsr gfrm 		; fetch start frame for this sprite.
003730  3               
003730  3               ; z80_hl = sprite framenr
003730  3               
003730  3  A0 00        	ldy #0
003732  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003734  3               
003734  3               ; z80_ix+2 = current framenr
003734  3               
003734  3  A0 02        	ldy #2
003736  3  18           	clc
003737  3  71 68        	adc (z80_ix),y 		; add frame number.
003739  3               
003739  3               ; A = sprite framenr + current framenr
003739  3               ;
003739  3               ; framestart = z80_d/e = 120 * A (Normal 4 x 32 = 128)
003739  3               ; framestart = framestart + (x AND 1) * 60
003739  3               ; framestart = framestart + (reftable(dispy) * 20)
003739  3               
003739  3               gspra0:
003739  3               
003739  3               ; Calculate framestart = 120 * sprite image
003739  3               
003739  3  85 65        	sta z80_d
00373B  3  85 rr        	sta tmp
00373D  3  A9 00        	lda #0
00373F  3  85 64        	sta z80_e
003741  3  85 rr        	sta tmp+1
003743  3               
003743  3  46 65        	lsr z80_d	; a * 128
003745  3  66 64        	ror z80_e
003747  3               
003747  3  06 rr        	asl tmp		; a x 8
003749  3  26 rr        	rol tmp+1
00374B  3  06 rr        	asl tmp
00374D  3  26 rr        	rol tmp+1
00374F  3  06 rr        	asl tmp
003751  3  26 rr        	rol tmp+1
003753  3               
003753  3  38           	sec		; a*128 - a*8
003754  3  A5 64        	lda z80_e
003756  3  E5 rr        	sbc tmp
003758  3  85 64        	sta z80_e
00375A  3  A5 65        	lda z80_d
00375C  3  E5 rr        	sbc tmp+1
00375E  3  85 65        	sta z80_d
003760  3               
003760  3               ;.if bflag
003760  3               ;	lsr tmp1
003760  3               ;	ror tmp2
003760  3               ;	clc
003760  3               ;	lda tmp2
003760  3               ;	adc z80_e
003760  3               ;	sta z80_e
003760  3               ;	lda tmp1
003760  3               ;	adc z80_d
003760  3               ;	sta z80_d
003760  3               ;.endif
003760  3               
003760  3               ; Add spritedata address
003760  3               
003760  3  18           	clc 			; address of play sprites.
003761  3  A5 64        	lda z80_e
003763  3  69 04        	adc #<sprgfx
003765  3  85 64        	sta z80_e
003767  3  A5 65        	lda z80_d
003769  3  69 3F        	adc #>sprgfx
00376B  3  85 65        	sta z80_d
00376D  3               
00376D  3               ; Check for x-shift
00376D  3               
00376D  3  A5 rr        	lda dispx 		; x coordinate.
00376F  3  29 01        	and #1
003771  3  F0 0B        	beq chk_y_shift
003773  3  18           	clc			; Point to odd frame
003774  3  A5 64        	lda z80_e
003776  3  69 3C        	adc #60
003778  3  85 64        	sta z80_e
00377A  3  90 02        	bcc :+
00377C  3  E6 65        	inc z80_d
00377E  3               :
00377E  3               ; SCheck for y-shift
00377E  3               
00377E  3               chk_y_shift:
00377E  3  A6 rr        	ldx dispy
003780  3  BD 4A DF     	lda V_SPR_PTR,x
003783  3  18           	clc
003784  3  65 64        	adc z80_e
003786  3  85 64        	sta z80_e
003788  3  90 02        	bcc :+
00378A  3  E6 65        	inc z80_d
00378C  3               :
00378C  3               
00378C  3               ;------------------------------------------------------------------
00378C  3               ; Drop into screen address routine.
00378C  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
00378C  3               ;------------------------------------------------------------------
00378C  3               
00378C  3               ; Check for bottom of screen
00378C  3               
00378C  3               scadd:
00378C  3  A6 rr        	ldx dispy
00378E  3  E0 4C        	cpx #76
003790  3  90 02        	bcc :+
003792  3  A2 4C        	ldx #76
003794  3               :
003794  3               
003794  3  A5 rr        	lda dispx
003796  3  4A           	lsr a
003797  3  18           	clc
003798  3  7D 00 DC     	adc SCADTB_lb,x
00379B  3  85 rr        	sta scraddr
00379D  3  BD 00 DD     	lda SCADTB_hb,x
0037A0  3  69 00        	adc #0
0037A2  3  85 rr        	sta scraddr+1
0037A4  3  60           	rts
0037A5  3               
0037A5  3               spmask:
0037A5  3  FF 00        	.byte $ff,$00
0037A7  3  6A 35        	.byte $6a,$35
0037A9  3               
0037A9  3  00           tmp1:	.byte 0
0037AA  3  00           tmp2:	.byte 0
0037AB  3               
0037AB  3               
0037AB  3               ;----------------------------------------------------------------------
0037AB  3               ; Line drawn, now work out next target address.
0037AB  3               ;----------------------------------------------------------------------
0037AB  3               
0037AB  3               nline:
0037AB  3  18           	clc
0037AC  3  A5 rr        	lda scraddr 		; get low byte of address.
0037AE  3  69 28        	adc #ScrWidth
0037B0  3  85 rr        	sta scraddr 		; new low byte of address.
0037B2  3  90 02        	bcc :+
0037B4  3  E6 rr        	inc scraddr+1 		; new high byte of address.
0037B6  3               :
0037B6  3  60           	rts
0037B7  3               
0037B7  3               ;-----------------------------------------------------------
0037B7  3               ; Animates a sprite.
0037B7  3               ;
0037B7  3               ; Input:
0037B7  3               ;  IX = sprite address
0037B7  3               ;  HL = last sprite address
0037B7  3               ;-----------------------------------------------------------
0037B7  3               
0037B7  3               animsp:
0037B7  3  25 rr        	and frmno
0037B9  3  F0 01        	beq :+
0037BB  3  60           	rts
0037BC  3               :
0037BC  3  A0 06        	ldy #6
0037BE  3  B1 68        	lda (z80_ix),y		; sprite image
0037C0  3  20 1B 3A     	jsr gfrm		; get frame data.
0037C3  3               
0037C3  3  E6 66        	inc z80_l		; point to frames.
0037C5  3  D0 02        	bne :+
0037C7  3  E6 67        	inc z80_h
0037C9  3               :
0037C9  3  A0 07        	ldy #7
0037CB  3  B1 68        	lda (z80_ix),y		; sprite frame.
0037CD  3  18           	clc
0037CE  3  69 01        	adc #1			; next one along.
0037D0  3  A0 00        	ldy #0
0037D2  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
0037D4  3  90 02        	bcc anims0		; no, not yet.
0037D6  3  A9 00        	lda #0			; start at first frame.
0037D8  3               anims0:
0037D8  3  A0 07        	ldy #7
0037DA  3  91 68        	sta (z80_ix),y		; new frame.
0037DC  3  60           	rts
0037DD  3               
0037DD  3               ;--------------------------------------------------------------
0037DD  3               ; Animate back
0037DD  3               ;
0037DD  3               ; Input:
0037DD  3               ;  IX = sprite address
0037DD  3               ;  HL = last sprite address
0037DD  3               ;--------------------------------------------------------------
0037DD  3               
0037DD  3               animbk:
0037DD  3  25 rr        	and frmno
0037DF  3  F0 01        	beq :+
0037E1  3  60           	rts
0037E2  3               :
0037E2  3  A0 06        	ldy #6
0037E4  3  B1 68        	lda (z80_ix),y		; sprite image.
0037E6  3  20 1B 3A     	jsr gfrm		; get frame data.
0037E9  3               
0037E9  3  E6 66        	inc z80_l 		; point to frames.
0037EB  3  D0 02        	bne :+
0037ED  3  E6 67        	inc z80_h
0037EF  3               :
0037EF  3  A0 07        	ldy #7
0037F1  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0037F3  3  F0 03        	beq :+
0037F5  3  4C FC 37     	jmp rtanb0 		; yes, start at end.
0037F8  3               :
0037F8  3  A0 00        	ldy #0
0037FA  3  B1 66        	lda (z80_hl),y 		; last sprite.
0037FC  3               rtanb0:
0037FC  3  38           	sec
0037FD  3  E9 01        	sbc #1			; next one along.
0037FF  3  4C D8 37     	jmp anims0		; set new frame.
003802  3               
003802  3               ;--------------------------------------------------------------
003802  3               ; Check for collision with other sprite, strict enforcement.
003802  3               ;
003802  3               ; Input:
003802  3               ;  b		= sprite to test for
003802  3               ;  ix		= current sprite pointer
003802  3               ;
003802  3               ; global:	b
003802  3               ; local:	x,y,hl,de,skptr
003802  3               ; calls:	-
003802  3               ;--------------------------------------------------------------
003802  3               
003802  3               sktyp:
003802  3  A9 F9        	lda #<sprtab				; sprite table.
003804  3  85 66        	sta z80_l
003806  3  A9 3B        	lda #>sprtab
003808  3  85 67        	sta z80_h
00380A  3               numsp2:
00380A  3  A9 0C        	lda #NUMSPR				; number of sprites.
00380C  3  85 rr        	sta sktptr
00380E  3               sktyp0:
00380E  3  A5 66        	lda z80_l 				; store pointer to sprite.
003810  3  85 rr        	sta skptr
003812  3  A5 67        	lda z80_h
003814  3  85 rr        	sta skptr+1
003816  3               
003816  3  A0 00        	ldy #0
003818  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00381A  3  C5 63        	cmp z80_b				; is it the type we seek?
00381C  3  F0 1D        	beq coltyp				; yes, we can use this one.
00381E  3               sktyp1:
00381E  3  18           	clc
00381F  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003821  3  69 11        	adc #TABSIZ				; size of each entry.
003823  3  85 66        	sta z80_l
003825  3  A5 rr        	lda skptr+1
003827  3  69 00        	adc #0
003829  3  85 67        	sta z80_h
00382B  3  C6 rr        	dec sktptr					; one less iteration.
00382D  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
00382F  3  A9 00        	lda #0					; default to ROM address - no sprite.
003831  3  85 66        	sta z80_l
003833  3  85 67        	sta z80_h
003835  3  85 rr        	sta skptr				; store pointer to sprite.
003837  3  85 rr        	sta skptr+1
003839  3               
003839  3  18           	clc					; don't return with zero flag set.
00383A  3  60           	rts 					; didn't find one.
00383B  3               
00383B  3               ;skptr:	.word 0					; search pointer.
00383B  3               ;sktptr:	.byte 0
00383B  3               
00383B  3               coltyp:
00383B  3  A0 00        	ldy #0
00383D  3  B1 68        	lda (z80_ix),y				; current sprite type.
00383F  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003841  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
003843  3               colty0:
003843  3  A0 09        	ldy #9					; distance to x position in table.
003845  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
003847  3  85 64        	sta z80_e
003849  3  88           	dey
00384A  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
00384C  3  85 65        	sta z80_d
00384E  3               
00384E  3               ; Drop into collision detection.
00384E  3               
00384E  3               colc16:
00384E  3  A0 09        	ldy #9
003850  3  B1 68        	lda (z80_ix),y			 	; x coord.
003852  3  38           	sec					; subtract x.
003853  3  E5 64        	sbc z80_e
003855  3  B0 05        	bcs  colc1a 				; result is positive.
003857  3  49 FF        	eor #$ff				; make negative positive.
003859  3  18           	clc
00385A  3  69 01        	adc #1
00385C  3               colc1a:
00385C  3  C9 08        	cmp #SPR_WID				; within x range?
00385E  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003860  3  85 62        	sta z80_c				; store difference.
003862  3               
003862  3  A0 08        	ldy #8
003864  3  B1 68        	lda (z80_ix),y				; y coord.
003866  3  38           	sec
003867  3  E5 65        	sbc z80_d				; subtract y.
003869  3  B0 05        	bcs colc1b				; result is positive.
00386B  3  49 FF        	eor #$ff				; make negative positive.
00386D  3  18           	clc
00386E  3  69 01        	adc #1
003870  3               colc1b:
003870  3  C9 09        	cmp #SPR_HGT					; within y range?
003872  3  B0 AA        	bcs sktyp1 				; no - they've missed.
003874  3  18           	clc					; add x difference.
003875  3  65 62        	adc z80_c
003877  3  C9 0C        	cmp #12					; only 5 corner pixels touching?
003879  3  B0 02        	bcs :+
00387B  3  38           	sec
00387C  3  60           	rts 					; carry set if there's a collision.
00387D  3               :
00387D  3  4C 1E 38     	jmp sktyp1				; try next sprite in table.
003880  3               colty1:
003880  3  A5 68        	lda z80_x  				; compare the two.
003882  3  C5 66        	cmp z80_l
003884  3  D0 09        	bne end_col
003886  3  A5 69        	lda z80_i
003888  3  C5 67        	cmp z80_h
00388A  3  D0 03        	bne end_col
00388C  3  4C 1E 38     	jmp sktyp1 				; addresses are identical.
00388F  3               end_col:
00388F  3  4C 43 38     	jmp colty0
003892  3               
003892  3               ;-----------------------------------------------------------
003892  3               ; Display number, left aligned
003892  3               ;
003892  3               ; Input:
003892  3               ;  a		= number
003892  3               ;
003892  3               ; global:	-
003892  3               ; local:	a,y,bc,hl,displ0
003892  3               ; calls:	num2ch,dmsg3
003892  3               ;-----------------------------------------------------------
003892  3               
003892  3               disply:
003892  3  85 61        	sta z80_a
003894  3  A9 BA        	lda #<displ0				; display workspace.
003896  3  85 62        	sta z80_c
003898  3  A9 38        	lda #>displ0
00389A  3  85 63        	sta z80_b
00389C  3  A5 61        	lda z80_a
00389E  3  20 6E 2E     	jsr num2ch				; convert accumulator to string.
0038A1  3               displ1:
0038A1  3  C6 62        	dec z80_c				; back one character.
0038A3  3  D0 02        	bne :+
0038A5  3  C6 63        	dec z80_b
0038A7  3               :
0038A7  3  A0 00        	ldy #0
0038A9  3  B1 62        	lda (z80_bc),y				; fetch digit.
0038AB  3  09 80        	ora #128				; insert end marker.
0038AD  3  91 62        	sta (z80_bc),y				; new value.
0038AF  3               
0038AF  3  A9 BA        	lda #<displ0				; display space.
0038B1  3  85 66        	sta z80_l
0038B3  3  A9 38        	lda #>displ0
0038B5  3  85 67        	sta z80_h
0038B7  3               
0038B7  3  4C 42 34     	jmp dmsg3				; display the string.
0038BA  3               
0038BA  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0038BE  3               
0038BE  3               ;----------------------------------------------------------------
0038BE  3               ; Initialise screen.
0038BE  3               ;
0038BE  3               ; global:	roomtb,scno
0038BE  3               ; local:	-
0038BE  3               ; calls:	tstcs
0038BE  3               ;----------------------------------------------------------------
0038BE  3               
0038BE  3               initsc:
0038BE  3  AD D6 3C     	lda roomtb 			; whereabouts in the map are we?
0038C1  3  20 CB 38     	jsr tstsc 			; find displacement.
0038C4  3  C9 FF        	cmp #255 			; is it valid?
0038C6  3  F0 02        	beq init_end 			; no, it's rubbish.
0038C8  3  85 rr        	sta scno			; store new room number.
0038CA  3               init_end:
0038CA  3  60           	rts
0038CB  3               
0038CB  3               ;----------------------------------------------------------------
0038CB  3               ; Test screen.
0038CB  3               ;
0038CB  3               ; global:	-
0038CB  3               ; local:	x
0038CB  3               ; calls:	-
0038CB  3               ;----------------------------------------------------------------
0038CB  3               
0038CB  3               tstsc:
0038CB  3  85 rr        	sta tmproom
0038CD  3  18           	clc
0038CE  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
0038D0  3  AA           	tax 				; add displacement to map data.
0038D1  3  BD EA 3C     	lda mapdat-MAPWID,x 		; find room number there.
0038D4  3  60           	rts
0038D5  3               
0038D5  3               ;tmproom:	.byte 0
0038D5  3               
0038D5  3               ;--------------------------
0038D5  3               ; Screen left.
0038D5  3               ;--------------------------
0038D5  3               
0038D5  3               scrl:
0038D5  3  AD D6 3C     	lda roomtb 			; present room table pointer.
0038D8  3  38           	sec
0038D9  3  E9 01        	sbc #1				; room left.
0038DB  3               scrl0:
0038DB  3  20 CB 38     	jsr tstsc			; test screen.
0038DE  3  C9 FF        	cmp #255			; is there a screen this way?
0038E0  3  D0 01        	bne :+
0038E2  3  60           	rts				; no, return to loop.
0038E3  3               :
0038E3  3  A5 rr        	lda tmproom			; restore room displacement.
0038E5  3  8D D6 3C     	sta roomtb			; new room table position.
0038E8  3               scrl1:
0038E8  3  20 BE 38     	jsr initsc 			; set new screen.
0038EB  3  A9 02        	lda #2
0038ED  3  85 rr        	sta restfl 			; set it.
0038EF  3  60           	rts
0038F0  3               scrr:
0038F0  3  AD D6 3C     	lda roomtb 			; room table pointer.
0038F3  3  18           	clc
0038F4  3  69 01        	adc #1				; room right.
0038F6  3  4C DB 38     	jmp scrl0
0038F9  3               scru:
0038F9  3  AD D6 3C     	lda roomtb 			; room table pointer.
0038FC  3  38           	sec
0038FD  3  E9 03        	sbc #MAPWID 			; room up.
0038FF  3  4C DB 38     	jmp scrl0
003902  3               scrd:
003902  3  AD D6 3C     	lda roomtb 			; room table pointer.
003905  3  18           	clc
003906  3  69 03        	adc #MAPWID 			; room down.
003908  3  4C DB 38     	jmp scrl0
00390B  3               
00390B  3               ;-----------------------------------------
00390B  3               ; Jump to new screen.
00390B  3               ;-----------------------------------------
00390B  3               
00390B  3               nwscr:
00390B  3  A2 00        	ldx #0				; start of map data.
00390D  3               nwscr0:
00390D  3  DD ED 3C     	cmp mapdat,x
003910  3  F0 06        	beq nwscr1			; have we found a match for screen?
003912  3  E8           	inx 				; next room.
003913  3  E0 50        	cpx #80				; zero room count, 80 to search.
003915  3  D0 F6        	bne nwscr0			; keep looking.
003917  3  60           	rts
003918  3               nwscr1:
003918  3  8E D6 3C     	stx roomtb			; set the map position.
00391B  3  4C E8 38     	jmp scrl1			; draw new room.
00391E  3               
00391E  3               
00391E  3               ;----------------------------------------------------------
00391E  3               ; Gravity processing.
00391E  3               ;----------------------------------------------------------
00391E  3               
00391E  3               grav:
00391E  3  A0 0D        	ldy #13
003920  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003922  3  85 66        	sta z80_l
003924  3  A0 0E        	ldy #14
003926  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003928  3  85 67        	sta z80_h
00392A  3  05 66        	ora z80_l			; merge in low byte.
00392C  3  D0 01        	bne :+
00392E  3  60           	rts				; if neither is set, we're not in the air.
00392F  3               :
00392F  3  A0 00        	ldy #0
003931  3  B1 66        	lda (z80_hl),y			; pixels to move.
003933  3  85 61        	sta z80_a
003935  3  C9 63        	cmp #99				; reached the end?
003937  3  D0 0C        	bne grav0			; no, continue.
003939  3               grav2:
003939  3  C6 66        	dec z80_l			; go back to previous value.
00393B  3  C9 FF        	cmp #$ff
00393D  3  D0 02        	bne :+
00393F  3  C6 67        	dec z80_h
003941  3               :
003941  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003943  3  85 61        	sta z80_a
003945  3               grav0:
003945  3  E6 66        	inc z80_l			; point to next table entry.
003947  3  D0 02        	bne :+
003949  3  E6 67        	inc z80_h
00394B  3               :
00394B  3  A5 66        	lda z80_l
00394D  3  A0 0D        	ldy #13
00394F  3  91 68        	sta (z80_ix),y			; store new pointer low.
003951  3  A5 67        	lda z80_h
003953  3  A0 0E        	ldy #14
003955  3  91 68        	sta (z80_ix),y			; store new pointer high.
003957  3               grav1:
003957  3  A5 61        	lda z80_a
003959  3  D0 01        	bne :+				; any movement required?
00395B  3  60           	rts				; no, not this time.
00395C  3               :
00395C  3  A5 61        	lda z80_a
00395E  3  C9 80        	cmp #128			; is it up or down?
003960  3  B0 15        	bcs gravu			; it's up.
003962  3               gravd:
003962  3  85 63        	sta z80_b			; set pixels to move.
003964  3               gravd0:
003964  3  20 7D 32     	jsr cangd			; can we go down?
003967  3  D0 28        	bne gravst			; can't move down, so stop.
003969  3  A0 08        	ldy #8
00396B  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
00396D  3  18           	clc
00396E  3  69 01        	adc #1
003970  3  91 68        	sta (z80_ix),y
003972  3  C6 63        	dec z80_b
003974  3  D0 EE        	bne gravd0
003976  3  60           	rts
003977  3               gravu:
003977  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003979  3  18           	clc
00397A  3  69 01        	adc #1
00397C  3  85 63        	sta z80_b			; set pixels to move.
00397E  3               gravu0:
00397E  3  20 30 32     	jsr cangu			; can we go up?
003981  3  D0 6E        	bne ifalls			; can't move up, go down next.
003983  3  A0 08        	ldy #8
003985  3  B1 68        	lda (z80_ix),y
003987  3  38           	sec
003988  3  E9 01        	sbc #1
00398A  3  91 68        	sta (z80_ix),y			; adjust new x coord.
00398C  3  C6 63        	dec z80_b
00398E  3  D0 EE        	bne gravu0
003990  3  60           	rts
003991  3               gravst:
003991  3  A0 0D        	ldy #13
003993  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003995  3  85 66        	sta z80_l
003997  3  A0 0E        	ldy #14
003999  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00399B  3  85 67        	sta z80_h
00399D  3               
00399D  3  A9 00        	lda #0				; null value in pointer.
00399F  3  A0 0D        	ldy #13
0039A1  3  91 68        	sta (z80_ix),y			; store new pointer low.
0039A3  3  C8           	iny
0039A4  3  91 68        	sta (z80_ix),y			; store new pointer high.
0039A6  3               
0039A6  3  A0 00        	ldy #0
0039A8  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0039AA  3  C9 63        	cmp #99				; is it the end marker?
0039AC  3               evftf:
0039AC  3  F0 01        	beq :+				; yes, fallen too far.
0039AE  3  60           	rts
0039AF  3               :
0039AF  3  4C D3 3E     	jmp evnt15			; EVENT FELLTOOFAR
0039B2  3               
0039B2  3               ;------------------------------------------------
0039B2  3               ; Initiate fall check.
0039B2  3               ;------------------------------------------------
0039B2  3               
0039B2  3               ifall:
0039B2  3  A0 0D        	ldy #13
0039B4  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0039B6  3  85 66        	sta z80_l
0039B8  3  A0 0E        	ldy #14
0039BA  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0039BC  3  85 67        	sta z80_h			; high byte in accumulator.
0039BE  3  05 66        	ora z80_l			; merge in low byte.
0039C0  3  F0 01        	beq :+
0039C2  3  60           	rts				; if either is set, we're already in the air.
0039C3  3               :
0039C3  3  A0 09        	ldy #9
0039C5  3  B1 68        	lda (z80_ix),y			; y coordinate.
0039C7  3  85 rr        	sta dispx
0039C9  3  A0 08        	ldy #8
0039CB  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0039CD  3  18           	clc
0039CE  3               numsp7:
0039CE  3  69 09        	adc #SPR_HGT			; add 16 pixels.
0039D0  3  85 rr        	sta dispy			; set up test coordinates.
0039D2  3  20 B4 33     	jsr tstbl			; get map address.
0039D5  3  20 28 33     	jsr plchk			; block, platform check.
0039D8  3  F0 01        	beq :+
0039DA  3  60           	rts				; it's solid, don't fall.
0039DB  3               :
0039DB  3  E6 rr        	inc bufaddr			; look right one cell.
0039DD  3  20 28 33     	jsr plchk			; block, platform check.
0039E0  3  F0 01        	beq :+
0039E2  3  60           	rts				; it's solid, don't fall.
0039E3  3               :
0039E3  3  A5 rr        	lda dispx			; y coordinate.
0039E5  3  29 07        	and #7				; position straddling block cells.
0039E7  3  F0 08        	beq ifalls			; no more checks needed.
0039E9  3  E6 rr        	inc bufaddr			; look to third cell.
0039EB  3  20 28 33     	jsr plchk			; block, platform check.
0039EE  3  F0 01        	beq :+
0039F0  3  60           	rts				; it's solid, don't fall.
0039F1  3               :
0039F1  3               ifalls:
0039F1  3  A9 2E        	lda #<jtab			; jump table start.
0039F3  3  85 66        	sta z80_l
0039F5  3  A9 48        	lda #>jtab
0039F7  3  85 67        	sta z80_h
0039F9  3               ifal0:
0039F9  3  E6 66        	inc z80_l			; point to next value.
0039FB  3  D0 02        	bne :+
0039FD  3  E6 67        	inc z80_h
0039FF  3               :
0039FF  3  A0 00        	ldy #0
003A01  3  B1 66        	lda (z80_hl),y			; fetch value.
003A03  3  F0 F4        	beq ifal0			; no, get next value.
003A05  3  C9 63        	cmp #99				; reached end of table?
003A07  3  D0 01        	bne :+
003A09  3  60           	rts				; yes, don't fall.
003A0A  3               :
003A0A  3  C9 80        	cmp #128			; is it going up?
003A0C  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003A0E  3               
003A0E  3  A0 0D        	ldy #13
003A10  3  A5 66        	lda z80_l
003A12  3  91 68        	sta (z80_ix),y 			; set jump low.
003A14  3  A0 0E        	ldy #14
003A16  3  A5 67        	lda z80_h
003A18  3  91 68        	sta (z80_ix),y 			; set jump high.
003A1A  3  60           	rts
003A1B  3               
003A1B  3               
003A1B  3               ;----------------------------------------------------
003A1B  3               ; Get frame data for a particular sprite.
003A1B  3               ; Input:
003A1B  3               ;  a		= framenumer
003A1B  3               ; Output:
003A1B  3               ;  hl		= frame address
003A1B  3               ;
003A1B  3               ; global:	hl,frmptr
003A1B  3               ; local:	-
003A1B  3               ; calls:	-
003A1B  3               ;----------------------------------------------------
003A1B  3               
003A1B  3               gfrm:
003A1B  3  0A           	asl a	 		 	; multiple of 2.
003A1C  3  18           	clc
003A1D  3  6D 17 28     	adc frmptr 			; frames used by game.
003A20  3  85 66        	sta z80_l
003A22  3  AD 18 28     	lda frmptr+1
003A25  3  69 00        	adc #0
003A27  3  85 67        	sta z80_h 			; point to frame start.
003A29  3  60           	rts
003A2A  3               
003A2A  3               ;----------------------------------------------------
003A2A  3               ; Find sprite list for current room.
003A2A  3               ;
003A2A  3               ; global:	hl
003A2A  3               ; local:	x,y
003A2A  3               ; calls:	-
003A2A  3               ;----------------------------------------------------
003A2A  3               
003A2A  3               sprlst:
003A2A  3  A9 FF        	lda #<nmedat 			; list of enemy sprites.
003A2C  3  85 66        	sta z80_l
003A2E  3  A9 44        	lda #>nmedat
003A30  3  85 67        	sta z80_h
003A32  3  A6 rr        	ldx scno 			; screen number.
003A34  3  D0 01        	bne sprls2 			; is it the first screen?
003A36  3  60           	rts 				; yes, don't need to search data.
003A37  3               sprls2:
003A37  3  A0 00        	ldy #0
003A39  3               sprls1:
003A39  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003A3B  3  C9 FF        	cmp #255			; is it an end marker?
003A3D  3  F0 0E        	beq sprls0 			; yes, end of this room.
003A3F  3               
003A3F  3  18           	clc 				; point to next sprite in list.
003A40  3  A5 66        	lda z80_l
003A42  3  69 04        	adc #NMESIZ
003A44  3  85 66        	sta z80_l
003A46  3  90 02        	bcc :+
003A48  3  E6 67        	inc z80_h
003A4A  3               :
003A4A  3  4C 39 3A     	jmp sprls1 			; continue until end of room.
003A4D  3               sprls0:
003A4D  3  E6 66        	inc z80_l 			; point to start of next screen.s
003A4F  3  D0 02        	bne :+
003A51  3  E6 67        	inc z80_h
003A53  3               :
003A53  3  CA           	dex
003A54  3  D0 E3        	bne sprls1 			; continue until room found.
003A56  3  60           	rts
003A57  3               
003A57  3               
003A57  3               ;----------------------------------------------------
003A57  3               ; Clear all but a single player sprite.
003A57  3               ;
003A57  3               ; global:	-
003A57  3               ; local:	x,y,ix
003A57  3               ; calls:	-
003A57  3               ;----------------------------------------------------
003A57  3               
003A57  3               nspr:
003A57  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003A59  3  85 rr        	sta sprcnt
003A5B  3  A9 F9        	lda #<sprtab 			; sprite table.
003A5D  3  85 68        	sta z80_x
003A5F  3  A9 3B        	lda #>sprtab
003A61  3  85 69        	sta z80_i
003A63  3               nspr0:
003A63  3  A0 00        	ldy #0 				; fetch sprite type.
003A65  3  B1 68        	lda (z80_ix),y 			; is it a player?
003A67  3  F0 1A        	beq nspr1 			; yes, keep this one.
003A69  3               
003A69  3  A9 FF        	lda #255
003A6B  3  A0 00        	ldy #0 				; fetch sprite type.
003A6D  3  91 68        	sta (z80_ix),y 			; delete sprite.
003A6F  3  A0 05        	ldy #5
003A71  3  91 68        	sta (z80_ix),y 			; remove next type.
003A73  3               
003A73  3  18           	clc	 			; next sprite.
003A74  3  A5 68        	lda z80_x
003A76  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003A78  3  85 68        	sta z80_x
003A7A  3  90 02        	bcc :+
003A7C  3  E6 69        	inc z80_i
003A7E  3               :
003A7E  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003A80  3  D0 E1        	bne nspr0
003A82  3  60           	rts
003A83  3               nspr1:
003A83  3  A9 FF        	lda #255
003A85  3  A0 00        	ldy #0
003A87  3  91 68        	sta (z80_ix),y 			; delete sprite.
003A89  3               
003A89  3  18           	clc	 			; point to next sprite.
003A8A  3  A5 68        	lda z80_x
003A8C  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003A8E  3  85 68        	sta z80_x
003A90  3  90 02        	bcc :+
003A92  3  E6 69        	inc z80_i
003A94  3               :
003A94  3  C6 rr        	dec sprcnt	 			; one less to do.
003A96  3  D0 01        	bne nspr2
003A98  3  60           	rts
003A99  3               nspr2:
003A99  3  A9 FF        	lda #255
003A9B  3  A0 00        	ldy #0
003A9D  3  91 68        	sta (z80_ix),y 			; delete sprite.
003A9F  3  A0 05        	ldy #5
003AA1  3  91 68        	sta (z80_ix),y 			; remove next type.
003AA3  3               
003AA3  3  18           	clc	 			; next sprite.
003AA4  3  A5 68        	lda z80_x
003AA6  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003AA8  3  85 68        	sta z80_x
003AAA  3  90 02        	bcc :+
003AAC  3  E6 69        	inc z80_i
003AAE  3               :
003AAE  3  C6 rr        	dec sprcnt	 			; one less space in table.
003AB0  3  D0 E7        	bne nspr2
003AB2  3  60           	rts
003AB3  3               
003AB3  3               ;----------------------------------------------------------
003AB3  3               ; Two initialisation routines.
003AB3  3               ; Initialise sprites - copy everything from list to table.
003AB3  3               ;
003AB3  3               ; global:	-
003AB3  3               ; local:	x,y,ix
003AB3  3               ; calls:	cpsp
003AB3  3               ;----------------------------------------------------------
003AB3  3               
003AB3  3               ispr:
003AB3  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003AB5  3  85 rr        	sta sprcnt
003AB7  3  A9 F9        	lda #<sprtab			; sprite table.
003AB9  3  85 68        	sta z80_x
003ABB  3  A9 3B        	lda #>sprtab
003ABD  3  85 69        	sta z80_i
003ABF  3               ispr2:
003ABF  3  A0 00        	ldy #0
003AC1  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003AC3  3  C9 FF        	cmp #255 			; is it an end marker?
003AC5  3  D0 01        	bne :+
003AC7  3  60           	rts 				; yes, no more to do.
003AC8  3               :
003AC8  3               ispr1:
003AC8  3  A0 00        	ldy #0
003ACA  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003ACC  3  C9 FF        	cmp #255 			; is it enabled yet?
003ACE  3  D0 08        	bne ispr4			; yes, try another slot.
003AD0  3               
003AD0  3  A0 05        	ldy #5
003AD2  3  B1 68        	lda (z80_ix),y		 	; next type.
003AD4  3  C9 FF        	cmp #255 			; is it enabled yet?
003AD6  3  F0 10        	beq ispr3 			; no, process this one.
003AD8  3               ispr4:
003AD8  3  18           	clc 				; next sprite.
003AD9  3  A5 68        	lda z80_x
003ADB  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003ADD  3  85 68        	sta z80_x
003ADF  3  90 02        	bcc :+
003AE1  3  E6 69        	inc z80_i
003AE3  3               :
003AE3  3  C6 rr        	dec sprcnt
003AE5  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
003AE7  3  60           	rts  				; no more room in table.
003AE8  3               ispr3:
003AE8  3  20 3B 3B     	jsr cpsp			; initialise a sprite.
003AEB  3  C6 rr        	dec sprcnt			; one less space in the table.
003AED  3  D0 D0        	bne ispr2
003AEF  3  60           	rts
003AF0  3               
003AF0  3               
003AF0  3               ;-----------------------------------------------------------------------
003AF0  3               ; Initialise sprites - but not player, we're keeping the old one.
003AF0  3               ;
003AF0  3               ; global:	-
003AF0  3               ; local:	x,y,ix
003AF0  3               ; calls:	cpsp
003AF0  3               ;-----------------------------------------------------------------------
003AF0  3               
003AF0  3               kspr:
003AF0  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003AF2  3  A9 F9        	lda #<sprtab 			; sprite table.
003AF4  3  85 68        	sta z80_x
003AF6  3  A9 3B        	lda #>sprtab
003AF8  3  85 69        	sta z80_i
003AFA  3               kspr2:
003AFA  3  A0 00        	ldy #0
003AFC  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003AFE  3  C9 FF        	cmp #255 			; is it an end marker?
003B00  3  D0 01        	bne :+
003B02  3  60           	rts 				; yes, no more to do.
003B03  3               :
003B03  3  C9 00        	cmp #0
003B05  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003B07  3               
003B07  3  18           	clc 				; next sprite.
003B08  3  A5 66        	lda z80_l
003B0A  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003B0C  3  85 66        	sta z80_l
003B0E  3  90 02        	bcc :+
003B10  3  E6 67        	inc z80_h
003B12  3               :
003B12  3  4C FA 3A     	jmp kspr2
003B15  3               kspr1:
003B15  3  A0 00        	ldy #0 				; fetch sprite type.
003B17  3  B1 68        	lda (z80_ix),y
003B19  3  C9 FF        	cmp #255 			; is it enabled yet?
003B1B  3  D0 08        	bne kspr4 			; yes, try another slot.
003B1D  3               
003B1D  3  A0 05        	ldy #5 				; next type.
003B1F  3  B1 68        	lda (z80_ix),y
003B21  3  C9 FF        	cmp #255 			; is it enabled yet?
003B23  3  F0 0F        	beq kspr3 			; no, process this one.
003B25  3               kspr4:
003B25  3  18           	clc 				; next sprite.
003B26  3  A5 68        	lda z80_x
003B28  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003B2A  3  85 68        	sta z80_x
003B2C  3  90 02        	bcc :+
003B2E  3  E6 69        	inc z80_i
003B30  3               :
003B30  3  CA           	dex	 			; repeat for remaining sprites.
003B31  3  D0 E2        	bne kspr1
003B33  3  60           	rts  				; no more room in table.
003B34  3               kspr3:
003B34  3  20 3B 3B     	jsr cpsp 			; copy sprite to table.
003B37  3  CA           	dex	 			; one less space in the table.
003B38  3  D0 C0        	bne kspr2
003B3A  3  60           	rts
003B3B  3               
003B3B  3               ;----------------------------------------------
003B3B  3               ; Copy sprite from list to table.
003B3B  3               ;
003B3B  3               ; global:	hl,ix
003B3B  3               ; local:	y
003B3B  3               ; calls:	evnt09
003B3B  3               ;----------------------------------------------
003B3B  3               
003B3B  3               cpsp:
003B3B  3  A0 00        	ldy #0				; fetch byte from table.
003B3D  3  B1 66        	lda (z80_hl),y
003B3F  3  91 68        	sta (z80_ix),y			; set up type.
003B41  3  A0 05        	ldy #PAM1ST
003B43  3  91 68        	sta (z80_ix),y 			; set up type.
003B45  3               
003B45  3  E6 66        	inc z80_l 			; move to next byte.
003B47  3  D0 02        	bne :+
003B49  3  E6 67        	inc z80_h
003B4B  3               :
003B4B  3  A0 00        	ldy #0 				; fetch byte from table.
003B4D  3  B1 66        	lda (z80_hl),y
003B4F  3  A0 06        	ldy #6
003B51  3  91 68        	sta (z80_ix),y			; set up image.
003B53  3               
003B53  3  E6 66        	inc z80_l 			; move to next byte.
003B55  3  D0 02        	bne :+
003B57  3  E6 67        	inc z80_h
003B59  3               :
003B59  3  A0 00        	ldy #0
003B5B  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003B5D  3  A0 08        	ldy #8
003B5F  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003B61  3               
003B61  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003B63  3  A0 03        	ldy #3
003B65  3  91 68        	sta (z80_ix),y
003B67  3               
003B67  3  E6 66        	inc z80_l 			; move to next byte.
003B69  3  D0 02        	bne :+
003B6B  3  E6 67        	inc z80_h
003B6D  3               :
003B6D  3  A0 00        	ldy #0 				; fetch byte from table.
003B6F  3  B1 66        	lda (z80_hl),y
003B71  3  A0 09        	ldy #9
003B73  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003B75  3               
003B75  3  E6 66        	inc z80_l 			; move to next byte.
003B77  3  D0 02        	bne :+
003B79  3  E6 67        	inc z80_h
003B7B  3               :
003B7B  3  A9 00        	lda #0				; zeroes in accumulator.
003B7D  3  A0 07        	ldy #7 				; reset frame number.
003B7F  3  91 68        	sta (z80_ix),y
003B81  3  A0 0A        	ldy #10 			; reset direction.
003B83  3  91 68        	sta (z80_ix),y
003B85  3  A0 0D        	ldy #13				; reset jump pointer low.
003B87  3  91 68        	sta (z80_ix),y
003B89  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003B8B  3  91 68        	sta (z80_ix),y
003B8D  3               
003B8D  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003B8F  3  A0 10        	ldy #16
003B91  3  91 68        	sta (z80_ix),y
003B93  3               evis0:
003B93  3  A5 69        	lda z80_i
003B95  3  48           	pha
003B96  3  A5 68        	lda z80_x
003B98  3  48           	pha
003B99  3  A5 67        	lda z80_h
003B9B  3  48           	pha
003B9C  3  A5 66        	lda z80_l
003B9E  3  48           	pha
003B9F  3               
003B9F  3  20 A4 3E     	jsr evnt09 			; perform event.
003BA2  3               
003BA2  3  68           	pla
003BA3  3  85 66        	sta z80_l
003BA5  3  68           	pla
003BA6  3  85 67        	sta z80_h
003BA8  3  68           	pla
003BA9  3  85 68        	sta z80_x
003BAB  3  68           	pla
003BAC  3  85 69        	sta z80_i
003BAE  3               
003BAE  3  18           	clc
003BAF  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
003BB1  3  69 11        	adc #TABSIZ		 	; next sprite.
003BB3  3  85 68        	sta z80_x
003BB5  3  90 02        	bcc :+
003BB7  3  E6 69        	inc z80_i
003BB9  3               :
003BB9  3  60           	rts
003BBA  3               
003BBA  3               
003BBA  3               ;-------------------------------------
003BBA  3               ; Clear the play area window.
003BBA  3               ;-------------------------------------
003BBA  3               
003BBA  3               clw:
003BBA  3  AD 1F 28     	lda wintop			; get coordinates of window.
003BBD  3  85 rr        	sta dispy			; put into dispx for calculation.
003BBF  3  AD 20 28     	lda winlft
003BC2  3  85 rr        	sta dispx
003BC4  3               
003BC4  3  AD 21 28     	lda winhgt			; height of window.
003BC7  3  85 rr        	sta rrow			; copy to b register.
003BC9  3               clw3:
003BC9  3  AD 22 28     	lda winwid 			; width of window.
003BCC  3  85 rr        	sta rcol
003BCE  3               clw2:
003BCE  3  20 0E 31     	jsr gprad 			; get print address.
003BD1  3  A9 00        	lda #0				; zero byte to write.
003BD3  3  A2 07        	ldx #7				; pixel height of each cell.
003BD5  3               clw1:
003BD5  3  BC 48 31     	ldy scrtab,x
003BD8  3  91 rr        	sta (scraddr),y 			; copy to screen.
003BDA  3  CA           	dex				; next screen row down.
003BDB  3  10 F8        	bpl clw1
003BDD  3               
003BDD  3  E6 rr        	inc dispx			; next column.
003BDF  3  C6 rr        	dec rcol			; one less to do.
003BE1  3  D0 EB        	bne clw2			; repeat for remaining columns.
003BE3  3               
003BE3  3  AD 20 28     	lda winlft			; get left edge.
003BE6  3  85 rr        	sta dispx 			; reset x.
003BE8  3  E6 rr        	inc dispy 			; next line down.
003BEA  3               
003BEA  3  C6 rr        	dec rrow
003BEC  3  D0 DB        	bne clw3			; repeat down the screen.
003BEE  3               
003BEE  3  AD 1F 28     	lda wintop			; get coordinates of window.
003BF1  3  85 rr        	sta chary			; put into display position.
003BF3  3  AD 20 28     	lda winlft
003BF6  3  85 rr        	sta charx
003BF8  3  60           	rts
003BF9  3               
003BF9  3               
003BF9  3               ;----------------------------------------------------------
003BF9  3               ; Effects code.
003BF9  3               ; Ticker routine is called 25 times per second.
003BF9  3               ;
003BF9  3               ; HL = txtscr = left text screen address
003BF9  3               ; DE = txtscr+txtwid-1 = right text screen address
003BF9  3               ; BC = txtpos = text scroller position
003BF9  3               ;
003BF9  3               ;----------------------------------------------------------
003BF9  3               
003BF9  3               .if sflag
003BF9  3               scrly:
003BF9  3               	rts
003BF9  3               	.word txtscr         	; get left screen address.
003BF9  3               	sta scr_l
003BF9  3               	lda txtscr+1
003BF9  3               	sta scr_l+1
003BF9  3               	sta scr_r+1
003BF9  3               
003BF9  3               	stx xtmp
003BF9  3               
003BF9  3               	clc         		; get right screen address.
003BF9  3               	lda scr_l
003BF9  3               	adc txtwid
003BF9  3               	sta scr_r
003BF9  3               	dec scr_r
003BF9  3               scrly1:
003BF9  3               	ldy txtwid		; set txtwide
003BF9  3               	dey
003BF9  3               	clc
003BF9  3               scrly0:
003BF9  3               	lda (scr_l),y		; scroll 1 line
003BF9  3               	rol a
003BF9  3               	sta (scr_l),y
003BF9  3               	dey
003BF9  3               	bpl scrly0
003BF9  3               
003BF9  3               	clc			; point to next line
003BF9  3               	lda scr_l
003BF9  3               	adc #32
003BF9  3               	sta scr_l
003BF9  3               	bcc scrly1		; repeat 8 times
003BF9  3               
003BF9  3               	lda txtpos 		; get text pointer.
003BF9  3               	sta scr_txt
003BF9  3               	lda txtpos+1
003BF9  3               	sta scr_txt+1
003BF9  3               
003BF9  3               	ldy #0
003BF9  3               	lda (scr_txt),y 		; find character we're displaying.
003BF9  3               	and #127 		; remove end marker bit if applicable.
003BF9  3               	cmp #13			; is it newline?
003BF9  3               	bne scrly5 		; no, it's okay.
003BF9  3               	lda #32			; convert to a space instead.
003BF9  3               scrly5:
003BF9  3               	sta fntaddr		; calculate char address
003BF9  3               	lda #0
003BF9  3               	sta fntaddr+1
003BF9  3               	asl fntaddr  		; multiply char by 8.
003BF9  3               	rol fntaddr+1
003BF9  3               	asl fntaddr
003BF9  3               	rol fntaddr+1
003BF9  3               	asl fntaddr
003BF9  3               	rol fntaddr+1
003BF9  3               	lda fntaddr
003BF9  3               	clc
003BF9  3               	adc #<(FONT-256)
003BF9  3               	sta scrly3+1		; that's the low byte.
003BF9  3               	lda fntaddr+1
003BF9  3               	adc #>(FONT-256)
003BF9  3               	sta scrly3+2		; add displacement.
003BF9  3               
003BF9  3               	ldx #0
003BF9  3               scrly3:
003BF9  3               	lda $3333,x		; get image of char line.
003BF9  3               	and txtbit
003BF9  3               	beq scrly2		; don't plot pixel
003BF9  3               	ldy scrline,x
003BF9  3               	lda (scr_r),y
003BF9  3               	clc
003BF9  3               	ora #1
003BF9  3               	sta (scr_r),y		; plot pixel
003BF9  3               scrly2:
003BF9  3               	inx			; next line of char.
003BF9  3               	cpx #8
003BF9  3               	bne scrly3
003BF9  3               
003BF9  3               	lsr txtbit		; bit of text to display.
003BF9  3               	bcs :+
003BF9  3               	rts
003BF9  3               :
003BF9  3               	ldy #0
003BF9  3               	lda (scr_txt),y 	; what was the character?
003BF9  3               	asl a	  		; end of message?
003BF9  3               	bcs scrly4
003BF9  3               	inc txtpos
003BF9  3               	bne :+
003BF9  3               	inc txtpos+1
003BF9  3               :
003BF9  3               	jmp scrly6 		; not yet - continue.
003BF9  3               scrly4:
003BF9  3               	lda txtini 		; start of scrolling message.
003BF9  3               	sta txtpos
003BF9  3               	lda txtini+1
003BF9  3               	sta txtpos+1
003BF9  3               scrly6:
003BF9  3               	lda #128
003BF9  3               	sta txtbit
003BF9  3               	ldx xtmp
003BF9  3               	rts
003BF9  3               
003BF9  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003BF9  3               
003BF9  3               ;-------------------------------------------------------
003BF9  3               ; Entry TICKER command
003BF9  3               ;
003BF9  3               ; Entry:
003BF9  3               ;  z80_b = message nr
003BF9  3               ;  z80_c = width
003BF9  3               ;-------------------------------------------------------
003BF9  3               
003BF9  3               iscrly:
003BF9  3               	jsr prescr 		; set up display position.
003BF9  3               
003BF9  3               	lda #<msgdat 		; text messages.
003BF9  3               	sta z80_l
003BF9  3               	lda #>msgdat
003BF9  3               	sta z80_h
003BF9  3               
003BF9  3               	lda z80_c 		; width.
003BF9  3               	sec
003BF9  3               	sbc #1			; subtract one.
003BF9  3               	cmp #32 		; is it between 1 and 32?
003BF9  3               	bcc :+
003BF9  3               	lda #$60
003BF9  3               	jmp iscrl0		; no, disable messages.
003BF9  3               :
003BF9  3               	ldx z80_b		; message number.
003BF9  3               	jsr getwrd 		; find message start.
003BF9  3               
003BF9  3               	lda z80_l		; set initial text position.
003BF9  3               	sta txtini
003BF9  3               	lda z80_h
003BF9  3               	sta txtini+1
003BF9  3               
003BF9  3               	lda #$ad		; code for lda adrr
003BF9  3               iscrl0:
003BF9  3               	sta scrly		; enable/disable scrolling routine.
003BF9  3               
003BF9  3               	jsr prescr 		; set up display position.
003BF9  3               	jsr gprad 		; get print address.
003BF9  3               
003BF9  3               	lda scraddr 		; set text screen address.
003BF9  3               	sta txtscr
003BF9  3               	lda scraddr+1
003BF9  3               	sta txtscr+1
003BF9  3               
003BF9  3               	lda z80_c		; width.
003BF9  3               	sta txtwid		; set width in working storage.
003BF9  3               
003BF9  3               	lda #128 		; start with leftmost bit.
003BF9  3               	sta txtbit
003BF9  3               
003BF9  3               	jmp scrly4
003BF9  3               .endif
003BF9  3               
003BF9  3               ;------------------------------------------------------------------
003BF9  3               ; Dig routine, conditional assembly depending on dflag
003BF9  3               ;------------------------------------------------------------------
003BF9  3               .if dflag
003BF9  3               dig:
003BF9  3               	and #3
003BF9  3               	beq digr		; dig right
003BF9  3               	cmp #1
003BF9  3               	beq digl		; dig left
003BF9  3               	cmp #2
003BF9  3               	beq digd		; dig down
003BF9  3               
003BF9  3               ; Dig up.
003BF9  3               
003BF9  3               digu:				; dig up
003BF9  3               	ldy #8
003BF9  3               	lda (z80_ix),y
003BF9  3               	sec
003BF9  3               	sbc #2
003BF9  3               	sta dispy		; set y
003BF9  3               
003BF9  3               	iny
003BF9  3               	lda (z80_ix),y
003BF9  3               	sta dispx		; set x
003BF9  3               	jmp digv
003BF9  3               
003BF9  3               ; Dig down.
003BF9  3               
003BF9  3               digd:
003BF9  3               	ldy #9
003BF9  3               	lda (z80_ix),y
003BF9  3               	sta dispx		; set y
003BF9  3               
003BF9  3               	dey
003BF9  3               	clc
003BF9  3               	lda (z80_ix),y
003BF9  3               	adc #16
003BF9  3               	sta dispy		; set y
003BF9  3               	jmp digv
003BF9  3               
003BF9  3               ; Dig left.
003BF9  3               
003BF9  3               digl:
003BF9  3               	ldy #8
003BF9  3               	lda (z80_ix),y
003BF9  3               	sta dispy		; set y
003BF9  3               
003BF9  3               	iny
003BF9  3               	lda (z80_ix),y
003BF9  3               	sec
003BF9  3               	sbc #2			; x=x-2
003BF9  3               	sta dispx		; set x
003BF9  3               	jmp digh
003BF9  3               
003BF9  3               ; Dig right.
003BF9  3               
003BF9  3               digr:
003BF9  3               	ldy #8
003BF9  3               	lda (z80_ix),y
003BF9  3               	sta dispy		; set y
003BF9  3               
003BF9  3               	iny
003BF9  3               	lda (z80_ix),y
003BF9  3               	clc
003BF9  3               	adc #16
003BF9  3               	sta dispx		; set x+16
003BF9  3               	jmp digh
003BF9  3               
003BF9  3               ; Vertical digging
003BF9  3               
003BF9  3               digv:
003BF9  3               	jsr tstbl		; check blocktype in MAP
003BF9  3               	jsr fdchk		; test if FODDER
003BF9  3               
003BF9  3               	clc
003BF9  3               	lda dispx		; look 1 cell down
003BF9  3               	adc #8
003BF9  3               	sta dispx
003BF9  3               	jsr tstbl		; check blocktype in MAP
003BF9  3               	jsr fdchk
003BF9  3               	lda dispx
003BF9  3               	and #7
003BF9  3               	bne :+
003BF9  3               	rts
003BF9  3               :
003BF9  3               	clc
003BF9  3               	lda dispx		; look 1 cell down
003BF9  3               	adc #8
003BF9  3               	sta dispx
003BF9  3               	jsr tstbl		; check blocktype in MAP
003BF9  3               	jmp fdchk
003BF9  3               
003BF9  3               ; Horizontal digging
003BF9  3               
003BF9  3               digh:
003BF9  3               	jsr tstbl		; check blocktype in MAP
003BF9  3               	jsr fdchk		; test if FODDER
003BF9  3               
003BF9  3               	clc
003BF9  3               	lda dispy		; look 1 cell down
003BF9  3               	adc #8
003BF9  3               	sta dispy
003BF9  3               	jsr tstbl		; check blocktype in MAP
003BF9  3               	jsr fdchk
003BF9  3               	lda dispy
003BF9  3               	and #7
003BF9  3               	bne :+
003BF9  3               	rts
003BF9  3               :
003BF9  3               	clc
003BF9  3               	lda dispy		; look 1 cell down
003BF9  3               	adc #8
003BF9  3               	sta dispy
003BF9  3               	jsr tstbl		; check blocktype in MAP
003BF9  3               	jmp fdchk
003BF9  3               
003BF9  3               digcnt:	.byte 0
003BF9  3               
003BF9  3               .endif
003BF9  3               
003BF9  3               ;------------------------------------------------------------------
003BF9  3               ; Sprite table
003BF9  3               ;------------------------------------------------------------------
003BF9  3               
003BF9  3               
003BF9  3               ; ix+0  = type.
003BF9  3               ; ix+1  = sprite image number.
003BF9  3               ; ix+2  = frame.
003BF9  3               ; ix+3  = y coord.
003BF9  3               ; ix+4  = x coord.
003BF9  3               
003BF9  3               ; ix+5  = new type.
003BF9  3               ; ix+6  = new image number.
003BF9  3               ; ix+7  = new frame.
003BF9  3               ; ix+8  = new y coord.
003BF9  3               ; ix+9  = new x coord.
003BF9  3               
003BF9  3               ; ix+10 = direction.
003BF9  3               ; ix+11 = parameter 1.
003BF9  3               ; ix+12 = parameter 2.
003BF9  3               ; ix+13 = jump pointer low.
003BF9  3               ; ix+14 = jump pointer high.
003BF9  3               ; ix+15 = data pointer low.
003BF9  3               ; ix+16 = data pointer high.
003BF9  3               
003BF9  3               ; block NUMSPR * TABSIZ,255
003BF9  3               
003BF9  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003BFD  3  FF FF FF FF  
003C01  3  FF FF FF FF  
003CC5  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003CC9  3  FF FF FF 00  
003CCD  3  C0 78 00 00  
003CD6  3  07           roomtb:	.byte 7                      ; start room map offset.
003CD7  3               
003CD7  3               ; User routine.  Put your own code in here to be called with USER instruction.
003CD7  3               ; if USER has an argument it will be passed in the accumulator.
003CD7  3               
003CD7  3               user:
003CD7  3               	.include "user.inc"
003CD7  4  60           	rts
003CD8  4               
003CD8  3               
003CD8  3               setfgcol:
003CD8  3  29 07        	and #7
003CDA  3  8D E7 3C     	sta fcolour
003CDD  3  60           	rts
003CDE  3               
003CDE  3               setbgcol:
003CDE  3  29 07        	and #7
003CE0  3  18           	clc
003CE1  3  69 10        	adc #16
003CE3  3  8D E8 3C     	sta bcolour
003CE6  3  60           	rts
003CE7  3               
003CE7  3  07           fcolour:	.byte t_white
003CE8  3  17           bcolour:	.byte g_white
003CE9  3               
003CE9  3               ; Everything below here will be generated by the editors.
003CE9  3               
003CE9  3  60                   rts
003CEA  3               WINDOWTOP = 1
003CEA  3               WINDOWLFT = 1
003CEA  3               WINDOWHGT = 22
003CEA  3               WINDOWWID = 32 ;
003CEA  3               MAPWID = 3
003CEA  3  FF FF FF             .byte 255,255,255
003CED  3               mapdat:
003CED  3  FF 00 FF             .byte 255,0,255
003CF0  3  FF FF FF             .byte 255,255,255
003CF3  3  01           stmap:  .byte 1
003CF4  3               
003CF4  3               evnt00:
003CF4  3  A9 00                lda #0
003CF6  3  85 rr                sta varm
003CF8  3  A5 rr                lda joyval	; KEY
003CFA  3  29 08                and #8
003CFC  3  F0 03                beq :+
003CFE  3  4C 16 3D             jmp a00078
003D01  3               :
003D01  3  A9 01                lda #1
003D03  3  85 rr                sta varm
003D05  3  20 30 32             jsr cangu	; CANGOUP
003D08  3  F0 03                beq :+
003D0A  3  4C 16 3D             jmp a00078
003D0D  3               :
003D0D  3  A0 08                ldy #8 		; SPRITEUP
003D0F  3  B1 68                lda (z80_ix),y
003D11  3  38                   sec
003D12  3  E9 01                sbc #1
003D14  3  91 68                sta (z80_ix),y
003D16  3  A5 rr        a00078: lda joyval	; KEY
003D18  3  29 04                and #4
003D1A  3  F0 03                beq :+
003D1C  3  4C 34 3D             jmp a00147
003D1F  3               :
003D1F  3  A9 01                lda #1
003D21  3  85 rr                sta varm
003D23  3  20 7D 32             jsr cangd	; CANGODOWN
003D26  3  F0 03                beq :+
003D28  3  4C 34 3D             jmp a00147
003D2B  3               :
003D2B  3  A0 08                ldy #8 		; SPRITEDOWN
003D2D  3  B1 68                lda (z80_ix),y
003D2F  3  18                   clc
003D30  3  69 01                adc #1
003D32  3  91 68                sta (z80_ix),y
003D34  3  A5 rr        a00147: lda joyval	; KEY
003D36  3  29 02                and #2
003D38  3  F0 03                beq :+
003D3A  3  4C 62 3D             jmp a00251
003D3D  3               :
003D3D  3  A9 00                lda #0
003D3F  3  A0 06                ldy #6
003D41  3  91 68                sta (z80_ix),y
003D43  3  A9 01                lda #1
003D45  3  85 rr                sta varm
003D47  3  20 CA 32             jsr cangl	; CANGOLEFT
003D4A  3  F0 03                beq :+
003D4C  3  4C 5E 3D             jmp a00243
003D4F  3               :
003D4F  3  A9 01                lda #1
003D51  3  A0 0A                ldy #10
003D53  3  91 68                sta (z80_ix),y
003D55  3  A0 09                ldy #9 		; SPRITELEFT
003D57  3  B1 68                lda (z80_ix),y
003D59  3  38                   sec
003D5A  3  E9 01                sbc #1
003D5C  3  91 68                sta (z80_ix),y
003D5E  3  A9 00        a00243: lda #0
003D60  3  85 rr                sta varl
003D62  3  A5 rr        a00251: lda joyval	; KEY
003D64  3  29 01                and #1
003D66  3  F0 03                beq :+
003D68  3  4C 90 3D             jmp a00356
003D6B  3               :
003D6B  3  A9 01                lda #1
003D6D  3  A0 06                ldy #6
003D6F  3  91 68                sta (z80_ix),y
003D71  3  A9 01                lda #1
003D73  3  85 rr                sta varm
003D75  3  20 DC 32             jsr cangr	; CANGORIGHT
003D78  3  F0 03                beq :+
003D7A  3  4C 8C 3D             jmp a00348
003D7D  3               :
003D7D  3  A9 00                lda #0
003D7F  3  A0 0A                ldy #10
003D81  3  91 68                sta (z80_ix),y
003D83  3  A0 09                ldy #9 		; SPRITERIGHT
003D85  3  B1 68                lda (z80_ix),y
003D87  3  18                   clc
003D88  3  69 01                adc #1
003D8A  3  91 68                sta (z80_ix),y
003D8C  3  A9 01        a00348: lda #1
003D8E  3  85 rr                sta varl
003D90  3  A9 00        a00356: lda #0
003D92  3  C5 rr                cmp varm
003D94  3  90 03                bcc *+5
003D96  3  4C 9E 3D             jmp a00384
003D99  3  A9 00                lda #0		; ANIMATE
003D9B  3  20 B7 37             jsr animsp
003D9E  3               a00384: ; SPRITEINK command
003D9E  3  A5 rr                lda joyval	; KEY
003DA0  3  29 10                and #16
003DA2  3  F0 03                beq :+
003DA4  3  4C BB 3D             jmp a00451
003DA7  3               :
003DA7  3  A9 00                lda #0
003DA9  3  C5 rr                cmp varb
003DAB  3  F0 03                beq *+5
003DAD  3  4C BB 3D             jmp a00451
003DB0  3  A0 0A                ldy #10
003DB2  3  B1 68                lda (z80_ix),y	; LASER
003DB4  3  20 E1 2A             jsr shoot
003DB7  3  A9 01                lda #1
003DB9  3  85 rr                sta varb
003DBB  3  A9 00        a00451: lda #0
003DBD  3  C5 rr                cmp varb
003DBF  3  90 03                bcc *+5
003DC1  3  4C D8 3D             jmp a00508
003DC4  3  A5 rr                lda varb
003DC6  3  18                   clc
003DC7  3  69 01                adc #1
003DC9  3  85 rr                sta varb
003DCB  3  A9 14                lda #20
003DCD  3  C5 rr                cmp varb
003DCF  3  F0 03                beq *+5
003DD1  3  4C D8 3D             jmp a00508
003DD4  3  A9 00                lda #0
003DD6  3  85 rr                sta varb
003DD8  3  60           a00508: rts
003DD9  3               evnt01:
003DD9  3  A9 00                lda #0
003DDB  3  A0 0A                ldy #10
003DDD  3  D1 68                cmp (z80_ix),y
003DDF  3  F0 03                beq *+5
003DE1  3  4C 01 3E             jmp b00088
003DE4  3  20 30 32             jsr cangu	; CANGOUP
003DE7  3  F0 03                beq :+
003DE9  3  4C F8 3D             jmp b00070
003DEC  3               :
003DEC  3  A0 08                ldy #8 		; SPRITEUP
003DEE  3  B1 68                lda (z80_ix),y
003DF0  3  38                   sec
003DF1  3  E9 01                sbc #1
003DF3  3  91 68                sta (z80_ix),y
003DF5  3  4C FE 3D             jmp b00083
003DF8  3  A9 01        b00070: lda #1
003DFA  3  A0 0A                ldy #10
003DFC  3  91 68                sta (z80_ix),y
003DFE  3  4C 1B 3E     b00083: jmp b00149
003E01  3  20 7D 32     b00088: jsr cangd	; CANGODOWN
003E04  3  F0 03                beq :+
003E06  3  4C 15 3E             jmp b00135
003E09  3               :
003E09  3  A0 08                ldy #8 		; SPRITEDOWN
003E0B  3  B1 68                lda (z80_ix),y
003E0D  3  18                   clc
003E0E  3  69 01                adc #1
003E10  3  91 68                sta (z80_ix),y
003E12  3  4C 1B 3E             jmp b00149
003E15  3  A9 00        b00135: lda #0
003E17  3  A0 0A                ldy #10
003E19  3  91 68                sta (z80_ix),y
003E1B  3  A9 00        b00149: lda #0
003E1D  3  A0 0B                ldy #11
003E1F  3  D1 68                cmp (z80_ix),y
003E21  3  F0 03                beq *+5
003E23  3  4C 43 3E             jmp b00236
003E26  3  20 CA 32             jsr cangl	; CANGOLEFT
003E29  3  F0 03                beq :+
003E2B  3  4C 3A 3E             jmp b00218
003E2E  3               :
003E2E  3  A0 09                ldy #9 		; SPRITELEFT
003E30  3  B1 68                lda (z80_ix),y
003E32  3  38                   sec
003E33  3  E9 01                sbc #1
003E35  3  91 68                sta (z80_ix),y
003E37  3  4C 40 3E             jmp b00231
003E3A  3  A9 01        b00218: lda #1
003E3C  3  A0 0B                ldy #11
003E3E  3  91 68                sta (z80_ix),y
003E40  3  4C 5D 3E     b00231: jmp b00297
003E43  3  20 DC 32     b00236: jsr cangr	; CANGORIGHT
003E46  3  F0 03                beq :+
003E48  3  4C 57 3E             jmp b00284
003E4B  3               :
003E4B  3  A0 09                ldy #9 		; SPRITERIGHT
003E4D  3  B1 68                lda (z80_ix),y
003E4F  3  18                   clc
003E50  3  69 01                adc #1
003E52  3  91 68                sta (z80_ix),y
003E54  3  4C 5D 3E             jmp b00297
003E57  3  A9 00        b00284: lda #0
003E59  3  A0 0B                ldy #11
003E5B  3  91 68                sta (z80_ix),y
003E5D  3  A9 00        b00297: lda #0		; ANIMATE
003E5F  3  20 B7 37             jsr animsp
003E62  3  A9 00                lda #0 	; COLLISION
003E64  3  85 63                sta z80_b
003E66  3  20 02 38             jsr sktyp
003E69  3  B0 03                bcs :+
003E6B  3  4C 72 3E             jmp b00344
003E6E  3               :
003E6E  3  A9 01                lda #1 		; KILL
003E70  3  85 rr                sta deadf
003E72  3  20 EB 2C     b00344: jsr lcol	; COLLISION
003E75  3  B0 03                bcs :+
003E77  3  4C 9C 3E             jmp b00437
003E7A  3               :
003E7A  3  A9 0A                lda #10	; EXPLODE
003E7C  3  20 40 2C             jsr explod
003E7F  3  A9 FF                lda #255	; REMOVE
003E81  3  A0 05                ldy #5
003E83  3  91 68                sta (z80_ix),y
003E85  3  A9 20                lda #32
003E87  3  A0 09                ldy #9
003E89  3  91 68                sta (z80_ix),y
003E8B  3  A9 3A                lda #58
003E8D  3  A0 08                ldy #8
003E8F  3  91 68                sta (z80_ix),y
003E91  3  A9 01                lda #1	; SPAWN
003E93  3  85 62                sta z80_c
003E95  3  A9 02                lda #2
003E97  3  85 63                sta z80_b
003E99  3  20 13 2F             jsr spawn
003E9C  3  60           b00437: rts
003E9D  3               evnt02:
003E9D  3  60                   rts
003E9E  3               evnt03:
003E9E  3  60                   rts
003E9F  3               evnt04:
003E9F  3  60                   rts
003EA0  3               evnt05:
003EA0  3  60                   rts
003EA1  3               evnt06:
003EA1  3  60                   rts
003EA2  3               evnt07:
003EA2  3  60                   rts
003EA3  3               evnt08:
003EA3  3  60                   rts
003EA4  3               evnt09:
003EA4  3  60                   rts
003EA5  3               evnt10:
003EA5  3  60                   rts
003EA6  3               evnt11:
003EA6  3  60                   rts
003EA7  3               evnt12:
003EA7  3  60                   rts
003EA8  3               evnt13:
003EA8  3  60                   rts
003EA9  3               evnt14:
003EA9  3  20 D5 48             jsr cls		; CLS
003EAC  3  A9 00                lda #0		; PRINTMODE
003EAE  3  85 rr                sta prtmod
003EB0  3  A9 00                lda #0
003EB2  3  85 rr                sta chary
003EB4  3  A9 0B                lda #11
003EB6  3  85 rr                sta charx
003EB8  3  A9 01                lda #1		; PRINT
003EBA  3  20 36 34             jsr dmsg
003EBD  3  A9 17                lda #23
003EBF  3  85 rr                sta chary
003EC1  3  A9 0A                lda #10
003EC3  3  85 rr                sta charx
003EC5  3  A9 02                lda #2		; PRINT
003EC7  3  20 36 34             jsr dmsg
003ECA  3  A9 00                lda #0
003ECC  3  85 rr                sta varl
003ECE  3  A9 00                lda #0
003ED0  3  85 rr                sta varb
003ED2  3  60                   rts
003ED3  3               evnt15:
003ED3  3  60                   rts
003ED4  3               evnt16:
003ED4  3  60                   rts
003ED5  3               evnt17:
003ED5  3  60                   rts
003ED6  3               evnt18:
003ED6  3  60                   rts
003ED7  3               evnt19:
003ED7  3  60                   rts
003ED8  3               evnt20:
003ED8  3  60                   rts
003ED9  3  60           ptcusr: rts
003EDA  3               msgdat:
003EDA  3  4C 41 53 45          .byte "LASER DEM",207
003EDE  3  52 20 44 45  
003EE2  3  4D CF        
003EE4  3  4C 41 53 45          .byte "LASER DEM",207
003EE8  3  52 20 44 45  
003EEC  3  4D CF        
003EEE  3  53 48 4F 4F          .byte "SHOOT SPRIT",197
003EF2  3  54 20 53 50  
003EF6  3  52 49 54 C5  
003EFA  3               nummsg:
003EFA  3  03                   .byte 3
003EFB  3               chgfx:
003EFB  3  00 01                .byte 0,1
003EFD  3  7F 01                .byte 127,1
003EFF  3  67 01                .byte 103,1
003F01  3               bprop:
003F01  3  00                   .byte 0
003F02  3  02                   .byte 2
003F03  3  04                   .byte 4
003F04  3               sprgfx:
003F04  3  28 7B 35 20          .byte 40,123,53,32,0,32,106,52,32,0,32,96,53,32,0,0,0,0,0,0
003F08  3  00 20 6A 34  
003F0C  3  20 00 20 60  
003F18  3  40 4C 14 00          .byte 64,76,20,0,0,0,75,17,0,0,0,2,21,0,0,0,2,1,0,0
003F1C  3  00 00 4B 11  
003F20  3  00 00 00 02  
003F2C  3  00 50 10 00          .byte 0,80,16,0,0,2,78,5,0,0,0,10,21,0,0,0,8,5,0,0
003F30  3  00 02 4E 05  
003F34  3  00 00 00 0A  
003F40  3  00 46 5F 00          .byte 0,70,95,0,0,0,0,93,0,0,0,0,90,0,0,0,0,0,0,0
003F44  3  00 00 00 5D  
003F48  3  00 00 00 00  
003F54  3  00 18 5C 00          .byte 0,24,92,0,0,0,2,87,0,0,0,0,75,0,0,0,0,3,0,0
003F58  3  00 00 02 57  
003F5C  3  00 00 00 00  
003F68  3  00 40 50 00          .byte 0,64,80,0,0,0,9,31,0,0,0,0,79,0,0,0,0,14,0,0
003F6C  3  00 00 09 1F  
003F70  3  00 00 00 00  
003F7C  3  28 7B 35 20          .byte 40,123,53,32,0,96,58,52,32,0,32,32,122,32,0,0,0,0,0,0
003F80  3  00 60 3A 34  
003F84  3  20 00 20 20  
003F90  3  40 4C 14 00          .byte 64,76,20,0,0,0,75,17,0,0,2,1,73,0,0,0,0,3,0,0
003F94  3  00 00 4B 11  
003F98  3  00 00 02 01  
003FA4  3  00 50 10 00          .byte 0,80,16,0,0,2,78,5,0,0,8,6,69,0,0,0,0,14,0,0
003FA8  3  00 02 4E 05  
003FAC  3  00 00 08 06  
003FB8  3  00 46 5F 00          .byte 0,70,95,0,0,0,80,77,0,0,0,0,64,21,0,0,0,0,0,0
003FBC  3  00 00 50 4D  
003FC0  3  00 00 00 00  
003FCC  3  00 18 5C 00          .byte 0,24,92,0,0,0,2,87,0,0,0,3,2,20,0,0,0,2,1,0
003FD0  3  00 00 02 57  
003FD4  3  00 00 00 03  
003FE0  3  00 40 50 00          .byte 0,64,80,0,0,0,9,31,0,0,0,12,11,16,0,0,0,8,5,0
003FE4  3  00 00 09 1F  
003FE8  3  00 00 00 0C  
003FF4  3  28 7B 35 20          .byte 40,123,53,32,0,96,122,52,32,0,46,32,107,32,0,0,0,0,0,0
003FF8  3  00 60 7A 34  
003FFC  3  20 00 2E 20  
004008  3  40 4C 14 00          .byte 64,76,20,0,0,0,75,17,0,0,90,3,77,0,0,0,0,2,0,0
00400C  3  00 00 4B 11  
004010  3  00 00 5A 03  
00401C  3  00 50 10 00          .byte 0,80,16,0,0,2,78,5,0,0,72,14,85,0,0,3,0,10,0,0
004020  3  00 02 4E 05  
004024  3  00 00 48 0E  
004030  3  00 46 5F 00          .byte 0,70,95,0,0,0,80,93,0,0,8,5,2,21,0,0,0,0,0,0
004034  3  00 00 50 5D  
004038  3  00 00 08 05  
004044  3  00 18 5C 00          .byte 0,24,92,0,0,0,2,87,0,0,64,23,11,20,0,0,0,0,1,0
004048  3  00 00 02 57  
00404C  3  00 00 40 17  
004058  3  00 40 50 00          .byte 0,64,80,0,0,0,9,31,0,0,0,28,79,16,0,2,1,0,5,0
00405C  3  00 00 09 1F  
004060  3  00 00 00 1C  
00406C  3  28 7B 35 20          .byte 40,123,53,32,0,32,122,52,32,0,96,53,33,32,0,0,0,0,0,0
004070  3  00 20 7A 34  
004074  3  20 00 60 35  
004080  3  40 4C 14 00          .byte 64,76,20,0,0,0,75,17,0,0,0,23,5,0,0,2,1,0,0,0
004084  3  00 00 4B 11  
004088  3  00 00 00 17  
004094  3  00 50 10 00          .byte 0,80,16,0,0,2,78,5,0,0,0,30,21,0,0,8,5,0,0,0
004098  3  00 02 4E 05  
00409C  3  00 00 00 1E  
0040A8  3  00 46 5F 00          .byte 0,70,95,0,0,0,64,93,0,0,0,90,2,0,0,0,0,0,0,0
0040AC  3  00 00 40 5D  
0040B0  3  00 00 00 5A  
0040BC  3  00 18 5C 00          .byte 0,24,92,0,0,0,2,87,0,0,0,74,11,0,0,0,3,0,0,0
0040C0  3  00 00 02 57  
0040C4  3  00 00 00 4A  
0040D0  3  00 40 50 00          .byte 0,64,80,0,0,0,9,31,0,0,0,72,79,0,0,0,14,0,0,0
0040D4  3  00 00 09 1F  
0040D8  3  00 00 00 48  
0040E4  3  20 6A 77 24          .byte 32,106,119,36,0,32,104,53,32,0,32,106,48,32,0,0,0,0,0,0
0040E8  3  00 20 68 35  
0040EC  3  20 00 20 6A  
0040F8  3  00 48 1C 10          .byte 0,72,28,16,0,0,66,23,0,0,0,74,1,0,0,0,2,1,0,0
0040FC  3  00 00 42 17  
004100  3  00 00 00 4A  
00410C  3  00 40 50 00          .byte 0,64,80,0,0,0,10,29,1,0,0,74,5,0,0,0,10,4,0,0
004110  3  00 00 0A 1D  
004114  3  01 00 00 4A  
004120  3  00 00 5F 19          .byte 0,0,95,25,0,0,0,94,0,0,0,0,85,0,0,0,0,0,0,0
004124  3  00 00 00 5E  
004128  3  00 00 00 00  
004134  3  00 00 5C 44          .byte 0,0,92,68,0,0,0,91,1,0,0,0,23,0,0,0,0,3,0,0
004138  3  00 00 00 5B  
00413C  3  01 00 00 00  
004148  3  00 00 50 10          .byte 0,0,80,16,0,0,0,79,6,0,0,0,31,0,0,0,0,13,0,0
00414C  3  00 00 00 4F  
004150  3  06 00 00 00  
00415C  3  20 6A 77 24          .byte 32,106,119,36,0,32,104,101,48,0,32,117,32,32,0,0,0,0,0,0
004160  3  00 20 68 65  
004164  3  30 00 20 75  
004170  3  00 48 1C 10          .byte 0,72,28,16,0,0,66,23,0,0,0,22,2,1,0,0,3,0,0,0
004174  3  00 00 42 17  
004178  3  00 00 00 16  
004184  3  00 40 50 00          .byte 0,64,80,0,0,0,10,29,1,0,0,26,9,4,0,0,13,0,0,0
004188  3  00 00 0A 1D  
00418C  3  01 00 00 1A  
004198  3  00 00 5F 19          .byte 0,0,95,25,0,0,0,30,80,0,0,74,16,0,0,0,0,0,0,0
00419C  3  00 00 00 1E  
0041A0  3  50 00 00 4A  
0041AC  3  00 00 5C 44          .byte 0,0,92,68,0,0,0,91,1,0,0,72,1,3,0,0,2,1,0,0
0041B0  3  00 00 00 5B  
0041B4  3  01 00 00 48  
0041C0  3  00 00 50 10          .byte 0,0,80,16,0,0,0,79,6,0,0,64,7,12,0,0,10,4,0,0
0041C4  3  00 00 00 4F  
0041C8  3  06 00 00 40  
0041D4  3  20 6A 77 24          .byte 32,106,119,36,0,32,104,117,48,0,32,55,32,35,0,0,0,0,0,0
0041D8  3  00 20 68 75  
0041DC  3  30 00 20 37  
0041E8  3  00 48 1C 10          .byte 0,72,28,16,0,0,66,23,0,0,0,30,3,13,0,0,1,0,0,0
0041EC  3  00 00 42 17  
0041F0  3  00 00 00 1E  
0041FC  3  00 40 50 00          .byte 0,64,80,0,0,0,10,29,1,0,0,90,13,84,0,0,5,0,0,0
004200  3  00 00 0A 1D  
004204  3  01 00 00 5A  
004210  3  00 00 5F 19          .byte 0,0,95,25,0,0,0,94,80,0,0,74,1,2,1,0,0,0,0,0
004214  3  00 00 00 5E  
004218  3  50 00 00 4A  
004224  3  00 00 5C 44          .byte 0,0,92,68,0,0,0,91,1,0,0,72,7,11,4,0,2,0,0,0
004228  3  00 00 00 5B  
00422C  3  01 00 00 48  
004238  3  00 00 50 10          .byte 0,0,80,16,0,0,0,79,6,0,0,64,31,76,16,0,10,0,0,0
00423C  3  00 00 00 4F  
004240  3  06 00 00 40  
00424C  3  20 6A 77 24          .byte 32,106,119,36,0,32,104,117,32,0,32,34,106,48,0,0,0,0,0,0
004250  3  00 20 68 75  
004254  3  20 00 20 22  
004260  3  00 48 1C 10          .byte 0,72,28,16,0,0,66,23,0,0,0,10,75,0,0,0,0,2,1,0
004264  3  00 00 42 17  
004268  3  00 00 00 0A  
004274  3  00 40 50 00          .byte 0,64,80,0,0,0,10,29,1,0,0,74,77,0,0,0,0,10,4,0
004278  3  00 00 0A 1D  
00427C  3  01 00 00 4A  
004288  3  00 00 5F 19          .byte 0,0,95,25,0,0,0,94,16,0,0,0,1,85,0,0,0,0,0,0
00428C  3  00 00 00 5E  
004290  3  10 00 00 00  
00429C  3  00 00 5C 44          .byte 0,0,92,68,0,0,0,91,1,0,0,0,7,21,0,0,0,0,3,0
0042A0  3  00 00 00 5B  
0042A4  3  01 00 00 00  
0042B0  3  00 00 50 10          .byte 0,0,80,16,0,0,0,79,6,0,0,0,31,20,0,0,0,0,13,0
0042B4  3  00 00 00 4F  
0042B8  3  06 00 00 00  
0042C4  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,41,115,115,38,0,0,0,0,0,0
0042C8  3  00 78 7B 77  
0042CC  3  74 00 29 73  
0042D8  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,71,15,15,27,0,0,3,3,0,0
0042DC  3  00 42 4E 1D  
0042E0  3  11 00 47 0F  
0042EC  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,30,94,93,77,0,2,12,12,1,0
0042F0  3  00 09 58 54  
0042F4  3  06 00 1E 5E  
004300  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,70,83,25,1,0,0,0,0,0
004304  3  04 40 56 5F  
004308  3  59 10 02 46  
004314  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,27,15,71,5,0,2,3,1,0
004318  3  10 00 19 5F  
00431C  3  46 00 0A 1B  
004328  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,77,95,30,20,0,9,12,6,0
00432C  3  00 02 44 5C  
004330  3  18 01 48 4D  
00433C  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,41,112,112,38,0,0,0,0,0,0
004340  3  00 78 7B 77  
004344  3  74 00 29 70  
004350  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,71,3,3,27,0,0,3,3,0,0
004354  3  00 42 4E 1D  
004358  3  11 00 47 03  
004364  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,30,14,13,77,0,2,12,12,1,0
004368  3  00 09 58 54  
00436C  3  06 00 1E 0E  
004378  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,68,80,24,1,0,0,0,0,0
00437C  3  04 40 56 5F  
004380  3  59 10 02 44  
00438C  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,19,3,67,5,0,2,3,1,0
004390  3  10 00 19 5F  
004394  3  46 00 0A 13  
0043A0  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,13,15,14,20,0,9,12,6,0
0043A4  3  00 02 44 5C  
0043A8  3  18 01 48 0D  
0043B4  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,43,127,127,39,0,0,0,0,0,0
0043B8  3  00 78 7B 77  
0043BC  3  74 00 2B 7F  
0043C8  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,79,95,95,31,0,0,3,3,0,0
0043CC  3  00 42 4E 1D  
0043D0  3  11 00 4F 5F  
0043DC  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,94,94,93,93,0,2,15,15,1,0
0043E0  3  00 09 58 54  
0043E4  3  06 00 5E 5E  
0043F0  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,79,95,31,1,0,0,0,0,0
0043F4  3  04 40 56 5F  
0043F8  3  59 10 02 4F  
004404  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,95,95,95,5,0,2,3,1,0
004408  3  10 00 19 5F  
00440C  3  46 00 0A 5F  
004418  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,93,95,94,20,0,11,15,7,0
00441C  3  00 02 44 5C  
004420  3  18 01 48 5D  
00442C  3               frmlst:
00442C  3  00 04                .byte 0,4
00442E  3  04 04                .byte 4,4
004430  3  08 03 0B 00          .byte 8,3,11,0
004434  3               scdat:
004434  3  C8 00                .word 200
004436  3  00 FF 01 1E          .byte 0,255,1,30,0,0,1,255,0,28,1,0,0,1,255,0,28,1,0,0,1,255,0,28,1,0,0,1,0,0,0,1,1
00443A  3  00 00 01 FF  
00443E  3  00 1C 01 00  
004457  3  FF 00 13 01          .byte 255,0,19,1,1,0,0,1,0,0,1,0,0,0,1,1,255,0,19,1,1,0,0,1,0,0,1,255,0,28,1,0,0
00445B  3  01 00 00 01  
00445F  3  00 00 01 00  
004478  3  01 FF 00 1C          .byte 1,255,0,28,1,0,0,1,255,0,24,2,2,2,0,1,0,0,1,255,0,24,2,2,2,0,1,0,0,1,255,0,24
00447C  3  01 00 00 01  
004480  3  FF 00 18 02  
004499  3  02 02 02 00          .byte 2,2,2,0,1,0,0,1,255,0,28,1,0,0,1,255,0,28,1,0,0,1,255,0,28,1,0,0,1,255,0,28,1
00449D  3  01 00 00 01  
0044A1  3  FF 00 1C 01  
0044BA  3  00 00 01 FF          .byte 0,0,1,255,0,28,1,0,0,1,0,0,0,1,1,255,0,18,1,1,0,0,0,1,0,0,1,0,0,0,1,1,255,0,18
0044BE  3  00 1C 01 00  
0044C2  3  00 01 00 00  
0044DD  3  01 01 00 00          .byte 1,1,0,0,0,1,0,0,1,255,0,28,1,0,0,1,255,0,28,1,0,0,1,255,0,28,1,0,0,255,1,30,0
0044E1  3  00 01 00 00  
0044E5  3  01 FF 00 1C  
0044FE  3               numsc:
0044FE  3  01                   .byte 1
0044FF  3               nmedat:
0044FF  3  00 01 30 10          .byte 0,1,48,16,1,2,58,32,255
004503  3  01 02 3A 20  
004507  3  FF           
004508  3               NUMOBJ = 1
004508  3               objdta:
004508  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
00450C  3  00 00 00 00  
004510  3  00 00 00 00  
00452E  3               font:
00452E  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004532  3  00 00 00 00  
004536  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
00453A  3  30 00 30 00  
00453E  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
004542  3  00 00 00 00  
004546  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
00454A  3  6C FE 6C 00  
00454E  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
004552  3  7E 1E 7E 18  
004556  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
00455A  3  30 6E CE 00  
00455E  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
004562  3  7E CC 7E 00  
004566  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
00456A  3  00 00 00 00  
00456E  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
004572  3  18 18 0C 00  
004576  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
00457A  3  30 30 60 00  
00457E  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
004582  3  7E 18 3C 00  
004586  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
00458A  3  7E 18 18 00  
00458E  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
004592  3  00 18 18 30  
004596  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
00459A  3  7E 00 00 00  
00459E  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0045A2  3  00 38 38 00  
0045A6  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0045AA  3  18 30 60 00  
0045AE  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0045B2  3  F6 E6 7C 00  
0045B6  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0045BA  3  18 18 7E 00  
0045BE  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0045C2  3  7C C0 FE 00  
0045C6  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0045CA  3  06 C6 7C 00  
0045CE  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
0045D2  3  D8 FE 18 00  
0045D6  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
0045DA  3  06 C6 7C 00  
0045DE  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
0045E2  3  C6 C6 7C 00  
0045E6  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
0045EA  3  18 30 30 00  
0045EE  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
0045F2  3  C6 C6 7C 00  
0045F6  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
0045FA  3  7E 06 7C 00  
0045FE  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
004602  3  00 00 30 00  
004606  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
00460A  3  00 30 30 60  
00460E  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
004612  3  30 18 0C 00  
004616  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
00461A  3  00 7E 00 00  
00461E  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
004622  3  0C 18 30 00  
004626  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
00462A  3  18 00 18 00  
00462E  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
004632  3  FE C0 7C 00  
004636  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
00463A  3  FE C6 C6 00  
00463E  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
004642  3  C6 C6 FC 00  
004646  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
00464A  3  C0 C6 7C 00  
00464E  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
004652  3  C6 CC F8 00  
004656  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
00465A  3  C0 C0 FE 00  
00465E  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
004662  3  C0 C0 C0 00  
004666  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
00466A  3  DE C6 7C 00  
00466E  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
004672  3  C6 C6 C6 00  
004676  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
00467A  3  18 18 7E 00  
00467E  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
004682  3  C6 C6 7C 00  
004686  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
00468A  3  D8 CC C6 00  
00468E  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
004692  3  C0 C0 FE 00  
004696  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
00469A  3  C6 C6 C6 00  
00469E  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0046A2  3  DE CE C6 00  
0046A6  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0046AA  3  C6 C6 7C 00  
0046AE  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0046B2  3  FC C0 C0 00  
0046B6  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0046BA  3  F6 DE 7C 00  
0046BE  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0046C2  3  FC CC C6 00  
0046C6  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0046CA  3  06 C6 7C 00  
0046CE  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
0046D2  3  30 30 30 00  
0046D6  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
0046DA  3  C6 C6 7C 00  
0046DE  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
0046E2  3  C6 6C 38 00  
0046E6  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
0046EA  3  C6 FE 6C 00  
0046EE  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
0046F2  3  38 6C C6 00  
0046F6  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
0046FA  3  30 30 30 00  
0046FE  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
004702  3  30 60 FE 00  
004706  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
00470A  3  18 18 1E 00  
00470E  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
004712  3  30 18 0C 00  
004716  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00471A  3  30 30 F0 00  
00471E  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
004722  3  30 30 30 00  
004726  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00472A  3  00 00 00 FF  
00472E  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
004732  3  60 60 FE 00  
004736  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
00473A  3  7C CC 7C 00  
00473E  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
004742  3  66 66 7C 00  
004746  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
00474A  3  60 60 3C 00  
00474E  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
004752  3  CC CC 7C 00  
004756  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
00475A  3  F8 C0 7C 00  
00475E  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
004762  3  30 30 30 00  
004766  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
00476A  3  CC 7C 0C 78  
00476E  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
004772  3  CC CC CC 00  
004776  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
00477A  3  30 30 78 00  
00477E  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
004782  3  0C 0C 6C 38  
004786  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
00478A  3  70 78 6C 00  
00478E  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
004792  3  30 30 1C 00  
004796  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
00479A  3  FC FC FC 00  
00479E  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0047A2  3  CC CC CC 00  
0047A6  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0047AA  3  CC CC 78 00  
0047AE  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0047B2  3  CC F8 C0 C0  
0047B6  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0047BA  3  CC 7C 0C 0E  
0047BE  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0047C2  3  60 60 60 00  
0047C6  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0047CA  3  78 0C F8 00  
0047CE  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0047D2  3  30 30 1C 00  
0047D6  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0047DA  3  CC CC 78 00  
0047DE  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0047E2  3  78 78 30 00  
0047E6  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
0047EA  3  FC FC 78 00  
0047EE  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
0047F2  3  30 78 CC 00  
0047F6  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
0047FA  3  CC 7C 0C 78  
0047FE  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
004802  3  30 60 FC 00  
004806  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
00480A  3  18 18 1E 00  
00480E  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
004812  3  18 18 18 00  
004816  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
00481A  3  30 30 F0 00  
00481E  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
004822  3  00 00 00 00  
004826  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
00482A  3  E3 BB C6 7C  
00482E  3               jtab:
00482E  3  63                   .byte 99
00482F  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
004833  3  20 4E 4D 31  
004837  3  32 33 34     
00483A  3               
00483A  2               
00483A  1               	.include "lib.inc"
00483A  2               ;----------------------------------------------------------------------
00483A  2               ; System 5 depending variables and routines
00483A  2               ;----------------------------------------------------------------------
00483A  2               
00483A  2               ; Flags
00483A  2               
00483A  2               	real		= 0		; 0=emulator, 1=real system5
00483A  2               
00483A  2               ; Global variables
00483A  2               
00483A  2               	t_red		= 1		; Text colour definition filters
00483A  2               	t_green		= 2
00483A  2               	t_yellow	= 3
00483A  2               	t_blue		= 4
00483A  2               	t_magenta	= 5
00483A  2               	t_cyan		= 6
00483A  2               	t_white		= 7
00483A  2               
00483A  2               	g_red		= 17		; Graphics colour definition filters
00483A  2               	g_green		= 18
00483A  2               	g_yellow	= 19
00483A  2               	g_blue		= 20
00483A  2               	g_magenta	= 21
00483A  2               	g_cyan		= 22
00483A  2               	g_white		= 23
00483A  2               
00483A  2               	ScrWidth	= 40
00483A  2               	ScrHeight	= 25
00483A  2               
00483A  2               .if real=1
00483A  2               	IRQtime		= 20000		; 50Hz at 1Mhz clock
00483A  2               .else
00483A  2               	IRQtime		= 40000		; 50Hz at 2Mhz clock
00483A  2               .endif
00483A  2               
00483A  2               ; System constants
00483A  2               
00483A  2               	IRQVEC		= $0204		; Interrupt vector
00483A  2               	ScreenAddr	= $0400		; Startaddress video RAM
00483A  2               
00483A  2               	MC6845_Reg	= $0800		; MC6845 CRT controller register ptr
00483A  2               	MC6845_Dat	= $0801		; MC6845 CRT controller data
00483A  2               
00483A  2               	VIA1		= $0e20
00483A  2               	PORT_A		= VIA1+$1	; Keyboard
00483A  2               	Timer1_Low  	= VIA1+$4	; Timer 1 low byte
00483A  2               	Timer1_High 	= VIA1+$5	; Timer 1 high byte
00483A  2               	Timer2_Low	= VIA1+$8	; Timer 2 low byte
00483A  2               	Timer2_High	= VIA1+$9	; Timer 2 high byte
00483A  2               	ACR		= VIA1+$b	; Auxiliary Control Register
00483A  2               	PCR		= VIA1+$c	; Peripheral Control Register
00483A  2               	IFR		= VIA1+$d 	; Interrupt Flag Register
00483A  2               	IER		= VIA1+$e	; Interupt Enable Register
00483A  2               
00483A  2               	MAP 		= $D800		; properties map buffer (4x256 bytes)
00483A  2               	SCADTB_lb 	= $DC00		; screen address table lo-byte (256 bytes)
00483A  2               	SCADTB_hb 	= $DD00		; screen address table hi-byte (256 bytes)
00483A  2               	SHRAPN 		= $DE00		; shrapnel table (55x6 bytes)
00483A  2               	V_SPR_PTR	= $DF4A		; Vertical spriteframe pointer (75 bytes)
00483A  2               
00483A  2               ; System calls
00483A  2               
00483A  2               	OS_CLI   = $FFF7
00483A  2               	OSBYTE   = $FFF4
00483A  2               	OSWORD   = $FFF1
00483A  2               	OSWRCH   = $FFEE
00483A  2               	OSWRCR   = $FFEC
00483A  2               	OSNEWL   = $FFE7
00483A  2               	OSASCI   = $FFE3
00483A  2               	OSRDCH   = $FFE0
00483A  2               	OSFILE   = $FFDD
00483A  2               	OSARGS   = $FFDA
00483A  2               	OSBGET   = $FFD7
00483A  2               	OSBPUT   = $FFD4
00483A  2               	OSGBPB   = $FFD1
00483A  2               	OSFIND   = $FFCE
00483A  2               
00483A  2               ; To be removed
00483A  2               
00483A  2               	SCRSYNC	= $fff4
00483A  2               
00483A  2               ;======================================================================
00483A  2               ; System depending routines
00483A  2               ;======================================================================
00483A  2               
00483A  2               ;----------------------------------------------------------------------
00483A  2               ; Init hardware
00483A  2               ;----------------------------------------------------------------------
00483A  2               
00483A  2               init:
00483A  2               
00483A  2               ; Set up screen address table.
00483A  2               
00483A  2               setsat:
00483A  2  A9 00        	lda #<ScreenAddr	; start of screen.
00483C  2  85 rr        	sta scraddr
00483E  2  A9 04        	lda #>ScreenAddr
004840  2  85 rr        	sta scraddr+1
004842  2               
004842  2  A2 00        	ldx #0
004844  2  A0 00        	ldy #0			; vertical lines on screen.
004846  2               setsa0:
004846  2  A5 rr        	lda scraddr
004848  2  99 00 DC     	sta SCADTB_lb,y		; write low byte.
00484B  2  A5 rr        	lda scraddr+1
00484D  2  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
00484F  2  90 02        	bcc :+
004851  2  09 F0        	ora #$F0		; plot sprites in rom if of screen
004853  2               :
004853  2  99 00 DD     	sta SCADTB_hb,y		; write high byte.
004856  2  E8           	inx
004857  2  E0 03        	cpx #3
004859  2  D0 05        	bne :+
00485B  2  20 AB 37     	jsr nline		; next line down.
00485E  2  A2 00        	ldx #0
004860  2               :
004860  2  C8           	iny			; next position in table.
004861  2  D0 E3        	bne setsa0
004863  2               
004863  2               ; Set up vertical sprite pointer table
004863  2               
004863  2  A0 00        	ldy #0
004865  2  A9 00        	lda #0
004867  2               vspriteloop:
004867  2  99 4A DF     	sta V_SPR_PTR,y
00486A  2  18           	clc
00486B  2  69 14        	adc #20
00486D  2  C9 3C        	cmp #60
00486F  2  D0 02        	bne :+
004871  2  A9 00        	lda #0
004873  2               :
004873  2  C8           	iny
004874  2  C0 4B        	cpy #75
004876  2  D0 EF        	bne vspriteloop
004878  2               
004878  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004878  2               ; Hack for MAME to use VDU40x25
004878  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004878  2               
004878  2               ; Init VDU40x25
004878  2               
004878  2  A0 0F        	ldy #$f
00487A  2               loops:
00487A  2  8C 00 08     	sty MC6845_Reg
00487D  2  B9 C5 48     	lda CRTTAB,y
004880  2  8D 01 08     	sta MC6845_Dat
004883  2  88           	dey
004884  2  10 F4        	bpl loops
004886  2               
004886  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004886  2               
004886  2               ; Disable cursor
004886  2               
004886  2  A9 0A        	lda #$0a
004888  2  8D 00 08     	sta MC6845_Reg
00488B  2  A9 20        	lda #$20
00488D  2  8D 01 08     	sta MC6845_Dat
004890  2               
004890  2  20 D5 48     	jsr cls
004893  2               
004893  2               ; Set new interrupt routine to sync at 25Hz
004893  2               
004893  2  A9 B3        	lda #<irq_handler	; New interrupt handler
004895  2  8D 04 02     	sta IRQVEC
004898  2  A9 48        	lda #>irq_handler
00489A  2  8D 05 02     	sta IRQVEC+1
00489D  2               
00489D  2  A9 40        	lda #<IRQtime		; Interrupt at 25Hz
00489F  2  8D 24 0E     	sta Timer1_Low
0048A2  2  A9 9C        	lda #>IRQtime
0048A4  2  8D 25 0E     	sta Timer1_High
0048A7  2  A9 40        	lda #%01000000
0048A9  2  8D 2B 0E     	sta ACR
0048AC  2  A9 C0        	lda #%11000000
0048AE  2  8D 2E 0E     	sta IER
0048B1  2  58           	cli
0048B2  2               
0048B2  2  60           	rts
0048B3  2               
0048B3  2               irq_handler:
0048B3  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
0048B6  2               
0048B6  2  8A           	txa			; Save x,y
0048B7  2  48           	pha
0048B8  2  98           	tya
0048B9  2  48           	pha
0048BA  2               
0048BA  2  EE C3 48     	inc frames_passed	; Nr of frames past
0048BD  2               
0048BD  2  68           	pla			; Restore x,y,a
0048BE  2  A8           	tay
0048BF  2  68           	pla
0048C0  2  AA           	tax
0048C1  2  68           	pla
0048C2  2  40           	rti
0048C3  2               
0048C3  2  00           frames_passed:	.byte 0
0048C4  2               
0048C4  2  60           	rts
0048C5  2               
0048C5  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
0048C9  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
0048CD  2  03 12 72 13  	.byte $03,$12,$72,$13
0048D1  2  04 00 07 FF  	.byte $04,$00,$07,$ff
0048D5  2               
0048D5  2               ;======================================================================
0048D5  2               ; Screen routines
0048D5  2               ;======================================================================
0048D5  2               
0048D5  2               ;----------------------------------------------------------------------
0048D5  2               ; Clear screen routine.
0048D5  2               ;
0048D5  2               ; Fill screenmem $0400-$07ff with ScrFillByte
0048D5  2               ; Set semigraphics at 1st column every line
0048D5  2               ;----------------------------------------------------------------------
0048D5  2               
0048D5  2               cls:
0048D5  2               
0048D5  2               ; Fill screen with 0
0048D5  2               
0048D5  2  A9 00        	lda #0
0048D7  2  A0 00        	ldy #0
0048D9  2               clsloop:
0048D9  2  99 00 04     	sta ScreenAddr,y
0048DC  2  99 00 05     	sta ScreenAddr+256,y
0048DF  2  99 00 06     	sta ScreenAddr+512,y
0048E2  2  99 00 07     	sta ScreenAddr+768,y
0048E5  2  C8           	iny
0048E6  2  D0 F1        	bne clsloop
0048E8  2               
0048E8  2               ; Init every row as graphics
0048E8  2               
0048E8  2  A0 00        	ldy #0
0048EA  2  A2 19        	ldx #ScrHeight
0048EC  2  AD 00 DC     	lda SCADTB_lb
0048EF  2  85 rr        	sta scraddr
0048F1  2  AD 00 DD     	lda SCADTB_hb
0048F4  2  85 rr        	sta scraddr+1
0048F6  2  AD E8 3C     	lda bcolour
0048F9  2               colloop:
0048F9  2  91 rr        	sta (scraddr),y
0048FB  2  48           	pha
0048FC  2  A5 rr        	lda scraddr
0048FE  2  18           	clc
0048FF  2  69 28        	adc #ScrWidth
004901  2  85 rr        	sta scraddr
004903  2  90 02        	bcc :+
004905  2  E6 rr        	inc scraddr+1
004907  2               :
004907  2  68           	pla
004908  2  CA           	dex
004909  2  D0 EE        	bne colloop
00490B  2               
00490B  2  60           	rts
00490C  2               
00490C  2               ;-------------------------------------------------------------
00490C  2               ; Colour background line
00490C  2               ;-------------------------------------------------------------
00490C  2               
00490C  2               linecol:
00490C  2  85 rr        	sta dispy
00490E  2  A9 00        	lda #0
004910  2  85 rr        	sta dispx
004912  2  20 0E 31     	jsr gprad
004915  2               
004915  2               ;	tay
004915  2               ;	lda SCADTB_lb,y
004915  2               ;	sta scraddr
004915  2               ;	lda SCADTB_hb,y
004915  2               ;	sta scraddr+1
004915  2  A0 00        	ldy #0
004917  2  AD E8 3C     	lda bcolour		; set background colour
00491A  2  91 rr        	sta (scraddr),y
00491C  2  C8           	iny
00491D  2  A9 1D        	lda #$1d		; set new background colour
00491F  2  91 rr        	sta (scraddr),y
004921  2  60           	rts
004922  2               
004922  2               
004922  2               ;-------------------------------------------------------------
004922  2               ; Screen synchronisation.
004922  2               ;
004922  2               ;  - read joystick/keyboard
004922  2               ;  - handle sound
004922  2               ;  - sync framerate at 25Hz
004922  2               ;  - handle shrapnel every even frame
004922  2               ;-------------------------------------------------------------
004922  2               
004922  2               vsync:
004922  2  48           	pha
004923  2  98           	tya
004924  2  48           	pha
004925  2  8A           	txa
004926  2  48           	pha
004927  2  20 10 34     	jsr joykey		; read joystick/keyboard.
00492A  2               
00492A  2               ; Sync framerate to 25 Hz
00492A  2               
00492A  2               vsync1:
00492A  2  AD C3 48     	lda frames_passed	; Wait 2 frames at 50Hz
00492D  2  C9 02        	cmp #2
00492F  2  90 F9        	bcc vsync1
004931  2               
004931  2  A9 00        	lda #0			; sync framerate 25 Hz
004933  2  8D C3 48     	sta frames_passed
004936  2               
004936  2               
004936  2  A5 rr        	lda clock
004938  2  29 01        	and #1
00493A  2  D0 03        	bne:+
00493C  2  20 A9 28     	jsr proshr		; handle shrapnel every even frame
00493F  2               :
00493F  2               ;	lda sndtyp
00493F  2               ;	beq sndskip
00493F  2               ;sndloop:
00493F  2               ;	lda SpeakerBit		; handle sound
00493F  2               ;	ldy sndtyp
00493F  2               ;sndwait:
00493F  2               ;	dey
00493F  2               ;	bne sndwait
00493F  2               ;	eor #4
00493F  2               ;	sta SpeakerBit
00493F  2               ;	dec sndtyp
00493F  2               ;	bne sndloop
00493F  2               ;sndskip:
00493F  2               
00493F  2  68           	pla
004940  2  AA           	tax
004941  2  68           	pla
004942  2  A8           	tay
004943  2  68           	pla
004944  2  60           	rts
004945  2               
004945  2  00           sndtyp:	.byte 0
004946  2               
004946  2               ;======================================================================
004946  2               ; Joystick routines
004946  2               ;======================================================================
004946  2               
004946  2               joyinit:
004946  2  60           	rts
004947  2               
004947  2               joy1:
004947  2  AD 2C 0E     	lda PCR			; Switch to joystick, CA2=0
00494A  2  29 F1        	and #%11110001
00494C  2  09 0C        	ora #%00001100
00494E  2               
00494E  2  AD 21 0E     	lda PORT_A		; Read FUDLR joystick
004951  2  29 7F        	and #$7f
004953  2  85 rr        	sta joyval
004955  2               
004955  2  AD 2C 0E     	lda PCR			; Switch to keyboard, CA2=1
004958  2  29 F1        	and #%11110001
00495A  2  09 0E        	ora #%00001110
00495C  2               
00495C  2  AD 34 48     	lda keys+5		; Check FIRE2
00495F  2  20 7A 49     	jsr ktest
004962  2  B0 06        	bcs :+
004964  2  A5 rr        	lda joyval
004966  2  29 DF        	and #%11011111
004968  2  85 rr        	sta joyval
00496A  2               :
00496A  2  AD 35 48     	lda keys+6		; Check FIRE3
00496D  2  20 7A 49     	jsr ktest
004970  2  B0 06        	bcs :+
004972  2  A5 rr        	lda joyval
004974  2  29 BF        	and #%10111111
004976  2  85 rr        	sta joyval
004978  2               :
004978  2  60           	rts
004979  2               
004979  2               joy2:
004979  2  60           	rts
00497A  2               
00497A  2               ;======================================================================
00497A  2               ; Keyboard routines
00497A  2               ;======================================================================
00497A  2               
00497A  2               ;----------------------------------------------------------------------
00497A  2               ; KTEST
00497A  2               ; Check if key in A is pressed
00497A  2               ; 	return clc if pressed
00497A  2               ; 	return sec if not pressed
00497A  2               ;----------------------------------------------------------------------
00497A  2               
00497A  2               ktest:
00497A  2  85 rr        	sta tmp
00497C  2  2C 21 0E     	bit PORT_A
00497F  2               ;.if real=1
00497F  2               ;	bpl not_pressed
00497F  2               ;.else
00497F  2  30 07        	bmi not_pressed	; BUG MAME, bit 7 not set ....
004981  2               ;.endif
004981  2  AD 21 0E     	lda PORT_A
004984  2  C5 rr        	cmp tmp
004986  2  F0 02        	beq pressed
004988  2               not_pressed:
004988  2  38           	sec
004989  2  60           	rts
00498A  2               pressed:
00498A  2  18           	clc
00498B  2  60           	rts
00498C  2               
00498C  2               ;======================================================================
00498C  2               ; PRSKEY
00498C  2               ; Wait for keypress and release
00498C  2               ;======================================================================
00498C  2               
00498C  2               prskey:
00498C  2  2C 21 0E     	bit PORT_A
00498F  2  10 FB        	bpl prskey
004991  2               relkey:
004991  2  2C 21 0E     	bit PORT_A
004994  2  30 FB        	bmi relkey
004996  2  60           	rts
004997  2               
004997  2               ;======================================================================
004997  2               ; Sprite routines
004997  2               ;======================================================================
004997  2               
004997  2               ;-----------------------------------------------------------------
004997  2               ; These are the sprite routines.
004997  2               ; sspria = single sprite, old (ix).
004997  2               ; ssprib = single sprite, new (ix+5).
004997  2               ; sspric = both sprites, old (ix) and new (ix+5).
004997  2               ;-----------------------------------------------------------------
004997  2               
004997  2               sspria:
004997  2  20 1D 37     	jsr gsprad		; get old sprite address.
00499A  2               sspri2:
00499A  2  A5 64        	lda z80_e
00499C  2  8D F3 49     	sta dline1+1		; Set spritedata address
00499F  2  A5 65        	lda z80_d
0049A1  2  8D F4 49     	sta dline1+2
0049A4  2               
0049A4  2  86 rr        	stx xtmp
0049A6  2  A2 00        	ldx #0			; vertical lines.
0049A8  2               sspri0:
0049A8  2  20 EB 49     	jsr dline		; draw a line.
0049AB  2               
0049AB  2               ;.if bflag
0049AB  2               ;	cpx #16			; Detect end of line 3
0049AB  2               ;.else
0049AB  2  E0 14        	cpx #20			; Detect end of line 2
0049AD  2               ;.endif
0049AD  2               
0049AD  2  D0 F9        	bne sspri0		; no, repeat
0049AF  2  A6 rr        	ldx xtmp
0049B1  2  60           	rts
0049B2  2               
0049B2  2               ;-----------------------------------------------------------------
0049B2  2               ; ssprib = single sprite, new (ix).
0049B2  2               ;-----------------------------------------------------------------
0049B2  2               
0049B2  2               ssprib:
0049B2  2  20 FE 36     	jsr gspran 		; get new sprite address.
0049B5  2               				; z80_de = new sprite address
0049B5  2  4C 9A 49     	jmp sspri2
0049B8  2               
0049B8  2               ;-----------------------------------------------------------------
0049B8  2               ; sspric = erase old sprite and plot new sprite line by line
0049B8  2               ;-----------------------------------------------------------------
0049B8  2               
0049B8  2               sspric:
0049B8  2  20 1D 37     	jsr gsprad 		; get old sprite address.
0049BB  2               				; z80_de = old sprite address
0049BB  2  A5 64        	lda z80_e
0049BD  2  8D 0C 4A     	sta ddline1+1		; Set spritedata address
0049C0  2  A5 65        	lda z80_d
0049C2  2  8D 0D 4A     	sta ddline1+2
0049C5  2  20 31 4A     	jsr exx  		; store addresses.
0049C8  2               
0049C8  2  20 FE 36     	jsr gspran 		; get new sprite addresses.
0049CB  2               				; z80_de = old sprite address
0049CB  2  A5 64        	lda z80_e
0049CD  2  8D F3 49     	sta dline1+1		; Set spritedata address
0049D0  2  A5 65        	lda z80_d
0049D2  2  8D F4 49     	sta dline1+2
0049D5  2               
0049D5  2  86 rr        	stx xtmp
0049D7  2  A2 00        	ldx #0			; vertical lines.
0049D9  2               lloop:
0049D9  2  20 EB 49     	jsr dline 		; draw a line.
0049DC  2  CA           	dex
0049DD  2  CA           	dex
0049DE  2  CA           	dex
0049DF  2  CA           	dex
0049E0  2  CA           	dex
0049E1  2  20 04 4A     	jsr ddline 		; delete a line.
0049E4  2               
0049E4  2               ;.if bflag
0049E4  2               ;	cpx #16			; Detect end of line 3
0049E4  2               ;.else
0049E4  2  E0 14        	cpx #20			; Detect end of line 2
0049E6  2               ;.endif
0049E6  2  D0 F1        	bne lloop		; no, repeat
0049E8  2  A6 rr        	ldx xtmp
0049EA  2  60           	rts
0049EB  2               
0049EB  2               ;-----------------------------------------------------------------
0049EB  2               ; Erase sprite line
0049EB  2               ;-----------------------------------------------------------------
0049EB  2               
0049EB  2               dline:
0049EB  2  BC 1D 4A     	ldy sprline,x		; point to screenleft
0049EE  2               
0049EE  2  A9 05        	lda #5
0049F0  2  85 rr        	sta rrow
0049F2  2               dline1:
0049F2  2  BD 08 45     	lda objdta,x		; fetch spriteleft byte
0049F5  2  F0 06        	beq :+
0049F7  2  51 rr        	eor (scraddr),y		; merge with screenleft
0049F9  2  09 20        	ora #$20		; Set bit 5
0049FB  2  91 rr        	sta (scraddr),y		; write screenleft
0049FD  2               :
0049FD  2  E8           	inx			; next spritebyte
0049FE  2  C8           	iny			; point to screenmiddle
0049FF  2               
0049FF  2  C6 rr        	dec rrow
004A01  2  D0 EF        	bne dline1
004A03  2  60           	rts
004A04  2               
004A04  2               ;-----------------------------------------------------------------
004A04  2               ; Draw sprite line
004A04  2               ;-----------------------------------------------------------------
004A04  2               
004A04  2               ddline:
004A04  2  BC 1D 4A     	ldy sprline,x		; point to screenleft
004A07  2               
004A07  2  A9 05        	lda #5
004A09  2  85 rr        	sta rrow
004A0B  2               ddline1:
004A0B  2  BD 08 45     	lda objdta,x		; fetch spriteleft byte
004A0E  2  F0 06        	beq :+
004A10  2  51 72        	eor (z80_hlp),y		; merge with screenleft
004A12  2  09 20        	ora #$20		; Set bit 5
004A14  2  91 72        	sta (z80_hlp),y		; write spritedata0
004A16  2               :
004A16  2  E8           	inx			; next spritebyte
004A17  2  C8           	iny			; point to screenmiddle
004A18  2               
004A18  2  C6 rr        	dec rrow
004A1A  2  D0 EF        	bne ddline1
004A1C  2  60           	rts
004A1D  2               
004A1D  2               ;-----------------------------------------------------------------
004A1D  2               ; Spritebyte location on screen
004A1D  2               ;-----------------------------------------------------------------
004A1D  2               
004A1D  2               sprline:
004A1D  2  00 01 02 03  	.byte $00,$01,$02,$03,$04
004A21  2  04           
004A22  2  28 29 2A 2B  	.byte $28,$29,$2a,$2b,$2c
004A26  2  2C           
004A27  2  50 51 52 53  	.byte $50,$51,$52,$53,$54
004A2B  2  54           
004A2C  2  78 79 7A 7B  	.byte $78,$79,$7a,$7b,$7c
004A30  2  7C           
004A31  2               
004A31  1               	.include "z80.asm"
004A31  2               ;------------------------------------------------------
004A31  2               ; z80.asm
004A31  2               ; spectrum stuff
004A31  2               ; adresses
004A31  2               
004A31  2               
004A31  2               ; Contains seperatly 1 bit set
004A31  2               
004A31  2               _bitmem0	= $f8
004A31  2               _bitmem1	= $f9
004A31  2               _bitmem2	= $fa
004A31  2               _bitmem3	= $fb
004A31  2               _bitmem4	= $fc
004A31  2               _bitmem5	= $fd
004A31  2               _bitmem6	= $fe
004A31  2               _bitmem7	= $ff
004A31  2               
004A31  2               ; constants
004A31  2               _bitvalue0	= $01
004A31  2               _bitvalue1	= $02
004A31  2               _bitvalue2	= $04
004A31  2               _bitvalue3	= $08
004A31  2               _bitvalue4	= $10
004A31  2               _bitvalue5	= $20
004A31  2               _bitvalue6	= $40
004A31  2               _bitvalue7	= $80
004A31  2               
004A31  2               _notbitvalue0	= $fe
004A31  2               _notbitvalue1	= $fd
004A31  2               _notbitvalue2	= $fb
004A31  2               _notbitvalue3	= $f7
004A31  2               _notbitvalue4	= $ef
004A31  2               _notbitvalue5	= $df
004A31  2               _notbitvalue6	= $bf
004A31  2               _notbitvalue7	= $7f
004A31  2               
004A31  2               
004A31  2               exx:
004A31  2  A5 62        		lda z80_c
004A33  2  A4 6E        		ldy z80_cp
004A35  2  84 62        		sty z80_c
004A37  2  85 6E        		sta z80_cp
004A39  2  A5 63        		lda z80_b
004A3B  2  A4 6F        		ldy z80_bp
004A3D  2  84 63        		sty z80_b
004A3F  2  85 6F        		sta z80_bp
004A41  2  A5 64        		lda z80_e
004A43  2  A4 70        		ldy z80_ep
004A45  2  84 64        		sty z80_e
004A47  2  85 70        		sta z80_ep
004A49  2  A5 65        		lda z80_d
004A4B  2  A4 71        		ldy z80_dp
004A4D  2  84 65        		sty z80_d
004A4F  2  85 71        		sta z80_dp
004A51  2  A5 rr        		lda scraddr
004A53  2  A4 72        		ldy z80_lp
004A55  2  84 rr        		sty scraddr
004A57  2  85 72        		sta z80_lp
004A59  2  A5 rr        		lda scraddr+1
004A5B  2  A4 73        		ldy z80_hp
004A5D  2  84 rr        		sty scraddr+1
004A5F  2  85 73        		sta z80_hp
004A61  2  60           		rts
004A62  2               
004A62  2               
004A62  1               eind_asm:
004A62  1               eop:					; End Of Program
004A62  1               
004A62  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
004A62  1               
