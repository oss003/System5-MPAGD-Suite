ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "testblock.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (16x24) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 BE 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  81 3C        msgptr:		.word msgdat	; messages
002811  3  B9 3C        blkptr:		.word chgfx	; block graphics.
002813  3  D9 3C        proptr:		.word bprop	; address of char properties.
002815  3  E9 3C        sptptr:		.word sprgfx	; sprite graphics
002817  3  19 3D        frmptr:		.word frmlst	; sprite frames.
002819  3  1D 3D        scrptr:		.word scdat	; address of screens.
00281B  3  CE 3D        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  D3 3D        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3  04 03 02 01  txtcol:		.byte green,yellow,blue,red
002823  3               
002823  3               ; Don't change the order of these four.
002823  3               ; Menu routine relies on winlft following wintop.
002823  3               
002823  3  02           wintop:		.byte WINDOWTOP	; top of window.
002824  3  01           winlft:		.byte WINDOWLFT	; left edge.
002825  3  15           winhgt:		.byte WINDOWHGT	; window height.
002826  3  1E           winwid:		.byte WINDOWWID	; window width.
002827  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002828  3               
002828  3               ; Variables start here.
002828  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002828  3               
002828  3  10           wntopx:		.byte (8 * WINDOWTOP)
002829  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00282A  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00282B  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00282C  3               
00282C  3               ; Assorted game routines which can go in contended memory.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for inventory called by the INV command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with objects seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected objectnr of INV menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               .if mflag
00282C  3               minve:
00282C  3               .if gflag
00282C  3               	lda #$ff		; blue frontcolour
00282C  3               	sta andeor
00282C  3               	lda #$aa		; yellow backcoloour
00282C  3               	sta andeor+1
00282C  3               .endif
00282C  3               	lda #<(invdis)		; routine address.
00282C  3               	sta mod0+1		; set up menu routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(invdis)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               	lda #<(fopt)		; find option from available objects.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fopt)
00282C  3               	sta mod1+1+1
00282C  3               	jmp dbox		; do menu routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for menu called by the MENU command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with menu items seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected line nr of MENU menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               mmenu:
00282C  3               	lda #<(always)		; routine address.
00282C  3               	sta mod0+1		; set up routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(always)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               
00282C  3               	lda #<(fstd)		; standard option selection.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fstd)
00282C  3               	sta mod1+2
00282C  3               
00282C  3               ; Drop through into box routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Work out size of box for message or menu.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               dbox:
00282C  3               	lda #<(msgdat)		; pointer to messages.
00282C  3               	sta z80_l
00282C  3               	lda #>(msgdat)
00282C  3               	sta z80_h
00282C  3               
00282C  3               	jsr getwrd		; get message number.
00282C  3               
00282C  3               	lda z80_h		; store pointer to message.
00282C  3               	sta TmpAddr
00282C  3               	lda z80_l
00282C  3               	sta TmpAddr+1
00282C  3               
00282C  3               	lda #1			; height.
00282C  3               	sta z80_d
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               	sta z80_e		; maximum width.
00282C  3               dbox5:
00282C  3               	lda #0			; this line"s width.
00282C  3               	sta z80_b
00282C  3               mod2:
00282C  3               	jsr always		; item in player"s possession?
00282C  3               	cmp #255
00282C  3               	bne dbox6		; not in inventory, skip this line.
00282C  3               	inc z80_d		; add to tally.
00282C  3               dbox6:
00282C  3               	ldy #0			; get character.
00282C  3               	lda (z80_hl),y
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a		; reached end of line?
00282C  3               	cmp #','
00282C  3               	beq dbox3		; yes.
00282C  3               	cmp #13
00282C  3               	beq dbox3		; yes.
00282C  3               	inc z80_b		; add to this line"s width.
00282C  3               	lda z80_a
00282C  3               	bmi dbox4		; end of message? yes, end count.
00282C  3               	jmp dbox6		; repeat until we find the end.
00282C  3               dbox3:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox5		; no, carry on looking.
00282C  3               	lda z80_b		; make this the widest so far.
00282C  3               	sta z80_e
00282C  3               	jmp dbox5		; keep looking.
00282C  3               dbox4:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox8		; no, carry on looking.
00282C  3               	lda z80_b		; final line is the longest so far.
00282C  3               	sta z80_e
00282C  3               dbox8:
00282C  3               	dec z80_d		; decrement items found.
00282C  3               	bne :+			; total was zero.
00282C  3               	lda #255
00282C  3               	sta varopt
00282C  3               	jmp dbox15
00282C  3               :
00282C  3               	lda z80_e		; longest line.
00282C  3               	bne :+			; was it zero?
00282C  3               	jmp dbox15		; total was zero.
00282C  3               :
00282C  3               	sta bwid		; set up size.
00282C  3               	lda z80_d
00282C  3               	sta blen
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; That's set up our box size.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               	lda winhgt		; window height in characters.
00282C  3               	sec
00282C  3               	sbc z80_d		; subtract height of box.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc wintop		; add top edge of window.
00282C  3               	sta btop		; set up box top.
00282C  3               
00282C  3               	lda winwid		; window width in characters.
00282C  3               	sec
00282C  3               	sbc z80_e		; subtract box width.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc winlft		; add left edge of window.
00282C  3               	sta blft		; box left.
00282C  3               
00282C  3               	lda #<(FONT-256)		; font.
00282C  3               	sta grbase		; set up for text display.
00282C  3               	lda #>(FONT-256)
00282C  3               	sta grbase+1
00282C  3               
00282C  3               	lda TmpAddr+1		; restore message pointer.
00282C  3               	sta z80_l
00282C  3               	lda TmpAddr
00282C  3               	sta z80_h
00282C  3               
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set display coordinate.
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               dbox2:
00282C  3               	lda combyt		; get object number.
00282C  3               	sta z80_a
00282C  3               mod0:
00282C  3               	jsr always		; check inventory for display.
00282C  3               	cmp #255
00282C  3               	beq :+
00282C  3               	jmp dbox13		; not in inventory, skip this line.
00282C  3               :
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set left display position.
00282C  3               	lda bwid		; box width.
00282C  3               	sta z80_b		; store width.
00282C  3               dbox0:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	cmp #','		; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               	cmp #13			; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               
00282C  3               	cmp #141			; end of line?
00282C  3               	bne :+
00282C  3               	dec bwid
00282C  3               	jmp dbox7		; yes, next one.
00282C  3               :
00282C  3               	dec z80_b		; one less to display.
00282C  3               	and #127		; remove terminator.
00282C  3               
00282C  3               	jsr pchr		; display on screen.
00282C  3               
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a
00282C  3               	cmp #128		; end of message?
00282C  3               	bmi :+
00282C  3               	jmp dbox7		; yes, job done.
00282C  3               :
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	beq :+			; are any left?
00282C  3               	jmp dbox0		; yes, continue.
00282C  3               :
00282C  3               ;---------------------------------------------------
00282C  3               ; Reached limit of characters per line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dbox9:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #13			; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #128		; end of message?
00282C  3               	bcs :+
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox9
00282C  3               
00282C  3               ;---------------------------------------------------
00282C  3               ; Fill box to end of line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dboxf:
00282C  3               	lda #32			; space character.
00282C  3               	jsr pchr		; display character.
00282C  3               	dec z80_b
00282C  3               	beq :+
00282C  3               	jmp dboxf		; repeat for remaining chars on line.
00282C  3               :
00282C  3               	rts
00282C  3               dbox1:
00282C  3               	inc z80_l		; skip character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	jsr dboxf		; fill box out to right side.
00282C  3               dbox10:
00282C  3               	inc dispy		; y coordinate down a line next position.
00282C  3               	jmp dbox2		; next line.
00282C  3               dbox7:
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	bne :+			; are any left?
00282C  3               	jmp dbox11		; no, nothing to draw.
00282C  3               :
00282C  3               	jsr dboxf		; fill message to line.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Drawn the box menu, now select option.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox11:
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set bar position.
00282C  3               dbox14:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	bne dbox14		; yes, debounce it.
00282C  3               	jsr dbar		; draw bar.
00282C  3               dbox12:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	beq dbox12		; no, nothing.
00282C  3               	and #16			; fire button pressed?
00282C  3               	bne :+
00282C  3               mod1:
00282C  3               	jmp fstd		; yes, job done.
00282C  3               :
00282C  3               	jsr dbar		; delete bar.
00282C  3               
00282C  3               	lda joyval		; joystick reading.
00282C  3               	and #8			; going up?
00282C  3               	beq dboxu		; yes, go up.
00282C  3               
00282C  3               	ldx dispy		; vertical position of bar.
00282C  3               	inx			; look down.
00282C  3               	txa
00282C  3               	sec
00282C  3               	sbc btop		; find distance from top.
00282C  3               	cmp blen		; top of box.
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	inc dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               dboxu:
00282C  3               	lda dispy		; vertical position of bar.
00282C  3               	cmp btop		; are we at the top?
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	dec dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               fstd:
00282C  3               	lda dispy		; bar position.
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta varopt		; store the option.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Option not available.  Skip this line.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox13:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               	cmp #13			; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               
00282C  3               	bpl :+			; end of message?
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox13
00282C  3               dbox15:
00282C  3               	lda TmpAddr		; pop message pointer from the stack.
00282C  3               	sta z80_h
00282C  3               	lda TmpAddr+1
00282C  3               	sta z80_l
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Invert bar
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbar:
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set display coordinate.
00282C  3               	jsr gprad		; get printing address.
00282C  3               
00282C  3               	lda bwid		; box width.
00282C  3               	sta z80_c		; loop counter in c.
00282C  3               	lda z80_h
00282C  3               	sta z80_d		; store screen address high byte.
00282C  3               dbar1:
00282C  3               	ldx #7			; pixel height in b.
00282C  3               dbar0:
00282C  3               	ldy scrtab,x
00282C  3               	lda (scraddr),y		; get screen byte.
00282C  3               	eor #255		; reverse all bits.
00282C  3               	sta (scraddr),y		; write back to screen.
00282C  3               	dex			; next line down.
00282C  3               	bpl dbar0		; draw rest of character.
00282C  3               
00282C  3               	inc scraddr		; one char right.
00282C  3               	dec z80_c		; decrement character counter.
00282C  3               	bne dbar1		; repeat for whole line.
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Point to object
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  combyt
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  A = object number, A=255 if already in possession
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               invdis:
00282C  3               	lda z80_l		; store message text pointer.
00282C  3               	pha
00282C  3               	lda z80_h
00282C  3               	pha
00282C  3               	lda combyt		; object number.
00282C  3               	inc combyt		; ready for next one.
00282C  3               	jsr gotob		; check if we have object.
00282C  3               	tay
00282C  3               	pla
00282C  3               	sta z80_h
00282C  3               	pla
00282C  3               	sta z80_l
00282C  3               	tya
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Find option selected.
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  -
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected object
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               fopt:
00282C  3               	lda dispy
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta tmp+2		; option selected in b register.
00282C  3               	inc tmp+2
00282C  3               
00282C  3               	lda #0			; set to first item.
00282C  3               	sta combyt		; object number.
00282C  3               fopt0:
00282C  3               	jsr fobj		; find next object in inventory.
00282C  3               	dec tmp+2
00282C  3               	bne fopt0		; repeat for relevant steps down the list.
00282C  3               
00282C  3               	lda combyt		; get option.
00282C  3               	sta varopt		; store the option.
00282C  3               	dec varopt		; one less, due to where we increment combyt.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               fobj:
00282C  3               	ldy combyt		; object number.
00282C  3               	inc combyt		; ready for next item.
00282C  3               	tya
00282C  3               	jsr gotob		; do we have this item?
00282C  3               	cmp #255
00282C  3               	bne :+
00282C  3               	rts
00282C  3               :
00282C  3               	jmp fobj		; yes, it's on the list.
00282C  3               
00282C  3               ;bwid:	.byte 0              ; box/menu width.
00282C  3               ;blen:	.byte 0              ; box/menu height.
00282C  3               ;btop:	.byte 0              ; box coordinates.
00282C  3               ;blft:	.byte 0
00282C  3               .endif
00282C  3               
00282C  3               ;----------------------------------------------------
00282C  3               ; Delay routine 1/50 sec
00282C  3               ;
00282C  3               ; Wait 1/60 sec = 16666 usec
00282C  3               ; Wait 208 x 16 =  3328 usec
00282C  3               ;                 19994 usec
00282C  3               ; rts           =     6 usec
00282C  3               ; Total         = 20000 usec
00282C  3               ;----------------------------------------------------
00282C  3               
00282C  3               delay:
00282C  3  85 rr        	sta xtmp
00282E  3               del_loop:
00282E  3  20 F4 FF     	jsr SCRSYNC		; wait for flyback
002831  3               
002831  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002833  3               delay1:
002833  3  61 80        	adc ($80,x)		;	 6 usec
002835  3  61 80        	adc ($80,x)		;	 6 usec
002837  3  88           	dey			;	 2 usec
002838  3  D0 F9        	bne delay1		;	 2 usec
00283A  3  EA           	nop			; 2 usec
00283B  3  EA           	nop			; 2 usec
00283C  3               				; tot: 20000 usec
00283C  3  C6 rr        	dec xtmp
00283E  3  D0 EE        	bne del_loop
002840  3  60           	rts
002841  3               
002841  3               ;----------------------------------------------------
002841  3               ; Clear sprite table.
002841  3               ;
002841  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002841  3               ;----------------------------------------------------
002841  3               
002841  3               xspr:
002841  3  A9 FF        	lda #255		; clear byte.
002843  3  A2 00        	ldx #0			; length of table.
002845  3               xspr0:
002845  3  9D 36 3A     	sta sprtab,x		; sprite table.
002848  3  E8           	inx			; move to next byte.
002849  3  E0 CC        	cpx #SPRBUF
00284B  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284D  3  60           	rts
00284E  3               
00284E  3               ;-------------------------------------------------------------
00284E  3               ; Initialise all objects.
00284E  3               ;
00284E  3               ; Reset current room,y,x to start room,y,x for all objects
00284E  3               ;-------------------------------------------------------------
00284E  3               
00284E  3               .if oflag
00284E  3               iniob:
00284E  3               	lda #<objdta 		; objects table.
00284E  3               	sta z80_x
00284E  3               	lda #>objdta
00284E  3               	sta z80_i
00284E  3               
00284E  3               	ldx numob 		; number of objects in the game.
00284E  3               iniob0:
00284E  3               	ldy #35
00284E  3               	lda (z80_ix),y 		; start screen.
00284E  3               	ldy #32
00284E  3               	sta (z80_ix),y 		; set start screen.
00284E  3               
00284E  3               	ldy #36
00284E  3               	lda (z80_ix),y 		; find start y.
00284E  3               	ldy #33
00284E  3               	sta (z80_ix),y 		; set start y.
00284E  3               
00284E  3               	ldy #37
00284E  3               	lda (z80_ix),y 		; get initial x.
00284E  3               	ldy #34
00284E  3               	sta (z80_ix),y 		; set x coord.
00284E  3               
00284E  3               	clc 			; point to next object.
00284E  3               	lda z80_x
00284E  3               	adc #38			; distance between objects.
00284E  3               	sta z80_x
00284E  3               	bcc :+
00284E  3               	inc z80_i
00284E  3               :
00284E  3               	dex 			; repeat.
00284E  3               	bne iniob0
00284E  3               
00284E  3               	rts
00284E  3               .endif
00284E  3               
00284E  3               ;-------------------------------------------------------------
00284E  3               ; Screen synchronisation.
00284E  3               ;
00284E  3               ;  - read joystick/keyboard
00284E  3               ;  - handle sound
00284E  3               ;  - sync framerate with clock
00284E  3               ;  - handle shrapnel every even frame
00284E  3               ;-------------------------------------------------------------
00284E  3               
00284E  3               vsync:
00284E  3  48           	pha
00284F  3  98           	tya
002850  3  48           	pha
002851  3  8A           	txa
002852  3  48           	pha
002853  3  20 0D 31     	jsr joykey		; read joystick/keyboard.
002856  3               vsync1:
002856  3               ;	lda Timer2_High		; sync framerate with clock
002856  3               ;	cmp #$ff
002856  3               ;	bne vsync1
002856  3               ;	lda #>50000
002856  3               ;	sta Timer2_High
002856  3               ;	lda #<50000
002856  3               ;	sta Timer2_Low
002856  3               
002856  3  A5 rr        	lda clock
002858  3  29 01        	and #1
00285A  3  D0 03        	bne:+
00285C  3  20 BD 28     	jsr proshr		; handle shrapnel every even frame
00285F  3               :
00285F  3  AD 7D 28     	lda sndtyp
002862  3  F0 13        	beq sndskip
002864  3               sndloop:
002864  3  AD 02 B0     	lda SpeakerBit		; handle sound
002867  3  AC 7D 28     	ldy sndtyp
00286A  3               sndwait:
00286A  3  88           	dey
00286B  3  D0 FD        	bne sndwait
00286D  3  49 04        	eor #4
00286F  3  8D 02 B0     	sta SpeakerBit
002872  3  CE 7D 28     	dec sndtyp
002875  3  D0 ED        	bne sndloop
002877  3               sndskip:
002877  3  68           	pla
002878  3  AA           	tax
002879  3  68           	pla
00287A  3  A8           	tay
00287B  3  68           	pla
00287C  3  60           	rts
00287D  3               
00287D  3  00           sndtyp:	.byte 0
00287E  3               
00287E  3               ;-----------------------------------------------
00287E  3               ; Redraw the screen.
00287E  3               ;
00287E  3               ; Remove old copy of all sprites for redraw.
00287E  3               ;-----------------------------------------------
00287E  3               
00287E  3               redraw:
00287E  3               .if gflag
00287E  3               	lda #$ff
00287E  3               	sta andeor
00287E  3               	lda #$00
00287E  3               	sta andeor+1
00287E  3               .endif
00287E  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002880  3  48           	pha
002881  3  A5 68        	lda z80_x
002883  3  48           	pha
002884  3               
002884  3  20 91 2D     	jsr droom		; show screen layout.
002887  3               .if oflag
002887  3               	jsr shwob		; draw objects.
002887  3               .endif
002887  3               numsp0:
002887  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002889  3  85 rr        	sta tmp
00288B  3               
00288B  3  A9 36        	lda #<sprtab		; sprite table.
00288D  3  85 68        	sta z80_x
00288F  3  A9 3A        	lda #>sprtab
002891  3  85 69        	sta z80_i
002893  3               redrw0:
002893  3  A0 00        	ldy #0
002895  3  B1 68        	lda (z80_ix),y		; old sprite type.
002897  3  C9 FF        	cmp #255		; is it enabled?
002899  3  F0 0B        	beq redrw1 		; no, find next one.
00289B  3               
00289B  3  A0 03        	ldy #3
00289D  3  B1 68        	lda (z80_ix),y 		; sprite y.
00289F  3  C9 B1        	cmp #177		; beyond maximum?
0028A1  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0028A3  3               
0028A3  3  20 C5 34     	jsr sspria		; show single sprite.
0028A6  3               redrw1:
0028A6  3  18           	clc			; next sprite.
0028A7  3  A5 68        	lda z80_x
0028A9  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0028AB  3  85 68        	sta z80_x
0028AD  3  90 02        	bcc :+
0028AF  3  E6 69        	inc z80_i
0028B1  3               :
0028B1  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0028B3  3  D0 DE        	bne redrw0
0028B5  3               rpblc1:
0028B5  3               ;	jsr dshrp		; redraw shrapnel.
0028B5  3               
0028B5  3               .if aflag
0028B5  3               	jsr rbloc		; draw blocks for this screen
0028B5  3               .endif
0028B5  3  68           	pla			; retrieve sprite pointer.
0028B6  3  85 68        	sta z80_x
0028B8  3  68           	pla
0028B9  3  85 69        	sta z80_i
0028BB  3               
0028BB  3  60           	rts
0028BC  3               
0028BC  3               ;----------------------------------------------------------------------
0028BC  3               ; Atomic palette is static
0028BC  3               ;----------------------------------------------------------------------
0028BC  3               
0028BC  3               setpal:
0028BC  3  60           	rts
0028BD  3               
0028BD  3               ;----------------------------------------------------------------------
0028BD  3               ; FODDER check
0028BD  3               ;----------------------------------------------------------------------
0028BD  3               
0028BD  3               .if pflag .or dflag
0028BD  3               fdchk:
0028BD  3               	cmp #FODDER 		; is it fodder?
0028BD  3               	beq :+
0028BD  3               	rts 			; no.
0028BD  3               :
0028BD  3               	lda #0			; wipe fodder in MAP
0028BD  3               	ldy #0
0028BD  3               	sta (bufaddr),y 	; rewrite block type.
0028BD  3               
0028BD  3               	lda dispx		; x=x/8
0028BD  3               	pha
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	sta dispx
0028BD  3               
0028BD  3               	lda dispy		; y=y/8
0028BD  3               	pha
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	sta dispy
0028BD  3               
0028BD  3               	lda #0 			; block to write.
0028BD  3               	jsr pattr 		; write block.
0028BD  3               
0028BD  3               	pla
0028BD  3               	sta dispy
0028BD  3               	pla
0028BD  3               	sta dispx
0028BD  3               	rts
0028BD  3               .endif
0028BD  3               
0028BD  3               ;----------------------------------------------------
0028BD  3               ; Scrolly text and puzzle variables.
0028BD  3               ;----------------------------------------------------
0028BD  3               
0028BD  3               .if sflag
0028BD  3               txtbit:	.byte 128		; bit to write.
0028BD  3               txtwid:	.byte 16		; width of ticker message.
0028BD  3               txtpos:	.word msgdat
0028BD  3               txtini:	.word msgdat
0028BD  3               txtscr:	.word ScreenAddr
0028BD  3               .endif
0028BD  3               
0028BD  3               ;----------------------------------------------------
0028BD  3               ; Specialist routines.
0028BD  3               ; Process shrapnel.
0028BD  3               ;----------------------------------------------------
0028BD  3               proshr:
0028BD  3               .if pflag
0028BD  3               	lda #<SHRAPN		; table.
0028BD  3               	sta z80_x
0028BD  3               	lda #>SHRAPN
0028BD  3               	sta z80_i
0028BD  3               
0028BD  3               	lda #NUMSHR		; shrapnel pieces to process.
0028BD  3               	sta shrctr
0028BD  3               prosh0:
0028BD  3               	ldy #0
0028BD  3               	lda (z80_ix),y		; on/off marker.
0028BD  3               	asl a
0028BD  3               proshx:
0028BD  3               	bcs :+
0028BD  3               	jsr prosh1 		; on, so process it.
0028BD  3               :
0028BD  3               	clc
0028BD  3               	lda z80_x
0028BD  3               	adc #SHRSIZ
0028BD  3               	sta z80_x
0028BD  3               	bcc :+
0028BD  3               	inc z80_i
0028BD  3               :
0028BD  3               	dec shrctr		; round again.
0028BD  3               	bne prosh0
0028BD  3               .endif
0028BD  3               .if sflag
0028BD  3               	jsr scrly
0028BD  3               .endif
0028BD  3  60           	rts
0028BE  3               
0028BE  3               .if pflag
0028BE  3               ;shrctr:	.byte 0
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Proces shrapnel piece
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               prosh1:
0028BE  3               	jsr plot 		; delete the pixel.
0028BE  3               
0028BE  3               	lda #<shrptr		; shrapnel routine pointers.
0028BE  3               	sta z80_l
0028BE  3               	lda #>shrptr
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y		; restore shrapnel type.
0028BE  3               	jsr prosh2 		; run the routine.
0028BE  3               	jsr chkxy		; check x and y are good before we redisplay.
0028BE  3               
0028BE  3               	lda #<SHRSIZ 		; distance to next.
0028BE  3               	sta z80_e
0028BE  3               	lda #>SHRSIZ
0028BE  3               	sta z80_d
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Run the routine
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               prosh2:
0028BE  3               	asl a 			; 2 bytes per address.
0028BE  3               	tay
0028BE  3               	lda shrptr,y
0028BE  3               	sta z80_l
0028BE  3               	lda shrptr+1,y 		; fetch high byte from table.
0028BE  3               	sta z80_h
0028BE  3               	jmp (z80_hl) 		; jump to routine.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Paricle routine table
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shrptr:	.word laser		; laser.
0028BE  3               	.word trail		; vapour trail.
0028BE  3               	.word shrap		; shrapnel from explosion.
0028BE  3               	.word dotl		; horizontal starfield left.
0028BE  3               	.word dotr		; horizontal starfield right.
0028BE  3               	.word dotu		; vertical starfield up.
0028BE  3               	.word dotd		; vertical starfield down.
0028BE  3               	.word ptcusr		; user particle.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Explosion shrapnel.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shrap:
0028BE  3               	ldy #1
0028BE  3               	lda (z80_ix),y 		; get the angle.
0028BE  3               	clc
0028BE  3               	adc #<shrsin		; shrapnel sine table.
0028BE  3               	sta z80_l
0028BE  3               	lda #>shrsin
0028BE  3               	adc #0
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; fetch value from table.
0028BE  3               	sta z80_e
0028BE  3               	inc z80_l 		; next byte of table.
0028BE  3               	bne :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y		; fetch value from table.
0028BE  3               	sta z80_d
0028BE  3               	inc z80_l		; next byte of table.
0028BE  3               	bne :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; fetch value from table.
0028BE  3               	sta z80_c
0028BE  3               	inc z80_l 		; next byte of table.
0028BE  3               	bne :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; fetch value from table.
0028BE  3               	sta z80_b
0028BE  3               
0028BE  3               	ldy #2
0028BE  3               	lda (z80_ix),y 		; x coordinate in hl.
0028BE  3               	clc
0028BE  3               	adc z80_e		; add sine lb
0028BE  3               	sta (z80_ix),y		; store new coordinate lb.
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	adc z80_d		; add sine hb
0028BE  3               	sta (z80_ix),y		; store new coordinate hb.
0028BE  3               
0028BE  3               	ldy #4
0028BE  3               	lda (z80_ix),y	 	; y coordinate in hl.
0028BE  3               	clc
0028BE  3               	adc z80_c		; add cosine lb
0028BE  3               	sta (z80_ix),y		; store new coordinate lb.
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	adc z80_b		; add cosine lb
0028BE  3               	sta (z80_ix),y		; store new coordinate hb.
0028BE  3               
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Move dots
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               dotl:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1		 	; move left.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               dotr:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1		 	; move left.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               dotu:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1		 	; move up.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               dotd:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1			; move down.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Check if coordinates are ok before redrawing at new position.
0028BE  3               ;
0028BE  3               ; left:   X>L		X=L	Ok
0028BE  3               ; right:  R+15>X	X=R	Ok
0028BE  3               ; top:    Y>T		Y=T	Ok
0028BE  3               ; bottom: B+15>Y	Y=B	Ok
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               chkxy:
0028BE  3               
0028BE  3               ; top:    Y>T		Y=T	Ok
0028BE  3               
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	cmp wntopx		; window top.
0028BE  3               	bcs :+			; compare with top window limit.
0028BE  3               	jmp kilshr		; out of window, kill shrapnel.
0028BE  3               :
0028BE  3               ; left:   X>L		X=L	Ok
0028BE  3               
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	cmp wnlftx		; left edge.
0028BE  3               	bcs :+			; compare with left window limit.
0028BE  3               	jmp kilshr		; out of window, kill shrapnel.
0028BE  3               :
0028BE  3               ; bottom: B+15>Y	Y=B	Ok
0028BE  3               
0028BE  3               	lda wnbotx		; point to bottom.
0028BE  3               	clc
0028BE  3               	adc #15
0028BE  3               	ldy #3
0028BE  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	bcs :+			; compare with shrapnel x coordinate.
0028BE  3               	jmp kilshr		; off screen, kill shrapnel..
0028BE  3               :
0028BE  3               ; right:  R+15>X	X=R	Ok
0028BE  3               
0028BE  3               	lda wnrgtx		; point to right edge.
0028BE  3               	clc
0028BE  3               	adc #15
0028BE  3               	ldy #5
0028BE  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	bcs :+			; compare with window limit.
0028BE  3               	jmp kilshr		; off screen, kill shrapnel.
0028BE  3               :
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Drop through.
0028BE  3               ; Display shrapnel.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               plot:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y		; y integer.
0028BE  3               	sta dispy	 	; workspace coordinates.
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y	 	; x integer.
0028BE  3               	sta dispx 		; workspace coordinates.
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y 		; type.
0028BE  3               	bne :+			; is it a laser?
0028BE  3               	jmp plot1 		; yes, draw laser instead.
0028BE  3               :
0028BE  3               plot0:
0028BE  3               	lda dispx		; which pixel within byte do we
0028BE  3               	and #7			; want to set first?
0028BE  3               	tay
0028BE  3               	lda dots,y 		; table of small pixel positions.
0028BE  3               	sta z80_e 		; get value.
0028BE  3               
0028BE  3               	jsr scadd 		; screen address.
0028BE  3               	ldy #0
0028BE  3               	lda (scraddr),y		; see what's already there.
0028BE  3               	eor z80_e
0028BE  3               	sta (scraddr),y 	; put back on screen.
0028BE  3               	rts
0028BE  3               
0028BE  3               plot1:
0028BE  3               	jsr scadd 		; screen address.
0028BE  3               	ldy #0
0028BE  3               	lda (scraddr),y 	; fetch byte there.
0028BE  3               	eor #255 		; toggle all bits.
0028BE  3               	sta (scraddr),y 	; new byte.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Switch off shrapnel
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               kilshr:
0028BE  3               	lda #128
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y	; switch off shrapnel.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Sine/cosine table
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0028BE  3               	.word 1024,0,946,65144,724,64811,391,64589
0028BE  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0028BE  3               	.word 64512,0,64589,391,64811,724,65144,946
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create trail
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               trail:
0028BE  3               	ldy #1
0028BE  3               	lda (z80_ix),y 	; time remaining.
0028BE  3               	sec
0028BE  3               	sbc #1
0028BE  3               	sta (z80_ix),y
0028BE  3               	bne :+
0028BE  3               	jmp trailk		; time to switch it off.
0028BE  3               :
0028BE  3               	jsr qrand		; get a random number.
0028BE  3               	lsr a 			; x or y axis?
0028BE  3               	bcc :+
0028BE  3               	jmp trailv		; use y.
0028BE  3               :
0028BE  3               ; Trail horizontal
0028BE  3               
0028BE  3               	lsr a 			; which direction?
0028BE  3               	bcc :+
0028BE  3               	jmp traill		; go left.
0028BE  3               :
0028BE  3               ; Trail right
0028BE  3               
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1	 		; go right.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Trail left
0028BE  3               
0028BE  3               traill:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1 			; go left.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Trail vertical
0028BE  3               
0028BE  3               trailv:
0028BE  3               	lsr a		 	; which direction?
0028BE  3               	bcc :+
0028BE  3               	jmp trailu		; go up.
0028BE  3               :
0028BE  3               ; Trail down
0028BE  3               
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1 			; go down.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Trail up
0028BE  3               
0028BE  3               trailu:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1 			; go up.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Kill trail
0028BE  3               
0028BE  3               trailk:
0028BE  3               	lda #200		; set off-screen to kill vapour trail.
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create laser beam
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               laser:
0028BE  3               	ldy #1
0028BE  3               	lda (z80_ix),y 		; direction.
0028BE  3               	ror a 			; left or right?
0028BE  3               	bcs :+
0028BE  3               	jmp laserl		; move left.
0028BE  3               :
0028BE  3               ; Laser right
0028BE  3               
0028BE  3               	lda #8			; distance to travel.
0028BE  3               	sta z80_b
0028BE  3               	jmp laserm		; move laser.
0028BE  3               
0028BE  3               ; Laser left
0028BE  3               
0028BE  3               laserl:
0028BE  3               	lda #248		; distance to travel.
0028BE  3               	sta z80_b
0028BE  3               laserm:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y		; x position.
0028BE  3               	clc
0028BE  3               	adc z80_b		; add distance.
0028BE  3               	sta (z80_ix),y		; set new x coordinate.
0028BE  3               
0028BE  3               ; Test new block.
0028BE  3               
0028BE  3               	sta dispx 		; set x for block collision detection purposes.
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y 		; get y.
0028BE  3               	sta dispy		; set coordinate for collision test.
0028BE  3               	jsr tstbl 		; get block type there.
0028BE  3               	cmp #WALL		; is it solid?
0028BE  3               	bne :+
0028BE  3               	jmp trailk		; yes, it cannot pass.
0028BE  3               :
0028BE  3               .if pflag .or dflag
0028BE  3                       cmp #FODDER             ; is it fodder?
0028BE  3                       bne :+
0028BE  3                       jsr fdchk               ; remove fodder block.
0028BE  3                       jmp trailk              ; destroy laser.
0028BE  3               :
0028BE  3               .endif
0028BE  3                       rts                     ; no, ignore it.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Dots mask
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               dots:	.byte 128,64,32,16,8,4,2,1
0028BE  3               
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Plot, preserving de.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               plotde:
0028BE  3               	lda z80_d 		; put de on stack.
0028BE  3               	pha
0028BE  3               	lda z80_e
0028BE  3               	pha
0028BE  3               
0028BE  3               	jsr plot 		; plot pixel.
0028BE  3               
0028BE  3               	pla			; restore de from stack.
0028BE  3               	sta z80_e
0028BE  3               	pla
0028BE  3               	sta z80_d
0028BE  3               
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Shoot a laser.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shoot:
0028BE  3               	sta z80_c		; store direction in c register.
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	clc
0028BE  3               shoot1:
0028BE  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0028BE  3               	sta z80_l 		; puty y coordinate in l.
0028BE  3               
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y 		; x coordinate in h.
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	lda z80_i		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcs :+
0028BE  3               	jmp vapou2		; failed, restore ix.
0028BE  3               :
0028BE  3               	lda #0
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y 		; set up a laser.
0028BE  3               
0028BE  3               	lda z80_c
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y 		; set the direction.
0028BE  3               
0028BE  3               	lda z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; set y coordinate.
0028BE  3               
0028BE  3               	ror z80_c		; check direction we want.
0028BE  3               	bcc :+
0028BE  3               	jmp shootr		; shoot right.
0028BE  3               :
0028BE  3               	lda z80_h		; X position.
0028BE  3               shoot0:
0028BE  3               	and #248		; align on character boundary.
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; set x coordinate.
0028BE  3               	jmp vapou0 		; draw first image.
0028BE  3               shootr:
0028BE  3               	lda z80_h		; x position.
0028BE  3               	clc
0028BE  3               	adc #15			; look right.
0028BE  3               	jmp shoot0		; align and continue.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create a bit of vapour trail.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               vapour:
0028BE  3               	lda z80_i		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	clc
0028BE  3               vapou3:
0028BE  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0028BE  3               	sta z80_l
0028BE  3               
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y 		; x coordinate.
0028BE  3               	adc #7
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcc :+
0028BE  3               	jmp vapou1		; no, we can use it.
0028BE  3               :
0028BE  3               vapou2:
0028BE  3               	pla
0028BE  3               	sta z80_x
0028BE  3               	pla
0028BE  3               	sta z80_i
0028BE  3               	rts
0028BE  3               vapou1:
0028BE  3               	lda z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; set up y.
0028BE  3               
0028BE  3               	lda z80_h
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y 		; set up x coordinate.
0028BE  3               
0028BE  3               	jsr qrand		; get quick random number.
0028BE  3               	and #15			; random time.
0028BE  3               	clc
0028BE  3               	adc #15			; minimum time on screen.
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y		; set time on screen.
0028BE  3               
0028BE  3               	lda #1
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; define particle as vapour trail.
0028BE  3               vapou0:
0028BE  3               	jsr chkxy		; plot first position.
0028BE  3               	jmp vapou2
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create a user particle.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               ptusr:
0028BE  3               	sta z80_f		; store timer.
0028BE  3               
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	clc
0028BE  3               	adc #7			; mid-point of sprite.
0028BE  3               	sta z80_l
0028BE  3               
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y 		; x coordinate.
0028BE  3               	clc
0028BE  3               	adc #7			; mid-point of sprite.
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcs ptusr1
0028BE  3               	rts 			; out of slots, can't generate anything.
0028BE  3               ptusr1:
0028BE  3               	lda z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y 		; set up y.
0028BE  3               
0028BE  3               	lda z80_h
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; set up x coordinate.
0028BE  3               
0028BE  3               	lda z80_f 		; restore timer.
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y		; set time on screen.
0028BE  3               
0028BE  3               	lda #7
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; define particle as user particle.
0028BE  3               
0028BE  3               	jmp chkxy		; plot first position.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create a vertical or horizontal star.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               star:
0028BE  3               	lda z80_i		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcs star7		; found one we can use.
0028BE  3               star0:
0028BE  3               	pla 			; restore sprite pointer.
0028BE  3               	sta z80_x
0028BE  3               	pla
0028BE  3               	sta z80_i
0028BE  3               	rts 			; out of slots, can't generate anything.
0028BE  3               star7:
0028BE  3               	lda z80_c		; direction.
0028BE  3               	and #3 			; is it left?
0028BE  3               	bne :+
0028BE  3               	jmp star1 		; yes, it's left.
0028BE  3               :
0028BE  3               	cmp #1 			; is it right?
0028BE  3               	bne :+
0028BE  3               	jmp star2 		; yes, it's right.
0028BE  3               :
0028BE  3               	cmp #2 			; is it up?
0028BE  3               	bne :+
0028BE  3               	jmp star3 		; yes, it's up.
0028BE  3               :
0028BE  3               	ldy wntopx 		; get edge of screen.
0028BE  3               	iny			; down one pixel.
0028BE  3               	tya
0028BE  3               star8:
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y 		; set y coord.
0028BE  3               	jsr qrand 		; get quick random number.
0028BE  3               star9:
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; set x position.
0028BE  3               
0028BE  3               	lda z80_c		; direction.
0028BE  3               	and #3			; zero to three.
0028BE  3               	clc
0028BE  3               	adc #3			; 3 to 6 for starfield.
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; define particle as star.
0028BE  3               	jsr chkxy		; plot first position.
0028BE  3               	jmp star0
0028BE  3               star1:
0028BE  3               	jsr qrand		; get quick random number.
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y 		; set y coord.
0028BE  3               
0028BE  3               	lda wnrgtx 		; get edge of screen.
0028BE  3               	clc
0028BE  3               	adc #15			; add width of sprite minus 1.
0028BE  3               	jmp star9
0028BE  3               star2:
0028BE  3               	jsr qrand 		; get quick random number.
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; set y coord.
0028BE  3               
0028BE  3               	lda wnlftx		; get edge of screen.
0028BE  3               	jmp star9
0028BE  3               star3:
0028BE  3               	lda wnbotx 		; get edge of screen.
0028BE  3               	clc
0028BE  3               	adc #15 		; height of sprite minus one pixel.
0028BE  3               	jmp star8
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Find particle slot for lasers or vapour trail.
0028BE  3               ; can't use alternate accumulator.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               fpslot:
0028BE  3               	lda #<SHRAPN 		; shrapnel table.
0028BE  3               	sta z80_x
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_i
0028BE  3               
0028BE  3               	lda #NUMSHR		; number of pieces in table.
0028BE  3               	sta z80_b
0028BE  3               fpslt0:
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y		; get type.
0028BE  3               	asl a  			; is this slot in use?
0028BE  3               	bcc :+
0028BE  3               	rts			; no, we can use it.
0028BE  3               :
0028BE  3               	clc			; point to more shrapnel.
0028BE  3               	lda z80_x
0028BE  3               	adc #SHRSIZ
0028BE  3               	sta z80_x
0028BE  3               	bcc :+
0028BE  3               	inc z80_i
0028BE  3               :
0028BE  3               	dec z80_b		; repeat for all shrapnel.
0028BE  3               	bne fpslt0
0028BE  3               
0028BE  3               	clc
0028BE  3               	rts 			; out of slots, can't generate anything.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create an explosion at sprite position.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               explod:
0028BE  3               	sta z80_c 		; particles to create.
0028BE  3               
0028BE  3               	lda z80_i 		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	sta z80_l
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y		; x coordinate.
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	lda #<SHRAPN		; shrapnel table.
0028BE  3               	sta z80_x
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_i
0028BE  3               
0028BE  3               	lda #NUMSHR		; number of pieces in table.
0028BE  3               	sta explcnt
0028BE  3               expld0:
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y		; get type.
0028BE  3               	asl a 			; is this slot in use?
0028BE  3               	bcs expld1		; no, we can use it.
0028BE  3               expld2:
0028BE  3               	clc
0028BE  3               	lda z80_x
0028BE  3               	adc #SHRSIZ
0028BE  3               	sta z80_x
0028BE  3               	bcc :+
0028BE  3               	inc z80_i
0028BE  3               :
0028BE  3               	dec explcnt		; repeat for all shrapnel.
0028BE  3               	bne expld0
0028BE  3               expld3:
0028BE  3               	pla			; restore sprite pointer.
0028BE  3               	sta z80_x
0028BE  3               	pla
0028BE  3               	sta z80_i
0028BE  3               	rts 			; out of slots, can't generate any more.
0028BE  3               
0028BE  3               expld1:
0028BE  3               	lda z80_c		; shrapnel counter.
0028BE  3               	and #15			; 0 to 15.
0028BE  3               	clc			; add to x.
0028BE  3               	adc z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; y coord.
0028BE  3               
0028BE  3               	lda seed3 		; crap random number.
0028BE  3               	and #15			; 0 to 15.
0028BE  3               	clc 			; add to y.
0028BE  3               	adc z80_h
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; x coord.
0028BE  3               
0028BE  3               	lda #2
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; switch it on.
0028BE  3               
0028BE  3               	jsr chkxy		; plot first position.
0028BE  3               	jsr qrand		; quick random angle.
0028BE  3               	and #60 		; keep within range.
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y		; angle.
0028BE  3               
0028BE  3               	dec z80_c		; one less piece of shrapnel to generate.
0028BE  3               	bne expld2 		; back to main explosion loop.
0028BE  3               	jmp expld3 		; restore sprite pointer and exit.
0028BE  3               
0028BE  3               ;explcnt:	.byte 0
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Quick random
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               qrand:
0028BE  3               	jsr random		; r register.
0028BE  3               	eor seed3		; combine with seed.
0028BE  3               	sta seed3 		; new seed.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;seed3:	.byte 0
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Display all shrapnel.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               dshrp:
0028BE  3               	lda #<plotde		; display routine.
0028BE  3               	sta proshx+1
0028BE  3               	lda #>plotde
0028BE  3               	sta proshx+2
0028BE  3               	jsr proshr		; process shrapnel.
0028BE  3               
0028BE  3               	lda #<prosh1		; processing routine.
0028BE  3               	sta proshx+1
0028BE  3               	lda #>prosh1
0028BE  3               	sta proshx+2
0028BE  3               	rts
0028BE  3               
0028BE  3               ;------------------------------------------------------
0028BE  3               ; Particle engine.
0028BE  3               ;
0028BE  3               ; Init particle data for 55 particles in SHRAPN table.
0028BE  3               ; Every particle has 6 bytes.
0028BE  3               ;
0028BE  3               ; global:	-
0028BE  3               ; local:	x,y,hl
0028BE  3               ; calls:	-
0028BE  3               ;------------------------------------------------------
0028BE  3               
0028BE  3               inishr:
0028BE  3               	lda #<SHRAPN 		; table.
0028BE  3               	sta z80_l
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	ldx #NUMSHR		; shrapnel pieces to process.
0028BE  3               inish0:
0028BE  3               	lda #255 		; kill the shrapnel.
0028BE  3               	sta (z80_hl),y
0028BE  3               
0028BE  3               	clc 			; point there.
0028BE  3               	lda z80_l
0028BE  3               	adc #SHRSIZ		; distance to next.
0028BE  3               	sta z80_l
0028BE  3               	bcc :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	dex
0028BE  3               	bne inish0 		; round again.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;------------------------------------------------------
0028BE  3               ; Check for collision between laser and sprite.
0028BE  3               ;------------------------------------------------------
0028BE  3               
0028BE  3               lcol:
0028BE  3               	lda #<SHRAPN		; shrapnel table.
0028BE  3               	sta z80_l
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	lda #NUMSHR		; number of pieces in table.
0028BE  3               	sta z80_b
0028BE  3               lcol0:
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; get type.
0028BE  3               	beq lcol1		; yes, check collision.
0028BE  3               lcol3:
0028BE  3               	clc			; point to more shrapnel.
0028BE  3               	lda z80_l
0028BE  3               	adc #SHRSIZ
0028BE  3               	sta z80_l
0028BE  3               	bcc :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	dec z80_b		; repeat for all shrapnel.
0028BE  3               	bne lcol0
0028BE  3               	rts 			; no collision, carry not set.
0028BE  3               lcol1:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_hl),y		; get y.
0028BE  3               	sec
0028BE  3               	ldy #8
0028BE  3               	sbc (z80_ix),y		; subtract sprite y.
0028BE  3               lcolh:
0028BE  3               	cmp #SPR_HGT 		; within range?
0028BE  3               	bcc :+
0028BE  3               	jmp lcol2		; no, missed.
0028BE  3               :
0028BE  3               	ldy #5
0028BE  3               	lda (z80_hl),y 		; get x.
0028BE  3               	sec
0028BE  3               	ldy #9
0028BE  3               	sbc (z80_ix),y 		; subtract sprite y.
0028BE  3               	cmp #16			; within range?
0028BE  3               	bcs :+
0028BE  3               	jmp lcol4 		; yes, collision occurred.
0028BE  3               :
0028BE  3               lcol2:
0028BE  3               	jmp lcol3
0028BE  3               lcol4:
0028BE  3               	sec
0028BE  3               	rts 			; return with carry set for collision.
0028BE  3               .endif
0028BE  3               
0028BE  3               ;------------------------------------------------------
0028BE  3               ; Main game engine code starts here.
0028BE  3               ; After initialisation, mloop is the main loop
0028BE  3               ;------------------------------------------------------
0028BE  3               
0028BE  3               game:
0028BE  3               
0028BE  3               ; Set up screen address table.
0028BE  3               
0028BE  3               setsat:
0028BE  3  A9 00        	lda #<ScreenAddr	; start of screen.
0028C0  3  85 rr        	sta scraddr
0028C2  3  A9 04        	lda #>ScreenAddr
0028C4  3  85 rr        	sta scraddr+1
0028C6  3               
0028C6  3  A2 00        	ldx #0
0028C8  3  A0 00        	ldy #0			; vertical lines on screen.
0028CA  3               setsa0:
0028CA  3  A5 rr        	lda scraddr
0028CC  3  99 00 DC     	sta SCADTB_lb,y		; write low byte.
0028CF  3  A5 rr        	lda scraddr+1
0028D1  3  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
0028D3  3  90 02        	bcc :+
0028D5  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0028D7  3               :
0028D7  3  99 00 DD     	sta SCADTB_hb,y		; write high byte.
0028DA  3  E8           	inx
0028DB  3  E0 03        	cpx #3
0028DD  3  D0 05        	bne :+
0028DF  3  20 E8 35     	jsr nline		; next line down.
0028E2  3  A2 00        	ldx #0
0028E4  3               :
0028E4  3  C8           	iny			; next position in table.
0028E5  3  D0 E3        	bne setsa0
0028E7  3               
0028E7  3               ; Init hardware and graphics mode
0028E7  3               
0028E7  3  20 06 41     	jsr init 		; Init hardware
0028EA  3               
0028EA  3               ; Init joystick
0028EA  3               
0028EA  3  20 41 41     	jsr joyinit		; Init joystick
0028ED  3               
0028ED  3               rpblc2:
0028ED  3               .if pflag
0028ED  3               	jsr inishr 		; initialise particle engine.
0028ED  3               .endif
0028ED  3               evintr:
0028ED  3  20 43 3C     	jsr evnt12 		; call intro/menu event.
0028F0  3               
0028F0  3  A9 02        	lda #WALL 		; write default property.
0028F2  3  A2 00        	ldx #0
0028F4  3               clrmap:
0028F4  3  9D 00 D8     	sta MAP,x 		; block properties.
0028F7  3  9D 00 D9     	sta MAP+256,x
0028FA  3  9D 00 DA     	sta MAP+512,x
0028FD  3  9D 00 DB     	sta MAP+768,x
002900  3  E8           	inx			; next byte.
002901  3  D0 F1        	bne clrmap
002903  3               
002903  3               .if oflag
002903  3               	jsr iniob 		; initialise objects.
002903  3               .endif
002903  3  A9 00        	lda #0			; put zero in accumulator.
002905  3  85 rr        	sta gamwon		; reset game won flag.
002907  3               
002907  3  20 72 2A     	jsr inisc 		; init the score.
00290A  3               mapst:
00290A  3  AD 30 3B     	lda stmap 		; start position on map.
00290D  3  8D 13 3B     	sta roomtb		; set up position in table, if there is one.
002910  3               
002910  3               inipbl:
002910  3               .if aflag
002910  3               	lda #<eop		; reset blockpointer
002910  3               	sta pbptr
002910  3               	lda #>eop
002910  3               	sta pbptr+1
002910  3               .endif
002910  3               
002910  3  20 FB 36     	jsr initsc 		; set up first screen.
002913  3               
002913  3  A9 02        	lda #<ssprit 		; default to spare sprite in table.
002915  3  85 68        	sta z80_x
002917  3  A9 3B        	lda #>ssprit
002919  3  85 69        	sta z80_i
00291B  3               evini:
00291B  3  20 78 3C     	jsr evnt13 		; initialisation.
00291E  3               
00291E  3               ; Two restarts.
00291E  3               ; First restart - clear all sprites and initialise everything.
00291E  3               
00291E  3               rstrt:
00291E  3  20 12 2A     	jsr rsevt 		; restart events.
002921  3  20 41 28     	jsr xspr 		; clear sprite table.
002924  3  20 67 38     	jsr sprlst 		; fetch pointer to screen sprites.
002927  3  20 F0 38     	jsr ispr 		; initialise sprite table.
00292A  3               
00292A  3  4C 39 29     	jmp rstrt0
00292D  3               
00292D  3               ; Second restart - clear all but player, and don't initialise him.
00292D  3               
00292D  3               rstrtn:
00292D  3  20 12 2A     	jsr rsevt		; restart events.
002930  3  20 94 38     	jsr nspr 		; clear all non-player sprites.
002933  3  20 67 38     	jsr sprlst 		; fetch pointer to screen sprites.
002936  3  20 2D 39     	jsr kspr 		; initialise sprite table, no more players.
002939  3               
002939  3               ; Set up the player and/or enemy sprites.
002939  3               
002939  3               rstrt0:
002939  3  A9 00        	lda #0 			; zero in accumulator.
00293B  3  85 rr        	sta nexlev 		; reset next level flag.
00293D  3  85 rr        	sta restfl 		; reset restart flag.
00293F  3  85 rr        	sta deadf 		; reset dead flag.
002941  3               
002941  3  20 91 2D     	jsr droom 		; show screen layout.
002944  3               
002944  3               rpblc0:
002944  3               .if pflag
002944  3               	jsr inishr 		; initialise particle engine.
002944  3               .endif
002944  3               .if aflag
002944  3               	jsr rbloc		; draw blocks for this screen
002944  3               .endif
002944  3               .if oflag
002944  3               	jsr shwob		; draw objects.
002944  3               .endif
002944  3               
002944  3  A9 36        	lda #<sprtab 		; address of sprite table, even sprites.
002946  3  85 68        	sta z80_x
002948  3  A9 3A        	lda #>sprtab
00294A  3  85 69        	sta z80_i
00294C  3  20 80 33     	jsr dspr 		; display sprites.
00294F  3               
00294F  3  A9 47        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002951  3  85 68        	sta z80_x
002953  3  A9 3A        	lda #>(sprtab+TABSIZ)
002955  3  85 69        	sta z80_i
002957  3  20 80 33     	jsr dspr 		; display sprites.
00295A  3               
00295A  3               
00295A  3               mloop:
00295A  3  20 4E 28     	jsr vsync 		; synchronise with display.
00295D  3  A9 36        	lda #<sprtab 		; address of sprite table, even sprites.
00295F  3  85 68        	sta z80_x
002961  3  A9 3A        	lda #>sprtab
002963  3  85 69        	sta z80_i
002965  3  20 80 33     	jsr dspr 		; display even sprites.
002968  3               
002968  3               ;	jsr plsnd 		; play sounds.
002968  3               
002968  3  20 BD 28     	jsr proshr
00296B  3  A9 47        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00296D  3  85 68        	sta z80_x
00296F  3  A9 3A        	lda #>(sprtab+TABSIZ)
002971  3  85 69        	sta z80_i
002973  3  20 80 33     	jsr dspr 		; display odd sprites.
002976  3               
002976  3  A9 02        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002978  3  85 68        	sta z80_x
00297A  3  A9 3B        	lda #>(ssprit)
00297C  3  85 69        	sta z80_i
00297E  3               evlp1:
00297E  3  20 16 3C     	jsr evnt10 		; called once per main loop.
002981  3               
002981  3  20 FE 32     	jsr pspr 		; process sprites.
002984  3               
002984  3               ; Main loop events.
002984  3               
002984  3  A9 02        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002986  3  85 68        	sta z80_x
002988  3  A9 3B        	lda #>ssprit
00298A  3  85 69        	sta z80_i
00298C  3               evlp2:
00298C  3  20 42 3C     	jsr evnt11 		; called once per main loop.
00298F  3               bsortx:
00298F  3  20 74 32     	jsr bsort 		; sort sprites.
002992  3               
002992  3  A5 rr        	lda nexlev		; finished level flag.
002994  3  F0 03        	beq :+
002996  3  4C BE 29     	jmp newlev		; is set, go to next level.
002999  3               :
002999  3  A5 rr        	lda gamwon		; finished game flag.
00299B  3  F0 03        	beq :+
00299D  3  4C CD 29     	jmp evwon		; is set, finish the game.
0029A0  3               :
0029A0  3  A5 rr        	lda restfl 		; finished level flag.
0029A2  3  C9 01        	cmp #1			; has it been set?
0029A4  3  D0 03        	bne :+
0029A6  3  4C 1E 29     	jmp rstrt		; yes, go to next level.
0029A9  3               :
0029A9  3  C9 02        	cmp #2			; has it been set?
0029AB  3  D0 03        	bne :+
0029AD  3  4C 2D 29     	jmp rstrtn		; yes, go to next level.
0029B0  3               :
0029B0  3  A5 rr        	lda deadf 		; dead flag.
0029B2  3  F0 03        	beq :+
0029B4  3  4C D3 29     	jmp pdead		; yes, player dead.
0029B7  3               :
0029B7  3               ; back to start of main loop.
0029B7  3               
0029B7  3  E6 rr        	inc frmno
0029B9  3  E6 rr        	inc clock
0029BB  3  4C 5A 29     	jmp mloop		; switched to a jmp mloop during test mode.
0029BE  3               
0029BE  3               ;----------------------------------------------------------
0029BE  3               ; Read blocks from list and update screen accordingly.
0029BE  3               ;----------------------------------------------------------
0029BE  3               
0029BE  3               .if aflag
0029BE  3               rbloc:
0029BE  3               	lda #<eop		; reset temp blockpointer
0029BE  3               	sta pbbuf
0029BE  3               	lda #>eop
0029BE  3               	sta pbbuf+1
0029BE  3               
0029BE  3               rbloc2:
0029BE  3               	lda pbbuf			; check for last block
0029BE  3               	cmp pbptr
0029BE  3               	bne rbloc1
0029BE  3               	lda pbbuf+1
0029BE  3               	cmp pbptr+1
0029BE  3               	bne rbloc1
0029BE  3               	rts
0029BE  3               rbloc1:
0029BE  3               	ldy #0
0029BE  3               	lda (pbbuf),y		; check if block for this scno
0029BE  3               	cmp scno
0029BE  3               	bne rbloc0		; if not, skip
0029BE  3               	iny
0029BE  3               	lda (pbbuf),y		; get y
0029BE  3               	sta dispy
0029BE  3               	iny
0029BE  3               	lda (pbbuf),y		; get x
0029BE  3               	sta dispx
0029BE  3               	iny
0029BE  3               	lda (pbbuf),y		; get blocknr
0029BE  3               	jsr pattr2		; draw block
0029BE  3               rbloc0:
0029BE  3               	clc			; point to next block
0029BE  3               	lda pbbuf
0029BE  3               	adc #4
0029BE  3               	sta pbbuf
0029BE  3               	bcc rbloc2
0029BE  3               	inc pbbuf+1
0029BE  3               	jmp rbloc2
0029BE  3               .endif
0029BE  3               
0029BE  3               ;----------------------------------------------------------
0029BE  3               ; New level
0029BE  3               ;----------------------------------------------------------
0029BE  3               
0029BE  3               ;.repeat 270
0029BE  3               ;  .byte 0
0029BE  3               ;.endrep
0029BE  3               
0029BE  3               newlev:
0029BE  3  A5 rr        	lda scno 			; current screen.
0029C0  3  18           	clc
0029C1  3  69 01        	adc #1				; next screen.
0029C3  3  CD CD 3D     	cmp numsc			; total number of screens.
0029C6  3  B0 05        	bcs evwon			; yes, game finished.
0029C8  3  85 rr        	sta scno			; set new level number.
0029CA  3  4C 1E 29     	jmp rstrt			; restart, clearing all aliens.
0029CD  3               
0029CD  3               evwon:
0029CD  3  20 7D 3C     	jsr evnt18		 	; game completed.
0029D0  3  4C E7 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0029D3  3               
0029D3  3               ;----------------------------------------------------------
0029D3  3               ; Player dead.
0029D3  3               ;----------------------------------------------------------
0029D3  3               
0029D3  3               ;.repeat 258
0029D3  3               ;  .byte 0
0029D3  3               ;.endrep
0029D3  3               
0029D3  3               pdead:
0029D3  3  A9 00        	lda #0				; zeroise accumulator.
0029D5  3  85 rr        	sta deadf			; reset dead flag.
0029D7  3               evdie:
0029D7  3  20 7B 3C     	jsr evnt16 			; death subroutine.
0029DA  3  A5 rr        	lda numlif			; number of lives.
0029DC  3  F0 03        	beq :+
0029DE  3  4C 1E 29     	jmp rstrt 			; restart game.
0029E1  3               :
0029E1  3               evfail:
0029E1  3  20 7C 3C     	jsr evnt17 			; failure event.
0029E4  3  4C BE 28     	jmp game			; restart game
0029E7  3               
0029E7  3               ;----------------------------------------------------------
0029E7  3               ; Tidy things up
0029E7  3               ;----------------------------------------------------------
0029E7  3               
0029E7  3               ;.repeat 291
0029E7  3               ;  .byte 0
0029E7  3               ;.endrep
0029E7  3               
0029E7  3               tidyup:
0029E7  3  A0 00        	ldy #0				; digits to check.
0029E9  3               tidyu2:
0029E9  3  B9 5B 2B     	lda score,y 			; get score digit.
0029EC  3  CD 61 2B     	cmp hiscor 			; are we larger than high score digit?
0029EF  3  90 07        	bcc tidyu0			; high score is bigger.
0029F1  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0029F3  3  C8           	iny				; next digit of high score.
0029F4  3  C0 06        	cpy #6
0029F6  3  D0 F1        	bne tidyu2			; repeat for all digits
0029F8  3               tidyu0:
0029F8  3  A9 5B        	lda #<score			; return pointing to score.
0029FA  3  85 62        	sta z80_c
0029FC  3  A9 2B        	lda #>score
0029FE  3  85 63        	sta z80_b
002A00  3  60           	rts
002A01  3               tidyu1:
002A01  3  A0 05        	ldy #5
002A03  3               tidyu3:
002A03  3  B9 5B 2B     	lda score,y			; score.
002A06  3  99 61 2B     	sta hiscor,y			; high score.
002A09  3  88           	dey
002A0A  3  10 F7        	bpl tidyu3 			; copy score to high score.
002A0C  3               evnewh:
002A0C  3  20 7E 3C     	jsr evnt19			; new high score event.
002A0F  3  4C F8 29     	jmp tidyu0			; tidy up.
002A12  3               
002A12  3               ;--------------------------------------------------
002A12  3               ; Restart event.
002A12  3               ;--------------------------------------------------
002A12  3               
002A12  3               rsevt:
002A12  3  A9 02        	lda #<ssprit 			; default to spare element in table.
002A14  3  85 68        	sta z80_x
002A16  3  A9 3B        	lda #>ssprit
002A18  3  85 69        	sta z80_i
002A1A  3               evrs:
002A1A  3  4C 79 3C     	jmp evnt14	 		; call restart event.
002A1D  3               
002A1D  3               ;------------------------------------------------------------------
002A1D  3               ; Copy number passed in a to string position bc, right-justified.
002A1D  3               ;
002A1D  3               ; Input:
002A1D  3               ;  A  = number
002A1D  3               ;  BC = string address
002A1D  3               ;
002A1D  3               ; Output:
002A1D  3               ;  BC = string with number
002A1D  3               ;-----------------------------------------------------------------
002A1D  3               
002A1D  3               num2ch:
002A1D  3  85 65        	sta z80_d		; Save number
002A1F  3               
002A1F  3  A9 00        	lda #0
002A21  3  85 rr        	sta flag
002A23  3               numdg3:
002A23  3  A2 64        	ldx #100		; hundreds column.
002A25  3  86 64        	stx z80_e
002A27  3  20 37 2A     	jsr numdg		; show digit.
002A2A  3               numdg2:
002A2A  3  A2 0A        	ldx #10			; tens column.
002A2C  3  86 64        	stx z80_e
002A2E  3  20 37 2A     	jsr numdg		; show digit.
002A31  3               
002A31  3  E6 rr        	inc flag
002A33  3  A2 01        	ldx #1			; units column.
002A35  3  86 64        	stx z80_e
002A37  3               numdg:
002A37  3  A9 30        	lda #48			; clear digit.
002A39  3  85 61        	sta z80_a
002A3B  3               numdg1:
002A3B  3  A5 65        	lda z80_d
002A3D  3  C5 64        	cmp z80_e
002A3F  3  90 0E        	bcc numdg0		; nothing to show.
002A41  3  38           	sec
002A42  3  A5 65        	lda z80_d
002A44  3  E5 64        	sbc z80_e		; subtract from column.
002A46  3  85 65        	sta z80_d
002A48  3  E6 61        	inc z80_a		; increment digit.
002A4A  3  E6 rr        	inc flag
002A4C  3  4C 3B 2A     	jmp numdg1		; repeat until column is zero.
002A4F  3               numdg0:
002A4F  3  A0 00        	ldy #0
002A51  3  A5 61        	lda z80_a
002A53  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002A55  3  A5 rr        	lda flag
002A57  3  F0 06        	beq :+
002A59  3  E6 62        	inc z80_c		; next buffer position.
002A5B  3  D0 02        	bne :+
002A5D  3  E6 63        	inc z80_b
002A5F  3               :
002A5F  3  60           	rts
002A60  3               num2dd:
002A60  3  85 65        	sta z80_d		; Save number
002A62  3               
002A62  3  A9 01        	lda #1
002A64  3  85 rr        	sta flag
002A66  3               
002A66  3  4C 2A 2A     	jmp numdg2
002A69  3               num2td:
002A69  3  85 65        	sta z80_d		; Save number
002A6B  3               
002A6B  3  A9 01        	lda #1
002A6D  3  85 rr        	sta flag
002A6F  3  4C 23 2A     	jmp numdg3
002A72  3               
002A72  3               ;flag:	.byte 0
002A72  3               
002A72  3               ;---------------------------------------------------------
002A72  3               ; Reset score to "000000"
002A72  3               ;---------------------------------------------------------
002A72  3               
002A72  3               inisc:
002A72  3  A9 30        	lda #'0'
002A74  3  A2 05        	ldx #5			; digits to initialise.
002A76  3               inisc0:
002A76  3  9D 5B 2B     	sta score,x 		; write zero digit.
002A79  3  CA           	dex			; next column.
002A7A  3  10 FA        	bpl inisc0		; repeat for all digits.
002A7C  3               
002A7C  3  60           	rts
002A7D  3               
002A7D  3               ;-----------------------------------------------------
002A7D  3               ; Multiply h by d and return in hl.
002A7D  3               ;
002A7D  3               ; Input:
002A7D  3               ;  H = first number
002A7D  3               ;  D = second number
002A7D  3               ;
002A7D  3               ; Output:
002A7D  3               ;  HL = result H x D
002A7D  3               ;-----------------------------------------------------
002A7D  3               
002A7D  3               imul:
002A7D  3  A5 65        	lda z80_d		; HL = H * D
002A7F  3  85 64        	sta z80_e
002A81  3  A5 67        	lda z80_h
002A83  3  85 62        	sta z80_c		; make c first multiplier.
002A85  3               imul0:
002A85  3  A9 00        	lda #0			; zeroise total.
002A87  3  85 66        	sta z80_l
002A89  3  85 67        	sta z80_h
002A8B  3               
002A8B  3  A5 67        	lda z80_h
002A8D  3  85 65        	sta z80_d		; zeroise high byte.
002A8F  3               
002A8F  3  A9 08        	lda #8			; repeat 8 times.
002A91  3  85 63        	sta z80_b
002A93  3               imul1:
002A93  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A95  3  90 0E        	bcc imul2		; wasn't set.
002A97  3  18           	clc			; bit was set, so add de.
002A98  3  A5 66        	lda z80_l
002A9A  3  65 64        	adc z80_e
002A9C  3  85 66        	sta z80_l
002A9E  3  A5 67        	lda z80_h
002AA0  3  65 65        	adc z80_d
002AA2  3  85 67        	sta z80_h
002AA4  3  18           	clc 			; reset carry.
002AA5  3               imul2:
002AA5  3  06 64        	asl z80_e 		; shift de 1 bit left.
002AA7  3  26 65        	rol z80_d
002AA9  3  C6 63        	dec z80_b
002AAB  3  D0 E6        	bne imul1		; repeat 8 times.
002AAD  3               
002AAD  3  60           	rts
002AAE  3               
002AAE  3               ;-----------------------------------------------
002AAE  3               ; Divide d by e and return in d, remainder in a.
002AAE  3               ;
002AAE  3               ; Input:
002AAE  3               ;  D = first number
002AAE  3               ;  E = second number
002AAE  3               ;
002AAE  3               ; Output:
002AAE  3               ;  D = result D/E
002AAE  3               ;  A = remainder
002AAE  3               ;-----------------------------------------------
002AAE  3               
002AAE  3               idiv:
002AAE  3  A9 00        	lda #0
002AB0  3  A0 08        	ldy #8		 	; bits to shift.
002AB2  3  06 65        	asl z80_d
002AB4  3               idiv0:
002AB4  3  2A           	rol a 			; multiply d by 2.
002AB5  3  C5 64        	cmp z80_e 		; test if e is smaller.
002AB7  3  90 02        	bcc idiv1		; e is greater, no division this time.
002AB9  3  E5 64        	sbc z80_e		; subtract it.
002ABB  3               idiv1:
002ABB  3  26 65        	rol z80_d		; rotate into d.
002ABD  3  88           	dey
002ABE  3  D0 F4        	bne idiv0		; repeat
002AC0  3  60           	rts
002AC1  3               
002AC1  3               ;---------------------------------------------------
002AC1  3               ; Play AY sound effect
002AC1  3               ;---------------------------------------------------
002AC1  3               
002AC1  3               plsnd:
002AC1  3  60           	rts
002AC2  3               
002AC2  3               ;---------------------------------------------------
002AC2  3               ; Objects handling.
002AC2  3               ; 32 bytes for image
002AC2  3               ; 3 for room, y and x
002AC2  3               ; 3 for starting room, y and x.
002AC2  3               ; 254 = disabled.
002AC2  3               ; 255 = object in player"s pockets.
002AC2  3               ;---------------------------------------------------
002AC2  3               
002AC2  3               ;---------------------------------------------------
002AC2  3               ; Show items present.
002AC2  3               ;---------------------------------------------------
002AC2  3               
002AC2  3               .if oflag
002AC2  3               shwob:
002AC2  3               	lda #<objdta 			; objects table.
002AC2  3               	sta z80_l
002AC2  3               	lda #>objdta
002AC2  3               	sta z80_h
002AC2  3               
002AC2  3               	lda numob 			; number of objects in the game.
002AC2  3               	sta sprcnt
002AC2  3               shwob0:
002AC2  3               	ldy #32 			; distance to room number.
002AC2  3               	lda (z80_hl),y 			; same as an item?
002AC2  3               	cmp scno 			; current location.
002AC2  3               	bne :+
002AC2  3               	jsr dobj 			; yes, display object.
002AC2  3               :
002AC2  3               	clc
002AC2  3               	lda z80_l
002AC2  3               	adc #38 			; distance to next item.
002AC2  3               	sta z80_l
002AC2  3               	lda z80_h
002AC2  3               	adc #0
002AC2  3               	sta z80_h	 		; point to it.
002AC2  3               	dec sprcnt
002AC2  3               	bne shwob0 			; repeat for others.
002AC2  3               	rts
002AC2  3               
002AC2  3               ;---------------------------------------------------
002AC2  3               ; Display object.
002AC2  3               ; hl must point to object's start address.
002AC2  3               ;
002AC2  3               ; Input:
002AC2  3               ;  HL = object address
002AC2  3               ;---------------------------------------------------
002AC2  3               
002AC2  3               dobj:
002AC2  3               	ldy #33
002AC2  3               	lda (z80_hl),y 			; point to y.
002AC2  3               	sta dispy
002AC2  3               	iny
002AC2  3               	lda (z80_hl),y 			; point to x.
002AC2  3               	sta dispx
002AC2  3               dobj1:
002AC2  3               	jmp sprite 			; draw this sprite.
002AC2  3               
002AC2  3               ;--------------------------------------
002AC2  3               ; Remove an object.
002AC2  3               ;
002AC2  3               ; Input:
002AC2  3               ;  A = object number
002AC2  3               ;--------------------------------------
002AC2  3               
002AC2  3               remob:
002AC2  3               	cmp numob			; number of objects in game.
002AC2  3               	bcc :+				; are we checking past the end?
002AC2  3               	rts				; yes, can't get non-existent item.
002AC2  3               :
002AC2  3               	pha				; remember object.
002AC2  3               	jsr getob			; pick it up if we haven't already got it.
002AC2  3               	pla				; retrieve object number.
002AC2  3               	jsr gotob			; get its address.
002AC2  3               	lda #254
002AC2  3               	ldy #32
002AC2  3               	sta (z80_hl),y			; remove it.
002AC2  3               	rts
002AC2  3               
002AC2  3               ;---------------------------------------------------
002AC2  3               ; Pick up object number held in the accumulator.
002AC2  3               ;
002AC2  3               ; Input:
002AC2  3               ;  A = object number
002AC2  3               ;---------------------------------------------------
002AC2  3               
002AC2  3               getob:
002AC2  3               	cmp numob 		; number of objects in game.
002AC2  3               	bcc :+			; are we checking past the end?
002AC2  3               	rts			; yes, can't get non-existent item.
002AC2  3               :
002AC2  3               	jsr gotob 		; check if we already have it.
002AC2  3               	cmp #255
002AC2  3               	bne :+
002AC2  3               	rts			; we already do.
002AC2  3               :
002AC2  3               	ldy #32
002AC2  3               	lda (z80_hl),y		; is it on this screen?
002AC2  3               	cmp scno 		; current screen.
002AC2  3               	bne getob0		; not on screen, so nothing to delete.
002AC2  3               
002AC2  3               	lda #255
002AC2  3               	sta (z80_hl),y		; pick it up.
002AC2  3               	iny 			; point to y coord.
002AC2  3               getob1:
002AC2  3               	ldy #33
002AC2  3               	lda (z80_hl),y		; y coord.
002AC2  3               	sta dispy
002AC2  3               	ldy #34
002AC2  3               	lda (z80_hl),y 		; x coord.
002AC2  3               	sta dispx
002AC2  3               	jmp dobj1 		; delete object sprite.
002AC2  3               getob0:
002AC2  3               	lda #255
002AC2  3               	sta (z80_hl),y 		; pick it up.
002AC2  3               	rts
002AC2  3               .endif
002AC2  3               
002AC2  3               ;-----------------------------------------------------------------
002AC2  3               ; Got object check.
002AC2  3               ; Call with object in accumulator, returns zero set if in pockets.
002AC2  3               ;
002AC2  3               ; Input:
002AC2  3               ;  A = object number
002AC2  3               ;-----------------------------------------------------------------
002AC2  3               .if oflag .or mflag
002AC2  3               gotob:
002AC2  3               	cmp numob 		; number of objects in game.
002AC2  3               	bcc :+ 			; are we checking past the end?
002AC2  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002AC2  3               :
002AC2  3               	jsr findob		; find the object.
002AC2  3               gotob1:
002AC2  3               	rts
002AC2  3               
002AC2  3               gotob0:
002AC2  3               	lda #254 		; missing.
002AC2  3               	jmp gotob1
002AC2  3               
002AC2  3               findob:
002AC2  3               	pha			; save object number
002AC2  3               	lda #<objdta 		; objects.
002AC2  3               	sta z80_l
002AC2  3               	lda #>objdta
002AC2  3               	sta z80_h
002AC2  3               	pla			; retreive object number
002AC2  3               	beq fndob1 		; is it zero? yes, skip loop.
002AC2  3               	tax 			; loop counter
002AC2  3               fndob2:
002AC2  3               	clc
002AC2  3               	lda z80_l
002AC2  3               	adc #38 		; size of each object.
002AC2  3               	sta z80_l
002AC2  3               	bcc :+
002AC2  3               	inc z80_h
002AC2  3               :
002AC2  3               	dex 			; repeat until we find address.
002AC2  3               	bne fndob2
002AC2  3               fndob1:
002AC2  3               	ldy #32			; distance to room it's in.
002AC2  3               	lda (z80_hl),y		; fetch status.
002AC2  3               	rts
002AC2  3               .endif
002AC2  3               
002AC2  3               ;---------------------------------------------
002AC2  3               ; Drop object number at (dispx, dispy).
002AC2  3               ;
002AC2  3               ; Input:
002AC2  3               ;  A = object number
002AC2  3               ;---------------------------------------------
002AC2  3               
002AC2  3               .if oflag
002AC2  3               drpob:
002AC2  3               	cmp numob 		; are we checking past the end?
002AC2  3               	bcc :+
002AC2  3               	rts			; yes, can't drop non-existent item.
002AC2  3               :
002AC2  3               	jsr gotob		; make sure object is in inventory.
002AC2  3               	cmp scno		; already on this screen?
002AC2  3               	bne :+
002AC2  3               	rts			; yes, nothing to do.
002AC2  3               :
002AC2  3               	ldy #32
002AC2  3               	lda scno
002AC2  3               	sta (z80_hl),y		; bring onto screen.
002AC2  3               	lda dispy		; sprite y coordinate.
002AC2  3               	iny
002AC2  3               	sta (z80_hl),y		; point to object y.
002AC2  3               	lda dispx 		; sprite x coordinate.
002AC2  3               	iny
002AC2  3               	sta (z80_hl),y 		; point to object x
002AC2  3               	jmp dobj		; draw the object sprite.
002AC2  3               
002AC2  3               ;-----------------------------------------------
002AC2  3               ; Seek objects at sprite position.
002AC2  3               ;
002AC2  3               ; Output:
002AC2  3               ;  A = object number, if not found A=255
002AC2  3               ;-----------------------------------------------
002AC2  3               
002AC2  3               skobj:
002AC2  3               	lda #<objdta 		; pointer to objects.
002AC2  3               	sta z80_l
002AC2  3               	lda #>objdta
002AC2  3               	sta z80_h
002AC2  3               
002AC2  3               	lda numob 		; number of objects in game.
002AC2  3               	sta z80_b 		; set up the loop counter.
002AC2  3               skobj0:
002AC2  3               	lda scno		; current room number.
002AC2  3               	ldy #32
002AC2  3               	cmp (z80_hl),y		; is object in here?
002AC2  3               	bne :+
002AC2  3               	jsr skobj1		; yes, check coordinates.
002AC2  3               :
002AC2  3               	clc			; point to next object in table.
002AC2  3               	lda z80_l
002AC2  3               	adc #38			; size of each object.
002AC2  3               	sta z80_l
002AC2  3               	bcc :+
002AC2  3               	inc z80_h
002AC2  3               :
002AC2  3               	dec z80_b
002AC2  3               	bne skobj0		; repeat for all objects.
002AC2  3               
002AC2  3               	lda #255		; end of list and nothing found, return 255.
002AC2  3               	rts
002AC2  3               
002AC2  3               skobj1:
002AC2  3               	ldy #33			; point to y coordinate.
002AC2  3               	lda (z80_hl),y		; point to y coordinate.
002AC2  3               	sec
002AC2  3               	ldy #8
002AC2  3               	sbc (z80_ix),y 		; subtract sprite y.
002AC2  3               	clc
002AC2  3               	adc #15			; add sprite height minus one.
002AC2  3               	cmp #31			; within range?
002AC2  3               	bcs skobj2		; no, ignore object.
002AC2  3               
002AC2  3               	ldy #34			; point to x coordinate now.
002AC2  3               	lda (z80_hl),y 		; get coordinate.
002AC2  3               	sec
002AC2  3               	ldy #9
002AC2  3               	sbc (z80_ix),y 		; subtract the sprite x.
002AC2  3               	clc			; add sprite width minus one.
002AC2  3               	adc #15
002AC2  3               	cmp #31			; within range?
002AC2  3               	bcs skobj2		; no, ignore object.
002AC2  3               
002AC2  3               	pla			; remove return address from stack.
002AC2  3               	pla
002AC2  3               
002AC2  3               	lda numob 		; objects in game.
002AC2  3               	sec
002AC2  3               	sbc z80_b		; subtract loop counter.
002AC2  3               skobj2:
002AC2  3               	rts			; accumulator now points to object.
002AC2  3               .endif
002AC2  3               
002AC2  3               ;---------------------------------------------------------------------
002AC2  3               ; Spawn a new sprite.
002AC2  3               ;---------------------------------------------------------------------
002AC2  3               
002AC2  3               .if gflag
002AC2  3                 offset = 0
002AC2  3               .else
002AC2  3                 offset = 20
002AC2  3               .endif
002AC2  3               
002AC2  3               ;.repeat 343
002AC2  3               ;  .byte 0
002AC2  3               ;.endrep
002AC2  3               
002AC2  3               spawn:
002AC2  3  A9 36        	lda #<sprtab		; sprite table.
002AC4  3  85 66        	sta z80_l
002AC6  3  A9 3A        	lda #>sprtab
002AC8  3  85 67        	sta z80_h
002ACA  3               numsp1:
002ACA  3  A9 0C        	lda #NUMSPR		; number of sprites.
002ACC  3  85 rr        	sta spcnt
002ACE  3               spaw0:
002ACE  3  A0 00        	ldy #0
002AD0  3  B1 66        	lda (z80_hl),y		; get sprite type.
002AD2  3  C9 FF        	cmp #255		; is it an unused slot?
002AD4  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002AD6  3               
002AD6  3  18           	clc 			; point to next sprite in table.
002AD7  3  A5 66        	lda z80_l
002AD9  3  69 11        	adc #TABSIZ		; size of each entry.
002ADB  3  85 66        	sta z80_l
002ADD  3  90 02        	bcc :+
002ADF  3  E6 67        	inc z80_h
002AE1  3               :
002AE1  3  C6 rr        	dec spcnt		; one less iteration.
002AE3  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002AE5  3               
002AE5  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002AE5  3               
002AE5  3               spaw1:
002AE5  3  A5 69        	lda z80_i		; address of original sprite.
002AE7  3  48           	pha
002AE8  3  A5 68        	lda z80_x
002AEA  3  48           	pha
002AEB  3               
002AEB  3  A5 66        	lda z80_l		; store spawned sprite address.
002AED  3  85 rr        	sta spptr
002AEF  3  A5 67        	lda z80_h
002AF1  3  85 rr        	sta spptr+1
002AF3  3               
002AF3  3  A5 62        	lda z80_c
002AF5  3  A0 00        	ldy #0
002AF7  3  91 66        	sta (z80_hl),y 		; set the type.
002AF9  3  A0 05        	ldy #5
002AFB  3  91 66        	sta (z80_hl),y		; copy
002AFD  3               
002AFD  3  A5 63        	lda z80_b
002AFF  3  A0 01        	ldy #1
002B01  3  91 66        	sta (z80_hl),y		; set the image.
002B03  3  A0 06        	ldy #6
002B05  3  91 66        	sta (z80_hl),y		; copy
002B07  3               
002B07  3  A9 00        	lda #0 			; frame zero.
002B09  3  A0 02        	ldy #2
002B0B  3  91 66        	sta (z80_hl),y		; set frame.
002B0D  3  A0 07        	ldy #7
002B0F  3  91 66        	sta (z80_hl),y		; copy
002B11  3               
002B11  3  A0 08        	ldy #8
002B13  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002B15  3  A0 03        	ldy #3
002B17  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002B19  3  A0 08        	ldy #8
002B1B  3  91 66        	sta (z80_hl),y		; copy
002B1D  3               
002B1D  3  A0 09        	ldy #9
002B1F  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002B21  3  A0 04        	ldy #4
002B23  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002B25  3  A0 09        	ldy #9
002B27  3  91 66        	sta (z80_hl),y		; copy
002B29  3               
002B29  3  A0 0A        	ldy #10			; direction of original.
002B2B  3  B1 68        	lda (z80_ix),y
002B2D  3  91 66        	sta (z80_hl),y		; direction
002B2F  3               
002B2F  3  A9 00        	lda #0
002B31  3  A0 0B        	ldy #11
002B33  3  91 66        	sta (z80_hl),y		; reset parameter.
002B35  3  C8           	iny
002B36  3  91 66        	sta (z80_hl),y		; reset parameter.
002B38  3  C8           	iny
002B39  3  91 66        	sta (z80_hl),y		; reset parameter.
002B3B  3  C8           	iny
002B3C  3  91 66        	sta (z80_hl),y		; reset parameter.
002B3E  3               rtssp:
002B3E  3  A5 rr        	lda spptr		; address of new sprite.
002B40  3  85 68        	sta z80_x
002B42  3  A5 rr        	lda spptr+1
002B44  3  85 69        	sta z80_i
002B46  3               evis1:
002B46  3  20 15 3C     	jsr evnt09 		; call sprite initialisation event.
002B49  3               
002B49  3  A5 rr        	lda spptr 		; address of new sprite.
002B4B  3  85 68        	sta z80_x
002B4D  3  A5 rr        	lda spptr+1
002B4F  3  85 69        	sta z80_i
002B51  3  20 C5 34     	jsr sspria 		; display the new sprite.
002B54  3               
002B54  3  68           	pla			; address of original sprite.
002B55  3  85 68        	sta z80_x
002B57  3  68           	pla
002B58  3  85 69        	sta z80_i
002B5A  3               
002B5A  3  60           	rts
002B5B  3               
002B5B  3               ;spcnt:	.byte 0
002B5B  3               ;spptr:	.word 0			; spawned sprite pointer.
002B5B  3               ;seed:	.byte 0			; seed for random numbers.
002B5B  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B5F  3  30 30        
002B61  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B65  3  30 30        
002B67  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B6B  3  30 30        
002B6D  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B6F  3               
002B6F  3               ;----------------------------------------------------
002B6F  3               ; Check y-pos
002B6F  3               ;----------------------------------------------------
002B6F  3               
002B6F  3               checkx:
002B6F  3  A5 rr        	lda dispy		; y position.
002B71  3  C9 19        	cmp #ScrHeight			; off screen?
002B73  3  B0 01        	bcs :+
002B75  3  60           	rts			; no, it's okay.
002B76  3               :
002B76  3  68           	pla			; remove return address from stack.
002B77  3  85 66        	sta z80_l
002B79  3  68           	pla
002B7A  3  85 67        	sta z80_h
002B7C  3  60           	rts
002B7D  3               
002B7D  3               ;-----------------------------------------------
002B7D  3               ; Displays the current high score.
002B7D  3               ;-----------------------------------------------
002B7D  3               
002B7D  3               dhisc:
002B7D  3  A9 61        	lda #<hiscor 		; high score text.
002B7F  3  8D B4 2B     	sta dscor3+1
002B82  3  8D D8 2B     	sta bscor3+1
002B85  3  A9 2B        	lda #>hiscor
002B87  3  8D B5 2B     	sta dscor3+2
002B8A  3  8D D9 2B     	sta bscor3+2
002B8D  3  4C A0 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B90  3               
002B90  3               ;------------------------------------------------------
002B90  3               ; Displays the current score.
002B90  3               ;------------------------------------------------------
002B90  3               
002B90  3               ;.repeat 322
002B90  3               ;  .byte 0
002B90  3               ;.endrep
002B90  3               
002B90  3               dscor:
002B90  3  A9 5B        	lda #<score		; score text.
002B92  3  8D B4 2B     	sta dscor3+1
002B95  3  8D D8 2B     	sta bscor3+1
002B98  3  A9 2B        	lda #>score
002B9A  3  8D B5 2B     	sta dscor3+2
002B9D  3  8D D9 2B     	sta bscor3+2
002BA0  3               dscor1:
002BA0  3  8C D4 2B     	sty tmpscr
002BA3  3  20 52 32     	jsr preprt		; set up font and print position.
002BA6  3  20 6F 2B     	jsr checkx		; make sure we're in a printable range.
002BA9  3               
002BA9  3               ;	lda #6			; digits to display.
002BA9  3               ;	sta z80_b
002BA9  3  A5 rr        	lda prtmod		; get print mode.
002BAB  3  F0 03        	beq :+			; standard size text?
002BAD  3  4C D5 2B     	jmp bscor0		; no, show double-height.
002BB0  3               :
002BB0  3               dscor0:
002BB0  3               ;	ldy #0
002BB0  3               ;	lda (z80_hl),y 		; fetch character.
002BB0  3  AC D4 2B     	ldy tmpscr
002BB3  3               dscor3:
002BB3  3  B9 5B 2B     	lda score,y
002BB6  3  20 02 2D     	jsr pchar 		; display character.
002BB9  3  E6 rr        	inc dispx		; move along x coordinate
002BBB  3               
002BBB  3               ;	inc z80_l		; next score column.
002BBB  3               ;	bne :+
002BBB  3               ;	inc z80_h
002BBB  3               ;:
002BBB  3  EE D4 2B     	inc tmpscr
002BBE  3  C6 63        	dec z80_b
002BC0  3  D0 EE        	bne dscor0 		; repeat for all digits.
002BC2  3               dscor2:
002BC2  3  AD 25 3B     	lda bcolour
002BC5  3  20 02 2D     	jsr pchar
002BC8  3  20 3F 32     	jsr nexpos
002BCB  3               
002BCB  3  A5 rr        	lda dispx 		; set up display coordinates.
002BCD  3  85 rr        	sta charx
002BCF  3  A5 rr        	lda dispy
002BD1  3  85 rr        	sta chary
002BD3  3  60           	rts
002BD4  3               
002BD4  3  00           tmpscr:	.byte 0
002BD5  3               ;------------------------------------------------------
002BD5  3               ; Displays the current score in double-height characters.
002BD5  3               ;
002BD5  3               ; Input:
002BD5  3               ;  B  = digit number
002BD5  3               ;  HL = score string
002BD5  3               ;------------------------------------------------------
002BD5  3               
002BD5  3               bscor0:
002BD5  3               ;	ldy #0
002BD5  3               
002BD5  3               ;	lda (z80_hl),y 		; fetch character.
002BD5  3  A4 rr        	ldy tmp
002BD7  3               bscor3:
002BD7  3  B9 5B 2B     	lda score,y
002BDA  3  20 10 32     	jsr bchar 		; display big char.
002BDD  3               
002BDD  3               ;	inc z80_l 		; next score column.
002BDD  3               ;	bne :+
002BDD  3               ;	inc z80_h
002BDD  3               ;:
002BDD  3  E6 rr        	inc tmp
002BDF  3  C6 63        	dec z80_b
002BE1  3  F0 03        	beq :+
002BE3  3  4C D5 2B     	jmp bscor0 		; repeat for all digits.
002BE6  3               :
002BE6  3  4C C2 2B     	jmp dscor2 		; tidy up line and column variables.
002BE9  3               
002BE9  3               ;-----------------------------------------------------
002BE9  3               ; Adds number in the hl pair to the score.
002BE9  3               ;-----------------------------------------------------
002BE9  3               
002BE9  3               addsc:
002BE9  3  A9 5C        	lda #<(score+1) 	; ten thousands column.
002BEB  3  85 64        	sta z80_e
002BED  3  A9 2B        	lda #>(score+1)
002BEF  3  85 65        	sta z80_d
002BF1  3  A9 10        	lda #<10000		; amount to add each time.
002BF3  3  85 62        	sta z80_c
002BF5  3  A9 27        	lda #>10000
002BF7  3  85 63        	sta z80_b
002BF9  3  20 3D 2C     	jsr incsc		; add to score.
002BFC  3               
002BFC  3  E6 64        	inc z80_e		; thousands column.
002BFE  3  D0 02        	bne :+
002C00  3  E6 65        	inc z80_d
002C02  3               :
002C02  3  A9 E8        	lda #<1000		; amount to add each time.
002C04  3  85 62        	sta z80_c
002C06  3  A9 03        	lda #>1000
002C08  3  85 63        	sta z80_b
002C0A  3  20 3D 2C     	jsr incsc 		; add to score.
002C0D  3               
002C0D  3  E6 64        	inc z80_e		; hundreds column.
002C0F  3  D0 02        	bne :+
002C11  3  E6 65        	inc z80_d
002C13  3               :
002C13  3  A9 64        	lda #<100		; amount to add each time.
002C15  3  85 62        	sta z80_c
002C17  3  A9 00        	lda #>100
002C19  3  85 63        	sta z80_b
002C1B  3  20 3D 2C     	jsr incsc		; add to score.
002C1E  3               
002C1E  3  E6 64        	inc z80_e 		; tens column.
002C20  3  D0 02        	bne :+
002C22  3  E6 65        	inc z80_d
002C24  3               :
002C24  3  A9 0A        	lda #<10		; amount to add each time.
002C26  3  85 62        	sta z80_c
002C28  3  A9 00        	lda #>10
002C2A  3  85 63        	sta z80_b
002C2C  3  20 3D 2C     	jsr incsc 		; add to score.
002C2F  3               
002C2F  3  E6 64        	inc z80_e		; units column.
002C31  3  D0 02        	bne :+
002C33  3  E6 65        	inc z80_d
002C35  3               :
002C35  3  A9 01        	lda #<1			; units.
002C37  3  85 62        	sta z80_c
002C39  3  A9 00        	lda #>1
002C3B  3  85 63        	sta z80_b
002C3D  3               incsc:
002C3D  3  A5 67        	lda z80_h		; store amount to add.
002C3F  3  48           	pha
002C40  3  A5 66        	lda z80_l
002C42  3  48           	pha
002C43  3               
002C43  3  38           	sec			; subtract from amount to add.
002C44  3  A5 66        	lda z80_l
002C46  3  E5 62        	sbc z80_c
002C48  3  85 66        	sta z80_l
002C4A  3  A5 67        	lda z80_h
002C4C  3  E5 63        	sbc z80_b
002C4E  3  85 67        	sta z80_h
002C50  3  90 14        	bcc incsc0		; too much, restore value.
002C52  3               
002C52  3  68           	pla			; delete the previous amount from the stack.
002C53  3  68           	pla
002C54  3               
002C54  3  A5 65        	lda z80_d 		; store column position.
002C56  3  48           	pha
002C57  3  A5 64        	lda z80_e
002C59  3  48           	pha
002C5A  3  20 6D 2C     	jsr incsc2		; do the increment.
002C5D  3               
002C5D  3  68           	pla			; restore column.
002C5E  3  85 64        	sta z80_e
002C60  3  68           	pla
002C61  3  85 65        	sta z80_d
002C63  3  4C 3D 2C     	jmp incsc		; repeat until all added.
002C66  3               
002C66  3               incsc0:
002C66  3  68           	pla			; restore previous value.
002C67  3  85 66        	sta z80_l
002C69  3  68           	pla
002C6A  3  85 67        	sta z80_h
002C6C  3  60           	rts
002C6D  3               incsc2:
002C6D  3  A0 00        	ldy #0
002C6F  3  B1 64        	lda (z80_de),y 		; get amount.
002C71  3  18           	clc
002C72  3  69 01        	adc #1			; add one to column.
002C74  3  91 64        	sta (z80_de),y		; write new column total.
002C76  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C78  3  B0 01        	bcs :+
002C7A  3  60           	rts			; no, carry on.
002C7B  3               :
002C7B  3  A9 30        	lda #'0'		; make it zero.
002C7D  3  91 64        	sta (z80_de),y		; write new column total.
002C7F  3  C6 64        	dec z80_e		; back one column.
002C81  3  D0 02        	bne :+
002C83  3  C6 65        	dec z80_d
002C85  3               :
002C85  3  4C 6D 2C     	jmp incsc2
002C88  3               
002C88  3               ;------------------------------------
002C88  3               ; Add bonus to score and reset bonus
002C88  3               ;------------------------------------
002C88  3               
002C88  3               addbo:
002C88  3  A2 05        	ldx #5			; last digit.
002C8A  3  18           	clc
002C8B  3               addbo0:
002C8B  3  BD 5B 2B     	lda score,x		; get score.
002C8E  3  7D 67 2B     	adc bonus,x		; add bonus.
002C91  3  38           	sec			; 0 to 18.
002C92  3  E9 30        	sbc #48
002C94  3  48           	pha
002C95  3  A9 30        	lda #'0'
002C97  3  9D 67 2B     	sta bonus,x
002C9A  3  68           	pla
002C9B  3  C9 3A        	cmp #58
002C9D  3  90 03        	bcc addbo1
002C9F  3  38           	sec
002CA0  3  E9 0A        	sbc #10
002CA2  3               addbo1:
002CA2  3  9D 5B 2B     	sta score,x		; zeroise bonus.
002CA5  3  CA           	dex			; next digit.
002CA6  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002CA8  3  60           	rts
002CA9  3               
002CA9  3               ;------------------------------------
002CA9  3               ; Swap score and bonus.
002CA9  3               ;------------------------------------
002CA9  3               
002CA9  3               swpsb:
002CA9  3  A2 05        	ldx #5			; digits to add.
002CAB  3               swpsb0:
002CAB  3  BD 5B 2B     	lda score,x 		; get score digits.
002CAE  3  48           	pha			; save digit
002CAF  3  BD 67 2B     	lda bonus,x 		; get bonus digits.
002CB2  3  9D 5B 2B     	sta score,x		; switch score-bonus
002CB5  3  68           	pla
002CB6  3  9D 67 2B     	sta bonus,x
002CB9  3  CA           	dex 			; repeat for all 6 digits.
002CBA  3  10 EF        	bpl swpsb0
002CBC  3  60           	rts
002CBD  3               
002CBD  3               ;----------------------------------------------------
002CBD  3               ; Get print address.
002CBD  3               ;----------------------------------------------------
002CBD  3               
002CBD  3               gprad:
002CBD  3  A5 rr        	lda dispy
002CBF  3  85 rr        	sta tmp
002CC1  3  0A           	asl a
002CC2  3  18           	clc
002CC3  3  65 rr        	adc tmp
002CC5  3  A8           	tay
002CC6  3  B9 00 DC     	lda SCADTB_lb,y
002CC9  3  18           	clc
002CCA  3  65 rr        	adc dispx
002CCC  3  85 rr        	sta scraddr
002CCE  3  B9 00 DD     	lda SCADTB_hb,y
002CD1  3  69 00        	adc #0
002CD3  3  85 rr        	sta scraddr+1
002CD5  3  60           	rts
002CD6  3               
002CD6  3               ;--------------------------------------------------------------
002CD6  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002CD6  3               ;
002CD6  3               ; Output:
002CD6  3               ;  bufaddr = MAP + dispy*32 + dispx
002CD6  3               ;--------------------------------------------------------------
002CD6  3               
002CD6  3               pradd:
002CD6  3  A5 rr        	lda dispy 		; y coordinate.
002CD8  3  85 rr        	sta bufaddr
002CDA  3  A9 00        	lda #0
002CDC  3  85 rr        	sta bufaddr+1
002CDE  3  06 rr        	asl bufaddr  		; multiply char by 32
002CE0  3  26 rr        	rol bufaddr+1
002CE2  3  06 rr        	asl bufaddr
002CE4  3  26 rr        	rol bufaddr+1
002CE6  3  06 rr        	asl bufaddr
002CE8  3  26 rr        	rol bufaddr+1
002CEA  3  06 rr        	asl bufaddr
002CEC  3  26 rr        	rol bufaddr+1
002CEE  3  06 rr        	asl bufaddr
002CF0  3  26 rr        	rol bufaddr+1
002CF2  3  18           	clc			; add address of MAP graphics.
002CF3  3  A5 rr        	lda bufaddr
002CF5  3  65 rr        	adc dispx
002CF7  3  69 00        	adc #<MAP
002CF9  3  85 rr        	sta bufaddr
002CFB  3  A5 rr        	lda bufaddr+1
002CFD  3  69 D8        	adc #>MAP
002CFF  3  85 rr        	sta bufaddr+1
002D01  3  60           	rts
002D02  3               
002D02  3               ;----------------------------------------------------
002D02  3               ; Display character in A at dispx,dispy.
002D02  3               ;
002D02  3               ; Input:
002D02  3               ;  A 	   = character to print
002D02  3               ;----------------------------------------------------
002D02  3               
002D02  3               pchar:
002D02  3  48           	pha
002D03  3  20 BD 2C     	jsr gprad		; get screen address.
002D06  3               .if gflag
002D06  3               	and andeor
002D06  3               	eor andeor+1
002D06  3               .endif
002D06  3               .if iflag
002D06  3               	eor #$ff
002D06  3               .endif
002D06  3  68           	pla
002D07  3  A0 00        	ldy #0
002D09  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D0B  3  60           	rts
002D0C  3               
002D0C  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002D10  3  60 40 20 00  
002D14  3               
002D14  3               ;----------------------------------------------
002D14  3               
002D14  3               ; Print attributes, properties and pixels.
002D14  3               ;
002D14  3               ; Input:
002D14  3               ;  A	= tile number
002D14  3               ;----------------------------------------------
002D14  3               
002D14  3               ;.repeat 294
002D14  3               ;  .byte 0
002D14  3               ;.endrep
002D14  3               
002D14  3               pbpattr:			; entry PUTBLOCK command
002D14  3  A4 rr        	ldy charx
002D16  3  84 rr        	sty dispx
002D18  3  A4 rr        	ldy chary
002D1A  3  84 rr        	sty dispy
002D1C  3               pattr:
002D1C  3               .if aflag
002D1C  3               	pha
002D1C  3               	jsr wbloc		; save blockinfo
002D1C  3               	pla
002D1C  3               .endif
002D1C  3               
002D1C  3               pattr2:
002D1C  3  85 63        	sta z80_b		; store cell in b register for now.
002D1E  3  AA           	tax
002D1F  3  BD D9 3C     	lda bprop,x 		; block properties.
002D22  3  85 62        	sta z80_c
002D24  3  C9 08        	cmp #COLECT
002D26  3  D0 05        	bne :+
002D28  3  A5 63        	lda z80_b
002D2A  3  8D 3B 2D     	sta colpatt
002D2D  3               :
002D2D  3  20 D6 2C     	jsr pradd 		; get property buffer address.
002D30  3  A5 62        	lda z80_c
002D32  3  A0 00        	ldy #0
002D34  3  91 rr        	sta (bufaddr),y 	; write property.
002D36  3  A5 63        	lda z80_b 		; restore cell.
002D38  3  4C 3C 2D     	jmp panp
002D3B  3               ; Print attributes, no properties.
002D3B  3               
002D3B  3               ;.repeat 263
002D3B  3               ; .byte 0
002D3B  3               ;.endrep
002D3B  3               
002D3B  3  00           colpatt:	.byte 0
002D3C  3               
002D3C  3               panp:
002D3C  3               ;	sta z80_e		; displacement in e.
002D3C  3               ;	lda #0
002D3C  3               ;	sta z80_d		; no high byte.
002D3C  3               ;	asl z80_e  		; multiply char by 8.
002D3C  3               ;	rol z80_d
002D3C  3               ;	asl z80_e
002D3C  3               ;	rol z80_d
002D3C  3               ;	asl z80_e
002D3C  3               ;	rol z80_d
002D3C  3  0A           	asl a
002D3D  3  18           	clc
002D3E  3               ;	lda z80_e
002D3E  3  69 B9        	adc #<chgfx 		; address of graphics.
002D40  3  85 rr        	sta tileaddr
002D42  3  A5 65        	lda z80_d
002D44  3  69 3C        	adc #>chgfx
002D46  3  85 rr        	sta tileaddr+1
002D48  3  20 BD 2C     	jsr gprad 		; get screen address.
002D4B  3               panp0:
002D4B  3  A0 00        	ldy #0
002D4D  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002D4F  3               .if iflag
002D4F  3               	eor #$ff		; Invert
002D4F  3               .endif
002D4F  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D51  3  E6 rr        	inc dispx 		; move along one.
002D53  3  E6 rr        	inc charx
002D55  3  60           	rts
002D56  3               
002D56  3               ;----------------------------------------------
002D56  3               ; Write block
002D56  3               ;----------------------------------------------
002D56  3               
002D56  3               .if aflag
002D56  3               wbloc:
002D56  3               	ldy #3
002D56  3               	sta (pbptr),y		; store block number
002D56  3               	dey
002D56  3               	lda dispx
002D56  3               	sta (pbptr),y		; write x position of block.
002D56  3               	dey
002D56  3               	lda dispy
002D56  3               	sta (pbptr),y		; write y position of block.
002D56  3               	dey
002D56  3               	lda scno
002D56  3               	sta (pbptr),y		; write screen.
002D56  3               	clc			; point to next free location
002D56  3               	lda pbptr
002D56  3               	adc #4
002D56  3               	sta pbptr
002D56  3               	bcc :+
002D56  3               	inc pbptr+1
002D56  3               :
002D56  3               	rts
002D56  3               .endif
002D56  3               
002D56  3               ;----------------------------------------------
002D56  3               ; Print character pixels, no more.
002D56  3               ;
002D56  3               ; Input:
002D56  3               ;  A	= character to print
002D56  3               ;----------------------------------------------
002D56  3               
002D56  3               pchr:
002D56  3  20 02 2D     	jsr pchar 		; show character in accumulator.
002D59  3  E6 rr        	inc dispx		; move along one.
002D5B  3  60           	rts
002D5C  3               
002D5C  3               ;----------------------------------------------------
002D5C  3               ; Shifter sprite routine for objects.
002D5C  3               ;----------------------------------------------------
002D5C  3               
002D5C  3               .if oflag
002D5C  3               sprit7:
002D5C  3               	lda z80_b
002D5C  3               	beq sprit0
002D5C  3               	sta z80_a
002D5C  3               sprit3:
002D5C  3               	lsr spr			; shift into position.
002D5C  3               	ror spr+1
002D5C  3               	ror spr+2
002D5C  3               	dec z80_a		; one less iteration.
002D5C  3               	bne sprit3
002D5C  3               sprit0:
002D5C  3               	rts 			; now apply to screen.
002D5C  3               
002D5C  3               ;----------------------------------------------------
002D5C  3               ; Draw sprite
002D5C  3               ;----------------------------------------------------
002D5C  3               
002D5C  3               sprite:
002D5C  3               	stx xtmp		; Save X-reg
002D5C  3               	jsr scadd 		; get screen address in scraddr.
002D5C  3               
002D5C  3               	lda dispx 		; x position.
002D5C  3               	and #7 			; position straddling cells.
002D5C  3               	sta z80_b		; store in b register.
002D5C  3               
002D5C  3               	lda z80_l		; store sprite graphic address.
002D5C  3               	sta sprit1+1
002D5C  3               	sta sprit2+1
002D5C  3               	lda z80_h
002D5C  3               	sta sprit1+2
002D5C  3               	sta sprit2+2
002D5C  3               
002D5C  3               	ldx #0			; pixel height.
002D5C  3               	ldy #0
002D5C  3               sprit1:
002D5C  3               	lda objdta,x		; fetch first byte.
002D5C  3               	sta spr
002D5C  3               	inx
002D5C  3               sprit2:
002D5C  3               	lda objdta,x
002D5C  3               	sta spr+1
002D5C  3               
002D5C  3               	lda #0
002D5C  3               	sta spr+2
002D5C  3               	jsr sprit7		; shift sprite
002D5C  3               
002D5C  3               	dex
002D5C  3               	lda spr			; fetch graphic.
002D5C  3               	ldy spritetab,x
002D5C  3               	eor (scraddr),y		; merge with screen image.
002D5C  3               	sta (scraddr),y		; write to screen.
002D5C  3               	inx			; next screen byte.
002D5C  3               
002D5C  3               	lda spr+1		; fetch graphic.
002D5C  3               	ldy spritetab,x
002D5C  3               	eor (scraddr),y		; merge with screen image.
002D5C  3               	sta (scraddr),y		; write to screen.
002D5C  3               	iny
002D5C  3               
002D5C  3               	lda spr+2		; fetch graphic.
002D5C  3               	eor (scraddr),y		; merge with screen image.
002D5C  3               	sta (scraddr),y		; write to screen.
002D5C  3               
002D5C  3               	inx			; next source byte.
002D5C  3               	cpx #16
002D5C  3               	bne :+
002D5C  3               	inc scraddr+1
002D5C  3               :
002D5C  3               	cpx #32
002D5C  3               	bne sprit1		; repeat
002D5C  3               
002D5C  3               	ldx xtmp		; retreive X-reg
002D5C  3               	rts
002D5C  3               
002D5C  3               spritetab:
002D5C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D5C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D5C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D5C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D5C  3               
002D5C  3               spr:	.byte 0,0,0
002D5C  3               
002D5C  3               ;xtmp:	.byte 0
002D5C  3               .endif
002D5C  3               
002D5C  3               ;-----------------------------------------------------------
002D5C  3               ; Get room address.
002D5C  3               ;-----------------------------------------------------------
002D5C  3               
002D5C  3               ;.repeat 273
002D5C  3               ;  .byte 0
002D5C  3               ;.endrep
002D5C  3               
002D5C  3               groom:
002D5C  3  A6 rr        	ldx scno 		; screen number.
002D5E  3  A0 00        	ldy #0
002D60  3               groomx:
002D60  3  A9 1D        	lda #<scdat 		; pointer to screens.
002D62  3  85 66        	sta z80_l
002D64  3  A9 3D        	lda #>scdat
002D66  3  85 67        	sta z80_h
002D68  3               groom1:
002D68  3  E0 00        	cpx #0			; is it the first one?
002D6A  3  F0 15        	beq groom0 		; no more screens to skip.
002D6C  3               
002D6C  3  18           	clc
002D6D  3  A5 66        	lda z80_l
002D6F  3  79 1D 3D     	adc scdat,y 		; low byte of screen size.
002D72  3  85 66        	sta z80_l
002D74  3  C8           	iny			; point to high byte.
002D75  3  A5 67        	lda z80_h
002D77  3  79 1D 3D     	adc scdat,y 		; high byte of screen size.
002D7A  3  85 67        	sta z80_h
002D7C  3  C8           	iny			; next address.
002D7D  3               
002D7D  3  CA           	dex 			; one less iteration.
002D7E  3  4C 68 2D     	jmp groom1 		; loop until we reach the end.
002D81  3               groom0:
002D81  3  AD CD 3D     	lda numsc 		; add displacement.
002D84  3  0A           	asl a
002D85  3  18           	clc			; add double displacement to address.
002D86  3  65 66        	adc z80_l
002D88  3  85 66        	sta z80_l
002D8A  3  A5 67        	lda z80_h
002D8C  3  69 00        	adc #0
002D8E  3  85 67        	sta z80_h
002D90  3  60           	rts
002D91  3               
002D91  3               ;-----------------------------------------------------------
002D91  3               ; Draw present room.
002D91  3               ;-----------------------------------------------------------
002D91  3               
002D91  3               droom:
002D91  3  AD 23 28     	lda wintop 		; window top.
002D94  3  85 rr        	sta dispy		; set cursor y position.
002D96  3               droom2:
002D96  3  20 5C 2D     	jsr groom 		; get address of current room.
002D99  3  A9 00        	lda #0	 		; zero in accumulator.
002D9B  3  85 rr        	sta comcnt 		; reset compression counter.
002D9D  3  AD 25 28     	lda winhgt 		; height of window.
002DA0  3  85 rr        	sta rrow		; set row counter
002DA2  3               droom0:
002DA2  3  AD 24 28     	lda winlft 		; window left edge.
002DA5  3  85 rr        	sta dispx 		; set cursor x position.
002DA7  3  AD 26 28     	lda winwid 		; width of window.
002DAA  3  85 rr        	sta rcol		; set column counter
002DAC  3               droom1:
002DAC  3  20 BD 2D     	jsr flbyt 		; decompress next byte on the fly.
002DAF  3  20 1C 2D     	jsr pattr2 		; show attributes and block.
002DB2  3  C6 rr        	dec rcol		; one less column.
002DB4  3  D0 F6        	bne droom1 		; repeat for entire line.
002DB6  3  E6 rr        	inc dispy		; move down one line.
002DB8  3  C6 rr        	dec rrow 		; one less row.
002DBA  3  D0 E6        	bne droom0 		; repeat for all rows.
002DBC  3  60           	rts
002DBD  3               
002DBD  3               ;rcol:	.byte 0
002DBD  3               ;rrow:	.byte 0
002DBD  3               
002DBD  3               ;----------------------------------------------
002DBD  3               ; Decompress bytes on-the-fly.
002DBD  3               ;----------------------------------------------
002DBD  3               
002DBD  3               flbyt:
002DBD  3  A5 rr        	lda comcnt 		; compression counter.
002DBF  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002DC1  3               
002DC1  3  A0 00        	ldy #0
002DC3  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002DC5  3  E6 66        	inc z80_l 		; point to next cell.
002DC7  3  D0 02        	bne :+
002DC9  3  E6 67        	inc z80_h
002DCB  3               :
002DCB  3  C9 FF        	cmp #255 		; is this byte a control code?
002DCD  3  F0 01        	beq :+
002DCF  3  60           	rts 			; no, this byte is uncompressed.
002DD0  3               :
002DD0  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002DD2  3  85 rr        	sta combyt 		; set up the type.
002DD4  3  E6 66        	inc z80_l 		; point to quantity.
002DD6  3  D0 02        	bne :+
002DD8  3  E6 67        	inc z80_h
002DDA  3               :
002DDA  3  B1 66        	lda (z80_hl),y 		; get quantity.
002DDC  3  E6 66        	inc z80_l 		; point to next byte.
002DDE  3  D0 02        	bne :+
002DE0  3  E6 67        	inc z80_h
002DE2  3               :
002DE2  3               flbyt1:
002DE2  3  85 rr        	sta comcnt 		; store new quantity.
002DE4  3  C6 rr        	dec comcnt		; one less.
002DE6  3  A5 rr        	lda combyt 		; byte to expand.
002DE8  3  60           	rts
002DE9  3               
002DE9  3               ;combyt:	.byte 0			; byte type compressed.
002DE9  3               ;comcnt:	.byte 0			; compression counter.
002DE9  3               
002DE9  3               ;------------------------------------------
002DE9  3               ; Ladder down check.
002DE9  3               ;
002DE9  3               ; Input:
002DE9  3               ;  IX = sprite pointer
002DE9  3               ;------------------------------------------
002DE9  3               
002DE9  3               .if lflag
002DE9  3               laddd:
002DE9  3               	ldy #9
002DE9  3               	lda (z80_ix),y		; x coordinate.
002DE9  3               	sta dispx
002DE9  3               
002DE9  3               	ldy #8
002DE9  3               	lda (z80_ix),y		; y coordinate.
002DE9  3               	and #254		; make it even.
002DE9  3               	sta (z80_ix),y 		; reset it.
002DE9  3               	clc 			; look down 16 pixels.
002DE9  3               numsp5:
002DE9  3               	adc #SPR_HGT
002DE9  3               	sta dispy		; coords in dispx,dispy.
002DE9  3               	jmp laddv
002DE9  3               
002DE9  3               ;------------------------------------------
002DE9  3               ; Ladder up check.
002DE9  3               ;
002DE9  3               ; Input:
002DE9  3               ;  IX = sprite pointer
002DE9  3               ;
002DE9  3               ; Output:
002DE9  3               ;  A  = 0 is ok, A <>0 is not ok
002DE9  3               ;------------------------------------------
002DE9  3               
002DE9  3               laddu:
002DE9  3               	ldy #9
002DE9  3               	lda (z80_ix),y		; x coordinate.
002DE9  3               	sta dispx
002DE9  3               
002DE9  3               	ldy #8
002DE9  3               	lda (z80_ix),y		; y coordinate.
002DE9  3               	and #254 		; make it even.
002DE9  3               	sta (z80_ix),y		; reset it.
002DE9  3               	clc 			; look 2 pixels above feet.
002DE9  3               numsp6:
002DE9  3               	adc #SPR_HGT-2
002DE9  3               	sta dispy		; coords in dispx,dispy.
002DE9  3               laddv:
002DE9  3               	jsr tstbl 		; get map address.
002DE9  3               	jsr ldchk 		; standard ladder check.
002DE9  3               	beq :+
002DE9  3               	rts 			; no way through.
002DE9  3               :
002DE9  3               	inc bufaddr 		; look right one cell.
002DE9  3               	bne :+
002DE9  3               	inc bufaddr+1
002DE9  3               :
002DE9  3               	jsr ldchk 		; do the check.
002DE9  3               	beq :+
002DE9  3               	rts 			; impassable.
002DE9  3               :
002DE9  3               	lda dispx 		; y coordinate.
002DE9  3               	and #7 			; position straddling block cells.
002DE9  3               	bne :+
002DE9  3               	rts 			; no more checks needed.
002DE9  3               :
002DE9  3               	inc bufaddr 		; look to third cell.
002DE9  3               	bne :+
002DE9  3               	inc bufaddr+1
002DE9  3               :
002DE9  3               	jsr ldchk 		; do the check.
002DE9  3               	rts  			; return with zero flag set accordingly.
002DE9  3               .endif
002DE9  3               
002DE9  3               ;---------------------------------------------------------
002DE9  3               ; Can go up check.
002DE9  3               ;
002DE9  3               ; Input:
002DE9  3               ;  IX = sprite pointer
002DE9  3               ;
002DE9  3               ; Output:
002DE9  3               ;  A  = 0 is ok, A <>0 is not ok
002DE9  3               ;---------------------------------------------------------
002DE9  3               
002DE9  3               cangu:
002DE9  3  A0 09        	ldy #9
002DEB  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DED  3  85 rr        	sta dispx
002DEF  3  A0 08        	ldy #8
002DF1  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002DF3  3  38           	sec
002DF4  3  E9 02        	sbc #2
002DF6  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DF8  3  20 93 30     	jsr tstbl 		; get map address.
002DFB  3  20 AB 2F     	jsr lrchk 		; standard left/right check.
002DFE  3  F0 01        	beq :+
002E00  3  60           	rts			; no way through.
002E01  3               :
002E01  3  E6 rr        	inc bufaddr		; look right one cell.
002E03  3  D0 02        	bne :+
002E05  3  E6 rr        	inc bufaddr+1
002E07  3               :
002E07  3  20 AB 2F     	jsr lrchk 		; do the check.
002E0A  3  F0 01        	beq :+
002E0C  3  60           	rts			; impassable.
002E0D  3               :
002E0D  3  A5 rr        	lda dispx		; x coordinate.
002E0F  3  29 07        	and #7			; position straddling block cells.
002E11  3  D0 01        	bne :+
002E13  3  60           	rts			; no more checks needed.
002E14  3               :
002E14  3  E6 rr        	inc bufaddr		; look to third cell.
002E16  3  D0 02        	bne :+
002E18  3  E6 rr        	inc bufaddr+1
002E1A  3               :
002E1A  3  20 AB 2F     	jsr lrchk		; do the check.
002E1D  3  60           	rts 			; return with zero flag set accordingly.
002E1E  3               
002E1E  3               ;---------------------------------------------------------
002E1E  3               ; Can go down check.
002E1E  3               ;
002E1E  3               ; Input:
002E1E  3               ;  IX = sprite pointer
002E1E  3               ;
002E1E  3               ; Output:
002E1E  3               ;  A  = 0 is ok, A <>0 is not ok
002E1E  3               ;---------------------------------------------------------
002E1E  3               
002E1E  3               ;.repeat 264
002E1E  3               ;  .byte 0
002E1E  3               ;.endrep
002E1E  3               
002E1E  3               cangd:
002E1E  3  A0 09        	ldy #9
002E20  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E22  3  85 rr        	sta dispx
002E24  3  A0 08        	ldy #8
002E26  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E28  3  18           	clc
002E29  3               numsp3:
002E29  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002E2B  3  85 rr        	sta dispy		; coords in dispx,dispy.
002E2D  3  20 93 30     	jsr tstbl 		; get map address.
002E30  3  20 C0 2F     	jsr plchk 		; block, platform check.
002E33  3  F0 01        	beq :+
002E35  3  60           	rts			; no way through.
002E36  3               :
002E36  3  E6 rr        	inc bufaddr		; look right one cell.
002E38  3  D0 02        	bne :+
002E3A  3  E6 rr        	inc bufaddr+1
002E3C  3               :
002E3C  3  20 C0 2F     	jsr plchk		; block, platform check.
002E3F  3  F0 01        	beq :+
002E41  3  60           	rts			; impassable.
002E42  3               :
002E42  3  A5 rr        	lda dispx		; x coordinate.
002E44  3  29 07        	and #7			; position straddling block cells.
002E46  3  D0 01        	bne :+
002E48  3  60           	rts			; no more checks needed.
002E49  3               :
002E49  3  E6 rr        	inc bufaddr		; look to third cell.
002E4B  3  D0 02        	bne :+
002E4D  3  E6 rr        	inc bufaddr+1
002E4F  3               :
002E4F  3  20 C0 2F     	jsr plchk		; block, platform check.
002E52  3  60           	rts			; return with zero flag set accordingly.
002E53  3               
002E53  3               ;---------------------------------------------------------
002E53  3               ; Can go left check.
002E53  3               ;
002E53  3               ; Input:
002E53  3               ;  IX = sprite pointer
002E53  3               ;
002E53  3               ; Output:
002E53  3               ;  A  = 0 is ok, A <>0 is not ok
002E53  3               ;---------------------------------------------------------
002E53  3               
002E53  3               cangl:
002E53  3  A0 08        	ldy #8
002E55  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E57  3  85 rr        	sta dispy
002E59  3  A0 09        	ldy #9
002E5B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E5D  3  38           	sec
002E5E  3  E9 02        	sbc #2			; look left 2 pixels.
002E60  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E62  3  4C 84 2F     	jmp cangh		; test if we can go there.
002E65  3               
002E65  3               ;---------------------------------------------------------
002E65  3               ; Can go right check.
002E65  3               ;
002E65  3               ; Input:
002E65  3               ;  IX = sprite pointer
002E65  3               ;
002E65  3               ; Output:
002E65  3               ;  A  = 0 is ok, A <>0 is not ok
002E65  3               ;---------------------------------------------------------
002E65  3               
002E65  3  00 00 00 00  .repeat 272
002E69  3  00 00 00 00  
002E6D  3  00 00 00 00  
002F75  3                 .byte 0
002F75  3               .endrep
002F75  3               
002F75  3               cangr:
002F75  3  A0 08        	ldy #8
002F77  3  B1 68        	lda (z80_ix),y		; y coordinate.
002F79  3  85 rr        	sta dispy
002F7B  3  A0 09        	ldy #9
002F7D  3  B1 68        	lda (z80_ix),y		; x coordinate.
002F7F  3  18           	clc
002F80  3  69 10        	adc #16			; look right 16 pixels.
002F82  3  85 rr        	sta dispx		; coords in dispx,dispy.
002F84  3               cangh:
002F84  3               cangh2:
002F84  3  A9 02        	lda #(SPR_HGT/8+1)	; default rows to write.
002F86  3  85 63        	sta z80_b
002F88  3  A5 rr        	lda dispy		; y position.
002F8A  3  29 07        	and #7			; does x straddle cells?
002F8C  3  D0 02        	bne cangh0		; yes, loop counter is good.
002F8E  3  C6 63        	dec z80_b		; one less row to write.
002F90  3               cangh0:
002F90  3  20 93 30     	jsr tstbl		; get map address.
002F93  3               cangh1:
002F93  3  20 AB 2F     	jsr lrchk		; standard left/right check.
002F96  3  F0 01        	beq :+
002F98  3  60           	rts			; no way through.
002F99  3               :
002F99  3  48           	pha
002F9A  3  18           	clc
002F9B  3  A5 rr        	lda bufaddr
002F9D  3  69 20        	adc #32			; look down.
002F9F  3  85 rr        	sta bufaddr
002FA1  3  90 02        	bcc :+
002FA3  3  E6 rr        	inc bufaddr+1
002FA5  3               :
002FA5  3  68           	pla
002FA6  3               
002FA6  3  C6 63        	dec z80_b
002FA8  3  D0 E9        	bne cangh1
002FAA  3  60           	rts
002FAB  3               
002FAB  3               ;-------------------------------------
002FAB  3               ; Check left/right movement is okay.
002FAB  3               ;
002FAB  3               ; Input:
002FAB  3               ;  bufaddr = MAP + x/8 + y/8*32
002FAB  3               ;
002FAB  3               ; Output:
002FAB  3               ;  A  = 0 is ok, A <>0 is not ok
002FAB  3               ;-------------------------------------
002FAB  3               
002FAB  3               lrchk:
002FAB  3  A0 00        	ldy #0
002FAD  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002FAF  3  C9 02        	cmp #WALL 		; is it passable?
002FB1  3  F0 0A        	beq lrchkx		; no.
002FB3  3               
002FB3  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002FB5  3  F0 06        	beq lrchkx		; not passable.
002FB7  3  A9 00        	lda #0
002FB9  3  60           	rts
002FBA  3               
002FBA  3               ;--------------------------------------------------------------
002FBA  3               ; Called by mmenu
002FBA  3               ;--------------------------------------------------------------
002FBA  3               
002FBA  3               always:
002FBA  3  A9 FF        	lda #255		; report it as okay.
002FBC  3  60           	rts
002FBD  3               
002FBD  3               lrchkx:
002FBD  3  A9 01        	lda #1 			; reset all bits.
002FBF  3  60           	rts
002FC0  3               
002FC0  3               
002FC0  3               ;--------------------------------------------------------------
002FC0  3               ; Check platform or solid item is not in way.
002FC0  3               ;
002FC0  3               ; Input:
002FC0  3               ;  bufaddr = MAP + x/8 + y/8*32
002FC0  3               ;
002FC0  3               ; Output:
002FC0  3               ;  A  = 0 is ok, A <>0 is not ok
002FC0  3               ;--------------------------------------------------------------
002FC0  3               
002FC0  3               plchk:
002FC0  3  A0 00        	ldy #0
002FC2  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002FC4  3  C9 02        	cmp #WALL 		; is it passable?
002FC6  3  F0 F5        	beq lrchkx		; no.
002FC8  3               .if pflag .or dflag
002FC8  3               	cmp #FODDER		; fodder has to be dug.
002FC8  3               	beq lrchkx		; not passable.
002FC8  3               .endif
002FC8  3  C9 01        	cmp #PLATFM		; platform is solid.
002FCA  3  F0 03        	beq plchkx		; not passable.
002FCC  3               .if lflag
002FCC  3               	cmp #LADDER		; is it a ladder?
002FCC  3               	beq lrchkx		; on ladder, deny movement.
002FCC  3               .endif
002FCC  3               plchk0:
002FCC  3  A9 00        	lda #0			; report as ok
002FCE  3  60           	rts
002FCF  3               plchkx:
002FCF  3  A5 rr        	lda dispy		; x coordinate.
002FD1  3  29 07        	and #7			; position straddling blocks.
002FD3  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002FD5  3  4C CC 2F     	jmp plchk0
002FD8  3               
002FD8  3               ;--------------------------------------------------------------
002FD8  3               ; Check ladder is available.
002FD8  3               ;
002FD8  3               ; Input:
002FD8  3               ;  bufaddr = MAP + x/8 + y/8*32
002FD8  3               ;
002FD8  3               ; Output:
002FD8  3               ;  A  = 0 is ok, A <>0 is not ok
002FD8  3               ;--------------------------------------------------------------
002FD8  3               
002FD8  3               .if lflag
002FD8  3               ldchk:
002FD8  3               	ldy #0
002FD8  3               	lda (bufaddr),y 	; fetch cell.
002FD8  3               	cmp #LADDER 		; is it a ladder?
002FD8  3               	beq :+
002FD8  3               	lda #1
002FD8  3               	rts  			; return with zero flag set accordingly.
002FD8  3               :
002FD8  3               	lda #0
002FD8  3               	rts
002FD8  3               .endif
002FD8  3               
002FD8  3               ;--------------------------------------------------------------
002FD8  3               ; Get collectables.
002FD8  3               ;--------------------------------------------------------------
002FD8  3               
002FD8  3               .if cflag
002FD8  3               getcol:
002FD8  3                       lda #COLECT             ; collectable blocks.
002FD8  3                       sta z80_b
002FD8  3                       jsr tded                ; test for collectable blocks.
002FD8  3                       cmp z80_b               ; did we find one?
002FD8  3                       beq :+
002FD8  3                       rts                     ; none were found, job done.
002FD8  3               :
002FD8  3                       jsr gtblk               ; get block.
002FD8  3                       jsr evnt20              ; collected block event.
002FD8  3                       jmp getcol              ; repeat until none left.
002FD8  3               
002FD8  3               ; Get collectable block.
002FD8  3               
002FD8  3               gtblk:
002FD8  3               	ldy #0
002FD8  3               	lda (bufaddr),y
002FD8  3               	sta z80_a
002FD8  3                       lda #0
002FD8  3                       sta (bufaddr),y		; make it empty now.
002FD8  3               
002FD8  3               	lda bufaddr		; set dispx
002FD8  3               	and #31
002FD8  3               	sta dispx
002FD8  3               
002FD8  3               	lda bufaddr+1		; Set dispy
002FD8  3               	sec
002FD8  3               	sbc #>MAP
002FD8  3               	sta bufaddr+1
002FD8  3               	asl bufaddr
002FD8  3               	rol bufaddr+1
002FD8  3               	asl bufaddr
002FD8  3               	rol bufaddr+1
002FD8  3               	asl bufaddr
002FD8  3               	rol bufaddr+1
002FD8  3               	lda bufaddr+1
002FD8  3               	sta dispy
002FD8  3               
002FD8  3               	lda colpatt		; get blocknr
002FD8  3               	sta z80_e		; displacement in e.
002FD8  3               	lda #0
002FD8  3               	sta z80_d		; no high byte.
002FD8  3               	asl z80_e  		; multiply char by 8.
002FD8  3               	rol z80_d
002FD8  3               	asl z80_e
002FD8  3               	rol z80_d
002FD8  3               	asl z80_e
002FD8  3               	rol z80_d
002FD8  3               	clc
002FD8  3               	lda z80_e
002FD8  3               	adc #<chgfx 		; address of graphics.
002FD8  3               	sta tileaddr
002FD8  3               	lda z80_d
002FD8  3               	adc #>chgfx
002FD8  3               	sta tileaddr+1
002FD8  3               	jsr gprad 		; get screen address.
002FD8  3               	ldx #7			; number of pixel rows to write.
002FD8  3               gtblk0:
002FD8  3               	ldy #0
002FD8  3               	lda (tileaddr),y 	; get image byte.
002FD8  3               	ldy scrtab,x
002FD8  3               	eor (scraddr),y 	; XOR tile on screen
002FD8  3               	sta (scraddr),y 	; copy to screen.
002FD8  3               	inc tileaddr 		; next image byte.
002FD8  3               	bne :+
002FD8  3               	inc tileaddr+1
002FD8  3               :
002FD8  3               	dex	 		; repeat for 8 pixel rows.
002FD8  3               	bpl gtblk0
002FD8  3               	rts
002FD8  3               .endif
002FD8  3               
002FD8  3               ;--------------------------------------------------------------
002FD8  3               ; Touched deadly block check.
002FD8  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002FD8  3               ;
002FD8  3               ; Input:
002FD8  3               ;  IX = sprite address
002FD8  3               ;
002FD8  3               ; Output:
002FD8  3               ;  A  = 0 is ok, A=5 is not ok
002FD8  3               ;--------------------------------------------------------------
002FD8  3               
002FD8  3               tded:
002FD8  3  A0 08        	ldy #8
002FDA  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002FDC  3  85 rr        	sta dispy
002FDE  3  C8           	iny
002FDF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002FE1  3  85 rr        	sta dispx		; coords in dispx,dispy.
002FE3  3  20 93 30     	jsr tstbl		; get map address.
002FE6  3  48           	pha
002FE7  3  A9 1F        	lda #31			; default distance to next line down.
002FE9  3  85 64        	sta z80_e
002FEB  3  68           	pla
002FEC  3  C5 63        	cmp z80_b		; is this the required block?
002FEE  3  D0 01        	bne :+
002FF0  3  60           	rts			; yes.
002FF1  3               :
002FF1  3  E6 rr        	inc bufaddr 		; next cell.
002FF3  3  D0 02        	bne :+
002FF5  3  E6 rr        	inc bufaddr+1
002FF7  3               :
002FF7  3  A0 00        	ldy #0
002FF9  3  B1 rr        	lda (bufaddr),y		; fetch type.
002FFB  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002FFD  3  D0 01        	bne :+
002FFF  3  60           	rts			; yes.
003000  3               :
003000  3  A5 rr        	lda dispx		; horizontal position.
003002  3  85 62        	sta z80_c 		; store column in c register.
003004  3  29 07        	and #7			; is it straddling cells?
003006  3  D0 03        	bne :+
003008  3  4C 1C 30     	jmp tded0		; no.
00300B  3               :
00300B  3  E6 rr        	inc bufaddr 		; last cell.
00300D  3  D0 02        	bne :+
00300F  3  E6 rr        	inc bufaddr+1
003011  3               :
003011  3  A0 00        	ldy #0
003013  3  B1 rr        	lda (bufaddr),y 	; fetch type.
003015  3  C5 63        	cmp z80_b		; is this the block?
003017  3  D0 01        	bne :+
003019  3  60           	rts			; yes.
00301A  3               :
00301A  3  C6 64        	dec z80_e		; one less cell to next row down.
00301C  3               tded0:
00301C  3  18           	clc 			; point to next row.
00301D  3  A5 rr        	lda bufaddr
00301F  3  65 64        	adc z80_e
003021  3  85 rr        	sta bufaddr
003023  3  90 02        	bcc :+
003025  3  E6 rr        	inc bufaddr+1
003027  3               :
003027  3  A0 00        	ldy #0
003029  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
00302B  3  C5 63        	cmp z80_b		; is this fatal?
00302D  3  D0 01        	bne :+
00302F  3  60           	rts			; yes.
003030  3               :
003030  3  E6 rr        	inc bufaddr 		; next cell.
003032  3  D0 02        	bne :+
003034  3  E6 rr        	inc bufaddr+1
003036  3               :
003036  3  A0 00        	ldy #0
003038  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00303A  3  C5 63        	cmp z80_b		; is this fatal?
00303C  3  D0 01        	bne :+
00303E  3  60           	rts			; yes.
00303F  3               :
00303F  3  A5 62        	lda z80_c		; horizontal position.
003041  3  29 07        	and #7			; is it straddling cells?
003043  3  D0 03        	bne :+
003045  3  4C 57 30     	jmp tded1 		; no.
003048  3               :
003048  3  E6 rr        	inc bufaddr		; last cell.
00304A  3  D0 02        	bne :+
00304C  3  E6 rr        	inc bufaddr+1
00304E  3               :
00304E  3  A0 00        	ldy #0
003050  3  B1 rr        	lda (bufaddr),y		; fetch type.
003052  3  C5 63        	cmp z80_b		; is this fatal?
003054  3  D0 01        	bne :+
003056  3  60           	rts			; yes.
003057  3               :
003057  3               tded1:
003057  3  A5 rr        	lda dispy		; vertical position.
003059  3  29 07        	and #7 			; is it straddling cells?
00305B  3  D0 01        	bne :+
00305D  3  60           	rts			; no, job done.
00305E  3               :
00305E  3  18           	clc			; point to next row.
00305F  3  A5 rr        	lda bufaddr
003061  3  65 64        	adc z80_e
003063  3  85 rr        	sta bufaddr
003065  3  90 02        	bcc :+
003067  3  E6 rr        	inc bufaddr+1
003069  3               :
003069  3  A0 00        	ldy #0
00306B  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
00306D  3  C5 63        	cmp z80_b		; is this fatal?
00306F  3  D0 01        	bne :+
003071  3  60           	rts			; yes.
003072  3               :
003072  3  E6 rr        	inc bufaddr		; next cell.
003074  3  D0 02        	bne :+
003076  3  E6 rr        	inc bufaddr+1
003078  3               :
003078  3  A0 00        	ldy #0
00307A  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00307C  3  C5 63        	cmp z80_b		; is this fatal?
00307E  3  D0 01        	bne :+
003080  3  60           	rts			; yes.
003081  3               :
003081  3  A5 62        	lda z80_c		; horizontal position.
003083  3  29 07        	and #7			; is it straddling cells?
003085  3  D0 01        	bne :+
003087  3  60           	rts			; no.
003088  3               :
003088  3  E6 rr        	inc bufaddr		; last cell.
00308A  3  D0 02        	bne :+
00308C  3  E6 rr        	inc bufaddr+1
00308E  3               :
00308E  3  A0 00        	ldy #0
003090  3  B1 rr        	lda (bufaddr),y		; fetch final type.
003092  3  60           	rts 			; return with final type in accumulator.
003093  3               
003093  3               ;---------------------------------------------------
003093  3               ; Fetch block type at (dispx, dispy).
003093  3               ;
003093  3               ; Output:
003093  3               ;  A = block type
003093  3               ;---------------------------------------------------
003093  3               
003093  3               tstbl:
003093  3  A5 rr        	lda dispy 		; fetch y coord.
003095  3  4A           	lsr a			; bufaddr = y/8
003096  3  4A           	lsr a
003097  3  4A           	lsr a
003098  3  85 rr        	sta chary
00309A  3               
00309A  3  85 rr        	sta bufaddr
00309C  3  A9 00        	lda #0
00309E  3  85 rr        	sta bufaddr+1
0030A0  3               
0030A0  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0030A2  3  26 rr        	rol bufaddr+1
0030A4  3  06 rr        	asl bufaddr
0030A6  3  26 rr        	rol bufaddr+1
0030A8  3  06 rr        	asl bufaddr
0030AA  3  26 rr        	rol bufaddr+1
0030AC  3  06 rr        	asl bufaddr
0030AE  3  26 rr        	rol bufaddr+1
0030B0  3  06 rr        	asl bufaddr
0030B2  3  26 rr        	rol bufaddr+1
0030B4  3               
0030B4  3  A5 rr        	lda dispx		; x/8
0030B6  3  4A           	lsr a
0030B7  3  4A           	lsr a
0030B8  3  4A           	lsr a
0030B9  3  85 rr        	sta charx
0030BB  3               
0030BB  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0030BC  3  65 rr        	adc bufaddr
0030BE  3  69 00        	adc #<MAP
0030C0  3  85 rr        	sta bufaddr
0030C2  3  A5 rr        	lda bufaddr+1
0030C4  3  69 D8        	adc #>MAP
0030C6  3  85 rr        	sta bufaddr+1
0030C8  3               
0030C8  3  A0 00        	ldy #0
0030CA  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0030CC  3  60           	rts
0030CD  3               
0030CD  3               
0030CD  3               ;-------------------------------------------------------------------
0030CD  3               ; Jump - if we can.
0030CD  3               ; Requires initial speed to be set up in accumulator prior to call.
0030CD  3               ;
0030CD  3               ; Input:
0030CD  3               ;  IX = sprite address
0030CD  3               ;-------------------------------------------------------------------
0030CD  3               
0030CD  3               jump:
0030CD  3  A0 0D        	ldy #13
0030CF  3  B1 68        	lda (z80_ix),y		; jump table low.
0030D1  3  A0 0E        	ldy #14
0030D3  3  11 68        	ora (z80_ix),y		; jump table high.
0030D5  3  F0 01        	beq :+
0030D7  3  60           	rts			; already in the air.
0030D8  3               :
0030D8  3  A9 40        	lda #>jtab
0030DA  3  A0 0E        	ldy #14
0030DC  3  91 68        	sta (z80_ix),y		; set jump high.
0030DE  3  A9 F9        	lda #<jtab		; jump table start.
0030E0  3  A0 0D        	ldy #13
0030E2  3  91 68        	sta (z80_ix),y		; set jump low.
0030E4  3  60           	rts
0030E5  3               
0030E5  3               ; Jump table.
0030E5  3               
0030E5  3               ;jtab:
0030E5  3               ;	.byte 248,250,252
0030E5  3               ;	.byte 254,254,255
0030E5  3               ;	.byte 255,255,0,0
0030E5  3               ;	.byte 0,1,1,1,2,2
0030E5  3               ;	.byte 4,6,8,8,8,99
0030E5  3               
0030E5  3               ;------------------------------------------------
0030E5  3               ; Random numbers code.
0030E5  3               ; Pseudo-random number generator, 8-bit.
0030E5  3               ;
0030E5  3               ; Output:
0030E5  3               ;  RND = random number
0030E5  3               ;------------------------------------------------
0030E5  3               
0030E5  3               random:
0030E5  3  A5 rr        	lda seed
0030E7  3  F0 05        	beq doEor
0030E9  3  0A           	asl a
0030EA  3  F0 04        	beq noEor
0030EC  3  90 02        	bcc noEor
0030EE  3  49 1D        doEor:	eor #$1d
0030F0  3  85 rr        noEor:	sta seed
0030F2  3  60           	rts
0030F3  3               
0030F3  3  A5 rr        	lda seed		; get last random number.
0030F5  3  0A           	asl a
0030F6  3  0A           	asl a
0030F7  3  18           	clc
0030F8  3  65 rr        	adc seed
0030FA  3  18           	clc
0030FB  3  69 45        	adc #$45
0030FD  3  85 rr        	sta seed		; store new seed.
0030FF  3  85 rr        	sta varrnd		; return number in variable.
003101  3  60           	rts
003102  3               
003102  3               ;--------------------------------------------------------
003102  3               ; Keys
003102  3               ;
003102  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003102  3               ;             ||||||||
003102  3               ;             |||||||+> Right    KEY 0  - X
003102  3               ;             ||||||+-> Left     KEY 1  - Z
003102  3               ;             |||||+--> Down     KEY 2  - .
003102  3               ;             ||||+---> Up       KEY 3  - ;
003102  3               ;             |||+----> Fire1    KEY 4  - SPC
003102  3               ;             ||+-----> Fire2    KEY 5  - Q
003102  3               ;             |+------> Fire3    KEY 6  - P
003102  3               ;             +-------> Not used
003102  3               ;
003102  3               ;                       Option1  KEY 7  - 1
003102  3               ;                       Option2  KEY 8  - 2
003102  3               ;                       Option3  KEY 9  - 3
003102  3               ;                       Option4  KEY 10 - 4
003102  3               ;--------------------------------------------------------
003102  3               
003102  3               ;              X   Z   .   ;  SPC  Q   P
003102  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
003102  3               ;        .byte $21,$11,$01,$92                   ; menu options.
003102  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
003106  3  00 04 14     
003109  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
00310D  3               
00310D  3               ;-------------------------------------------------------
00310D  3               ; Joystick and keyboard reading routines.
00310D  3               ;
00310D  3               ; contrl = 0, Keyboard
00310D  3               ;          1, JoyKeyb
00310D  3               ;          2, JoyMMC
00310D  3               ;-------------------------------------------------------
00310D  3               
00310D  3               joykey:
00310D  3  A5 rr        	lda contrl 		; control flag.
00310F  3  C9 01        	cmp #1
003111  3  D0 03        	bne :+
003113  3  4C 42 41     	jmp joy1 		; read keyboard joystick
003116  3               :
003116  3  C9 02        	cmp #2
003118  3  D0 03        	bne :+
00311A  3  4C 43 41     	jmp joy2 		; read MMC joystick.
00311D  3               :
00311D  3               ; Keyboard controls.
00311D  3               
00311D  3  A9 00        	lda #0		 	; zero reading.
00311F  3  85 64        	sta z80_e
003121  3               
003121  3  A0 06        	ldy #6	 		; address of last key.
003123  3               joyke0:
003123  3  B9 FA 40     	lda keys,y 		; get key from table.
003126  3  20 44 41     	jsr ktest		; being pressed?
003129  3  26 64        	rol z80_e 		; rotate into reading.
00312B  3               
00312B  3  88           	dey		 	; next key.
00312C  3  10 F5        	bpl joyke0 		; repeat for all keys.
00312E  3  A5 64        	lda z80_e 		; copy e register to accumulator.
003130  3  85 rr        	sta joyval		; remember value.
003132  3  60           	rts
003133  3               
003133  3               ;---------------------------------------------------------------
003133  3               ; Getkey in column,row format
003133  3               ;
003133  3               ; Output:
003133  3               ;  A = high nibble=row and low nibble=column key in matrix
003133  3               ;---------------------------------------------------------------
003133  3               
003133  3               kget:
003133  3  A9 F0        	lda #ScrMode		; high-mono mode.
003135  3  8D 00 B0     	sta ScrSelAddr		; screen select port
003138  3  86 rr        	stx xtmp
00313A  3               kget4:
00313A  3  20 F4 FF     	jsr READKEY		; read key until pressed
00313D  3  C0 FF        	cpy #255
00313F  3  F0 F9        	beq kget4
003141  3  85 rr        	sta rcol		; save column
003143  3  86 rr        	stx rrow		; determine row
003145  3               kget3:
003145  3  20 F4 FF     	jsr READKEY		; wait until key released
003148  3  C0 FF        	cpy #255
00314A  3  D0 F9        	bne kget3
00314C  3               
00314C  3  38           	sec			; calculate matrix row
00314D  3  A9 0A        	lda #10
00314F  3  E5 rr        	sbc rrow
003151  3  0A           	asl a
003152  3  0A           	asl a
003153  3  0A           	asl a
003154  3  0A           	asl a
003155  3  85 rr        	sta rrow
003157  3               
003157  3  A0 FF        	ldy #255		; find column mask
003159  3               kget1:
003159  3  C8           	iny
00315A  3  B9 05 41     	lda keymask,y
00315D  3  C5 rr        	cmp rcol
00315F  3  F0 03        	beq kget2
003161  3  4C 59 31     	jmp kget1
003164  3               kget2:
003164  3  98           	tya			; determine column
003165  3  18           	clc
003166  3  65 rr        	adc rrow
003168  3  A6 rr        	ldx xtmp
00316A  3  60           	rts
00316B  3               
00316B  3               ;---------------------------------------------------------------
00316B  3               ; Display message.
00316B  3               ;
00316B  3               ; Input:
00316B  3               ;  A = message number
00316B  3               ;---------------------------------------------------------------
00316B  3               
00316B  3               dmsg:
00316B  3  AA           	tax
00316C  3  A9 81        	lda #<msgdat		; pointer to messages.
00316E  3  85 66        	sta z80_l
003170  3  A9 3C        	lda #>msgdat
003172  3  85 67        	sta z80_h
003174  3  20 5B 32     	jsr getwrd		; get message number.
003177  3               dmsg3:
003177  3  20 52 32     	jsr preprt		; pre-printing stuff.
00317A  3  20 6F 2B     	jsr checkx		; make sure we"re in a printable range.
00317D  3  A5 rr        	lda prtmod		; print mode.
00317F  3  D0 50        	bne bmsg1		; no, double-height text.
003181  3               
003181  3  AD 24 3B     	lda fcolour		; Set textcolour
003184  3  20 02 2D     	jsr pchar
003187  3  20 3F 32     	jsr nexpos
00318A  3               dmsg0:
00318A  3  A5 67        	lda z80_h		; store string pointer.
00318C  3  48           	pha
00318D  3  A5 66        	lda z80_l
00318F  3  48           	pha
003190  3               
003190  3  A0 00        	ldy #0
003192  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
003194  3  29 7F        	and #127		; remove any end marker.
003196  3  C9 0D        	cmp #13
003198  3  F0 24        	beq dmsg1
00319A  3  20 02 2D     	jsr pchar		; display character.
00319D  3  20 3F 32     	jsr nexpos 		; display position.
0031A0  3  D0 03        	bne dmsg2		; not on a new line.
0031A2  3  20 44 32     	jsr nexlin		; next line down.
0031A5  3               dmsg2:
0031A5  3  68           	pla			; retrieve string pointer
0031A6  3  85 66        	sta z80_l
0031A8  3  68           	pla
0031A9  3  85 67        	sta z80_h
0031AB  3               
0031AB  3  A0 00        	ldy #0
0031AD  3  B1 66        	lda (z80_hl),y		; fetch last character.
0031AF  3  0A           	asl a  			; was it the end?
0031B0  3  90 03        	bcc :+
0031B2  3  4C C2 2B     	jmp dscor2		; yes, job done.
0031B5  3               :
0031B5  3  E6 66        	inc z80_l		; next character to display.
0031B7  3  D0 02        	bne :+
0031B9  3  E6 67        	inc z80_h
0031BB  3               :
0031BB  3  4C 8A 31     	jmp dmsg0
0031BE  3               dmsg1:
0031BE  3  E6 rr        	inc dispy
0031C0  3  A5 rr        	lda dispy
0031C2  3  C9 19        	cmp #ScrHeight
0031C4  3  90 04        	bcc dmsg4
0031C6  3  A9 00        	lda #0
0031C8  3  85 rr        	sta dispy
0031CA  3               dmsg4:
0031CA  3  A9 00        	lda #0
0031CC  3  85 rr        	sta dispx
0031CE  3  4C A5 31     	jmp dmsg2
0031D1  3               
0031D1  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0031D1  3               
0031D1  3               ;----------------------------------------------------------
0031D1  3               ; Display message in big text.
0031D1  3               ;
0031D1  3               ; Input:
0031D1  3               ;  HL = string pointer
0031D1  3               ;----------------------------------------------------------
0031D1  3               
0031D1  3               bmsg1:
0031D1  3  AD 24 3B     	lda fcolour		; Set textcolour
0031D4  3  20 10 32     	jsr bchar
0031D7  3  A9 0D        	lda #13			; Set double height
0031D9  3  20 10 32     	jsr bchar
0031DC  3               bmsg4:
0031DC  3  A0 00        	ldy #0
0031DE  3  B1 66        	lda (z80_hl),y 		; get character to display.
0031E0  3  29 7F        	and #127		; only want 7 bits.
0031E2  3  C9 0D        	cmp #13
0031E4  3  F0 15        	beq bmsg2
0031E6  3  20 10 32     	jsr bchar 		; display big char.
0031E9  3               bmsg3:
0031E9  3  A0 00        	ldy #0
0031EB  3  B1 66        	lda (z80_hl),y 		; look at last character.
0031ED  3  48           	pha
0031EE  3  E6 66        	inc z80_l 		; next character in list.
0031F0  3  D0 02        	bne :+
0031F2  3  E6 67        	inc z80_h
0031F4  3               :
0031F4  3  68           	pla
0031F5  3  0A           	asl a  			; was terminator flag set?
0031F6  3  90 E4        	bcc bmsg4		; no, keep going.
0031F8  3  4C C2 2B     	jmp dscor2
0031FB  3               bmsg2:
0031FB  3  A9 00        	lda #0
0031FD  3  85 rr        	sta dispx
0031FF  3  E6 rr        	inc dispy
003201  3  E6 rr        	inc dispy
003203  3  A5 rr        	lda dispy
003205  3  C9 18        	cmp #ScrHeight-1
003207  3  90 E0        	bcc bmsg3
003209  3  A9 00        	lda #0
00320B  3  85 rr        	sta dispy
00320D  3  4C E9 31     	jmp bmsg3
003210  3               
003210  3               ;----------------------------------------------------------
003210  3               ; Big character display.
003210  3               ;
003210  3               ; Input:
003210  3               ;  A = character
003210  3               ;----------------------------------------------------------
003210  3               
003210  3               bchar:
003210  3  20 02 2D     	jsr pchar 		; display big char.
003213  3  E6 rr        	inc dispy
003215  3  20 02 2D     	jsr pchar
003218  3  C6 rr        	dec dispy
00321A  3  20 3F 32     	jsr nexpos		; display position.
00321D  3  60           	rts
00321E  3               
00321E  3               bchar3:
00321E  3  E6 rr        	inc dispy
003220  3  20 44 32     	jsr nexlin 		; next line check.
003223  3               bchar2:
003223  3  4C C2 2B     	jmp dscor2		; tidy up line and column variables.
003226  3               
003226  3               
003226  3               ;-------------------------------------------------
003226  3               ; Display a character.
003226  3               ;
003226  3               ; Input:
003226  3               ;  A = character
003226  3               ;-------------------------------------------------
003226  3               
003226  3               achar:
003226  3  85 63        	sta z80_b 		; copy to b.
003228  3  20 52 32     	jsr preprt 		; get ready to print.
00322B  3  A5 63        	lda z80_b		; character in accumulator.
00322D  3  A6 rr        	ldx prtmod 		; print mode.
00322F  3  F0 03        	beq :+
003231  3  4C 10 32     	jmp bchar 		; no, double-height text.
003234  3               :
003234  3  20 02 2D     	jsr pchar 		; display character.
003237  3  20 3F 32     	jsr nexpos 		; display position.
00323A  3  F0 E2        	beq bchar3		; next line down.
00323C  3  4C 23 32     	jmp bchar2 		; tidy up.
00323F  3               
00323F  3               
00323F  3               ;-------------------------------------------------
00323F  3               ; Get next print column position.
00323F  3               ;-------------------------------------------------
00323F  3               
00323F  3               nexpos:
00323F  3  E6 rr        	inc dispx		; move along one position.
003241  3  A5 rr        	lda dispx 		; get coordinate.
003243  3               ;	and #31
003243  3  60           	rts 			; return with status in zero flag.
003244  3               
003244  3               ;-------------------------------------------------
003244  3               ; Get next print line position.
003244  3               ;-------------------------------------------------
003244  3               
003244  3               nexlin:
003244  3  E6 rr        	inc dispy 		; newline.
003246  3  A5 rr        	lda dispy		; vertical position.
003248  3  C9 19        	cmp #ScrHeight			; past screen edge?
00324A  3  B0 01        	bcs :+
00324C  3  60           	rts			; no, still okay.
00324D  3               :
00324D  3  A9 00        	lda #0			; restart at top.
00324F  3  85 rr        	sta dispy
003251  3  60           	rts
003252  3               
003252  3               ;--------------------------------------------------------
003252  3               ; Pre-print preliminaries.
003252  3               ;--------------------------------------------------------
003252  3               
003252  3               preprt:
003252  3               ;	lda #<(FONT-256)		; font pointer.
003252  3               ;	sta grbase		; set up graphics base.
003252  3               ;	lda #>(FONT-256)
003252  3               ;	sta grbase+1
003252  3               prescr:
003252  3  A5 rr        	lda charx 		; display coordinates.
003254  3  85 rr        	sta dispx		; set up general coordinates.
003256  3  A5 rr        	lda chary
003258  3  85 rr        	sta dispy
00325A  3  60           	rts
00325B  3               
00325B  3               ;--------------------------------------------------------------
00325B  3               ; Get messagenr x in hl
00325B  3               ;
00325B  3               ; Input:
00325B  3               ;  HL = pointer to message list
00325B  3               ;  X  = message number.
00325B  3               ;--------------------------------------------------------------
00325B  3               
00325B  3               getwrd:
00325B  3  E0 00        	cpx #0
00325D  3  D0 01        	bne:+ 			; first word in list?
00325F  3  60           	rts 			; yep, don't search.
003260  3               :
003260  3  A0 00        	ldy #0
003262  3               getwd0:
003262  3  B1 66        	lda (z80_hl),y
003264  3  48           	pha
003265  3  E6 66        	inc z80_l
003267  3  D0 02        	bne :+
003269  3  E6 67        	inc z80_h
00326B  3               :
00326B  3  68           	pla
00326C  3  C9 80        	cmp #128		; found end?
00326E  3  30 F2        	bmi getwd0		; no, carry on.
003270  3  CA           	dex			; until we have right number.
003271  3  D0 EF        	bne getwd0
003273  3  60           	rts
003274  3               
003274  3               ;-----------------------------------------------------------
003274  3               ; Bubble sort.
003274  3               ;-----------------------------------------------------------
003274  3               
003274  3               bsort:
003274  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
003276  3  85 rr        	sta qscnt
003278  3               
003278  3  A9 36        	lda #<sprtab 		; sprite table.
00327A  3  85 68        	sta z80_x
00327C  3  A9 3A        	lda #>sprtab
00327E  3  85 69        	sta z80_i
003280  3               bsort0:
003280  3  A0 00        	ldy #0
003282  3  B1 68        	lda (z80_ix),y 		; first sprite type.
003284  3  C9 FF        	cmp #255 		; is it switched off?
003286  3  F0 30        	beq swemp		; yes, may need to switch another in here.
003288  3               
003288  3  A0 11        	ldy #TABSIZ
00328A  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00328C  3  C9 FF        	cmp #255 		; is it enabled?
00328E  3  F0 0A        	beq bsort2 		; no, nothing to swap.
003290  3               
003290  3  A0 14        	ldy #TABSIZ+3
003292  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
003294  3  A0 03        	ldy #3
003296  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
003298  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
00329A  3               bsort2:
00329A  3  18           	clc
00329B  3  A5 68        	lda z80_x
00329D  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00329F  3  85 68        	sta z80_x
0032A1  3  90 02        	bcc :+
0032A3  3  E6 69        	inc z80_i
0032A5  3               :
0032A5  3  C6 rr        	dec qscnt
0032A7  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0032A9  3  60           	rts
0032AA  3               
0032AA  3               ;qscnt:	.byte 0
0032AA  3               
0032AA  3               bsort1:
0032AA  3  A0 11        	ldy #TABSIZ
0032AC  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
0032AE  3  C9 FF        	cmp #255		; is it enabled?
0032B0  3  F0 E8        	beq bsort2		; no, nothing to swap.
0032B2  3  20 C6 32     	jsr swspr		; swap positions.
0032B5  3  4C 9A 32     	jmp bsort2
0032B8  3               swemp:
0032B8  3  A0 11        	ldy #TABSIZ
0032BA  3  B1 68        	lda (z80_ix),y		; next table entry.
0032BC  3  C9 FF        	cmp #255		; is that one on?
0032BE  3  F0 DA        	beq bsort2		; no, nothing to swap.
0032C0  3  20 C6 32     	jsr swspr		; swap positions.
0032C3  3  4C 9A 32     	jmp bsort2
0032C6  3               
0032C6  3               ; Swap sprites.
0032C6  3               
0032C6  3               swspr:
0032C6  3  A5 68        	lda z80_x		; table address
0032C8  3  85 64        	sta z80_e		; copy to de pair.
0032CA  3  85 66        	sta z80_l		; copy to hl pair.
0032CC  3  A5 69        	lda z80_i
0032CE  3  85 67        	sta z80_h
0032D0  3  85 65        	sta z80_d
0032D2  3               
0032D2  3  18           	clc
0032D3  3  A5 66        	lda z80_l
0032D5  3  69 11        	adc #TABSIZ		; distance to second entry.
0032D7  3  85 66        	sta z80_l
0032D9  3  90 02        	bcc :+
0032DB  3  E6 67        	inc z80_h
0032DD  3               :
0032DD  3  A9 11        	lda #TABSIZ		; bytes to swap.
0032DF  3  85 63        	sta z80_b
0032E1  3  A0 00        	ldy #0
0032E3  3               swspr0:
0032E3  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0032E5  3  48           	pha
0032E6  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0032E8  3  91 66        	sta (z80_hl),y 		; copy to second.
0032EA  3  68           	pla
0032EB  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0032ED  3               
0032ED  3  E6 64        	inc z80_e 		; next byte.
0032EF  3  D0 02        	bne :+
0032F1  3  E6 65        	inc z80_d
0032F3  3               :
0032F3  3  E6 66        	inc z80_l 		; next byte.
0032F5  3  D0 02        	bne :+
0032F7  3  E6 67        	inc z80_h
0032F9  3               :
0032F9  3  C6 63        	dec z80_b
0032FB  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0032FD  3  60           	rts
0032FE  3               
0032FE  3               ;----------------------------------------------------
0032FE  3               ; Process sprites.
0032FE  3               ;----------------------------------------------------
0032FE  3               
0032FE  3               pspr:
0032FE  3  A9 0C        	lda #NUMSPR		; sprites to process.
003300  3  85 rr        	sta sprptr
003302  3               
003302  3  A9 36        	lda #<sprtab 		; sprite table.
003304  3  85 68        	sta z80_x
003306  3  A9 3A        	lda #>sprtab
003308  3  85 69        	sta z80_i
00330A  3               pspr1:
00330A  3  A0 00        	ldy #0
00330C  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
00330E  3  C9 09        	cmp #9 			; within range of sprite types?
003310  3  B0 03        	bcs :+
003312  3  20 25 33     	jsr pspr2 		; yes, process this one.
003315  3               :
003315  3  18           	clc
003316  3  A5 68        	lda z80_x
003318  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00331A  3  85 68        	sta z80_x
00331C  3  90 02        	bcc :+
00331E  3  E6 69        	inc z80_i		; next sprite.
003320  3               :
003320  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
003322  3  D0 E6        	bne pspr1
003324  3  60           	rts
003325  3               
003325  3               ;sprptr:	.byte 0
003325  3               
003325  3               pspr2:
003325  3  A5 68        	lda z80_x 		; store original sprite pointer.
003327  3  85 rr        	sta ogptr
003329  3  A5 69        	lda z80_i
00332B  3  85 rr        	sta ogptr+1
00332D  3  20 39 33     	jsr pspr3		; do the routine.
003330  3               rtorg:
003330  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
003332  3  85 68        	sta z80_x
003334  3  A5 rr        	lda ogptr+1
003336  3  85 69        	sta z80_i
003338  3               rtorg0:
003338  3  60           	rts
003339  3               
003339  3               pspr3:
003339  3  A9 6E        	lda #<evtyp0		; sprite type events list.
00333B  3  85 66        	sta z80_l
00333D  3  A9 33        	lda #>evtyp0
00333F  3  85 67        	sta z80_h
003341  3               pspr4:
003341  3  B1 68        	lda (z80_ix),y
003343  3  0A           	asl a			; double accumulator.
003344  3  18           	clc
003345  3  65 66        	adc z80_l
003347  3  85 66        	sta z80_l
003349  3  90 02        	bcc :+
00334B  3  E6 67        	inc z80_h
00334D  3               :
00334D  3  B1 66        	lda (z80_hl),y
00334F  3  85 64        	sta z80_e 		; copy to de.
003351  3  48           	pha
003352  3               
003352  3  E6 66        	inc z80_l 		; next byte of address.
003354  3  D0 02        	bne :+
003356  3  E6 67        	inc z80_h
003358  3               :
003358  3  B1 66        	lda (z80_hl),y 		; address high.
00335A  3  85 65        	sta z80_d
00335C  3               
00335C  3  48           	pha	 		; swap address into hl.
00335D  3  A5 67        	lda z80_h
00335F  3  85 65        	sta z80_d
003361  3  68           	pla
003362  3  85 67        	sta z80_h
003364  3  68           	pla
003365  3  85 66        	sta z80_l
003367  3  A5 66        	lda z80_l
003369  3  85 64        	sta z80_e
00336B  3               
00336B  3  6C 66 00     	jmp (z80_hl) 		; go there.
00336E  3               
00336E  3               ;ogptr:	.word 0			; original sprite pointer.
00336E  3               
00336E  3               ; Address of each sprite type's routine.
00336E  3               
00336E  3  31 3B        evtyp0:	.word evnt00
003370  3  0D 3C        evtyp1:	.word evnt01
003372  3  0E 3C        evtyp2:	.word evnt02
003374  3  0F 3C        evtyp3:	.word evnt03
003376  3  10 3C        evtyp4:	.word evnt04
003378  3  11 3C        evtyp5:	.word evnt05
00337A  3  12 3C        evtyp6:	.word evnt06
00337C  3  13 3C        evtyp7:	.word evnt07
00337E  3  14 3C        evtyp8:	.word evnt08
003380  3               
003380  3               ;--------------------------------------------------------------
003380  3               ; Display sprites.
003380  3               ;
003380  3               ; Input:
003380  3               ;  IX = sprite table
003380  3               ;--------------------------------------------------------------
003380  3               
003380  3               dspr:
003380  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003382  3  85 rr        	sta sprcnt
003384  3               dspr0:
003384  3  A0 00        	ldy #0
003386  3  B1 68        	lda (z80_ix),y 		; get sprite type.
003388  3  C9 FF        	cmp #255 		; is it enabled?
00338A  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00338C  3               dspr5:
00338C  3  A0 05        	ldy #5
00338E  3  B1 68        	lda (z80_ix),y 		; new type.
003390  3  C9 FF        	cmp #255		; is it enabled?
003392  3  D0 77        	bne dspr3 		; yes, it needs drawing.
003394  3               dspr2:
003394  3  A0 05        	ldy #5
003396  3  B1 68        	lda (z80_ix),y 		; copy new type.
003398  3  A0 00        	ldy #0
00339A  3  91 68        	sta (z80_ix),y
00339C  3  A0 06        	ldy #6
00339E  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0033A0  3  A0 01        	ldy #1
0033A2  3  91 68        	sta (z80_ix),y
0033A4  3  A0 07        	ldy #7
0033A6  3  B1 68        	lda (z80_ix),y 		; copy new frame.
0033A8  3  A0 02        	ldy #2
0033AA  3  91 68        	sta (z80_ix),y
0033AC  3  A0 08        	ldy #8
0033AE  3  B1 68        	lda (z80_ix),y 		; copy new y.
0033B0  3  A0 03        	ldy #3
0033B2  3  91 68        	sta (z80_ix),y
0033B4  3  A0 09        	ldy #9
0033B6  3  B1 68        	lda (z80_ix),y 		; copy new x.
0033B8  3  A0 04        	ldy #4
0033BA  3  91 68        	sta (z80_ix),y
0033BC  3               
0033BC  3  18           	clc
0033BD  3  A5 68        	lda z80_x
0033BF  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0033C1  3  85 68        	sta z80_x
0033C3  3  A5 69        	lda z80_i
0033C5  3  69 00        	adc #0
0033C7  3  85 69        	sta z80_i 		; next sprite.
0033C9  3  C6 rr        	dec sprcnt
0033CB  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0033CD  3  60           	rts
0033CE  3               dspr1:
0033CE  3  A0 05        	ldy #5
0033D0  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0033D2  3  C9 FF        	cmp #255		; is this enabled?
0033D4  3  D0 06        	bne dspr4 		; yes, display both.
0033D6  3               dspr6:
0033D6  3  20 C5 34     	jsr sspria 		; show single sprite.
0033D9  3  4C 94 33     	jmp dspr2
0033DC  3               
0033DC  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0033DC  3               
0033DC  3               dspr4:
0033DC  3  A0 04        	ldy #4
0033DE  3  B1 68        	lda (z80_ix),y		; old x.
0033E0  3  A0 09        	ldy #9
0033E2  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0033E4  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0033E6  3               
0033E6  3  A0 03        	ldy #3
0033E8  3  B1 68        	lda (z80_ix),y		; old y.
0033EA  3  A0 08        	ldy #8
0033EC  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0033EE  3  D0 15        	bne dspr7		; they differ, need to redraw.
0033F0  3               
0033F0  3  A0 02        	ldy #2
0033F2  3  B1 68        	lda (z80_ix),y 		; old frame.
0033F4  3  A0 07        	ldy #7
0033F6  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0033F8  3  4C 05 34     	jmp dspr7 		; they differ, need to redraw.
0033FB  3               
0033FB  3  A0 01        	ldy #1
0033FD  3  B1 68        	lda (z80_ix),y 		; old image.
0033FF  3  A0 06        	ldy #6
003401  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003403  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
003405  3               dspr7:
003405  3  20 16 35     	jsr sspric 		; delete old sprite, draw new one simultaneously.
003408  3  4C 94 33     	jmp dspr2
00340B  3               dspr3:
00340B  3  20 10 35     	jsr ssprib 		; show single sprite.
00340E  3  4C 94 33     	jmp dspr2
003411  3               
003411  3               ;sprcnt:	.byte 0
003411  3               
003411  3               ;-----------------------------------------
003411  3               ; Get sprite address calculations.
003411  3               ; gspran = new sprite, gsprad = old sprite.
003411  3               ;
003411  3               ; Input:
003411  3               ;  IX = sprite address
003411  3               ;-----------------------------------------
003411  3               
003411  3               gspran:
003411  3  A0 08        	ldy #8
003413  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003415  3  85 rr        	sta dispy
003417  3  A0 09        	ldy #9
003419  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00341B  3  85 rr        	sta dispx
00341D  3  A0 06        	ldy #6
00341F  3  B1 68        	lda (z80_ix),y 		; new sprite image.
003421  3  20 58 38     	jsr gfrm		; fetch start frame for this sprite.
003424  3               
003424  3  A0 00        	ldy #0
003426  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003428  3  A0 07        	ldy #7
00342A  3  18           	clc
00342B  3  71 68        	adc (z80_ix),y 		; new add frame number.
00342D  3  4C 4C 34     	jmp gspra0
003430  3               
003430  3               ;-----------------------------------------
003430  3               ; Calculate old sprite address
003430  3               ;
003430  3               ; Input:
003430  3               ;  IX = sprite address
003430  3               ;
003430  3               ; Output:
003430  3               ;  B  = right byte mask
003430  3               ;  C  = left byte mask
003430  3               ;  DE = spriteframe address
003430  3               ;  scraddr = screenaddress(dispx,dispy)
003430  3               ;-----------------------------------------
003430  3               
003430  3               gsprad:
003430  3  A0 03        	ldy #3
003432  3  B1 68        	lda (z80_ix),y		; y coordinate.
003434  3  85 rr        	sta dispy
003436  3  A0 04        	ldy #4
003438  3  B1 68        	lda (z80_ix),y		; x coordinate.
00343A  3  85 rr        	sta dispx
00343C  3  A0 01        	ldy #1
00343E  3  B1 68        	lda (z80_ix),y 		; sprite image.
003440  3  20 58 38     	jsr gfrm 		; fetch start frame for this sprite.
003443  3               
003443  3               ; z80_hl = sprite framenr
003443  3               
003443  3  A0 00        	ldy #0
003445  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003447  3               
003447  3               ; z80_ix+2 = current framenr
003447  3               
003447  3  A0 02        	ldy #2
003449  3  18           	clc
00344A  3  71 68        	adc (z80_ix),y 		; add frame number.
00344C  3               
00344C  3               ; A = sprite framenr + current framenr
00344C  3               ;
00344C  3               ; framestartaddress = 24 * A (Normal 4 x 32 = 128)
00344C  3               ; frameoffset =  + 6 * (x and 2)   (Normal steps of 32)
00344C  3               ; framedataptr = framestartaddress + frameoffset + sprgfx
00344C  3               
00344C  3               gspra0:
00344C  3               
00344C  3               ; framestartaddress = 24 * sprite image (Normal 4 x 32 = 128)
00344C  3               
00344C  3  85 64        	sta z80_e
00344E  3  A9 00        	lda #0
003450  3  85 65        	sta z80_d
003452  3               
003452  3  06 64        	asl z80_e		; a x 8
003454  3  26 65        	rol z80_d
003456  3  06 64        	asl z80_e
003458  3  26 65        	rol z80_d
00345A  3  06 64        	asl z80_e
00345C  3  26 65        	rol z80_d
00345E  3               
00345E  3  A5 64        	lda z80_e		; save a x 8
003460  3  8D C3 34     	sta tmp1
003463  3  A5 65        	lda z80_d
003465  3  8D C4 34     	sta tmp2
003468  3               
003468  3  06 64        	asl z80_e		; a x 16
00346A  3  26 65        	rol z80_d
00346C  3               
00346C  3  18           	clc			; z80_de = ax8 + ax16 = ax24
00346D  3  A5 64        	lda z80_e
00346F  3  6D C3 34     	adc tmp1
003472  3  85 64        	sta z80_e
003474  3  A5 65        	lda z80_d
003476  3  6D C4 34     	adc tmp2
003479  3  85 65        	sta z80_d
00347B  3               
00347B  3               ;	lsr a	  		; multiply by 128.
00347B  3               ;	sta z80_d 		; store in d.
00347B  3               ;	sta tmp1
00347B  3               ;	lda #0
00347B  3               ;	ror a
00347B  3               ;	sta z80_e 		; got low byte.
00347B  3               ;	sta tmp2
00347B  3               ;.if bflag
00347B  3               ;	lsr tmp1
00347B  3               ;	ror tmp2
00347B  3               ;	clc
00347B  3               ;	lda tmp2
00347B  3               ;	adc z80_e
00347B  3               ;	sta z80_e
00347B  3               ;	lda tmp1
00347B  3               ;	adc z80_d
00347B  3               ;	sta z80_d
00347B  3               ;.endif
00347B  3  18           	clc 			; address of play sprites.
00347C  3  A5 64        	lda z80_e
00347E  3  69 E9        	adc #<sprgfx
003480  3  85 64        	sta z80_e
003482  3  A5 65        	lda z80_d
003484  3  69 3C        	adc #>sprgfx
003486  3  85 65        	sta z80_d
003488  3               
003488  3               ; frameoffset =  + 6 * (x and 2) (steps of 32)
003488  3               
003488  3  A5 rr        	lda dispx 		; y coordinate.
00348A  3  29 02        	and #2			;6	; position within byte boundary.
00348C  3  AA           	tax	 		; low byte of table displacement.
00348D  3               
00348D  3  0A           	asl a	  		; a*2
00348E  3  8D C3 34     	sta tmp1
003491  3               
003491  3  0A           	asl a  			; a*4
003492  3  18           	clc
003493  3  6D C3 34     	adc tmp1
003496  3  65 64        	adc z80_e 		; add to sprite address.
003498  3  85 64        	sta z80_e
00349A  3  90 02        	bcc :+
00349C  3  E6 65        	inc z80_d
00349E  3               :
00349E  3               
00349E  3               ; Spritemask is z80_c = mask_left and z80_b = mask_right
00349E  3               
00349E  3  BD BF 34     	lda spmask,x		 ; pointer to mask table.
0034A1  3  85 62        	sta z80_c 		; left mask.
0034A3  3  BD C0 34     	lda spmask+1,x
0034A6  3  85 63        	sta z80_b 		; right mask.
0034A8  3               
0034A8  3               ;------------------------------------------------------------------
0034A8  3               ; Drop into screen address routine.
0034A8  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0034A8  3               ;------------------------------------------------------------------
0034A8  3               
0034A8  3               scadd:
0034A8  3  A6 rr        	ldx dispy
0034AA  3  E0 4C        	cpx #76
0034AC  3  90 02        	bcc :+
0034AE  3  A2 4C        	ldx #76
0034B0  3               :
0034B0  3  A5 rr        	lda dispx
0034B2  3  4A           	lsr a
0034B3  3               ;	lsr a
0034B3  3               ;	lsr a
0034B3  3  18           	clc
0034B4  3  7D 00 DC     	adc SCADTB_lb,x
0034B7  3  85 rr        	sta scraddr
0034B9  3  BD 00 DD     	lda SCADTB_hb,x
0034BC  3  85 rr        	sta scraddr+1
0034BE  3  60           	rts
0034BF  3               
0034BF  3               spmask:
0034BF  3  FF 00        	.byte $ff,$00
0034C1  3  35 65        	.byte $35,$65
0034C3  3               
0034C3  3               ;	.byte $ff,$00
0034C3  3               ;	.byte $3f,$c0
0034C3  3               ;	.byte $0f,$f0
0034C3  3               ;	.byte $03,$fc
0034C3  3               
0034C3  3  00           tmp1:	.byte 0
0034C4  3  00           tmp2:	.byte 0
0034C5  3               
0034C5  3               ;-----------------------------------------------------------------
0034C5  3               ; These are the sprite routines.
0034C5  3               ; sspria = single sprite, old (ix).
0034C5  3               ; ssprib = single sprite, new (ix+5).
0034C5  3               ; sspric = both sprites, old (ix) and new (ix+5).
0034C5  3               ;-----------------------------------------------------------------
0034C5  3               
0034C5  3               sspria:
0034C5  3  20 30 34     	jsr gsprad		; get old sprite address.
0034C8  3               sspri2:
0034C8  3  A5 64        	lda z80_e
0034CA  3  8D 70 35     	sta dline1+1		; Set spritedata address
0034CD  3  8D 7F 35     	sta dline2a+1
0034D0  3  8D 88 35     	sta dline2b+1
0034D3  3  8D 91 35     	sta dline2c+1
0034D6  3  A5 65        	lda z80_d
0034D8  3  8D 71 35     	sta dline1+2
0034DB  3  8D 80 35     	sta dline2a+2
0034DE  3  8D 89 35     	sta dline2b+2
0034E1  3  8D 92 35     	sta dline2c+2
0034E4  3  86 rr        	stx xtmp
0034E6  3  A2 00        	ldx #0			; vertical lines.
0034E8  3               sspri0:
0034E8  3  20 6C 35     	jsr dline		; draw a line.
0034EB  3  E0 04        	cpx #4			; detect end of line 0
0034ED  3  D0 0B        	bne :+			; skip if not
0034EF  3  A5 rr        	lda scraddr		; Point to 1 line down
0034F1  3  18           	clc
0034F2  3  69 28        	adc #ScrWidth
0034F4  3  85 rr        	sta scraddr
0034F6  3  90 02        	bcc :+
0034F8  3  E6 rr        	inc scraddr+1		; jump to next blockline
0034FA  3               :
0034FA  3  E0 08        	cpx #8			; detect end of line 1
0034FC  3  D0 0B        	bne :+			; skip if not
0034FE  3  A5 rr        	lda scraddr		; Point to 1 line down
003500  3  18           	clc
003501  3  69 28        	adc #ScrWidth
003503  3  85 rr        	sta scraddr
003505  3  90 02        	bcc :+
003507  3  E6 rr        	inc scraddr+1		; jump to next blockline
003509  3               :
003509  3  E0 0C        	cpx #12			; Detect end of line 2
00350B  3               
00350B  3               .if bflag
00350B  3               	bne :+			; skip if not
00350B  3               	lda scraddr		; Point to 1 line down
00350B  3               	clc
00350B  3               	adc #ScrWidth
00350B  3               	sta scraddr
00350B  3               	bcc :+
00350B  3               	inc scraddr+1		; jump to next blockline
00350B  3               :
00350B  3               	cpx #16			; Detect end of line 3
00350B  3               .endif
00350B  3               
00350B  3  D0 DB        	bne sspri0		; no, repeat
00350D  3  A6 rr        	ldx xtmp
00350F  3  60           	rts
003510  3               
003510  3               ;-----------------------------------------------------------------
003510  3               ; ssprib = single sprite, new (ix).
003510  3               ;-----------------------------------------------------------------
003510  3               
003510  3               ssprib:
003510  3  20 11 34     	jsr gspran 		; get new sprite address.
003513  3               				; z80_de = new sprite address
003513  3  4C C8 34     	jmp sspri2
003516  3               
003516  3               ;-----------------------------------------------------------------
003516  3               ; sspric = erase old sprite and plot new sprite line by line
003516  3               ;-----------------------------------------------------------------
003516  3               
003516  3               sspric:
003516  3  20 30 34     	jsr gsprad 		; get old sprite address.
003519  3               				; z80_de = old sprite address
003519  3  A5 64        	lda z80_e
00351B  3  8D A6 35     	sta ddline1+1		; Set spritedata address
00351E  3  8D B5 35     	sta ddline2a+1
003521  3  8D BE 35     	sta ddline2b+1
003524  3  8D C7 35     	sta ddline2c+1
003527  3  A5 65        	lda z80_d
003529  3  8D A7 35     	sta ddline1+2
00352C  3  8D B6 35     	sta ddline2a+2
00352F  3  8D BF 35     	sta ddline2b+2
003532  3  8D C8 35     	sta ddline2c+2
003535  3  20 61 41     	jsr exx  		; store addresses.
003538  3               
003538  3  20 11 34     	jsr gspran 		; get new sprite addresses.
00353B  3               				; z80_de = old sprite address
00353B  3  A5 64        	lda z80_e
00353D  3  8D 70 35     	sta dline1+1		; Set spritedata address
003540  3  8D 7F 35     	sta dline2a+1
003543  3  8D 88 35     	sta dline2b+1
003546  3  8D 91 35     	sta dline2c+1
003549  3  A5 65        	lda z80_d
00354B  3  8D 71 35     	sta dline1+2
00354E  3  8D 80 35     	sta dline2a+2
003551  3  8D 89 35     	sta dline2b+2
003554  3  8D 92 35     	sta dline2c+2
003557  3               
003557  3  86 rr        	stx xtmp
003559  3  A2 00        	ldx #0			; vertical lines.
00355B  3               lloop:
00355B  3  20 6C 35     	jsr dline 		; draw a line.
00355E  3  CA           	dex
00355F  3  CA           	dex
003560  3  CA           	dex
003561  3  CA           	dex
003562  3  20 A2 35     	jsr ddline 		; delete a line.
003565  3               
003565  3               .if bflag
003565  3               	cpx #16			; Detect end of line 3
003565  3               .else
003565  3  E0 0C        	cpx #12			; Detect end of line 2
003567  3               .endif
003567  3  D0 F2        	bne lloop		; no, repeat
003569  3  A6 rr        	ldx xtmp
00356B  3  60           	rts
00356C  3               
00356C  3               
00356C  3               ;-----------------------------------------------------------------
00356C  3               
00356C  3               dline:
00356C  3  BC D8 35     	ldy sprline,x		; point to screenleft
00356F  3               dline1:
00356F  3  BD D3 3D     	lda objdta,x		; fetch spriteleft byte
003572  3  85 61        	sta z80_a		; save spriteright byte
003574  3  A5 61        	lda z80_a
003576  3  25 62        	and z80_c		; mask left
003578  3  51 rr        	eor (scraddr),y		; merge with screenleft
00357A  3  91 rr        	sta (scraddr),y		; write screenleft
00357C  3  E8           	inx			; next spritebyte
00357D  3  C8           	iny			; point to screenmiddle
00357E  3               dline2a:
00357E  3  BD D3 3D     	lda objdta,x		; fetch spritemiddle byte
003581  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
003583  3  91 rr        	sta (scraddr),y		; write screenmiddle
003585  3  E8           	inx			; next spritebyte
003586  3  C8           	iny			; point to screenmiddle
003587  3               dline2b:
003587  3  BD D3 3D     	lda objdta,x		; fetch spritemiddle byte
00358A  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
00358C  3  91 rr        	sta (scraddr),y		; write screenmiddle
00358E  3  E8           	inx			; next spritebyte
00358F  3  C8           	iny			; point to screenmiddle
003590  3               dline2c:
003590  3  BD D3 3D     	lda objdta,x		; fetch spritemiddle byte
003593  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
003595  3  91 rr        	sta (scraddr),y		; write screenmiddle
003597  3  E8           	inx			; next spritebyte
003598  3  C8           	iny			; point to screenmiddle
003599  3               
003599  3  A5 61        	lda z80_a		; fetch spriteright byte
00359B  3  25 63        	and z80_b		; mask right
00359D  3  51 rr        	eor (scraddr),y		; merge with screenright
00359F  3  91 rr        	sta (scraddr),y		; write screenright
0035A1  3               
0035A1  3  60           	rts
0035A2  3               
0035A2  3               ;-----------------------------------------------------------------
0035A2  3               
0035A2  3               ddline:
0035A2  3  BC D8 35     	ldy sprline,x		; point to screenleft
0035A5  3               ddline1:
0035A5  3  BD D3 3D     	lda objdta,x		; fetch spriteleft byte
0035A8  3  85 61        	sta z80_a		; save spriteright byte
0035AA  3               
0035AA  3  A5 61        	lda z80_a
0035AC  3  25 6E        	and z80_cp		; mask left
0035AE  3  51 72        	eor (z80_hlp),y		; merge with screenleft
0035B0  3  91 72        	sta (z80_hlp),y		; write spritedata0
0035B2  3  E8           	inx			; next spritebyte
0035B3  3  C8           	iny			; point to screenmiddle
0035B4  3               ddline2a:
0035B4  3  BD D3 3D     	lda objdta,x		; fetch spritemiddle byte
0035B7  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0035B9  3  91 72        	sta (z80_hlp),y		; write spritedata1
0035BB  3  E8           	inx			; next spritebyte
0035BC  3  C8           	iny			; point to screenmiddle
0035BD  3               ddline2b:
0035BD  3  BD D3 3D     	lda objdta,x		; fetch spritemiddle byte
0035C0  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0035C2  3  91 72        	sta (z80_hlp),y		; write spritedata2
0035C4  3  E8           	inx			; next spritebyte
0035C5  3  C8           	iny			; point to screenmiddle
0035C6  3               ddline2c:
0035C6  3  BD D3 3D     	lda objdta,x		; fetch spritemiddle byte
0035C9  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
0035CB  3  91 72        	sta (z80_hlp),y		; write spritedata3
0035CD  3  E8           	inx			; next spritebyte
0035CE  3  C8           	iny			; point to screenright
0035CF  3               
0035CF  3  A5 61        	lda z80_a		; fetch spriteright byte
0035D1  3  25 6F        	and z80_bp		; mask right
0035D3  3  51 72        	eor (z80_hlp),y		; merge with screenright
0035D5  3  91 72        	sta (z80_hlp),y		; write spritedata5
0035D7  3               
0035D7  3  60           	rts
0035D8  3               
0035D8  3               sprline:
0035D8  3  00 01 02 03  	.byte $00,$01,$02,$03
0035DC  3  28 29 2A 2B  	.byte $28,$29,$2a,$2b
0035E0  3  50 51 52 53  	.byte $50,$51,$52,$53
0035E4  3  78 79 7A 7B  	.byte $78,$79,$7a,$7b
0035E8  3               
0035E8  3               ;----------------------------------------------------------------------
0035E8  3               ; Line drawn, now work out next target address.
0035E8  3               ;----------------------------------------------------------------------
0035E8  3               
0035E8  3               nline:
0035E8  3  18           	clc
0035E9  3  A5 rr        	lda scraddr 		; get low byte of address.
0035EB  3  69 28        	adc #ScrWidth
0035ED  3  85 rr        	sta scraddr 		; new low byte of address.
0035EF  3  90 02        	bcc :+
0035F1  3  E6 rr        	inc scraddr+1 		; new high byte of address.
0035F3  3               :
0035F3  3  60           	rts
0035F4  3               
0035F4  3               ;-------------------------------------------------------------
0035F4  3               ; Line drawn, now work out next target address.
0035F4  3               ;
0035F4  3               ; Input:
0035F4  3               ;  BP  = right mask
0035F4  3               ;  CP  = left mask
0035F4  3               ;  DEP = spriteaddress
0035F4  3               ;  z80_hlp = screen address
0035F4  3               ;-------------------------------------------------------------
0035F4  3               
0035F4  3               
0035F4  3               ;-----------------------------------------------------------
0035F4  3               ; Animates a sprite.
0035F4  3               ;
0035F4  3               ; Input:
0035F4  3               ;  IX = sprite address
0035F4  3               ;  HL = last sprite address
0035F4  3               ;-----------------------------------------------------------
0035F4  3               
0035F4  3               animsp:
0035F4  3  25 rr        	and frmno
0035F6  3  F0 01        	beq :+
0035F8  3  60           	rts
0035F9  3               :
0035F9  3  A0 06        	ldy #6
0035FB  3  B1 68        	lda (z80_ix),y		; sprite image
0035FD  3  20 58 38     	jsr gfrm		; get frame data.
003600  3               
003600  3  E6 66        	inc z80_l		; point to frames.
003602  3  D0 02        	bne :+
003604  3  E6 67        	inc z80_h
003606  3               :
003606  3  A0 07        	ldy #7
003608  3  B1 68        	lda (z80_ix),y		; sprite frame.
00360A  3  18           	clc
00360B  3  69 01        	adc #1			; next one along.
00360D  3  A0 00        	ldy #0
00360F  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
003611  3  90 02        	bcc anims0		; no, not yet.
003613  3  A9 00        	lda #0			; start at first frame.
003615  3               anims0:
003615  3  A0 07        	ldy #7
003617  3  91 68        	sta (z80_ix),y		; new frame.
003619  3  60           	rts
00361A  3               
00361A  3               ;--------------------------------------------------------------
00361A  3               ; Animate back
00361A  3               ;
00361A  3               ; Input:
00361A  3               ;  IX = sprite address
00361A  3               ;  HL = last sprite address
00361A  3               ;--------------------------------------------------------------
00361A  3               
00361A  3               animbk:
00361A  3  25 rr        	and frmno
00361C  3  F0 01        	beq :+
00361E  3  60           	rts
00361F  3               :
00361F  3  A0 06        	ldy #6
003621  3  B1 68        	lda (z80_ix),y		; sprite image.
003623  3  20 58 38     	jsr gfrm		; get frame data.
003626  3               
003626  3  E6 66        	inc z80_l 		; point to frames.
003628  3  D0 02        	bne :+
00362A  3  E6 67        	inc z80_h
00362C  3               :
00362C  3  A0 07        	ldy #7
00362E  3  B1 68        	lda (z80_ix),y 		; sprite frame.
003630  3  F0 03        	beq :+
003632  3  4C 39 36     	jmp rtanb0 		; yes, start at end.
003635  3               :
003635  3  A0 00        	ldy #0
003637  3  B1 66        	lda (z80_hl),y 		; last sprite.
003639  3               rtanb0:
003639  3  38           	sec
00363A  3  E9 01        	sbc #1			; next one along.
00363C  3  4C 15 36     	jmp anims0		; set new frame.
00363F  3               
00363F  3               ;--------------------------------------------------------------
00363F  3               ; Check for collision with other sprite, strict enforcement.
00363F  3               ;
00363F  3               ; Input:
00363F  3               ;  b		= sprite to test for
00363F  3               ;  ix		= current sprite pointer
00363F  3               ;
00363F  3               ; global:	b
00363F  3               ; local:	x,y,hl,de,skptr
00363F  3               ; calls:	-
00363F  3               ;--------------------------------------------------------------
00363F  3               
00363F  3               sktyp:
00363F  3  A9 36        	lda #<sprtab				; sprite table.
003641  3  85 66        	sta z80_l
003643  3  A9 3A        	lda #>sprtab
003645  3  85 67        	sta z80_h
003647  3               numsp2:
003647  3  A9 0C        	lda #NUMSPR				; number of sprites.
003649  3  85 rr        	sta sktptr
00364B  3               sktyp0:
00364B  3  A5 66        	lda z80_l 				; store pointer to sprite.
00364D  3  85 rr        	sta skptr
00364F  3  A5 67        	lda z80_h
003651  3  85 rr        	sta skptr+1
003653  3               
003653  3  A0 00        	ldy #0
003655  3  B1 66        	lda (z80_hl),y 				; get sprite type.
003657  3  C5 63        	cmp z80_b				; is it the type we seek?
003659  3  F0 1D        	beq coltyp				; yes, we can use this one.
00365B  3               sktyp1:
00365B  3  18           	clc
00365C  3  A5 rr        	lda skptr				; retrieve sprite pointer.
00365E  3  69 11        	adc #TABSIZ				; size of each entry.
003660  3  85 66        	sta z80_l
003662  3  A5 rr        	lda skptr+1
003664  3  69 00        	adc #0
003666  3  85 67        	sta z80_h
003668  3  C6 rr        	dec sktptr					; one less iteration.
00366A  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
00366C  3  A9 00        	lda #0					; default to ROM address - no sprite.
00366E  3  85 66        	sta z80_l
003670  3  85 67        	sta z80_h
003672  3  85 rr        	sta skptr				; store pointer to sprite.
003674  3  85 rr        	sta skptr+1
003676  3               
003676  3  18           	clc					; don't return with zero flag set.
003677  3  60           	rts 					; didn't find one.
003678  3               
003678  3               ;skptr:	.word 0					; search pointer.
003678  3               ;sktptr:	.byte 0
003678  3               
003678  3               coltyp:
003678  3  A0 00        	ldy #0
00367A  3  B1 68        	lda (z80_ix),y				; current sprite type.
00367C  3  C5 63        	cmp z80_b				; seeking sprite of same type?
00367E  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
003680  3               colty0:
003680  3  A0 09        	ldy #9					; distance to x position in table.
003682  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
003684  3  85 64        	sta z80_e
003686  3  88           	dey
003687  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
003689  3  85 65        	sta z80_d
00368B  3               
00368B  3               ; Drop into collision detection.
00368B  3               
00368B  3               colc16:
00368B  3  A0 09        	ldy #9
00368D  3  B1 68        	lda (z80_ix),y			 	; x coord.
00368F  3  38           	sec					; subtract x.
003690  3  E5 64        	sbc z80_e
003692  3  B0 05        	bcs  colc1a 				; result is positive.
003694  3  49 FF        	eor #$ff				; make negative positive.
003696  3  18           	clc
003697  3  69 01        	adc #1
003699  3               colc1a:
003699  3  C9 10        	cmp #16 				; within x range?
00369B  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
00369D  3  85 62        	sta z80_c				; store difference.
00369F  3               
00369F  3  A0 08        	ldy #8
0036A1  3  B1 68        	lda (z80_ix),y				; y coord.
0036A3  3  38           	sec
0036A4  3  E5 65        	sbc z80_d				; subtract y.
0036A6  3  B0 05        	bcs colc1b				; result is positive.
0036A8  3  49 FF        	eor #$ff				; make negative positive.
0036AA  3  18           	clc
0036AB  3  69 01        	adc #1
0036AD  3               colc1b:
0036AD  3  C9 10        	cmp #16					; within y range?
0036AF  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0036B1  3  18           	clc					; add x difference.
0036B2  3  65 62        	adc z80_c
0036B4  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0036B6  3  B0 02        	bcs :+
0036B8  3  38           	sec
0036B9  3  60           	rts 					; carry set if there's a collision.
0036BA  3               :
0036BA  3  4C 5B 36     	jmp sktyp1				; try next sprite in table.
0036BD  3               colty1:
0036BD  3  A5 68        	lda z80_x  				; compare the two.
0036BF  3  C5 66        	cmp z80_l
0036C1  3  D0 09        	bne end_col
0036C3  3  A5 69        	lda z80_i
0036C5  3  C5 67        	cmp z80_h
0036C7  3  D0 03        	bne end_col
0036C9  3  4C 5B 36     	jmp sktyp1 				; addresses are identical.
0036CC  3               end_col:
0036CC  3  4C 80 36     	jmp colty0
0036CF  3               
0036CF  3               ;-----------------------------------------------------------
0036CF  3               ; Display number, left aligned
0036CF  3               ;
0036CF  3               ; Input:
0036CF  3               ;  a		= number
0036CF  3               ;
0036CF  3               ; global:	-
0036CF  3               ; local:	a,y,bc,hl,displ0
0036CF  3               ; calls:	num2ch,dmsg3
0036CF  3               ;-----------------------------------------------------------
0036CF  3               
0036CF  3               disply:
0036CF  3  85 61        	sta z80_a
0036D1  3  A9 F7        	lda #<displ0				; display workspace.
0036D3  3  85 62        	sta z80_c
0036D5  3  A9 36        	lda #>displ0
0036D7  3  85 63        	sta z80_b
0036D9  3  A5 61        	lda z80_a
0036DB  3  20 1D 2A     	jsr num2ch				; convert accumulator to string.
0036DE  3               displ1:
0036DE  3  C6 62        	dec z80_c				; back one character.
0036E0  3  D0 02        	bne :+
0036E2  3  C6 63        	dec z80_b
0036E4  3               :
0036E4  3  A0 00        	ldy #0
0036E6  3  B1 62        	lda (z80_bc),y				; fetch digit.
0036E8  3  09 80        	ora #128				; insert end marker.
0036EA  3  91 62        	sta (z80_bc),y				; new value.
0036EC  3               
0036EC  3  A9 F7        	lda #<displ0				; display space.
0036EE  3  85 66        	sta z80_l
0036F0  3  A9 36        	lda #>displ0
0036F2  3  85 67        	sta z80_h
0036F4  3               
0036F4  3  4C 77 31     	jmp dmsg3				; display the string.
0036F7  3               
0036F7  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0036FB  3               
0036FB  3               ;----------------------------------------------------------------
0036FB  3               ; Initialise screen.
0036FB  3               ;
0036FB  3               ; global:	roomtb,scno
0036FB  3               ; local:	-
0036FB  3               ; calls:	tstcs
0036FB  3               ;----------------------------------------------------------------
0036FB  3               
0036FB  3               initsc:
0036FB  3  AD 13 3B     	lda roomtb 			; whereabouts in the map are we?
0036FE  3  20 08 37     	jsr tstsc 			; find displacement.
003701  3  C9 FF        	cmp #255 			; is it valid?
003703  3  F0 02        	beq init_end 			; no, it's rubbish.
003705  3  85 rr        	sta scno			; store new room number.
003707  3               init_end:
003707  3  60           	rts
003708  3               
003708  3               ;----------------------------------------------------------------
003708  3               ; Test screen.
003708  3               ;
003708  3               ; global:	-
003708  3               ; local:	x
003708  3               ; calls:	-
003708  3               ;----------------------------------------------------------------
003708  3               
003708  3               tstsc:
003708  3  85 rr        	sta tmproom
00370A  3  18           	clc
00370B  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
00370D  3  AA           	tax 				; add displacement to map data.
00370E  3  BD 27 3B     	lda mapdat-MAPWID,x 		; find room number there.
003711  3  60           	rts
003712  3               
003712  3               ;tmproom:	.byte 0
003712  3               
003712  3               ;--------------------------
003712  3               ; Screen left.
003712  3               ;--------------------------
003712  3               
003712  3               scrl:
003712  3  AD 13 3B     	lda roomtb 			; present room table pointer.
003715  3  38           	sec
003716  3  E9 01        	sbc #1				; room left.
003718  3               scrl0:
003718  3  20 08 37     	jsr tstsc			; test screen.
00371B  3  C9 FF        	cmp #255			; is there a screen this way?
00371D  3  D0 01        	bne :+
00371F  3  60           	rts				; no, return to loop.
003720  3               :
003720  3  A5 rr        	lda tmproom			; restore room displacement.
003722  3  8D 13 3B     	sta roomtb			; new room table position.
003725  3               scrl1:
003725  3  20 FB 36     	jsr initsc 			; set new screen.
003728  3  A9 02        	lda #2
00372A  3  85 rr        	sta restfl 			; set it.
00372C  3  60           	rts
00372D  3               scrr:
00372D  3  AD 13 3B     	lda roomtb 			; room table pointer.
003730  3  18           	clc
003731  3  69 01        	adc #1				; room right.
003733  3  4C 18 37     	jmp scrl0
003736  3               scru:
003736  3  AD 13 3B     	lda roomtb 			; room table pointer.
003739  3  38           	sec
00373A  3  E9 03        	sbc #MAPWID 			; room up.
00373C  3  4C 18 37     	jmp scrl0
00373F  3               scrd:
00373F  3  AD 13 3B     	lda roomtb 			; room table pointer.
003742  3  18           	clc
003743  3  69 03        	adc #MAPWID 			; room down.
003745  3  4C 18 37     	jmp scrl0
003748  3               
003748  3               ;-----------------------------------------
003748  3               ; Jump to new screen.
003748  3               ;-----------------------------------------
003748  3               
003748  3               nwscr:
003748  3  A2 00        	ldx #0				; start of map data.
00374A  3               nwscr0:
00374A  3  DD 2A 3B     	cmp mapdat,x
00374D  3  F0 06        	beq nwscr1			; have we found a match for screen?
00374F  3  E8           	inx 				; next room.
003750  3  E0 50        	cpx #80				; zero room count, 80 to search.
003752  3  D0 F6        	bne nwscr0			; keep looking.
003754  3  60           	rts
003755  3               nwscr1:
003755  3  8E 13 3B     	stx roomtb			; set the map position.
003758  3  4C 25 37     	jmp scrl1			; draw new room.
00375B  3               
00375B  3               
00375B  3               ;----------------------------------------------------------
00375B  3               ; Gravity processing.
00375B  3               ;----------------------------------------------------------
00375B  3               
00375B  3               grav:
00375B  3  A0 0D        	ldy #13
00375D  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00375F  3  85 66        	sta z80_l
003761  3  A0 0E        	ldy #14
003763  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003765  3  85 67        	sta z80_h
003767  3  05 66        	ora z80_l			; merge in low byte.
003769  3  D0 01        	bne :+
00376B  3  60           	rts				; if neither is set, we're not in the air.
00376C  3               :
00376C  3  A0 00        	ldy #0
00376E  3  B1 66        	lda (z80_hl),y			; pixels to move.
003770  3  85 61        	sta z80_a
003772  3  C9 63        	cmp #99				; reached the end?
003774  3  D0 0C        	bne grav0			; no, continue.
003776  3               grav2:
003776  3  C6 66        	dec z80_l			; go back to previous value.
003778  3  C9 FF        	cmp #$ff
00377A  3  D0 02        	bne :+
00377C  3  C6 67        	dec z80_h
00377E  3               :
00377E  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003780  3  85 61        	sta z80_a
003782  3               grav0:
003782  3  E6 66        	inc z80_l			; point to next table entry.
003784  3  D0 02        	bne :+
003786  3  E6 67        	inc z80_h
003788  3               :
003788  3  A5 66        	lda z80_l
00378A  3  A0 0D        	ldy #13
00378C  3  91 68        	sta (z80_ix),y			; store new pointer low.
00378E  3  A5 67        	lda z80_h
003790  3  A0 0E        	ldy #14
003792  3  91 68        	sta (z80_ix),y			; store new pointer high.
003794  3               grav1:
003794  3  A5 61        	lda z80_a
003796  3  D0 01        	bne :+				; any movement required?
003798  3  60           	rts				; no, not this time.
003799  3               :
003799  3  A5 61        	lda z80_a
00379B  3  C9 80        	cmp #128			; is it up or down?
00379D  3  B0 15        	bcs gravu			; it's up.
00379F  3               gravd:
00379F  3  85 63        	sta z80_b			; set pixels to move.
0037A1  3               gravd0:
0037A1  3  20 1E 2E     	jsr cangd			; can we go down?
0037A4  3  D0 28        	bne gravst			; can't move down, so stop.
0037A6  3  A0 08        	ldy #8
0037A8  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0037AA  3  18           	clc
0037AB  3  69 01        	adc #1
0037AD  3  91 68        	sta (z80_ix),y
0037AF  3  C6 63        	dec z80_b
0037B1  3  D0 EE        	bne gravd0
0037B3  3  60           	rts
0037B4  3               gravu:
0037B4  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0037B6  3  18           	clc
0037B7  3  69 01        	adc #1
0037B9  3  85 63        	sta z80_b			; set pixels to move.
0037BB  3               gravu0:
0037BB  3  20 E9 2D     	jsr cangu			; can we go up?
0037BE  3  D0 6E        	bne ifalls			; can't move up, go down next.
0037C0  3  A0 08        	ldy #8
0037C2  3  B1 68        	lda (z80_ix),y
0037C4  3  38           	sec
0037C5  3  E9 01        	sbc #1
0037C7  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0037C9  3  C6 63        	dec z80_b
0037CB  3  D0 EE        	bne gravu0
0037CD  3  60           	rts
0037CE  3               gravst:
0037CE  3  A0 0D        	ldy #13
0037D0  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0037D2  3  85 66        	sta z80_l
0037D4  3  A0 0E        	ldy #14
0037D6  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0037D8  3  85 67        	sta z80_h
0037DA  3               
0037DA  3  A9 00        	lda #0				; null value in pointer.
0037DC  3  A0 0D        	ldy #13
0037DE  3  91 68        	sta (z80_ix),y			; store new pointer low.
0037E0  3  C8           	iny
0037E1  3  91 68        	sta (z80_ix),y			; store new pointer high.
0037E3  3               
0037E3  3  A0 00        	ldy #0
0037E5  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0037E7  3  C9 63        	cmp #99				; is it the end marker?
0037E9  3               evftf:
0037E9  3  F0 01        	beq :+				; yes, fallen too far.
0037EB  3  60           	rts
0037EC  3               :
0037EC  3  4C 7A 3C     	jmp evnt15			; EVENT FELLTOOFAR
0037EF  3               
0037EF  3               ;------------------------------------------------
0037EF  3               ; Initiate fall check.
0037EF  3               ;------------------------------------------------
0037EF  3               
0037EF  3               ifall:
0037EF  3  A0 0D        	ldy #13
0037F1  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0037F3  3  85 66        	sta z80_l
0037F5  3  A0 0E        	ldy #14
0037F7  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0037F9  3  85 67        	sta z80_h			; high byte in accumulator.
0037FB  3  05 66        	ora z80_l			; merge in low byte.
0037FD  3  F0 01        	beq :+
0037FF  3  60           	rts				; if either is set, we're already in the air.
003800  3               :
003800  3  A0 09        	ldy #9
003802  3  B1 68        	lda (z80_ix),y			; y coordinate.
003804  3  85 rr        	sta dispx
003806  3  A0 08        	ldy #8
003808  3  B1 68        	lda (z80_ix),y			; look x coordinate.
00380A  3  18           	clc
00380B  3               numsp7:
00380B  3  69 09        	adc #SPR_HGT			; add 16 pixels.
00380D  3  85 rr        	sta dispy			; set up test coordinates.
00380F  3  20 93 30     	jsr tstbl			; get map address.
003812  3  20 C0 2F     	jsr plchk			; block, platform check.
003815  3  F0 01        	beq :+
003817  3  60           	rts				; it's solid, don't fall.
003818  3               :
003818  3  E6 rr        	inc bufaddr			; look right one cell.
00381A  3  20 C0 2F     	jsr plchk			; block, platform check.
00381D  3  F0 01        	beq :+
00381F  3  60           	rts				; it's solid, don't fall.
003820  3               :
003820  3  A5 rr        	lda dispx			; y coordinate.
003822  3  29 07        	and #7				; position straddling block cells.
003824  3  F0 08        	beq ifalls			; no more checks needed.
003826  3  E6 rr        	inc bufaddr			; look to third cell.
003828  3  20 C0 2F     	jsr plchk			; block, platform check.
00382B  3  F0 01        	beq :+
00382D  3  60           	rts				; it's solid, don't fall.
00382E  3               :
00382E  3               ifalls:
00382E  3  A9 F9        	lda #<jtab			; jump table start.
003830  3  85 66        	sta z80_l
003832  3  A9 40        	lda #>jtab
003834  3  85 67        	sta z80_h
003836  3               ifal0:
003836  3  E6 66        	inc z80_l			; point to next value.
003838  3  D0 02        	bne :+
00383A  3  E6 67        	inc z80_h
00383C  3               :
00383C  3  A0 00        	ldy #0
00383E  3  B1 66        	lda (z80_hl),y			; fetch value.
003840  3  F0 F4        	beq ifal0			; no, get next value.
003842  3  C9 63        	cmp #99				; reached end of table?
003844  3  D0 01        	bne :+
003846  3  60           	rts				; yes, don't fall.
003847  3               :
003847  3  C9 80        	cmp #128			; is it going up?
003849  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00384B  3               
00384B  3  A0 0D        	ldy #13
00384D  3  A5 66        	lda z80_l
00384F  3  91 68        	sta (z80_ix),y 			; set jump low.
003851  3  A0 0E        	ldy #14
003853  3  A5 67        	lda z80_h
003855  3  91 68        	sta (z80_ix),y 			; set jump high.
003857  3  60           	rts
003858  3               
003858  3               
003858  3               ;----------------------------------------------------
003858  3               ; Get frame data for a particular sprite.
003858  3               ; Input:
003858  3               ;  a		= framenumer
003858  3               ; Output:
003858  3               ;  hl		= frame address
003858  3               ;
003858  3               ; global:	hl,frmptr
003858  3               ; local:	-
003858  3               ; calls:	-
003858  3               ;----------------------------------------------------
003858  3               
003858  3               gfrm:
003858  3  0A           	asl a	 		 	; multiple of 2.
003859  3  18           	clc
00385A  3  6D 17 28     	adc frmptr 			; frames used by game.
00385D  3  85 66        	sta z80_l
00385F  3  AD 18 28     	lda frmptr+1
003862  3  69 00        	adc #0
003864  3  85 67        	sta z80_h 			; point to frame start.
003866  3  60           	rts
003867  3               
003867  3               ;----------------------------------------------------
003867  3               ; Find sprite list for current room.
003867  3               ;
003867  3               ; global:	hl
003867  3               ; local:	x,y
003867  3               ; calls:	-
003867  3               ;----------------------------------------------------
003867  3               
003867  3               sprlst:
003867  3  A9 CE        	lda #<nmedat 			; list of enemy sprites.
003869  3  85 66        	sta z80_l
00386B  3  A9 3D        	lda #>nmedat
00386D  3  85 67        	sta z80_h
00386F  3  A6 rr        	ldx scno 			; screen number.
003871  3  D0 01        	bne sprls2 			; is it the first screen?
003873  3  60           	rts 				; yes, don't need to search data.
003874  3               sprls2:
003874  3  A0 00        	ldy #0
003876  3               sprls1:
003876  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003878  3  C9 FF        	cmp #255			; is it an end marker?
00387A  3  F0 0E        	beq sprls0 			; yes, end of this room.
00387C  3               
00387C  3  18           	clc 				; point to next sprite in list.
00387D  3  A5 66        	lda z80_l
00387F  3  69 04        	adc #NMESIZ
003881  3  85 66        	sta z80_l
003883  3  90 02        	bcc :+
003885  3  E6 67        	inc z80_h
003887  3               :
003887  3  4C 76 38     	jmp sprls1 			; continue until end of room.
00388A  3               sprls0:
00388A  3  E6 66        	inc z80_l 			; point to start of next screen.s
00388C  3  D0 02        	bne :+
00388E  3  E6 67        	inc z80_h
003890  3               :
003890  3  CA           	dex
003891  3  D0 E3        	bne sprls1 			; continue until room found.
003893  3  60           	rts
003894  3               
003894  3               
003894  3               ;----------------------------------------------------
003894  3               ; Clear all but a single player sprite.
003894  3               ;
003894  3               ; global:	-
003894  3               ; local:	x,y,ix
003894  3               ; calls:	-
003894  3               ;----------------------------------------------------
003894  3               
003894  3               nspr:
003894  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003896  3  85 rr        	sta sprcnt
003898  3  A9 36        	lda #<sprtab 			; sprite table.
00389A  3  85 68        	sta z80_x
00389C  3  A9 3A        	lda #>sprtab
00389E  3  85 69        	sta z80_i
0038A0  3               nspr0:
0038A0  3  A0 00        	ldy #0 				; fetch sprite type.
0038A2  3  B1 68        	lda (z80_ix),y 			; is it a player?
0038A4  3  F0 1A        	beq nspr1 			; yes, keep this one.
0038A6  3               
0038A6  3  A9 FF        	lda #255
0038A8  3  A0 00        	ldy #0 				; fetch sprite type.
0038AA  3  91 68        	sta (z80_ix),y 			; delete sprite.
0038AC  3  A0 05        	ldy #5
0038AE  3  91 68        	sta (z80_ix),y 			; remove next type.
0038B0  3               
0038B0  3  18           	clc	 			; next sprite.
0038B1  3  A5 68        	lda z80_x
0038B3  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0038B5  3  85 68        	sta z80_x
0038B7  3  90 02        	bcc :+
0038B9  3  E6 69        	inc z80_i
0038BB  3               :
0038BB  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0038BD  3  D0 E1        	bne nspr0
0038BF  3  60           	rts
0038C0  3               nspr1:
0038C0  3  A9 FF        	lda #255
0038C2  3  A0 00        	ldy #0
0038C4  3  91 68        	sta (z80_ix),y 			; delete sprite.
0038C6  3               
0038C6  3  18           	clc	 			; point to next sprite.
0038C7  3  A5 68        	lda z80_x
0038C9  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0038CB  3  85 68        	sta z80_x
0038CD  3  90 02        	bcc :+
0038CF  3  E6 69        	inc z80_i
0038D1  3               :
0038D1  3  C6 rr        	dec sprcnt	 			; one less to do.
0038D3  3  D0 01        	bne nspr2
0038D5  3  60           	rts
0038D6  3               nspr2:
0038D6  3  A9 FF        	lda #255
0038D8  3  A0 00        	ldy #0
0038DA  3  91 68        	sta (z80_ix),y 			; delete sprite.
0038DC  3  A0 05        	ldy #5
0038DE  3  91 68        	sta (z80_ix),y 			; remove next type.
0038E0  3               
0038E0  3  18           	clc	 			; next sprite.
0038E1  3  A5 68        	lda z80_x
0038E3  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0038E5  3  85 68        	sta z80_x
0038E7  3  90 02        	bcc :+
0038E9  3  E6 69        	inc z80_i
0038EB  3               :
0038EB  3  C6 rr        	dec sprcnt	 			; one less space in table.
0038ED  3  D0 E7        	bne nspr2
0038EF  3  60           	rts
0038F0  3               
0038F0  3               ;----------------------------------------------------------
0038F0  3               ; Two initialisation routines.
0038F0  3               ; Initialise sprites - copy everything from list to table.
0038F0  3               ;
0038F0  3               ; global:	-
0038F0  3               ; local:	x,y,ix
0038F0  3               ; calls:	cpsp
0038F0  3               ;----------------------------------------------------------
0038F0  3               
0038F0  3               ispr:
0038F0  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0038F2  3  85 rr        	sta sprcnt
0038F4  3  A9 36        	lda #<sprtab			; sprite table.
0038F6  3  85 68        	sta z80_x
0038F8  3  A9 3A        	lda #>sprtab
0038FA  3  85 69        	sta z80_i
0038FC  3               ispr2:
0038FC  3  A0 00        	ldy #0
0038FE  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003900  3  C9 FF        	cmp #255 			; is it an end marker?
003902  3  D0 01        	bne :+
003904  3  60           	rts 				; yes, no more to do.
003905  3               :
003905  3               ispr1:
003905  3  A0 00        	ldy #0
003907  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003909  3  C9 FF        	cmp #255 			; is it enabled yet?
00390B  3  D0 08        	bne ispr4			; yes, try another slot.
00390D  3               
00390D  3  A0 05        	ldy #5
00390F  3  B1 68        	lda (z80_ix),y		 	; next type.
003911  3  C9 FF        	cmp #255 			; is it enabled yet?
003913  3  F0 10        	beq ispr3 			; no, process this one.
003915  3               ispr4:
003915  3  18           	clc 				; next sprite.
003916  3  A5 68        	lda z80_x
003918  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00391A  3  85 68        	sta z80_x
00391C  3  90 02        	bcc :+
00391E  3  E6 69        	inc z80_i
003920  3               :
003920  3  C6 rr        	dec sprcnt
003922  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
003924  3  60           	rts  				; no more room in table.
003925  3               ispr3:
003925  3  20 78 39     	jsr cpsp			; initialise a sprite.
003928  3  C6 rr        	dec sprcnt			; one less space in the table.
00392A  3  D0 D0        	bne ispr2
00392C  3  60           	rts
00392D  3               
00392D  3               
00392D  3               ;-----------------------------------------------------------------------
00392D  3               ; Initialise sprites - but not player, we're keeping the old one.
00392D  3               ;
00392D  3               ; global:	-
00392D  3               ; local:	x,y,ix
00392D  3               ; calls:	cpsp
00392D  3               ;-----------------------------------------------------------------------
00392D  3               
00392D  3               kspr:
00392D  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00392F  3  A9 36        	lda #<sprtab 			; sprite table.
003931  3  85 68        	sta z80_x
003933  3  A9 3A        	lda #>sprtab
003935  3  85 69        	sta z80_i
003937  3               kspr2:
003937  3  A0 00        	ldy #0
003939  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00393B  3  C9 FF        	cmp #255 			; is it an end marker?
00393D  3  D0 01        	bne :+
00393F  3  60           	rts 				; yes, no more to do.
003940  3               :
003940  3  C9 00        	cmp #0
003942  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003944  3               
003944  3  18           	clc 				; next sprite.
003945  3  A5 66        	lda z80_l
003947  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003949  3  85 66        	sta z80_l
00394B  3  90 02        	bcc :+
00394D  3  E6 67        	inc z80_h
00394F  3               :
00394F  3  4C 37 39     	jmp kspr2
003952  3               kspr1:
003952  3  A0 00        	ldy #0 				; fetch sprite type.
003954  3  B1 68        	lda (z80_ix),y
003956  3  C9 FF        	cmp #255 			; is it enabled yet?
003958  3  D0 08        	bne kspr4 			; yes, try another slot.
00395A  3               
00395A  3  A0 05        	ldy #5 				; next type.
00395C  3  B1 68        	lda (z80_ix),y
00395E  3  C9 FF        	cmp #255 			; is it enabled yet?
003960  3  F0 0F        	beq kspr3 			; no, process this one.
003962  3               kspr4:
003962  3  18           	clc 				; next sprite.
003963  3  A5 68        	lda z80_x
003965  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003967  3  85 68        	sta z80_x
003969  3  90 02        	bcc :+
00396B  3  E6 69        	inc z80_i
00396D  3               :
00396D  3  CA           	dex	 			; repeat for remaining sprites.
00396E  3  D0 E2        	bne kspr1
003970  3  60           	rts  				; no more room in table.
003971  3               kspr3:
003971  3  20 78 39     	jsr cpsp 			; copy sprite to table.
003974  3  CA           	dex	 			; one less space in the table.
003975  3  D0 C0        	bne kspr2
003977  3  60           	rts
003978  3               
003978  3               ;----------------------------------------------
003978  3               ; Copy sprite from list to table.
003978  3               ;
003978  3               ; global:	hl,ix
003978  3               ; local:	y
003978  3               ; calls:	evnt09
003978  3               ;----------------------------------------------
003978  3               
003978  3               cpsp:
003978  3  A0 00        	ldy #0				; fetch byte from table.
00397A  3  B1 66        	lda (z80_hl),y
00397C  3  91 68        	sta (z80_ix),y			; set up type.
00397E  3  A0 05        	ldy #PAM1ST
003980  3  91 68        	sta (z80_ix),y 			; set up type.
003982  3               
003982  3  E6 66        	inc z80_l 			; move to next byte.
003984  3  D0 02        	bne :+
003986  3  E6 67        	inc z80_h
003988  3               :
003988  3  A0 00        	ldy #0 				; fetch byte from table.
00398A  3  B1 66        	lda (z80_hl),y
00398C  3  A0 06        	ldy #6
00398E  3  91 68        	sta (z80_ix),y			; set up image.
003990  3               
003990  3  E6 66        	inc z80_l 			; move to next byte.
003992  3  D0 02        	bne :+
003994  3  E6 67        	inc z80_h
003996  3               :
003996  3  A0 00        	ldy #0
003998  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
00399A  3  A0 08        	ldy #8
00399C  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00399E  3               
00399E  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0039A0  3  A0 03        	ldy #3
0039A2  3  91 68        	sta (z80_ix),y
0039A4  3               
0039A4  3  E6 66        	inc z80_l 			; move to next byte.
0039A6  3  D0 02        	bne :+
0039A8  3  E6 67        	inc z80_h
0039AA  3               :
0039AA  3  A0 00        	ldy #0 				; fetch byte from table.
0039AC  3  B1 66        	lda (z80_hl),y
0039AE  3  A0 09        	ldy #9
0039B0  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0039B2  3               
0039B2  3  E6 66        	inc z80_l 			; move to next byte.
0039B4  3  D0 02        	bne :+
0039B6  3  E6 67        	inc z80_h
0039B8  3               :
0039B8  3  A9 00        	lda #0				; zeroes in accumulator.
0039BA  3  A0 07        	ldy #7 				; reset frame number.
0039BC  3  91 68        	sta (z80_ix),y
0039BE  3  A0 0A        	ldy #10 			; reset direction.
0039C0  3  91 68        	sta (z80_ix),y
0039C2  3  A0 0D        	ldy #13				; reset jump pointer low.
0039C4  3  91 68        	sta (z80_ix),y
0039C6  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0039C8  3  91 68        	sta (z80_ix),y
0039CA  3               
0039CA  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0039CC  3  A0 10        	ldy #16
0039CE  3  91 68        	sta (z80_ix),y
0039D0  3               evis0:
0039D0  3  A5 69        	lda z80_i
0039D2  3  48           	pha
0039D3  3  A5 68        	lda z80_x
0039D5  3  48           	pha
0039D6  3  A5 67        	lda z80_h
0039D8  3  48           	pha
0039D9  3  A5 66        	lda z80_l
0039DB  3  48           	pha
0039DC  3               
0039DC  3  20 15 3C     	jsr evnt09 			; perform event.
0039DF  3               
0039DF  3  68           	pla
0039E0  3  85 66        	sta z80_l
0039E2  3  68           	pla
0039E3  3  85 67        	sta z80_h
0039E5  3  68           	pla
0039E6  3  85 68        	sta z80_x
0039E8  3  68           	pla
0039E9  3  85 69        	sta z80_i
0039EB  3               
0039EB  3  18           	clc
0039EC  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0039EE  3  69 11        	adc #TABSIZ		 	; next sprite.
0039F0  3  85 68        	sta z80_x
0039F2  3  90 02        	bcc :+
0039F4  3  E6 69        	inc z80_i
0039F6  3               :
0039F6  3  60           	rts
0039F7  3               
0039F7  3               
0039F7  3               ;-------------------------------------
0039F7  3               ; Clear the play area window.
0039F7  3               ;-------------------------------------
0039F7  3               
0039F7  3               clw:
0039F7  3  AD 23 28     	lda wintop			; get coordinates of window.
0039FA  3  85 rr        	sta dispy			; put into dispx for calculation.
0039FC  3  AD 24 28     	lda winlft
0039FF  3  85 rr        	sta dispx
003A01  3               
003A01  3  AD 25 28     	lda winhgt			; height of window.
003A04  3  85 rr        	sta rrow			; copy to b register.
003A06  3               clw3:
003A06  3  AD 26 28     	lda winwid 			; width of window.
003A09  3  85 rr        	sta rcol
003A0B  3               clw2:
003A0B  3  20 BD 2C     	jsr gprad 			; get print address.
003A0E  3  A9 00        	lda #0				; zero byte to write.
003A10  3  A2 07        	ldx #7				; pixel height of each cell.
003A12  3               clw1:
003A12  3  BC 0C 2D     	ldy scrtab,x
003A15  3  91 rr        	sta (scraddr),y 			; copy to screen.
003A17  3  CA           	dex				; next screen row down.
003A18  3  10 F8        	bpl clw1
003A1A  3               
003A1A  3  E6 rr        	inc dispx			; next column.
003A1C  3  C6 rr        	dec rcol			; one less to do.
003A1E  3  D0 EB        	bne clw2			; repeat for remaining columns.
003A20  3               
003A20  3  AD 24 28     	lda winlft			; get left edge.
003A23  3  85 rr        	sta dispx 			; reset x.
003A25  3  E6 rr        	inc dispy 			; next line down.
003A27  3               
003A27  3  C6 rr        	dec rrow
003A29  3  D0 DB        	bne clw3			; repeat down the screen.
003A2B  3               
003A2B  3  AD 23 28     	lda wintop			; get coordinates of window.
003A2E  3  85 rr        	sta chary			; put into display position.
003A30  3  AD 24 28     	lda winlft
003A33  3  85 rr        	sta charx
003A35  3  60           	rts
003A36  3               
003A36  3               
003A36  3               ;----------------------------------------------------------
003A36  3               ; Effects code.
003A36  3               ; Ticker routine is called 25 times per second.
003A36  3               ;
003A36  3               ; HL = txtscr = left text screen address
003A36  3               ; DE = txtscr+txtwid-1 = right text screen address
003A36  3               ; BC = txtpos = text scroller position
003A36  3               ;
003A36  3               ;----------------------------------------------------------
003A36  3               
003A36  3               .if sflag
003A36  3               scrly:
003A36  3               	rts
003A36  3               	.word txtscr         	; get left screen address.
003A36  3               	sta scr_l
003A36  3               	lda txtscr+1
003A36  3               	sta scr_l+1
003A36  3               	sta scr_r+1
003A36  3               
003A36  3               	stx xtmp
003A36  3               
003A36  3               	clc         		; get right screen address.
003A36  3               	lda scr_l
003A36  3               	adc txtwid
003A36  3               	sta scr_r
003A36  3               	dec scr_r
003A36  3               scrly1:
003A36  3               	ldy txtwid		; set txtwide
003A36  3               	dey
003A36  3               	clc
003A36  3               scrly0:
003A36  3               	lda (scr_l),y		; scroll 1 line
003A36  3               	rol a
003A36  3               	sta (scr_l),y
003A36  3               	dey
003A36  3               	bpl scrly0
003A36  3               
003A36  3               	clc			; point to next line
003A36  3               	lda scr_l
003A36  3               	adc #32
003A36  3               	sta scr_l
003A36  3               	bcc scrly1		; repeat 8 times
003A36  3               
003A36  3               	lda txtpos 		; get text pointer.
003A36  3               	sta scr_txt
003A36  3               	lda txtpos+1
003A36  3               	sta scr_txt+1
003A36  3               
003A36  3               	ldy #0
003A36  3               	lda (scr_txt),y 		; find character we're displaying.
003A36  3               	and #127 		; remove end marker bit if applicable.
003A36  3               	cmp #13			; is it newline?
003A36  3               	bne scrly5 		; no, it's okay.
003A36  3               	lda #32			; convert to a space instead.
003A36  3               scrly5:
003A36  3               	sta fntaddr		; calculate char address
003A36  3               	lda #0
003A36  3               	sta fntaddr+1
003A36  3               	asl fntaddr  		; multiply char by 8.
003A36  3               	rol fntaddr+1
003A36  3               	asl fntaddr
003A36  3               	rol fntaddr+1
003A36  3               	asl fntaddr
003A36  3               	rol fntaddr+1
003A36  3               	lda fntaddr
003A36  3               	clc
003A36  3               	adc #<(FONT-256)
003A36  3               	sta scrly3+1		; that's the low byte.
003A36  3               	lda fntaddr+1
003A36  3               	adc #>(FONT-256)
003A36  3               	sta scrly3+2		; add displacement.
003A36  3               
003A36  3               	ldx #0
003A36  3               scrly3:
003A36  3               	lda $3333,x		; get image of char line.
003A36  3               	and txtbit
003A36  3               	beq scrly2		; don't plot pixel
003A36  3               	ldy scrline,x
003A36  3               	lda (scr_r),y
003A36  3               	clc
003A36  3               	ora #1
003A36  3               	sta (scr_r),y		; plot pixel
003A36  3               scrly2:
003A36  3               	inx			; next line of char.
003A36  3               	cpx #8
003A36  3               	bne scrly3
003A36  3               
003A36  3               	lsr txtbit		; bit of text to display.
003A36  3               	bcs :+
003A36  3               	rts
003A36  3               :
003A36  3               	ldy #0
003A36  3               	lda (scr_txt),y 	; what was the character?
003A36  3               	asl a	  		; end of message?
003A36  3               	bcs scrly4
003A36  3               	inc txtpos
003A36  3               	bne :+
003A36  3               	inc txtpos+1
003A36  3               :
003A36  3               	jmp scrly6 		; not yet - continue.
003A36  3               scrly4:
003A36  3               	lda txtini 		; start of scrolling message.
003A36  3               	sta txtpos
003A36  3               	lda txtini+1
003A36  3               	sta txtpos+1
003A36  3               scrly6:
003A36  3               	lda #128
003A36  3               	sta txtbit
003A36  3               	ldx xtmp
003A36  3               	rts
003A36  3               
003A36  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003A36  3               
003A36  3               ;-------------------------------------------------------
003A36  3               ; Entry TICKER command
003A36  3               ;
003A36  3               ; Entry:
003A36  3               ;  z80_b = message nr
003A36  3               ;  z80_c = width
003A36  3               ;-------------------------------------------------------
003A36  3               
003A36  3               iscrly:
003A36  3               	jsr prescr 		; set up display position.
003A36  3               
003A36  3               	lda #<msgdat 		; text messages.
003A36  3               	sta z80_l
003A36  3               	lda #>msgdat
003A36  3               	sta z80_h
003A36  3               
003A36  3               	lda z80_c 		; width.
003A36  3               	sec
003A36  3               	sbc #1			; subtract one.
003A36  3               	cmp #32 		; is it between 1 and 32?
003A36  3               	bcc :+
003A36  3               	lda #$60
003A36  3               	jmp iscrl0		; no, disable messages.
003A36  3               :
003A36  3               	ldx z80_b		; message number.
003A36  3               	jsr getwrd 		; find message start.
003A36  3               
003A36  3               	lda z80_l		; set initial text position.
003A36  3               	sta txtini
003A36  3               	lda z80_h
003A36  3               	sta txtini+1
003A36  3               
003A36  3               	lda #$ad		; code for lda adrr
003A36  3               iscrl0:
003A36  3               	sta scrly		; enable/disable scrolling routine.
003A36  3               
003A36  3               	jsr prescr 		; set up display position.
003A36  3               	jsr gprad 		; get print address.
003A36  3               
003A36  3               	lda scraddr 		; set text screen address.
003A36  3               	sta txtscr
003A36  3               	lda scraddr+1
003A36  3               	sta txtscr+1
003A36  3               
003A36  3               	lda z80_c		; width.
003A36  3               	sta txtwid		; set width in working storage.
003A36  3               
003A36  3               	lda #128 		; start with leftmost bit.
003A36  3               	sta txtbit
003A36  3               
003A36  3               	jmp scrly4
003A36  3               .endif
003A36  3               
003A36  3               ;------------------------------------------------------------------
003A36  3               ; Dig routine, conditional assembly depending on dflag
003A36  3               ;------------------------------------------------------------------
003A36  3               .if dflag
003A36  3               dig:
003A36  3               	and #3
003A36  3               	beq digr		; dig right
003A36  3               	cmp #1
003A36  3               	beq digl		; dig left
003A36  3               	cmp #2
003A36  3               	beq digd		; dig down
003A36  3               
003A36  3               ; Dig up.
003A36  3               
003A36  3               digu:				; dig up
003A36  3               	ldy #8
003A36  3               	lda (z80_ix),y
003A36  3               	sec
003A36  3               	sbc #2
003A36  3               	sta dispy		; set y
003A36  3               
003A36  3               	iny
003A36  3               	lda (z80_ix),y
003A36  3               	sta dispx		; set x
003A36  3               	jmp digv
003A36  3               
003A36  3               ; Dig down.
003A36  3               
003A36  3               digd:
003A36  3               	ldy #9
003A36  3               	lda (z80_ix),y
003A36  3               	sta dispx		; set y
003A36  3               
003A36  3               	dey
003A36  3               	clc
003A36  3               	lda (z80_ix),y
003A36  3               	adc #16
003A36  3               	sta dispy		; set y
003A36  3               	jmp digv
003A36  3               
003A36  3               ; Dig left.
003A36  3               
003A36  3               digl:
003A36  3               	ldy #8
003A36  3               	lda (z80_ix),y
003A36  3               	sta dispy		; set y
003A36  3               
003A36  3               	iny
003A36  3               	lda (z80_ix),y
003A36  3               	sec
003A36  3               	sbc #2			; x=x-2
003A36  3               	sta dispx		; set x
003A36  3               	jmp digh
003A36  3               
003A36  3               ; Dig right.
003A36  3               
003A36  3               digr:
003A36  3               	ldy #8
003A36  3               	lda (z80_ix),y
003A36  3               	sta dispy		; set y
003A36  3               
003A36  3               	iny
003A36  3               	lda (z80_ix),y
003A36  3               	clc
003A36  3               	adc #16
003A36  3               	sta dispx		; set x+16
003A36  3               	jmp digh
003A36  3               
003A36  3               ; Vertical digging
003A36  3               
003A36  3               digv:
003A36  3               	jsr tstbl		; check blocktype in MAP
003A36  3               	jsr fdchk		; test if FODDER
003A36  3               
003A36  3               	clc
003A36  3               	lda dispx		; look 1 cell down
003A36  3               	adc #8
003A36  3               	sta dispx
003A36  3               	jsr tstbl		; check blocktype in MAP
003A36  3               	jsr fdchk
003A36  3               	lda dispx
003A36  3               	and #7
003A36  3               	bne :+
003A36  3               	rts
003A36  3               :
003A36  3               	clc
003A36  3               	lda dispx		; look 1 cell down
003A36  3               	adc #8
003A36  3               	sta dispx
003A36  3               	jsr tstbl		; check blocktype in MAP
003A36  3               	jmp fdchk
003A36  3               
003A36  3               ; Horizontal digging
003A36  3               
003A36  3               digh:
003A36  3               	jsr tstbl		; check blocktype in MAP
003A36  3               	jsr fdchk		; test if FODDER
003A36  3               
003A36  3               	clc
003A36  3               	lda dispy		; look 1 cell down
003A36  3               	adc #8
003A36  3               	sta dispy
003A36  3               	jsr tstbl		; check blocktype in MAP
003A36  3               	jsr fdchk
003A36  3               	lda dispy
003A36  3               	and #7
003A36  3               	bne :+
003A36  3               	rts
003A36  3               :
003A36  3               	clc
003A36  3               	lda dispy		; look 1 cell down
003A36  3               	adc #8
003A36  3               	sta dispy
003A36  3               	jsr tstbl		; check blocktype in MAP
003A36  3               	jmp fdchk
003A36  3               
003A36  3               digcnt:	.byte 0
003A36  3               
003A36  3               .endif
003A36  3               
003A36  3               ;------------------------------------------------------------------
003A36  3               ; Sprite table
003A36  3               ;------------------------------------------------------------------
003A36  3               
003A36  3               
003A36  3               ; ix+0  = type.
003A36  3               ; ix+1  = sprite image number.
003A36  3               ; ix+2  = frame.
003A36  3               ; ix+3  = y coord.
003A36  3               ; ix+4  = x coord.
003A36  3               
003A36  3               ; ix+5  = new type.
003A36  3               ; ix+6  = new image number.
003A36  3               ; ix+7  = new frame.
003A36  3               ; ix+8  = new y coord.
003A36  3               ; ix+9  = new x coord.
003A36  3               
003A36  3               ; ix+10 = direction.
003A36  3               ; ix+11 = parameter 1.
003A36  3               ; ix+12 = parameter 2.
003A36  3               ; ix+13 = jump pointer low.
003A36  3               ; ix+14 = jump pointer high.
003A36  3               ; ix+15 = data pointer low.
003A36  3               ; ix+16 = data pointer high.
003A36  3               
003A36  3               ; block NUMSPR * TABSIZ,255
003A36  3               
003A36  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003A3A  3  FF FF FF FF  
003A3E  3  FF FF FF FF  
003B02  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003B06  3  FF FF FF 00  
003B0A  3  C0 78 00 00  
003B13  3  07           roomtb:	.byte 7                      ; start room map offset.
003B14  3               
003B14  3               ; User routine.  Put your own code in here to be called with USER instruction.
003B14  3               ; if USER has an argument it will be passed in the accumulator.
003B14  3               
003B14  3               user:
003B14  3               	.include "user.inc"
003B14  4  60           	rts
003B15  4               
003B15  3               
003B15  3               setfgcol:
003B15  3  29 07        	and #7
003B17  3  8D 24 3B     	sta fcolour
003B1A  3  60           	rts
003B1B  3               
003B1B  3               setbgcol:
003B1B  3  29 07        	and #7
003B1D  3  18           	clc
003B1E  3  69 10        	adc #16
003B20  3  8D 25 3B     	sta bcolour
003B23  3  60           	rts
003B24  3               
003B24  3  07           fcolour:	.byte t_white
003B25  3  17           bcolour:	.byte g_white
003B26  3               
003B26  3               ; Everything below here will be generated by the editors.
003B26  3               
003B26  3  60                   rts
003B27  3               WINDOWTOP = 2
003B27  3               WINDOWLFT = 1
003B27  3               WINDOWHGT = 21
003B27  3               WINDOWWID = 30 ;
003B27  3               MAPWID = 3
003B27  3  FF FF FF             .byte 255,255,255
003B2A  3               mapdat:
003B2A  3  FF 00 FF             .byte 255,0,255
003B2D  3  FF FF FF             .byte 255,255,255
003B30  3  01           stmap:  .byte 1
003B31  3               
003B31  3               evnt00:
003B31  3  A9 00                lda #0
003B33  3  85 rr                sta varm
003B35  3  A5 rr                lda joyval	; KEY
003B37  3  29 08                and #8
003B39  3  F0 03                beq :+
003B3B  3  4C 53 3B             jmp a00078
003B3E  3               :
003B3E  3  A9 01                lda #1
003B40  3  85 rr                sta varm
003B42  3  20 E9 2D             jsr cangu	; CANGOUP
003B45  3  F0 03                beq :+
003B47  3  4C 53 3B             jmp a00078
003B4A  3               :
003B4A  3  A0 08                ldy #8 		; SPRITEUP
003B4C  3  B1 68                lda (z80_ix),y
003B4E  3  38                   sec
003B4F  3  E9 02                sbc #2
003B51  3  91 68                sta (z80_ix),y
003B53  3  A5 rr        a00078: lda joyval	; KEY
003B55  3  29 04                and #4
003B57  3  F0 03                beq :+
003B59  3  4C 71 3B             jmp a00147
003B5C  3               :
003B5C  3  A9 01                lda #1
003B5E  3  85 rr                sta varm
003B60  3  20 1E 2E             jsr cangd	; CANGODOWN
003B63  3  F0 03                beq :+
003B65  3  4C 71 3B             jmp a00147
003B68  3               :
003B68  3  A0 08                ldy #8 		; SPRITEDOWN
003B6A  3  B1 68                lda (z80_ix),y
003B6C  3  18                   clc
003B6D  3  69 02                adc #2
003B6F  3  91 68                sta (z80_ix),y
003B71  3  A9 00        a00147: lda #0		; AT
003B73  3  85 rr                sta chary
003B75  3  A9 01                lda #1
003B77  3  85 rr                sta charx
003B79  3  A9 01                lda #1		; PRINT
003B7B  3  20 6B 31             jsr dmsg
003B7E  3  A5 rr                lda joyval	; KEY
003B80  3  29 02                and #2
003B82  3  F0 03                beq :+
003B84  3  4C 97 3B             jmp a00235
003B87  3               :
003B87  3  A9 01                lda #1
003B89  3  85 rr                sta varm
003B8B  3  A0 09                ldy #9 		; SPRITELEFT
003B8D  3  B1 68                lda (z80_ix),y
003B8F  3  38                   sec
003B90  3  E9 02                sbc #2
003B92  3  91 68                sta (z80_ix),y
003B94  3  20 56 41             jsr prskey	; WAITKEY
003B97  3  A5 rr        a00235: lda joyval	; KEY
003B99  3  29 01                and #1
003B9B  3  F0 03                beq :+
003B9D  3  4C B0 3B             jmp a00296
003BA0  3               :
003BA0  3  A9 01                lda #1
003BA2  3  85 rr                sta varm
003BA4  3  A0 09                ldy #9 		; SPRITERIGHT
003BA6  3  B1 68                lda (z80_ix),y
003BA8  3  18                   clc
003BA9  3  69 02                adc #2
003BAB  3  91 68                sta (z80_ix),y
003BAD  3  20 56 41             jsr prskey	; WAITKEY
003BB0  3  A9 00        a00296: lda #0
003BB2  3  C5 rr                cmp varm
003BB4  3  90 03                bcc *+5
003BB6  3  4C BE 3B             jmp a00324
003BB9  3  A9 00                lda #0		; ANIMATE
003BBB  3  20 F4 35             jsr animsp
003BBE  3               a00324: ; SPRITEINK command
003BBE  3  A9 05                lda #DEADLY	; DEADLY
003BC0  3  85 63                sta z80_b
003BC2  3  20 D8 2F             jsr tded
003BC5  3  C5 63                cmp z80_b
003BC7  3  F0 03                beq :+
003BC9  3  4C DC 3B             jmp a00394
003BCC  3               :
003BCC  3  A9 17                lda #23		; AT
003BCE  3  85 rr                sta chary
003BD0  3  A9 14                lda #20
003BD2  3  85 rr                sta charx
003BD4  3  A9 02                lda #2		; PRINT
003BD6  3  20 6B 31             jsr dmsg
003BD9  3  4C 07 3C             jmp a00485
003BDC  3  A9 06        a00394: lda #CUSTOM	; CUSTOM
003BDE  3  85 63                sta z80_b
003BE0  3  20 D8 2F             jsr tded
003BE3  3  C5 63                cmp z80_b
003BE5  3  F0 03                beq :+
003BE7  3  4C FA 3B             jmp a00457
003BEA  3               :
003BEA  3  A9 17                lda #23		; AT
003BEC  3  85 rr                sta chary
003BEE  3  A9 14                lda #20
003BF0  3  85 rr                sta charx
003BF2  3  A9 03                lda #3		; PRINT
003BF4  3  20 6B 31             jsr dmsg
003BF7  3  4C 07 3C             jmp a00485
003BFA  3  A9 17        a00457: lda #23		; AT
003BFC  3  85 rr                sta chary
003BFE  3  A9 14                lda #20
003C00  3  85 rr                sta charx
003C02  3  A9 04                lda #4		; PRINT
003C04  3  20 6B 31             jsr dmsg
003C07  3  A9 00        a00485: lda #0		; ANIMATE
003C09  3  20 F4 35             jsr animsp
003C0C  3  60                   rts
003C0D  3               evnt01:
003C0D  3  60                   rts
003C0E  3               evnt02:
003C0E  3  60                   rts
003C0F  3               evnt03:
003C0F  3  60                   rts
003C10  3               evnt04:
003C10  3  60                   rts
003C11  3               evnt05:
003C11  3  60                   rts
003C12  3               evnt06:
003C12  3  60                   rts
003C13  3               evnt07:
003C13  3  60                   rts
003C14  3               evnt08:
003C14  3  60                   rts
003C15  3               evnt09:
003C15  3  60                   rts
003C16  3               evnt10:
003C16  3  A9 01                lda #1
003C18  3  C5 rr                cmp varz
003C1A  3  F0 03                beq *+5
003C1C  3  4C 2B 3C             jmp k00042
003C1F  3  A9 06                lda #6 	; INK
003C21  3  20 15 3B             jsr setfgcol
003C24  3  A9 00                lda #0
003C26  3  85 rr                sta varz
003C28  3  4C 34 3C             jmp k00061
003C2B  3  A9 01        k00042: lda #1 	; INK
003C2D  3  20 15 3B             jsr setfgcol
003C30  3  A9 01                lda #1
003C32  3  85 rr                sta varz
003C34  3  A9 12        k00061: lda #18		; AT
003C36  3  85 rr                sta chary
003C38  3  A9 0C                lda #12
003C3A  3  85 rr                sta charx
003C3C  3  A9 05                lda #5		; PRINT
003C3E  3  20 6B 31             jsr dmsg
003C41  3  60                   rts
003C42  3               evnt11:
003C42  3  60                   rts
003C43  3               evnt12:
003C43  3  A9 05                lda #5 	; PAPER
003C45  3  20 1B 3B             jsr setbgcol
003C48  3  20 0A 41             jsr cls		; CLS
003C4B  3  A9 00                lda #0		; AT
003C4D  3  85 rr                sta chary
003C4F  3  A9 0A                lda #10
003C51  3  85 rr                sta charx
003C53  3  A9 01                lda #1		; PRINTMODE
003C55  3  85 rr                sta prtmod
003C57  3  A9 01                lda #1 	; INK
003C59  3  20 15 3B             jsr setfgcol
003C5C  3  A9 06                lda #6		; PRINT
003C5E  3  20 6B 31             jsr dmsg
003C61  3  A9 00                lda #0		; PRINTMODE
003C63  3  85 rr                sta prtmod
003C65  3  A9 02                lda #2 	; INK
003C67  3  20 15 3B             jsr setfgcol
003C6A  3  A9 17                lda #23		; AT
003C6C  3  85 rr                sta chary
003C6E  3  A9 09                lda #9
003C70  3  85 rr                sta charx
003C72  3  A9 07                lda #7		; PRINT
003C74  3  20 6B 31             jsr dmsg
003C77  3  60                   rts
003C78  3               evnt13:
003C78  3  60                   rts
003C79  3               evnt14:
003C79  3  60                   rts
003C7A  3               evnt15:
003C7A  3  60                   rts
003C7B  3               evnt16:
003C7B  3  60                   rts
003C7C  3               evnt17:
003C7C  3  60                   rts
003C7D  3               evnt18:
003C7D  3  60                   rts
003C7E  3               evnt19:
003C7E  3  60                   rts
003C7F  3               evnt20:
003C7F  3  60                   rts
003C80  3  60           ptcusr: rts
003C81  3               msgdat:
003C81  3  42 4C 4F 43          .byte "BLOCK DEM",207
003C85  3  4B 20 44 45  
003C89  3  4D CF        
003C8B  3  CC                   .byte 204
003C8C  3  44 45 41 44          .byte "DEADL",217
003C90  3  4C D9        
003C92  3  43 55 53 54          .byte "CUSTO",205
003C96  3  4F CD        
003C98  3  4E 4F 4E 45          .byte "NONE ",160
003C9C  3  20 A0        
003C9E  3  43 48 45 43          .byte "CHEC",203
003CA2  3  CB           
003CA3  3  54 45 53 54          .byte "TEST BLOCK",186
003CA7  3  20 42 4C 4F  
003CAB  3  43 4B BA     
003CAE  3  48 49 54 20          .byte "HIT BLOCK",186
003CB2  3  42 4C 4F 43  
003CB6  3  4B BA        
003CB8  3               nummsg:
003CB8  3  08                   .byte 8
003CB9  3               chgfx:
003CB9  3  00 01                .byte 0,1
003CBB  3  7F 01                .byte 127,1
003CBD  3  66 01                .byte 102,1
003CBF  3  2C 01                .byte 44,1
003CC1  3  20 01                .byte 32,1
003CC3  3  66 01                .byte 102,1
003CC5  3  77 01                .byte 119,1
003CC7  3  24 01                .byte 36,1
003CC9  3  60 01                .byte 96,1
003CCB  3  6C 01                .byte 108,1
003CCD  3  7D 01                .byte 125,1
003CCF  3  64 01                .byte 100,1
003CD1  3  22 01                .byte 34,1
003CD3  3  7A 01                .byte 122,1
003CD5  3  6B 01                .byte 107,1
003CD7  3  32 01                .byte 50,1
003CD9  3               bprop:
003CD9  3  00                   .byte 0
003CDA  3  02                   .byte 2
003CDB  3  05                   .byte 5
003CDC  3  06                   .byte 6
003CDD  3  00                   .byte 0
003CDE  3  00                   .byte 0
003CDF  3  00                   .byte 0
003CE0  3  00                   .byte 0
003CE1  3  00                   .byte 0
003CE2  3  00                   .byte 0
003CE3  3  00                   .byte 0
003CE4  3  00                   .byte 0
003CE5  3  00                   .byte 0
003CE6  3  00                   .byte 0
003CE7  3  00                   .byte 0
003CE8  3  00                   .byte 0
003CE9  3               sprgfx:
003CE9  3  20 66 77 24          .byte 32,102,119,36,96,108,125,100,34,122,107,50
003CED  3  60 6C 7D 64  
003CF1  3  22 7A 6B 32  
003CF5  3  20 28 7B 39          .byte 32,40,123,57,48,56,126,60,33,97,55,117
003CF9  3  30 38 7E 3C  
003CFD  3  21 61 37 75  
003D01  3  22 7A 6B 32          .byte 34,122,107,50,96,108,125,100,32,102,119,36
003D05  3  60 6C 7D 64  
003D09  3  20 66 77 24  
003D0D  3  21 61 37 75          .byte 33,97,55,117,48,56,126,60,32,40,123,57
003D11  3  30 38 7E 3C  
003D15  3  20 28 7B 39  
003D19  3               frmlst:
003D19  3  00 02 02 00          .byte 0,2,2,0
003D1D  3               scdat:
003D1D  3  AE 00                .word 174
003D1F  3  FF 01 1F FF          .byte 255,1,31,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,0,0,0,2,2,2,255,0,13,4,5,6,7,255,0,5
003D23  3  00 1C 01 01  
003D27  3  FF 00 1C 01  
003D41  3  01 01 00 00          .byte 1,1,0,0,0,2,0,2,255,0,13,8,9,10,11,255,0,5,1,1,0,0,0,2,2,2,255,0,13,12,13,14,15
003D45  3  00 02 00 02  
003D49  3  FF 00 0D 08  
003D62  3  FF 00 05 01          .byte 255,0,5,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,0,28
003D66  3  01 FF 00 1C  
003D6A  3  01 01 FF 00  
003D83  3  01 01 FF 00          .byte 1,1,255,0,28,1,1,255,0,28,1,1,0,0,0,3,3,3,255,0,16,3,3,3,0,0,0,1,1,0,0,0,3
003D87  3  1C 01 01 FF  
003D8B  3  00 1C 01 01  
003DA4  3  00 03 FF 00          .byte 0,3,255,0,16,3,0,3,0,0,0,1,1,0,0,0,3,3,3,255,0,16,3,3,3,0,0,0,1,1,255,0,28
003DA8  3  10 03 00 03  
003DAC  3  00 00 00 01  
003DC5  3  01 01 FF 00          .byte 1,1,255,0,28,255,1,31
003DC9  3  1C FF 01 1F  
003DCD  3               numsc:
003DCD  3  01                   .byte 1
003DCE  3               nmedat:
003DCE  3  00 00 28 28          .byte 0,0,40,40,255
003DD2  3  FF           
003DD3  3               NUMOBJ = 1
003DD3  3               objdta:
003DD3  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
003DD7  3  00 00 00 00  
003DDB  3  00 00 00 00  
003DF9  3               font:
003DF9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003DFD  3  00 00 00 00  
003E01  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003E05  3  30 00 30 00  
003E09  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003E0D  3  00 00 00 00  
003E11  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003E15  3  6C FE 6C 00  
003E19  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
003E1D  3  7E 1E 7E 18  
003E21  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003E25  3  30 6E CE 00  
003E29  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
003E2D  3  7E CC 7E 00  
003E31  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
003E35  3  00 00 00 00  
003E39  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
003E3D  3  18 18 0C 00  
003E41  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
003E45  3  30 30 60 00  
003E49  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
003E4D  3  7E 18 3C 00  
003E51  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
003E55  3  7E 18 18 00  
003E59  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
003E5D  3  00 18 18 30  
003E61  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
003E65  3  7E 00 00 00  
003E69  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003E6D  3  00 38 38 00  
003E71  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003E75  3  18 30 60 00  
003E79  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003E7D  3  F6 E6 7C 00  
003E81  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003E85  3  18 18 7E 00  
003E89  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003E8D  3  7C C0 FE 00  
003E91  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003E95  3  06 C6 7C 00  
003E99  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003E9D  3  D8 FE 18 00  
003EA1  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003EA5  3  06 C6 7C 00  
003EA9  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003EAD  3  C6 C6 7C 00  
003EB1  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003EB5  3  18 30 30 00  
003EB9  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003EBD  3  C6 C6 7C 00  
003EC1  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003EC5  3  7E 06 7C 00  
003EC9  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003ECD  3  00 00 30 00  
003ED1  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003ED5  3  00 30 30 60  
003ED9  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003EDD  3  30 18 0C 00  
003EE1  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003EE5  3  00 7E 00 00  
003EE9  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003EED  3  0C 18 30 00  
003EF1  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003EF5  3  18 00 18 00  
003EF9  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003EFD  3  FE C0 7C 00  
003F01  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003F05  3  FE C6 C6 00  
003F09  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003F0D  3  C6 C6 FC 00  
003F11  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003F15  3  C0 C6 7C 00  
003F19  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
003F1D  3  C6 CC F8 00  
003F21  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003F25  3  C0 C0 FE 00  
003F29  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
003F2D  3  C0 C0 C0 00  
003F31  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
003F35  3  DE C6 7C 00  
003F39  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
003F3D  3  C6 C6 C6 00  
003F41  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
003F45  3  18 18 7E 00  
003F49  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
003F4D  3  C6 C6 7C 00  
003F51  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
003F55  3  D8 CC C6 00  
003F59  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
003F5D  3  C0 C0 FE 00  
003F61  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
003F65  3  C6 C6 C6 00  
003F69  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003F6D  3  DE CE C6 00  
003F71  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
003F75  3  C6 C6 7C 00  
003F79  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003F7D  3  FC C0 C0 00  
003F81  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003F85  3  F6 DE 7C 00  
003F89  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003F8D  3  FC CC C6 00  
003F91  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003F95  3  06 C6 7C 00  
003F99  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003F9D  3  30 30 30 00  
003FA1  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003FA5  3  C6 C6 7C 00  
003FA9  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003FAD  3  C6 6C 38 00  
003FB1  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003FB5  3  C6 FE 6C 00  
003FB9  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003FBD  3  38 6C C6 00  
003FC1  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003FC5  3  30 30 30 00  
003FC9  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003FCD  3  30 60 FE 00  
003FD1  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003FD5  3  18 18 1E 00  
003FD9  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003FDD  3  30 18 0C 00  
003FE1  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003FE5  3  30 30 F0 00  
003FE9  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003FED  3  30 30 30 00  
003FF1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003FF5  3  00 00 00 FF  
003FF9  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003FFD  3  60 60 FE 00  
004001  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
004005  3  7C CC 7C 00  
004009  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00400D  3  66 66 7C 00  
004011  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
004015  3  60 60 3C 00  
004019  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00401D  3  CC CC 7C 00  
004021  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
004025  3  F8 C0 7C 00  
004029  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00402D  3  30 30 30 00  
004031  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
004035  3  CC 7C 0C 78  
004039  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00403D  3  CC CC CC 00  
004041  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
004045  3  30 30 78 00  
004049  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00404D  3  0C 0C 6C 38  
004051  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
004055  3  70 78 6C 00  
004059  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00405D  3  30 30 1C 00  
004061  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
004065  3  FC FC FC 00  
004069  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00406D  3  CC CC CC 00  
004071  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
004075  3  CC CC 78 00  
004079  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00407D  3  CC F8 C0 C0  
004081  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
004085  3  CC 7C 0C 0E  
004089  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00408D  3  60 60 60 00  
004091  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
004095  3  78 0C F8 00  
004099  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00409D  3  30 30 1C 00  
0040A1  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0040A5  3  CC CC 78 00  
0040A9  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0040AD  3  78 78 30 00  
0040B1  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
0040B5  3  FC FC 78 00  
0040B9  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
0040BD  3  30 78 CC 00  
0040C1  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
0040C5  3  CC 7C 0C 78  
0040C9  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
0040CD  3  30 60 FC 00  
0040D1  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
0040D5  3  18 18 1E 00  
0040D9  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
0040DD  3  18 18 18 00  
0040E1  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0040E5  3  30 30 F0 00  
0040E9  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0040ED  3  00 00 00 00  
0040F1  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0040F5  3  E3 BB C6 7C  
0040F9  3               jtab:
0040F9  3  63                   .byte 99
0040FA  3  50 4F 41 51  keys:   .byte 80,79,65,81,77,83,72,49,50,51,52
0040FE  3  4D 53 48 31  
004102  3  32 33 34     
004105  3               
004105  2               
004105  1               	.include "lib.inc"
004105  2               ;----------------------------------------------------------------------
004105  2               ; System 5 depending variables and routines
004105  2               ;----------------------------------------------------------------------
004105  2               
004105  2               ; Global variables
004105  2               
004105  2               	t_red		= 1	; Text colour definition filters
004105  2               	t_green		= 2
004105  2               	t_yellow	= 3
004105  2               	t_blue		= 4
004105  2               	t_magenta	= 5
004105  2               	t_cyan		= 6
004105  2               	t_white		= 7
004105  2               
004105  2               	g_red		= 17	; Graphics colour definition filters
004105  2               	g_green		= 18
004105  2               	g_yellow	= 19
004105  2               	g_blue		= 20
004105  2               	g_magenta	= 21
004105  2               	g_cyan		= 22
004105  2               	g_white		= 23
004105  2               
004105  2               	ScrWidth	= 40
004105  2               	ScrHeight	= 25
004105  2               
004105  2               ; System constants
004105  2               
004105  2               	ScreenAddr	= $0400	; Startaddress video RAM
004105  2               	MAP 		= $D800	; properties map buffer (4x256 bytes)
004105  2               	SCADTB_lb 	= $DC00	; screen address table lo-byte (256 bytes)
004105  2               	SCADTB_hb 	= $DD00	; screen address table hi-byte (256 bytes)
004105  2               	SHRAPN 		= $DE00	; shrapnel table (55x6 bytes)
004105  2               	PORT_A		= $0E21	; Keyboard
004105  2               
004105  2               	ScrSelAddr	= $b000	; Screen selection address
004105  2               	KeyRowAddr	= $b000	; PIA key matrix row
004105  2               	KeyColAddr	= $b001	; PIA key matrix column
004105  2               	SpeakerBit	= $b002	; Speaker bit
004105  2               	CmdReg		= $b400	; Command register AtoMMC
004105  2               	DatReg		= $b401	; Data register AtoMMC
004105  2               	Timer2_Low	= $b808	; Timer 2 low byte
004105  2               	Timer2_High	= $b809	; Timer 2 high byte
004105  2               
004105  2               ; System calls
004105  2               
004105  2               	OS_CLI   = $FFF7
004105  2               	OSBYTE   = $FFF4
004105  2               	OSWORD   = $FFF1
004105  2               	OSWRCH   = $FFEE
004105  2               	OSWRCR   = $FFEC
004105  2               	OSNEWL   = $FFE7
004105  2               	OSASCI   = $FFE3
004105  2               	OSRDCH   = $FFE0
004105  2               	OSFILE   = $FFDD
004105  2               	OSARGS   = $FFDA
004105  2               	OSBGET   = $FFD7
004105  2               	OSBPUT   = $FFD4
004105  2               	OSGBPB   = $FFD1
004105  2               	OSFIND   = $FFCE
004105  2               
004105  2               ; To be removed
004105  2               
004105  2               	SCRSYNC	= $fff4
004105  2               	READKEY	= $fff4
004105  2               	red    = 1
004105  2               	blue   = 2
004105  2               	yellow = 3
004105  2               	green  = 4
004105  2               keymask:
004105  2  00           	.byte 0
004106  2               
004106  2               ;======================================================================
004106  2               ; System depending routines
004106  2               ;======================================================================
004106  2               
004106  2               ;----------------------------------------------------------------------
004106  2               ; Init hardware
004106  2               ;----------------------------------------------------------------------
004106  2               
004106  2               init:
004106  2  20 0A 41     	jsr cls
004109  2  60           	rts
00410A  2               
00410A  2               ;======================================================================
00410A  2               ; Screen routines
00410A  2               ;======================================================================
00410A  2               
00410A  2               ;----------------------------------------------------------------------
00410A  2               ; Clear screen routine.
00410A  2               ;
00410A  2               ; Fill screenmem $0400-$07ff with ScrFillByte
00410A  2               ; Set semigraphics at 1st column every line
00410A  2               ;----------------------------------------------------------------------
00410A  2               
00410A  2               cls:
00410A  2  A9 00        	lda #0
00410C  2  A0 00        	ldy #0
00410E  2               clsloop:
00410E  2  99 00 04     	sta ScreenAddr,y
004111  2  99 00 05     	sta ScreenAddr+256,y
004114  2  99 00 06     	sta ScreenAddr+512,y
004117  2  99 00 07     	sta ScreenAddr+768,y
00411A  2  C8           	iny
00411B  2  D0 F1        	bne clsloop
00411D  2               
00411D  2  A0 00        	ldy #0
00411F  2  A2 19        	ldx #ScrHeight
004121  2  AD 00 DC     	lda SCADTB_lb
004124  2  85 rr        	sta scraddr
004126  2  AD 00 DD     	lda SCADTB_hb
004129  2  85 rr        	sta scraddr+1
00412B  2  AD 25 3B     	lda bcolour
00412E  2               colloop:
00412E  2  91 rr        	sta (scraddr),y
004130  2  48           	pha
004131  2  A5 rr        	lda scraddr
004133  2  18           	clc
004134  2  69 28        	adc #ScrWidth
004136  2  85 rr        	sta scraddr
004138  2  90 02        	bcc :+
00413A  2  E6 rr        	inc scraddr+1
00413C  2               :
00413C  2  68           	pla
00413D  2  CA           	dex
00413E  2  D0 EE        	bne colloop
004140  2  60           	rts
004141  2               
004141  2               ;======================================================================
004141  2               ; Joystick routines
004141  2               ;======================================================================
004141  2               
004141  2               joyinit:
004141  2  60           	rts
004142  2               joy1:
004142  2  60           	rts
004143  2               joy2:
004143  2  60           	rts
004144  2               
004144  2               ;======================================================================
004144  2               ; Keyboard routines
004144  2               ;======================================================================
004144  2               
004144  2               ;----------------------------------------------------------------------
004144  2               ; KTEST
004144  2               ; Check if key in A is pressed
004144  2               ; 	return clc if pressed
004144  2               ; 	return sec if not pressed
004144  2               ;----------------------------------------------------------------------
004144  2               
004144  2               ktest:
004144  2  85 rr        	sta tmp
004146  2  2C 21 0E     	bit PORT_A
004149  2  30 09        	bmi not_pressed
00414B  2  AD 21 0E     	lda PORT_A
00414E  2  C5 rr        	cmp tmp
004150  2  D0 02        	bne not_pressed
004152  2               pressed:
004152  2  18           	clc
004153  2  60           	rts
004154  2               not_pressed:
004154  2  38           	sec
004155  2  60           	rts
004156  2               
004156  2               ;======================================================================
004156  2               ; PRSKEY
004156  2               ; Wait for keypress and release
004156  2               ;======================================================================
004156  2               
004156  2               prskey:
004156  2  2C 21 0E     	bit PORT_A
004159  2  30 FB        	bmi prskey
00415B  2               relkey:
00415B  2  2C 21 0E     	bit PORT_A
00415E  2  10 FB        	bpl relkey
004160  2  60           	rts
004161  2               
004161  1               	.include "z80.asm"
004161  2               ;------------------------------------------------------
004161  2               ; z80.asm
004161  2               ; spectrum stuff
004161  2               ; adresses
004161  2               
004161  2               
004161  2               ; Contains seperatly 1 bit set
004161  2               
004161  2               _bitmem0	= $f8
004161  2               _bitmem1	= $f9
004161  2               _bitmem2	= $fa
004161  2               _bitmem3	= $fb
004161  2               _bitmem4	= $fc
004161  2               _bitmem5	= $fd
004161  2               _bitmem6	= $fe
004161  2               _bitmem7	= $ff
004161  2               
004161  2               ; constants
004161  2               _bitvalue0	= $01
004161  2               _bitvalue1	= $02
004161  2               _bitvalue2	= $04
004161  2               _bitvalue3	= $08
004161  2               _bitvalue4	= $10
004161  2               _bitvalue5	= $20
004161  2               _bitvalue6	= $40
004161  2               _bitvalue7	= $80
004161  2               
004161  2               _notbitvalue0	= $fe
004161  2               _notbitvalue1	= $fd
004161  2               _notbitvalue2	= $fb
004161  2               _notbitvalue3	= $f7
004161  2               _notbitvalue4	= $ef
004161  2               _notbitvalue5	= $df
004161  2               _notbitvalue6	= $bf
004161  2               _notbitvalue7	= $7f
004161  2               
004161  2               
004161  2               exx:
004161  2  A5 62        		lda z80_c
004163  2  A4 6E        		ldy z80_cp
004165  2  84 62        		sty z80_c
004167  2  85 6E        		sta z80_cp
004169  2  A5 63        		lda z80_b
00416B  2  A4 6F        		ldy z80_bp
00416D  2  84 63        		sty z80_b
00416F  2  85 6F        		sta z80_bp
004171  2  A5 64        		lda z80_e
004173  2  A4 70        		ldy z80_ep
004175  2  84 64        		sty z80_e
004177  2  85 70        		sta z80_ep
004179  2  A5 65        		lda z80_d
00417B  2  A4 71        		ldy z80_dp
00417D  2  84 65        		sty z80_d
00417F  2  85 71        		sta z80_dp
004181  2  A5 rr        		lda scraddr
004183  2  A4 72        		ldy z80_lp
004185  2  84 rr        		sty scraddr
004187  2  85 72        		sta z80_lp
004189  2  A5 rr        		lda scraddr+1
00418B  2  A4 73        		ldy z80_hp
00418D  2  84 rr        		sty scraddr+1
00418F  2  85 73        		sta z80_hp
004191  2  60           		rts
004192  2               
004192  2               
004192  1               eind_asm:
004192  1               eop:					; End Of Program
004192  1               
004192  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
004192  1               
