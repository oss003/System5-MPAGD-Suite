ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 1 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "testladder.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 93 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  AC 39        msgptr:		.word msgdat	; messages
002811  3  DC 39        blkptr:		.word chgfx	; block graphics.
002813  3  E8 39        proptr:		.word bprop	; address of char properties.
002815  3  EE 39        sptptr:		.word sprgfx	; sprite graphics
002817  3  66 3A        frmptr:		.word frmlst	; sprite frames.
002819  3  6A 3A        scrptr:		.word scdat	; address of screens.
00281B  3  38 3B        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  3D 3B        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3               ;txtcol:		.byte green,yellow,blue,red
00281F  3               
00281F  3               ; Don't change the order of these four.
00281F  3               ; Menu routine relies on winlft following wintop.
00281F  3               
00281F  3  01           wintop:		.byte WINDOWTOP	; top of window.
002820  3  01           winlft:		.byte WINDOWLFT	; left edge.
002821  3  16           winhgt:		.byte WINDOWHGT	; window height.
002822  3  1E           winwid:		.byte WINDOWWID	; window width.
002823  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002824  3               
002824  3               ; Variables start here.
002824  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002824  3               
002824  3  03           wntopx:		.byte (3 * WINDOWTOP)
002825  3  02           wnlftx:		.byte (2 * WINDOWLFT)
002826  3  3C           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
002827  3  34           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
002828  3               
002828  3               ; Assorted game routines which can go in contended memory.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for inventory called by the INV command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with objects seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected objectnr of INV menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if mflag
002828  3               minve:
002828  3               .if gflag
002828  3               	lda #$ff		; blue frontcolour
002828  3               	sta andeor
002828  3               	lda #$aa		; yellow backcoloour
002828  3               	sta andeor+1
002828  3               .endif
002828  3               	lda #<(invdis)		; routine address.
002828  3               	sta mod0+1		; set up menu routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(invdis)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               	lda #<(fopt)		; find option from available objects.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fopt)
002828  3               	sta mod1+1+1
002828  3               	jmp dbox		; do menu routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for menu called by the MENU command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with menu items seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected line nr of MENU menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               mmenu:
002828  3               	lda #<(always)		; routine address.
002828  3               	sta mod0+1		; set up routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(always)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               
002828  3               	lda #<(fstd)		; standard option selection.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fstd)
002828  3               	sta mod1+2
002828  3               
002828  3               ; Drop through into box routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Work out size of box for message or menu.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               dbox:
002828  3               	lda #<(msgdat)		; pointer to messages.
002828  3               	sta z80_l
002828  3               	lda #>(msgdat)
002828  3               	sta z80_h
002828  3               
002828  3               	jsr getwrd		; get message number.
002828  3               
002828  3               	lda z80_h		; store pointer to message.
002828  3               	sta TmpAddr
002828  3               	lda z80_l
002828  3               	sta TmpAddr+1
002828  3               
002828  3               	lda #1			; height.
002828  3               	sta z80_d
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               	sta z80_e		; maximum width.
002828  3               dbox5:
002828  3               	lda #0			; this line"s width.
002828  3               	sta z80_b
002828  3               mod2:
002828  3               	jsr always		; item in player"s possession?
002828  3               	cmp #255
002828  3               	bne dbox6		; not in inventory, skip this line.
002828  3               	inc z80_d		; add to tally.
002828  3               dbox6:
002828  3               	ldy #0			; get character.
002828  3               	lda (z80_hl),y
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a		; reached end of line?
002828  3               	cmp #','
002828  3               	beq dbox3		; yes.
002828  3               	cmp #13
002828  3               	beq dbox3		; yes.
002828  3               	inc z80_b		; add to this line"s width.
002828  3               	lda z80_a
002828  3               	bmi dbox4		; end of message? yes, end count.
002828  3               	jmp dbox6		; repeat until we find the end.
002828  3               dbox3:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox5		; no, carry on looking.
002828  3               	lda z80_b		; make this the widest so far.
002828  3               	sta z80_e
002828  3               	jmp dbox5		; keep looking.
002828  3               dbox4:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox8		; no, carry on looking.
002828  3               	lda z80_b		; final line is the longest so far.
002828  3               	sta z80_e
002828  3               dbox8:
002828  3               	dec z80_d		; decrement items found.
002828  3               	bne :+			; total was zero.
002828  3               	lda #255
002828  3               	sta varopt
002828  3               	jmp dbox15
002828  3               :
002828  3               	lda z80_e		; longest line.
002828  3               	bne :+			; was it zero?
002828  3               	jmp dbox15		; total was zero.
002828  3               :
002828  3               	sta bwid		; set up size.
002828  3               	lda z80_d
002828  3               	sta blen
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; That's set up our box size.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               	lda winhgt		; window height in characters.
002828  3               	sec
002828  3               	sbc z80_d		; subtract height of box.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc wintop		; add top edge of window.
002828  3               	sta btop		; set up box top.
002828  3               
002828  3               	lda winwid		; window width in characters.
002828  3               	sec
002828  3               	sbc z80_e		; subtract box width.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc winlft		; add left edge of window.
002828  3               	sta blft		; box left.
002828  3               
002828  3               ;	lda #<(FONT-256)		; font.
002828  3               ;	sta grbase		; set up for text display.
002828  3               ;	lda #>(FONT-256)
002828  3               ;	sta grbase+1
002828  3               
002828  3               	lda TmpAddr+1		; restore message pointer.
002828  3               	sta z80_l
002828  3               	lda TmpAddr
002828  3               	sta z80_h
002828  3               
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set display coordinate.
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               dbox2:
002828  3               	lda combyt		; get object number.
002828  3               	sta z80_a
002828  3               mod0:
002828  3               	jsr always		; check inventory for display.
002828  3               	cmp #255
002828  3               	beq :+
002828  3               	jmp dbox13		; not in inventory, skip this line.
002828  3               :
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set left display position.
002828  3               	lda bwid		; box width.
002828  3               	sta z80_b		; store width.
002828  3               
002828  3               ; Frontpart colourbar
002828  3               
002828  3               	lda #t_red		; Set backcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	lda #29			; Colour bar
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	lda #t_white		; Set textcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               dbox0:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	cmp #','		; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               	cmp #13			; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               
002828  3               	cmp #141		; end of line?
002828  3               	bne :+
002828  3               	dec bwid
002828  3               	jmp dbox7		; yes, next one.
002828  3               :
002828  3               	dec z80_b		; one less to display.
002828  3               	and #127		; remove terminator.
002828  3               
002828  3               	jsr pchr		; display on screen.
002828  3               
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a
002828  3               	cmp #128		; end of message?
002828  3               	bmi :+
002828  3               	jsr dscor2
002828  3               	jmp dbox7		; yes, job done.
002828  3               :
002828  3               	lda z80_b		; chars remaining.
002828  3               	beq :+			; are any left?
002828  3               	jmp dbox0		; yes, continue.
002828  3               :
002828  3               ;---------------------------------------------------
002828  3               ; Reached limit of characters per line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dbox9:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #13			; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #128		; end of message?
002828  3               	bcs :+
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox9
002828  3               
002828  3               ;---------------------------------------------------
002828  3               ; Fill box to end of line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dboxf:
002828  3               	lda #32			; space character.
002828  3               	jsr pchr		; display character.
002828  3               	dec z80_b
002828  3               	beq :+
002828  3               	jmp dboxf		; repeat for remaining chars on line.
002828  3               :
002828  3               	rts
002828  3               dbox1:
002828  3               	inc z80_l		; skip character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	jsr dboxf		; fill box out to right side.
002828  3               dbox10:
002828  3               ; Endpart colourbar
002828  3               	lda #00			; Colour bar
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	lda #00			; Colour bar
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	lda #28			; Colour bar
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	lda bcolour		; Colour bar
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	inc dispy		; y coordinate down a line next position.
002828  3               	jmp dbox2		; next line.
002828  3               dbox7:
002828  3               	lda z80_b		; chars remaining.
002828  3               	bne :+			; are any left?
002828  3               	jmp dbox11		; no, nothing to draw.
002828  3               :
002828  3               	jsr dboxf		; fill message to line.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Drawn the box menu, now select option.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox11:
002828  3               ; Endpart colourbar
002828  3               	lda #28			; Colour bar
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	lda bcolour		; Colour bar
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set bar position.
002828  3               dbox14:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	bne dbox14		; yes, debounce it.
002828  3               	jsr dbar		; draw bar.
002828  3               dbox12:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	beq dbox12		; no, nothing.
002828  3               	and #16			; fire button pressed?
002828  3               	bne :+
002828  3               mod1:
002828  3               	jmp fstd		; yes, job done.
002828  3               :
002828  3               	jsr dbar		; delete bar.
002828  3               
002828  3               	lda joyval		; joystick reading.
002828  3               	and #8			; going up?
002828  3               	beq dboxu		; yes, go up.
002828  3               
002828  3               	ldx dispy		; vertical position of bar.
002828  3               	inx			; look down.
002828  3               	txa
002828  3               	sec
002828  3               	sbc btop		; find distance from top.
002828  3               	cmp blen		; top of box.
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	inc dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               dboxu:
002828  3               	lda dispy		; vertical position of bar.
002828  3               	cmp btop		; are we at the top?
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	dec dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               fstd:
002828  3               	lda dispy		; bar position.
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta varopt		; store the option.
002828  3               	jmp redraw		; redraw the screen.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Option not available.  Skip this line.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox13:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               	cmp #13			; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               
002828  3               	bpl :+			; end of message?
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox13
002828  3               dbox15:
002828  3               	lda TmpAddr		; pop message pointer from the stack.
002828  3               	sta z80_h
002828  3               	lda TmpAddr+1
002828  3               	sta z80_l
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Invert bar
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbar:
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set display coordinate.
002828  3               	jsr gprad		; get printing address.
002828  3               
002828  3               	ldy #0
002828  3               	lda (scraddr),y
002828  3               	eor #5
002828  3               	sta (scraddr),y
002828  3               
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Point to object
002828  3               ;
002828  3               ; Input:
002828  3               ;  combyt
002828  3               ;
002828  3               ; Output:
002828  3               ;  A = object number, A=255 if already in possession
002828  3               ;------------------------------------------------------
002828  3               
002828  3               invdis:
002828  3               	lda z80_l		; store message text pointer.
002828  3               	pha
002828  3               	lda z80_h
002828  3               	pha
002828  3               	lda combyt		; object number.
002828  3               	inc combyt		; ready for next one.
002828  3               	jsr gotob		; check if we have object.
002828  3               	tay
002828  3               	pla
002828  3               	sta z80_h
002828  3               	pla
002828  3               	sta z80_l
002828  3               	tya
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Find option selected.
002828  3               ;
002828  3               ; Input:
002828  3               ;  -
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected object
002828  3               ;------------------------------------------------------
002828  3               
002828  3               fopt:
002828  3               	lda dispy
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta tmp+2		; option selected in b register.
002828  3               	inc tmp+2
002828  3               
002828  3               	lda #0			; set to first item.
002828  3               	sta combyt		; object number.
002828  3               fopt0:
002828  3               	jsr fobj		; find next object in inventory.
002828  3               	dec tmp+2
002828  3               	bne fopt0		; repeat for relevant steps down the list.
002828  3               
002828  3               	lda combyt		; get option.
002828  3               	sta varopt		; store the option.
002828  3               	dec varopt		; one less, due to where we increment combyt.
002828  3               	jmp redraw		; redraw the screen.
002828  3               fobj:
002828  3               	ldy combyt		; object number.
002828  3               	inc combyt		; ready for next item.
002828  3               	tya
002828  3               	jsr gotob		; do we have this item?
002828  3               	cmp #255
002828  3               	bne :+
002828  3               	rts
002828  3               :
002828  3               	jmp fobj		; yes, it's on the list.
002828  3               .endif
002828  3               
002828  3               ;----------------------------------------------------
002828  3               ; Delay routine A * 1/25 sec
002828  3               ;----------------------------------------------------
002828  3               
002828  3               delay:
002828  3  85 rr        	sta xtmp
00282A  3               
00282A  3               del_start:
00282A  3  A9 00        	lda #0
00282C  3  8D F9 3E     	sta frames_passed
00282F  3               del_loop:
00282F  3  20 92 28     	jsr proshr
002832  3               
002832  3  AD F9 3E     	lda frames_passed
002835  3  C9 02        	cmp #2
002837  3  90 F6        	bcc del_loop
002839  3               
002839  3  A9 00        	lda #0
00283B  3  8D F9 3E     	sta frames_passed
00283E  3  C6 rr        	dec xtmp
002840  3  D0 E8        	bne del_start
002842  3  60           	rts
002843  3               
002843  3               ;----------------------------------------------------
002843  3               ; Clear sprite table.
002843  3               ;
002843  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002843  3               ;----------------------------------------------------
002843  3               
002843  3               xspr:
002843  3  A9 FF        	lda #255		; clear byte.
002845  3  A2 00        	ldx #0			; length of table.
002847  3               xspr0:
002847  3  9D B7 37     	sta sprtab,x		; sprite table.
00284A  3  E8           	inx			; move to next byte.
00284B  3  E0 CC        	cpx #SPRBUF
00284D  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284F  3  60           	rts
002850  3               
002850  3               ;-------------------------------------------------------------
002850  3               ; Initialise all objects.
002850  3               ;
002850  3               ; Reset current room,y,x to start room,y,x for all objects
002850  3               ;-------------------------------------------------------------
002850  3               
002850  3               .if oflag
002850  3               iniob:
002850  3               	lda #<objdta 		; objects table.
002850  3               	sta z80_x
002850  3               	lda #>objdta
002850  3               	sta z80_i
002850  3               
002850  3               	ldx numob 		; number of objects in the game.
002850  3               iniob0:
002850  3               	ldy #15
002850  3               	lda (z80_ix),y 		; start screen.
002850  3               	ldy #12
002850  3               	sta (z80_ix),y 		; set start screen.
002850  3               
002850  3               	ldy #16
002850  3               	lda (z80_ix),y 		; find start y.
002850  3               	ldy #13
002850  3               	sta (z80_ix),y 		; set start y.
002850  3               
002850  3               	ldy #17
002850  3               	lda (z80_ix),y 		; get initial x.
002850  3               	ldy #14
002850  3               	sta (z80_ix),y 		; set x coord.
002850  3               
002850  3               	clc 			; point to next object.
002850  3               	lda z80_x
002850  3               	adc #18			; distance between objects.
002850  3               	sta z80_x
002850  3               	bcc :+
002850  3               	inc z80_i
002850  3               :
002850  3               	dex 			; repeat.
002850  3               	bne iniob0
002850  3               
002850  3               	rts
002850  3               .endif
002850  3               
002850  3               ;-----------------------------------------------
002850  3               ; Redraw the screen.
002850  3               ;
002850  3               ; Remove old copy of all sprites for redraw.
002850  3               ;-----------------------------------------------
002850  3               
002850  3               redraw:
002850  3               .if gflag
002850  3               	lda #$ff
002850  3               	sta andeor
002850  3               	lda #$00
002850  3               	sta andeor+1
002850  3               .endif
002850  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002852  3  48           	pha
002853  3  A5 68        	lda z80_x
002855  3  48           	pha
002856  3               
002856  3  20 44 2D     	jsr droom		; show screen layout.
002859  3               .if oflag
002859  3               	jsr shwob		; draw objects.
002859  3               .endif
002859  3               numsp0:
002859  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00285B  3  8D 90 28     	sta tmpbyte
00285E  3               
00285E  3  A9 B7        	lda #<sprtab		; sprite table.
002860  3  85 68        	sta z80_x
002862  3  A9 37        	lda #>sprtab
002864  3  85 69        	sta z80_i
002866  3               redrw0:
002866  3  A0 00        	ldy #0
002868  3  B1 68        	lda (z80_ix),y		; old sprite type.
00286A  3  C9 FF        	cmp #255		; is it enabled?
00286C  3  F0 0B        	beq redrw1 		; no, find next one.
00286E  3               
00286E  3  A0 03        	ldy #3
002870  3  B1 68        	lda (z80_ix),y 		; sprite y.
002872  3  C9 B1        	cmp #177		; beyond maximum?
002874  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002876  3               
002876  3  20 0B 40     	jsr sspria		; show single sprite.
002879  3               redrw1:
002879  3  18           	clc			; next sprite.
00287A  3  A5 68        	lda z80_x
00287C  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00287E  3  85 68        	sta z80_x
002880  3  90 02        	bcc :+
002882  3  E6 69        	inc z80_i
002884  3               :
002884  3  CE 90 28     	dec tmpbyte			; repeat for remaining sprites.
002887  3  D0 DD        	bne redrw0
002889  3               rpblc1:
002889  3               ;	jsr dshrp		; redraw shrapnel.
002889  3               
002889  3               .if aflag
002889  3               	jsr rbloc		; draw blocks for this screen
002889  3               .endif
002889  3  68           	pla			; retrieve sprite pointer.
00288A  3  85 68        	sta z80_x
00288C  3  68           	pla
00288D  3  85 69        	sta z80_i
00288F  3               
00288F  3  60           	rts
002890  3               
002890  3  00           tmpbyte:	.byte 0
002891  3               ;----------------------------------------------------------------------
002891  3               ; Atomic palette is static
002891  3               ;----------------------------------------------------------------------
002891  3               
002891  3               setpal:
002891  3  60           	rts
002892  3               
002892  3               ;----------------------------------------------------------------------
002892  3               ; FODDER check
002892  3               ;----------------------------------------------------------------------
002892  3               
002892  3               .if pflag .or dflag
002892  3               fdchk:
002892  3               	cmp #FODDER 		; is it fodder?
002892  3               	beq :+
002892  3               	rts 			; no.
002892  3               :
002892  3               	lda #0			; wipe fodder in MAP
002892  3               	ldy #0
002892  3               	sta (bufaddr),y 	; rewrite block type.
002892  3               
002892  3               	lda bufaddr		; calculate screenaddr
002892  3               	sta scraddr
002892  3               	sec
002892  3               	lda bufaddr+1
002892  3               	sbc #>(MAP-ScreenAddr)	;$d4
002892  3               	sta scraddr+1
002892  3               
002892  3               	lda #0
002892  3               	ldy #0			; erase block on screen
002892  3               	sta (scraddr),y
002892  3               
002892  3               	rts
002892  3               .endif
002892  3               
002892  3               ;----------------------------------------------------
002892  3               ; Scrolly text and puzzle variables.
002892  3               ;----------------------------------------------------
002892  3               
002892  3               .if sflag
002892  3               txtbit:	.byte 128		; bit to write.
002892  3               txtwid:	.byte 16		; width of ticker message.
002892  3               txtpos:	.word msgdat
002892  3               txtini:	.word msgdat
002892  3               txtscr:	.word ScreenAddr
002892  3               .endif
002892  3               
002892  3               ;----------------------------------------------------
002892  3               ; Specialist routines.
002892  3               ; Process shrapnel.
002892  3               ;----------------------------------------------------
002892  3               proshr:
002892  3               .if pflag
002892  3               	lda #<SHRAPN		; table.
002892  3               	sta z80_x
002892  3               	lda #>SHRAPN
002892  3               	sta z80_i
002892  3               
002892  3               	lda #NUMSHR		; shrapnel pieces to process.
002892  3               	sta shrctr
002892  3               prosh0:
002892  3               	ldy #0
002892  3               	lda (z80_ix),y		; on/off marker.
002892  3               	asl a
002892  3               proshx:
002892  3               	bcs :+
002892  3               	jsr prosh1 		; on, so process it.
002892  3               :
002892  3               	clc
002892  3               	lda z80_x
002892  3               	adc #SHRSIZ
002892  3               	sta z80_x
002892  3               	bcc :+
002892  3               	inc z80_i
002892  3               :
002892  3               	dec shrctr		; round again.
002892  3               	bne prosh0
002892  3               .endif
002892  3               .if sflag
002892  3               	jsr scrly
002892  3               .endif
002892  3  60           	rts
002893  3               
002893  3               .if pflag
002893  3               ;shrctr:	.byte 0
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Proces shrapnel piece
002893  3               ;----------------------------------------------------
002893  3               
002893  3               prosh1:
002893  3               	jsr plot 		; delete the pixel.
002893  3               
002893  3               	lda #<shrptr		; shrapnel routine pointers.
002893  3               	sta z80_l
002893  3               	lda #>shrptr
002893  3               	sta z80_h
002893  3               
002893  3               	ldy #0
002893  3               	lda (z80_ix),y		; restore shrapnel type.
002893  3               	jsr prosh2 		; run the routine.
002893  3               	jsr chkxy		; check x and y are good before we redisplay.
002893  3               
002893  3               	lda #<SHRSIZ 		; distance to next.
002893  3               	sta z80_e
002893  3               	lda #>SHRSIZ
002893  3               	sta z80_d
002893  3               	rts
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Run the routine
002893  3               ;----------------------------------------------------
002893  3               
002893  3               prosh2:
002893  3               	asl a 			; 2 bytes per address.
002893  3               	tay
002893  3               	lda shrptr,y
002893  3               	sta z80_l
002893  3               	lda shrptr+1,y 		; fetch high byte from table.
002893  3               	sta z80_h
002893  3               	jmp (z80_hl) 		; jump to routine.
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Paricle routine table
002893  3               ;----------------------------------------------------
002893  3               
002893  3               shrptr:	.word laser		; laser.
002893  3               	.word trail		; vapour trail.
002893  3               	.word shrap		; shrapnel from explosion.
002893  3               	.word dotl		; horizontal starfield left.
002893  3               	.word dotr		; horizontal starfield right.
002893  3               	.word dotu		; vertical starfield up.
002893  3               	.word dotd		; vertical starfield down.
002893  3               	.word ptcusr		; user particle.
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Explosion shrapnel.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               shrap:
002893  3               	ldy #1
002893  3               	lda (z80_ix),y 		; get the angle.
002893  3               	clc
002893  3               	adc #<shrsin		; shrapnel sine table.
002893  3               	sta z80_l
002893  3               	lda #>shrsin
002893  3               	adc #0
002893  3               	sta z80_h
002893  3               
002893  3               	ldy #0
002893  3               	lda (z80_hl),y 		; fetch value from table.
002893  3               	sta z80_e
002893  3               	inc z80_l 		; next byte of table.
002893  3               	bne :+
002893  3               	inc z80_h
002893  3               :
002893  3               	ldy #0
002893  3               	lda (z80_hl),y		; fetch value from table.
002893  3               	sta z80_d
002893  3               	inc z80_l		; next byte of table.
002893  3               	bne :+
002893  3               	inc z80_h
002893  3               :
002893  3               	ldy #0
002893  3               	lda (z80_hl),y 		; fetch value from table.
002893  3               	sta z80_c
002893  3               	inc z80_l 		; next byte of table.
002893  3               	bne :+
002893  3               	inc z80_h
002893  3               :
002893  3               	ldy #0
002893  3               	lda (z80_hl),y 		; fetch value from table.
002893  3               	sta z80_b
002893  3               
002893  3               	ldy #2
002893  3               	lda (z80_ix),y 		; x coordinate in hl.
002893  3               	clc
002893  3               	adc z80_e		; add sine lb
002893  3               	sta (z80_ix),y		; store new coordinate lb.
002893  3               	ldy #3
002893  3               	lda (z80_ix),y
002893  3               	adc z80_d		; add sine hb
002893  3               	sta (z80_ix),y		; store new coordinate hb.
002893  3               
002893  3               	ldy #4
002893  3               	lda (z80_ix),y	 	; y coordinate in hl.
002893  3               	clc
002893  3               	adc z80_c		; add cosine lb
002893  3               	sta (z80_ix),y		; store new coordinate lb.
002893  3               	ldy #5
002893  3               	lda (z80_ix),y
002893  3               	adc z80_b		; add cosine lb
002893  3               	sta (z80_ix),y		; store new coordinate hb.
002893  3               
002893  3               	rts
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Move dots
002893  3               ;----------------------------------------------------
002893  3               
002893  3               dotl:
002893  3               	ldy #5
002893  3               	lda (z80_ix),y
002893  3               	sec
002893  3               	sbc #1		 	; move left.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               dotr:
002893  3               	ldy #5
002893  3               	lda (z80_ix),y
002893  3               	clc
002893  3               	adc #1		 	; move left.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               dotu:
002893  3               	ldy #3
002893  3               	lda (z80_ix),y
002893  3               	sec
002893  3               	sbc #1		 	; move up.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               dotd:
002893  3               	ldy #3
002893  3               	lda (z80_ix),y
002893  3               	clc
002893  3               	adc #1			; move down.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Check if coordinates are ok before redrawing at new position.
002893  3               ;
002893  3               ; left:   X>L		X=L	Ok
002893  3               ; right:  R+15>X	X=R	Ok
002893  3               ; top:    Y>T		Y=T	Ok
002893  3               ; bottom: B+15>Y	Y=B	Ok
002893  3               ;----------------------------------------------------
002893  3               
002893  3               chkxy:
002893  3               
002893  3               ; top:    Y>T		Y=T	Ok
002893  3               
002893  3               	ldy #3
002893  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002893  3               	cmp wntopx		; window top.
002893  3               	bcs :+			; compare with top window limit.
002893  3               	jmp kilshr		; out of window, kill shrapnel.
002893  3               :
002893  3               ; left:   X>L		X=L	Ok
002893  3               
002893  3               	ldy #5
002893  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002893  3               	cmp wnlftx		; left edge.
002893  3               	bcs :+			; compare with left window limit.
002893  3               	jmp kilshr		; out of window, kill shrapnel.
002893  3               :
002893  3               ; bottom: B+15>Y	Y=B	Ok
002893  3               
002893  3               	lda wnbotx		; point to bottom.
002893  3               	ldy #3
002893  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002893  3               	bcs :+			; compare with shrapnel x coordinate.
002893  3               	jmp kilshr		; off screen, kill shrapnel..
002893  3               :
002893  3               ; right:  R+15>X	X=R	Ok
002893  3               	lda wnrgtx		; point to right edge.
002893  3               	ldy #5
002893  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002893  3               	bcs :+			; compare with window limit.
002893  3               	jmp kilshr		; off screen, kill shrapnel.
002893  3               :
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Drop through.
002893  3               ; Display shrapnel.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               plot:
002893  3               	ldy #3
002893  3               	lda (z80_ix),y		; y integer.
002893  3               	sta dispy	 	; workspace coordinates.
002893  3               	ldy #5
002893  3               	lda (z80_ix),y	 	; x integer.
002893  3               	sta dispx 		; workspace coordinates.
002893  3               
002893  3               	ldy #0
002893  3               	lda (z80_ix),y 		; type.
002893  3               	bne :+			; is it a laser?
002893  3               	jmp plot1 		; yes, draw laser instead.
002893  3               :
002893  3               plot0:
002893  3               	lda dispx		; which pixel within byte do we
002893  3               	and #1			; want to set first?
002893  3               	tay
002893  3               	lda dots,y 		; table of small pixel positions.
002893  3               	sta z80_e 		; get value.
002893  3               
002893  3               	jsr scadd 		; screen address.
002893  3               	ldy #0
002893  3               	lda (scraddr),y		; see what's already there.
002893  3               	eor z80_e
002893  3               	ora #$20
002893  3               	sta (scraddr),y 	; put back on screen.
002893  3               	rts
002893  3               
002893  3               plot1:
002893  3               	jsr scadd 		; screen address.
002893  3               	ldy #0
002893  3               	lda (scraddr),y 	; fetch byte there.
002893  3               	eor #12 		; toggle all bits.
002893  3               	ora #$20
002893  3               	sta (scraddr),y 	; new byte.
002893  3               	rts
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Switch off shrapnel
002893  3               ;----------------------------------------------------
002893  3               
002893  3               kilshr:
002893  3               	lda #128
002893  3               	ldy #0
002893  3               	sta (z80_ix),y	; switch off shrapnel.
002893  3               	rts
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Sine/cosine table
002893  3               ;----------------------------------------------------
002893  3               
002893  3               shrsin:	.word 0,1024,391,946,724,724,946,391
002893  3               	.word 1024,0,946,65144,724,64811,391,64589
002893  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
002893  3               	.word 64512,0,64589,391,64811,724,65144,946
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Create trail
002893  3               ;----------------------------------------------------
002893  3               
002893  3               trail:
002893  3               	ldy #1
002893  3               	lda (z80_ix),y 	; time remaining.
002893  3               	sec
002893  3               	sbc #1
002893  3               	sta (z80_ix),y
002893  3               	bne :+
002893  3               	jmp trailk		; time to switch it off.
002893  3               :
002893  3               	jsr qrand		; get a random number.
002893  3               	lsr a 			; x or y axis?
002893  3               	bcc :+
002893  3               	jmp trailv		; use y.
002893  3               :
002893  3               ; Trail horizontal
002893  3               
002893  3               	lsr a 			; which direction?
002893  3               	bcc :+
002893  3               	jmp traill		; go left.
002893  3               :
002893  3               ; Trail right
002893  3               
002893  3               	ldy #5
002893  3               	lda (z80_ix),y
002893  3               	clc
002893  3               	adc #1	 		; go right.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               
002893  3               ; Trail left
002893  3               
002893  3               traill:
002893  3               	ldy #5
002893  3               	lda (z80_ix),y
002893  3               	sec
002893  3               	sbc #1 			; go left.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               
002893  3               ; Trail vertical
002893  3               
002893  3               trailv:
002893  3               	lsr a		 	; which direction?
002893  3               	bcc :+
002893  3               	jmp trailu		; go up.
002893  3               :
002893  3               ; Trail down
002893  3               
002893  3               	ldy #3
002893  3               	lda (z80_ix),y
002893  3               	clc
002893  3               	adc #1 			; go down.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               
002893  3               ; Trail up
002893  3               
002893  3               trailu:
002893  3               	ldy #3
002893  3               	lda (z80_ix),y
002893  3               	sec
002893  3               	sbc #1 			; go up.
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               
002893  3               ; Kill trail
002893  3               
002893  3               trailk:
002893  3               	lda #200		; set off-screen to kill vapour trail.
002893  3               	ldy #3
002893  3               	sta (z80_ix),y
002893  3               	rts
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Create laser beam
002893  3               ;----------------------------------------------------
002893  3               
002893  3               laser:
002893  3               	ldy #1
002893  3               	lda (z80_ix),y 		; direction.
002893  3               	ror a 			; left or right?
002893  3               	bcc :+
002893  3               	jmp laserl		; move left.
002893  3               :
002893  3               ; Laser right
002893  3               
002893  3               	lda #2			; distance to travel.
002893  3               	sta z80_b
002893  3               	jmp laserm		; move laser.
002893  3               
002893  3               ; Laser left
002893  3               
002893  3               laserl:
002893  3               	lda #254		; distance to travel.
002893  3               	sta z80_b
002893  3               laserm:
002893  3               	ldy #5
002893  3               	lda (z80_ix),y		; x position.
002893  3               	clc
002893  3               	adc z80_b		; add distance.
002893  3               	sta (z80_ix),y		; set new x coordinate.
002893  3               
002893  3               ; Test new block.
002893  3               
002893  3               	sta dispx 		; set x for block collision detection purposes.
002893  3               	ldy #3
002893  3               	lda (z80_ix),y 		; get y.
002893  3               	sta dispy		; set coordinate for collision test.
002893  3               	jsr tstbl 		; get block type there.
002893  3               	cmp #WALL		; is it solid?
002893  3               	bne :+
002893  3               	jmp trailk		; yes, it cannot pass.
002893  3               :
002893  3               .if pflag .or dflag
002893  3                       cmp #FODDER             ; is it fodder?
002893  3                       bne :+
002893  3                       jsr fdchk               ; remove fodder block.
002893  3                       jmp trailk              ; destroy laser.
002893  3               :
002893  3               .endif
002893  3                       rts                     ; no, ignore it.
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Dots mask
002893  3               ;----------------------------------------------------
002893  3               
002893  3               dots:	.byte 2,1
002893  3               
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Plot, preserving de.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               plotde:
002893  3               	lda z80_d 		; put de on stack.
002893  3               	pha
002893  3               	lda z80_e
002893  3               	pha
002893  3               
002893  3               	jsr plot 		; plot pixel.
002893  3               
002893  3               	pla			; restore de from stack.
002893  3               	sta z80_e
002893  3               	pla
002893  3               	sta z80_d
002893  3               
002893  3               	rts
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Shoot a laser.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               shoot:
002893  3               	sta z80_c		; store type in c register.
002893  3               	ldy #8
002893  3               	lda (z80_ix),y 		; y coordinate.
002893  3               	clc
002893  3               shoot1:
002893  3               	adc #(SPR_HGT/2)	; down 4 pixels.
002893  3               	sta z80_l 		; y coordinate in l.
002893  3               
002893  3               	ldy #9
002893  3               	lda (z80_ix),y 		; x coordinate in h.
002893  3               	sta z80_h
002893  3               
002893  3               	lda z80_i		; store pointer to sprite.
002893  3               	pha
002893  3               	lda z80_x
002893  3               	pha
002893  3               
002893  3               	jsr fpslot 		; find particle slot.
002893  3               	bcs :+
002893  3               	jmp vapou2		; failed, restore ix.
002893  3               :
002893  3               	lda #0
002893  3               	ldy #0
002893  3               	sta (z80_ix),y 		; set up type laser.
002893  3               
002893  3               	lda z80_c
002893  3               	ldy #1
002893  3               	sta (z80_ix),y 		; set the direction.
002893  3               
002893  3               	lda z80_l
002893  3               	ldy #3
002893  3               	sta (z80_ix),y		; set y coordinate.
002893  3               
002893  3               	ror z80_c		; check direction we want.
002893  3               	bcs :+
002893  3               	jmp shootr		; shoot right.
002893  3               :
002893  3               	lda z80_h		; X position.
002893  3               shoot0:
002893  3               	and #$fe		; align on character boundary.
002893  3               	ldy #5
002893  3               	sta (z80_ix),y		; set x coordinate.
002893  3               	jmp vapou0 		; draw first image.
002893  3               shootr:
002893  3               	lda z80_h		; x position.
002893  3               	clc
002893  3               	adc #SPR_WID-1		; look right.
002893  3               	jmp shoot0		; align and continue.
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Create a bit of vapour trail.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               vapour:
002893  3               	lda z80_i		; store pointer to sprite.
002893  3               	pha
002893  3               	lda z80_x
002893  3               	pha
002893  3               
002893  3               	ldy #8
002893  3               	lda (z80_ix),y 		; y coordinate.
002893  3               	clc
002893  3               vapou3:
002893  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
002893  3               	sta z80_l
002893  3               
002893  3               	ldy #9
002893  3               	lda (z80_ix),y 		; x coordinate.
002893  3               	adc #7
002893  3               	sta z80_h
002893  3               
002893  3               	jsr fpslot 		; find particle slot.
002893  3               	bcc :+
002893  3               	jmp vapou1		; no, we can use it.
002893  3               :
002893  3               vapou2:
002893  3               	pla
002893  3               	sta z80_x
002893  3               	pla
002893  3               	sta z80_i
002893  3               	rts
002893  3               vapou1:
002893  3               	lda z80_l
002893  3               	ldy #3
002893  3               	sta (z80_ix),y		; set up y.
002893  3               
002893  3               	lda z80_h
002893  3               	ldy #5
002893  3               	sta (z80_ix),y 		; set up x coordinate.
002893  3               
002893  3               	jsr qrand		; get quick random number.
002893  3               	and #15			; random time.
002893  3               	clc
002893  3               	adc #15			; minimum time on screen.
002893  3               	ldy #1
002893  3               	sta (z80_ix),y		; set time on screen.
002893  3               
002893  3               	lda #1
002893  3               	ldy #0
002893  3               	sta (z80_ix),y		; define particle as vapour trail.
002893  3               vapou0:
002893  3               	jsr chkxy		; plot first position.
002893  3               	jmp vapou2
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Create a user particle.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               ptusr:
002893  3               	sta z80_f		; store timer.
002893  3               
002893  3               	ldy #8
002893  3               	lda (z80_ix),y 		; y coordinate.
002893  3               	clc
002893  3               	adc #7			; mid-point of sprite.
002893  3               	sta z80_l
002893  3               
002893  3               	ldy #9
002893  3               	lda (z80_ix),y 		; x coordinate.
002893  3               	clc
002893  3               	adc #7			; mid-point of sprite.
002893  3               	sta z80_h
002893  3               
002893  3               	jsr fpslot 		; find particle slot.
002893  3               	bcs ptusr1
002893  3               	rts 			; out of slots, can't generate anything.
002893  3               ptusr1:
002893  3               	lda z80_l
002893  3               	ldy #3
002893  3               	sta (z80_ix),y 		; set up y.
002893  3               
002893  3               	lda z80_h
002893  3               	ldy #5
002893  3               	sta (z80_ix),y		; set up x coordinate.
002893  3               
002893  3               	lda z80_f 		; restore timer.
002893  3               	ldy #1
002893  3               	sta (z80_ix),y		; set time on screen.
002893  3               
002893  3               	lda #7
002893  3               	ldy #0
002893  3               	sta (z80_ix),y		; define particle as user particle.
002893  3               
002893  3               	jmp chkxy		; plot first position.
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Create a vertical or horizontal star.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               star:
002893  3               	lda z80_i		; store pointer to sprite.
002893  3               	pha
002893  3               	lda z80_x
002893  3               	pha
002893  3               
002893  3               	jsr fpslot 		; find particle slot.
002893  3               	bcs star7		; found one we can use.
002893  3               star0:
002893  3               	pla 			; restore sprite pointer.
002893  3               	sta z80_x
002893  3               	pla
002893  3               	sta z80_i
002893  3               	rts 			; out of slots, can't generate anything.
002893  3               star7:
002893  3               	lda z80_c		; direction.
002893  3               	and #3 			; is it left?
002893  3               	bne :+
002893  3               	jmp star1 		; yes, it's left.
002893  3               :
002893  3               	cmp #1 			; is it right?
002893  3               	bne :+
002893  3               	jmp star2 		; yes, it's right.
002893  3               :
002893  3               	cmp #2 			; is it up?
002893  3               	bne :+
002893  3               	jmp star3 		; yes, it's up.
002893  3               :
002893  3               	ldy wntopx 		; get edge of screen.
002893  3               	iny			; down one pixel.
002893  3               	tya
002893  3               star8:
002893  3               	ldy #3
002893  3               	sta (z80_ix),y 		; set y coord.
002893  3               	jsr qrand 		; get quick random number.
002893  3               star9:
002893  3               	ldy #5
002893  3               	sta (z80_ix),y		; set x position.
002893  3               
002893  3               	lda z80_c		; direction.
002893  3               	and #3			; zero to three.
002893  3               	clc
002893  3               	adc #3			; 3 to 6 for starfield.
002893  3               	ldy #0
002893  3               	sta (z80_ix),y		; define particle as star.
002893  3               	jsr chkxy		; plot first position.
002893  3               	jmp star0
002893  3               star1:
002893  3               	jsr qrand		; get quick random number.
002893  3               	ldy #3
002893  3               	sta (z80_ix),y 		; set y coord.
002893  3               
002893  3               	lda wnrgtx 		; get edge of screen.
002893  3               	clc
002893  3               	adc #SPR_WID-4		; add width of sprite minus 1.
002893  3               	jmp star9
002893  3               star2:
002893  3               	jsr qrand 		; get quick random number.
002893  3               	ldy #3
002893  3               	sta (z80_ix),y		; set y coord.
002893  3               
002893  3               	lda wnlftx		; get edge of screen.
002893  3               	jmp star9
002893  3               star3:
002893  3               	lda wnbotx 		; get edge of screen.
002893  3               	clc
002893  3               	adc #SPR_HGT-2 		; height of sprite minus one pixel.
002893  3               	jmp star8
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Find particle slot for lasers or vapour trail.
002893  3               ; can't use alternate accumulator.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               fpslot:
002893  3               	lda #<SHRAPN 		; shrapnel table.
002893  3               	sta z80_x
002893  3               	lda #>SHRAPN
002893  3               	sta z80_i
002893  3               
002893  3               	lda #NUMSHR		; number of pieces in table.
002893  3               	sta z80_b
002893  3               fpslt0:
002893  3               	ldy #0
002893  3               	lda (z80_ix),y		; get type.
002893  3               	asl a  			; is this slot in use?
002893  3               	bcc :+
002893  3               	rts			; no, we can use it.
002893  3               :
002893  3               	clc			; point to more shrapnel.
002893  3               	lda z80_x
002893  3               	adc #SHRSIZ
002893  3               	sta z80_x
002893  3               	bcc :+
002893  3               	inc z80_i
002893  3               :
002893  3               	dec z80_b		; repeat for all shrapnel.
002893  3               	bne fpslt0
002893  3               
002893  3               	clc
002893  3               	rts 			; out of slots, can't generate anything.
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Create an explosion at sprite position.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               explod:
002893  3               	sta z80_c 		; particles to create.
002893  3               
002893  3               	lda z80_i 		; store pointer to sprite.
002893  3               	pha
002893  3               	lda z80_x
002893  3               	pha
002893  3               
002893  3               	ldy #8
002893  3               	lda (z80_ix),y 		; y coordinate.
002893  3               	sta z80_l
002893  3               	ldy #9
002893  3               	lda (z80_ix),y		; x coordinate.
002893  3               	sta z80_h
002893  3               
002893  3               	lda #<SHRAPN		; shrapnel table.
002893  3               	sta z80_x
002893  3               	lda #>SHRAPN
002893  3               	sta z80_i
002893  3               
002893  3               	lda #NUMSHR		; number of pieces in table.
002893  3               	sta explcnt
002893  3               expld0:
002893  3               	ldy #0
002893  3               	lda (z80_ix),y		; get type.
002893  3               	asl a 			; is this slot in use?
002893  3               	bcs expld1		; no, we can use it.
002893  3               expld2:
002893  3               	clc
002893  3               	lda z80_x
002893  3               	adc #SHRSIZ
002893  3               	sta z80_x
002893  3               	bcc :+
002893  3               	inc z80_i
002893  3               :
002893  3               	dec explcnt		; repeat for all shrapnel.
002893  3               	bne expld0
002893  3               expld3:
002893  3               	pla			; restore sprite pointer.
002893  3               	sta z80_x
002893  3               	pla
002893  3               	sta z80_i
002893  3               	rts 			; out of slots, can't generate any more.
002893  3               
002893  3               expld1:
002893  3               	lda z80_c		; shrapnel counter.
002893  3               	and #15			; 0 to 15.
002893  3               	clc			; add to x.
002893  3               	adc z80_l
002893  3               	ldy #3
002893  3               	sta (z80_ix),y		; y coord.
002893  3               
002893  3               	lda seed3 		; crap random number.
002893  3               	and #15			; 0 to 15.
002893  3               	clc 			; add to y.
002893  3               	adc z80_h
002893  3               	ldy #5
002893  3               	sta (z80_ix),y		; x coord.
002893  3               
002893  3               	lda #2
002893  3               	ldy #0
002893  3               	sta (z80_ix),y		; switch it on.
002893  3               
002893  3               	jsr chkxy		; plot first position.
002893  3               	jsr qrand		; quick random angle.
002893  3               	and #60 		; keep within range.
002893  3               	ldy #1
002893  3               	sta (z80_ix),y		; angle.
002893  3               
002893  3               	dec z80_c		; one less piece of shrapnel to generate.
002893  3               	bne expld2 		; back to main explosion loop.
002893  3               	jmp expld3 		; restore sprite pointer and exit.
002893  3               
002893  3               ;explcnt:	.byte 0
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Quick random
002893  3               ;----------------------------------------------------
002893  3               
002893  3               qrand:
002893  3               	jsr random		; r register.
002893  3               	eor seed3		; combine with seed.
002893  3               	sta seed3 		; new seed.
002893  3               	rts
002893  3               
002893  3               ;seed3:	.byte 0
002893  3               
002893  3               ;----------------------------------------------------
002893  3               ; Display all shrapnel.
002893  3               ;----------------------------------------------------
002893  3               
002893  3               dshrp:
002893  3               	lda #<plotde		; display routine.
002893  3               	sta proshx+1
002893  3               	lda #>plotde
002893  3               	sta proshx+2
002893  3               	jsr proshr		; process shrapnel.
002893  3               
002893  3               	lda #<prosh1		; processing routine.
002893  3               	sta proshx+1
002893  3               	lda #>prosh1
002893  3               	sta proshx+2
002893  3               	rts
002893  3               
002893  3               ;------------------------------------------------------
002893  3               ; Particle engine.
002893  3               ;
002893  3               ; Init particle data for 55 particles in SHRAPN table.
002893  3               ; Every particle has 6 bytes.
002893  3               ;
002893  3               ; global:	-
002893  3               ; local:	x,y,hl
002893  3               ; calls:	-
002893  3               ;------------------------------------------------------
002893  3               
002893  3               inishr:
002893  3               	lda #<SHRAPN 		; table.
002893  3               	sta z80_l
002893  3               	lda #>SHRAPN
002893  3               	sta z80_h
002893  3               
002893  3               	ldy #0
002893  3               	ldx #NUMSHR		; shrapnel pieces to process.
002893  3               inish0:
002893  3               	lda #255 		; kill the shrapnel.
002893  3               	sta (z80_hl),y
002893  3               
002893  3               	clc 			; point there.
002893  3               	lda z80_l
002893  3               	adc #SHRSIZ		; distance to next.
002893  3               	sta z80_l
002893  3               	bcc :+
002893  3               	inc z80_h
002893  3               :
002893  3               	dex
002893  3               	bne inish0 		; round again.
002893  3               	rts
002893  3               
002893  3               ;------------------------------------------------------
002893  3               ; Check for collision between laser and sprite.
002893  3               ;------------------------------------------------------
002893  3               
002893  3               lcol:
002893  3               	lda #<SHRAPN		; shrapnel table.
002893  3               	sta z80_l
002893  3               	lda #>SHRAPN
002893  3               	sta z80_h
002893  3               
002893  3               	lda #NUMSHR		; number of pieces in table.
002893  3               	sta z80_b
002893  3               lcol0:
002893  3               	ldy #0
002893  3               	lda (z80_hl),y 		; get type.
002893  3               	beq lcol1		; yes, check collision.
002893  3               lcol3:
002893  3               	clc			; point to more shrapnel.
002893  3               	lda z80_l
002893  3               	adc #SHRSIZ
002893  3               	sta z80_l
002893  3               	bcc :+
002893  3               	inc z80_h
002893  3               :
002893  3               	dec z80_b		; repeat for all shrapnel.
002893  3               	bne lcol0
002893  3               	rts 			; no collision, carry not set.
002893  3               lcol1:
002893  3               	ldy #3
002893  3               	lda (z80_hl),y		; get y.
002893  3               	sec
002893  3               	ldy #8
002893  3               	sbc (z80_ix),y		; subtract sprite y.
002893  3               lcolh:
002893  3               	cmp #SPR_HGT 		; within range?
002893  3               	bcc :+
002893  3               	jmp lcol2		; no, missed.
002893  3               :
002893  3               	ldy #5
002893  3               	lda (z80_hl),y 		; get x.
002893  3               	sec
002893  3               	ldy #9
002893  3               	sbc (z80_ix),y 		; subtract sprite y.
002893  3               	cmp #SPR_WID		; within range?
002893  3               	bcs :+
002893  3               	jmp lcol4 		; yes, collision occurred.
002893  3               :
002893  3               lcol2:
002893  3               	jmp lcol3
002893  3               lcol4:
002893  3               	sec
002893  3               	rts 			; return with carry set for collision.
002893  3               .endif
002893  3               
002893  3               ;------------------------------------------------------
002893  3               ; Main game engine code starts here.
002893  3               ; After initialisation, mloop is the main loop
002893  3               ;------------------------------------------------------
002893  3               
002893  3               game:
002893  3               
002893  3               
002893  3               ; Init hardware and graphics mode
002893  3               
002893  3  20 70 3E     	jsr init 		; Init hardware
002896  3               
002896  3               ; Init joystick
002896  3               
002896  3  20 B2 3F     	jsr joyinit		; Init joystick
002899  3               
002899  3               rpblc2:
002899  3               .if pflag
002899  3               	jsr inishr 		; initialise particle engine.
002899  3               .endif
002899  3               evintr:
002899  3  20 9B 39     	jsr evnt12 		; call intro/menu event.
00289C  3               
00289C  3  A9 02        	lda #WALL 		; write default property.
00289E  3  A2 00        	ldx #0
0028A0  3               clrmap:
0028A0  3  9D 00 D8     	sta MAP,x 		; block properties.
0028A3  3  9D 00 D9     	sta MAP+256,x
0028A6  3  9D 00 DA     	sta MAP+512,x
0028A9  3  9D 00 DB     	sta MAP+768,x
0028AC  3  E8           	inx			; next byte.
0028AD  3  D0 F1        	bne clrmap
0028AF  3               
0028AF  3               .if oflag
0028AF  3               	jsr iniob 		; initialise objects.
0028AF  3               .endif
0028AF  3  A9 00        	lda #0			; put zero in accumulator.
0028B1  3  85 rr        	sta gamwon		; reset game won flag.
0028B3  3               
0028B3  3  20 1E 2A     	jsr inisc 		; init the score.
0028B6  3               mapst:
0028B6  3  AD B1 38     	lda stmap 		; start position on map.
0028B9  3  8D 94 38     	sta roomtb		; set up position in table, if there is one.
0028BC  3               
0028BC  3               inipbl:
0028BC  3               .if aflag
0028BC  3               	lda #<eop		; reset blockpointer
0028BC  3               	sta pbptr
0028BC  3               	lda #>eop
0028BC  3               	sta pbptr+1
0028BC  3               .endif
0028BC  3               
0028BC  3  20 83 34     	jsr initsc 		; set up first screen.
0028BF  3               
0028BF  3  A9 83        	lda #<ssprit 		; default to spare sprite in table.
0028C1  3  85 68        	sta z80_x
0028C3  3  A9 38        	lda #>ssprit
0028C5  3  85 69        	sta z80_i
0028C7  3               evini:
0028C7  3  20 9C 39     	jsr evnt13 		; initialisation.
0028CA  3               
0028CA  3               ; Two restarts.
0028CA  3               ; First restart - clear all sprites and initialise everything.
0028CA  3               
0028CA  3               rstrt:
0028CA  3  20 BE 29     	jsr rsevt 		; restart events.
0028CD  3  20 43 28     	jsr xspr 		; clear sprite table.
0028D0  3  20 EF 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028D3  3  20 78 36     	jsr ispr 		; initialise sprite table.
0028D6  3               
0028D6  3  4C E5 28     	jmp rstrt0
0028D9  3               
0028D9  3               ; Second restart - clear all but player, and don't initialise him.
0028D9  3               
0028D9  3               rstrtn:
0028D9  3  20 BE 29     	jsr rsevt		; restart events.
0028DC  3  20 1C 36     	jsr nspr 		; clear all non-player sprites.
0028DF  3  20 EF 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028E2  3  20 B5 36     	jsr kspr 		; initialise sprite table, no more players.
0028E5  3               
0028E5  3               ; Set up the player and/or enemy sprites.
0028E5  3               
0028E5  3               rstrt0:
0028E5  3  A9 00        	lda #0 			; zero in accumulator.
0028E7  3  85 rr        	sta nexlev 		; reset next level flag.
0028E9  3  85 rr        	sta restfl 		; reset restart flag.
0028EB  3  85 rr        	sta deadf 		; reset dead flag.
0028ED  3               
0028ED  3  20 44 2D     	jsr droom 		; show screen layout.
0028F0  3               
0028F0  3               rpblc0:
0028F0  3               .if pflag
0028F0  3               	jsr inishr 		; initialise particle engine.
0028F0  3               .endif
0028F0  3               .if aflag
0028F0  3               	jsr rbloc		; draw blocks for this screen
0028F0  3               .endif
0028F0  3               .if oflag
0028F0  3               	jsr shwob		; draw objects.
0028F0  3               .endif
0028F0  3               
0028F0  3  A9 B7        	lda #<sprtab 		; address of sprite table, even sprites.
0028F2  3  85 68        	sta z80_x
0028F4  3  A9 37        	lda #>sprtab
0028F6  3  85 69        	sta z80_i
0028F8  3  20 33 32     	jsr dspr 		; display sprites.
0028FB  3               
0028FB  3  A9 C8        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0028FD  3  85 68        	sta z80_x
0028FF  3  A9 37        	lda #>(sprtab+TABSIZ)
002901  3  85 69        	sta z80_i
002903  3  20 33 32     	jsr dspr 		; display sprites.
002906  3               
002906  3               
002906  3               mloop:
002906  3  20 58 3F     	jsr vsync 		; synchronise with display.
002909  3  A9 B7        	lda #<sprtab 		; address of sprite table, even sprites.
00290B  3  85 68        	sta z80_x
00290D  3  A9 37        	lda #>sprtab
00290F  3  85 69        	sta z80_i
002911  3  20 33 32     	jsr dspr 		; display even sprites.
002914  3               
002914  3               ;	jsr plsnd 		; play sounds.
002914  3               
002914  3  20 92 28     	jsr proshr
002917  3  A9 C8        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002919  3  85 68        	sta z80_x
00291B  3  A9 37        	lda #>(sprtab+TABSIZ)
00291D  3  85 69        	sta z80_i
00291F  3  20 33 32     	jsr dspr 		; display odd sprites.
002922  3               
002922  3  A9 83        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002924  3  85 68        	sta z80_x
002926  3  A9 38        	lda #>(ssprit)
002928  3  85 69        	sta z80_i
00292A  3               evlp1:
00292A  3  20 99 39     	jsr evnt10 		; called once per main loop.
00292D  3               
00292D  3  20 B1 31     	jsr pspr 		; process sprites.
002930  3               
002930  3               ; Main loop events.
002930  3               
002930  3  A9 83        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002932  3  85 68        	sta z80_x
002934  3  A9 38        	lda #>ssprit
002936  3  85 69        	sta z80_i
002938  3               evlp2:
002938  3  20 9A 39     	jsr evnt11 		; called once per main loop.
00293B  3               bsortx:
00293B  3  20 27 31     	jsr bsort 		; sort sprites.
00293E  3               
00293E  3  A5 rr        	lda nexlev		; finished level flag.
002940  3  F0 03        	beq :+
002942  3  4C 6A 29     	jmp newlev		; is set, go to next level.
002945  3               :
002945  3  A5 rr        	lda gamwon		; finished game flag.
002947  3  F0 03        	beq :+
002949  3  4C 79 29     	jmp evwon		; is set, finish the game.
00294C  3               :
00294C  3  A5 rr        	lda restfl 		; finished level flag.
00294E  3  C9 01        	cmp #1			; has it been set?
002950  3  D0 03        	bne :+
002952  3  4C CA 28     	jmp rstrt		; yes, go to next level.
002955  3               :
002955  3  C9 02        	cmp #2			; has it been set?
002957  3  D0 03        	bne :+
002959  3  4C D9 28     	jmp rstrtn		; yes, go to next level.
00295C  3               :
00295C  3  A5 rr        	lda deadf 		; dead flag.
00295E  3  F0 03        	beq :+
002960  3  4C 7F 29     	jmp pdead		; yes, player dead.
002963  3               :
002963  3               ; back to start of main loop.
002963  3               
002963  3  E6 rr        	inc frmno
002965  3  E6 rr        	inc clock
002967  3  4C 06 29     	jmp mloop		; switched to a jmp mloop during test mode.
00296A  3               
00296A  3               ;----------------------------------------------------------
00296A  3               ; Read blocks from list and update screen accordingly.
00296A  3               ;----------------------------------------------------------
00296A  3               
00296A  3               .if aflag
00296A  3               rbloc:
00296A  3               	lda #<eop		; reset temp blockpointer
00296A  3               	sta pbbuf
00296A  3               	lda #>eop
00296A  3               	sta pbbuf+1
00296A  3               
00296A  3               rbloc2:
00296A  3               	lda pbbuf			; check for last block
00296A  3               	cmp pbptr
00296A  3               	bne rbloc1
00296A  3               	lda pbbuf+1
00296A  3               	cmp pbptr+1
00296A  3               	bne rbloc1
00296A  3               	rts
00296A  3               rbloc1:
00296A  3               	ldy #0
00296A  3               	lda (pbbuf),y		; check if block for this scno
00296A  3               	cmp scno
00296A  3               	bne rbloc0		; if not, skip
00296A  3               	iny
00296A  3               	lda (pbbuf),y		; get y
00296A  3               	sta dispy
00296A  3               	iny
00296A  3               	lda (pbbuf),y		; get x
00296A  3               	sta dispx
00296A  3               	iny
00296A  3               	lda (pbbuf),y		; get blocknr
00296A  3               	jsr pattr2		; draw block
00296A  3               rbloc0:
00296A  3               	clc			; point to next block
00296A  3               	lda pbbuf
00296A  3               	adc #4
00296A  3               	sta pbbuf
00296A  3               	bcc rbloc2
00296A  3               	inc pbbuf+1
00296A  3               	jmp rbloc2
00296A  3               .endif
00296A  3               
00296A  3               ;----------------------------------------------------------
00296A  3               ; New level
00296A  3               ;----------------------------------------------------------
00296A  3               
00296A  3               newlev:
00296A  3  A5 rr        	lda scno 			; current screen.
00296C  3  18           	clc
00296D  3  69 01        	adc #1				; next screen.
00296F  3  CD 37 3B     	cmp numsc			; total number of screens.
002972  3  B0 05        	bcs evwon			; yes, game finished.
002974  3  85 rr        	sta scno			; set new level number.
002976  3  4C CA 28     	jmp rstrt			; restart, clearing all aliens.
002979  3               
002979  3               evwon:
002979  3  20 A8 39     	jsr evnt18		 	; game completed.
00297C  3  4C 93 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00297F  3               
00297F  3               ;----------------------------------------------------------
00297F  3               ; Player dead.
00297F  3               ;----------------------------------------------------------
00297F  3               
00297F  3               pdead:
00297F  3  A9 00        	lda #0				; zeroise accumulator.
002981  3  85 rr        	sta deadf			; reset dead flag.
002983  3               evdie:
002983  3  20 A6 39     	jsr evnt16 			; death subroutine.
002986  3  A5 rr        	lda numlif			; number of lives.
002988  3  F0 03        	beq :+
00298A  3  4C CA 28     	jmp rstrt 			; restart game.
00298D  3               :
00298D  3               evfail:
00298D  3  20 A7 39     	jsr evnt17 			; failure event.
002990  3  4C 93 28     	jmp game			; restart game
002993  3               
002993  3               ;----------------------------------------------------------
002993  3               ; Tidy things up
002993  3               ;----------------------------------------------------------
002993  3               
002993  3               tidyup:
002993  3  A0 00        	ldy #0				; digits to check.
002995  3               tidyu2:
002995  3  B9 07 2B     	lda score,y 			; get score digit.
002998  3  CD 0D 2B     	cmp hiscor 			; are we larger than high score digit?
00299B  3  90 07        	bcc tidyu0			; high score is bigger.
00299D  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00299F  3  C8           	iny				; next digit of high score.
0029A0  3  C0 06        	cpy #6
0029A2  3  D0 F1        	bne tidyu2			; repeat for all digits
0029A4  3               tidyu0:
0029A4  3  A9 07        	lda #<score			; return pointing to score.
0029A6  3  85 62        	sta z80_c
0029A8  3  A9 2B        	lda #>score
0029AA  3  85 63        	sta z80_b
0029AC  3  60           	rts
0029AD  3               tidyu1:
0029AD  3  A0 05        	ldy #5
0029AF  3               tidyu3:
0029AF  3  B9 07 2B     	lda score,y			; score.
0029B2  3  99 0D 2B     	sta hiscor,y			; high score.
0029B5  3  88           	dey
0029B6  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029B8  3               evnewh:
0029B8  3  20 A9 39     	jsr evnt19			; new high score event.
0029BB  3  4C A4 29     	jmp tidyu0			; tidy up.
0029BE  3               
0029BE  3               ;--------------------------------------------------
0029BE  3               ; Restart event.
0029BE  3               ;--------------------------------------------------
0029BE  3               
0029BE  3               rsevt:
0029BE  3  A9 83        	lda #<ssprit 			; default to spare element in table.
0029C0  3  85 68        	sta z80_x
0029C2  3  A9 38        	lda #>ssprit
0029C4  3  85 69        	sta z80_i
0029C6  3               evrs:
0029C6  3  4C 9D 39     	jmp evnt14	 		; call restart event.
0029C9  3               
0029C9  3               ;------------------------------------------------------------------
0029C9  3               ; Copy number passed in a to string position bc, right-justified.
0029C9  3               ;
0029C9  3               ; Input:
0029C9  3               ;  A  = number
0029C9  3               ;  BC = string address
0029C9  3               ;
0029C9  3               ; Output:
0029C9  3               ;  BC = string with number
0029C9  3               ;-----------------------------------------------------------------
0029C9  3               
0029C9  3               num2ch:
0029C9  3  85 65        	sta z80_d		; Save number
0029CB  3               
0029CB  3  A9 00        	lda #0
0029CD  3  85 rr        	sta flag
0029CF  3               numdg3:
0029CF  3  A2 64        	ldx #100		; hundreds column.
0029D1  3  86 64        	stx z80_e
0029D3  3  20 E3 29     	jsr numdg		; show digit.
0029D6  3               numdg2:
0029D6  3  A2 0A        	ldx #10			; tens column.
0029D8  3  86 64        	stx z80_e
0029DA  3  20 E3 29     	jsr numdg		; show digit.
0029DD  3               
0029DD  3  E6 rr        	inc flag
0029DF  3  A2 01        	ldx #1			; units column.
0029E1  3  86 64        	stx z80_e
0029E3  3               numdg:
0029E3  3  A9 30        	lda #48			; clear digit.
0029E5  3  85 61        	sta z80_a
0029E7  3               numdg1:
0029E7  3  A5 65        	lda z80_d
0029E9  3  C5 64        	cmp z80_e
0029EB  3  90 0E        	bcc numdg0		; nothing to show.
0029ED  3  38           	sec
0029EE  3  A5 65        	lda z80_d
0029F0  3  E5 64        	sbc z80_e		; subtract from column.
0029F2  3  85 65        	sta z80_d
0029F4  3  E6 61        	inc z80_a		; increment digit.
0029F6  3  E6 rr        	inc flag
0029F8  3  4C E7 29     	jmp numdg1		; repeat until column is zero.
0029FB  3               numdg0:
0029FB  3  A0 00        	ldy #0
0029FD  3  A5 61        	lda z80_a
0029FF  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002A01  3  A5 rr        	lda flag
002A03  3  F0 06        	beq :+
002A05  3  E6 62        	inc z80_c		; next buffer position.
002A07  3  D0 02        	bne :+
002A09  3  E6 63        	inc z80_b
002A0B  3               :
002A0B  3  60           	rts
002A0C  3               num2dd:
002A0C  3  85 65        	sta z80_d		; Save number
002A0E  3               
002A0E  3  A9 01        	lda #1
002A10  3  85 rr        	sta flag
002A12  3               
002A12  3  4C D6 29     	jmp numdg2
002A15  3               num2td:
002A15  3  85 65        	sta z80_d		; Save number
002A17  3               
002A17  3  A9 01        	lda #1
002A19  3  85 rr        	sta flag
002A1B  3  4C CF 29     	jmp numdg3
002A1E  3               
002A1E  3               ;flag:	.byte 0
002A1E  3               
002A1E  3               ;---------------------------------------------------------
002A1E  3               ; Reset score to "000000"
002A1E  3               ;---------------------------------------------------------
002A1E  3               
002A1E  3               inisc:
002A1E  3  A9 30        	lda #'0'
002A20  3  A2 05        	ldx #5			; digits to initialise.
002A22  3               inisc0:
002A22  3  9D 07 2B     	sta score,x 		; write zero digit.
002A25  3  CA           	dex			; next column.
002A26  3  10 FA        	bpl inisc0		; repeat for all digits.
002A28  3               
002A28  3  60           	rts
002A29  3               
002A29  3               ;-----------------------------------------------------
002A29  3               ; Multiply h by d and return in hl.
002A29  3               ;
002A29  3               ; Input:
002A29  3               ;  H = first number
002A29  3               ;  D = second number
002A29  3               ;
002A29  3               ; Output:
002A29  3               ;  HL = result H x D
002A29  3               ;-----------------------------------------------------
002A29  3               
002A29  3               imul:
002A29  3  A5 65        	lda z80_d		; HL = H * D
002A2B  3  85 64        	sta z80_e
002A2D  3  A5 67        	lda z80_h
002A2F  3  85 62        	sta z80_c		; make c first multiplier.
002A31  3               imul0:
002A31  3  A9 00        	lda #0			; zeroise total.
002A33  3  85 66        	sta z80_l
002A35  3  85 67        	sta z80_h
002A37  3               
002A37  3  A5 67        	lda z80_h
002A39  3  85 65        	sta z80_d		; zeroise high byte.
002A3B  3               
002A3B  3  A9 08        	lda #8			; repeat 8 times.
002A3D  3  85 63        	sta z80_b
002A3F  3               imul1:
002A3F  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A41  3  90 0E        	bcc imul2		; wasn't set.
002A43  3  18           	clc			; bit was set, so add de.
002A44  3  A5 66        	lda z80_l
002A46  3  65 64        	adc z80_e
002A48  3  85 66        	sta z80_l
002A4A  3  A5 67        	lda z80_h
002A4C  3  65 65        	adc z80_d
002A4E  3  85 67        	sta z80_h
002A50  3  18           	clc 			; reset carry.
002A51  3               imul2:
002A51  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A53  3  26 65        	rol z80_d
002A55  3  C6 63        	dec z80_b
002A57  3  D0 E6        	bne imul1		; repeat 8 times.
002A59  3               
002A59  3  60           	rts
002A5A  3               
002A5A  3               ;-----------------------------------------------
002A5A  3               ; Divide d by e and return in d, remainder in a.
002A5A  3               ;
002A5A  3               ; Input:
002A5A  3               ;  D = first number
002A5A  3               ;  E = second number
002A5A  3               ;
002A5A  3               ; Output:
002A5A  3               ;  D = result D/E
002A5A  3               ;  A = remainder
002A5A  3               ;-----------------------------------------------
002A5A  3               
002A5A  3               idiv:
002A5A  3  A9 00        	lda #0
002A5C  3  A0 08        	ldy #8		 	; bits to shift.
002A5E  3  06 65        	asl z80_d
002A60  3               idiv0:
002A60  3  2A           	rol a 			; multiply d by 2.
002A61  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A63  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A65  3  E5 64        	sbc z80_e		; subtract it.
002A67  3               idiv1:
002A67  3  26 65        	rol z80_d		; rotate into d.
002A69  3  88           	dey
002A6A  3  D0 F4        	bne idiv0		; repeat
002A6C  3  60           	rts
002A6D  3               
002A6D  3               ;---------------------------------------------------
002A6D  3               ; Play AY sound effect
002A6D  3               ;---------------------------------------------------
002A6D  3               
002A6D  3               plsnd:
002A6D  3  60           	rts
002A6E  3               
002A6E  3               ;---------------------------------------------------
002A6E  3               ; Objects handling.
002A6E  3               ; 32 bytes for image
002A6E  3               ; 3 for room, y and x
002A6E  3               ; 3 for starting room, y and x.
002A6E  3               ; 254 = disabled.
002A6E  3               ; 255 = object in player"s pockets.
002A6E  3               ;---------------------------------------------------
002A6E  3               
002A6E  3               ;---------------------------------------------------
002A6E  3               ; Show items present.
002A6E  3               ;---------------------------------------------------
002A6E  3               
002A6E  3               .if oflag
002A6E  3               shwob:
002A6E  3               	lda #<objdta 			; objects table.
002A6E  3               	sta z80_l
002A6E  3               	lda #>objdta
002A6E  3               	sta z80_h
002A6E  3               
002A6E  3               	lda numob 			; number of objects in the game.
002A6E  3               	sta sprcnt
002A6E  3               shwob0:
002A6E  3               	ldy #12 			; distance to room number.
002A6E  3               	lda (z80_hl),y 			; same as an item?
002A6E  3               	cmp scno 			; current location.
002A6E  3               	bne :+
002A6E  3               	jsr dobj 			; yes, display object.
002A6E  3               :
002A6E  3               	clc
002A6E  3               	lda z80_l
002A6E  3               	adc #18 			; distance to next item.
002A6E  3               	sta z80_l
002A6E  3               	lda z80_h
002A6E  3               	adc #0
002A6E  3               	sta z80_h	 		; point to it.
002A6E  3               	dec sprcnt
002A6E  3               	bne shwob0 			; repeat for others.
002A6E  3               	rts
002A6E  3               
002A6E  3               ;---------------------------------------------------
002A6E  3               ; Display object.
002A6E  3               ; hl must point to object's start address.
002A6E  3               ;
002A6E  3               ; Input:
002A6E  3               ;  HL = object address
002A6E  3               ;---------------------------------------------------
002A6E  3               
002A6E  3               dobj:
002A6E  3               	ldy #13
002A6E  3               	lda (z80_hl),y 			; point to y.
002A6E  3               	sta dispy
002A6E  3               	iny
002A6E  3               	lda (z80_hl),y 			; point to x.
002A6E  3               	sta dispx
002A6E  3               dobj1:
002A6E  3               	jmp sprite 			; draw this sprite.
002A6E  3               
002A6E  3               ;--------------------------------------
002A6E  3               ; Remove an object.
002A6E  3               ;
002A6E  3               ; Input:
002A6E  3               ;  A = object number
002A6E  3               ;--------------------------------------
002A6E  3               
002A6E  3               remob:
002A6E  3               	cmp numob			; number of objects in game.
002A6E  3               	bcc :+				; are we checking past the end?
002A6E  3               	rts				; yes, can't get non-existent item.
002A6E  3               :
002A6E  3               	pha				; remember object.
002A6E  3               	jsr getob			; pick it up if we haven't already got it.
002A6E  3               	pla				; retrieve object number.
002A6E  3               	jsr gotob			; get its address.
002A6E  3               	lda #254
002A6E  3               	ldy #12
002A6E  3               	sta (z80_hl),y			; remove it.
002A6E  3               	rts
002A6E  3               
002A6E  3               ;---------------------------------------------------
002A6E  3               ; Pick up object number held in the accumulator.
002A6E  3               ;
002A6E  3               ; Input:
002A6E  3               ;  A = object number
002A6E  3               ;---------------------------------------------------
002A6E  3               
002A6E  3               getob:
002A6E  3               	cmp numob 		; number of objects in game.
002A6E  3               	bcc :+			; are we checking past the end?
002A6E  3               	rts			; yes, can't get non-existent item.
002A6E  3               :
002A6E  3               	jsr gotob 		; check if we already have it.
002A6E  3               	cmp #255
002A6E  3               	bne :+
002A6E  3               	rts			; we already do.
002A6E  3               :
002A6E  3               	ldy #12
002A6E  3               	lda (z80_hl),y		; is it on this screen?
002A6E  3               	cmp scno 		; current screen.
002A6E  3               	bne getob0		; not on screen, so nothing to delete.
002A6E  3               
002A6E  3               	lda #255
002A6E  3               	sta (z80_hl),y		; pick it up.
002A6E  3               	iny 			; point to y coord.
002A6E  3               getob1:
002A6E  3               	ldy #13
002A6E  3               	lda (z80_hl),y		; y coord.
002A6E  3               	sta dispy
002A6E  3               	ldy #14
002A6E  3               	lda (z80_hl),y 		; x coord.
002A6E  3               	sta dispx
002A6E  3               	jmp dobj1 		; delete object sprite.
002A6E  3               getob0:
002A6E  3               	lda #255
002A6E  3               	sta (z80_hl),y 		; pick it up.
002A6E  3               	rts
002A6E  3               .endif
002A6E  3               
002A6E  3               ;-----------------------------------------------------------------
002A6E  3               ; Got object check.
002A6E  3               ; Call with object in accumulator, returns zero set if in pockets.
002A6E  3               ;
002A6E  3               ; Input:
002A6E  3               ;  A = object number
002A6E  3               ;-----------------------------------------------------------------
002A6E  3               .if oflag .or mflag
002A6E  3               gotob:
002A6E  3               	cmp numob 		; number of objects in game.
002A6E  3               	bcc :+ 			; are we checking past the end?
002A6E  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A6E  3               :
002A6E  3               	jsr findob		; find the object.
002A6E  3               gotob1:
002A6E  3               	rts
002A6E  3               
002A6E  3               gotob0:
002A6E  3               	lda #254 		; missing.
002A6E  3               	jmp gotob1
002A6E  3               
002A6E  3               findob:
002A6E  3               	pha			; save object number
002A6E  3               	lda #<objdta 		; objects.
002A6E  3               	sta z80_l
002A6E  3               	lda #>objdta
002A6E  3               	sta z80_h
002A6E  3               	pla			; retreive object number
002A6E  3               	beq fndob1 		; is it zero? yes, skip loop.
002A6E  3               	tax 			; loop counter
002A6E  3               fndob2:
002A6E  3               	clc
002A6E  3               	lda z80_l
002A6E  3               	adc #18 		; size of each object.
002A6E  3               	sta z80_l
002A6E  3               	bcc :+
002A6E  3               	inc z80_h
002A6E  3               :
002A6E  3               	dex 			; repeat until we find address.
002A6E  3               	bne fndob2
002A6E  3               fndob1:
002A6E  3               	ldy #12			; distance to room it's in.
002A6E  3               	lda (z80_hl),y		; fetch status.
002A6E  3               	rts
002A6E  3               .endif
002A6E  3               
002A6E  3               ;---------------------------------------------
002A6E  3               ; Drop object number at (dispx, dispy).
002A6E  3               ;
002A6E  3               ; Input:
002A6E  3               ;  A = object number
002A6E  3               ;---------------------------------------------
002A6E  3               
002A6E  3               .if oflag
002A6E  3               drpob:
002A6E  3               	cmp numob 		; are we checking past the end?
002A6E  3               	bcc :+
002A6E  3               	rts			; yes, can't drop non-existent item.
002A6E  3               :
002A6E  3               	jsr gotob		; make sure object is in inventory.
002A6E  3               	cmp scno		; already on this screen?
002A6E  3               	bne :+
002A6E  3               	rts			; yes, nothing to do.
002A6E  3               :
002A6E  3               	ldy #12
002A6E  3               	lda scno
002A6E  3               	sta (z80_hl),y		; bring onto screen.
002A6E  3               	lda dispy		; sprite y coordinate.
002A6E  3               	iny
002A6E  3               	sta (z80_hl),y		; point to object y.
002A6E  3               	lda dispx 		; sprite x coordinate.
002A6E  3               	iny
002A6E  3               	sta (z80_hl),y 		; point to object x
002A6E  3               	jmp dobj		; draw the object sprite.
002A6E  3               
002A6E  3               ;-----------------------------------------------
002A6E  3               ; Seek objects at sprite position.
002A6E  3               ;
002A6E  3               ; Output:
002A6E  3               ;  A = object number, if not found A=255
002A6E  3               ;-----------------------------------------------
002A6E  3               
002A6E  3               skobj:
002A6E  3               	lda #<objdta 		; pointer to objects.
002A6E  3               	sta z80_l
002A6E  3               	lda #>objdta
002A6E  3               	sta z80_h
002A6E  3               
002A6E  3               	lda numob 		; number of objects in game.
002A6E  3               	sta z80_b 		; set up the loop counter.
002A6E  3               skobj0:
002A6E  3               	lda scno		; current room number.
002A6E  3               	ldy #12
002A6E  3               	cmp (z80_hl),y		; is object in here?
002A6E  3               	bne :+
002A6E  3               	jsr skobj1		; yes, check coordinates.
002A6E  3               :
002A6E  3               	clc			; point to next object in table.
002A6E  3               	lda z80_l
002A6E  3               	adc #18			; size of each object.
002A6E  3               	sta z80_l
002A6E  3               	bcc :+
002A6E  3               	inc z80_h
002A6E  3               :
002A6E  3               	dec z80_b
002A6E  3               	bne skobj0		; repeat for all objects.
002A6E  3               
002A6E  3               	lda #255		; end of list and nothing found, return 255.
002A6E  3               	rts
002A6E  3               
002A6E  3               skobj1:
002A6E  3               	ldy #13			; point to y coordinate.
002A6E  3               	lda (z80_hl),y		; point to y coordinate.
002A6E  3               	sec
002A6E  3               	ldy #8
002A6E  3               	sbc (z80_ix),y 		; subtract sprite y.
002A6E  3               	clc
002A6E  3               	adc #8			; add sprite height minus one.
002A6E  3               	cmp #17			; within range?
002A6E  3               	bcs skobj2		; no, ignore object.
002A6E  3               
002A6E  3               	ldy #14			; point to x coordinate now.
002A6E  3               	lda (z80_hl),y 		; get coordinate.
002A6E  3               	sec
002A6E  3               	ldy #9
002A6E  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A6E  3               	clc			; add sprite width minus one.
002A6E  3               	adc #7
002A6E  3               	cmp #15			; within range?
002A6E  3               	bcs skobj2		; no, ignore object.
002A6E  3               
002A6E  3               	pla			; remove return address from stack.
002A6E  3               	pla
002A6E  3               
002A6E  3               	lda numob 		; objects in game.
002A6E  3               	sec
002A6E  3               	sbc z80_b		; subtract loop counter.
002A6E  3               skobj2:
002A6E  3               	rts			; accumulator now points to object.
002A6E  3               .endif
002A6E  3               
002A6E  3               ;---------------------------------------------------------------------
002A6E  3               ; Spawn a new sprite.
002A6E  3               ;---------------------------------------------------------------------
002A6E  3               
002A6E  3               .if gflag
002A6E  3                 offset = 0
002A6E  3               .else
002A6E  3                 offset = 20
002A6E  3               .endif
002A6E  3               
002A6E  3               spawn:
002A6E  3  A9 B7        	lda #<sprtab		; sprite table.
002A70  3  85 66        	sta z80_l
002A72  3  A9 37        	lda #>sprtab
002A74  3  85 67        	sta z80_h
002A76  3               numsp1:
002A76  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A78  3  85 rr        	sta spcnt
002A7A  3               spaw0:
002A7A  3  A0 00        	ldy #0
002A7C  3  B1 66        	lda (z80_hl),y		; get sprite type.
002A7E  3  C9 FF        	cmp #255		; is it an unused slot?
002A80  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002A82  3               
002A82  3  18           	clc 			; point to next sprite in table.
002A83  3  A5 66        	lda z80_l
002A85  3  69 11        	adc #TABSIZ		; size of each entry.
002A87  3  85 66        	sta z80_l
002A89  3  90 02        	bcc :+
002A8B  3  E6 67        	inc z80_h
002A8D  3               :
002A8D  3  C6 rr        	dec spcnt		; one less iteration.
002A8F  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002A91  3               
002A91  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002A91  3               
002A91  3               spaw1:
002A91  3  A5 69        	lda z80_i		; address of original sprite.
002A93  3  48           	pha
002A94  3  A5 68        	lda z80_x
002A96  3  48           	pha
002A97  3               
002A97  3  A5 66        	lda z80_l		; store spawned sprite address.
002A99  3  85 rr        	sta spptr
002A9B  3  A5 67        	lda z80_h
002A9D  3  85 rr        	sta spptr+1
002A9F  3               
002A9F  3  A5 62        	lda z80_c
002AA1  3  A0 00        	ldy #0
002AA3  3  91 66        	sta (z80_hl),y 		; set the type.
002AA5  3  A0 05        	ldy #5
002AA7  3  91 66        	sta (z80_hl),y		; copy
002AA9  3               
002AA9  3  A5 63        	lda z80_b
002AAB  3  A0 01        	ldy #1
002AAD  3  91 66        	sta (z80_hl),y		; set the image.
002AAF  3  A0 06        	ldy #6
002AB1  3  91 66        	sta (z80_hl),y		; copy
002AB3  3               
002AB3  3  A9 00        	lda #0 			; frame zero.
002AB5  3  A0 02        	ldy #2
002AB7  3  91 66        	sta (z80_hl),y		; set frame.
002AB9  3  A0 07        	ldy #7
002ABB  3  91 66        	sta (z80_hl),y		; copy
002ABD  3               
002ABD  3  A0 08        	ldy #8
002ABF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002AC1  3  A0 03        	ldy #3
002AC3  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AC5  3  A0 08        	ldy #8
002AC7  3  91 66        	sta (z80_hl),y		; copy
002AC9  3               
002AC9  3  A0 09        	ldy #9
002ACB  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002ACD  3  A0 04        	ldy #4
002ACF  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AD1  3  A0 09        	ldy #9
002AD3  3  91 66        	sta (z80_hl),y		; copy
002AD5  3               
002AD5  3  A0 0A        	ldy #10			; direction of original.
002AD7  3  B1 68        	lda (z80_ix),y
002AD9  3  91 66        	sta (z80_hl),y		; direction
002ADB  3               
002ADB  3  A9 00        	lda #0
002ADD  3  A0 0B        	ldy #11
002ADF  3  91 66        	sta (z80_hl),y		; reset parameter.
002AE1  3  C8           	iny
002AE2  3  91 66        	sta (z80_hl),y		; reset parameter.
002AE4  3  C8           	iny
002AE5  3  91 66        	sta (z80_hl),y		; reset parameter.
002AE7  3  C8           	iny
002AE8  3  91 66        	sta (z80_hl),y		; reset parameter.
002AEA  3               rtssp:
002AEA  3  A5 rr        	lda spptr		; address of new sprite.
002AEC  3  85 68        	sta z80_x
002AEE  3  A5 rr        	lda spptr+1
002AF0  3  85 69        	sta z80_i
002AF2  3               evis1:
002AF2  3  20 98 39     	jsr evnt09 		; call sprite initialisation event.
002AF5  3               
002AF5  3  A5 rr        	lda spptr 		; address of new sprite.
002AF7  3  85 68        	sta z80_x
002AF9  3  A5 rr        	lda spptr+1
002AFB  3  85 69        	sta z80_i
002AFD  3  20 0B 40     	jsr sspria 		; display the new sprite.
002B00  3               
002B00  3  68           	pla			; address of original sprite.
002B01  3  85 68        	sta z80_x
002B03  3  68           	pla
002B04  3  85 69        	sta z80_i
002B06  3               
002B06  3  60           	rts
002B07  3               
002B07  3               ;spcnt:	.byte 0
002B07  3               ;spptr:	.word 0			; spawned sprite pointer.
002B07  3               ;seed:	.byte 0			; seed for random numbers.
002B07  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B0B  3  30 30        
002B0D  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B11  3  30 30        
002B13  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B17  3  30 30        
002B19  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B1B  3               
002B1B  3               ;----------------------------------------------------
002B1B  3               ; Check y-pos
002B1B  3               ;----------------------------------------------------
002B1B  3               
002B1B  3               checkx:
002B1B  3  A5 rr        	lda dispy		; y position.
002B1D  3  C9 19        	cmp #ScrHeight			; off screen?
002B1F  3  B0 01        	bcs :+
002B21  3  60           	rts			; no, it's okay.
002B22  3               :
002B22  3  68           	pla			; remove return address from stack.
002B23  3  85 66        	sta z80_l
002B25  3  68           	pla
002B26  3  85 67        	sta z80_h
002B28  3  60           	rts
002B29  3               
002B29  3               ;-----------------------------------------------
002B29  3               ; Displays the current high score.
002B29  3               ;-----------------------------------------------
002B29  3               
002B29  3               dhisc:
002B29  3  A9 0D        	lda #<hiscor 		; high score text.
002B2B  3  8D 69 2B     	sta dscor3+1
002B2E  3  8D 95 2B     	sta bscor3+1
002B31  3  A9 2B        	lda #>hiscor
002B33  3  8D 6A 2B     	sta dscor3+2
002B36  3  8D 96 2B     	sta bscor3+2
002B39  3  4C 4C 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B3C  3               
002B3C  3               ;------------------------------------------------------
002B3C  3               ; Displays the current score.
002B3C  3               ;------------------------------------------------------
002B3C  3               
002B3C  3               dscor:
002B3C  3  A9 07        	lda #<score		; score text.
002B3E  3  8D 69 2B     	sta dscor3+1
002B41  3  8D 95 2B     	sta bscor3+1
002B44  3  A9 2B        	lda #>score
002B46  3  8D 6A 2B     	sta dscor3+2
002B49  3  8D 96 2B     	sta bscor3+2
002B4C  3               dscor1:
002B4C  3  8C 91 2B     	sty tmpscr
002B4F  3  20 05 31     	jsr preprt		; set up font and print position.
002B52  3  20 1B 2B     	jsr checkx		; make sure we're in a printable range.
002B55  3               
002B55  3  AD A5 38     	lda fcolour
002B58  3  20 AA 2C     	jsr pchar
002B5B  3  20 DB 30     	jsr nexpos
002B5E  3               ;	lda #6			; digits to display.
002B5E  3               ;	sta z80_b
002B5E  3  A5 rr        	lda prtmod		; get print mode.
002B60  3  F0 03        	beq :+			; standard size text?
002B62  3  4C 92 2B     	jmp bscor0		; no, show double-height.
002B65  3               :
002B65  3               dscor0:
002B65  3               ;	ldy #0
002B65  3               ;	lda (z80_hl),y 		; fetch character.
002B65  3  AC 91 2B     	ldy tmpscr
002B68  3               dscor3:
002B68  3  B9 07 2B     	lda score,y
002B6B  3  20 AA 2C     	jsr pchar 		; display character.
002B6E  3  E6 rr        	inc dispx		; move along x coordinate
002B70  3               
002B70  3               ;	inc z80_l		; next score column.
002B70  3               ;	bne :+
002B70  3               ;	inc z80_h
002B70  3               ;:
002B70  3  EE 91 2B     	inc tmpscr
002B73  3  C6 63        	dec z80_b
002B75  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B77  3               dscor2:
002B77  3  A9 0C        	lda #12
002B79  3  20 AA 2C     	jsr pchar
002B7C  3  20 DB 30     	jsr nexpos
002B7F  3               
002B7F  3  AD A6 38     	lda bcolour
002B82  3  20 AA 2C     	jsr pchar
002B85  3  20 DB 30     	jsr nexpos
002B88  3               
002B88  3  A5 rr        	lda dispx 		; set up display coordinates.
002B8A  3  85 rr        	sta charx
002B8C  3  A5 rr        	lda dispy
002B8E  3  85 rr        	sta chary
002B90  3  60           	rts
002B91  3               
002B91  3  00           tmpscr:	.byte 0
002B92  3               ;------------------------------------------------------
002B92  3               ; Displays the current score in double-height characters.
002B92  3               ;
002B92  3               ; Input:
002B92  3               ;  B  = digit number
002B92  3               ;  HL = score string
002B92  3               ;------------------------------------------------------
002B92  3               
002B92  3               bscor0:
002B92  3               ;	ldy #0
002B92  3               
002B92  3               ;	lda (z80_hl),y 		; fetch character.
002B92  3  A4 rr        	ldy tmp
002B94  3               bscor3:
002B94  3  B9 07 2B     	lda score,y
002B97  3  20 AC 30     	jsr bchar 		; display big char.
002B9A  3               
002B9A  3               ;	inc z80_l 		; next score column.
002B9A  3               ;	bne :+
002B9A  3               ;	inc z80_h
002B9A  3               ;:
002B9A  3  E6 rr        	inc tmp
002B9C  3  C6 63        	dec z80_b
002B9E  3  F0 03        	beq :+
002BA0  3  4C 92 2B     	jmp bscor0 		; repeat for all digits.
002BA3  3               :
002BA3  3  4C 77 2B     	jmp dscor2 		; tidy up line and column variables.
002BA6  3               
002BA6  3               ;-----------------------------------------------------
002BA6  3               ; Adds number in the hl pair to the score.
002BA6  3               ;-----------------------------------------------------
002BA6  3               
002BA6  3               addsc:
002BA6  3  A9 08        	lda #<(score+1) 	; ten thousands column.
002BA8  3  85 64        	sta z80_e
002BAA  3  A9 2B        	lda #>(score+1)
002BAC  3  85 65        	sta z80_d
002BAE  3  A9 10        	lda #<10000		; amount to add each time.
002BB0  3  85 62        	sta z80_c
002BB2  3  A9 27        	lda #>10000
002BB4  3  85 63        	sta z80_b
002BB6  3  20 FA 2B     	jsr incsc		; add to score.
002BB9  3               
002BB9  3  E6 64        	inc z80_e		; thousands column.
002BBB  3  D0 02        	bne :+
002BBD  3  E6 65        	inc z80_d
002BBF  3               :
002BBF  3  A9 E8        	lda #<1000		; amount to add each time.
002BC1  3  85 62        	sta z80_c
002BC3  3  A9 03        	lda #>1000
002BC5  3  85 63        	sta z80_b
002BC7  3  20 FA 2B     	jsr incsc 		; add to score.
002BCA  3               
002BCA  3  E6 64        	inc z80_e		; hundreds column.
002BCC  3  D0 02        	bne :+
002BCE  3  E6 65        	inc z80_d
002BD0  3               :
002BD0  3  A9 64        	lda #<100		; amount to add each time.
002BD2  3  85 62        	sta z80_c
002BD4  3  A9 00        	lda #>100
002BD6  3  85 63        	sta z80_b
002BD8  3  20 FA 2B     	jsr incsc		; add to score.
002BDB  3               
002BDB  3  E6 64        	inc z80_e 		; tens column.
002BDD  3  D0 02        	bne :+
002BDF  3  E6 65        	inc z80_d
002BE1  3               :
002BE1  3  A9 0A        	lda #<10		; amount to add each time.
002BE3  3  85 62        	sta z80_c
002BE5  3  A9 00        	lda #>10
002BE7  3  85 63        	sta z80_b
002BE9  3  20 FA 2B     	jsr incsc 		; add to score.
002BEC  3               
002BEC  3  E6 64        	inc z80_e		; units column.
002BEE  3  D0 02        	bne :+
002BF0  3  E6 65        	inc z80_d
002BF2  3               :
002BF2  3  A9 01        	lda #<1			; units.
002BF4  3  85 62        	sta z80_c
002BF6  3  A9 00        	lda #>1
002BF8  3  85 63        	sta z80_b
002BFA  3               incsc:
002BFA  3  A5 67        	lda z80_h		; store amount to add.
002BFC  3  48           	pha
002BFD  3  A5 66        	lda z80_l
002BFF  3  48           	pha
002C00  3               
002C00  3  38           	sec			; subtract from amount to add.
002C01  3  A5 66        	lda z80_l
002C03  3  E5 62        	sbc z80_c
002C05  3  85 66        	sta z80_l
002C07  3  A5 67        	lda z80_h
002C09  3  E5 63        	sbc z80_b
002C0B  3  85 67        	sta z80_h
002C0D  3  90 14        	bcc incsc0		; too much, restore value.
002C0F  3               
002C0F  3  68           	pla			; delete the previous amount from the stack.
002C10  3  68           	pla
002C11  3               
002C11  3  A5 65        	lda z80_d 		; store column position.
002C13  3  48           	pha
002C14  3  A5 64        	lda z80_e
002C16  3  48           	pha
002C17  3  20 2A 2C     	jsr incsc2		; do the increment.
002C1A  3               
002C1A  3  68           	pla			; restore column.
002C1B  3  85 64        	sta z80_e
002C1D  3  68           	pla
002C1E  3  85 65        	sta z80_d
002C20  3  4C FA 2B     	jmp incsc		; repeat until all added.
002C23  3               
002C23  3               incsc0:
002C23  3  68           	pla			; restore previous value.
002C24  3  85 66        	sta z80_l
002C26  3  68           	pla
002C27  3  85 67        	sta z80_h
002C29  3  60           	rts
002C2A  3               incsc2:
002C2A  3  A0 00        	ldy #0
002C2C  3  B1 64        	lda (z80_de),y 		; get amount.
002C2E  3  18           	clc
002C2F  3  69 01        	adc #1			; add one to column.
002C31  3  91 64        	sta (z80_de),y		; write new column total.
002C33  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C35  3  B0 01        	bcs :+
002C37  3  60           	rts			; no, carry on.
002C38  3               :
002C38  3  A9 30        	lda #'0'		; make it zero.
002C3A  3  91 64        	sta (z80_de),y		; write new column total.
002C3C  3  C6 64        	dec z80_e		; back one column.
002C3E  3  D0 02        	bne :+
002C40  3  C6 65        	dec z80_d
002C42  3               :
002C42  3  4C 2A 2C     	jmp incsc2
002C45  3               
002C45  3               ;------------------------------------
002C45  3               ; Add bonus to score and reset bonus
002C45  3               ;------------------------------------
002C45  3               
002C45  3               addbo:
002C45  3  A2 05        	ldx #5			; last digit.
002C47  3  18           	clc
002C48  3               addbo0:
002C48  3  BD 07 2B     	lda score,x		; get score.
002C4B  3  7D 13 2B     	adc bonus,x		; add bonus.
002C4E  3  38           	sec			; 0 to 18.
002C4F  3  E9 30        	sbc #48
002C51  3  48           	pha
002C52  3  A9 30        	lda #'0'
002C54  3  9D 13 2B     	sta bonus,x
002C57  3  68           	pla
002C58  3  C9 3A        	cmp #58
002C5A  3  90 03        	bcc addbo1
002C5C  3  38           	sec
002C5D  3  E9 0A        	sbc #10
002C5F  3               addbo1:
002C5F  3  9D 07 2B     	sta score,x		; zeroise bonus.
002C62  3  CA           	dex			; next digit.
002C63  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C65  3  60           	rts
002C66  3               
002C66  3               ;------------------------------------
002C66  3               ; Swap score and bonus.
002C66  3               ;------------------------------------
002C66  3               
002C66  3               swpsb:
002C66  3  A2 05        	ldx #5			; digits to add.
002C68  3               swpsb0:
002C68  3  BD 07 2B     	lda score,x 		; get score digits.
002C6B  3  48           	pha			; save digit
002C6C  3  BD 13 2B     	lda bonus,x 		; get bonus digits.
002C6F  3  9D 07 2B     	sta score,x		; switch score-bonus
002C72  3  68           	pla
002C73  3  9D 13 2B     	sta bonus,x
002C76  3  CA           	dex 			; repeat for all 6 digits.
002C77  3  10 EF        	bpl swpsb0
002C79  3  60           	rts
002C7A  3               
002C7A  3               ;----------------------------------------------------
002C7A  3               ; Get print address.
002C7A  3               ;----------------------------------------------------
002C7A  3               
002C7A  3               gprad:
002C7A  3  A5 rr        	lda dispy
002C7C  3  85 rr        	sta tmp
002C7E  3  0A           	asl a
002C7F  3  18           	clc
002C80  3  65 rr        	adc tmp
002C82  3  A8           	tay
002C83  3  B9 00 DC     	lda SCADTB_lb,y
002C86  3  18           	clc
002C87  3  65 rr        	adc dispx
002C89  3  85 rr        	sta scraddr
002C8B  3  B9 00 DD     	lda SCADTB_hb,y
002C8E  3  69 00        	adc #0
002C90  3  85 rr        	sta scraddr+1
002C92  3  60           	rts
002C93  3               
002C93  3               ;--------------------------------------------------------------
002C93  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002C93  3               ;
002C93  3               ; Output:
002C93  3               ;  bufaddr = MAP + dispy*40 + dispx
002C93  3               ;--------------------------------------------------------------
002C93  3               
002C93  3               pradd:
002C93  3  A5 rr        	lda dispy 		; y coordinate.
002C95  3  0A           	asl a
002C96  3  18           	clc
002C97  3  65 rr        	adc dispy
002C99  3  AA           	tax
002C9A  3               
002C9A  3  18           	clc
002C9B  3  BD 00 DC     	lda SCADTB_lb,x
002C9E  3  65 rr        	adc dispx
002CA0  3  85 rr        	sta bufaddr
002CA2  3               
002CA2  3  BD 00 DD     	lda SCADTB_hb,x
002CA5  3  69 D4        	adc #(>MAP->ScreenAddr)
002CA7  3  85 rr        	sta bufaddr+1
002CA9  3  60           	rts
002CAA  3               
002CAA  3               ;----------------------------------------------------
002CAA  3               ; Display character in A at dispx,dispy.
002CAA  3               ;
002CAA  3               ; Input:
002CAA  3               ;  A 	   = character to print
002CAA  3               ;----------------------------------------------------
002CAA  3               
002CAA  3               pchar:
002CAA  3  48           	pha
002CAB  3  20 7A 2C     	jsr gprad		; get screen address.
002CAE  3               .if gflag
002CAE  3               	and andeor
002CAE  3               	eor andeor+1
002CAE  3               .endif
002CAE  3               .if iflag
002CAE  3               	eor #$ff
002CAE  3               .endif
002CAE  3  68           	pla
002CAF  3  A0 00        	ldy #0
002CB1  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CB3  3  60           	rts
002CB4  3               
002CB4  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002CB8  3  60 40 20 00  
002CBC  3               
002CBC  3               ;----------------------------------------------
002CBC  3               
002CBC  3               ; Print attributes, properties and pixels.
002CBC  3               ;
002CBC  3               ; Input:
002CBC  3               ;  A	= tile number
002CBC  3               ;----------------------------------------------
002CBC  3               
002CBC  3               pbpattr:			; entry PUTBLOCK command
002CBC  3  A4 rr        	ldy charx
002CBE  3  84 rr        	sty dispx
002CC0  3  A4 rr        	ldy chary
002CC2  3  84 rr        	sty dispy
002CC4  3               pattr:
002CC4  3               .if aflag
002CC4  3               	pha
002CC4  3               	jsr wbloc		; save blockinfo
002CC4  3               	pla
002CC4  3               .endif
002CC4  3               
002CC4  3               pattr2:
002CC4  3  85 63        	sta z80_b		; store cell in b register for now.
002CC6  3  AA           	tax
002CC7  3  BD E8 39     	lda bprop,x 		; block properties.
002CCA  3  85 62        	sta z80_c
002CCC  3  C9 08        	cmp #COLECT
002CCE  3  D0 05        	bne :+
002CD0  3  A5 63        	lda z80_b
002CD2  3  8D E3 2C     	sta colpatt
002CD5  3               :
002CD5  3  20 93 2C     	jsr pradd 		; get property buffer address.
002CD8  3  A5 62        	lda z80_c
002CDA  3  A0 00        	ldy #0
002CDC  3  91 rr        	sta (bufaddr),y 	; write property.
002CDE  3  A5 63        	lda z80_b 		; restore cell.
002CE0  3  4C E4 2C     	jmp panp
002CE3  3               ; Print attributes, no properties.
002CE3  3               
002CE3  3  00           colpatt:	.byte 0
002CE4  3               
002CE4  3               panp:
002CE4  3  85 64        	sta z80_e		; displacement in e.
002CE6  3  A9 00        	lda #0
002CE8  3  85 65        	sta z80_d		; no high byte.
002CEA  3  06 64        	asl z80_e  		; multiply char by 8.
002CEC  3  26 65        	rol z80_d
002CEE  3  18           	clc
002CEF  3  A5 64        	lda z80_e
002CF1  3  69 DC        	adc #<chgfx 		; address of graphics.
002CF3  3  85 rr        	sta tileaddr
002CF5  3  A5 65        	lda z80_d
002CF7  3  69 39        	adc #>chgfx
002CF9  3  85 rr        	sta tileaddr+1
002CFB  3  20 7A 2C     	jsr gprad 		; get screen address.
002CFE  3               panp0:
002CFE  3  A0 00        	ldy #0
002D00  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002D02  3               .if iflag
002D02  3               	eor #$ff		; Invert
002D02  3               .endif
002D02  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D04  3  E6 rr        	inc dispx 		; move along one.
002D06  3  E6 rr        	inc charx
002D08  3  60           	rts
002D09  3               
002D09  3               ;----------------------------------------------
002D09  3               ; Write block
002D09  3               ;----------------------------------------------
002D09  3               
002D09  3               .if aflag
002D09  3               wbloc:
002D09  3               	ldy #3
002D09  3               	sta (pbptr),y		; store block number
002D09  3               	dey
002D09  3               	lda dispx
002D09  3               	sta (pbptr),y		; write x position of block.
002D09  3               	dey
002D09  3               	lda dispy
002D09  3               	sta (pbptr),y		; write y position of block.
002D09  3               	dey
002D09  3               	lda scno
002D09  3               	sta (pbptr),y		; write screen.
002D09  3               	clc			; point to next free location
002D09  3               	lda pbptr
002D09  3               	adc #4
002D09  3               	sta pbptr
002D09  3               	bcc :+
002D09  3               	inc pbptr+1
002D09  3               :
002D09  3               	rts
002D09  3               .endif
002D09  3               
002D09  3               ;----------------------------------------------
002D09  3               ; Print character pixels, no more.
002D09  3               ;
002D09  3               ; Input:
002D09  3               ;  A	= character to print
002D09  3               ;----------------------------------------------
002D09  3               
002D09  3               pchr:
002D09  3  20 AA 2C     	jsr pchar 		; show character in accumulator.
002D0C  3  E6 rr        	inc dispx		; move along one.
002D0E  3  60           	rts
002D0F  3               
002D0F  3               ;----------------------------------------------------
002D0F  3               ; Draw sprite
002D0F  3               ;----------------------------------------------------
002D0F  3               
002D0F  3               .if oflag
002D0F  3               
002D0F  3               sprite:
002D0F  3               	jsr scadd 		; get screen address in scraddr.
002D0F  3               
002D0F  3               	lda z80_l		; store sprite graphic address.
002D0F  3               	sta sprit1+1
002D0F  3               	lda z80_h
002D0F  3               	sta sprit1+2
002D0F  3               
002D0F  3               	ldx #0			; pixel height.
002D0F  3               	ldy #0
002D0F  3               sprit1:
002D0F  3               	lda objdta,x		; fetch first byte.
002D0F  3               	ldy spritetab,x
002D0F  3               	eor (scraddr),y		; merge with screen image.
002D0F  3               	ora #$20
002D0F  3               	sta (scraddr),y		; write to screen.
002D0F  3               	inx			; next screen byte.
002D0F  3               	cpx #12
002D0F  3               	bne sprit1		; repeat
002D0F  3               
002D0F  3               	rts
002D0F  3               
002D0F  3               spritetab:
002D0F  3               	.byte $00,$01,$02,$03
002D0F  3               	.byte $28,$29,$2a,$2b
002D0F  3               	.byte $50,$51,$52,$53
002D0F  3               
002D0F  3               spr:	.byte 0,0
002D0F  3               
002D0F  3               .endif
002D0F  3               
002D0F  3               ;-----------------------------------------------------------
002D0F  3               ; Get room address.
002D0F  3               ;-----------------------------------------------------------
002D0F  3               
002D0F  3               groom:
002D0F  3  A6 rr        	ldx scno 		; screen number.
002D11  3  A0 00        	ldy #0
002D13  3               groomx:
002D13  3  A9 6A        	lda #<scdat 		; pointer to screens.
002D15  3  85 66        	sta z80_l
002D17  3  A9 3A        	lda #>scdat
002D19  3  85 67        	sta z80_h
002D1B  3               groom1:
002D1B  3  E0 00        	cpx #0			; is it the first one?
002D1D  3  F0 15        	beq groom0 		; no more screens to skip.
002D1F  3               
002D1F  3  18           	clc
002D20  3  A5 66        	lda z80_l
002D22  3  79 6A 3A     	adc scdat,y 		; low byte of screen size.
002D25  3  85 66        	sta z80_l
002D27  3  C8           	iny			; point to high byte.
002D28  3  A5 67        	lda z80_h
002D2A  3  79 6A 3A     	adc scdat,y 		; high byte of screen size.
002D2D  3  85 67        	sta z80_h
002D2F  3  C8           	iny			; next address.
002D30  3               
002D30  3  CA           	dex 			; one less iteration.
002D31  3  4C 1B 2D     	jmp groom1 		; loop until we reach the end.
002D34  3               groom0:
002D34  3  AD 37 3B     	lda numsc 		; add displacement.
002D37  3  0A           	asl a
002D38  3  18           	clc			; add double displacement to address.
002D39  3  65 66        	adc z80_l
002D3B  3  85 66        	sta z80_l
002D3D  3  A5 67        	lda z80_h
002D3F  3  69 00        	adc #0
002D41  3  85 67        	sta z80_h
002D43  3  60           	rts
002D44  3               
002D44  3               ;-----------------------------------------------------------
002D44  3               ; Draw present room.
002D44  3               ;-----------------------------------------------------------
002D44  3               
002D44  3               droom:
002D44  3  AD 1F 28     	lda wintop 		; window top.
002D47  3  85 rr        	sta dispy		; set cursor y position.
002D49  3               droom2:
002D49  3  20 0F 2D     	jsr groom 		; get address of current room.
002D4C  3  A9 00        	lda #0	 		; zero in accumulator.
002D4E  3  85 rr        	sta comcnt 		; reset compression counter.
002D50  3  AD 21 28     	lda winhgt 		; height of window.
002D53  3  85 rr        	sta rrow		; set row counter
002D55  3               droom0:
002D55  3  AD 20 28     	lda winlft 		; window left edge.
002D58  3  85 rr        	sta dispx 		; set cursor x position.
002D5A  3  AD 22 28     	lda winwid 		; width of window.
002D5D  3  85 rr        	sta rcol		; set column counter
002D5F  3               droom1:
002D5F  3  20 70 2D     	jsr flbyt 		; decompress next byte on the fly.
002D62  3  20 C4 2C     	jsr pattr2 		; show attributes and block.
002D65  3  C6 rr        	dec rcol		; one less column.
002D67  3  D0 F6        	bne droom1 		; repeat for entire line.
002D69  3  E6 rr        	inc dispy		; move down one line.
002D6B  3  C6 rr        	dec rrow 		; one less row.
002D6D  3  D0 E6        	bne droom0 		; repeat for all rows.
002D6F  3  60           	rts
002D70  3               
002D70  3               ;rcol:	.byte 0
002D70  3               ;rrow:	.byte 0
002D70  3               
002D70  3               ;----------------------------------------------
002D70  3               ; Decompress bytes on-the-fly.
002D70  3               ;----------------------------------------------
002D70  3               
002D70  3               flbyt:
002D70  3  A5 rr        	lda comcnt 		; compression counter.
002D72  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D74  3               
002D74  3  A0 00        	ldy #0
002D76  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D78  3  E6 66        	inc z80_l 		; point to next cell.
002D7A  3  D0 02        	bne :+
002D7C  3  E6 67        	inc z80_h
002D7E  3               :
002D7E  3  C9 FF        	cmp #255 		; is this byte a control code?
002D80  3  F0 01        	beq :+
002D82  3  60           	rts 			; no, this byte is uncompressed.
002D83  3               :
002D83  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002D85  3  85 rr        	sta combyt 		; set up the type.
002D87  3  E6 66        	inc z80_l 		; point to quantity.
002D89  3  D0 02        	bne :+
002D8B  3  E6 67        	inc z80_h
002D8D  3               :
002D8D  3  B1 66        	lda (z80_hl),y 		; get quantity.
002D8F  3  E6 66        	inc z80_l 		; point to next byte.
002D91  3  D0 02        	bne :+
002D93  3  E6 67        	inc z80_h
002D95  3               :
002D95  3               flbyt1:
002D95  3  85 rr        	sta comcnt 		; store new quantity.
002D97  3  C6 rr        	dec comcnt		; one less.
002D99  3  A5 rr        	lda combyt 		; byte to expand.
002D9B  3  60           	rts
002D9C  3               
002D9C  3               ;combyt:	.byte 0			; byte type compressed.
002D9C  3               ;comcnt:	.byte 0			; compression counter.
002D9C  3               
002D9C  3               ;------------------------------------------
002D9C  3               ; Ladder down check.
002D9C  3               ;
002D9C  3               ; Input:
002D9C  3               ;  IX = sprite pointer
002D9C  3               ;------------------------------------------
002D9C  3               
002D9C  3               .if lflag
002D9C  3               laddd:
002D9C  3  A0 09        	ldy #9
002D9E  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DA0  3  85 rr        	sta dispx
002DA2  3               
002DA2  3  A0 08        	ldy #8
002DA4  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DA6  3               ;	and #254		; make it even.
002DA6  3  91 68        	sta (z80_ix),y 		; reset it.
002DA8  3  18           	clc 			; look down 16 pixels.
002DA9  3               numsp5:
002DA9  3  69 09        	adc #SPR_HGT
002DAB  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DAD  3  4C C1 2D     	jmp laddv
002DB0  3               
002DB0  3               ;------------------------------------------
002DB0  3               ; Ladder up check.
002DB0  3               ;
002DB0  3               ; Input:
002DB0  3               ;  IX = sprite pointer
002DB0  3               ;
002DB0  3               ; Output:
002DB0  3               ;  A  = 0 is ok, A <>0 is not ok
002DB0  3               ;------------------------------------------
002DB0  3               
002DB0  3               laddu:
002DB0  3  A0 09        	ldy #9
002DB2  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DB4  3  85 rr        	sta dispx
002DB6  3               
002DB6  3  A0 08        	ldy #8
002DB8  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DBA  3  91 68        	sta (z80_ix),y		; reset it.
002DBC  3  18           	clc 			; look 2 pixels above feet.
002DBD  3               numsp6:
002DBD  3  69 08        	adc #SPR_HGT-1
002DBF  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DC1  3               laddv:
002DC1  3  20 79 2F     	jsr tstbl 		; get map address.
002DC4  3  20 FC 2E     	jsr ldchk 		; standard ladder check.
002DC7  3  F0 01        	beq :+
002DC9  3  60           	rts 			; no way through.
002DCA  3               :
002DCA  3  E6 rr        	inc bufaddr 		; look right one cell.
002DCC  3  D0 02        	bne :+
002DCE  3  E6 rr        	inc bufaddr+1
002DD0  3               :
002DD0  3  20 FC 2E     	jsr ldchk 		; do the check.
002DD3  3  F0 01        	beq :+
002DD5  3  60           	rts 			; impassable.
002DD6  3               :
002DD6  3  A5 rr        	lda dispx 		; y coordinate.
002DD8  3  29 01        	and #1 			; position straddling block cells.
002DDA  3  D0 01        	bne :+
002DDC  3  60           	rts 			; no more checks needed.
002DDD  3               :
002DDD  3  E6 rr        	inc bufaddr 		; look to third cell.
002DDF  3  D0 02        	bne :+
002DE1  3  E6 rr        	inc bufaddr+1
002DE3  3               :
002DE3  3  20 FC 2E     	jsr ldchk 		; do the check.
002DE6  3  60           	rts  			; return with zero flag set accordingly.
002DE7  3               .endif
002DE7  3               
002DE7  3               ;---------------------------------------------------------
002DE7  3               ; Can go up check.
002DE7  3               ;
002DE7  3               ; Input:
002DE7  3               ;  IX = sprite pointer
002DE7  3               ;
002DE7  3               ; Output:
002DE7  3               ;  A  = 0 is ok, A <>0 is not ok
002DE7  3               ;---------------------------------------------------------
002DE7  3               
002DE7  3               cangu:
002DE7  3  A0 09        	ldy #9
002DE9  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DEB  3  85 rr        	sta dispx
002DED  3  A0 08        	ldy #8
002DEF  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002DF1  3  38           	sec
002DF2  3  E9 01        	sbc #1
002DF4  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DF6  3  20 79 2F     	jsr tstbl 		; get map address.
002DF9  3  20 CA 2E     	jsr lrchk 		; standard left/right check.
002DFC  3  F0 01        	beq :+
002DFE  3  60           	rts			; no way through.
002DFF  3               :
002DFF  3  E6 rr        	inc bufaddr		; look right one cell.
002E01  3  D0 02        	bne :+
002E03  3  E6 rr        	inc bufaddr+1
002E05  3               :
002E05  3  20 CA 2E     	jsr lrchk 		; do the check.
002E08  3  F0 01        	beq :+
002E0A  3  60           	rts			; impassable.
002E0B  3               :
002E0B  3  E6 rr        	inc bufaddr		; look right one cell.
002E0D  3  D0 02        	bne :+
002E0F  3  E6 rr        	inc bufaddr+1
002E11  3               :
002E11  3  20 CA 2E     	jsr lrchk 		; do the check.
002E14  3  F0 01        	beq :+
002E16  3  60           	rts			; impassable.
002E17  3               :
002E17  3  E6 rr        	inc bufaddr		; look right one cell.
002E19  3  D0 02        	bne :+
002E1B  3  E6 rr        	inc bufaddr+1
002E1D  3               :
002E1D  3  20 CA 2E     	jsr lrchk 		; do the check.
002E20  3  F0 01        	beq :+
002E22  3  60           	rts			; impassable.
002E23  3               :
002E23  3  A5 rr        	lda dispx		; x coordinate.
002E25  3  29 01        	and #1			; position straddling block cells.
002E27  3  D0 01        	bne :+
002E29  3  60           	rts			; no more checks needed.
002E2A  3               :
002E2A  3  E6 rr        	inc bufaddr		; look to third cell.
002E2C  3  D0 02        	bne :+
002E2E  3  E6 rr        	inc bufaddr+1
002E30  3               :
002E30  3  20 CA 2E     	jsr lrchk		; do the check.
002E33  3  60           	rts 			; return with zero flag set accordingly.
002E34  3               
002E34  3               ;---------------------------------------------------------
002E34  3               ; Can go down check.
002E34  3               ;
002E34  3               ; Input:
002E34  3               ;  IX = sprite pointer
002E34  3               ;
002E34  3               ; Output:
002E34  3               ;  A  = 0 is ok, A <>0 is not ok
002E34  3               ;---------------------------------------------------------
002E34  3               
002E34  3               cangd:
002E34  3  A0 09        	ldy #9
002E36  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E38  3  85 rr        	sta dispx
002E3A  3  A0 08        	ldy #8
002E3C  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E3E  3  18           	clc
002E3F  3               numsp3:
002E3F  3  69 09        	adc #SPR_HGT 		; look down 9 pixels.
002E41  3  85 rr        	sta dispy		; coords in dispx,dispy.
002E43  3  20 79 2F     	jsr tstbl 		; get map address.
002E46  3  20 DF 2E     	jsr plchk 		; block, platform check.
002E49  3  F0 01        	beq :+
002E4B  3  60           	rts			; no way through.
002E4C  3               :
002E4C  3  E6 rr        	inc bufaddr		; look right one cell.
002E4E  3  D0 02        	bne :+
002E50  3  E6 rr        	inc bufaddr+1
002E52  3               :
002E52  3  20 DF 2E     	jsr plchk		; block, platform check.
002E55  3  F0 01        	beq :+
002E57  3  60           	rts			; impassable.
002E58  3               :
002E58  3  E6 rr        	inc bufaddr		; look right one cell.
002E5A  3  D0 02        	bne :+
002E5C  3  E6 rr        	inc bufaddr+1
002E5E  3               :
002E5E  3  20 DF 2E     	jsr plchk		; block, platform check.
002E61  3  F0 01        	beq :+
002E63  3  60           	rts			; impassable.
002E64  3               :
002E64  3  E6 rr        	inc bufaddr		; look right one cell.
002E66  3  D0 02        	bne :+
002E68  3  E6 rr        	inc bufaddr+1
002E6A  3               :
002E6A  3  20 DF 2E     	jsr plchk		; block, platform check.
002E6D  3  F0 01        	beq :+
002E6F  3  60           	rts			; impassable.
002E70  3               :
002E70  3  A5 rr        	lda dispx		; x coordinate.
002E72  3  29 01        	and #1			; position straddling block cells.
002E74  3  D0 01        	bne :+
002E76  3  60           	rts			; no more checks needed.
002E77  3               :
002E77  3  E6 rr        	inc bufaddr		; look to third cell.
002E79  3  D0 02        	bne :+
002E7B  3  E6 rr        	inc bufaddr+1
002E7D  3               :
002E7D  3  20 DF 2E     	jsr plchk		; block, platform check.
002E80  3  60           	rts			; return with zero flag set accordingly.
002E81  3               
002E81  3               ;---------------------------------------------------------
002E81  3               ; Can go left check.
002E81  3               ;
002E81  3               ; Input:
002E81  3               ;  IX = sprite pointer
002E81  3               ;
002E81  3               ; Output:
002E81  3               ;  A  = 0 is ok, A <>0 is not ok
002E81  3               ;---------------------------------------------------------
002E81  3               
002E81  3               cangl:
002E81  3  A0 08        	ldy #8
002E83  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E85  3  85 rr        	sta dispy
002E87  3  A0 09        	ldy #9
002E89  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E8B  3  38           	sec
002E8C  3  E9 01        	sbc #1			; look left 2 pixels.
002E8E  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E90  3  4C A2 2E     	jmp cangh		; test if we can go there.
002E93  3               
002E93  3               ;---------------------------------------------------------
002E93  3               ; Can go right check.
002E93  3               ;
002E93  3               ; Input:
002E93  3               ;  IX = sprite pointer
002E93  3               ;
002E93  3               ; Output:
002E93  3               ;  A  = 0 is ok, A <>0 is not ok
002E93  3               ;---------------------------------------------------------
002E93  3               
002E93  3               cangr:
002E93  3  A0 08        	ldy #8
002E95  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E97  3  85 rr        	sta dispy
002E99  3  A0 09        	ldy #9
002E9B  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E9D  3  18           	clc
002E9E  3  69 08        	adc #SPR_WID		; look right 8 pixels.
002EA0  3  85 rr        	sta dispx		; coords in dispx,dispy.
002EA2  3               cangh:
002EA2  3               cangh2:
002EA2  3  A9 04        	lda #(SPR_HGT/3+1)	; default rows to write.
002EA4  3  85 63        	sta z80_b
002EA6  3  A4 rr        	ldy dispy		; y position.
002EA8  3  B9 4A DF     	lda V_SPR_PTR,y		; does x straddle cells?
002EAB  3  D0 02        	bne cangh0		; yes, loop counter is good.
002EAD  3  C6 63        	dec z80_b		; one less row to write.
002EAF  3               cangh0:
002EAF  3  20 79 2F     	jsr tstbl		; get map address.
002EB2  3               cangh1:
002EB2  3  20 CA 2E     	jsr lrchk		; standard left/right check.
002EB5  3  F0 01        	beq :+
002EB7  3  60           	rts			; no way through.
002EB8  3               :
002EB8  3  48           	pha
002EB9  3  18           	clc
002EBA  3  A5 rr        	lda bufaddr
002EBC  3  69 28        	adc #ScrWidth		; look down.
002EBE  3  85 rr        	sta bufaddr
002EC0  3  90 02        	bcc :+
002EC2  3  E6 rr        	inc bufaddr+1
002EC4  3               :
002EC4  3  68           	pla
002EC5  3               
002EC5  3  C6 63        	dec z80_b
002EC7  3  D0 E9        	bne cangh1
002EC9  3  60           	rts
002ECA  3               
002ECA  3               ;-------------------------------------
002ECA  3               ; Check left/right movement is okay.
002ECA  3               ;
002ECA  3               ; Input:
002ECA  3               ;  bufaddr = MAP + x/8 + y/8*32
002ECA  3               ;
002ECA  3               ; Output:
002ECA  3               ;  A  = 0 is ok, A <>0 is not ok
002ECA  3               ;-------------------------------------
002ECA  3               
002ECA  3               lrchk:
002ECA  3  A0 00        	ldy #0
002ECC  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002ECE  3  C9 02        	cmp #WALL 		; is it passable?
002ED0  3  F0 0A        	beq lrchkx		; no.
002ED2  3               
002ED2  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002ED4  3  F0 06        	beq lrchkx		; not passable.
002ED6  3  A9 00        	lda #0
002ED8  3  60           	rts
002ED9  3               
002ED9  3               ;--------------------------------------------------------------
002ED9  3               ; Called by mmenu
002ED9  3               ;--------------------------------------------------------------
002ED9  3               
002ED9  3               always:
002ED9  3  A9 FF        	lda #255		; report it as okay.
002EDB  3  60           	rts
002EDC  3               
002EDC  3               lrchkx:
002EDC  3  A9 01        	lda #1 			; reset all bits.
002EDE  3  60           	rts
002EDF  3               
002EDF  3               
002EDF  3               ;--------------------------------------------------------------
002EDF  3               ; Check platform or solid item is not in way.
002EDF  3               ;
002EDF  3               ; Input:
002EDF  3               ;  bufaddr = MAP + x/2 + y/3*40
002EDF  3               ;
002EDF  3               ; Output:
002EDF  3               ;  A  = 0 is ok, A <>0 is not ok
002EDF  3               ;--------------------------------------------------------------
002EDF  3               
002EDF  3               plchk:
002EDF  3  A0 00        	ldy #0
002EE1  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002EE3  3  C9 02        	cmp #WALL 		; is it passable?
002EE5  3  F0 F5        	beq lrchkx		; no.
002EE7  3               .if pflag .or dflag
002EE7  3               	cmp #FODDER		; fodder has to be dug.
002EE7  3               	beq lrchkx		; not passable.
002EE7  3               .endif
002EE7  3  C9 01        	cmp #PLATFM		; platform is solid.
002EE9  3  F0 07        	beq plchkx		; not passable.
002EEB  3               .if lflag
002EEB  3  C9 03        	cmp #LADDER		; is it a ladder?
002EED  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
002EEF  3               .endif
002EEF  3               plchk0:
002EEF  3  A9 00        	lda #0			; report as ok
002EF1  3  60           	rts
002EF2  3               plchkx:
002EF2  3  A4 rr        	ldy dispy		; y coordinate.
002EF4  3  B9 4A DF     	lda V_SPR_PTR,y		; position straddling blocks.
002EF7  3  F0 E3        	beq lrchkx		; on platform, deny movement.
002EF9  3  4C EF 2E     	jmp plchk0
002EFC  3               
002EFC  3               ;--------------------------------------------------------------
002EFC  3               ; Check ladder is available.
002EFC  3               ;
002EFC  3               ; Input:
002EFC  3               ;  bufaddr = MAP + x/8 + y/8*32
002EFC  3               ;
002EFC  3               ; Output:
002EFC  3               ;  A  = 0 is ok, A <>0 is not ok
002EFC  3               ;--------------------------------------------------------------
002EFC  3               
002EFC  3               .if lflag
002EFC  3               ldchk:
002EFC  3  A0 00        	ldy #0
002EFE  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
002F00  3  C9 03        	cmp #LADDER 		; is it a ladder?
002F02  3  F0 03        	beq :+
002F04  3  A9 01        	lda #1
002F06  3  60           	rts  			; return with zero flag set accordingly.
002F07  3               :
002F07  3  A9 00        	lda #0
002F09  3  60           	rts
002F0A  3               .endif
002F0A  3               
002F0A  3               ;--------------------------------------------------------------
002F0A  3               ; Get collectables.
002F0A  3               ;--------------------------------------------------------------
002F0A  3               
002F0A  3               .if cflag
002F0A  3               getcol:
002F0A  3                       lda #COLECT             ; collectable blocks.
002F0A  3                       sta z80_b
002F0A  3                       jsr tded                ; test for collectable blocks.
002F0A  3                       cmp z80_b               ; did we find one?
002F0A  3                       beq :+
002F0A  3                       rts                     ; none were found, job done.
002F0A  3               :
002F0A  3                       jsr gtblk               ; get block.
002F0A  3                       jsr evnt20              ; collected block event.
002F0A  3                       jmp getcol              ; repeat until none left.
002F0A  3               
002F0A  3               ; Get collectable block.
002F0A  3               
002F0A  3               gtblk:
002F0A  3               	ldy #0			; Reset index
002F0A  3               
002F0A  3               	tya			; set clear
002F0A  3                       sta (bufaddr),y		; clear block in MAP.
002F0A  3               
002F0A  3               	lda bufaddr		; calculate screenaddr
002F0A  3               	sta scraddr
002F0A  3               	sec
002F0A  3               	lda bufaddr+1
002F0A  3               	sbc #>(MAP-ScreenAddr)
002F0A  3               	sta scraddr+1
002F0A  3               
002F0A  3               	lda colpatt		; get blocknr
002F0A  3               	asl a			; multiply by 2
002F0A  3               	tax			; set blockdata index
002F0A  3               	ldy #0			; set screenaddress index
002F0A  3               	lda (scraddr),y		; get screendata
002F0A  3               	eor chgfx,x		; eor with blockdata
002F0A  3               	ora #$20		; set graphics bit
002F0A  3               	sta (scraddr),y		; display on screen
002F0A  3               
002F0A  3               	rts
002F0A  3               .endif
002F0A  3               
002F0A  3               ;--------------------------------------------------------------
002F0A  3               ; Touched deadly block check.
002F0A  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002F0A  3               ;
002F0A  3               ; Input:
002F0A  3               ;  IX = sprite address
002F0A  3               ;
002F0A  3               ; Output:
002F0A  3               ;  A  = 0 is ok, A=5 is not ok
002F0A  3               ;--------------------------------------------------------------
002F0A  3               
002F0A  3               ; Calculate map address from dispx,dispy
002F0A  3               
002F0A  3               tded:
002F0A  3  A0 08        	ldy #8
002F0C  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002F0E  3  85 rr        	sta dispy
002F10  3  C8           	iny
002F11  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002F13  3  85 rr        	sta dispx		; coords in dispx,dispy.
002F15  3  20 79 2F     	jsr tstbl		; get map address in bufaddr.
002F18  3               
002F18  3               ; Set variables
002F18  3               
002F18  3  A9 00        	lda #0
002F1A  3  85 62        	sta z80_c		; reset x-stradding skip flag
002F1C  3               
002F1C  3  A9 04        	lda #4			; Set nr of sprite columns
002F1E  3  85 rr        	sta rcol
002F20  3  A5 rr        	lda dispx
002F22  3  29 01        	and #1
002F24  3  D0 04        	bne :+
002F26  3  C6 rr        	dec rcol
002F28  3  E6 62        	inc z80_c		; set x-stradding skip flag
002F2A  3               :
002F2A  3  A5 rr        	lda rcol
002F2C  3  85 64        	sta z80_e
002F2E  3               
002F2E  3  A9 03        	lda #3			; Set nr of sprite rows
002F30  3  85 rr        	sta rrow
002F32  3  A4 rr        	ldy dispy
002F34  3  B9 4A DF     	lda V_SPR_PTR,y
002F37  3  D0 02        	bne :+
002F39  3  C6 rr        	dec rrow
002F3B  3               :
002F3B  3  A2 00        	ldx #0
002F3D  3               vspr_loop:
002F3D  3  A5 64        	lda z80_e
002F3F  3  85 rr        	sta rcol
002F41  3               hspr_loop:
002F41  3  BC 65 2F     	ldy spr_ptr,x
002F44  3  B1 rr        	lda (bufaddr),y
002F46  3  C5 63        	cmp z80_b
002F48  3  F0 0E        	beq end_sprloop
002F4A  3  E8           	inx
002F4B  3  C6 rr        	dec rcol
002F4D  3  10 F2        	bpl hspr_loop
002F4F  3               ;	inx
002F4F  3  A4 62        	ldy z80_c		; Test x-stradding skip flag
002F51  3  F0 01        	beq :+			; If reset, no skipping
002F53  3  E8           	inx			; If set, skip 1 byte
002F54  3               :
002F54  3  C6 rr        	dec rrow
002F56  3  10 E5        	bpl vspr_loop
002F58  3               end_sprloop:
002F58  3  48           	pha
002F59  3  18           	clc
002F5A  3  98           	tya
002F5B  3  65 rr        	adc bufaddr
002F5D  3  85 rr        	sta bufaddr
002F5F  3  90 02        	bcc :+
002F61  3  E6 rr        	inc bufaddr+1
002F63  3               :
002F63  3  68           	pla
002F64  3  60           	rts
002F65  3               
002F65  3               spr_ptr:
002F65  3  00 01 02 03  	.byte   0,  1,  2,  3,  4
002F69  3  04           
002F6A  3  28 29 2A 2B  	.byte  40, 41, 42, 43, 44
002F6E  3  2C           
002F6F  3  50 51 52 53  	.byte  80, 81, 82, 83, 84
002F73  3  54           
002F74  3  78 79 7A 7B  	.byte 120,121,122,123,124
002F78  3  7C           
002F79  3               
002F79  3               ;---------------------------------------------------
002F79  3               ; Fetch block type at (dispx, dispy).
002F79  3               ;
002F79  3               ; Output:
002F79  3               ;  A = block type
002F79  3               ;---------------------------------------------------
002F79  3               
002F79  3               tstbl:
002F79  3  A5 rr        	lda dispy 		; fetch y coord.
002F7B  3  AA           	tax
002F7C  3               
002F7C  3  A5 rr        	lda dispx		; x/2
002F7E  3  4A           	lsr a
002F7F  3  85 rr        	sta charx
002F81  3               
002F81  3  18           	clc			; Get offset address
002F82  3  BD 00 DC     	lda SCADTB_lb,x
002F85  3  65 rr        	adc charx
002F87  3  85 rr        	sta bufaddr
002F89  3               
002F89  3  BD 00 DD     	lda SCADTB_hb,x
002F8C  3  69 D4        	adc #(>MAP->ScreenAddr)	; Get map address
002F8E  3  85 rr        	sta bufaddr+1
002F90  3               
002F90  3  A0 00        	ldy #0
002F92  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002F94  3  60           	rts
002F95  3               
002F95  3               ;-------------------------------------------------------------------
002F95  3               ; Jump - if we can.
002F95  3               ; Requires initial speed to be set up in accumulator prior to call.
002F95  3               ;
002F95  3               ; Input:
002F95  3               ;  IX = sprite address
002F95  3               ;-------------------------------------------------------------------
002F95  3               
002F95  3               jump:
002F95  3  A0 0D        	ldy #13
002F97  3  B1 68        	lda (z80_ix),y		; jump table low.
002F99  3  A0 0E        	ldy #14
002F9B  3  11 68        	ora (z80_ix),y		; jump table high.
002F9D  3  F0 01        	beq :+
002F9F  3  60           	rts			; already in the air.
002FA0  3               :
002FA0  3  A9 3E        	lda #>jtab
002FA2  3  A0 0E        	ldy #14
002FA4  3  91 68        	sta (z80_ix),y		; set jump high.
002FA6  3  A9 4F        	lda #<jtab		; jump table start.
002FA8  3  A0 0D        	ldy #13
002FAA  3  91 68        	sta (z80_ix),y		; set jump low.
002FAC  3  60           	rts
002FAD  3               
002FAD  3               ; Jump table.
002FAD  3               
002FAD  3               ;jtab:
002FAD  3               ;	.byte 248,250,252
002FAD  3               ;	.byte 254,254,255
002FAD  3               ;	.byte 255,255,0,0
002FAD  3               ;	.byte 0,1,1,1,2,2
002FAD  3               ;	.byte 4,6,8,8,8,99
002FAD  3               
002FAD  3               ;------------------------------------------------
002FAD  3               ; Random numbers code.
002FAD  3               ; Pseudo-random number generator, 8-bit.
002FAD  3               ;
002FAD  3               ; Output:
002FAD  3               ;  RND = random number
002FAD  3               ;------------------------------------------------
002FAD  3               
002FAD  3               random:
002FAD  3  A5 rr        	lda seed
002FAF  3  F0 05        	beq doEor
002FB1  3  0A           	asl a
002FB2  3  F0 04        	beq noEor
002FB4  3  90 02        	bcc noEor
002FB6  3  49 1D        doEor:	eor #$1d
002FB8  3  85 rr        noEor:	sta seed
002FBA  3  60           	rts
002FBB  3               
002FBB  3  A5 rr        	lda seed		; get last random number.
002FBD  3  0A           	asl a
002FBE  3  0A           	asl a
002FBF  3  18           	clc
002FC0  3  65 rr        	adc seed
002FC2  3  18           	clc
002FC3  3  69 45        	adc #$45
002FC5  3  85 rr        	sta seed		; store new seed.
002FC7  3  85 rr        	sta varrnd		; return number in variable.
002FC9  3  60           	rts
002FCA  3               
002FCA  3               ;--------------------------------------------------------
002FCA  3               ; Keys
002FCA  3               ;
002FCA  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002FCA  3               ;             ||||||||
002FCA  3               ;             |||||||+> Right    KEY 0  - X
002FCA  3               ;             ||||||+-> Left     KEY 1  - Z
002FCA  3               ;             |||||+--> Down     KEY 2  - .
002FCA  3               ;             ||||+---> Up       KEY 3  - ;
002FCA  3               ;             |||+----> Fire1    KEY 4  - SPC
002FCA  3               ;             ||+-----> Fire2    KEY 5  - Q
002FCA  3               ;             |+------> Fire3    KEY 6  - P
002FCA  3               ;             +-------> Not used
002FCA  3               ;
002FCA  3               ;                       Option1  KEY 7  - 1
002FCA  3               ;                       Option2  KEY 8  - 2
002FCA  3               ;                       Option3  KEY 9  - 3
002FCA  3               ;                       Option4  KEY 10 - 4
002FCA  3               ;--------------------------------------------------------
002FCA  3               
002FCA  3               ;              X   Z   .   ;  SPC  Q   P
002FCA  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002FCA  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002FCA  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002FCE  3  00 04 14     
002FD1  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002FD5  3               
002FD5  3               ;-------------------------------------------------------
002FD5  3               ; Joystick and keyboard reading routines.
002FD5  3               ;
002FD5  3               ; contrl = 0, Keyboard
002FD5  3               ;          1, JoyKeyb
002FD5  3               ;          2, JoyMMC
002FD5  3               ;-------------------------------------------------------
002FD5  3               
002FD5  3               joykey:
002FD5  3  A5 rr        	lda contrl 		; control flag.
002FD7  3  C9 01        	cmp #1
002FD9  3  D0 03        	bne :+
002FDB  3  4C B3 3F     	jmp joy1 		; read keyboard joystick
002FDE  3               :
002FDE  3  C9 02        	cmp #2
002FE0  3  D0 03        	bne :+
002FE2  3  4C EB 3F     	jmp joy2 		; read MMC joystick.
002FE5  3               :
002FE5  3               ; Keyboard controls.
002FE5  3               
002FE5  3  A9 00        	lda #0		 	; zero reading.
002FE7  3  85 64        	sta z80_e
002FE9  3               
002FE9  3  A0 06        	ldy #6	 		; address of last key.
002FEB  3               joyke0:
002FEB  3  B9 65 3E     	lda keys,y 		; get key from table.
002FEE  3  20 EC 3F     	jsr ktest		; being pressed?
002FF1  3  26 64        	rol z80_e 		; rotate into reading.
002FF3  3               
002FF3  3  88           	dey		 	; next key.
002FF4  3  10 F5        	bpl joyke0 		; repeat for all keys.
002FF6  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002FF8  3  85 rr        	sta joyval		; remember value.
002FFA  3  60           	rts
002FFB  3               
002FFB  3               ;---------------------------------------------------------------
002FFB  3               ; Getkey in column,row format
002FFB  3               ;
002FFB  3               ; Output:
002FFB  3               ;  A = high nibble=row and low nibble=column key in matrix
002FFB  3               ;---------------------------------------------------------------
002FFB  3               
002FFB  3               ;kget:
002FFB  3               ;	lda #ScrMode		; high-mono mode.
002FFB  3               ;	sta ScrSelAddr		; screen select port
002FFB  3               ;	stx xtmp
002FFB  3               ;kget4:
002FFB  3               ;	jsr READKEY		; read key until pressed
002FFB  3               ;	cpy #255
002FFB  3               ;	beq kget4
002FFB  3               ;	sta rcol		; save column
002FFB  3               ;	stx rrow		; determine row
002FFB  3               ;kget3:
002FFB  3               ;	jsr READKEY		; wait until key released
002FFB  3               ;	cpy #255
002FFB  3               ;	bne kget3
002FFB  3               ;
002FFB  3               ;	sec			; calculate matrix row
002FFB  3               ;	lda #10
002FFB  3               ;	sbc rrow
002FFB  3               ;	asl a
002FFB  3               ;	asl a
002FFB  3               ;	asl a
002FFB  3               ;	asl a
002FFB  3               ;	sta rrow
002FFB  3               ;
002FFB  3               ;	ldy #255		; find column mask
002FFB  3               ;kget1:
002FFB  3               ;	iny
002FFB  3               ;	lda keymask,y
002FFB  3               ;	cmp rcol
002FFB  3               ;	beq kget2
002FFB  3               ;	jmp kget1
002FFB  3               ;kget2:
002FFB  3               ;	tya			; determine column
002FFB  3               ;	clc
002FFB  3               ;	adc rrow
002FFB  3               ;	ldx xtmp
002FFB  3               ;	rts
002FFB  3               
002FFB  3               ;---------------------------------------------------------------
002FFB  3               ; Display message.
002FFB  3               ;
002FFB  3               ; Input:
002FFB  3               ;  A = message number
002FFB  3               ;---------------------------------------------------------------
002FFB  3               
002FFB  3               dmsg:
002FFB  3  AA           	tax
002FFC  3  A9 AC        	lda #<msgdat		; pointer to messages.
002FFE  3  85 66        	sta z80_l
003000  3  A9 39        	lda #>msgdat
003002  3  85 67        	sta z80_h
003004  3  20 0E 31     	jsr getwrd		; get message number.
003007  3               dmsg3:
003007  3  20 05 31     	jsr preprt		; pre-printing stuff.
00300A  3  20 1B 2B     	jsr checkx		; make sure we"re in a printable range.
00300D  3  A5 rr        	lda prtmod		; print mode.
00300F  3  D0 50        	bne bmsg1		; no, double-height text.
003011  3               
003011  3  AD A5 38     	lda fcolour		; Set textcolour
003014  3  20 AA 2C     	jsr pchar
003017  3  20 DB 30     	jsr nexpos
00301A  3               dmsg0:
00301A  3  A5 67        	lda z80_h		; store string pointer.
00301C  3  48           	pha
00301D  3  A5 66        	lda z80_l
00301F  3  48           	pha
003020  3               
003020  3  A0 00        	ldy #0
003022  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
003024  3  29 7F        	and #127		; remove any end marker.
003026  3  C9 0D        	cmp #13
003028  3  F0 24        	beq dmsg1
00302A  3  20 AA 2C     	jsr pchar		; display character.
00302D  3  20 DB 30     	jsr nexpos 		; display position.
003030  3  D0 03        	bne dmsg2		; not on a new line.
003032  3  20 F7 30     	jsr nexlin		; next line down.
003035  3               dmsg2:
003035  3  68           	pla			; retrieve string pointer
003036  3  85 66        	sta z80_l
003038  3  68           	pla
003039  3  85 67        	sta z80_h
00303B  3               
00303B  3  A0 00        	ldy #0
00303D  3  B1 66        	lda (z80_hl),y		; fetch last character.
00303F  3  0A           	asl a  			; was it the end?
003040  3  90 03        	bcc :+
003042  3  4C 77 2B     	jmp dscor2		; yes, job done.
003045  3               :
003045  3  E6 66        	inc z80_l		; next character to display.
003047  3  D0 02        	bne :+
003049  3  E6 67        	inc z80_h
00304B  3               :
00304B  3  4C 1A 30     	jmp dmsg0
00304E  3               dmsg1:
00304E  3  E6 rr        	inc dispy
003050  3  A5 rr        	lda dispy
003052  3  C9 19        	cmp #ScrHeight
003054  3  90 04        	bcc dmsg4
003056  3  A9 00        	lda #0
003058  3  85 rr        	sta dispy
00305A  3               dmsg4:
00305A  3  A9 00        	lda #0
00305C  3  85 rr        	sta dispx
00305E  3  4C 35 30     	jmp dmsg2
003061  3               
003061  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
003061  3               
003061  3               ;----------------------------------------------------------
003061  3               ; Display message in big text.
003061  3               ;
003061  3               ; Input:
003061  3               ;  HL = string pointer
003061  3               ;----------------------------------------------------------
003061  3               
003061  3               bmsg1:
003061  3  AD A5 38     	lda fcolour		; Set textcolour
003064  3  20 AC 30     	jsr bchar
003067  3  A9 0D        	lda #13			; Set double height
003069  3  20 AC 30     	jsr bchar
00306C  3               bmsg4:
00306C  3  A0 00        	ldy #0
00306E  3  B1 66        	lda (z80_hl),y 		; get character to display.
003070  3  29 7F        	and #127		; only want 7 bits.
003072  3  C9 0D        	cmp #13
003074  3  F0 21        	beq bmsg2
003076  3  20 AC 30     	jsr bchar 		; display big char.
003079  3               bmsg3:
003079  3  A0 00        	ldy #0
00307B  3  B1 66        	lda (z80_hl),y 		; look at last character.
00307D  3  48           	pha
00307E  3  E6 66        	inc z80_l 		; next character in list.
003080  3  D0 02        	bne :+
003082  3  E6 67        	inc z80_h
003084  3               :
003084  3  68           	pla
003085  3  0A           	asl a  			; was terminator flag set?
003086  3  90 E4        	bcc bmsg4		; no, keep going.
003088  3  20 77 2B     	jsr dscor2
00308B  3  C6 rr        	dec dispx
00308D  3  E6 rr        	inc dispy
00308F  3  20 77 2B     	jsr dscor2
003092  3  C6 rr        	dec dispy
003094  3  C6 rr        	dec chary
003096  3  60           	rts
003097  3               bmsg2:
003097  3  A9 00        	lda #0
003099  3  85 rr        	sta dispx
00309B  3  E6 rr        	inc dispy
00309D  3  E6 rr        	inc dispy
00309F  3  A5 rr        	lda dispy
0030A1  3  C9 18        	cmp #ScrHeight-1
0030A3  3  90 D4        	bcc bmsg3
0030A5  3  A9 00        	lda #0
0030A7  3  85 rr        	sta dispy
0030A9  3  4C 79 30     	jmp bmsg3
0030AC  3               
0030AC  3               ;----------------------------------------------------------
0030AC  3               ; Big character display.
0030AC  3               ;
0030AC  3               ; Input:
0030AC  3               ;  A = character
0030AC  3               ;----------------------------------------------------------
0030AC  3               
0030AC  3               bchar:
0030AC  3  20 AA 2C     	jsr pchar 		; display big char.
0030AF  3  E6 rr        	inc dispy
0030B1  3  20 AA 2C     	jsr pchar
0030B4  3  C6 rr        	dec dispy
0030B6  3  20 DB 30     	jsr nexpos		; display position.
0030B9  3  60           	rts
0030BA  3               
0030BA  3               bchar3:
0030BA  3  E6 rr        	inc dispy
0030BC  3  20 F7 30     	jsr nexlin 		; next line check.
0030BF  3               bchar2:
0030BF  3  4C 77 2B     	jmp dscor2		; tidy up line and column variables.
0030C2  3               
0030C2  3               
0030C2  3               ;-------------------------------------------------
0030C2  3               ; Display a character.
0030C2  3               ;
0030C2  3               ; Input:
0030C2  3               ;  A = character
0030C2  3               ;-------------------------------------------------
0030C2  3               
0030C2  3               achar:
0030C2  3  85 63        	sta z80_b 		; copy to b.
0030C4  3  20 05 31     	jsr preprt 		; get ready to print.
0030C7  3  A5 63        	lda z80_b		; character in accumulator.
0030C9  3  A6 rr        	ldx prtmod 		; print mode.
0030CB  3  F0 03        	beq :+
0030CD  3  4C AC 30     	jmp bchar 		; no, double-height text.
0030D0  3               :
0030D0  3  20 AA 2C     	jsr pchar 		; display character.
0030D3  3  20 DB 30     	jsr nexpos 		; display position.
0030D6  3  F0 E2        	beq bchar3		; next line down.
0030D8  3  4C BF 30     	jmp bchar2 		; tidy up.
0030DB  3               
0030DB  3               
0030DB  3               ;-------------------------------------------------
0030DB  3               ; Get next print column position.
0030DB  3               ;-------------------------------------------------
0030DB  3               
0030DB  3               nexpos:
0030DB  3  E6 rr        	inc dispx		; move along one position.
0030DD  3  A5 rr        	lda prtmod
0030DF  3  F0 13        	beq skip
0030E1  3  A5 rr        	lda dispx 		; get coordinate.
0030E3  3  C9 28        	cmp #40
0030E5  3  D0 0D        	bne skip
0030E7  3  E6 rr        	inc dispy
0030E9  3  E6 rr        	inc dispy
0030EB  3  A9 01        	lda #1
0030ED  3  85 rr        	sta dispx
0030EF  3  A9 0D        	lda #$d
0030F1  3  20 AC 30     	jsr bchar
0030F4  3               skip:
0030F4  3  A5 rr        	lda dispx
0030F6  3  60           	rts 			; return with status in zero flag.
0030F7  3               
0030F7  3               ;-------------------------------------------------
0030F7  3               ; Get next print line position.
0030F7  3               ;-------------------------------------------------
0030F7  3               
0030F7  3               nexlin:
0030F7  3  E6 rr        	inc dispy 		; newline.
0030F9  3  A5 rr        	lda dispy		; vertical position.
0030FB  3  C9 19        	cmp #ScrHeight			; past screen edge?
0030FD  3  B0 01        	bcs :+
0030FF  3  60           	rts			; no, still okay.
003100  3               :
003100  3  A9 00        	lda #0			; restart at top.
003102  3  85 rr        	sta dispy
003104  3  60           	rts
003105  3               
003105  3               ;--------------------------------------------------------
003105  3               ; Pre-print preliminaries.
003105  3               ;--------------------------------------------------------
003105  3               
003105  3               preprt:
003105  3               ;	lda #<(FONT-256)		; font pointer.
003105  3               ;	sta grbase		; set up graphics base.
003105  3               ;	lda #>(FONT-256)
003105  3               ;	sta grbase+1
003105  3               prescr:
003105  3  A5 rr        	lda charx 		; display coordinates.
003107  3  85 rr        	sta dispx		; set up general coordinates.
003109  3  A5 rr        	lda chary
00310B  3  85 rr        	sta dispy
00310D  3  60           	rts
00310E  3               
00310E  3               ;--------------------------------------------------------------
00310E  3               ; Get messagenr x in hl
00310E  3               ;
00310E  3               ; Input:
00310E  3               ;  HL = pointer to message list
00310E  3               ;  X  = message number.
00310E  3               ;--------------------------------------------------------------
00310E  3               
00310E  3               getwrd:
00310E  3  E0 00        	cpx #0
003110  3  D0 01        	bne:+ 			; first word in list?
003112  3  60           	rts 			; yep, don't search.
003113  3               :
003113  3  A0 00        	ldy #0
003115  3               getwd0:
003115  3  B1 66        	lda (z80_hl),y
003117  3  48           	pha
003118  3  E6 66        	inc z80_l
00311A  3  D0 02        	bne :+
00311C  3  E6 67        	inc z80_h
00311E  3               :
00311E  3  68           	pla
00311F  3  C9 80        	cmp #128		; found end?
003121  3  30 F2        	bmi getwd0		; no, carry on.
003123  3  CA           	dex			; until we have right number.
003124  3  D0 EF        	bne getwd0
003126  3  60           	rts
003127  3               
003127  3               ;-----------------------------------------------------------
003127  3               ; Bubble sort.
003127  3               ;-----------------------------------------------------------
003127  3               
003127  3               bsort:
003127  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
003129  3  85 rr        	sta qscnt
00312B  3               
00312B  3  A9 B7        	lda #<sprtab 		; sprite table.
00312D  3  85 68        	sta z80_x
00312F  3  A9 37        	lda #>sprtab
003131  3  85 69        	sta z80_i
003133  3               bsort0:
003133  3  A0 00        	ldy #0
003135  3  B1 68        	lda (z80_ix),y 		; first sprite type.
003137  3  C9 FF        	cmp #255 		; is it switched off?
003139  3  F0 30        	beq swemp		; yes, may need to switch another in here.
00313B  3               
00313B  3  A0 11        	ldy #TABSIZ
00313D  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00313F  3  C9 FF        	cmp #255 		; is it enabled?
003141  3  F0 0A        	beq bsort2 		; no, nothing to swap.
003143  3               
003143  3  A0 14        	ldy #TABSIZ+3
003145  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
003147  3  A0 03        	ldy #3
003149  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
00314B  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
00314D  3               bsort2:
00314D  3  18           	clc
00314E  3  A5 68        	lda z80_x
003150  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003152  3  85 68        	sta z80_x
003154  3  90 02        	bcc :+
003156  3  E6 69        	inc z80_i
003158  3               :
003158  3  C6 rr        	dec qscnt
00315A  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
00315C  3  60           	rts
00315D  3               
00315D  3               ;qscnt:	.byte 0
00315D  3               
00315D  3               bsort1:
00315D  3  A0 11        	ldy #TABSIZ
00315F  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
003161  3  C9 FF        	cmp #255		; is it enabled?
003163  3  F0 E8        	beq bsort2		; no, nothing to swap.
003165  3  20 79 31     	jsr swspr		; swap positions.
003168  3  4C 4D 31     	jmp bsort2
00316B  3               swemp:
00316B  3  A0 11        	ldy #TABSIZ
00316D  3  B1 68        	lda (z80_ix),y		; next table entry.
00316F  3  C9 FF        	cmp #255		; is that one on?
003171  3  F0 DA        	beq bsort2		; no, nothing to swap.
003173  3  20 79 31     	jsr swspr		; swap positions.
003176  3  4C 4D 31     	jmp bsort2
003179  3               
003179  3               ; Swap sprites.
003179  3               
003179  3               swspr:
003179  3  A5 68        	lda z80_x		; table address
00317B  3  85 64        	sta z80_e		; copy to de pair.
00317D  3  85 66        	sta z80_l		; copy to hl pair.
00317F  3  A5 69        	lda z80_i
003181  3  85 67        	sta z80_h
003183  3  85 65        	sta z80_d
003185  3               
003185  3  18           	clc
003186  3  A5 66        	lda z80_l
003188  3  69 11        	adc #TABSIZ		; distance to second entry.
00318A  3  85 66        	sta z80_l
00318C  3  90 02        	bcc :+
00318E  3  E6 67        	inc z80_h
003190  3               :
003190  3  A9 11        	lda #TABSIZ		; bytes to swap.
003192  3  85 63        	sta z80_b
003194  3  A0 00        	ldy #0
003196  3               swspr0:
003196  3  B1 66        	lda (z80_hl),y		; fetch second byte.
003198  3  48           	pha
003199  3  B1 64        	lda (z80_de),y 		; fetch first byte.
00319B  3  91 66        	sta (z80_hl),y 		; copy to second.
00319D  3  68           	pla
00319E  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0031A0  3               
0031A0  3  E6 64        	inc z80_e 		; next byte.
0031A2  3  D0 02        	bne :+
0031A4  3  E6 65        	inc z80_d
0031A6  3               :
0031A6  3  E6 66        	inc z80_l 		; next byte.
0031A8  3  D0 02        	bne :+
0031AA  3  E6 67        	inc z80_h
0031AC  3               :
0031AC  3  C6 63        	dec z80_b
0031AE  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0031B0  3  60           	rts
0031B1  3               
0031B1  3               ;----------------------------------------------------
0031B1  3               ; Process sprites.
0031B1  3               ;----------------------------------------------------
0031B1  3               
0031B1  3               pspr:
0031B1  3  A9 0C        	lda #NUMSPR		; sprites to process.
0031B3  3  85 rr        	sta sprptr
0031B5  3               
0031B5  3  A9 B7        	lda #<sprtab 		; sprite table.
0031B7  3  85 68        	sta z80_x
0031B9  3  A9 37        	lda #>sprtab
0031BB  3  85 69        	sta z80_i
0031BD  3               pspr1:
0031BD  3  A0 00        	ldy #0
0031BF  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
0031C1  3  C9 09        	cmp #9 			; within range of sprite types?
0031C3  3  B0 03        	bcs :+
0031C5  3  20 D8 31     	jsr pspr2 		; yes, process this one.
0031C8  3               :
0031C8  3  18           	clc
0031C9  3  A5 68        	lda z80_x
0031CB  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0031CD  3  85 68        	sta z80_x
0031CF  3  90 02        	bcc :+
0031D1  3  E6 69        	inc z80_i		; next sprite.
0031D3  3               :
0031D3  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
0031D5  3  D0 E6        	bne pspr1
0031D7  3  60           	rts
0031D8  3               
0031D8  3               ;sprptr:	.byte 0
0031D8  3               
0031D8  3               pspr2:
0031D8  3  A5 68        	lda z80_x 		; store original sprite pointer.
0031DA  3  85 rr        	sta ogptr
0031DC  3  A5 69        	lda z80_i
0031DE  3  85 rr        	sta ogptr+1
0031E0  3  20 EC 31     	jsr pspr3		; do the routine.
0031E3  3               rtorg:
0031E3  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0031E5  3  85 68        	sta z80_x
0031E7  3  A5 rr        	lda ogptr+1
0031E9  3  85 69        	sta z80_i
0031EB  3               rtorg0:
0031EB  3  60           	rts
0031EC  3               
0031EC  3               pspr3:
0031EC  3  A9 21        	lda #<evtyp0		; sprite type events list.
0031EE  3  85 66        	sta z80_l
0031F0  3  A9 32        	lda #>evtyp0
0031F2  3  85 67        	sta z80_h
0031F4  3               pspr4:
0031F4  3  B1 68        	lda (z80_ix),y
0031F6  3  0A           	asl a			; double accumulator.
0031F7  3  18           	clc
0031F8  3  65 66        	adc z80_l
0031FA  3  85 66        	sta z80_l
0031FC  3  90 02        	bcc :+
0031FE  3  E6 67        	inc z80_h
003200  3               :
003200  3  B1 66        	lda (z80_hl),y
003202  3  85 64        	sta z80_e 		; copy to de.
003204  3  48           	pha
003205  3               
003205  3  E6 66        	inc z80_l 		; next byte of address.
003207  3  D0 02        	bne :+
003209  3  E6 67        	inc z80_h
00320B  3               :
00320B  3  B1 66        	lda (z80_hl),y 		; address high.
00320D  3  85 65        	sta z80_d
00320F  3               
00320F  3  48           	pha	 		; swap address into hl.
003210  3  A5 67        	lda z80_h
003212  3  85 65        	sta z80_d
003214  3  68           	pla
003215  3  85 67        	sta z80_h
003217  3  68           	pla
003218  3  85 66        	sta z80_l
00321A  3  A5 66        	lda z80_l
00321C  3  85 64        	sta z80_e
00321E  3               
00321E  3  6C 66 00     	jmp (z80_hl) 		; go there.
003221  3               
003221  3               ;ogptr:	.word 0			; original sprite pointer.
003221  3               
003221  3               ; Address of each sprite type's routine.
003221  3               
003221  3  B2 38        evtyp0:	.word evnt00
003223  3  90 39        evtyp1:	.word evnt01
003225  3  91 39        evtyp2:	.word evnt02
003227  3  92 39        evtyp3:	.word evnt03
003229  3  93 39        evtyp4:	.word evnt04
00322B  3  94 39        evtyp5:	.word evnt05
00322D  3  95 39        evtyp6:	.word evnt06
00322F  3  96 39        evtyp7:	.word evnt07
003231  3  97 39        evtyp8:	.word evnt08
003233  3               
003233  3               ;--------------------------------------------------------------
003233  3               ; Display sprites.
003233  3               ;
003233  3               ; Input:
003233  3               ;  IX = sprite table
003233  3               ;--------------------------------------------------------------
003233  3               
003233  3               dspr:
003233  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003235  3  85 rr        	sta sprcnt
003237  3               dspr0:
003237  3  A0 00        	ldy #0
003239  3  B1 68        	lda (z80_ix),y 		; get sprite type.
00323B  3  C9 FF        	cmp #255 		; is it enabled?
00323D  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00323F  3               dspr5:
00323F  3  A0 05        	ldy #5
003241  3  B1 68        	lda (z80_ix),y 		; new type.
003243  3  C9 FF        	cmp #255		; is it enabled?
003245  3  D0 76        	bne dspr3 		; yes, it needs drawing.
003247  3               dspr2:
003247  3  A0 05        	ldy #5
003249  3  B1 68        	lda (z80_ix),y 		; copy new type.
00324B  3  A0 00        	ldy #0
00324D  3  91 68        	sta (z80_ix),y
00324F  3  A0 06        	ldy #6
003251  3  B1 68        	lda (z80_ix),y 		; copy new image number.
003253  3  A0 01        	ldy #1
003255  3  91 68        	sta (z80_ix),y
003257  3  A0 07        	ldy #7
003259  3  B1 68        	lda (z80_ix),y 		; copy new frame.
00325B  3  A0 02        	ldy #2
00325D  3  91 68        	sta (z80_ix),y
00325F  3  A0 08        	ldy #8
003261  3  B1 68        	lda (z80_ix),y 		; copy new y.
003263  3  A0 03        	ldy #3
003265  3  91 68        	sta (z80_ix),y
003267  3  A0 09        	ldy #9
003269  3  B1 68        	lda (z80_ix),y 		; copy new x.
00326B  3  A0 04        	ldy #4
00326D  3  91 68        	sta (z80_ix),y
00326F  3               
00326F  3  18           	clc
003270  3  A5 68        	lda z80_x
003272  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
003274  3  85 68        	sta z80_x
003276  3  A5 69        	lda z80_i
003278  3  69 00        	adc #0
00327A  3  85 69        	sta z80_i 		; next sprite.
00327C  3  C6 rr        	dec sprcnt
00327E  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
003280  3  60           	rts
003281  3               dspr1:
003281  3  A0 05        	ldy #5
003283  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
003285  3  C9 FF        	cmp #255		; is this enabled?
003287  3  D0 06        	bne dspr4 		; yes, display both.
003289  3               dspr6:
003289  3  20 0B 40     	jsr sspria 		; show single sprite.
00328C  3  4C 47 32     	jmp dspr2
00328F  3               
00328F  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00328F  3               
00328F  3               dspr4:
00328F  3  A0 04        	ldy #4
003291  3  B1 68        	lda (z80_ix),y		; old x.
003293  3  A0 09        	ldy #9
003295  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
003297  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
003299  3               
003299  3  A0 03        	ldy #3
00329B  3  B1 68        	lda (z80_ix),y		; old y.
00329D  3  A0 08        	ldy #8
00329F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0032A1  3  D0 14        	bne dspr7		; they differ, need to redraw.
0032A3  3               
0032A3  3  A0 02        	ldy #2
0032A5  3  B1 68        	lda (z80_ix),y 		; old frame.
0032A7  3  A0 07        	ldy #7
0032A9  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0032AB  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
0032AD  3               
0032AD  3  A0 01        	ldy #1
0032AF  3  B1 68        	lda (z80_ix),y 		; old image.
0032B1  3  A0 06        	ldy #6
0032B3  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0032B5  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
0032B7  3               dspr7:
0032B7  3  20 2C 40     	jsr sspric 		; delete old sprite, draw new one simultaneously.
0032BA  3  4C 47 32     	jmp dspr2
0032BD  3               dspr3:
0032BD  3  20 26 40     	jsr ssprib 		; show single sprite.
0032C0  3  4C 47 32     	jmp dspr2
0032C3  3               
0032C3  3               ;sprcnt:	.byte 0
0032C3  3               
0032C3  3               ;-----------------------------------------
0032C3  3               ; Get sprite address calculations.
0032C3  3               ; gspran = new sprite, gsprad = old sprite.
0032C3  3               ;
0032C3  3               ; Input:
0032C3  3               ;  IX = sprite address
0032C3  3               ;-----------------------------------------
0032C3  3               
0032C3  3               gspran:
0032C3  3  A0 08        	ldy #8
0032C5  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
0032C7  3  85 rr        	sta dispy
0032C9  3  A0 09        	ldy #9
0032CB  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0032CD  3  85 rr        	sta dispx
0032CF  3  A0 06        	ldy #6
0032D1  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0032D3  3  20 E0 35     	jsr gfrm		; fetch start frame for this sprite.
0032D6  3               
0032D6  3  A0 00        	ldy #0
0032D8  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032DA  3  A0 07        	ldy #7
0032DC  3  18           	clc
0032DD  3  71 68        	adc (z80_ix),y 		; new add frame number.
0032DF  3  4C FE 32     	jmp gspra0
0032E2  3               
0032E2  3               ;-----------------------------------------
0032E2  3               ; Calculate old sprite address
0032E2  3               ;
0032E2  3               ; Input:
0032E2  3               ;  IX = sprite address
0032E2  3               ;
0032E2  3               ; Output:
0032E2  3               ;  B  = right byte mask
0032E2  3               ;  C  = left byte mask
0032E2  3               ;  DE = spriteframe address
0032E2  3               ;  scraddr = screenaddress(dispx,dispy)
0032E2  3               ;-----------------------------------------
0032E2  3               
0032E2  3               gsprad:
0032E2  3  A0 03        	ldy #3
0032E4  3  B1 68        	lda (z80_ix),y		; y coordinate.
0032E6  3  85 rr        	sta dispy
0032E8  3  A0 04        	ldy #4
0032EA  3  B1 68        	lda (z80_ix),y		; x coordinate.
0032EC  3  85 rr        	sta dispx
0032EE  3  A0 01        	ldy #1
0032F0  3  B1 68        	lda (z80_ix),y 		; sprite image.
0032F2  3  20 E0 35     	jsr gfrm 		; fetch start frame for this sprite.
0032F5  3               
0032F5  3               ; z80_hl = sprite framenr
0032F5  3               
0032F5  3  A0 00        	ldy #0
0032F7  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032F9  3               
0032F9  3               ; z80_ix+2 = current framenr
0032F9  3               
0032F9  3  A0 02        	ldy #2
0032FB  3  18           	clc
0032FC  3  71 68        	adc (z80_ix),y 		; add frame number.
0032FE  3               
0032FE  3               ; A = sprite framenr + current framenr
0032FE  3               ;
0032FE  3               ; framestart = z80_d/e = 120 * A (Normal 4 x 32 = 128)
0032FE  3               ; framestart = framestart + (x AND 1) * 60
0032FE  3               ; framestart = framestart + (reftable(dispy) * 20)
0032FE  3               
0032FE  3               gspra0:
0032FE  3               
0032FE  3               ; Calculate framestart = 120 * sprite image
0032FE  3               
0032FE  3  85 65        	sta z80_d
003300  3  85 rr        	sta tmp
003302  3  A9 00        	lda #0
003304  3  85 64        	sta z80_e
003306  3  85 rr        	sta tmp+1
003308  3               
003308  3  46 65        	lsr z80_d	; a * 128
00330A  3  66 64        	ror z80_e
00330C  3               
00330C  3  06 rr        	asl tmp		; a x 8
00330E  3  26 rr        	rol tmp+1
003310  3  06 rr        	asl tmp
003312  3  26 rr        	rol tmp+1
003314  3  06 rr        	asl tmp
003316  3  26 rr        	rol tmp+1
003318  3               
003318  3  38           	sec		; a*128 - a*8
003319  3  A5 64        	lda z80_e
00331B  3  E5 rr        	sbc tmp
00331D  3  85 64        	sta z80_e
00331F  3  A5 65        	lda z80_d
003321  3  E5 rr        	sbc tmp+1
003323  3  85 65        	sta z80_d
003325  3               
003325  3               ;.if bflag
003325  3               ;	lsr tmp1
003325  3               ;	ror tmp2
003325  3               ;	clc
003325  3               ;	lda tmp2
003325  3               ;	adc z80_e
003325  3               ;	sta z80_e
003325  3               ;	lda tmp1
003325  3               ;	adc z80_d
003325  3               ;	sta z80_d
003325  3               ;.endif
003325  3               
003325  3               ; Add spritedata address
003325  3               
003325  3  18           	clc 			; address of play sprites.
003326  3  A5 64        	lda z80_e
003328  3  69 EE        	adc #<sprgfx
00332A  3  85 64        	sta z80_e
00332C  3  A5 65        	lda z80_d
00332E  3  69 39        	adc #>sprgfx
003330  3  85 65        	sta z80_d
003332  3               
003332  3               ; Check for x-shift
003332  3               
003332  3  A5 rr        	lda dispx 		; x coordinate.
003334  3  29 01        	and #1
003336  3  F0 0B        	beq chk_y_shift
003338  3  18           	clc			; Point to odd frame
003339  3  A5 64        	lda z80_e
00333B  3  69 3C        	adc #60
00333D  3  85 64        	sta z80_e
00333F  3  90 02        	bcc :+
003341  3  E6 65        	inc z80_d
003343  3               :
003343  3               ; SCheck for y-shift
003343  3               
003343  3               chk_y_shift:
003343  3  A6 rr        	ldx dispy
003345  3  BD 4A DF     	lda V_SPR_PTR,x
003348  3  18           	clc
003349  3  65 64        	adc z80_e
00334B  3  85 64        	sta z80_e
00334D  3  90 02        	bcc :+
00334F  3  E6 65        	inc z80_d
003351  3               :
003351  3               
003351  3               ;------------------------------------------------------------------
003351  3               ; Drop into screen address routine.
003351  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003351  3               ;------------------------------------------------------------------
003351  3               
003351  3               ; Check for bottom of screen
003351  3               
003351  3               scadd:
003351  3  A6 rr        	ldx dispy
003353  3  E0 4C        	cpx #76
003355  3  90 02        	bcc :+
003357  3  A2 4C        	ldx #76
003359  3               :
003359  3               
003359  3  A5 rr        	lda dispx
00335B  3  4A           	lsr a
00335C  3  18           	clc
00335D  3  7D 00 DC     	adc SCADTB_lb,x
003360  3  85 rr        	sta scraddr
003362  3  BD 00 DD     	lda SCADTB_hb,x
003365  3  69 00        	adc #0
003367  3  85 rr        	sta scraddr+1
003369  3  60           	rts
00336A  3               
00336A  3               spmask:
00336A  3  FF 00        	.byte $ff,$00
00336C  3  6A 35        	.byte $6a,$35
00336E  3               
00336E  3  00           tmp1:	.byte 0
00336F  3  00           tmp2:	.byte 0
003370  3               
003370  3               
003370  3               ;----------------------------------------------------------------------
003370  3               ; Line drawn, now work out next target address.
003370  3               ;----------------------------------------------------------------------
003370  3               
003370  3               nline:
003370  3  18           	clc
003371  3  A5 rr        	lda scraddr 		; get low byte of address.
003373  3  69 28        	adc #ScrWidth
003375  3  85 rr        	sta scraddr 		; new low byte of address.
003377  3  90 02        	bcc :+
003379  3  E6 rr        	inc scraddr+1 		; new high byte of address.
00337B  3               :
00337B  3  60           	rts
00337C  3               
00337C  3               ;-----------------------------------------------------------
00337C  3               ; Animates a sprite.
00337C  3               ;
00337C  3               ; Input:
00337C  3               ;  IX = sprite address
00337C  3               ;  HL = last sprite address
00337C  3               ;-----------------------------------------------------------
00337C  3               
00337C  3               animsp:
00337C  3  25 rr        	and frmno
00337E  3  F0 01        	beq :+
003380  3  60           	rts
003381  3               :
003381  3  A0 06        	ldy #6
003383  3  B1 68        	lda (z80_ix),y		; sprite image
003385  3  20 E0 35     	jsr gfrm		; get frame data.
003388  3               
003388  3  E6 66        	inc z80_l		; point to frames.
00338A  3  D0 02        	bne :+
00338C  3  E6 67        	inc z80_h
00338E  3               :
00338E  3  A0 07        	ldy #7
003390  3  B1 68        	lda (z80_ix),y		; sprite frame.
003392  3  18           	clc
003393  3  69 01        	adc #1			; next one along.
003395  3  A0 00        	ldy #0
003397  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
003399  3  90 02        	bcc anims0		; no, not yet.
00339B  3  A9 00        	lda #0			; start at first frame.
00339D  3               anims0:
00339D  3  A0 07        	ldy #7
00339F  3  91 68        	sta (z80_ix),y		; new frame.
0033A1  3  60           	rts
0033A2  3               
0033A2  3               ;--------------------------------------------------------------
0033A2  3               ; Animate back
0033A2  3               ;
0033A2  3               ; Input:
0033A2  3               ;  IX = sprite address
0033A2  3               ;  HL = last sprite address
0033A2  3               ;--------------------------------------------------------------
0033A2  3               
0033A2  3               animbk:
0033A2  3  25 rr        	and frmno
0033A4  3  F0 01        	beq :+
0033A6  3  60           	rts
0033A7  3               :
0033A7  3  A0 06        	ldy #6
0033A9  3  B1 68        	lda (z80_ix),y		; sprite image.
0033AB  3  20 E0 35     	jsr gfrm		; get frame data.
0033AE  3               
0033AE  3  E6 66        	inc z80_l 		; point to frames.
0033B0  3  D0 02        	bne :+
0033B2  3  E6 67        	inc z80_h
0033B4  3               :
0033B4  3  A0 07        	ldy #7
0033B6  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0033B8  3  F0 03        	beq :+
0033BA  3  4C C1 33     	jmp rtanb0 		; yes, start at end.
0033BD  3               :
0033BD  3  A0 00        	ldy #0
0033BF  3  B1 66        	lda (z80_hl),y 		; last sprite.
0033C1  3               rtanb0:
0033C1  3  38           	sec
0033C2  3  E9 01        	sbc #1			; next one along.
0033C4  3  4C 9D 33     	jmp anims0		; set new frame.
0033C7  3               
0033C7  3               ;--------------------------------------------------------------
0033C7  3               ; Check for collision with other sprite, strict enforcement.
0033C7  3               ;
0033C7  3               ; Input:
0033C7  3               ;  b		= sprite to test for
0033C7  3               ;  ix		= current sprite pointer
0033C7  3               ;
0033C7  3               ; global:	b
0033C7  3               ; local:	x,y,hl,de,skptr
0033C7  3               ; calls:	-
0033C7  3               ;--------------------------------------------------------------
0033C7  3               
0033C7  3               sktyp:
0033C7  3  A9 B7        	lda #<sprtab				; sprite table.
0033C9  3  85 66        	sta z80_l
0033CB  3  A9 37        	lda #>sprtab
0033CD  3  85 67        	sta z80_h
0033CF  3               numsp2:
0033CF  3  A9 0C        	lda #NUMSPR				; number of sprites.
0033D1  3  85 rr        	sta sktptr
0033D3  3               sktyp0:
0033D3  3  A5 66        	lda z80_l 				; store pointer to sprite.
0033D5  3  85 rr        	sta skptr
0033D7  3  A5 67        	lda z80_h
0033D9  3  85 rr        	sta skptr+1
0033DB  3               
0033DB  3  A0 00        	ldy #0
0033DD  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0033DF  3  C5 63        	cmp z80_b				; is it the type we seek?
0033E1  3  F0 1D        	beq coltyp				; yes, we can use this one.
0033E3  3               sktyp1:
0033E3  3  18           	clc
0033E4  3  A5 rr        	lda skptr				; retrieve sprite pointer.
0033E6  3  69 11        	adc #TABSIZ				; size of each entry.
0033E8  3  85 66        	sta z80_l
0033EA  3  A5 rr        	lda skptr+1
0033EC  3  69 00        	adc #0
0033EE  3  85 67        	sta z80_h
0033F0  3  C6 rr        	dec sktptr				; one less iteration.
0033F2  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0033F4  3  A9 00        	lda #0					; default to ROM address - no sprite.
0033F6  3  85 66        	sta z80_l
0033F8  3  85 67        	sta z80_h
0033FA  3  85 rr        	sta skptr				; store pointer to sprite.
0033FC  3  85 rr        	sta skptr+1
0033FE  3               
0033FE  3  18           	clc					; don't return with zero flag set.
0033FF  3  60           	rts 					; didn't find one.
003400  3               
003400  3               coltyp:
003400  3  A0 00        	ldy #0
003402  3  B1 68        	lda (z80_ix),y				; current sprite type.
003404  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003406  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
003408  3               colty0:
003408  3  A0 09        	ldy #9					; distance to x position in table.
00340A  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00340C  3  85 64        	sta z80_e
00340E  3  88           	dey
00340F  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
003411  3  85 65        	sta z80_d
003413  3               
003413  3               ; Drop into collision detection.
003413  3               
003413  3               colc16:
003413  3  A0 09        	ldy #9
003415  3  B1 68        	lda (z80_ix),y			 	; x coord.
003417  3  38           	sec					; subtract x.
003418  3  E5 64        	sbc z80_e
00341A  3  B0 05        	bcs  colc1a 				; result is positive.
00341C  3  49 FF        	eor #$ff				; make negative positive.
00341E  3  18           	clc
00341F  3  69 01        	adc #1
003421  3               colc1a:
003421  3  C9 08        	cmp #SPR_WID				; within x range?
003423  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003425  3  85 62        	sta z80_c				; store difference.
003427  3               
003427  3  A0 08        	ldy #8
003429  3  B1 68        	lda (z80_ix),y				; y coord.
00342B  3  38           	sec
00342C  3  E5 65        	sbc z80_d				; subtract y.
00342E  3  B0 05        	bcs colc1b				; result is positive.
003430  3  49 FF        	eor #$ff				; make negative positive.
003432  3  18           	clc
003433  3  69 01        	adc #1
003435  3               colc1b:
003435  3  C9 09        	cmp #SPR_HGT				; within y range?
003437  3  B0 AA        	bcs sktyp1 				; no - they've missed.
003439  3  18           	clc					; add x difference.
00343A  3  65 62        	adc z80_c
00343C  3  C9 0D        	cmp #SPR_HGT+SPR_WID-4			; only 4 corner pixels touching?
00343E  3  B0 02        	bcs :+
003440  3  38           	sec
003441  3  60           	rts 					; carry set if there's a collision.
003442  3               :
003442  3  4C E3 33     	jmp sktyp1				; try next sprite in table.
003445  3               colty1:
003445  3  A5 68        	lda z80_x  				; compare the two.
003447  3  C5 66        	cmp z80_l
003449  3  D0 09        	bne end_col
00344B  3  A5 69        	lda z80_i
00344D  3  C5 67        	cmp z80_h
00344F  3  D0 03        	bne end_col
003451  3  4C E3 33     	jmp sktyp1 				; addresses are identical.
003454  3               end_col:
003454  3  4C 08 34     	jmp colty0
003457  3               
003457  3               ;-----------------------------------------------------------
003457  3               ; Display number, left aligned
003457  3               ;
003457  3               ; Input:
003457  3               ;  a		= number
003457  3               ;
003457  3               ; global:	-
003457  3               ; local:	a,y,bc,hl,displ0
003457  3               ; calls:	num2ch,dmsg3
003457  3               ;-----------------------------------------------------------
003457  3               
003457  3               disply:
003457  3  85 61        	sta z80_a
003459  3  A9 7F        	lda #<displ0				; display workspace.
00345B  3  85 62        	sta z80_c
00345D  3  A9 34        	lda #>displ0
00345F  3  85 63        	sta z80_b
003461  3  A5 61        	lda z80_a
003463  3  20 C9 29     	jsr num2ch				; convert accumulator to string.
003466  3               displ1:
003466  3  C6 62        	dec z80_c				; back one character.
003468  3  D0 02        	bne :+
00346A  3  C6 63        	dec z80_b
00346C  3               :
00346C  3  A0 00        	ldy #0
00346E  3  B1 62        	lda (z80_bc),y				; fetch digit.
003470  3  09 80        	ora #128				; insert end marker.
003472  3  91 62        	sta (z80_bc),y				; new value.
003474  3               
003474  3  A9 7F        	lda #<displ0				; display space.
003476  3  85 66        	sta z80_l
003478  3  A9 34        	lda #>displ0
00347A  3  85 67        	sta z80_h
00347C  3               
00347C  3  4C 07 30     	jmp dmsg3				; display the string.
00347F  3               
00347F  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003483  3               
003483  3               ;----------------------------------------------------------------
003483  3               ; Initialise screen.
003483  3               ;
003483  3               ; global:	roomtb,scno
003483  3               ; local:	-
003483  3               ; calls:	tstcs
003483  3               ;----------------------------------------------------------------
003483  3               
003483  3               initsc:
003483  3  AD 94 38     	lda roomtb 			; whereabouts in the map are we?
003486  3  20 90 34     	jsr tstsc 			; find displacement.
003489  3  C9 FF        	cmp #255 			; is it valid?
00348B  3  F0 02        	beq init_end 			; no, it's rubbish.
00348D  3  85 rr        	sta scno			; store new room number.
00348F  3               init_end:
00348F  3  60           	rts
003490  3               
003490  3               ;----------------------------------------------------------------
003490  3               ; Test screen.
003490  3               ;
003490  3               ; global:	-
003490  3               ; local:	x
003490  3               ; calls:	-
003490  3               ;----------------------------------------------------------------
003490  3               
003490  3               tstsc:
003490  3  85 rr        	sta tmproom
003492  3  18           	clc
003493  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
003495  3  AA           	tax 				; add displacement to map data.
003496  3  BD A8 38     	lda mapdat-MAPWID,x 		; find room number there.
003499  3  60           	rts
00349A  3               
00349A  3               ;tmproom:	.byte 0
00349A  3               
00349A  3               ;--------------------------
00349A  3               ; Screen left.
00349A  3               ;--------------------------
00349A  3               
00349A  3               scrl:
00349A  3  AD 94 38     	lda roomtb 			; present room table pointer.
00349D  3  38           	sec
00349E  3  E9 01        	sbc #1				; room left.
0034A0  3               scrl0:
0034A0  3  20 90 34     	jsr tstsc			; test screen.
0034A3  3  C9 FF        	cmp #255			; is there a screen this way?
0034A5  3  D0 01        	bne :+
0034A7  3  60           	rts				; no, return to loop.
0034A8  3               :
0034A8  3  A5 rr        	lda tmproom			; restore room displacement.
0034AA  3  8D 94 38     	sta roomtb			; new room table position.
0034AD  3               scrl1:
0034AD  3  20 83 34     	jsr initsc 			; set new screen.
0034B0  3  A9 02        	lda #2
0034B2  3  85 rr        	sta restfl 			; set it.
0034B4  3  60           	rts
0034B5  3               scrr:
0034B5  3  AD 94 38     	lda roomtb 			; room table pointer.
0034B8  3  18           	clc
0034B9  3  69 01        	adc #1				; room right.
0034BB  3  4C A0 34     	jmp scrl0
0034BE  3               scru:
0034BE  3  AD 94 38     	lda roomtb 			; room table pointer.
0034C1  3  38           	sec
0034C2  3  E9 03        	sbc #MAPWID 			; room up.
0034C4  3  4C A0 34     	jmp scrl0
0034C7  3               scrd:
0034C7  3  AD 94 38     	lda roomtb 			; room table pointer.
0034CA  3  18           	clc
0034CB  3  69 03        	adc #MAPWID 			; room down.
0034CD  3  4C A0 34     	jmp scrl0
0034D0  3               
0034D0  3               ;-----------------------------------------
0034D0  3               ; Jump to new screen.
0034D0  3               ;-----------------------------------------
0034D0  3               
0034D0  3               nwscr:
0034D0  3  A2 00        	ldx #0				; start of map data.
0034D2  3               nwscr0:
0034D2  3  DD AB 38     	cmp mapdat,x
0034D5  3  F0 06        	beq nwscr1			; have we found a match for screen?
0034D7  3  E8           	inx 				; next room.
0034D8  3  E0 50        	cpx #80				; zero room count, 80 to search.
0034DA  3  D0 F6        	bne nwscr0			; keep looking.
0034DC  3  60           	rts
0034DD  3               nwscr1:
0034DD  3  8E 94 38     	stx roomtb			; set the map position.
0034E0  3  4C AD 34     	jmp scrl1			; draw new room.
0034E3  3               
0034E3  3               
0034E3  3               ;----------------------------------------------------------
0034E3  3               ; Gravity processing.
0034E3  3               ;----------------------------------------------------------
0034E3  3               
0034E3  3               grav:
0034E3  3  A0 0D        	ldy #13
0034E5  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0034E7  3  85 66        	sta z80_l
0034E9  3  A0 0E        	ldy #14
0034EB  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0034ED  3  85 67        	sta z80_h
0034EF  3  05 66        	ora z80_l			; merge in low byte.
0034F1  3  D0 01        	bne :+
0034F3  3  60           	rts				; if neither is set, we're not in the air.
0034F4  3               :
0034F4  3  A0 00        	ldy #0
0034F6  3  B1 66        	lda (z80_hl),y			; pixels to move.
0034F8  3  85 61        	sta z80_a
0034FA  3  C9 63        	cmp #99				; reached the end?
0034FC  3  D0 0C        	bne grav0			; no, continue.
0034FE  3               grav2:
0034FE  3  C6 66        	dec z80_l			; go back to previous value.
003500  3  C9 FF        	cmp #$ff
003502  3  D0 02        	bne :+
003504  3  C6 67        	dec z80_h
003506  3               :
003506  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003508  3  85 61        	sta z80_a
00350A  3               grav0:
00350A  3  E6 66        	inc z80_l			; point to next table entry.
00350C  3  D0 02        	bne :+
00350E  3  E6 67        	inc z80_h
003510  3               :
003510  3  A5 66        	lda z80_l
003512  3  A0 0D        	ldy #13
003514  3  91 68        	sta (z80_ix),y			; store new pointer low.
003516  3  A5 67        	lda z80_h
003518  3  A0 0E        	ldy #14
00351A  3  91 68        	sta (z80_ix),y			; store new pointer high.
00351C  3               grav1:
00351C  3  A5 61        	lda z80_a
00351E  3  D0 01        	bne :+				; any movement required?
003520  3  60           	rts				; no, not this time.
003521  3               :
003521  3  A5 61        	lda z80_a
003523  3  C9 80        	cmp #128			; is it up or down?
003525  3  B0 15        	bcs gravu			; it's up.
003527  3               gravd:
003527  3  85 63        	sta z80_b			; set pixels to move.
003529  3               gravd0:
003529  3  20 34 2E     	jsr cangd			; can we go down?
00352C  3  D0 28        	bne gravst			; can't move down, so stop.
00352E  3  A0 08        	ldy #8
003530  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003532  3  18           	clc
003533  3  69 01        	adc #1
003535  3  91 68        	sta (z80_ix),y
003537  3  C6 63        	dec z80_b
003539  3  D0 EE        	bne gravd0
00353B  3  60           	rts
00353C  3               gravu:
00353C  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00353E  3  18           	clc
00353F  3  69 01        	adc #1
003541  3  85 63        	sta z80_b			; set pixels to move.
003543  3               gravu0:
003543  3  20 E7 2D     	jsr cangu			; can we go up?
003546  3  D0 6E        	bne ifalls			; can't move up, go down next.
003548  3  A0 08        	ldy #8
00354A  3  B1 68        	lda (z80_ix),y
00354C  3  38           	sec
00354D  3  E9 01        	sbc #1
00354F  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003551  3  C6 63        	dec z80_b
003553  3  D0 EE        	bne gravu0
003555  3  60           	rts
003556  3               gravst:
003556  3  A0 0D        	ldy #13
003558  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00355A  3  85 66        	sta z80_l
00355C  3  A0 0E        	ldy #14
00355E  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003560  3  85 67        	sta z80_h
003562  3               
003562  3  A9 00        	lda #0				; null value in pointer.
003564  3  A0 0D        	ldy #13
003566  3  91 68        	sta (z80_ix),y			; store new pointer low.
003568  3  C8           	iny
003569  3  91 68        	sta (z80_ix),y			; store new pointer high.
00356B  3               
00356B  3  A0 00        	ldy #0
00356D  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00356F  3  C9 63        	cmp #99				; is it the end marker?
003571  3               evftf:
003571  3  F0 01        	beq :+				; yes, fallen too far.
003573  3  60           	rts
003574  3               :
003574  3  4C A5 39     	jmp evnt15			; EVENT FELLTOOFAR
003577  3               
003577  3               ;------------------------------------------------
003577  3               ; Initiate fall check.
003577  3               ;------------------------------------------------
003577  3               
003577  3               ifall:
003577  3  A0 0D        	ldy #13
003579  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
00357B  3  85 66        	sta z80_l
00357D  3  A0 0E        	ldy #14
00357F  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
003581  3  85 67        	sta z80_h			; high byte in accumulator.
003583  3  05 66        	ora z80_l			; merge in low byte.
003585  3  F0 01        	beq :+
003587  3  60           	rts				; if either is set, we're already in the air.
003588  3               :
003588  3  A0 09        	ldy #9
00358A  3  B1 68        	lda (z80_ix),y			; y coordinate.
00358C  3  85 rr        	sta dispx
00358E  3  A0 08        	ldy #8
003590  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003592  3  18           	clc
003593  3               numsp7:
003593  3  69 09        	adc #SPR_HGT			; add 16 pixels.
003595  3  85 rr        	sta dispy			; set up test coordinates.
003597  3  20 79 2F     	jsr tstbl			; get map address.
00359A  3  20 DF 2E     	jsr plchk			; block, platform check.
00359D  3  F0 01        	beq :+
00359F  3  60           	rts				; it's solid, don't fall.
0035A0  3               :
0035A0  3  E6 rr        	inc bufaddr			; look right one cell.
0035A2  3  20 DF 2E     	jsr plchk			; block, platform check.
0035A5  3  F0 01        	beq :+
0035A7  3  60           	rts				; it's solid, don't fall.
0035A8  3               :
0035A8  3  A5 rr        	lda dispx			; y coordinate.
0035AA  3  29 07        	and #7				; position straddling block cells.
0035AC  3  F0 08        	beq ifalls			; no more checks needed.
0035AE  3  E6 rr        	inc bufaddr			; look to third cell.
0035B0  3  20 DF 2E     	jsr plchk			; block, platform check.
0035B3  3  F0 01        	beq :+
0035B5  3  60           	rts				; it's solid, don't fall.
0035B6  3               :
0035B6  3               ifalls:
0035B6  3  A9 4F        	lda #<jtab			; jump table start.
0035B8  3  85 66        	sta z80_l
0035BA  3  A9 3E        	lda #>jtab
0035BC  3  85 67        	sta z80_h
0035BE  3               ifal0:
0035BE  3  E6 66        	inc z80_l			; point to next value.
0035C0  3  D0 02        	bne :+
0035C2  3  E6 67        	inc z80_h
0035C4  3               :
0035C4  3  A0 00        	ldy #0
0035C6  3  B1 66        	lda (z80_hl),y			; fetch value.
0035C8  3  F0 F4        	beq ifal0			; no, get next value.
0035CA  3  C9 63        	cmp #99				; reached end of table?
0035CC  3  D0 01        	bne :+
0035CE  3  60           	rts				; yes, don't fall.
0035CF  3               :
0035CF  3  C9 80        	cmp #128			; is it going up?
0035D1  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0035D3  3               
0035D3  3  A0 0D        	ldy #13
0035D5  3  A5 66        	lda z80_l
0035D7  3  91 68        	sta (z80_ix),y 			; set jump low.
0035D9  3  A0 0E        	ldy #14
0035DB  3  A5 67        	lda z80_h
0035DD  3  91 68        	sta (z80_ix),y 			; set jump high.
0035DF  3  60           	rts
0035E0  3               
0035E0  3               
0035E0  3               ;----------------------------------------------------
0035E0  3               ; Get frame data for a particular sprite.
0035E0  3               ; Input:
0035E0  3               ;  a		= framenumer
0035E0  3               ; Output:
0035E0  3               ;  hl		= frame address
0035E0  3               ;
0035E0  3               ; global:	hl,frmptr
0035E0  3               ; local:	-
0035E0  3               ; calls:	-
0035E0  3               ;----------------------------------------------------
0035E0  3               
0035E0  3               gfrm:
0035E0  3  0A           	asl a	 		 	; multiple of 2.
0035E1  3  18           	clc
0035E2  3  6D 17 28     	adc frmptr 			; frames used by game.
0035E5  3  85 66        	sta z80_l
0035E7  3  AD 18 28     	lda frmptr+1
0035EA  3  69 00        	adc #0
0035EC  3  85 67        	sta z80_h 			; point to frame start.
0035EE  3  60           	rts
0035EF  3               
0035EF  3               ;----------------------------------------------------
0035EF  3               ; Find sprite list for current room.
0035EF  3               ;
0035EF  3               ; global:	hl
0035EF  3               ; local:	x,y
0035EF  3               ; calls:	-
0035EF  3               ;----------------------------------------------------
0035EF  3               
0035EF  3               sprlst:
0035EF  3  A9 38        	lda #<nmedat 			; list of enemy sprites.
0035F1  3  85 66        	sta z80_l
0035F3  3  A9 3B        	lda #>nmedat
0035F5  3  85 67        	sta z80_h
0035F7  3  A6 rr        	ldx scno 			; screen number.
0035F9  3  D0 01        	bne sprls2 			; is it the first screen?
0035FB  3  60           	rts 				; yes, don't need to search data.
0035FC  3               sprls2:
0035FC  3  A0 00        	ldy #0
0035FE  3               sprls1:
0035FE  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003600  3  C9 FF        	cmp #255			; is it an end marker?
003602  3  F0 0E        	beq sprls0 			; yes, end of this room.
003604  3               
003604  3  18           	clc 				; point to next sprite in list.
003605  3  A5 66        	lda z80_l
003607  3  69 04        	adc #NMESIZ
003609  3  85 66        	sta z80_l
00360B  3  90 02        	bcc :+
00360D  3  E6 67        	inc z80_h
00360F  3               :
00360F  3  4C FE 35     	jmp sprls1 			; continue until end of room.
003612  3               sprls0:
003612  3  E6 66        	inc z80_l 			; point to start of next screen.s
003614  3  D0 02        	bne :+
003616  3  E6 67        	inc z80_h
003618  3               :
003618  3  CA           	dex
003619  3  D0 E3        	bne sprls1 			; continue until room found.
00361B  3  60           	rts
00361C  3               
00361C  3               
00361C  3               ;----------------------------------------------------
00361C  3               ; Clear all but a single player sprite.
00361C  3               ;
00361C  3               ; global:	-
00361C  3               ; local:	x,y,ix
00361C  3               ; calls:	-
00361C  3               ;----------------------------------------------------
00361C  3               
00361C  3               nspr:
00361C  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00361E  3  85 rr        	sta sprcnt
003620  3  A9 B7        	lda #<sprtab 			; sprite table.
003622  3  85 68        	sta z80_x
003624  3  A9 37        	lda #>sprtab
003626  3  85 69        	sta z80_i
003628  3               nspr0:
003628  3  A0 00        	ldy #0 				; fetch sprite type.
00362A  3  B1 68        	lda (z80_ix),y 			; is it a player?
00362C  3  F0 1A        	beq nspr1 			; yes, keep this one.
00362E  3               
00362E  3  A9 FF        	lda #255
003630  3  A0 00        	ldy #0 				; fetch sprite type.
003632  3  91 68        	sta (z80_ix),y 			; delete sprite.
003634  3  A0 05        	ldy #5
003636  3  91 68        	sta (z80_ix),y 			; remove next type.
003638  3               
003638  3  18           	clc	 			; next sprite.
003639  3  A5 68        	lda z80_x
00363B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00363D  3  85 68        	sta z80_x
00363F  3  90 02        	bcc :+
003641  3  E6 69        	inc z80_i
003643  3               :
003643  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003645  3  D0 E1        	bne nspr0
003647  3  60           	rts
003648  3               nspr1:
003648  3  A9 FF        	lda #255
00364A  3  A0 00        	ldy #0
00364C  3  91 68        	sta (z80_ix),y 			; delete sprite.
00364E  3               
00364E  3  18           	clc	 			; point to next sprite.
00364F  3  A5 68        	lda z80_x
003651  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003653  3  85 68        	sta z80_x
003655  3  90 02        	bcc :+
003657  3  E6 69        	inc z80_i
003659  3               :
003659  3  C6 rr        	dec sprcnt	 			; one less to do.
00365B  3  D0 01        	bne nspr2
00365D  3  60           	rts
00365E  3               nspr2:
00365E  3  A9 FF        	lda #255
003660  3  A0 00        	ldy #0
003662  3  91 68        	sta (z80_ix),y 			; delete sprite.
003664  3  A0 05        	ldy #5
003666  3  91 68        	sta (z80_ix),y 			; remove next type.
003668  3               
003668  3  18           	clc	 			; next sprite.
003669  3  A5 68        	lda z80_x
00366B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00366D  3  85 68        	sta z80_x
00366F  3  90 02        	bcc :+
003671  3  E6 69        	inc z80_i
003673  3               :
003673  3  C6 rr        	dec sprcnt	 			; one less space in table.
003675  3  D0 E7        	bne nspr2
003677  3  60           	rts
003678  3               
003678  3               ;----------------------------------------------------------
003678  3               ; Two initialisation routines.
003678  3               ; Initialise sprites - copy everything from list to table.
003678  3               ;
003678  3               ; global:	-
003678  3               ; local:	x,y,ix
003678  3               ; calls:	cpsp
003678  3               ;----------------------------------------------------------
003678  3               
003678  3               ispr:
003678  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00367A  3  85 rr        	sta sprcnt
00367C  3  A9 B7        	lda #<sprtab			; sprite table.
00367E  3  85 68        	sta z80_x
003680  3  A9 37        	lda #>sprtab
003682  3  85 69        	sta z80_i
003684  3               ispr2:
003684  3  A0 00        	ldy #0
003686  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003688  3  C9 FF        	cmp #255 			; is it an end marker?
00368A  3  D0 01        	bne :+
00368C  3  60           	rts 				; yes, no more to do.
00368D  3               :
00368D  3               ispr1:
00368D  3  A0 00        	ldy #0
00368F  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003691  3  C9 FF        	cmp #255 			; is it enabled yet?
003693  3  D0 08        	bne ispr4			; yes, try another slot.
003695  3               
003695  3  A0 05        	ldy #5
003697  3  B1 68        	lda (z80_ix),y		 	; next type.
003699  3  C9 FF        	cmp #255 			; is it enabled yet?
00369B  3  F0 10        	beq ispr3 			; no, process this one.
00369D  3               ispr4:
00369D  3  18           	clc 				; next sprite.
00369E  3  A5 68        	lda z80_x
0036A0  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0036A2  3  85 68        	sta z80_x
0036A4  3  90 02        	bcc :+
0036A6  3  E6 69        	inc z80_i
0036A8  3               :
0036A8  3  C6 rr        	dec sprcnt
0036AA  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0036AC  3  60           	rts  				; no more room in table.
0036AD  3               ispr3:
0036AD  3  20 00 37     	jsr cpsp			; initialise a sprite.
0036B0  3  C6 rr        	dec sprcnt			; one less space in the table.
0036B2  3  D0 D0        	bne ispr2
0036B4  3  60           	rts
0036B5  3               
0036B5  3               
0036B5  3               ;-----------------------------------------------------------------------
0036B5  3               ; Initialise sprites - but not player, we're keeping the old one.
0036B5  3               ;
0036B5  3               ; global:	-
0036B5  3               ; local:	x,y,ix
0036B5  3               ; calls:	cpsp
0036B5  3               ;-----------------------------------------------------------------------
0036B5  3               
0036B5  3               kspr:
0036B5  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0036B7  3  A9 B7        	lda #<sprtab 			; sprite table.
0036B9  3  85 68        	sta z80_x
0036BB  3  A9 37        	lda #>sprtab
0036BD  3  85 69        	sta z80_i
0036BF  3               kspr2:
0036BF  3  A0 00        	ldy #0
0036C1  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0036C3  3  C9 FF        	cmp #255 			; is it an end marker?
0036C5  3  D0 01        	bne :+
0036C7  3  60           	rts 				; yes, no more to do.
0036C8  3               :
0036C8  3  C9 00        	cmp #0
0036CA  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0036CC  3               
0036CC  3  18           	clc 				; next sprite.
0036CD  3  A5 66        	lda z80_l
0036CF  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0036D1  3  85 66        	sta z80_l
0036D3  3  90 02        	bcc :+
0036D5  3  E6 67        	inc z80_h
0036D7  3               :
0036D7  3  4C BF 36     	jmp kspr2
0036DA  3               kspr1:
0036DA  3  A0 00        	ldy #0 				; fetch sprite type.
0036DC  3  B1 68        	lda (z80_ix),y
0036DE  3  C9 FF        	cmp #255 			; is it enabled yet?
0036E0  3  D0 08        	bne kspr4 			; yes, try another slot.
0036E2  3               
0036E2  3  A0 05        	ldy #5 				; next type.
0036E4  3  B1 68        	lda (z80_ix),y
0036E6  3  C9 FF        	cmp #255 			; is it enabled yet?
0036E8  3  F0 0F        	beq kspr3 			; no, process this one.
0036EA  3               kspr4:
0036EA  3  18           	clc 				; next sprite.
0036EB  3  A5 68        	lda z80_x
0036ED  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0036EF  3  85 68        	sta z80_x
0036F1  3  90 02        	bcc :+
0036F3  3  E6 69        	inc z80_i
0036F5  3               :
0036F5  3  CA           	dex	 			; repeat for remaining sprites.
0036F6  3  D0 E2        	bne kspr1
0036F8  3  60           	rts  				; no more room in table.
0036F9  3               kspr3:
0036F9  3  20 00 37     	jsr cpsp 			; copy sprite to table.
0036FC  3  CA           	dex	 			; one less space in the table.
0036FD  3  D0 C0        	bne kspr2
0036FF  3  60           	rts
003700  3               
003700  3               ;----------------------------------------------
003700  3               ; Copy sprite from list to table.
003700  3               ;
003700  3               ; global:	hl,ix
003700  3               ; local:	y
003700  3               ; calls:	evnt09
003700  3               ;----------------------------------------------
003700  3               
003700  3               cpsp:
003700  3  A0 00        	ldy #0				; fetch byte from table.
003702  3  B1 66        	lda (z80_hl),y
003704  3  91 68        	sta (z80_ix),y			; set up type.
003706  3  A0 05        	ldy #PAM1ST
003708  3  91 68        	sta (z80_ix),y 			; set up type.
00370A  3               
00370A  3  E6 66        	inc z80_l 			; move to next byte.
00370C  3  D0 02        	bne :+
00370E  3  E6 67        	inc z80_h
003710  3               :
003710  3  A0 00        	ldy #0 				; fetch byte from table.
003712  3  B1 66        	lda (z80_hl),y
003714  3  A0 06        	ldy #6
003716  3  91 68        	sta (z80_ix),y			; set up image.
003718  3               
003718  3  E6 66        	inc z80_l 			; move to next byte.
00371A  3  D0 02        	bne :+
00371C  3  E6 67        	inc z80_h
00371E  3               :
00371E  3  A0 00        	ldy #0
003720  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003722  3  A0 08        	ldy #8
003724  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003726  3               
003726  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003728  3  A0 03        	ldy #3
00372A  3  91 68        	sta (z80_ix),y
00372C  3               
00372C  3  E6 66        	inc z80_l 			; move to next byte.
00372E  3  D0 02        	bne :+
003730  3  E6 67        	inc z80_h
003732  3               :
003732  3  A0 00        	ldy #0 				; fetch byte from table.
003734  3  B1 66        	lda (z80_hl),y
003736  3  A0 09        	ldy #9
003738  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00373A  3               
00373A  3  E6 66        	inc z80_l 			; move to next byte.
00373C  3  D0 02        	bne :+
00373E  3  E6 67        	inc z80_h
003740  3               :
003740  3  A9 00        	lda #0				; zeroes in accumulator.
003742  3  A0 07        	ldy #7 				; reset frame number.
003744  3  91 68        	sta (z80_ix),y
003746  3  A0 0A        	ldy #10 			; reset direction.
003748  3  91 68        	sta (z80_ix),y
00374A  3  A0 0D        	ldy #13				; reset jump pointer low.
00374C  3  91 68        	sta (z80_ix),y
00374E  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003750  3  91 68        	sta (z80_ix),y
003752  3               
003752  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003754  3  A0 10        	ldy #16
003756  3  91 68        	sta (z80_ix),y
003758  3               evis0:
003758  3  A5 69        	lda z80_i
00375A  3  48           	pha
00375B  3  A5 68        	lda z80_x
00375D  3  48           	pha
00375E  3  A5 67        	lda z80_h
003760  3  48           	pha
003761  3  A5 66        	lda z80_l
003763  3  48           	pha
003764  3               
003764  3  20 98 39     	jsr evnt09 			; perform event.
003767  3               
003767  3  68           	pla
003768  3  85 66        	sta z80_l
00376A  3  68           	pla
00376B  3  85 67        	sta z80_h
00376D  3  68           	pla
00376E  3  85 68        	sta z80_x
003770  3  68           	pla
003771  3  85 69        	sta z80_i
003773  3               
003773  3  18           	clc
003774  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
003776  3  69 11        	adc #TABSIZ		 	; next sprite.
003778  3  85 68        	sta z80_x
00377A  3  90 02        	bcc :+
00377C  3  E6 69        	inc z80_i
00377E  3               :
00377E  3  60           	rts
00377F  3               
00377F  3               
00377F  3               ;-------------------------------------
00377F  3               ; Clear the play area window.
00377F  3               ;-------------------------------------
00377F  3               
00377F  3               clw:
00377F  3  AD 1F 28     	lda wintop			; get coordinates of window.
003782  3  85 rr        	sta dispy			; put into dispx for calculation.
003784  3               
003784  3  AD 21 28     	lda winhgt			; height of window.
003787  3  85 rr        	sta rrow			; copy to b register.
003789  3               clw3:
003789  3               
003789  3  AD 20 28     	lda winlft
00378C  3  85 rr        	sta dispx
00378E  3               ;	lda bcolour
00378E  3               ;	jsr gprad 			; get print address.
00378E  3               ;	jsr pchr
00378E  3               ;	inc dispx
00378E  3               
00378E  3  AD 22 28     	lda winwid 			; width of window.
003791  3  85 rr        	sta rcol
003793  3               clw2:
003793  3  20 7A 2C     	jsr gprad 			; get print address.
003796  3  A9 00        	lda #0				; zero byte to write.
003798  3               clw1:
003798  3  20 09 2D     	jsr pchr
00379B  3               
00379B  3  E6 rr        	inc dispx			; next column.
00379D  3  C6 rr        	dec rcol			; one less to do.
00379F  3  D0 F2        	bne clw2			; repeat for remaining columns.
0037A1  3               
0037A1  3  AD 20 28     	lda winlft			; get left edge.
0037A4  3  85 rr        	sta dispx 			; reset x.
0037A6  3  E6 rr        	inc dispy 			; next line down.
0037A8  3               
0037A8  3  C6 rr        	dec rrow
0037AA  3  D0 DD        	bne clw3			; repeat down the screen.
0037AC  3               
0037AC  3  AD 1F 28     	lda wintop			; get coordinates of window.
0037AF  3  85 rr        	sta chary			; put into display position.
0037B1  3  AD 20 28     	lda winlft
0037B4  3  85 rr        	sta charx
0037B6  3  60           	rts
0037B7  3               
0037B7  3               
0037B7  3               ;----------------------------------------------------------
0037B7  3               ; Effects code.
0037B7  3               ; Ticker routine is called 25 times per second.
0037B7  3               ;
0037B7  3               ; HL = txtscr = left text screen address
0037B7  3               ; DE = txtscr+txtwid-1 = right text screen address
0037B7  3               ; BC = txtpos = text scroller position
0037B7  3               ;
0037B7  3               ;----------------------------------------------------------
0037B7  3               
0037B7  3               .if sflag
0037B7  3               scrly:
0037B7  3               	rts
0037B7  3               	.word txtscr         	; get left screen address.
0037B7  3               	sta scr_l
0037B7  3               	lda txtscr+1
0037B7  3               	sta scr_l+1
0037B7  3               	sta scr_r+1
0037B7  3               
0037B7  3               	stx xtmp
0037B7  3               
0037B7  3               	clc         		; get right screen address.
0037B7  3               	lda scr_l
0037B7  3               	adc txtwid
0037B7  3               	sta scr_r
0037B7  3               	dec scr_r
0037B7  3               scrly1:
0037B7  3               	ldy txtwid		; set txtwide
0037B7  3               	dey
0037B7  3               	clc
0037B7  3               scrly0:
0037B7  3               	lda (scr_l),y		; scroll 1 line
0037B7  3               	rol a
0037B7  3               	sta (scr_l),y
0037B7  3               	dey
0037B7  3               	bpl scrly0
0037B7  3               
0037B7  3               	clc			; point to next line
0037B7  3               	lda scr_l
0037B7  3               	adc #32
0037B7  3               	sta scr_l
0037B7  3               	bcc scrly1		; repeat 8 times
0037B7  3               
0037B7  3               	lda txtpos 		; get text pointer.
0037B7  3               	sta scr_txt
0037B7  3               	lda txtpos+1
0037B7  3               	sta scr_txt+1
0037B7  3               
0037B7  3               	ldy #0
0037B7  3               	lda (scr_txt),y 		; find character we're displaying.
0037B7  3               	and #127 		; remove end marker bit if applicable.
0037B7  3               	cmp #13			; is it newline?
0037B7  3               	bne scrly5 		; no, it's okay.
0037B7  3               	lda #32			; convert to a space instead.
0037B7  3               scrly5:
0037B7  3               	sta fntaddr		; calculate char address
0037B7  3               	lda #0
0037B7  3               	sta fntaddr+1
0037B7  3               	asl fntaddr  		; multiply char by 8.
0037B7  3               	rol fntaddr+1
0037B7  3               	asl fntaddr
0037B7  3               	rol fntaddr+1
0037B7  3               	asl fntaddr
0037B7  3               	rol fntaddr+1
0037B7  3               	lda fntaddr
0037B7  3               	clc
0037B7  3               	adc #<(FONT-256)
0037B7  3               	sta scrly3+1		; that's the low byte.
0037B7  3               	lda fntaddr+1
0037B7  3               	adc #>(FONT-256)
0037B7  3               	sta scrly3+2		; add displacement.
0037B7  3               
0037B7  3               	ldx #0
0037B7  3               scrly3:
0037B7  3               	lda $3333,x		; get image of char line.
0037B7  3               	and txtbit
0037B7  3               	beq scrly2		; don't plot pixel
0037B7  3               	ldy scrline,x
0037B7  3               	lda (scr_r),y
0037B7  3               	clc
0037B7  3               	ora #1
0037B7  3               	sta (scr_r),y		; plot pixel
0037B7  3               scrly2:
0037B7  3               	inx			; next line of char.
0037B7  3               	cpx #8
0037B7  3               	bne scrly3
0037B7  3               
0037B7  3               	lsr txtbit		; bit of text to display.
0037B7  3               	bcs :+
0037B7  3               	rts
0037B7  3               :
0037B7  3               	ldy #0
0037B7  3               	lda (scr_txt),y 	; what was the character?
0037B7  3               	asl a	  		; end of message?
0037B7  3               	bcs scrly4
0037B7  3               	inc txtpos
0037B7  3               	bne :+
0037B7  3               	inc txtpos+1
0037B7  3               :
0037B7  3               	jmp scrly6 		; not yet - continue.
0037B7  3               scrly4:
0037B7  3               	lda txtini 		; start of scrolling message.
0037B7  3               	sta txtpos
0037B7  3               	lda txtini+1
0037B7  3               	sta txtpos+1
0037B7  3               scrly6:
0037B7  3               	lda #128
0037B7  3               	sta txtbit
0037B7  3               	ldx xtmp
0037B7  3               	rts
0037B7  3               
0037B7  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0037B7  3               
0037B7  3               ;-------------------------------------------------------
0037B7  3               ; Entry TICKER command
0037B7  3               ;
0037B7  3               ; Entry:
0037B7  3               ;  z80_b = message nr
0037B7  3               ;  z80_c = width
0037B7  3               ;-------------------------------------------------------
0037B7  3               
0037B7  3               iscrly:
0037B7  3               	jsr prescr 		; set up display position.
0037B7  3               
0037B7  3               	lda #<msgdat 		; text messages.
0037B7  3               	sta z80_l
0037B7  3               	lda #>msgdat
0037B7  3               	sta z80_h
0037B7  3               
0037B7  3               	lda z80_c 		; width.
0037B7  3               	sec
0037B7  3               	sbc #1			; subtract one.
0037B7  3               	cmp #32 		; is it between 1 and 32?
0037B7  3               	bcc :+
0037B7  3               	lda #$60
0037B7  3               	jmp iscrl0		; no, disable messages.
0037B7  3               :
0037B7  3               	ldx z80_b		; message number.
0037B7  3               	jsr getwrd 		; find message start.
0037B7  3               
0037B7  3               	lda z80_l		; set initial text position.
0037B7  3               	sta txtini
0037B7  3               	lda z80_h
0037B7  3               	sta txtini+1
0037B7  3               
0037B7  3               	lda #$ad		; code for lda adrr
0037B7  3               iscrl0:
0037B7  3               	sta scrly		; enable/disable scrolling routine.
0037B7  3               
0037B7  3               	jsr prescr 		; set up display position.
0037B7  3               	jsr gprad 		; get print address.
0037B7  3               
0037B7  3               	lda scraddr 		; set text screen address.
0037B7  3               	sta txtscr
0037B7  3               	lda scraddr+1
0037B7  3               	sta txtscr+1
0037B7  3               
0037B7  3               	lda z80_c		; width.
0037B7  3               	sta txtwid		; set width in working storage.
0037B7  3               
0037B7  3               	lda #128 		; start with leftmost bit.
0037B7  3               	sta txtbit
0037B7  3               
0037B7  3               	jmp scrly4
0037B7  3               .endif
0037B7  3               
0037B7  3               ;------------------------------------------------------------------
0037B7  3               ; Dig routine, conditional assembly depending on dflag
0037B7  3               ;------------------------------------------------------------------
0037B7  3               .if dflag
0037B7  3               dig:
0037B7  3               	and #3
0037B7  3               	beq digr		; dig right
0037B7  3               	cmp #1
0037B7  3               	beq digl		; dig left
0037B7  3               	cmp #2
0037B7  3               	beq digd		; dig down
0037B7  3               
0037B7  3               ; Dig up.
0037B7  3               
0037B7  3               digu:				; dig up
0037B7  3               	ldy #8
0037B7  3               	lda (z80_ix),y
0037B7  3               	sec
0037B7  3               	sbc #2
0037B7  3               	sta dispy		; set y
0037B7  3               
0037B7  3               	iny
0037B7  3               	lda (z80_ix),y
0037B7  3               	sta dispx		; set x
0037B7  3               	jmp digv
0037B7  3               
0037B7  3               ; Dig down.
0037B7  3               
0037B7  3               digd:
0037B7  3               	ldy #9
0037B7  3               	lda (z80_ix),y
0037B7  3               	sta dispx		; set x
0037B7  3               
0037B7  3               	dey
0037B7  3               	clc
0037B7  3               	lda (z80_ix),y
0037B7  3               	adc #SPR_HGT
0037B7  3               	sta dispy		; set y
0037B7  3               	jmp digv
0037B7  3               
0037B7  3               ; Dig left.
0037B7  3               
0037B7  3               digl:
0037B7  3               	ldy #8
0037B7  3               	lda (z80_ix),y
0037B7  3               	sta dispy		; set y
0037B7  3               
0037B7  3               	iny
0037B7  3               	lda (z80_ix),y
0037B7  3               	sec
0037B7  3               	sbc #2			; x=x-2
0037B7  3               	sta dispx		; set x
0037B7  3               	jmp digh
0037B7  3               
0037B7  3               ; Dig right.
0037B7  3               
0037B7  3               digr:
0037B7  3               	ldy #8
0037B7  3               	lda (z80_ix),y
0037B7  3               	sta dispy		; set y
0037B7  3               
0037B7  3               	iny
0037B7  3               	lda (z80_ix),y
0037B7  3               	clc
0037B7  3               	adc #SPR_WID
0037B7  3               	sta dispx		; set x+16
0037B7  3               	jmp digh
0037B7  3               
0037B7  3               ; Vertical digging
0037B7  3               
0037B7  3               digv:
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jsr fdchk		; remove if FODDER
0037B7  3               
0037B7  3               	inc dispx
0037B7  3               	inc dispx
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jsr fdchk		; remove if FODDER
0037B7  3               
0037B7  3               	inc dispx
0037B7  3               	inc dispx
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jsr fdchk		; remove if FODDER
0037B7  3               
0037B7  3               	inc dispx
0037B7  3               	inc dispx
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jsr fdchk		; remove if FODDER
0037B7  3               
0037B7  3               	lda dispx
0037B7  3               	and #1
0037B7  3               	bne :+
0037B7  3               	rts
0037B7  3               :
0037B7  3               	inc dispx
0037B7  3               	inc dispx
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jmp fdchk		; remove if FODDER
0037B7  3               
0037B7  3               ; Horizontal digging
0037B7  3               
0037B7  3               digh:
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jsr fdchk		; remove if FODDER
0037B7  3               
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jsr fdchk		; remove if FODDER
0037B7  3               
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jsr fdchk		; remove if FODDER
0037B7  3               
0037B7  3               	ldy dispy
0037B7  3               	lda V_SPR_PTR,y
0037B7  3               	bne :+
0037B7  3               	rts
0037B7  3               :
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	inc dispy		; look 1 cell down
0037B7  3               	jsr tstbl		; check blocktype in MAP
0037B7  3               	jmp fdchk		; remove if FODDER
0037B7  3               
0037B7  3               digcnt:	.byte 0
0037B7  3               
0037B7  3               .endif
0037B7  3               
0037B7  3               ;------------------------------------------------------------------
0037B7  3               ; Sprite table
0037B7  3               ;------------------------------------------------------------------
0037B7  3               
0037B7  3               
0037B7  3               ; ix+0  = type.
0037B7  3               ; ix+1  = sprite image number.
0037B7  3               ; ix+2  = frame.
0037B7  3               ; ix+3  = y coord.
0037B7  3               ; ix+4  = x coord.
0037B7  3               
0037B7  3               ; ix+5  = new type.
0037B7  3               ; ix+6  = new image number.
0037B7  3               ; ix+7  = new frame.
0037B7  3               ; ix+8  = new y coord.
0037B7  3               ; ix+9  = new x coord.
0037B7  3               
0037B7  3               ; ix+10 = direction.
0037B7  3               ; ix+11 = parameter 1.
0037B7  3               ; ix+12 = parameter 2.
0037B7  3               ; ix+13 = jump pointer low.
0037B7  3               ; ix+14 = jump pointer high.
0037B7  3               ; ix+15 = data pointer low.
0037B7  3               ; ix+16 = data pointer high.
0037B7  3               
0037B7  3               ; block NUMSPR * TABSIZ,255
0037B7  3               
0037B7  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0037BB  3  FF FF FF FF  
0037BF  3  FF FF FF FF  
003883  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003887  3  FF FF FF 00  
00388B  3  C0 78 00 00  
003894  3  07           roomtb:	.byte 7                      ; start room map offset.
003895  3               
003895  3               ; User routine.  Put your own code in here to be called with USER instruction.
003895  3               ; if USER has an argument it will be passed in the accumulator.
003895  3               
003895  3               user:
003895  3               	.include "user.inc"
003895  4  60           	rts
003896  4               
003896  3               
003896  3               setfgcol:
003896  3  29 07        	and #7
003898  3  8D A5 38     	sta fcolour
00389B  3  60           	rts
00389C  3               
00389C  3               setbgcol:
00389C  3  29 07        	and #7
00389E  3  18           	clc
00389F  3  69 10        	adc #16
0038A1  3  8D A6 38     	sta bcolour
0038A4  3  60           	rts
0038A5  3               
0038A5  3  07           fcolour:	.byte t_white
0038A6  3  17           bcolour:	.byte g_white
0038A7  3               
0038A7  3               ; Everything below here will be generated by the editors.
0038A7  3               
0038A7  3  60                   rts
0038A8  3               WINDOWTOP = 1
0038A8  3               WINDOWLFT = 1
0038A8  3               WINDOWHGT = 22
0038A8  3               WINDOWWID = 30 ;
0038A8  3               MAPWID = 3
0038A8  3  FF FF FF             .byte 255,255,255
0038AB  3               mapdat:
0038AB  3  FF 00 FF             .byte 255,0,255
0038AE  3  FF FF FF             .byte 255,255,255
0038B1  3  01           stmap:  .byte 1
0038B2  3               
0038B2  3               evnt00:
0038B2  3  A5 rr                lda joyval	; KEY
0038B4  3  29 08                and #8
0038B6  3  F0 03                beq :+
0038B8  3  4C EF 38             jmp a00144
0038BB  3               :
0038BB  3  20 B0 2D             jsr laddu	; CANGOUP
0038BE  3  F0 03                beq :+
0038C0  3  4C EB 38             jmp a00136
0038C3  3               :
0038C3  3  A9 01                lda #1
0038C5  3  85 rr                sta varl
0038C7  3  A0 09                ldy #9
0038C9  3  B1 68                lda (z80_ix),y
0038CB  3  4A                   lsr a
0038CC  3  A0 09                ldy #9
0038CE  3  91 68                sta (z80_ix),y
0038D0  3  A0 09                ldy #9
0038D2  3  B1 68                lda (z80_ix),y
0038D4  3  0A                   asl a
0038D5  3  A0 09                ldy #9
0038D7  3  91 68                sta (z80_ix),y
0038D9  3  A9 00                lda #0		; ANIMATE
0038DB  3  20 7C 33             jsr animsp
0038DE  3  A0 08                ldy #8 		; SPRITEUP
0038E0  3  B1 68                lda (z80_ix),y
0038E2  3  38                   sec
0038E3  3  E9 01                sbc #1
0038E5  3  91 68                sta (z80_ix),y
0038E7  3  60                   rts		; EXIT
0038E8  3  4C EF 38             jmp a00144
0038EB  3  A9 00        a00136: lda #0
0038ED  3  85 rr                sta varl
0038EF  3  A5 rr        a00144: lda joyval	; KEY
0038F1  3  29 04                and #4
0038F3  3  F0 03                beq :+
0038F5  3  4C 2C 39             jmp a00288
0038F8  3               :
0038F8  3  20 9C 2D             jsr laddd	; LADDERBELOW
0038FB  3  F0 03                beq :+
0038FD  3  4C 28 39             jmp a00280
003900  3               :
003900  3  A9 01                lda #1
003902  3  85 rr                sta varl
003904  3  A0 09                ldy #9
003906  3  B1 68                lda (z80_ix),y
003908  3  4A                   lsr a
003909  3  A0 09                ldy #9
00390B  3  91 68                sta (z80_ix),y
00390D  3  A0 09                ldy #9
00390F  3  B1 68                lda (z80_ix),y
003911  3  0A                   asl a
003912  3  A0 09                ldy #9
003914  3  91 68                sta (z80_ix),y
003916  3  A9 00                lda #0		; ANIMATE
003918  3  20 7C 33             jsr animsp
00391B  3  A0 08                ldy #8 		; SPRITEDOWN
00391D  3  B1 68                lda (z80_ix),y
00391F  3  18                   clc
003920  3  69 01                adc #1
003922  3  91 68                sta (z80_ix),y
003924  3  60                   rts		; EXIT
003925  3  4C 2C 39             jmp a00288
003928  3  A9 00        a00280: lda #0
00392A  3  85 rr                sta varl
00392C  3  A9 00        a00288: lda #0
00392E  3  C5 rr                cmp varl
003930  3  F0 03                beq *+5
003932  3  4C 54 39             jmp a00377
003935  3  A5 rr                lda joyval	; KEY
003937  3  29 02                and #2
003939  3  F0 03                beq :+
00393B  3  4C 54 39             jmp a00377
00393E  3               :
00393E  3  20 81 2E             jsr cangl	; CANGOLEFT
003941  3  F0 03                beq :+
003943  3  4C 54 39             jmp a00377
003946  3               :
003946  3  A9 00                lda #0		; ANIMATE
003948  3  20 7C 33             jsr animsp
00394B  3  A0 09                ldy #9 		; SPRITELEFT
00394D  3  B1 68                lda (z80_ix),y
00394F  3  38                   sec
003950  3  E9 01                sbc #1
003952  3  91 68                sta (z80_ix),y
003954  3  A9 00        a00377: lda #0
003956  3  C5 rr                cmp varl
003958  3  F0 03                beq *+5
00395A  3  4C 7C 39             jmp a00467
00395D  3  A5 rr                lda joyval	; KEY
00395F  3  29 01                and #1
003961  3  F0 03                beq :+
003963  3  4C 7C 39             jmp a00467
003966  3               :
003966  3  20 93 2E             jsr cangr	; CANGORIGHT
003969  3  F0 03                beq :+
00396B  3  4C 7C 39             jmp a00467
00396E  3               :
00396E  3  A9 00                lda #0		; ANIMATE
003970  3  20 7C 33             jsr animsp
003973  3  A0 09                ldy #9 		; SPRITERIGHT
003975  3  B1 68                lda (z80_ix),y
003977  3  18                   clc
003978  3  69 01                adc #1
00397A  3  91 68                sta (z80_ix),y
00397C  3  A5 rr        a00467: lda joyval	; KEY
00397E  3  29 10                and #16
003980  3  F0 03                beq :+
003982  3  4C 8A 39             jmp a00496
003985  3               :
003985  3  A9 05                lda #5
003987  3  20 95 2F             jsr jump	; JUMP
00398A  3  20 77 35     a00496: jsr ifall	; FALL
00398D  3  4C E3 34             jmp grav
003990  3               evnt01:
003990  3  60                   rts
003991  3               evnt02:
003991  3  60                   rts
003992  3               evnt03:
003992  3  60                   rts
003993  3               evnt04:
003993  3  60                   rts
003994  3               evnt05:
003994  3  60                   rts
003995  3               evnt06:
003995  3  60                   rts
003996  3               evnt07:
003996  3  60                   rts
003997  3               evnt08:
003997  3  60                   rts
003998  3               evnt09:
003998  3  60                   rts
003999  3               evnt10:
003999  3  60                   rts
00399A  3               evnt11:
00399A  3  60                   rts
00399B  3               evnt12:
00399B  3  60                   rts
00399C  3               evnt13:
00399C  3  60                   rts
00399D  3               evnt14:
00399D  3  20 0B 3F             jsr cls		; CLS
0039A0  3  A9 00                lda #0
0039A2  3  85 rr                sta varl
0039A4  3  60                   rts
0039A5  3               evnt15:
0039A5  3  60                   rts
0039A6  3               evnt16:
0039A6  3  60                   rts
0039A7  3               evnt17:
0039A7  3  60                   rts
0039A8  3               evnt18:
0039A8  3  60                   rts
0039A9  3               evnt19:
0039A9  3  60                   rts
0039AA  3               evnt20:
0039AA  3  60                   rts
0039AB  3  60           ptcusr: rts
0039AC  3               msgdat:
0039AC  3  53 43 4F 52          .byte "SCOR",197
0039B0  3  C5           
0039B1  3  20 20 48 49          .byte "  HIG",200
0039B5  3  47 C8        
0039B7  3  44 4F 44 47          .byte "DODGY GEEZ",197
0039BB  3  59 20 47 45  
0039BF  3  45 5A C5     
0039C2  3  20 47 41 4D          .byte " GAM",197
0039C6  3  C5           
0039C7  3  20 4F 56 45          .byte " OVE",210
0039CB  3  D2           
0039CC  3  20 4E 45 57          .byte " NEW HIGH SCOR",197
0039D0  3  20 48 49 47  
0039D4  3  48 20 53 43  
0039DB  3               nummsg:
0039DB  3  06                   .byte 6
0039DC  3               chgfx:
0039DC  3  00 01                .byte 0,1
0039DE  3  FF 01                .byte 255,1
0039E0  3  3D 01                .byte 61,1
0039E2  3  2C 01                .byte 44,1
0039E4  3  6E 01                .byte 110,1
0039E6  3  00 01                .byte 0,1
0039E8  3               bprop:
0039E8  3  00                   .byte 0
0039E9  3  02                   .byte 2
0039EA  3  03                   .byte 3
0039EB  3  03                   .byte 3
0039EC  3  03                   .byte 3
0039ED  3  03                   .byte 3
0039EE  3               sprgfx:
0039EE  3  28 7B 39 20          .byte 40,123,57,32,0,56,126,60,48,0,97,53,117,33,0,0,0,0,0,0
0039F2  3  00 38 7E 3C  
0039F6  3  30 00 61 35  
003A02  3  40 4C 44 00          .byte 64,76,68,0,0,64,91,81,0,0,5,23,21,5,0,2,1,3,0,0
003A06  3  00 40 5B 51  
003A0A  3  00 00 05 17  
003A16  3  00 50 10 00          .byte 0,80,16,0,0,2,78,6,0,0,22,31,23,20,0,8,5,13,0,0
003A1A  3  00 02 4E 06  
003A1E  3  00 00 16 1F  
003A2A  3  00 46 57 04          .byte 0,70,87,4,0,64,76,93,68,0,2,90,74,18,0,0,0,0,0,0
003A2E  3  00 40 4C 5D  
003A32  3  44 00 02 5A  
003A3E  3  00 18 1C 10          .byte 0,24,28,16,0,0,82,87,16,0,10,74,75,10,0,0,3,2,1,0
003A42  3  00 00 52 57  
003A46  3  10 00 0A 4A  
003A52  3  00 40 50 00          .byte 0,64,80,0,0,0,9,29,1,0,72,75,79,73,0,0,14,10,4,0
003A56  3  00 00 09 1D  
003A5A  3  01 00 48 4B  
003A66  3               frmlst:
003A66  3  00 01 01 00          .byte 0,1,1,0
003A6A  3               scdat:
003A6A  3  CB 00                .word 203
003A6C  3  01 FF 00 1C          .byte 1,255,0,28,1,1,255,0,28,1,1,255,0,28,255,1,11,2,3,4,255,1,18,255,0,9,2,3,4,255,0,16,1,1
003A70  3  01 01 FF 00  
003A74  3  1C 01 01 FF  
003A8E  3  FF 00 09 02          .byte 255,0,9,2,3,4,255,0,16,1,1,255,0,9,2,3,4,255,0,16,1,1,255,0,9,2,3,4,255,0,16,1,1
003A92  3  03 04 FF 00  
003A96  3  10 01 01 FF  
003AAF  3  FF 00 09 02          .byte 255,0,9,2,3,4,255,0,16,255,1,21,2,3,4,255,1,8,255,0,19,2,3,4,255,0,6,1,1,255,0,19,2
003AB3  3  03 04 FF 00  
003AB7  3  10 FF 01 15  
003AD0  3  03 04 FF 00          .byte 3,4,255,0,6,1,1,255,0,19,2,3,4,255,0,6,1,1,255,0,19,2,3,4,255,0,6,1,1,255,0,19,2
003AD4  3  06 01 01 FF  
003AD8  3  00 13 02 03  
003AF1  3  03 04 FF 00          .byte 3,4,255,0,6,255,1,16,2,3,4,255,1,13,255,0,14,2,3,4,255,0,11,1,1,255,0,14,2,3,4,255,0,11
003AF5  3  06 FF 01 10  
003AF9  3  02 03 04 FF  
003B13  3  01 01 FF 00          .byte 1,1,255,0,14,2,3,4,255,0,11,1,1,255,0,14,2,3,4,255,0,11,1,1,255,0,14,2,3,4,255,0,11
003B17  3  0E 02 03 04  
003B1B  3  FF 00 0B 01  
003B34  3  FF 01 1F             .byte 255,1,31
003B37  3               numsc:
003B37  3  01                   .byte 1
003B38  3               nmedat:
003B38  3  00 00 38 0C          .byte 0,0,56,12,255
003B3C  3  FF           
003B3D  3               NUMOBJ = 1
003B3D  3               objdta:
003B3D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,40,40,0,40,40
003B41  3  00 00 00 00  
003B45  3  00 00 00 00  
003B4F  3               font:
003B4F  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003B53  3  00 00 00 00  
003B57  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003B5B  3  30 00 30 00  
003B5F  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003B63  3  00 00 00 00  
003B67  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003B6B  3  6C FE 6C 00  
003B6F  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
003B73  3  7E 1E 7E 18  
003B77  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003B7B  3  30 6E CE 00  
003B7F  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
003B83  3  7E CC 7E 00  
003B87  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
003B8B  3  00 00 00 00  
003B8F  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
003B93  3  18 18 0C 00  
003B97  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
003B9B  3  30 30 60 00  
003B9F  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
003BA3  3  7E 18 3C 00  
003BA7  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
003BAB  3  7E 18 18 00  
003BAF  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
003BB3  3  00 18 18 30  
003BB7  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
003BBB  3  7E 00 00 00  
003BBF  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003BC3  3  00 38 38 00  
003BC7  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003BCB  3  18 30 60 00  
003BCF  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003BD3  3  F6 E6 7C 00  
003BD7  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003BDB  3  18 18 7E 00  
003BDF  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003BE3  3  7C C0 FE 00  
003BE7  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003BEB  3  06 C6 7C 00  
003BEF  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003BF3  3  D8 FE 18 00  
003BF7  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003BFB  3  06 C6 7C 00  
003BFF  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003C03  3  C6 C6 7C 00  
003C07  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003C0B  3  18 30 30 00  
003C0F  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003C13  3  C6 C6 7C 00  
003C17  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003C1B  3  7E 06 7C 00  
003C1F  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003C23  3  00 00 30 00  
003C27  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003C2B  3  00 30 30 60  
003C2F  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003C33  3  30 18 0C 00  
003C37  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003C3B  3  00 7E 00 00  
003C3F  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003C43  3  0C 18 30 00  
003C47  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003C4B  3  18 00 18 00  
003C4F  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003C53  3  FE C0 7C 00  
003C57  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003C5B  3  FE C6 C6 00  
003C5F  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003C63  3  C6 C6 FC 00  
003C67  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003C6B  3  C0 C6 7C 00  
003C6F  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
003C73  3  C6 CC F8 00  
003C77  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
003C7B  3  C0 C0 FE 00  
003C7F  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
003C83  3  C0 C0 C0 00  
003C87  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
003C8B  3  DE C6 7C 00  
003C8F  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
003C93  3  C6 C6 C6 00  
003C97  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
003C9B  3  18 18 7E 00  
003C9F  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
003CA3  3  C6 C6 7C 00  
003CA7  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
003CAB  3  D8 CC C6 00  
003CAF  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
003CB3  3  C0 C0 FE 00  
003CB7  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
003CBB  3  C6 C6 C6 00  
003CBF  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
003CC3  3  DE CE C6 00  
003CC7  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
003CCB  3  C6 C6 7C 00  
003CCF  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
003CD3  3  FC C0 C0 00  
003CD7  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003CDB  3  F6 DE 7C 00  
003CDF  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003CE3  3  FC CC C6 00  
003CE7  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003CEB  3  06 C6 7C 00  
003CEF  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003CF3  3  30 30 30 00  
003CF7  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003CFB  3  C6 C6 7C 00  
003CFF  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003D03  3  C6 6C 38 00  
003D07  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003D0B  3  C6 FE 6C 00  
003D0F  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003D13  3  38 6C C6 00  
003D17  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003D1B  3  30 30 30 00  
003D1F  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003D23  3  30 60 FE 00  
003D27  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003D2B  3  18 18 1E 00  
003D2F  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003D33  3  30 18 0C 00  
003D37  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003D3B  3  30 30 F0 00  
003D3F  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003D43  3  30 30 30 00  
003D47  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003D4B  3  00 00 00 FF  
003D4F  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003D53  3  60 60 FE 00  
003D57  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003D5B  3  7C CC 7C 00  
003D5F  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
003D63  3  66 66 7C 00  
003D67  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003D6B  3  60 60 3C 00  
003D6F  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
003D73  3  CC CC 7C 00  
003D77  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
003D7B  3  F8 C0 7C 00  
003D7F  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
003D83  3  30 30 30 00  
003D87  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
003D8B  3  CC 7C 0C 78  
003D8F  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
003D93  3  CC CC CC 00  
003D97  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
003D9B  3  30 30 78 00  
003D9F  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
003DA3  3  0C 0C 6C 38  
003DA7  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
003DAB  3  70 78 6C 00  
003DAF  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
003DB3  3  30 30 1C 00  
003DB7  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
003DBB  3  FC FC FC 00  
003DBF  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
003DC3  3  CC CC CC 00  
003DC7  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
003DCB  3  CC CC 78 00  
003DCF  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
003DD3  3  CC F8 C0 C0  
003DD7  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
003DDB  3  CC 7C 0C 0E  
003DDF  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003DE3  3  60 60 60 00  
003DE7  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003DEB  3  78 0C F8 00  
003DEF  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003DF3  3  30 30 1C 00  
003DF7  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003DFB  3  CC CC 78 00  
003DFF  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003E03  3  78 78 30 00  
003E07  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003E0B  3  FC FC 78 00  
003E0F  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003E13  3  30 78 CC 00  
003E17  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003E1B  3  CC 7C 0C 78  
003E1F  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003E23  3  30 60 FC 00  
003E27  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003E2B  3  18 18 1E 00  
003E2F  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003E33  3  18 18 18 00  
003E37  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003E3B  3  30 30 F0 00  
003E3F  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003E43  3  00 00 00 00  
003E47  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003E4B  3  E3 BB C6 7C  
003E4F  3               jtab:
003E4F  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
003E53  3  FE FF FF FF  
003E57  3  00 00 00 01  
003E65  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,83,72,49,50,51,52
003E69  3  20 53 48 31  
003E6D  3  32 33 34     
003E70  3               
003E70  2               
003E70  1               	.include "lib.inc"
003E70  2               ;----------------------------------------------------------------------
003E70  2               ; System 5 depending variables and routines
003E70  2               ;----------------------------------------------------------------------
003E70  2               
003E70  2               ; Flags
003E70  2               
003E70  2               	real		= 0		; 0=emulator, 1=real system5
003E70  2               
003E70  2               ; Global variables
003E70  2               
003E70  2               	t_red		= 1		; Text colour definition filters
003E70  2               	t_green		= 2
003E70  2               	t_yellow	= 3
003E70  2               	t_blue		= 4
003E70  2               	t_magenta	= 5
003E70  2               	t_cyan		= 6
003E70  2               	t_white		= 7
003E70  2               
003E70  2               	g_red		= 17		; Graphics colour definition filters
003E70  2               	g_green		= 18
003E70  2               	g_yellow	= 19
003E70  2               	g_blue		= 20
003E70  2               	g_magenta	= 21
003E70  2               	g_cyan		= 22
003E70  2               	g_white		= 23
003E70  2               
003E70  2               	ScrWidth	= 40
003E70  2               	ScrHeight	= 25
003E70  2               
003E70  2               .if real=1
003E70  2               	IRQtime		= 20000		; 50Hz at 1Mhz clock
003E70  2               .else
003E70  2               	IRQtime		= 40000		; 50Hz at 2Mhz clock
003E70  2               .endif
003E70  2               
003E70  2               ; System constants
003E70  2               
003E70  2               	IRQVEC		= $0204		; Interrupt vector
003E70  2               	ScreenAddr	= $0400		; Startaddress video RAM
003E70  2               
003E70  2               	MC6845_Reg	= $0800		; MC6845 CRT controller register ptr
003E70  2               	MC6845_Dat	= $0801		; MC6845 CRT controller data
003E70  2               
003E70  2               	VIA1		= $0e20
003E70  2               	PORT_A		= VIA1+$1	; Keyboard
003E70  2               	DIR_A		= VIA1+$3	; Datadirection register
003E70  2               	Timer1_Low  	= VIA1+$4	; Timer 1 low byte
003E70  2               	Timer1_High 	= VIA1+$5	; Timer 1 high byte
003E70  2               	Timer2_Low	= VIA1+$8	; Timer 2 low byte
003E70  2               	Timer2_High	= VIA1+$9	; Timer 2 high byte
003E70  2               	ACR		= VIA1+$b	; Auxiliary Control Register
003E70  2               	PCR		= VIA1+$c	; Peripheral Control Register
003E70  2               	IFR		= VIA1+$d 	; Interrupt Flag Register
003E70  2               	IER		= VIA1+$e	; Interupt Enable Register
003E70  2               
003E70  2               	MAP 		= $D800		; properties map buffer (4x256 bytes)
003E70  2               	SCADTB_lb 	= $DC00		; screen address table lo-byte (256 bytes)
003E70  2               	SCADTB_hb 	= $DD00		; screen address table hi-byte (256 bytes)
003E70  2               	SHRAPN 		= $DE00		; shrapnel table (55x6 bytes)
003E70  2               	V_SPR_PTR	= $DF4A		; Vertical spriteframe pointer (75 bytes)
003E70  2               
003E70  2               ; System calls
003E70  2               
003E70  2               	OS_CLI   = $FFF7
003E70  2               	OSBYTE   = $FFF4
003E70  2               	OSWORD   = $FFF1
003E70  2               	OSWRCH   = $FFEE
003E70  2               	OSWRCR   = $FFEC
003E70  2               	OSNEWL   = $FFE7
003E70  2               	OSASCI   = $FFE3
003E70  2               	OSRDCH   = $FFE0
003E70  2               	OSFILE   = $FFDD
003E70  2               	OSARGS   = $FFDA
003E70  2               	OSBGET   = $FFD7
003E70  2               	OSBPUT   = $FFD4
003E70  2               	OSGBPB   = $FFD1
003E70  2               	OSFIND   = $FFCE
003E70  2               
003E70  2               ; To be removed
003E70  2               
003E70  2               	SCRSYNC	= $fff4
003E70  2               
003E70  2               ;======================================================================
003E70  2               ; System depending routines
003E70  2               ;======================================================================
003E70  2               
003E70  2               ;----------------------------------------------------------------------
003E70  2               ; Init hardware
003E70  2               ;----------------------------------------------------------------------
003E70  2               
003E70  2               init:
003E70  2               
003E70  2               ; Set up screen address table.
003E70  2               
003E70  2               setsat:
003E70  2  A9 00        	lda #<ScreenAddr	; start of screen.
003E72  2  85 rr        	sta scraddr
003E74  2  A9 04        	lda #>ScreenAddr
003E76  2  85 rr        	sta scraddr+1
003E78  2               
003E78  2  A2 00        	ldx #0
003E7A  2  A0 00        	ldy #0			; vertical lines on screen.
003E7C  2               setsa0:
003E7C  2  A5 rr        	lda scraddr
003E7E  2  99 00 DC     	sta SCADTB_lb,y		; write low byte.
003E81  2  A5 rr        	lda scraddr+1
003E83  2  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
003E85  2  90 02        	bcc :+
003E87  2  09 F0        	ora #$F0		; plot sprites in rom if of screen
003E89  2               :
003E89  2  99 00 DD     	sta SCADTB_hb,y		; write high byte.
003E8C  2  E8           	inx
003E8D  2  E0 03        	cpx #3
003E8F  2  D0 05        	bne :+
003E91  2  20 70 33     	jsr nline		; next line down.
003E94  2  A2 00        	ldx #0
003E96  2               :
003E96  2  C8           	iny			; next position in table.
003E97  2  D0 E3        	bne setsa0
003E99  2               
003E99  2               ; Set up vertical sprite pointer table
003E99  2               
003E99  2  A0 00        	ldy #0
003E9B  2  A9 00        	lda #0
003E9D  2               vspriteloop:
003E9D  2  99 4A DF     	sta V_SPR_PTR,y
003EA0  2  18           	clc
003EA1  2  69 14        	adc #20
003EA3  2  C9 3C        	cmp #60
003EA5  2  D0 02        	bne :+
003EA7  2  A9 00        	lda #0
003EA9  2               :
003EA9  2  C8           	iny
003EAA  2  C0 4B        	cpy #75
003EAC  2  D0 EF        	bne vspriteloop
003EAE  2               
003EAE  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
003EAE  2               ; Hack for MAME to use VDU40x25
003EAE  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
003EAE  2               
003EAE  2               ; Init VDU40x25
003EAE  2               
003EAE  2  A0 0F        	ldy #$f
003EB0  2               loops:
003EB0  2  8C 00 08     	sty MC6845_Reg
003EB3  2  B9 FB 3E     	lda CRTTAB,y
003EB6  2  8D 01 08     	sta MC6845_Dat
003EB9  2  88           	dey
003EBA  2  10 F4        	bpl loops
003EBC  2               
003EBC  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
003EBC  2               
003EBC  2               ; Disable cursor
003EBC  2               
003EBC  2  A9 0A        	lda #$0a
003EBE  2  8D 00 08     	sta MC6845_Reg
003EC1  2  A9 20        	lda #$20
003EC3  2  8D 01 08     	sta MC6845_Dat
003EC6  2               
003EC6  2  20 0B 3F     	jsr cls
003EC9  2               
003EC9  2               ; Set new interrupt routine to sync at 25Hz
003EC9  2               
003EC9  2  A9 E9        	lda #<irq_handler	; New interrupt handler
003ECB  2  8D 04 02     	sta IRQVEC
003ECE  2  A9 3E        	lda #>irq_handler
003ED0  2  8D 05 02     	sta IRQVEC+1
003ED3  2               
003ED3  2  A9 40        	lda #<IRQtime		; Interrupt at 25Hz
003ED5  2  8D 24 0E     	sta Timer1_Low
003ED8  2  A9 9C        	lda #>IRQtime
003EDA  2  8D 25 0E     	sta Timer1_High
003EDD  2  A9 40        	lda #%01000000
003EDF  2  8D 2B 0E     	sta ACR
003EE2  2  A9 C0        	lda #%11000000
003EE4  2  8D 2E 0E     	sta IER
003EE7  2  58           	cli
003EE8  2               
003EE8  2  60           	rts
003EE9  2               
003EE9  2               irq_handler:
003EE9  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
003EEC  2               
003EEC  2  8A           	txa			; Save x,y
003EED  2  48           	pha
003EEE  2  98           	tya
003EEF  2  48           	pha
003EF0  2               
003EF0  2  EE F9 3E     	inc frames_passed	; Nr of frames past
003EF3  2               
003EF3  2  68           	pla			; Restore x,y,a
003EF4  2  A8           	tay
003EF5  2  68           	pla
003EF6  2  AA           	tax
003EF7  2  68           	pla
003EF8  2  40           	rti
003EF9  2               
003EF9  2  00           frames_passed:	.byte 0
003EFA  2               
003EFA  2  60           	rts
003EFB  2               
003EFB  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
003EFF  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
003F03  2  03 12 72 13  	.byte $03,$12,$72,$13
003F07  2  04 00 07 FF  	.byte $04,$00,$07,$ff
003F0B  2               
003F0B  2               ;======================================================================
003F0B  2               ; Screen routines
003F0B  2               ;======================================================================
003F0B  2               
003F0B  2               ;----------------------------------------------------------------------
003F0B  2               ; Clear screen routine.
003F0B  2               ;
003F0B  2               ; Fill screenmem $0400-$07ff with ScrFillByte
003F0B  2               ; Set semigraphics at 1st column every line
003F0B  2               ;----------------------------------------------------------------------
003F0B  2               
003F0B  2               cls:
003F0B  2               
003F0B  2               ; Fill screen with 0
003F0B  2               
003F0B  2  A9 00        	lda #0
003F0D  2  A0 00        	ldy #0
003F0F  2               clsloop:
003F0F  2  99 00 04     	sta ScreenAddr,y
003F12  2  99 00 05     	sta ScreenAddr+256,y
003F15  2  99 00 06     	sta ScreenAddr+512,y
003F18  2  99 00 07     	sta ScreenAddr+768,y
003F1B  2  C8           	iny
003F1C  2  D0 F1        	bne clsloop
003F1E  2               
003F1E  2               ; Init every row as graphics
003F1E  2               
003F1E  2  A0 00        	ldy #0
003F20  2  A2 19        	ldx #ScrHeight
003F22  2  AD 00 DC     	lda SCADTB_lb
003F25  2  85 rr        	sta scraddr
003F27  2  AD 00 DD     	lda SCADTB_hb
003F2A  2  85 rr        	sta scraddr+1
003F2C  2  AD A6 38     	lda bcolour
003F2F  2               colloop:
003F2F  2  91 rr        	sta (scraddr),y
003F31  2  48           	pha
003F32  2  A5 rr        	lda scraddr
003F34  2  18           	clc
003F35  2  69 28        	adc #ScrWidth
003F37  2  85 rr        	sta scraddr
003F39  2  90 02        	bcc :+
003F3B  2  E6 rr        	inc scraddr+1
003F3D  2               :
003F3D  2  68           	pla
003F3E  2  CA           	dex
003F3F  2  D0 EE        	bne colloop
003F41  2               
003F41  2  60           	rts
003F42  2               
003F42  2               ;-------------------------------------------------------------
003F42  2               ; Colour background line
003F42  2               ;-------------------------------------------------------------
003F42  2               
003F42  2               linecol:
003F42  2  85 rr        	sta dispy
003F44  2  A9 00        	lda #0
003F46  2  85 rr        	sta dispx
003F48  2  20 7A 2C     	jsr gprad
003F4B  2               
003F4B  2               ;	tay
003F4B  2               ;	lda SCADTB_lb,y
003F4B  2               ;	sta scraddr
003F4B  2               ;	lda SCADTB_hb,y
003F4B  2               ;	sta scraddr+1
003F4B  2  A0 00        	ldy #0
003F4D  2  AD A6 38     	lda bcolour		; set background colour
003F50  2  91 rr        	sta (scraddr),y
003F52  2  C8           	iny
003F53  2  A9 1D        	lda #$1d		; set new background colour
003F55  2  91 rr        	sta (scraddr),y
003F57  2  60           	rts
003F58  2               
003F58  2               
003F58  2               ;-------------------------------------------------------------
003F58  2               ; Screen synchronisation.
003F58  2               ;
003F58  2               ;  - read joystick/keyboard
003F58  2               ;  - handle sound
003F58  2               ;  - sync framerate at 25Hz
003F58  2               ;  - handle shrapnel every even frame
003F58  2               ;-------------------------------------------------------------
003F58  2               
003F58  2               vsync:
003F58  2  48           	pha
003F59  2  98           	tya
003F5A  2  48           	pha
003F5B  2  8A           	txa
003F5C  2  48           	pha
003F5D  2  20 D5 2F     	jsr joykey		; read joystick/keyboard.
003F60  2               
003F60  2               ; Sync framerate to 25 Hz
003F60  2               
003F60  2               vsync1:
003F60  2  AD F9 3E     	lda frames_passed	; Wait 2 frames at 50Hz
003F63  2  C9 02        	cmp #2
003F65  2  90 F9        	bcc vsync1
003F67  2               
003F67  2  A9 00        	lda #0			; sync framerate 25 Hz
003F69  2  8D F9 3E     	sta frames_passed
003F6C  2               
003F6C  2               
003F6C  2  A5 rr        	lda clock
003F6E  2  29 01        	and #1
003F70  2  D0 03        	bne:+
003F72  2  20 92 28     	jsr proshr		; handle shrapnel every even frame
003F75  2               :
003F75  2               
003F75  2               ; Beepersound
003F75  2               
003F75  2  AD B1 3F     	lda sndtyp
003F78  2  F0 31        	beq sndskip
003F7A  2               
003F7A  2  AD 2C 0E     	lda PCR			; Switch to speaker, CA2=0
003F7D  2  29 F1        	and #%11110001
003F7F  2  09 0C        	ora #%00001100
003F81  2  8D 2C 0E     	sta PCR
003F84  2               
003F84  2  A9 20        	lda #%00100000		; Set bit5=output speaker
003F86  2  8D 23 0E     	sta DIR_A
003F89  2               
003F89  2               sndloop:
003F89  2  AD 21 0E     	lda PORT_A		; handle sound
003F8C  2  AC B1 3F     	ldy sndtyp
003F8F  2               sndwait:
003F8F  2  88           	dey
003F90  2  D0 FD        	bne sndwait
003F92  2  49 20        	eor #%00100000		; Toggle speakerbit
003F94  2  8D 21 0E     	sta PORT_A
003F97  2  CE B1 3F     	dec sndtyp
003F9A  2  D0 ED        	bne sndloop
003F9C  2               
003F9C  2  A9 00        	lda #%00000000		; Set PORT_A input
003F9E  2  8D 23 0E     	sta DIR_A
003FA1  2               
003FA1  2  AD 2C 0E     	lda PCR			; Switch to keyboard, CA2=1
003FA4  2  29 F1        	and #%11110001
003FA6  2  09 0E        	ora #%00001110
003FA8  2  8D 2C 0E     	sta PCR
003FAB  2               
003FAB  2               sndskip:
003FAB  2               
003FAB  2  68           	pla
003FAC  2  AA           	tax
003FAD  2  68           	pla
003FAE  2  A8           	tay
003FAF  2  68           	pla
003FB0  2  60           	rts
003FB1  2               
003FB1  2  00           sndtyp:	.byte 0
003FB2  2               
003FB2  2               ;======================================================================
003FB2  2               ; Joystick routines
003FB2  2               ;======================================================================
003FB2  2               
003FB2  2               joyinit:
003FB2  2  60           	rts
003FB3  2               
003FB3  2               joy1:
003FB3  2  AD 2C 0E     	lda PCR			; Switch to joystick, CA2=0
003FB6  2  29 F1        	and #%11110001
003FB8  2  09 0C        	ora #%00001100
003FBA  2  8D 2C 0E     	sta PCR
003FBD  2               
003FBD  2  AD 21 0E     	lda PORT_A		; Read FUDLR joystick
003FC0  2  29 7F        	and #$7f
003FC2  2  85 rr        	sta joyval
003FC4  2               
003FC4  2  AD 2C 0E     	lda PCR			; Switch to keyboard, CA2=1
003FC7  2  29 F1        	and #%11110001
003FC9  2  09 0E        	ora #%00001110
003FCB  2  8D 2C 0E     	sta PCR
003FCE  2               
003FCE  2  AD 6A 3E     	lda keys+5		; Check FIRE2
003FD1  2  20 EC 3F     	jsr ktest
003FD4  2  B0 06        	bcs :+
003FD6  2  A5 rr        	lda joyval
003FD8  2  29 DF        	and #%11011111
003FDA  2  85 rr        	sta joyval
003FDC  2               :
003FDC  2  AD 6B 3E     	lda keys+6		; Check FIRE3
003FDF  2  20 EC 3F     	jsr ktest
003FE2  2  B0 06        	bcs :+
003FE4  2  A5 rr        	lda joyval
003FE6  2  29 BF        	and #%10111111
003FE8  2  85 rr        	sta joyval
003FEA  2               :
003FEA  2  60           	rts
003FEB  2               
003FEB  2               joy2:
003FEB  2  60           	rts
003FEC  2               
003FEC  2               ;======================================================================
003FEC  2               ; Keyboard routines
003FEC  2               ;======================================================================
003FEC  2               
003FEC  2               ;----------------------------------------------------------------------
003FEC  2               ; KTEST
003FEC  2               ; Check if key in A is pressed
003FEC  2               ; 	return clc if pressed
003FEC  2               ; 	return sec if not pressed
003FEC  2               ;----------------------------------------------------------------------
003FEC  2               
003FEC  2               ktest:
003FEC  2  85 rr        	sta tmp
003FEE  2  2C 21 0E     	bit PORT_A
003FF1  2               ;.if real=1
003FF1  2               ;	bpl not_pressed
003FF1  2               ;.else
003FF1  2  30 09        	bmi not_pressed	; BUG MAME, bit 7 not set ....
003FF3  2               ;.endif
003FF3  2  AD 21 0E     	lda PORT_A
003FF6  2  85 rr        	sta varopt
003FF8  2  C5 rr        	cmp tmp
003FFA  2  F0 02        	beq pressed
003FFC  2               not_pressed:
003FFC  2  38           	sec
003FFD  2  60           	rts
003FFE  2               pressed:
003FFE  2  18           	clc
003FFF  2  60           	rts
004000  2               
004000  2               ;======================================================================
004000  2               ; PRSKEY
004000  2               ; Wait for keypress and release
004000  2               ;======================================================================
004000  2               
004000  2               prskey:
004000  2  2C 21 0E     	bit PORT_A
004003  2  10 FB        	bpl prskey
004005  2               relkey:
004005  2  2C 21 0E     	bit PORT_A
004008  2  30 FB        	bmi relkey
00400A  2  60           	rts
00400B  2               
00400B  2               ;======================================================================
00400B  2               ; Sprite routines
00400B  2               ;======================================================================
00400B  2               
00400B  2               ;-----------------------------------------------------------------
00400B  2               ; These are the sprite routines.
00400B  2               ; sspria = single sprite, old (ix).
00400B  2               ; ssprib = single sprite, new (ix+5).
00400B  2               ; sspric = both sprites, old (ix) and new (ix+5).
00400B  2               ;-----------------------------------------------------------------
00400B  2               
00400B  2               sspria:
00400B  2  20 E2 32     	jsr gsprad		; get old sprite address.
00400E  2               sspri2:
00400E  2  A5 64        	lda z80_e
004010  2  8D 67 40     	sta dline1+1		; Set spritedata address
004013  2  A5 65        	lda z80_d
004015  2  8D 68 40     	sta dline1+2
004018  2               
004018  2  86 rr        	stx xtmp
00401A  2  A2 00        	ldx #0			; vertical lines.
00401C  2               sspri0:
00401C  2  20 5F 40     	jsr dline		; draw a line.
00401F  2               
00401F  2               ;.if bflag
00401F  2               ;	cpx #16			; Detect end of line 3
00401F  2               ;.else
00401F  2  E0 14        	cpx #20			; Detect end of line 2
004021  2               ;.endif
004021  2               
004021  2  D0 F9        	bne sspri0		; no, repeat
004023  2  A6 rr        	ldx xtmp
004025  2  60           	rts
004026  2               
004026  2               ;-----------------------------------------------------------------
004026  2               ; ssprib = single sprite, new (ix).
004026  2               ;-----------------------------------------------------------------
004026  2               
004026  2               ssprib:
004026  2  20 C3 32     	jsr gspran 		; get new sprite address.
004029  2               				; z80_de = new sprite address
004029  2  4C 0E 40     	jmp sspri2
00402C  2               
00402C  2               ;-----------------------------------------------------------------
00402C  2               ; sspric = erase old sprite and plot new sprite line by line
00402C  2               ;-----------------------------------------------------------------
00402C  2               
00402C  2               sspric:
00402C  2  20 E2 32     	jsr gsprad 		; get old sprite address.
00402F  2               				; z80_de = old sprite address
00402F  2  A5 64        	lda z80_e
004031  2  8D 80 40     	sta ddline1+1		; Set spritedata address
004034  2  A5 65        	lda z80_d
004036  2  8D 81 40     	sta ddline1+2
004039  2  20 A5 40     	jsr exx  		; store addresses.
00403C  2               
00403C  2  20 C3 32     	jsr gspran 		; get new sprite addresses.
00403F  2               				; z80_de = old sprite address
00403F  2  A5 64        	lda z80_e
004041  2  8D 67 40     	sta dline1+1		; Set spritedata address
004044  2  A5 65        	lda z80_d
004046  2  8D 68 40     	sta dline1+2
004049  2               
004049  2  86 rr        	stx xtmp
00404B  2  A2 00        	ldx #0			; vertical lines.
00404D  2               lloop:
00404D  2  20 5F 40     	jsr dline 		; draw a line.
004050  2  CA           	dex
004051  2  CA           	dex
004052  2  CA           	dex
004053  2  CA           	dex
004054  2  CA           	dex
004055  2  20 78 40     	jsr ddline 		; delete a line.
004058  2               
004058  2               ;.if bflag
004058  2               ;	cpx #16			; Detect end of line 3
004058  2               ;.else
004058  2  E0 14        	cpx #20			; Detect end of line 2
00405A  2               ;.endif
00405A  2  D0 F1        	bne lloop		; no, repeat
00405C  2  A6 rr        	ldx xtmp
00405E  2  60           	rts
00405F  2               
00405F  2               ;-----------------------------------------------------------------
00405F  2               ; Erase sprite line
00405F  2               ;-----------------------------------------------------------------
00405F  2               
00405F  2               dline:
00405F  2  BC 91 40     	ldy sprline,x		; point to screenleft
004062  2               
004062  2  A9 05        	lda #5
004064  2  85 rr        	sta rrow
004066  2               dline1:
004066  2  BD 3D 3B     	lda objdta,x		; fetch spriteleft byte
004069  2  F0 06        	beq :+
00406B  2  51 rr        	eor (scraddr),y		; merge with screenleft
00406D  2  09 20        	ora #$20		; Set bit 5
00406F  2  91 rr        	sta (scraddr),y		; write screenleft
004071  2               :
004071  2  E8           	inx			; next spritebyte
004072  2  C8           	iny			; point to screenmiddle
004073  2               
004073  2  C6 rr        	dec rrow
004075  2  D0 EF        	bne dline1
004077  2  60           	rts
004078  2               
004078  2               ;-----------------------------------------------------------------
004078  2               ; Draw sprite line
004078  2               ;-----------------------------------------------------------------
004078  2               
004078  2               ddline:
004078  2  BC 91 40     	ldy sprline,x		; point to screenleft
00407B  2               
00407B  2  A9 05        	lda #5
00407D  2  85 rr        	sta rrow
00407F  2               ddline1:
00407F  2  BD 3D 3B     	lda objdta,x		; fetch spriteleft byte
004082  2  F0 06        	beq :+
004084  2  51 72        	eor (z80_hlp),y		; merge with screenleft
004086  2  09 20        	ora #$20		; Set bit 5
004088  2  91 72        	sta (z80_hlp),y		; write spritedata0
00408A  2               :
00408A  2  E8           	inx			; next spritebyte
00408B  2  C8           	iny			; point to screenmiddle
00408C  2               
00408C  2  C6 rr        	dec rrow
00408E  2  D0 EF        	bne ddline1
004090  2  60           	rts
004091  2               
004091  2               ;-----------------------------------------------------------------
004091  2               ; Spritebyte location on screen
004091  2               ;-----------------------------------------------------------------
004091  2               
004091  2               sprline:
004091  2  00 01 02 03  	.byte $00,$01,$02,$03,$04
004095  2  04           
004096  2  28 29 2A 2B  	.byte $28,$29,$2a,$2b,$2c
00409A  2  2C           
00409B  2  50 51 52 53  	.byte $50,$51,$52,$53,$54
00409F  2  54           
0040A0  2  78 79 7A 7B  	.byte $78,$79,$7a,$7b,$7c
0040A4  2  7C           
0040A5  2               
0040A5  1               	.include "z80.asm"
0040A5  2               ;------------------------------------------------------
0040A5  2               ; z80.asm
0040A5  2               ; spectrum stuff
0040A5  2               ; adresses
0040A5  2               
0040A5  2               
0040A5  2               ; Contains seperatly 1 bit set
0040A5  2               
0040A5  2               _bitmem0	= $f8
0040A5  2               _bitmem1	= $f9
0040A5  2               _bitmem2	= $fa
0040A5  2               _bitmem3	= $fb
0040A5  2               _bitmem4	= $fc
0040A5  2               _bitmem5	= $fd
0040A5  2               _bitmem6	= $fe
0040A5  2               _bitmem7	= $ff
0040A5  2               
0040A5  2               ; constants
0040A5  2               _bitvalue0	= $01
0040A5  2               _bitvalue1	= $02
0040A5  2               _bitvalue2	= $04
0040A5  2               _bitvalue3	= $08
0040A5  2               _bitvalue4	= $10
0040A5  2               _bitvalue5	= $20
0040A5  2               _bitvalue6	= $40
0040A5  2               _bitvalue7	= $80
0040A5  2               
0040A5  2               _notbitvalue0	= $fe
0040A5  2               _notbitvalue1	= $fd
0040A5  2               _notbitvalue2	= $fb
0040A5  2               _notbitvalue3	= $f7
0040A5  2               _notbitvalue4	= $ef
0040A5  2               _notbitvalue5	= $df
0040A5  2               _notbitvalue6	= $bf
0040A5  2               _notbitvalue7	= $7f
0040A5  2               
0040A5  2               
0040A5  2               exx:
0040A5  2  A5 62        		lda z80_c
0040A7  2  A4 6E        		ldy z80_cp
0040A9  2  84 62        		sty z80_c
0040AB  2  85 6E        		sta z80_cp
0040AD  2  A5 63        		lda z80_b
0040AF  2  A4 6F        		ldy z80_bp
0040B1  2  84 63        		sty z80_b
0040B3  2  85 6F        		sta z80_bp
0040B5  2  A5 64        		lda z80_e
0040B7  2  A4 70        		ldy z80_ep
0040B9  2  84 64        		sty z80_e
0040BB  2  85 70        		sta z80_ep
0040BD  2  A5 65        		lda z80_d
0040BF  2  A4 71        		ldy z80_dp
0040C1  2  84 65        		sty z80_d
0040C3  2  85 71        		sta z80_dp
0040C5  2  A5 rr        		lda scraddr
0040C7  2  A4 72        		ldy z80_lp
0040C9  2  84 rr        		sty scraddr
0040CB  2  85 72        		sta z80_lp
0040CD  2  A5 rr        		lda scraddr+1
0040CF  2  A4 73        		ldy z80_hp
0040D1  2  84 rr        		sty scraddr+1
0040D3  2  85 73        		sta z80_hp
0040D5  2  60           		rts
0040D6  2               
0040D6  2               
0040D6  1               eind_asm:
0040D6  1               eop:					; End Of Program
0040D6  1               
0040D6  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
0040D6  1               
