ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 1 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "kcmunchkin.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 8D 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  10 3E        msgptr:		.word msgdat	; messages
002811  3  AA 3E        blkptr:		.word chgfx	; block graphics.
002813  3  C4 3E        proptr:		.word bprop	; address of char properties.
002815  3  D1 3E        sptptr:		.word sprgfx	; sprite graphics
002817  3  A9 48        frmptr:		.word frmlst	; sprite frames.
002819  3  B9 48        scrptr:		.word scdat	; address of screens.
00281B  3  D0 4A        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  DD 4A        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3               ;txtcol:		.byte green,yellow,blue,red
00281F  3               
00281F  3               ; Don't change the order of these four.
00281F  3               ; Menu routine relies on winlft following wintop.
00281F  3               
00281F  3  00           wintop:		.byte WINDOWTOP	; top of window.
002820  3  01           winlft:		.byte WINDOWLFT	; left edge.
002821  3  19           winhgt:		.byte WINDOWHGT	; window height.
002822  3  27           winwid:		.byte WINDOWWID	; window width.
002823  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002824  3               
002824  3               ; Variables start here.
002824  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002824  3               
002824  3  00           wntopx:		.byte (3 * WINDOWTOP)
002825  3  02           wnlftx:		.byte (2 * WINDOWLFT)
002826  3  42           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
002827  3  46           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
002828  3               
002828  3               ; Assorted game routines which can go in contended memory.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for inventory called by the INV command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with objects seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected objectnr of INV menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if mflag
002828  3               minve:
002828  3               .if gflag
002828  3               	lda #$ff		; blue frontcolour
002828  3               	sta andeor
002828  3               	lda #$aa		; yellow backcoloour
002828  3               	sta andeor+1
002828  3               .endif
002828  3               	lda #<(invdis)		; routine address.
002828  3               	sta mod0+1		; set up menu routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(invdis)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               	lda #<(fopt)		; find option from available objects.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fopt)
002828  3               	sta mod1+1+1
002828  3               	jmp dbox		; do menu routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for menu called by the MENU command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with menu items seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected line nr of MENU menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               mmenu:
002828  3               	lda #<(always)		; routine address.
002828  3               	sta mod0+1		; set up routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(always)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               
002828  3               	lda #<(fstd)		; standard option selection.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fstd)
002828  3               	sta mod1+2
002828  3               
002828  3               ; Drop through into box routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Work out size of box for message or menu.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               dbox:
002828  3               	lda #<(msgdat)		; pointer to messages.
002828  3               	sta z80_l
002828  3               	lda #>(msgdat)
002828  3               	sta z80_h
002828  3               
002828  3               	jsr getwrd		; get message number.
002828  3               
002828  3               	lda z80_h		; store pointer to message.
002828  3               	sta TmpAddr
002828  3               	lda z80_l
002828  3               	sta TmpAddr+1
002828  3               
002828  3               	lda #1			; height.
002828  3               	sta z80_d
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               	sta z80_e		; maximum width.
002828  3               dbox5:
002828  3               	lda #0			; this line"s width.
002828  3               	sta z80_b
002828  3               mod2:
002828  3               	jsr always		; item in player"s possession?
002828  3               	cmp #255
002828  3               	bne dbox6		; not in inventory, skip this line.
002828  3               	inc z80_d		; add to tally.
002828  3               dbox6:
002828  3               	ldy #0			; get character.
002828  3               	lda (z80_hl),y
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a		; reached end of line?
002828  3               	cmp #','
002828  3               	beq dbox3		; yes.
002828  3               	cmp #13
002828  3               	beq dbox3		; yes.
002828  3               	inc z80_b		; add to this line"s width.
002828  3               	lda z80_a
002828  3               	bmi dbox4		; end of message? yes, end count.
002828  3               	jmp dbox6		; repeat until we find the end.
002828  3               dbox3:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox5		; no, carry on looking.
002828  3               	lda z80_b		; make this the widest so far.
002828  3               	sta z80_e
002828  3               	jmp dbox5		; keep looking.
002828  3               dbox4:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox8		; no, carry on looking.
002828  3               	lda z80_b		; final line is the longest so far.
002828  3               	sta z80_e
002828  3               dbox8:
002828  3               	dec z80_d		; decrement items found.
002828  3               	bne :+			; total was zero.
002828  3               	lda #255
002828  3               	sta varopt
002828  3               	jmp dbox15
002828  3               :
002828  3               	lda z80_e		; longest line.
002828  3               	bne :+			; was it zero?
002828  3               	jmp dbox15		; total was zero.
002828  3               :
002828  3               	sta bwid		; set up size.
002828  3               	lda z80_d
002828  3               	sta blen
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; That's set up our box size.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               	lda winhgt		; window height in characters.
002828  3               	sec
002828  3               	sbc z80_d		; subtract height of box.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc wintop		; add top edge of window.
002828  3               	sta btop		; set up box top.
002828  3               
002828  3               	lda winwid		; window width in characters.
002828  3               	sec
002828  3               	sbc z80_e		; subtract box width.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc winlft		; add left edge of window.
002828  3               	sta blft		; box left.
002828  3               
002828  3               	lda #<(FONT-256)		; font.
002828  3               	sta grbase		; set up for text display.
002828  3               	lda #>(FONT-256)
002828  3               	sta grbase+1
002828  3               
002828  3               	lda TmpAddr+1		; restore message pointer.
002828  3               	sta z80_l
002828  3               	lda TmpAddr
002828  3               	sta z80_h
002828  3               
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set display coordinate.
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               dbox2:
002828  3               	lda combyt		; get object number.
002828  3               	sta z80_a
002828  3               mod0:
002828  3               	jsr always		; check inventory for display.
002828  3               	cmp #255
002828  3               	beq :+
002828  3               	jmp dbox13		; not in inventory, skip this line.
002828  3               :
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set left display position.
002828  3               	lda bwid		; box width.
002828  3               	sta z80_b		; store width.
002828  3               
002828  3               	lda fcolour		; Set textcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               dbox0:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	cmp #','		; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               	cmp #13			; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               
002828  3               	cmp #141			; end of line?
002828  3               	bne :+
002828  3               	dec bwid
002828  3               	jmp dbox7		; yes, next one.
002828  3               :
002828  3               	dec z80_b		; one less to display.
002828  3               	and #127		; remove terminator.
002828  3               
002828  3               	jsr pchr		; display on screen.
002828  3               
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a
002828  3               	cmp #128		; end of message?
002828  3               	bmi :+
002828  3               	jsr dscor2
002828  3               	jmp dbox7		; yes, job done.
002828  3               :
002828  3               	lda z80_b		; chars remaining.
002828  3               	beq :+			; are any left?
002828  3               	jmp dbox0		; yes, continue.
002828  3               :
002828  3               ;---------------------------------------------------
002828  3               ; Reached limit of characters per line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dbox9:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #13			; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #128		; end of message?
002828  3               	bcs :+
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox9
002828  3               
002828  3               ;---------------------------------------------------
002828  3               ; Fill box to end of line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dboxf:
002828  3               	lda #32			; space character.
002828  3               	jsr pchr		; display character.
002828  3               	dec z80_b
002828  3               	beq :+
002828  3               	jmp dboxf		; repeat for remaining chars on line.
002828  3               :
002828  3               	rts
002828  3               dbox1:
002828  3               	inc z80_l		; skip character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	jsr dboxf		; fill box out to right side.
002828  3               dbox10:
002828  3               	inc dispy		; y coordinate down a line next position.
002828  3               	jmp dbox2		; next line.
002828  3               dbox7:
002828  3               	lda z80_b		; chars remaining.
002828  3               	bne :+			; are any left?
002828  3               	jmp dbox11		; no, nothing to draw.
002828  3               :
002828  3               	jsr dboxf		; fill message to line.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Drawn the box menu, now select option.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox11:
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set bar position.
002828  3               dbox14:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	bne dbox14		; yes, debounce it.
002828  3               	jsr dbar		; draw bar.
002828  3               dbox12:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	beq dbox12		; no, nothing.
002828  3               	and #16			; fire button pressed?
002828  3               	bne :+
002828  3               mod1:
002828  3               	jmp fstd		; yes, job done.
002828  3               :
002828  3               	jsr dbar		; delete bar.
002828  3               
002828  3               	lda joyval		; joystick reading.
002828  3               	and #8			; going up?
002828  3               	beq dboxu		; yes, go up.
002828  3               
002828  3               	ldx dispy		; vertical position of bar.
002828  3               	inx			; look down.
002828  3               	txa
002828  3               	sec
002828  3               	sbc btop		; find distance from top.
002828  3               	cmp blen		; top of box.
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	inc dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               dboxu:
002828  3               	lda dispy		; vertical position of bar.
002828  3               	cmp btop		; are we at the top?
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	dec dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               fstd:
002828  3               	lda dispy		; bar position.
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta varopt		; store the option.
002828  3               	jmp redraw		; redraw the screen.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Option not available.  Skip this line.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox13:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               	cmp #13			; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               
002828  3               	bpl :+			; end of message?
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox13
002828  3               dbox15:
002828  3               	lda TmpAddr		; pop message pointer from the stack.
002828  3               	sta z80_h
002828  3               	lda TmpAddr+1
002828  3               	sta z80_l
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Invert bar
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbar:
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set display coordinate.
002828  3               	jsr gprad		; get printing address.
002828  3               
002828  3               ;	lda bwid		; box width.
002828  3               ;	sta z80_c		; loop counter in c.
002828  3               ;	lda z80_h
002828  3               ;	sta z80_d		; store screen address high byte.
002828  3               ;dbar1:
002828  3               ;	ldx #7			; pixel height in b.
002828  3               ;dbar0:
002828  3               ;	ldy scrtab,x
002828  3               ;	lda (scraddr),y		; get screen byte.
002828  3               ;	eor #255		; reverse all bits.
002828  3               ;	sta (scraddr),y		; write back to screen.
002828  3               ;	dex			; next line down.
002828  3               ;	bpl dbar0		; draw rest of character.
002828  3               
002828  3               ;	inc scraddr		; one char right.
002828  3               ;	dec z80_c		; decrement character counter.
002828  3               ;	bne dbar1		; repeat for whole line.
002828  3               
002828  3               	ldy #0
002828  3               	lda (scraddr),y
002828  3               	eor #7
002828  3               	sta (scraddr),y
002828  3               
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Point to object
002828  3               ;
002828  3               ; Input:
002828  3               ;  combyt
002828  3               ;
002828  3               ; Output:
002828  3               ;  A = object number, A=255 if already in possession
002828  3               ;------------------------------------------------------
002828  3               
002828  3               invdis:
002828  3               	lda z80_l		; store message text pointer.
002828  3               	pha
002828  3               	lda z80_h
002828  3               	pha
002828  3               	lda combyt		; object number.
002828  3               	inc combyt		; ready for next one.
002828  3               	jsr gotob		; check if we have object.
002828  3               	tay
002828  3               	pla
002828  3               	sta z80_h
002828  3               	pla
002828  3               	sta z80_l
002828  3               	tya
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Find option selected.
002828  3               ;
002828  3               ; Input:
002828  3               ;  -
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected object
002828  3               ;------------------------------------------------------
002828  3               
002828  3               fopt:
002828  3               	lda dispy
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta tmp+2		; option selected in b register.
002828  3               	inc tmp+2
002828  3               
002828  3               	lda #0			; set to first item.
002828  3               	sta combyt		; object number.
002828  3               fopt0:
002828  3               	jsr fobj		; find next object in inventory.
002828  3               	dec tmp+2
002828  3               	bne fopt0		; repeat for relevant steps down the list.
002828  3               
002828  3               	lda combyt		; get option.
002828  3               	sta varopt		; store the option.
002828  3               	dec varopt		; one less, due to where we increment combyt.
002828  3               	jmp redraw		; redraw the screen.
002828  3               fobj:
002828  3               	ldy combyt		; object number.
002828  3               	inc combyt		; ready for next item.
002828  3               	tya
002828  3               	jsr gotob		; do we have this item?
002828  3               	cmp #255
002828  3               	bne :+
002828  3               	rts
002828  3               :
002828  3               	jmp fobj		; yes, it's on the list.
002828  3               .endif
002828  3               
002828  3               ;----------------------------------------------------
002828  3               ; Delay routine A * 1/25 sec
002828  3               ;----------------------------------------------------
002828  3               
002828  3               delay:
002828  3  85 rr        	sta xtmp
00282A  3               
00282A  3               del_start:
00282A  3  A9 00        	lda #0
00282C  3  8D 98 4E     	sta frames_passed
00282F  3               del_loop:
00282F  3  AD 98 4E     	lda frames_passed
002832  3  C9 02        	cmp #2
002834  3  90 F9        	bcc del_loop
002836  3               
002836  3  A9 00        	lda #0
002838  3  8D 98 4E     	sta frames_passed
00283B  3  C6 rr        	dec xtmp
00283D  3  D0 EB        	bne del_start
00283F  3  60           	rts
002840  3               
002840  3               ;----------------------------------------------------
002840  3               ; Clear sprite table.
002840  3               ;
002840  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002840  3               ;----------------------------------------------------
002840  3               
002840  3               xspr:
002840  3  A9 FF        	lda #255		; clear byte.
002842  3  A2 00        	ldx #0			; length of table.
002844  3               xspr0:
002844  3  9D 65 37     	sta sprtab,x		; sprite table.
002847  3  E8           	inx			; move to next byte.
002848  3  E0 CC        	cpx #SPRBUF
00284A  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284C  3  60           	rts
00284D  3               
00284D  3               ;-------------------------------------------------------------
00284D  3               ; Initialise all objects.
00284D  3               ;
00284D  3               ; Reset current room,y,x to start room,y,x for all objects
00284D  3               ;-------------------------------------------------------------
00284D  3               
00284D  3               .if oflag
00284D  3               iniob:
00284D  3               	lda #<objdta 		; objects table.
00284D  3               	sta z80_x
00284D  3               	lda #>objdta
00284D  3               	sta z80_i
00284D  3               
00284D  3               	ldx numob 		; number of objects in the game.
00284D  3               iniob0:
00284D  3               	ldy #35
00284D  3               	lda (z80_ix),y 		; start screen.
00284D  3               	ldy #32
00284D  3               	sta (z80_ix),y 		; set start screen.
00284D  3               
00284D  3               	ldy #36
00284D  3               	lda (z80_ix),y 		; find start y.
00284D  3               	ldy #33
00284D  3               	sta (z80_ix),y 		; set start y.
00284D  3               
00284D  3               	ldy #37
00284D  3               	lda (z80_ix),y 		; get initial x.
00284D  3               	ldy #34
00284D  3               	sta (z80_ix),y 		; set x coord.
00284D  3               
00284D  3               	clc 			; point to next object.
00284D  3               	lda z80_x
00284D  3               	adc #38			; distance between objects.
00284D  3               	sta z80_x
00284D  3               	bcc :+
00284D  3               	inc z80_i
00284D  3               :
00284D  3               	dex 			; repeat.
00284D  3               	bne iniob0
00284D  3               
00284D  3               	rts
00284D  3               .endif
00284D  3               
00284D  3               ;-----------------------------------------------
00284D  3               ; Redraw the screen.
00284D  3               ;
00284D  3               ; Remove old copy of all sprites for redraw.
00284D  3               ;-----------------------------------------------
00284D  3               
00284D  3               redraw:
00284D  3               .if gflag
00284D  3               	lda #$ff
00284D  3               	sta andeor
00284D  3               	lda #$00
00284D  3               	sta andeor+1
00284D  3               .endif
00284D  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00284F  3  48           	pha
002850  3  A5 68        	lda z80_x
002852  3  48           	pha
002853  3               
002853  3  20 2D 2D     	jsr droom		; show screen layout.
002856  3               .if oflag
002856  3               	jsr shwob		; draw objects.
002856  3               .endif
002856  3               numsp0:
002856  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002858  3  85 rr        	sta tmp
00285A  3               
00285A  3  A9 65        	lda #<sprtab		; sprite table.
00285C  3  85 68        	sta z80_x
00285E  3  A9 37        	lda #>sprtab
002860  3  85 69        	sta z80_i
002862  3               redrw0:
002862  3  A0 00        	ldy #0
002864  3  B1 68        	lda (z80_ix),y		; old sprite type.
002866  3  C9 FF        	cmp #255		; is it enabled?
002868  3  F0 0B        	beq redrw1 		; no, find next one.
00286A  3               
00286A  3  A0 03        	ldy #3
00286C  3  B1 68        	lda (z80_ix),y 		; sprite y.
00286E  3  C9 B1        	cmp #177		; beyond maximum?
002870  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002872  3               
002872  3  20 6E 4F     	jsr sspria		; show single sprite.
002875  3               redrw1:
002875  3  18           	clc			; next sprite.
002876  3  A5 68        	lda z80_x
002878  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00287A  3  85 68        	sta z80_x
00287C  3  90 02        	bcc :+
00287E  3  E6 69        	inc z80_i
002880  3               :
002880  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002882  3  D0 DE        	bne redrw0
002884  3               rpblc1:
002884  3               ;	jsr dshrp		; redraw shrapnel.
002884  3               
002884  3               .if aflag
002884  3               	jsr rbloc		; draw blocks for this screen
002884  3               .endif
002884  3  68           	pla			; retrieve sprite pointer.
002885  3  85 68        	sta z80_x
002887  3  68           	pla
002888  3  85 69        	sta z80_i
00288A  3               
00288A  3  60           	rts
00288B  3               
00288B  3               ;----------------------------------------------------------------------
00288B  3               ; Atomic palette is static
00288B  3               ;----------------------------------------------------------------------
00288B  3               
00288B  3               setpal:
00288B  3  60           	rts
00288C  3               
00288C  3               ;----------------------------------------------------------------------
00288C  3               ; FODDER check
00288C  3               ;----------------------------------------------------------------------
00288C  3               
00288C  3               .if pflag .or dflag
00288C  3               fdchk:
00288C  3               	cmp #FODDER 		; is it fodder?
00288C  3               	beq :+
00288C  3               	rts 			; no.
00288C  3               :
00288C  3               	lda #0			; wipe fodder in MAP
00288C  3               	ldy #0
00288C  3               	sta (bufaddr),y 	; rewrite block type.
00288C  3               
00288C  3               	lda dispx		; x=x/8
00288C  3               	pha
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	sta dispx
00288C  3               
00288C  3               	lda dispy		; y=y/8
00288C  3               	pha
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	lsr a
00288C  3               	sta dispy
00288C  3               
00288C  3               	lda #0 			; block to write.
00288C  3               	jsr pattr 		; write block.
00288C  3               
00288C  3               	pla
00288C  3               	sta dispy
00288C  3               	pla
00288C  3               	sta dispx
00288C  3               	rts
00288C  3               .endif
00288C  3               
00288C  3               ;----------------------------------------------------
00288C  3               ; Scrolly text and puzzle variables.
00288C  3               ;----------------------------------------------------
00288C  3               
00288C  3               .if sflag
00288C  3               txtbit:	.byte 128		; bit to write.
00288C  3               txtwid:	.byte 16		; width of ticker message.
00288C  3               txtpos:	.word msgdat
00288C  3               txtini:	.word msgdat
00288C  3               txtscr:	.word ScreenAddr
00288C  3               .endif
00288C  3               
00288C  3               ;----------------------------------------------------
00288C  3               ; Specialist routines.
00288C  3               ; Process shrapnel.
00288C  3               ;----------------------------------------------------
00288C  3               proshr:
00288C  3               .if pflag
00288C  3               	lda #<SHRAPN		; table.
00288C  3               	sta z80_x
00288C  3               	lda #>SHRAPN
00288C  3               	sta z80_i
00288C  3               
00288C  3               	lda #NUMSHR		; shrapnel pieces to process.
00288C  3               	sta shrctr
00288C  3               prosh0:
00288C  3               	ldy #0
00288C  3               	lda (z80_ix),y		; on/off marker.
00288C  3               	asl a
00288C  3               proshx:
00288C  3               	bcs :+
00288C  3               	jsr prosh1 		; on, so process it.
00288C  3               :
00288C  3               	clc
00288C  3               	lda z80_x
00288C  3               	adc #SHRSIZ
00288C  3               	sta z80_x
00288C  3               	bcc :+
00288C  3               	inc z80_i
00288C  3               :
00288C  3               	dec shrctr		; round again.
00288C  3               	bne prosh0
00288C  3               .endif
00288C  3               .if sflag
00288C  3               	jsr scrly
00288C  3               .endif
00288C  3  60           	rts
00288D  3               
00288D  3               .if pflag
00288D  3               ;shrctr:	.byte 0
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Proces shrapnel piece
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               prosh1:
00288D  3               	jsr plot 		; delete the pixel.
00288D  3               
00288D  3               	lda #<shrptr		; shrapnel routine pointers.
00288D  3               	sta z80_l
00288D  3               	lda #>shrptr
00288D  3               	sta z80_h
00288D  3               
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; restore shrapnel type.
00288D  3               	jsr prosh2 		; run the routine.
00288D  3               	jsr chkxy		; check x and y are good before we redisplay.
00288D  3               
00288D  3               	lda #<SHRSIZ 		; distance to next.
00288D  3               	sta z80_e
00288D  3               	lda #>SHRSIZ
00288D  3               	sta z80_d
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Run the routine
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               prosh2:
00288D  3               	asl a 			; 2 bytes per address.
00288D  3               	tay
00288D  3               	lda shrptr,y
00288D  3               	sta z80_l
00288D  3               	lda shrptr+1,y 		; fetch high byte from table.
00288D  3               	sta z80_h
00288D  3               	jmp (z80_hl) 		; jump to routine.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Paricle routine table
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shrptr:	.word laser		; laser.
00288D  3               	.word trail		; vapour trail.
00288D  3               	.word shrap		; shrapnel from explosion.
00288D  3               	.word dotl		; horizontal starfield left.
00288D  3               	.word dotr		; horizontal starfield right.
00288D  3               	.word dotu		; vertical starfield up.
00288D  3               	.word dotd		; vertical starfield down.
00288D  3               	.word ptcusr		; user particle.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Explosion shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shrap:
00288D  3               	ldy #1
00288D  3               	lda (z80_ix),y 		; get the angle.
00288D  3               	clc
00288D  3               	adc #<shrsin		; shrapnel sine table.
00288D  3               	sta z80_l
00288D  3               	lda #>shrsin
00288D  3               	adc #0
00288D  3               	sta z80_h
00288D  3               
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; fetch value from table.
00288D  3               	sta z80_e
00288D  3               	inc z80_l 		; next byte of table.
00288D  3               	bne :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y		; fetch value from table.
00288D  3               	sta z80_d
00288D  3               	inc z80_l		; next byte of table.
00288D  3               	bne :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; fetch value from table.
00288D  3               	sta z80_c
00288D  3               	inc z80_l 		; next byte of table.
00288D  3               	bne :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; fetch value from table.
00288D  3               	sta z80_b
00288D  3               
00288D  3               	ldy #2
00288D  3               	lda (z80_ix),y 		; x coordinate in hl.
00288D  3               	clc
00288D  3               	adc z80_e		; add sine lb
00288D  3               	sta (z80_ix),y		; store new coordinate lb.
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	adc z80_d		; add sine hb
00288D  3               	sta (z80_ix),y		; store new coordinate hb.
00288D  3               
00288D  3               	ldy #4
00288D  3               	lda (z80_ix),y	 	; y coordinate in hl.
00288D  3               	clc
00288D  3               	adc z80_c		; add cosine lb
00288D  3               	sta (z80_ix),y		; store new coordinate lb.
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	adc z80_b		; add cosine lb
00288D  3               	sta (z80_ix),y		; store new coordinate hb.
00288D  3               
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Move dots
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               dotl:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1		 	; move left.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               dotr:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1		 	; move left.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               dotu:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1		 	; move up.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               dotd:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1			; move down.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Check if coordinates are ok before redrawing at new position.
00288D  3               ;
00288D  3               ; left:   X>L		X=L	Ok
00288D  3               ; right:  R+15>X	X=R	Ok
00288D  3               ; top:    Y>T		Y=T	Ok
00288D  3               ; bottom: B+15>Y	Y=B	Ok
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               chkxy:
00288D  3               
00288D  3               ; top:    Y>T		Y=T	Ok
00288D  3               
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	cmp wntopx		; window top.
00288D  3               	bcs :+			; compare with top window limit.
00288D  3               	jmp kilshr		; out of window, kill shrapnel.
00288D  3               :
00288D  3               ; left:   X>L		X=L	Ok
00288D  3               
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	cmp wnlftx		; left edge.
00288D  3               	bcs :+			; compare with left window limit.
00288D  3               	jmp kilshr		; out of window, kill shrapnel.
00288D  3               :
00288D  3               ; bottom: B+15>Y	Y=B	Ok
00288D  3               
00288D  3               	lda wnbotx		; point to bottom.
00288D  3               	clc
00288D  3               	adc #15
00288D  3               	ldy #3
00288D  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	bcs :+			; compare with shrapnel x coordinate.
00288D  3               	jmp kilshr		; off screen, kill shrapnel..
00288D  3               :
00288D  3               ; right:  R+15>X	X=R	Ok
00288D  3               
00288D  3               	lda wnrgtx		; point to right edge.
00288D  3               	clc
00288D  3               	adc #15
00288D  3               	ldy #5
00288D  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288D  3               	bcs :+			; compare with window limit.
00288D  3               	jmp kilshr		; off screen, kill shrapnel.
00288D  3               :
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Drop through.
00288D  3               ; Display shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               plot:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y		; y integer.
00288D  3               	sta dispy	 	; workspace coordinates.
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y	 	; x integer.
00288D  3               	sta dispx 		; workspace coordinates.
00288D  3               
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y 		; type.
00288D  3               	bne :+			; is it a laser?
00288D  3               	jmp plot1 		; yes, draw laser instead.
00288D  3               :
00288D  3               plot0:
00288D  3               	lda dispx		; which pixel within byte do we
00288D  3               	and #7			; want to set first?
00288D  3               	tay
00288D  3               	lda dots,y 		; table of small pixel positions.
00288D  3               	sta z80_e 		; get value.
00288D  3               
00288D  3               	jsr scadd 		; screen address.
00288D  3               	ldy #0
00288D  3               	lda (scraddr),y		; see what's already there.
00288D  3               	eor z80_e
00288D  3               	sta (scraddr),y 	; put back on screen.
00288D  3               	rts
00288D  3               
00288D  3               plot1:
00288D  3               	jsr scadd 		; screen address.
00288D  3               	ldy #0
00288D  3               	lda (scraddr),y 	; fetch byte there.
00288D  3               	eor #255 		; toggle all bits.
00288D  3               	sta (scraddr),y 	; new byte.
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Switch off shrapnel
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               kilshr:
00288D  3               	lda #128
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y	; switch off shrapnel.
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Sine/cosine table
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shrsin:	.word 0,1024,391,946,724,724,946,391
00288D  3               	.word 1024,0,946,65144,724,64811,391,64589
00288D  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
00288D  3               	.word 64512,0,64589,391,64811,724,65144,946
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create trail
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               trail:
00288D  3               	ldy #1
00288D  3               	lda (z80_ix),y 	; time remaining.
00288D  3               	sec
00288D  3               	sbc #1
00288D  3               	sta (z80_ix),y
00288D  3               	bne :+
00288D  3               	jmp trailk		; time to switch it off.
00288D  3               :
00288D  3               	jsr qrand		; get a random number.
00288D  3               	lsr a 			; x or y axis?
00288D  3               	bcc :+
00288D  3               	jmp trailv		; use y.
00288D  3               :
00288D  3               ; Trail horizontal
00288D  3               
00288D  3               	lsr a 			; which direction?
00288D  3               	bcc :+
00288D  3               	jmp traill		; go left.
00288D  3               :
00288D  3               ; Trail right
00288D  3               
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1	 		; go right.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Trail left
00288D  3               
00288D  3               traill:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1 			; go left.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Trail vertical
00288D  3               
00288D  3               trailv:
00288D  3               	lsr a		 	; which direction?
00288D  3               	bcc :+
00288D  3               	jmp trailu		; go up.
00288D  3               :
00288D  3               ; Trail down
00288D  3               
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	clc
00288D  3               	adc #1 			; go down.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Trail up
00288D  3               
00288D  3               trailu:
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y
00288D  3               	sec
00288D  3               	sbc #1 			; go up.
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ; Kill trail
00288D  3               
00288D  3               trailk:
00288D  3               	lda #200		; set off-screen to kill vapour trail.
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create laser beam
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               laser:
00288D  3               	ldy #1
00288D  3               	lda (z80_ix),y 		; direction.
00288D  3               	ror a 			; left or right?
00288D  3               	bcs :+
00288D  3               	jmp laserl		; move left.
00288D  3               :
00288D  3               ; Laser right
00288D  3               
00288D  3               	lda #8			; distance to travel.
00288D  3               	sta z80_b
00288D  3               	jmp laserm		; move laser.
00288D  3               
00288D  3               ; Laser left
00288D  3               
00288D  3               laserl:
00288D  3               	lda #248		; distance to travel.
00288D  3               	sta z80_b
00288D  3               laserm:
00288D  3               	ldy #5
00288D  3               	lda (z80_ix),y		; x position.
00288D  3               	clc
00288D  3               	adc z80_b		; add distance.
00288D  3               	sta (z80_ix),y		; set new x coordinate.
00288D  3               
00288D  3               ; Test new block.
00288D  3               
00288D  3               	sta dispx 		; set x for block collision detection purposes.
00288D  3               	ldy #3
00288D  3               	lda (z80_ix),y 		; get y.
00288D  3               	sta dispy		; set coordinate for collision test.
00288D  3               	jsr tstbl 		; get block type there.
00288D  3               	cmp #WALL		; is it solid?
00288D  3               	bne :+
00288D  3               	jmp trailk		; yes, it cannot pass.
00288D  3               :
00288D  3               .if pflag .or dflag
00288D  3                       cmp #FODDER             ; is it fodder?
00288D  3                       bne :+
00288D  3                       jsr fdchk               ; remove fodder block.
00288D  3                       jmp trailk              ; destroy laser.
00288D  3               :
00288D  3               .endif
00288D  3                       rts                     ; no, ignore it.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Dots mask
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               dots:	.byte 128,64,32,16,8,4,2,1
00288D  3               
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Plot, preserving de.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               plotde:
00288D  3               	lda z80_d 		; put de on stack.
00288D  3               	pha
00288D  3               	lda z80_e
00288D  3               	pha
00288D  3               
00288D  3               	jsr plot 		; plot pixel.
00288D  3               
00288D  3               	pla			; restore de from stack.
00288D  3               	sta z80_e
00288D  3               	pla
00288D  3               	sta z80_d
00288D  3               
00288D  3               	rts
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Shoot a laser.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               shoot:
00288D  3               	sta z80_c		; store direction in c register.
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	clc
00288D  3               shoot1:
00288D  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
00288D  3               	sta z80_l 		; puty y coordinate in l.
00288D  3               
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y 		; x coordinate in h.
00288D  3               	sta z80_h
00288D  3               
00288D  3               	lda z80_i		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcs :+
00288D  3               	jmp vapou2		; failed, restore ix.
00288D  3               :
00288D  3               	lda #0
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y 		; set up a laser.
00288D  3               
00288D  3               	lda z80_c
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y 		; set the direction.
00288D  3               
00288D  3               	lda z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; set y coordinate.
00288D  3               
00288D  3               	ror z80_c		; check direction we want.
00288D  3               	bcc :+
00288D  3               	jmp shootr		; shoot right.
00288D  3               :
00288D  3               	lda z80_h		; X position.
00288D  3               shoot0:
00288D  3               	and #248		; align on character boundary.
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; set x coordinate.
00288D  3               	jmp vapou0 		; draw first image.
00288D  3               shootr:
00288D  3               	lda z80_h		; x position.
00288D  3               	clc
00288D  3               	adc #15			; look right.
00288D  3               	jmp shoot0		; align and continue.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create a bit of vapour trail.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               vapour:
00288D  3               	lda z80_i		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	clc
00288D  3               vapou3:
00288D  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00288D  3               	sta z80_l
00288D  3               
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y 		; x coordinate.
00288D  3               	adc #7
00288D  3               	sta z80_h
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcc :+
00288D  3               	jmp vapou1		; no, we can use it.
00288D  3               :
00288D  3               vapou2:
00288D  3               	pla
00288D  3               	sta z80_x
00288D  3               	pla
00288D  3               	sta z80_i
00288D  3               	rts
00288D  3               vapou1:
00288D  3               	lda z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; set up y.
00288D  3               
00288D  3               	lda z80_h
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y 		; set up x coordinate.
00288D  3               
00288D  3               	jsr qrand		; get quick random number.
00288D  3               	and #15			; random time.
00288D  3               	clc
00288D  3               	adc #15			; minimum time on screen.
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y		; set time on screen.
00288D  3               
00288D  3               	lda #1
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; define particle as vapour trail.
00288D  3               vapou0:
00288D  3               	jsr chkxy		; plot first position.
00288D  3               	jmp vapou2
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create a user particle.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               ptusr:
00288D  3               	sta z80_f		; store timer.
00288D  3               
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	clc
00288D  3               	adc #7			; mid-point of sprite.
00288D  3               	sta z80_l
00288D  3               
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y 		; x coordinate.
00288D  3               	clc
00288D  3               	adc #7			; mid-point of sprite.
00288D  3               	sta z80_h
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcs ptusr1
00288D  3               	rts 			; out of slots, can't generate anything.
00288D  3               ptusr1:
00288D  3               	lda z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y 		; set up y.
00288D  3               
00288D  3               	lda z80_h
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; set up x coordinate.
00288D  3               
00288D  3               	lda z80_f 		; restore timer.
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y		; set time on screen.
00288D  3               
00288D  3               	lda #7
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; define particle as user particle.
00288D  3               
00288D  3               	jmp chkxy		; plot first position.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create a vertical or horizontal star.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               star:
00288D  3               	lda z80_i		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	jsr fpslot 		; find particle slot.
00288D  3               	bcs star7		; found one we can use.
00288D  3               star0:
00288D  3               	pla 			; restore sprite pointer.
00288D  3               	sta z80_x
00288D  3               	pla
00288D  3               	sta z80_i
00288D  3               	rts 			; out of slots, can't generate anything.
00288D  3               star7:
00288D  3               	lda z80_c		; direction.
00288D  3               	and #3 			; is it left?
00288D  3               	bne :+
00288D  3               	jmp star1 		; yes, it's left.
00288D  3               :
00288D  3               	cmp #1 			; is it right?
00288D  3               	bne :+
00288D  3               	jmp star2 		; yes, it's right.
00288D  3               :
00288D  3               	cmp #2 			; is it up?
00288D  3               	bne :+
00288D  3               	jmp star3 		; yes, it's up.
00288D  3               :
00288D  3               	ldy wntopx 		; get edge of screen.
00288D  3               	iny			; down one pixel.
00288D  3               	tya
00288D  3               star8:
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y 		; set y coord.
00288D  3               	jsr qrand 		; get quick random number.
00288D  3               star9:
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; set x position.
00288D  3               
00288D  3               	lda z80_c		; direction.
00288D  3               	and #3			; zero to three.
00288D  3               	clc
00288D  3               	adc #3			; 3 to 6 for starfield.
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; define particle as star.
00288D  3               	jsr chkxy		; plot first position.
00288D  3               	jmp star0
00288D  3               star1:
00288D  3               	jsr qrand		; get quick random number.
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y 		; set y coord.
00288D  3               
00288D  3               	lda wnrgtx 		; get edge of screen.
00288D  3               	clc
00288D  3               	adc #15			; add width of sprite minus 1.
00288D  3               	jmp star9
00288D  3               star2:
00288D  3               	jsr qrand 		; get quick random number.
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; set y coord.
00288D  3               
00288D  3               	lda wnlftx		; get edge of screen.
00288D  3               	jmp star9
00288D  3               star3:
00288D  3               	lda wnbotx 		; get edge of screen.
00288D  3               	clc
00288D  3               	adc #15 		; height of sprite minus one pixel.
00288D  3               	jmp star8
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Find particle slot for lasers or vapour trail.
00288D  3               ; can't use alternate accumulator.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               fpslot:
00288D  3               	lda #<SHRAPN 		; shrapnel table.
00288D  3               	sta z80_x
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_i
00288D  3               
00288D  3               	lda #NUMSHR		; number of pieces in table.
00288D  3               	sta z80_b
00288D  3               fpslt0:
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; get type.
00288D  3               	asl a  			; is this slot in use?
00288D  3               	bcc :+
00288D  3               	rts			; no, we can use it.
00288D  3               :
00288D  3               	clc			; point to more shrapnel.
00288D  3               	lda z80_x
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_x
00288D  3               	bcc :+
00288D  3               	inc z80_i
00288D  3               :
00288D  3               	dec z80_b		; repeat for all shrapnel.
00288D  3               	bne fpslt0
00288D  3               
00288D  3               	clc
00288D  3               	rts 			; out of slots, can't generate anything.
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Create an explosion at sprite position.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               explod:
00288D  3               	sta z80_c 		; particles to create.
00288D  3               
00288D  3               	lda z80_i 		; store pointer to sprite.
00288D  3               	pha
00288D  3               	lda z80_x
00288D  3               	pha
00288D  3               
00288D  3               	ldy #8
00288D  3               	lda (z80_ix),y 		; y coordinate.
00288D  3               	sta z80_l
00288D  3               	ldy #9
00288D  3               	lda (z80_ix),y		; x coordinate.
00288D  3               	sta z80_h
00288D  3               
00288D  3               	lda #<SHRAPN		; shrapnel table.
00288D  3               	sta z80_x
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_i
00288D  3               
00288D  3               	lda #NUMSHR		; number of pieces in table.
00288D  3               	sta explcnt
00288D  3               expld0:
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; get type.
00288D  3               	asl a 			; is this slot in use?
00288D  3               	bcs expld1		; no, we can use it.
00288D  3               expld2:
00288D  3               	clc
00288D  3               	lda z80_x
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_x
00288D  3               	bcc :+
00288D  3               	inc z80_i
00288D  3               :
00288D  3               	dec explcnt		; repeat for all shrapnel.
00288D  3               	bne expld0
00288D  3               expld3:
00288D  3               	pla			; restore sprite pointer.
00288D  3               	sta z80_x
00288D  3               	pla
00288D  3               	sta z80_i
00288D  3               	rts 			; out of slots, can't generate any more.
00288D  3               
00288D  3               expld1:
00288D  3               	lda z80_c		; shrapnel counter.
00288D  3               	and #15			; 0 to 15.
00288D  3               	clc			; add to x.
00288D  3               	adc z80_l
00288D  3               	ldy #3
00288D  3               	sta (z80_ix),y		; y coord.
00288D  3               
00288D  3               	lda seed3 		; crap random number.
00288D  3               	and #15			; 0 to 15.
00288D  3               	clc 			; add to y.
00288D  3               	adc z80_h
00288D  3               	ldy #5
00288D  3               	sta (z80_ix),y		; x coord.
00288D  3               
00288D  3               	lda #2
00288D  3               	ldy #0
00288D  3               	sta (z80_ix),y		; switch it on.
00288D  3               
00288D  3               	jsr chkxy		; plot first position.
00288D  3               	jsr qrand		; quick random angle.
00288D  3               	and #60 		; keep within range.
00288D  3               	ldy #1
00288D  3               	sta (z80_ix),y		; angle.
00288D  3               
00288D  3               	dec z80_c		; one less piece of shrapnel to generate.
00288D  3               	bne expld2 		; back to main explosion loop.
00288D  3               	jmp expld3 		; restore sprite pointer and exit.
00288D  3               
00288D  3               ;explcnt:	.byte 0
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Quick random
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               qrand:
00288D  3               	jsr random		; r register.
00288D  3               	eor seed3		; combine with seed.
00288D  3               	sta seed3 		; new seed.
00288D  3               	rts
00288D  3               
00288D  3               ;seed3:	.byte 0
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Display all shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               dshrp:
00288D  3               	lda #<plotde		; display routine.
00288D  3               	sta proshx+1
00288D  3               	lda #>plotde
00288D  3               	sta proshx+2
00288D  3               	jsr proshr		; process shrapnel.
00288D  3               
00288D  3               	lda #<prosh1		; processing routine.
00288D  3               	sta proshx+1
00288D  3               	lda #>prosh1
00288D  3               	sta proshx+2
00288D  3               	rts
00288D  3               
00288D  3               ;------------------------------------------------------
00288D  3               ; Particle engine.
00288D  3               ;
00288D  3               ; Init particle data for 55 particles in SHRAPN table.
00288D  3               ; Every particle has 6 bytes.
00288D  3               ;
00288D  3               ; global:	-
00288D  3               ; local:	x,y,hl
00288D  3               ; calls:	-
00288D  3               ;------------------------------------------------------
00288D  3               
00288D  3               inishr:
00288D  3               	lda #<SHRAPN 		; table.
00288D  3               	sta z80_l
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_h
00288D  3               
00288D  3               	ldy #0
00288D  3               	ldx #NUMSHR		; shrapnel pieces to process.
00288D  3               inish0:
00288D  3               	lda #255 		; kill the shrapnel.
00288D  3               	sta (z80_hl),y
00288D  3               
00288D  3               	clc 			; point there.
00288D  3               	lda z80_l
00288D  3               	adc #SHRSIZ		; distance to next.
00288D  3               	sta z80_l
00288D  3               	bcc :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	dex
00288D  3               	bne inish0 		; round again.
00288D  3               	rts
00288D  3               
00288D  3               ;------------------------------------------------------
00288D  3               ; Check for collision between laser and sprite.
00288D  3               ;------------------------------------------------------
00288D  3               
00288D  3               lcol:
00288D  3               	lda #<SHRAPN		; shrapnel table.
00288D  3               	sta z80_l
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_h
00288D  3               
00288D  3               	lda #NUMSHR		; number of pieces in table.
00288D  3               	sta z80_b
00288D  3               lcol0:
00288D  3               	ldy #0
00288D  3               	lda (z80_hl),y 		; get type.
00288D  3               	beq lcol1		; yes, check collision.
00288D  3               lcol3:
00288D  3               	clc			; point to more shrapnel.
00288D  3               	lda z80_l
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_l
00288D  3               	bcc :+
00288D  3               	inc z80_h
00288D  3               :
00288D  3               	dec z80_b		; repeat for all shrapnel.
00288D  3               	bne lcol0
00288D  3               	rts 			; no collision, carry not set.
00288D  3               lcol1:
00288D  3               	ldy #3
00288D  3               	lda (z80_hl),y		; get y.
00288D  3               	sec
00288D  3               	ldy #8
00288D  3               	sbc (z80_ix),y		; subtract sprite y.
00288D  3               lcolh:
00288D  3               	cmp #SPR_HGT 		; within range?
00288D  3               	bcc :+
00288D  3               	jmp lcol2		; no, missed.
00288D  3               :
00288D  3               	ldy #5
00288D  3               	lda (z80_hl),y 		; get x.
00288D  3               	sec
00288D  3               	ldy #9
00288D  3               	sbc (z80_ix),y 		; subtract sprite y.
00288D  3               	cmp #16			; within range?
00288D  3               	bcs :+
00288D  3               	jmp lcol4 		; yes, collision occurred.
00288D  3               :
00288D  3               lcol2:
00288D  3               	jmp lcol3
00288D  3               lcol4:
00288D  3               	sec
00288D  3               	rts 			; return with carry set for collision.
00288D  3               .endif
00288D  3               
00288D  3               ;------------------------------------------------------
00288D  3               ; Main game engine code starts here.
00288D  3               ; After initialisation, mloop is the main loop
00288D  3               ;------------------------------------------------------
00288D  3               
00288D  3               game:
00288D  3               
00288D  3               
00288D  3               ; Init hardware and graphics mode
00288D  3               
00288D  3  20 0F 4E     	jsr init 		; Init hardware
002890  3               
002890  3               ; Init joystick
002890  3               
002890  3  20 1D 4F     	jsr joyinit		; Init joystick
002893  3               
002893  3               rpblc2:
002893  3               .if pflag
002893  3               	jsr inishr 		; initialise particle engine.
002893  3               .endif
002893  3               evintr:
002893  3  20 24 3D     	jsr evnt12 		; call intro/menu event.
002896  3               
002896  3  A9 02        	lda #WALL 		; write default property.
002898  3  A2 00        	ldx #0
00289A  3               clrmap:
00289A  3  9D 00 D8     	sta MAP,x 		; block properties.
00289D  3  9D 00 D9     	sta MAP+256,x
0028A0  3  9D 00 DA     	sta MAP+512,x
0028A3  3  9D 00 DB     	sta MAP+768,x
0028A6  3  E8           	inx			; next byte.
0028A7  3  D0 F1        	bne clrmap
0028A9  3               
0028A9  3               .if oflag
0028A9  3               	jsr iniob 		; initialise objects.
0028A9  3               .endif
0028A9  3  A9 00        	lda #0			; put zero in accumulator.
0028AB  3  85 rr        	sta gamwon		; reset game won flag.
0028AD  3               
0028AD  3  20 18 2A     	jsr inisc 		; init the score.
0028B0  3               mapst:
0028B0  3  AD 5F 38     	lda stmap 		; start position on map.
0028B3  3  8D 42 38     	sta roomtb		; set up position in table, if there is one.
0028B6  3               
0028B6  3               inipbl:
0028B6  3               .if aflag
0028B6  3               	lda #<eop		; reset blockpointer
0028B6  3               	sta pbptr
0028B6  3               	lda #>eop
0028B6  3               	sta pbptr+1
0028B6  3               .endif
0028B6  3               
0028B6  3  20 2A 34     	jsr initsc 		; set up first screen.
0028B9  3               
0028B9  3  A9 31        	lda #<ssprit 		; default to spare sprite in table.
0028BB  3  85 68        	sta z80_x
0028BD  3  A9 38        	lda #>ssprit
0028BF  3  85 69        	sta z80_i
0028C1  3               evini:
0028C1  3  20 B4 3D     	jsr evnt13 		; initialisation.
0028C4  3               
0028C4  3               ; Two restarts.
0028C4  3               ; First restart - clear all sprites and initialise everything.
0028C4  3               
0028C4  3               rstrt:
0028C4  3  20 B8 29     	jsr rsevt 		; restart events.
0028C7  3  20 40 28     	jsr xspr 		; clear sprite table.
0028CA  3  20 96 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028CD  3  20 1F 36     	jsr ispr 		; initialise sprite table.
0028D0  3               
0028D0  3  4C DF 28     	jmp rstrt0
0028D3  3               
0028D3  3               ; Second restart - clear all but player, and don't initialise him.
0028D3  3               
0028D3  3               rstrtn:
0028D3  3  20 B8 29     	jsr rsevt		; restart events.
0028D6  3  20 C3 35     	jsr nspr 		; clear all non-player sprites.
0028D9  3  20 96 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028DC  3  20 5C 36     	jsr kspr 		; initialise sprite table, no more players.
0028DF  3               
0028DF  3               ; Set up the player and/or enemy sprites.
0028DF  3               
0028DF  3               rstrt0:
0028DF  3  A9 00        	lda #0 			; zero in accumulator.
0028E1  3  85 rr        	sta nexlev 		; reset next level flag.
0028E3  3  85 rr        	sta restfl 		; reset restart flag.
0028E5  3  85 rr        	sta deadf 		; reset dead flag.
0028E7  3               
0028E7  3  20 2D 2D     	jsr droom 		; show screen layout.
0028EA  3               
0028EA  3               rpblc0:
0028EA  3               .if pflag
0028EA  3               	jsr inishr 		; initialise particle engine.
0028EA  3               .endif
0028EA  3               .if aflag
0028EA  3               	jsr rbloc		; draw blocks for this screen
0028EA  3               .endif
0028EA  3               .if oflag
0028EA  3               	jsr shwob		; draw objects.
0028EA  3               .endif
0028EA  3               
0028EA  3  A9 65        	lda #<sprtab 		; address of sprite table, even sprites.
0028EC  3  85 68        	sta z80_x
0028EE  3  A9 37        	lda #>sprtab
0028F0  3  85 69        	sta z80_i
0028F2  3  20 DA 31     	jsr dspr 		; display sprites.
0028F5  3               
0028F5  3  A9 76        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0028F7  3  85 68        	sta z80_x
0028F9  3  A9 37        	lda #>(sprtab+TABSIZ)
0028FB  3  85 69        	sta z80_i
0028FD  3  20 DA 31     	jsr dspr 		; display sprites.
002900  3               
002900  3               
002900  3               mloop:
002900  3  20 F9 4E     	jsr vsync 		; synchronise with display.
002903  3  A9 65        	lda #<sprtab 		; address of sprite table, even sprites.
002905  3  85 68        	sta z80_x
002907  3  A9 37        	lda #>sprtab
002909  3  85 69        	sta z80_i
00290B  3  20 DA 31     	jsr dspr 		; display even sprites.
00290E  3               
00290E  3               ;	jsr plsnd 		; play sounds.
00290E  3               
00290E  3  20 8C 28     	jsr proshr
002911  3  A9 76        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002913  3  85 68        	sta z80_x
002915  3  A9 37        	lda #>(sprtab+TABSIZ)
002917  3  85 69        	sta z80_i
002919  3  20 DA 31     	jsr dspr 		; display odd sprites.
00291C  3               
00291C  3  A9 31        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00291E  3  85 68        	sta z80_x
002920  3  A9 38        	lda #>(ssprit)
002922  3  85 69        	sta z80_i
002924  3               evlp1:
002924  3  20 DB 3C     	jsr evnt10 		; called once per main loop.
002927  3               
002927  3  20 58 31     	jsr pspr 		; process sprites.
00292A  3               
00292A  3               ; Main loop events.
00292A  3               
00292A  3  A9 31        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00292C  3  85 68        	sta z80_x
00292E  3  A9 38        	lda #>ssprit
002930  3  85 69        	sta z80_i
002932  3               evlp2:
002932  3  20 23 3D     	jsr evnt11 		; called once per main loop.
002935  3               bsortx:
002935  3  20 CE 30     	jsr bsort 		; sort sprites.
002938  3               
002938  3  A5 rr        	lda nexlev		; finished level flag.
00293A  3  F0 03        	beq :+
00293C  3  4C 64 29     	jmp newlev		; is set, go to next level.
00293F  3               :
00293F  3  A5 rr        	lda gamwon		; finished game flag.
002941  3  F0 03        	beq :+
002943  3  4C 73 29     	jmp evwon		; is set, finish the game.
002946  3               :
002946  3  A5 rr        	lda restfl 		; finished level flag.
002948  3  C9 01        	cmp #1			; has it been set?
00294A  3  D0 03        	bne :+
00294C  3  4C C4 28     	jmp rstrt		; yes, go to next level.
00294F  3               :
00294F  3  C9 02        	cmp #2			; has it been set?
002951  3  D0 03        	bne :+
002953  3  4C D3 28     	jmp rstrtn		; yes, go to next level.
002956  3               :
002956  3  A5 rr        	lda deadf 		; dead flag.
002958  3  F0 03        	beq :+
00295A  3  4C 79 29     	jmp pdead		; yes, player dead.
00295D  3               :
00295D  3               ; back to start of main loop.
00295D  3               
00295D  3  E6 rr        	inc frmno
00295F  3  E6 rr        	inc clock
002961  3  4C 00 29     	jmp mloop		; switched to a jmp mloop during test mode.
002964  3               
002964  3               ;----------------------------------------------------------
002964  3               ; Read blocks from list and update screen accordingly.
002964  3               ;----------------------------------------------------------
002964  3               
002964  3               .if aflag
002964  3               rbloc:
002964  3               	lda #<eop		; reset temp blockpointer
002964  3               	sta pbbuf
002964  3               	lda #>eop
002964  3               	sta pbbuf+1
002964  3               
002964  3               rbloc2:
002964  3               	lda pbbuf			; check for last block
002964  3               	cmp pbptr
002964  3               	bne rbloc1
002964  3               	lda pbbuf+1
002964  3               	cmp pbptr+1
002964  3               	bne rbloc1
002964  3               	rts
002964  3               rbloc1:
002964  3               	ldy #0
002964  3               	lda (pbbuf),y		; check if block for this scno
002964  3               	cmp scno
002964  3               	bne rbloc0		; if not, skip
002964  3               	iny
002964  3               	lda (pbbuf),y		; get y
002964  3               	sta dispy
002964  3               	iny
002964  3               	lda (pbbuf),y		; get x
002964  3               	sta dispx
002964  3               	iny
002964  3               	lda (pbbuf),y		; get blocknr
002964  3               	jsr pattr2		; draw block
002964  3               rbloc0:
002964  3               	clc			; point to next block
002964  3               	lda pbbuf
002964  3               	adc #4
002964  3               	sta pbbuf
002964  3               	bcc rbloc2
002964  3               	inc pbbuf+1
002964  3               	jmp rbloc2
002964  3               .endif
002964  3               
002964  3               ;----------------------------------------------------------
002964  3               ; New level
002964  3               ;----------------------------------------------------------
002964  3               
002964  3               newlev:
002964  3  A5 rr        	lda scno 			; current screen.
002966  3  18           	clc
002967  3  69 01        	adc #1				; next screen.
002969  3  CD CF 4A     	cmp numsc			; total number of screens.
00296C  3  B0 05        	bcs evwon			; yes, game finished.
00296E  3  85 rr        	sta scno			; set new level number.
002970  3  4C C4 28     	jmp rstrt			; restart, clearing all aliens.
002973  3               
002973  3               evwon:
002973  3  20 F4 3D     	jsr evnt18		 	; game completed.
002976  3  4C 8D 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002979  3               
002979  3               ;----------------------------------------------------------
002979  3               ; Player dead.
002979  3               ;----------------------------------------------------------
002979  3               
002979  3               pdead:
002979  3  A9 00        	lda #0				; zeroise accumulator.
00297B  3  85 rr        	sta deadf			; reset dead flag.
00297D  3               evdie:
00297D  3  20 BF 3D     	jsr evnt16 			; death subroutine.
002980  3  A5 rr        	lda numlif			; number of lives.
002982  3  F0 03        	beq :+
002984  3  4C C4 28     	jmp rstrt 			; restart game.
002987  3               :
002987  3               evfail:
002987  3  20 D0 3D     	jsr evnt17 			; failure event.
00298A  3  4C 8D 28     	jmp game			; restart game
00298D  3               
00298D  3               ;----------------------------------------------------------
00298D  3               ; Tidy things up
00298D  3               ;----------------------------------------------------------
00298D  3               
00298D  3               tidyup:
00298D  3  A0 00        	ldy #0				; digits to check.
00298F  3               tidyu2:
00298F  3  B9 01 2B     	lda score,y 			; get score digit.
002992  3  CD 07 2B     	cmp hiscor 			; are we larger than high score digit?
002995  3  90 07        	bcc tidyu0			; high score is bigger.
002997  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002999  3  C8           	iny				; next digit of high score.
00299A  3  C0 06        	cpy #6
00299C  3  D0 F1        	bne tidyu2			; repeat for all digits
00299E  3               tidyu0:
00299E  3  A9 01        	lda #<score			; return pointing to score.
0029A0  3  85 62        	sta z80_c
0029A2  3  A9 2B        	lda #>score
0029A4  3  85 63        	sta z80_b
0029A6  3  60           	rts
0029A7  3               tidyu1:
0029A7  3  A0 05        	ldy #5
0029A9  3               tidyu3:
0029A9  3  B9 01 2B     	lda score,y			; score.
0029AC  3  99 07 2B     	sta hiscor,y			; high score.
0029AF  3  88           	dey
0029B0  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029B2  3               evnewh:
0029B2  3  20 F5 3D     	jsr evnt19			; new high score event.
0029B5  3  4C 9E 29     	jmp tidyu0			; tidy up.
0029B8  3               
0029B8  3               ;--------------------------------------------------
0029B8  3               ; Restart event.
0029B8  3               ;--------------------------------------------------
0029B8  3               
0029B8  3               rsevt:
0029B8  3  A9 31        	lda #<ssprit 			; default to spare element in table.
0029BA  3  85 68        	sta z80_x
0029BC  3  A9 38        	lda #>ssprit
0029BE  3  85 69        	sta z80_i
0029C0  3               evrs:
0029C0  3  4C B5 3D     	jmp evnt14	 		; call restart event.
0029C3  3               
0029C3  3               ;------------------------------------------------------------------
0029C3  3               ; Copy number passed in a to string position bc, right-justified.
0029C3  3               ;
0029C3  3               ; Input:
0029C3  3               ;  A  = number
0029C3  3               ;  BC = string address
0029C3  3               ;
0029C3  3               ; Output:
0029C3  3               ;  BC = string with number
0029C3  3               ;-----------------------------------------------------------------
0029C3  3               
0029C3  3               num2ch:
0029C3  3  85 65        	sta z80_d		; Save number
0029C5  3               
0029C5  3  A9 00        	lda #0
0029C7  3  85 rr        	sta flag
0029C9  3               numdg3:
0029C9  3  A2 64        	ldx #100		; hundreds column.
0029CB  3  86 64        	stx z80_e
0029CD  3  20 DD 29     	jsr numdg		; show digit.
0029D0  3               numdg2:
0029D0  3  A2 0A        	ldx #10			; tens column.
0029D2  3  86 64        	stx z80_e
0029D4  3  20 DD 29     	jsr numdg		; show digit.
0029D7  3               
0029D7  3  E6 rr        	inc flag
0029D9  3  A2 01        	ldx #1			; units column.
0029DB  3  86 64        	stx z80_e
0029DD  3               numdg:
0029DD  3  A9 30        	lda #48			; clear digit.
0029DF  3  85 61        	sta z80_a
0029E1  3               numdg1:
0029E1  3  A5 65        	lda z80_d
0029E3  3  C5 64        	cmp z80_e
0029E5  3  90 0E        	bcc numdg0		; nothing to show.
0029E7  3  38           	sec
0029E8  3  A5 65        	lda z80_d
0029EA  3  E5 64        	sbc z80_e		; subtract from column.
0029EC  3  85 65        	sta z80_d
0029EE  3  E6 61        	inc z80_a		; increment digit.
0029F0  3  E6 rr        	inc flag
0029F2  3  4C E1 29     	jmp numdg1		; repeat until column is zero.
0029F5  3               numdg0:
0029F5  3  A0 00        	ldy #0
0029F7  3  A5 61        	lda z80_a
0029F9  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0029FB  3  A5 rr        	lda flag
0029FD  3  F0 06        	beq :+
0029FF  3  E6 62        	inc z80_c		; next buffer position.
002A01  3  D0 02        	bne :+
002A03  3  E6 63        	inc z80_b
002A05  3               :
002A05  3  60           	rts
002A06  3               num2dd:
002A06  3  85 65        	sta z80_d		; Save number
002A08  3               
002A08  3  A9 01        	lda #1
002A0A  3  85 rr        	sta flag
002A0C  3               
002A0C  3  4C D0 29     	jmp numdg2
002A0F  3               num2td:
002A0F  3  85 65        	sta z80_d		; Save number
002A11  3               
002A11  3  A9 01        	lda #1
002A13  3  85 rr        	sta flag
002A15  3  4C C9 29     	jmp numdg3
002A18  3               
002A18  3               ;flag:	.byte 0
002A18  3               
002A18  3               ;---------------------------------------------------------
002A18  3               ; Reset score to "000000"
002A18  3               ;---------------------------------------------------------
002A18  3               
002A18  3               inisc:
002A18  3  A9 30        	lda #'0'
002A1A  3  A2 05        	ldx #5			; digits to initialise.
002A1C  3               inisc0:
002A1C  3  9D 01 2B     	sta score,x 		; write zero digit.
002A1F  3  CA           	dex			; next column.
002A20  3  10 FA        	bpl inisc0		; repeat for all digits.
002A22  3               
002A22  3  60           	rts
002A23  3               
002A23  3               ;-----------------------------------------------------
002A23  3               ; Multiply h by d and return in hl.
002A23  3               ;
002A23  3               ; Input:
002A23  3               ;  H = first number
002A23  3               ;  D = second number
002A23  3               ;
002A23  3               ; Output:
002A23  3               ;  HL = result H x D
002A23  3               ;-----------------------------------------------------
002A23  3               
002A23  3               imul:
002A23  3  A5 65        	lda z80_d		; HL = H * D
002A25  3  85 64        	sta z80_e
002A27  3  A5 67        	lda z80_h
002A29  3  85 62        	sta z80_c		; make c first multiplier.
002A2B  3               imul0:
002A2B  3  A9 00        	lda #0			; zeroise total.
002A2D  3  85 66        	sta z80_l
002A2F  3  85 67        	sta z80_h
002A31  3               
002A31  3  A5 67        	lda z80_h
002A33  3  85 65        	sta z80_d		; zeroise high byte.
002A35  3               
002A35  3  A9 08        	lda #8			; repeat 8 times.
002A37  3  85 63        	sta z80_b
002A39  3               imul1:
002A39  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A3B  3  90 0E        	bcc imul2		; wasn't set.
002A3D  3  18           	clc			; bit was set, so add de.
002A3E  3  A5 66        	lda z80_l
002A40  3  65 64        	adc z80_e
002A42  3  85 66        	sta z80_l
002A44  3  A5 67        	lda z80_h
002A46  3  65 65        	adc z80_d
002A48  3  85 67        	sta z80_h
002A4A  3  18           	clc 			; reset carry.
002A4B  3               imul2:
002A4B  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A4D  3  26 65        	rol z80_d
002A4F  3  C6 63        	dec z80_b
002A51  3  D0 E6        	bne imul1		; repeat 8 times.
002A53  3               
002A53  3  60           	rts
002A54  3               
002A54  3               ;-----------------------------------------------
002A54  3               ; Divide d by e and return in d, remainder in a.
002A54  3               ;
002A54  3               ; Input:
002A54  3               ;  D = first number
002A54  3               ;  E = second number
002A54  3               ;
002A54  3               ; Output:
002A54  3               ;  D = result D/E
002A54  3               ;  A = remainder
002A54  3               ;-----------------------------------------------
002A54  3               
002A54  3               idiv:
002A54  3  A9 00        	lda #0
002A56  3  A0 08        	ldy #8		 	; bits to shift.
002A58  3  06 65        	asl z80_d
002A5A  3               idiv0:
002A5A  3  2A           	rol a 			; multiply d by 2.
002A5B  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A5D  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A5F  3  E5 64        	sbc z80_e		; subtract it.
002A61  3               idiv1:
002A61  3  26 65        	rol z80_d		; rotate into d.
002A63  3  88           	dey
002A64  3  D0 F4        	bne idiv0		; repeat
002A66  3  60           	rts
002A67  3               
002A67  3               ;---------------------------------------------------
002A67  3               ; Play AY sound effect
002A67  3               ;---------------------------------------------------
002A67  3               
002A67  3               plsnd:
002A67  3  60           	rts
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Objects handling.
002A68  3               ; 32 bytes for image
002A68  3               ; 3 for room, y and x
002A68  3               ; 3 for starting room, y and x.
002A68  3               ; 254 = disabled.
002A68  3               ; 255 = object in player"s pockets.
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Show items present.
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               .if oflag
002A68  3               shwob:
002A68  3               	lda #<objdta 			; objects table.
002A68  3               	sta z80_l
002A68  3               	lda #>objdta
002A68  3               	sta z80_h
002A68  3               
002A68  3               	lda numob 			; number of objects in the game.
002A68  3               	sta sprcnt
002A68  3               shwob0:
002A68  3               	ldy #32 			; distance to room number.
002A68  3               	lda (z80_hl),y 			; same as an item?
002A68  3               	cmp scno 			; current location.
002A68  3               	bne :+
002A68  3               	jsr dobj 			; yes, display object.
002A68  3               :
002A68  3               	clc
002A68  3               	lda z80_l
002A68  3               	adc #38 			; distance to next item.
002A68  3               	sta z80_l
002A68  3               	lda z80_h
002A68  3               	adc #0
002A68  3               	sta z80_h	 		; point to it.
002A68  3               	dec sprcnt
002A68  3               	bne shwob0 			; repeat for others.
002A68  3               	rts
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Display object.
002A68  3               ; hl must point to object's start address.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  HL = object address
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               dobj:
002A68  3               	ldy #33
002A68  3               	lda (z80_hl),y 			; point to y.
002A68  3               	sta dispy
002A68  3               	iny
002A68  3               	lda (z80_hl),y 			; point to x.
002A68  3               	sta dispx
002A68  3               dobj1:
002A68  3               	jmp sprite 			; draw this sprite.
002A68  3               
002A68  3               ;--------------------------------------
002A68  3               ; Remove an object.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;--------------------------------------
002A68  3               
002A68  3               remob:
002A68  3               	cmp numob			; number of objects in game.
002A68  3               	bcc :+				; are we checking past the end?
002A68  3               	rts				; yes, can't get non-existent item.
002A68  3               :
002A68  3               	pha				; remember object.
002A68  3               	jsr getob			; pick it up if we haven't already got it.
002A68  3               	pla				; retrieve object number.
002A68  3               	jsr gotob			; get its address.
002A68  3               	lda #254
002A68  3               	ldy #32
002A68  3               	sta (z80_hl),y			; remove it.
002A68  3               	rts
002A68  3               
002A68  3               ;---------------------------------------------------
002A68  3               ; Pick up object number held in the accumulator.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;---------------------------------------------------
002A68  3               
002A68  3               getob:
002A68  3               	cmp numob 		; number of objects in game.
002A68  3               	bcc :+			; are we checking past the end?
002A68  3               	rts			; yes, can't get non-existent item.
002A68  3               :
002A68  3               	jsr gotob 		; check if we already have it.
002A68  3               	cmp #255
002A68  3               	bne :+
002A68  3               	rts			; we already do.
002A68  3               :
002A68  3               	ldy #32
002A68  3               	lda (z80_hl),y		; is it on this screen?
002A68  3               	cmp scno 		; current screen.
002A68  3               	bne getob0		; not on screen, so nothing to delete.
002A68  3               
002A68  3               	lda #255
002A68  3               	sta (z80_hl),y		; pick it up.
002A68  3               	iny 			; point to y coord.
002A68  3               getob1:
002A68  3               	ldy #33
002A68  3               	lda (z80_hl),y		; y coord.
002A68  3               	sta dispy
002A68  3               	ldy #34
002A68  3               	lda (z80_hl),y 		; x coord.
002A68  3               	sta dispx
002A68  3               	jmp dobj1 		; delete object sprite.
002A68  3               getob0:
002A68  3               	lda #255
002A68  3               	sta (z80_hl),y 		; pick it up.
002A68  3               	rts
002A68  3               .endif
002A68  3               
002A68  3               ;-----------------------------------------------------------------
002A68  3               ; Got object check.
002A68  3               ; Call with object in accumulator, returns zero set if in pockets.
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;-----------------------------------------------------------------
002A68  3               .if oflag .or mflag
002A68  3               gotob:
002A68  3               	cmp numob 		; number of objects in game.
002A68  3               	bcc :+ 			; are we checking past the end?
002A68  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A68  3               :
002A68  3               	jsr findob		; find the object.
002A68  3               gotob1:
002A68  3               	rts
002A68  3               
002A68  3               gotob0:
002A68  3               	lda #254 		; missing.
002A68  3               	jmp gotob1
002A68  3               
002A68  3               findob:
002A68  3               	pha			; save object number
002A68  3               	lda #<objdta 		; objects.
002A68  3               	sta z80_l
002A68  3               	lda #>objdta
002A68  3               	sta z80_h
002A68  3               	pla			; retreive object number
002A68  3               	beq fndob1 		; is it zero? yes, skip loop.
002A68  3               	tax 			; loop counter
002A68  3               fndob2:
002A68  3               	clc
002A68  3               	lda z80_l
002A68  3               	adc #38 		; size of each object.
002A68  3               	sta z80_l
002A68  3               	bcc :+
002A68  3               	inc z80_h
002A68  3               :
002A68  3               	dex 			; repeat until we find address.
002A68  3               	bne fndob2
002A68  3               fndob1:
002A68  3               	ldy #32			; distance to room it's in.
002A68  3               	lda (z80_hl),y		; fetch status.
002A68  3               	rts
002A68  3               .endif
002A68  3               
002A68  3               ;---------------------------------------------
002A68  3               ; Drop object number at (dispx, dispy).
002A68  3               ;
002A68  3               ; Input:
002A68  3               ;  A = object number
002A68  3               ;---------------------------------------------
002A68  3               
002A68  3               .if oflag
002A68  3               drpob:
002A68  3               	cmp numob 		; are we checking past the end?
002A68  3               	bcc :+
002A68  3               	rts			; yes, can't drop non-existent item.
002A68  3               :
002A68  3               	jsr gotob		; make sure object is in inventory.
002A68  3               	cmp scno		; already on this screen?
002A68  3               	bne :+
002A68  3               	rts			; yes, nothing to do.
002A68  3               :
002A68  3               	ldy #32
002A68  3               	lda scno
002A68  3               	sta (z80_hl),y		; bring onto screen.
002A68  3               	lda dispy		; sprite y coordinate.
002A68  3               	iny
002A68  3               	sta (z80_hl),y		; point to object y.
002A68  3               	lda dispx 		; sprite x coordinate.
002A68  3               	iny
002A68  3               	sta (z80_hl),y 		; point to object x
002A68  3               	jmp dobj		; draw the object sprite.
002A68  3               
002A68  3               ;-----------------------------------------------
002A68  3               ; Seek objects at sprite position.
002A68  3               ;
002A68  3               ; Output:
002A68  3               ;  A = object number, if not found A=255
002A68  3               ;-----------------------------------------------
002A68  3               
002A68  3               skobj:
002A68  3               	lda #<objdta 		; pointer to objects.
002A68  3               	sta z80_l
002A68  3               	lda #>objdta
002A68  3               	sta z80_h
002A68  3               
002A68  3               	lda numob 		; number of objects in game.
002A68  3               	sta z80_b 		; set up the loop counter.
002A68  3               skobj0:
002A68  3               	lda scno		; current room number.
002A68  3               	ldy #32
002A68  3               	cmp (z80_hl),y		; is object in here?
002A68  3               	bne :+
002A68  3               	jsr skobj1		; yes, check coordinates.
002A68  3               :
002A68  3               	clc			; point to next object in table.
002A68  3               	lda z80_l
002A68  3               	adc #38			; size of each object.
002A68  3               	sta z80_l
002A68  3               	bcc :+
002A68  3               	inc z80_h
002A68  3               :
002A68  3               	dec z80_b
002A68  3               	bne skobj0		; repeat for all objects.
002A68  3               
002A68  3               	lda #255		; end of list and nothing found, return 255.
002A68  3               	rts
002A68  3               
002A68  3               skobj1:
002A68  3               	ldy #33			; point to y coordinate.
002A68  3               	lda (z80_hl),y		; point to y coordinate.
002A68  3               	sec
002A68  3               	ldy #8
002A68  3               	sbc (z80_ix),y 		; subtract sprite y.
002A68  3               	clc
002A68  3               	adc #15			; add sprite height minus one.
002A68  3               	cmp #31			; within range?
002A68  3               	bcs skobj2		; no, ignore object.
002A68  3               
002A68  3               	ldy #34			; point to x coordinate now.
002A68  3               	lda (z80_hl),y 		; get coordinate.
002A68  3               	sec
002A68  3               	ldy #9
002A68  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A68  3               	clc			; add sprite width minus one.
002A68  3               	adc #15
002A68  3               	cmp #31			; within range?
002A68  3               	bcs skobj2		; no, ignore object.
002A68  3               
002A68  3               	pla			; remove return address from stack.
002A68  3               	pla
002A68  3               
002A68  3               	lda numob 		; objects in game.
002A68  3               	sec
002A68  3               	sbc z80_b		; subtract loop counter.
002A68  3               skobj2:
002A68  3               	rts			; accumulator now points to object.
002A68  3               .endif
002A68  3               
002A68  3               ;---------------------------------------------------------------------
002A68  3               ; Spawn a new sprite.
002A68  3               ;---------------------------------------------------------------------
002A68  3               
002A68  3               .if gflag
002A68  3                 offset = 0
002A68  3               .else
002A68  3                 offset = 20
002A68  3               .endif
002A68  3               
002A68  3               spawn:
002A68  3  A9 65        	lda #<sprtab		; sprite table.
002A6A  3  85 66        	sta z80_l
002A6C  3  A9 37        	lda #>sprtab
002A6E  3  85 67        	sta z80_h
002A70  3               numsp1:
002A70  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A72  3  85 rr        	sta spcnt
002A74  3               spaw0:
002A74  3  A0 00        	ldy #0
002A76  3  B1 66        	lda (z80_hl),y		; get sprite type.
002A78  3  C9 FF        	cmp #255		; is it an unused slot?
002A7A  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002A7C  3               
002A7C  3  18           	clc 			; point to next sprite in table.
002A7D  3  A5 66        	lda z80_l
002A7F  3  69 11        	adc #TABSIZ		; size of each entry.
002A81  3  85 66        	sta z80_l
002A83  3  90 02        	bcc :+
002A85  3  E6 67        	inc z80_h
002A87  3               :
002A87  3  C6 rr        	dec spcnt		; one less iteration.
002A89  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002A8B  3               
002A8B  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002A8B  3               
002A8B  3               spaw1:
002A8B  3  A5 69        	lda z80_i		; address of original sprite.
002A8D  3  48           	pha
002A8E  3  A5 68        	lda z80_x
002A90  3  48           	pha
002A91  3               
002A91  3  A5 66        	lda z80_l		; store spawned sprite address.
002A93  3  85 rr        	sta spptr
002A95  3  A5 67        	lda z80_h
002A97  3  85 rr        	sta spptr+1
002A99  3               
002A99  3  A5 62        	lda z80_c
002A9B  3  A0 00        	ldy #0
002A9D  3  91 66        	sta (z80_hl),y 		; set the type.
002A9F  3  A0 05        	ldy #5
002AA1  3  91 66        	sta (z80_hl),y		; copy
002AA3  3               
002AA3  3  A5 63        	lda z80_b
002AA5  3  A0 01        	ldy #1
002AA7  3  91 66        	sta (z80_hl),y		; set the image.
002AA9  3  A0 06        	ldy #6
002AAB  3  91 66        	sta (z80_hl),y		; copy
002AAD  3               
002AAD  3  A9 00        	lda #0 			; frame zero.
002AAF  3  A0 02        	ldy #2
002AB1  3  91 66        	sta (z80_hl),y		; set frame.
002AB3  3  A0 07        	ldy #7
002AB5  3  91 66        	sta (z80_hl),y		; copy
002AB7  3               
002AB7  3  A0 08        	ldy #8
002AB9  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002ABB  3  A0 03        	ldy #3
002ABD  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002ABF  3  A0 08        	ldy #8
002AC1  3  91 66        	sta (z80_hl),y		; copy
002AC3  3               
002AC3  3  A0 09        	ldy #9
002AC5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AC7  3  A0 04        	ldy #4
002AC9  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002ACB  3  A0 09        	ldy #9
002ACD  3  91 66        	sta (z80_hl),y		; copy
002ACF  3               
002ACF  3  A0 0A        	ldy #10			; direction of original.
002AD1  3  B1 68        	lda (z80_ix),y
002AD3  3  91 66        	sta (z80_hl),y		; direction
002AD5  3               
002AD5  3  A9 00        	lda #0
002AD7  3  A0 0B        	ldy #11
002AD9  3  91 66        	sta (z80_hl),y		; reset parameter.
002ADB  3  C8           	iny
002ADC  3  91 66        	sta (z80_hl),y		; reset parameter.
002ADE  3  C8           	iny
002ADF  3  91 66        	sta (z80_hl),y		; reset parameter.
002AE1  3  C8           	iny
002AE2  3  91 66        	sta (z80_hl),y		; reset parameter.
002AE4  3               rtssp:
002AE4  3  A5 rr        	lda spptr		; address of new sprite.
002AE6  3  85 68        	sta z80_x
002AE8  3  A5 rr        	lda spptr+1
002AEA  3  85 69        	sta z80_i
002AEC  3               evis1:
002AEC  3  20 B8 3C     	jsr evnt09 		; call sprite initialisation event.
002AEF  3               
002AEF  3  A5 rr        	lda spptr 		; address of new sprite.
002AF1  3  85 68        	sta z80_x
002AF3  3  A5 rr        	lda spptr+1
002AF5  3  85 69        	sta z80_i
002AF7  3  20 6E 4F     	jsr sspria 		; display the new sprite.
002AFA  3               
002AFA  3  68           	pla			; address of original sprite.
002AFB  3  85 68        	sta z80_x
002AFD  3  68           	pla
002AFE  3  85 69        	sta z80_i
002B00  3               
002B00  3  60           	rts
002B01  3               
002B01  3               ;spcnt:	.byte 0
002B01  3               ;spptr:	.word 0			; spawned sprite pointer.
002B01  3               ;seed:	.byte 0			; seed for random numbers.
002B01  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B05  3  30 30        
002B07  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B0B  3  30 30        
002B0D  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B11  3  30 30        
002B13  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B15  3               
002B15  3               ;----------------------------------------------------
002B15  3               ; Check y-pos
002B15  3               ;----------------------------------------------------
002B15  3               
002B15  3               checkx:
002B15  3  A5 rr        	lda dispy		; y position.
002B17  3  C9 19        	cmp #ScrHeight			; off screen?
002B19  3  B0 01        	bcs :+
002B1B  3  60           	rts			; no, it's okay.
002B1C  3               :
002B1C  3  68           	pla			; remove return address from stack.
002B1D  3  85 66        	sta z80_l
002B1F  3  68           	pla
002B20  3  85 67        	sta z80_h
002B22  3  60           	rts
002B23  3               
002B23  3               ;-----------------------------------------------
002B23  3               ; Displays the current high score.
002B23  3               ;-----------------------------------------------
002B23  3               
002B23  3               dhisc:
002B23  3  A9 07        	lda #<hiscor 		; high score text.
002B25  3  8D 5A 2B     	sta dscor3+1
002B28  3  8D 7E 2B     	sta bscor3+1
002B2B  3  A9 2B        	lda #>hiscor
002B2D  3  8D 5B 2B     	sta dscor3+2
002B30  3  8D 7F 2B     	sta bscor3+2
002B33  3  4C 46 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B36  3               
002B36  3               ;------------------------------------------------------
002B36  3               ; Displays the current score.
002B36  3               ;------------------------------------------------------
002B36  3               
002B36  3               dscor:
002B36  3  A9 01        	lda #<score		; score text.
002B38  3  8D 5A 2B     	sta dscor3+1
002B3B  3  8D 7E 2B     	sta bscor3+1
002B3E  3  A9 2B        	lda #>score
002B40  3  8D 5B 2B     	sta dscor3+2
002B43  3  8D 7F 2B     	sta bscor3+2
002B46  3               dscor1:
002B46  3  8C 7A 2B     	sty tmpscr
002B49  3  20 AC 30     	jsr preprt		; set up font and print position.
002B4C  3  20 15 2B     	jsr checkx		; make sure we're in a printable range.
002B4F  3               
002B4F  3               ;	lda #6			; digits to display.
002B4F  3               ;	sta z80_b
002B4F  3  A5 rr        	lda prtmod		; get print mode.
002B51  3  F0 03        	beq :+			; standard size text?
002B53  3  4C 7B 2B     	jmp bscor0		; no, show double-height.
002B56  3               :
002B56  3               dscor0:
002B56  3               ;	ldy #0
002B56  3               ;	lda (z80_hl),y 		; fetch character.
002B56  3  AC 7A 2B     	ldy tmpscr
002B59  3               dscor3:
002B59  3  B9 01 2B     	lda score,y
002B5C  3  20 93 2C     	jsr pchar 		; display character.
002B5F  3  E6 rr        	inc dispx		; move along x coordinate
002B61  3               
002B61  3               ;	inc z80_l		; next score column.
002B61  3               ;	bne :+
002B61  3               ;	inc z80_h
002B61  3               ;:
002B61  3  EE 7A 2B     	inc tmpscr
002B64  3  C6 63        	dec z80_b
002B66  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B68  3               dscor2:
002B68  3  AD 54 38     	lda bcolour
002B6B  3  20 93 2C     	jsr pchar
002B6E  3  20 99 30     	jsr nexpos
002B71  3               
002B71  3  A5 rr        	lda dispx 		; set up display coordinates.
002B73  3  85 rr        	sta charx
002B75  3  A5 rr        	lda dispy
002B77  3  85 rr        	sta chary
002B79  3  60           	rts
002B7A  3               
002B7A  3  00           tmpscr:	.byte 0
002B7B  3               ;------------------------------------------------------
002B7B  3               ; Displays the current score in double-height characters.
002B7B  3               ;
002B7B  3               ; Input:
002B7B  3               ;  B  = digit number
002B7B  3               ;  HL = score string
002B7B  3               ;------------------------------------------------------
002B7B  3               
002B7B  3               bscor0:
002B7B  3               ;	ldy #0
002B7B  3               
002B7B  3               ;	lda (z80_hl),y 		; fetch character.
002B7B  3  A4 rr        	ldy tmp
002B7D  3               bscor3:
002B7D  3  B9 01 2B     	lda score,y
002B80  3  20 6A 30     	jsr bchar 		; display big char.
002B83  3               
002B83  3               ;	inc z80_l 		; next score column.
002B83  3               ;	bne :+
002B83  3               ;	inc z80_h
002B83  3               ;:
002B83  3  E6 rr        	inc tmp
002B85  3  C6 63        	dec z80_b
002B87  3  F0 03        	beq :+
002B89  3  4C 7B 2B     	jmp bscor0 		; repeat for all digits.
002B8C  3               :
002B8C  3  4C 68 2B     	jmp dscor2 		; tidy up line and column variables.
002B8F  3               
002B8F  3               ;-----------------------------------------------------
002B8F  3               ; Adds number in the hl pair to the score.
002B8F  3               ;-----------------------------------------------------
002B8F  3               
002B8F  3               addsc:
002B8F  3  A9 02        	lda #<(score+1) 	; ten thousands column.
002B91  3  85 64        	sta z80_e
002B93  3  A9 2B        	lda #>(score+1)
002B95  3  85 65        	sta z80_d
002B97  3  A9 10        	lda #<10000		; amount to add each time.
002B99  3  85 62        	sta z80_c
002B9B  3  A9 27        	lda #>10000
002B9D  3  85 63        	sta z80_b
002B9F  3  20 E3 2B     	jsr incsc		; add to score.
002BA2  3               
002BA2  3  E6 64        	inc z80_e		; thousands column.
002BA4  3  D0 02        	bne :+
002BA6  3  E6 65        	inc z80_d
002BA8  3               :
002BA8  3  A9 E8        	lda #<1000		; amount to add each time.
002BAA  3  85 62        	sta z80_c
002BAC  3  A9 03        	lda #>1000
002BAE  3  85 63        	sta z80_b
002BB0  3  20 E3 2B     	jsr incsc 		; add to score.
002BB3  3               
002BB3  3  E6 64        	inc z80_e		; hundreds column.
002BB5  3  D0 02        	bne :+
002BB7  3  E6 65        	inc z80_d
002BB9  3               :
002BB9  3  A9 64        	lda #<100		; amount to add each time.
002BBB  3  85 62        	sta z80_c
002BBD  3  A9 00        	lda #>100
002BBF  3  85 63        	sta z80_b
002BC1  3  20 E3 2B     	jsr incsc		; add to score.
002BC4  3               
002BC4  3  E6 64        	inc z80_e 		; tens column.
002BC6  3  D0 02        	bne :+
002BC8  3  E6 65        	inc z80_d
002BCA  3               :
002BCA  3  A9 0A        	lda #<10		; amount to add each time.
002BCC  3  85 62        	sta z80_c
002BCE  3  A9 00        	lda #>10
002BD0  3  85 63        	sta z80_b
002BD2  3  20 E3 2B     	jsr incsc 		; add to score.
002BD5  3               
002BD5  3  E6 64        	inc z80_e		; units column.
002BD7  3  D0 02        	bne :+
002BD9  3  E6 65        	inc z80_d
002BDB  3               :
002BDB  3  A9 01        	lda #<1			; units.
002BDD  3  85 62        	sta z80_c
002BDF  3  A9 00        	lda #>1
002BE1  3  85 63        	sta z80_b
002BE3  3               incsc:
002BE3  3  A5 67        	lda z80_h		; store amount to add.
002BE5  3  48           	pha
002BE6  3  A5 66        	lda z80_l
002BE8  3  48           	pha
002BE9  3               
002BE9  3  38           	sec			; subtract from amount to add.
002BEA  3  A5 66        	lda z80_l
002BEC  3  E5 62        	sbc z80_c
002BEE  3  85 66        	sta z80_l
002BF0  3  A5 67        	lda z80_h
002BF2  3  E5 63        	sbc z80_b
002BF4  3  85 67        	sta z80_h
002BF6  3  90 14        	bcc incsc0		; too much, restore value.
002BF8  3               
002BF8  3  68           	pla			; delete the previous amount from the stack.
002BF9  3  68           	pla
002BFA  3               
002BFA  3  A5 65        	lda z80_d 		; store column position.
002BFC  3  48           	pha
002BFD  3  A5 64        	lda z80_e
002BFF  3  48           	pha
002C00  3  20 13 2C     	jsr incsc2		; do the increment.
002C03  3               
002C03  3  68           	pla			; restore column.
002C04  3  85 64        	sta z80_e
002C06  3  68           	pla
002C07  3  85 65        	sta z80_d
002C09  3  4C E3 2B     	jmp incsc		; repeat until all added.
002C0C  3               
002C0C  3               incsc0:
002C0C  3  68           	pla			; restore previous value.
002C0D  3  85 66        	sta z80_l
002C0F  3  68           	pla
002C10  3  85 67        	sta z80_h
002C12  3  60           	rts
002C13  3               incsc2:
002C13  3  A0 00        	ldy #0
002C15  3  B1 64        	lda (z80_de),y 		; get amount.
002C17  3  18           	clc
002C18  3  69 01        	adc #1			; add one to column.
002C1A  3  91 64        	sta (z80_de),y		; write new column total.
002C1C  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C1E  3  B0 01        	bcs :+
002C20  3  60           	rts			; no, carry on.
002C21  3               :
002C21  3  A9 30        	lda #'0'		; make it zero.
002C23  3  91 64        	sta (z80_de),y		; write new column total.
002C25  3  C6 64        	dec z80_e		; back one column.
002C27  3  D0 02        	bne :+
002C29  3  C6 65        	dec z80_d
002C2B  3               :
002C2B  3  4C 13 2C     	jmp incsc2
002C2E  3               
002C2E  3               ;------------------------------------
002C2E  3               ; Add bonus to score and reset bonus
002C2E  3               ;------------------------------------
002C2E  3               
002C2E  3               addbo:
002C2E  3  A2 05        	ldx #5			; last digit.
002C30  3  18           	clc
002C31  3               addbo0:
002C31  3  BD 01 2B     	lda score,x		; get score.
002C34  3  7D 0D 2B     	adc bonus,x		; add bonus.
002C37  3  38           	sec			; 0 to 18.
002C38  3  E9 30        	sbc #48
002C3A  3  48           	pha
002C3B  3  A9 30        	lda #'0'
002C3D  3  9D 0D 2B     	sta bonus,x
002C40  3  68           	pla
002C41  3  C9 3A        	cmp #58
002C43  3  90 03        	bcc addbo1
002C45  3  38           	sec
002C46  3  E9 0A        	sbc #10
002C48  3               addbo1:
002C48  3  9D 01 2B     	sta score,x		; zeroise bonus.
002C4B  3  CA           	dex			; next digit.
002C4C  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C4E  3  60           	rts
002C4F  3               
002C4F  3               ;------------------------------------
002C4F  3               ; Swap score and bonus.
002C4F  3               ;------------------------------------
002C4F  3               
002C4F  3               swpsb:
002C4F  3  A2 05        	ldx #5			; digits to add.
002C51  3               swpsb0:
002C51  3  BD 01 2B     	lda score,x 		; get score digits.
002C54  3  48           	pha			; save digit
002C55  3  BD 0D 2B     	lda bonus,x 		; get bonus digits.
002C58  3  9D 01 2B     	sta score,x		; switch score-bonus
002C5B  3  68           	pla
002C5C  3  9D 0D 2B     	sta bonus,x
002C5F  3  CA           	dex 			; repeat for all 6 digits.
002C60  3  10 EF        	bpl swpsb0
002C62  3  60           	rts
002C63  3               
002C63  3               ;----------------------------------------------------
002C63  3               ; Get print address.
002C63  3               ;----------------------------------------------------
002C63  3               
002C63  3               gprad:
002C63  3  A5 rr        	lda dispy
002C65  3  85 rr        	sta tmp
002C67  3  0A           	asl a
002C68  3  18           	clc
002C69  3  65 rr        	adc tmp
002C6B  3  A8           	tay
002C6C  3  B9 00 DC     	lda SCADTB_lb,y
002C6F  3  18           	clc
002C70  3  65 rr        	adc dispx
002C72  3  85 rr        	sta scraddr
002C74  3  B9 00 DD     	lda SCADTB_hb,y
002C77  3  69 00        	adc #0
002C79  3  85 rr        	sta scraddr+1
002C7B  3  60           	rts
002C7C  3               
002C7C  3               ;--------------------------------------------------------------
002C7C  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002C7C  3               ;
002C7C  3               ; Output:
002C7C  3               ;  bufaddr = MAP + dispy*40 + dispx
002C7C  3               ;--------------------------------------------------------------
002C7C  3               
002C7C  3               pradd:
002C7C  3  A5 rr        	lda dispy 		; y coordinate.
002C7E  3  0A           	asl a
002C7F  3  18           	clc
002C80  3  65 rr        	adc dispy
002C82  3  AA           	tax
002C83  3               
002C83  3  18           	clc
002C84  3  BD 00 DC     	lda SCADTB_lb,x
002C87  3  65 rr        	adc dispx
002C89  3  85 rr        	sta bufaddr
002C8B  3               
002C8B  3  BD 00 DD     	lda SCADTB_hb,x
002C8E  3  69 D4        	adc #(>MAP->ScreenAddr)
002C90  3  85 rr        	sta bufaddr+1
002C92  3  60           	rts
002C93  3               
002C93  3               ;----------------------------------------------------
002C93  3               ; Display character in A at dispx,dispy.
002C93  3               ;
002C93  3               ; Input:
002C93  3               ;  A 	   = character to print
002C93  3               ;----------------------------------------------------
002C93  3               
002C93  3               pchar:
002C93  3  48           	pha
002C94  3  20 63 2C     	jsr gprad		; get screen address.
002C97  3               .if gflag
002C97  3               	and andeor
002C97  3               	eor andeor+1
002C97  3               .endif
002C97  3               .if iflag
002C97  3               	eor #$ff
002C97  3               .endif
002C97  3  68           	pla
002C98  3  A0 00        	ldy #0
002C9A  3  91 rr        	sta (scraddr),y 	; copy to screen.
002C9C  3  60           	rts
002C9D  3               
002C9D  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002CA1  3  60 40 20 00  
002CA5  3               
002CA5  3               ;----------------------------------------------
002CA5  3               
002CA5  3               ; Print attributes, properties and pixels.
002CA5  3               ;
002CA5  3               ; Input:
002CA5  3               ;  A	= tile number
002CA5  3               ;----------------------------------------------
002CA5  3               
002CA5  3               pbpattr:			; entry PUTBLOCK command
002CA5  3  A4 rr        	ldy charx
002CA7  3  84 rr        	sty dispx
002CA9  3  A4 rr        	ldy chary
002CAB  3  84 rr        	sty dispy
002CAD  3               pattr:
002CAD  3               .if aflag
002CAD  3               	pha
002CAD  3               	jsr wbloc		; save blockinfo
002CAD  3               	pla
002CAD  3               .endif
002CAD  3               
002CAD  3               pattr2:
002CAD  3  85 63        	sta z80_b		; store cell in b register for now.
002CAF  3  AA           	tax
002CB0  3  BD C4 3E     	lda bprop,x 		; block properties.
002CB3  3  85 62        	sta z80_c
002CB5  3  C9 08        	cmp #COLECT
002CB7  3  D0 05        	bne :+
002CB9  3  A5 63        	lda z80_b
002CBB  3  8D CC 2C     	sta colpatt
002CBE  3               :
002CBE  3  20 7C 2C     	jsr pradd 		; get property buffer address.
002CC1  3  A5 62        	lda z80_c
002CC3  3  A0 00        	ldy #0
002CC5  3  91 rr        	sta (bufaddr),y 	; write property.
002CC7  3  A5 63        	lda z80_b 		; restore cell.
002CC9  3  4C CD 2C     	jmp panp
002CCC  3               ; Print attributes, no properties.
002CCC  3               
002CCC  3  00           colpatt:	.byte 0
002CCD  3               
002CCD  3               panp:
002CCD  3  85 64        	sta z80_e		; displacement in e.
002CCF  3  A9 00        	lda #0
002CD1  3  85 65        	sta z80_d		; no high byte.
002CD3  3  06 64        	asl z80_e  		; multiply char by 8.
002CD5  3  26 65        	rol z80_d
002CD7  3  18           	clc
002CD8  3  A5 64        	lda z80_e
002CDA  3  69 AA        	adc #<chgfx 		; address of graphics.
002CDC  3  85 rr        	sta tileaddr
002CDE  3  A5 65        	lda z80_d
002CE0  3  69 3E        	adc #>chgfx
002CE2  3  85 rr        	sta tileaddr+1
002CE4  3  20 63 2C     	jsr gprad 		; get screen address.
002CE7  3               panp0:
002CE7  3  A0 00        	ldy #0
002CE9  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002CEB  3               .if iflag
002CEB  3               	eor #$ff		; Invert
002CEB  3               .endif
002CEB  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CED  3  E6 rr        	inc dispx 		; move along one.
002CEF  3  E6 rr        	inc charx
002CF1  3  60           	rts
002CF2  3               
002CF2  3               ;----------------------------------------------
002CF2  3               ; Write block
002CF2  3               ;----------------------------------------------
002CF2  3               
002CF2  3               .if aflag
002CF2  3               wbloc:
002CF2  3               	ldy #3
002CF2  3               	sta (pbptr),y		; store block number
002CF2  3               	dey
002CF2  3               	lda dispx
002CF2  3               	sta (pbptr),y		; write x position of block.
002CF2  3               	dey
002CF2  3               	lda dispy
002CF2  3               	sta (pbptr),y		; write y position of block.
002CF2  3               	dey
002CF2  3               	lda scno
002CF2  3               	sta (pbptr),y		; write screen.
002CF2  3               	clc			; point to next free location
002CF2  3               	lda pbptr
002CF2  3               	adc #4
002CF2  3               	sta pbptr
002CF2  3               	bcc :+
002CF2  3               	inc pbptr+1
002CF2  3               :
002CF2  3               	rts
002CF2  3               .endif
002CF2  3               
002CF2  3               ;----------------------------------------------
002CF2  3               ; Print character pixels, no more.
002CF2  3               ;
002CF2  3               ; Input:
002CF2  3               ;  A	= character to print
002CF2  3               ;----------------------------------------------
002CF2  3               
002CF2  3               pchr:
002CF2  3  20 93 2C     	jsr pchar 		; show character in accumulator.
002CF5  3  E6 rr        	inc dispx		; move along one.
002CF7  3  60           	rts
002CF8  3               
002CF8  3               ;----------------------------------------------------
002CF8  3               ; Shifter sprite routine for objects.
002CF8  3               ;----------------------------------------------------
002CF8  3               
002CF8  3               .if oflag
002CF8  3               sprit7:
002CF8  3               	lda z80_b
002CF8  3               	beq sprit0
002CF8  3               	sta z80_a
002CF8  3               sprit3:
002CF8  3               	lsr spr			; shift into position.
002CF8  3               	ror spr+1
002CF8  3               	ror spr+2
002CF8  3               	dec z80_a		; one less iteration.
002CF8  3               	bne sprit3
002CF8  3               sprit0:
002CF8  3               	rts 			; now apply to screen.
002CF8  3               
002CF8  3               ;----------------------------------------------------
002CF8  3               ; Draw sprite
002CF8  3               ;----------------------------------------------------
002CF8  3               
002CF8  3               sprite:
002CF8  3               	stx xtmp		; Save X-reg
002CF8  3               	jsr scadd 		; get screen address in scraddr.
002CF8  3               
002CF8  3               	lda dispx 		; x position.
002CF8  3               	and #7 			; position straddling cells.
002CF8  3               	sta z80_b		; store in b register.
002CF8  3               
002CF8  3               	lda z80_l		; store sprite graphic address.
002CF8  3               	sta sprit1+1
002CF8  3               	sta sprit2+1
002CF8  3               	lda z80_h
002CF8  3               	sta sprit1+2
002CF8  3               	sta sprit2+2
002CF8  3               
002CF8  3               	ldx #0			; pixel height.
002CF8  3               	ldy #0
002CF8  3               sprit1:
002CF8  3               	lda objdta,x		; fetch first byte.
002CF8  3               	sta spr
002CF8  3               	inx
002CF8  3               sprit2:
002CF8  3               	lda objdta,x
002CF8  3               	sta spr+1
002CF8  3               
002CF8  3               	lda #0
002CF8  3               	sta spr+2
002CF8  3               	jsr sprit7		; shift sprite
002CF8  3               
002CF8  3               	dex
002CF8  3               	lda spr			; fetch graphic.
002CF8  3               	ldy spritetab,x
002CF8  3               	eor (scraddr),y		; merge with screen image.
002CF8  3               	sta (scraddr),y		; write to screen.
002CF8  3               	inx			; next screen byte.
002CF8  3               
002CF8  3               	lda spr+1		; fetch graphic.
002CF8  3               	ldy spritetab,x
002CF8  3               	eor (scraddr),y		; merge with screen image.
002CF8  3               	sta (scraddr),y		; write to screen.
002CF8  3               	iny
002CF8  3               
002CF8  3               	lda spr+2		; fetch graphic.
002CF8  3               	eor (scraddr),y		; merge with screen image.
002CF8  3               	sta (scraddr),y		; write to screen.
002CF8  3               
002CF8  3               	inx			; next source byte.
002CF8  3               	cpx #16
002CF8  3               	bne :+
002CF8  3               	inc scraddr+1
002CF8  3               :
002CF8  3               	cpx #32
002CF8  3               	bne sprit1		; repeat
002CF8  3               
002CF8  3               	ldx xtmp		; retreive X-reg
002CF8  3               	rts
002CF8  3               
002CF8  3               spritetab:
002CF8  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002CF8  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002CF8  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002CF8  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002CF8  3               
002CF8  3               spr:	.byte 0,0,0
002CF8  3               
002CF8  3               ;xtmp:	.byte 0
002CF8  3               .endif
002CF8  3               
002CF8  3               ;-----------------------------------------------------------
002CF8  3               ; Get room address.
002CF8  3               ;-----------------------------------------------------------
002CF8  3               
002CF8  3               groom:
002CF8  3  A6 rr        	ldx scno 		; screen number.
002CFA  3  A0 00        	ldy #0
002CFC  3               groomx:
002CFC  3  A9 B9        	lda #<scdat 		; pointer to screens.
002CFE  3  85 66        	sta z80_l
002D00  3  A9 48        	lda #>scdat
002D02  3  85 67        	sta z80_h
002D04  3               groom1:
002D04  3  E0 00        	cpx #0			; is it the first one?
002D06  3  F0 15        	beq groom0 		; no more screens to skip.
002D08  3               
002D08  3  18           	clc
002D09  3  A5 66        	lda z80_l
002D0B  3  79 B9 48     	adc scdat,y 		; low byte of screen size.
002D0E  3  85 66        	sta z80_l
002D10  3  C8           	iny			; point to high byte.
002D11  3  A5 67        	lda z80_h
002D13  3  79 B9 48     	adc scdat,y 		; high byte of screen size.
002D16  3  85 67        	sta z80_h
002D18  3  C8           	iny			; next address.
002D19  3               
002D19  3  CA           	dex 			; one less iteration.
002D1A  3  4C 04 2D     	jmp groom1 		; loop until we reach the end.
002D1D  3               groom0:
002D1D  3  AD CF 4A     	lda numsc 		; add displacement.
002D20  3  0A           	asl a
002D21  3  18           	clc			; add double displacement to address.
002D22  3  65 66        	adc z80_l
002D24  3  85 66        	sta z80_l
002D26  3  A5 67        	lda z80_h
002D28  3  69 00        	adc #0
002D2A  3  85 67        	sta z80_h
002D2C  3  60           	rts
002D2D  3               
002D2D  3               ;-----------------------------------------------------------
002D2D  3               ; Draw present room.
002D2D  3               ;-----------------------------------------------------------
002D2D  3               
002D2D  3               droom:
002D2D  3  AD 1F 28     	lda wintop 		; window top.
002D30  3  85 rr        	sta dispy		; set cursor y position.
002D32  3               droom2:
002D32  3  20 F8 2C     	jsr groom 		; get address of current room.
002D35  3  A9 00        	lda #0	 		; zero in accumulator.
002D37  3  85 rr        	sta comcnt 		; reset compression counter.
002D39  3  AD 21 28     	lda winhgt 		; height of window.
002D3C  3  85 rr        	sta rrow		; set row counter
002D3E  3               droom0:
002D3E  3  AD 20 28     	lda winlft 		; window left edge.
002D41  3  85 rr        	sta dispx 		; set cursor x position.
002D43  3  AD 22 28     	lda winwid 		; width of window.
002D46  3  85 rr        	sta rcol		; set column counter
002D48  3               droom1:
002D48  3  20 59 2D     	jsr flbyt 		; decompress next byte on the fly.
002D4B  3  20 AD 2C     	jsr pattr2 		; show attributes and block.
002D4E  3  C6 rr        	dec rcol		; one less column.
002D50  3  D0 F6        	bne droom1 		; repeat for entire line.
002D52  3  E6 rr        	inc dispy		; move down one line.
002D54  3  C6 rr        	dec rrow 		; one less row.
002D56  3  D0 E6        	bne droom0 		; repeat for all rows.
002D58  3  60           	rts
002D59  3               
002D59  3               ;rcol:	.byte 0
002D59  3               ;rrow:	.byte 0
002D59  3               
002D59  3               ;----------------------------------------------
002D59  3               ; Decompress bytes on-the-fly.
002D59  3               ;----------------------------------------------
002D59  3               
002D59  3               flbyt:
002D59  3  A5 rr        	lda comcnt 		; compression counter.
002D5B  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D5D  3               
002D5D  3  A0 00        	ldy #0
002D5F  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D61  3  E6 66        	inc z80_l 		; point to next cell.
002D63  3  D0 02        	bne :+
002D65  3  E6 67        	inc z80_h
002D67  3               :
002D67  3  C9 FF        	cmp #255 		; is this byte a control code?
002D69  3  F0 01        	beq :+
002D6B  3  60           	rts 			; no, this byte is uncompressed.
002D6C  3               :
002D6C  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002D6E  3  85 rr        	sta combyt 		; set up the type.
002D70  3  E6 66        	inc z80_l 		; point to quantity.
002D72  3  D0 02        	bne :+
002D74  3  E6 67        	inc z80_h
002D76  3               :
002D76  3  B1 66        	lda (z80_hl),y 		; get quantity.
002D78  3  E6 66        	inc z80_l 		; point to next byte.
002D7A  3  D0 02        	bne :+
002D7C  3  E6 67        	inc z80_h
002D7E  3               :
002D7E  3               flbyt1:
002D7E  3  85 rr        	sta comcnt 		; store new quantity.
002D80  3  C6 rr        	dec comcnt		; one less.
002D82  3  A5 rr        	lda combyt 		; byte to expand.
002D84  3  60           	rts
002D85  3               
002D85  3               ;combyt:	.byte 0			; byte type compressed.
002D85  3               ;comcnt:	.byte 0			; compression counter.
002D85  3               
002D85  3               ;------------------------------------------
002D85  3               ; Ladder down check.
002D85  3               ;
002D85  3               ; Input:
002D85  3               ;  IX = sprite pointer
002D85  3               ;------------------------------------------
002D85  3               
002D85  3               .if lflag
002D85  3               laddd:
002D85  3               	ldy #9
002D85  3               	lda (z80_ix),y		; x coordinate.
002D85  3               	sta dispx
002D85  3               
002D85  3               	ldy #8
002D85  3               	lda (z80_ix),y		; y coordinate.
002D85  3               	and #254		; make it even.
002D85  3               	sta (z80_ix),y 		; reset it.
002D85  3               	clc 			; look down 16 pixels.
002D85  3               numsp5:
002D85  3               	adc #SPR_HGT
002D85  3               	sta dispy		; coords in dispx,dispy.
002D85  3               	jmp laddv
002D85  3               
002D85  3               ;------------------------------------------
002D85  3               ; Ladder up check.
002D85  3               ;
002D85  3               ; Input:
002D85  3               ;  IX = sprite pointer
002D85  3               ;
002D85  3               ; Output:
002D85  3               ;  A  = 0 is ok, A <>0 is not ok
002D85  3               ;------------------------------------------
002D85  3               
002D85  3               laddu:
002D85  3               	ldy #9
002D85  3               	lda (z80_ix),y		; x coordinate.
002D85  3               	sta dispx
002D85  3               
002D85  3               	ldy #8
002D85  3               	lda (z80_ix),y		; y coordinate.
002D85  3               	and #254 		; make it even.
002D85  3               	sta (z80_ix),y		; reset it.
002D85  3               	clc 			; look 2 pixels above feet.
002D85  3               numsp6:
002D85  3               	adc #SPR_HGT-2
002D85  3               	sta dispy		; coords in dispx,dispy.
002D85  3               laddv:
002D85  3               	jsr tstbl 		; get map address.
002D85  3               	jsr ldchk 		; standard ladder check.
002D85  3               	beq :+
002D85  3               	rts 			; no way through.
002D85  3               :
002D85  3               	inc bufaddr 		; look right one cell.
002D85  3               	bne :+
002D85  3               	inc bufaddr+1
002D85  3               :
002D85  3               	jsr ldchk 		; do the check.
002D85  3               	beq :+
002D85  3               	rts 			; impassable.
002D85  3               :
002D85  3               	lda dispx 		; y coordinate.
002D85  3               	and #7 			; position straddling block cells.
002D85  3               	bne :+
002D85  3               	rts 			; no more checks needed.
002D85  3               :
002D85  3               	inc bufaddr 		; look to third cell.
002D85  3               	bne :+
002D85  3               	inc bufaddr+1
002D85  3               :
002D85  3               	jsr ldchk 		; do the check.
002D85  3               	rts  			; return with zero flag set accordingly.
002D85  3               .endif
002D85  3               
002D85  3               ;---------------------------------------------------------
002D85  3               ; Can go up check.
002D85  3               ;
002D85  3               ; Input:
002D85  3               ;  IX = sprite pointer
002D85  3               ;
002D85  3               ; Output:
002D85  3               ;  A  = 0 is ok, A <>0 is not ok
002D85  3               ;---------------------------------------------------------
002D85  3               
002D85  3               cangu:
002D85  3  A0 09        	ldy #9
002D87  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D89  3  85 rr        	sta dispx
002D8B  3  A0 08        	ldy #8
002D8D  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002D8F  3  38           	sec
002D90  3  E9 01        	sbc #1
002D92  3  85 rr        	sta dispy		; coords in dispx,dispy.
002D94  3  20 39 2F     	jsr tstbl 		; get map address.
002D97  3  20 68 2E     	jsr lrchk 		; standard left/right check.
002D9A  3  F0 01        	beq :+
002D9C  3  60           	rts			; no way through.
002D9D  3               :
002D9D  3  E6 rr        	inc bufaddr		; look right one cell.
002D9F  3  D0 02        	bne :+
002DA1  3  E6 rr        	inc bufaddr+1
002DA3  3               :
002DA3  3  20 68 2E     	jsr lrchk 		; do the check.
002DA6  3  F0 01        	beq :+
002DA8  3  60           	rts			; impassable.
002DA9  3               :
002DA9  3  E6 rr        	inc bufaddr		; look right one cell.
002DAB  3  D0 02        	bne :+
002DAD  3  E6 rr        	inc bufaddr+1
002DAF  3               :
002DAF  3  20 68 2E     	jsr lrchk 		; do the check.
002DB2  3  F0 01        	beq :+
002DB4  3  60           	rts			; impassable.
002DB5  3               :
002DB5  3  E6 rr        	inc bufaddr		; look right one cell.
002DB7  3  D0 02        	bne :+
002DB9  3  E6 rr        	inc bufaddr+1
002DBB  3               :
002DBB  3  20 68 2E     	jsr lrchk 		; do the check.
002DBE  3  F0 01        	beq :+
002DC0  3  60           	rts			; impassable.
002DC1  3               :
002DC1  3  A5 rr        	lda dispx		; x coordinate.
002DC3  3  29 01        	and #1			; position straddling block cells.
002DC5  3  D0 01        	bne :+
002DC7  3  60           	rts			; no more checks needed.
002DC8  3               :
002DC8  3  E6 rr        	inc bufaddr		; look to third cell.
002DCA  3  D0 02        	bne :+
002DCC  3  E6 rr        	inc bufaddr+1
002DCE  3               :
002DCE  3  20 68 2E     	jsr lrchk		; do the check.
002DD1  3  60           	rts 			; return with zero flag set accordingly.
002DD2  3               
002DD2  3               ;---------------------------------------------------------
002DD2  3               ; Can go down check.
002DD2  3               ;
002DD2  3               ; Input:
002DD2  3               ;  IX = sprite pointer
002DD2  3               ;
002DD2  3               ; Output:
002DD2  3               ;  A  = 0 is ok, A <>0 is not ok
002DD2  3               ;---------------------------------------------------------
002DD2  3               
002DD2  3               cangd:
002DD2  3  A0 09        	ldy #9
002DD4  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002DD6  3  85 rr        	sta dispx
002DD8  3  A0 08        	ldy #8
002DDA  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DDC  3  18           	clc
002DDD  3               numsp3:
002DDD  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002DDF  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DE1  3  20 39 2F     	jsr tstbl 		; get map address.
002DE4  3  20 7D 2E     	jsr plchk 		; block, platform check.
002DE7  3  F0 01        	beq :+
002DE9  3  60           	rts			; no way through.
002DEA  3               :
002DEA  3  E6 rr        	inc bufaddr		; look right one cell.
002DEC  3  D0 02        	bne :+
002DEE  3  E6 rr        	inc bufaddr+1
002DF0  3               :
002DF0  3  20 7D 2E     	jsr plchk		; block, platform check.
002DF3  3  F0 01        	beq :+
002DF5  3  60           	rts			; impassable.
002DF6  3               :
002DF6  3  E6 rr        	inc bufaddr		; look right one cell.
002DF8  3  D0 02        	bne :+
002DFA  3  E6 rr        	inc bufaddr+1
002DFC  3               :
002DFC  3  20 7D 2E     	jsr plchk		; block, platform check.
002DFF  3  F0 01        	beq :+
002E01  3  60           	rts			; impassable.
002E02  3               :
002E02  3  E6 rr        	inc bufaddr		; look right one cell.
002E04  3  D0 02        	bne :+
002E06  3  E6 rr        	inc bufaddr+1
002E08  3               :
002E08  3  20 7D 2E     	jsr plchk		; block, platform check.
002E0B  3  F0 01        	beq :+
002E0D  3  60           	rts			; impassable.
002E0E  3               :
002E0E  3  A5 rr        	lda dispx		; x coordinate.
002E10  3  29 01        	and #1			; position straddling block cells.
002E12  3  D0 01        	bne :+
002E14  3  60           	rts			; no more checks needed.
002E15  3               :
002E15  3  E6 rr        	inc bufaddr		; look to third cell.
002E17  3  D0 02        	bne :+
002E19  3  E6 rr        	inc bufaddr+1
002E1B  3               :
002E1B  3  20 7D 2E     	jsr plchk		; block, platform check.
002E1E  3  60           	rts			; return with zero flag set accordingly.
002E1F  3               
002E1F  3               ;---------------------------------------------------------
002E1F  3               ; Can go left check.
002E1F  3               ;
002E1F  3               ; Input:
002E1F  3               ;  IX = sprite pointer
002E1F  3               ;
002E1F  3               ; Output:
002E1F  3               ;  A  = 0 is ok, A <>0 is not ok
002E1F  3               ;---------------------------------------------------------
002E1F  3               
002E1F  3               cangl:
002E1F  3  A0 08        	ldy #8
002E21  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E23  3  85 rr        	sta dispy
002E25  3  A0 09        	ldy #9
002E27  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E29  3  38           	sec
002E2A  3  E9 01        	sbc #1			; look left 2 pixels.
002E2C  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E2E  3  4C 40 2E     	jmp cangh		; test if we can go there.
002E31  3               
002E31  3               ;---------------------------------------------------------
002E31  3               ; Can go right check.
002E31  3               ;
002E31  3               ; Input:
002E31  3               ;  IX = sprite pointer
002E31  3               ;
002E31  3               ; Output:
002E31  3               ;  A  = 0 is ok, A <>0 is not ok
002E31  3               ;---------------------------------------------------------
002E31  3               
002E31  3               cangr:
002E31  3  A0 08        	ldy #8
002E33  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E35  3  85 rr        	sta dispy
002E37  3  A0 09        	ldy #9
002E39  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E3B  3  18           	clc
002E3C  3  69 08        	adc #SPR_WID		; look right 8 pixels.
002E3E  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E40  3               cangh:
002E40  3               cangh2:
002E40  3  A9 04        	lda #(SPR_HGT/3+1)	; default rows to write.
002E42  3  85 63        	sta z80_b
002E44  3  A4 rr        	ldy dispy		; y position.
002E46  3  B9 4A DF     	lda V_SPR_PTR,y		; does x straddle cells?
002E49  3  D0 02        	bne cangh0		; yes, loop counter is good.
002E4B  3  C6 63        	dec z80_b		; one less row to write.
002E4D  3               cangh0:
002E4D  3  20 39 2F     	jsr tstbl		; get map address.
002E50  3               cangh1:
002E50  3  20 68 2E     	jsr lrchk		; standard left/right check.
002E53  3  F0 01        	beq :+
002E55  3  60           	rts			; no way through.
002E56  3               :
002E56  3  48           	pha
002E57  3  18           	clc
002E58  3  A5 rr        	lda bufaddr
002E5A  3  69 28        	adc #ScrWidth		; look down.
002E5C  3  85 rr        	sta bufaddr
002E5E  3  90 02        	bcc :+
002E60  3  E6 rr        	inc bufaddr+1
002E62  3               :
002E62  3  68           	pla
002E63  3               
002E63  3  C6 63        	dec z80_b
002E65  3  D0 E9        	bne cangh1
002E67  3  60           	rts
002E68  3               
002E68  3               ;-------------------------------------
002E68  3               ; Check left/right movement is okay.
002E68  3               ;
002E68  3               ; Input:
002E68  3               ;  bufaddr = MAP + x/8 + y/8*32
002E68  3               ;
002E68  3               ; Output:
002E68  3               ;  A  = 0 is ok, A <>0 is not ok
002E68  3               ;-------------------------------------
002E68  3               
002E68  3               lrchk:
002E68  3  A0 00        	ldy #0
002E6A  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002E6C  3  C9 02        	cmp #WALL 		; is it passable?
002E6E  3  F0 0A        	beq lrchkx		; no.
002E70  3               
002E70  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002E72  3  F0 06        	beq lrchkx		; not passable.
002E74  3  A9 00        	lda #0
002E76  3  60           	rts
002E77  3               
002E77  3               ;--------------------------------------------------------------
002E77  3               ; Called by mmenu
002E77  3               ;--------------------------------------------------------------
002E77  3               
002E77  3               always:
002E77  3  A9 FF        	lda #255		; report it as okay.
002E79  3  60           	rts
002E7A  3               
002E7A  3               lrchkx:
002E7A  3  A9 01        	lda #1 			; reset all bits.
002E7C  3  60           	rts
002E7D  3               
002E7D  3               
002E7D  3               ;--------------------------------------------------------------
002E7D  3               ; Check platform or solid item is not in way.
002E7D  3               ;
002E7D  3               ; Input:
002E7D  3               ;  bufaddr = MAP + x/2 + y/3*40
002E7D  3               ;
002E7D  3               ; Output:
002E7D  3               ;  A  = 0 is ok, A <>0 is not ok
002E7D  3               ;--------------------------------------------------------------
002E7D  3               
002E7D  3               plchk:
002E7D  3  A0 00        	ldy #0
002E7F  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002E81  3  C9 02        	cmp #WALL 		; is it passable?
002E83  3  F0 F5        	beq lrchkx		; no.
002E85  3               .if pflag .or dflag
002E85  3               	cmp #FODDER		; fodder has to be dug.
002E85  3               	beq lrchkx		; not passable.
002E85  3               .endif
002E85  3  C9 01        	cmp #PLATFM		; platform is solid.
002E87  3  F0 03        	beq plchkx		; not passable.
002E89  3               .if lflag
002E89  3               	cmp #LADDER		; is it a ladder?
002E89  3               	beq lrchkx		; on ladder, deny movement.
002E89  3               .endif
002E89  3               plchk0:
002E89  3  A9 00        	lda #0			; report as ok
002E8B  3  60           	rts
002E8C  3               plchkx:
002E8C  3  A5 rr        	lda dispy		; y coordinate.
002E8E  3  29 03        	and #3			; position straddling blocks.
002E90  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002E92  3  4C 89 2E     	jmp plchk0
002E95  3               
002E95  3               ;--------------------------------------------------------------
002E95  3               ; Check ladder is available.
002E95  3               ;
002E95  3               ; Input:
002E95  3               ;  bufaddr = MAP + x/8 + y/8*32
002E95  3               ;
002E95  3               ; Output:
002E95  3               ;  A  = 0 is ok, A <>0 is not ok
002E95  3               ;--------------------------------------------------------------
002E95  3               
002E95  3               .if lflag
002E95  3               ldchk:
002E95  3               	ldy #0
002E95  3               	lda (bufaddr),y 	; fetch cell.
002E95  3               	cmp #LADDER 		; is it a ladder?
002E95  3               	beq :+
002E95  3               	lda #1
002E95  3               	rts  			; return with zero flag set accordingly.
002E95  3               :
002E95  3               	lda #0
002E95  3               	rts
002E95  3               .endif
002E95  3               
002E95  3               ;--------------------------------------------------------------
002E95  3               ; Get collectables.
002E95  3               ;--------------------------------------------------------------
002E95  3               
002E95  3               .if cflag
002E95  3               getcol:
002E95  3  A9 08                lda #COLECT             ; collectable blocks.
002E97  3  85 63                sta z80_b
002E99  3  20 CA 2E             jsr tded                ; test for collectable blocks.
002E9C  3  C5 63                cmp z80_b               ; did we find one?
002E9E  3  F0 01                beq :+
002EA0  3  60                   rts                     ; none were found, job done.
002EA1  3               :
002EA1  3  20 AA 2E             jsr gtblk               ; get block.
002EA4  3  20 03 3E             jsr evnt20              ; collected block event.
002EA7  3  4C 95 2E             jmp getcol              ; repeat until none left.
002EAA  3               
002EAA  3               ; Get collectable block.
002EAA  3               
002EAA  3               gtblk:
002EAA  3  A0 00        	ldy #0
002EAC  3  B1 rr        	lda (bufaddr),y
002EAE  3  8D CC 2C     	sta colpatt		; save collectable block nr
002EB1  3               
002EB1  3  A9 00                lda #0
002EB3  3  91 rr                sta (bufaddr),y		; make it empty now in MAP.
002EB5  3               
002EB5  3  A5 rr        	lda bufaddr		; calculate screenaddr
002EB7  3  85 rr        	sta scraddr
002EB9  3  38           	sec
002EBA  3  A5 rr        	lda bufaddr+1
002EBC  3  E9 D4        	sbc #>(MAP-ScreenAddr)	;$d4
002EBE  3  85 rr        	sta scraddr+1
002EC0  3               
002EC0  3  A0 00        	ldy #0			; erase block on screen
002EC2  3  B1 rr        	lda (scraddr),y
002EC4  3  4D CC 2C     	eor colpatt
002EC7  3  91 rr        	sta (scraddr),y
002EC9  3               
002EC9  3  60           	rts
002ECA  3               .endif
002ECA  3               
002ECA  3               ;--------------------------------------------------------------
002ECA  3               ; Touched deadly block check.
002ECA  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002ECA  3               ;
002ECA  3               ; Input:
002ECA  3               ;  IX = sprite address
002ECA  3               ;
002ECA  3               ; Output:
002ECA  3               ;  A  = 0 is ok, A=5 is not ok
002ECA  3               ;--------------------------------------------------------------
002ECA  3               
002ECA  3               ; Calculate map address from dispx,dispy
002ECA  3               
002ECA  3               tded:
002ECA  3  A0 08        	ldy #8
002ECC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002ECE  3  85 rr        	sta dispy
002ED0  3  C8           	iny
002ED1  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002ED3  3  85 rr        	sta dispx		; coords in dispx,dispy.
002ED5  3  20 39 2F     	jsr tstbl		; get map address in bufaddr.
002ED8  3               
002ED8  3               ; Set variables
002ED8  3               
002ED8  3  A9 00        	lda #0
002EDA  3  85 62        	sta z80_c		; reset x-stradding skip flag
002EDC  3               
002EDC  3  A9 04        	lda #4			; Set nr of sprite columns
002EDE  3  85 rr        	sta rcol
002EE0  3  A5 rr        	lda dispx
002EE2  3  29 01        	and #1
002EE4  3  D0 04        	bne :+
002EE6  3  C6 rr        	dec rcol
002EE8  3  E6 62        	inc z80_c		; set x-stradding skip flag
002EEA  3               :
002EEA  3  A5 rr        	lda rcol
002EEC  3  85 64        	sta z80_e
002EEE  3               
002EEE  3  A9 03        	lda #3			; Set nr of sprite rows
002EF0  3  85 rr        	sta rrow
002EF2  3  A4 rr        	ldy dispy
002EF4  3  B9 4A DF     	lda V_SPR_PTR,y
002EF7  3  D0 02        	bne :+
002EF9  3  C6 rr        	dec rrow
002EFB  3               :
002EFB  3  A2 00        	ldx #0
002EFD  3               vspr_loop:
002EFD  3  A5 64        	lda z80_e
002EFF  3  85 rr        	sta rcol
002F01  3               hspr_loop:
002F01  3  BC 25 2F     	ldy spr_ptr,x
002F04  3  B1 rr        	lda (bufaddr),y
002F06  3  C5 63        	cmp z80_b
002F08  3  F0 0E        	beq end_sprloop
002F0A  3  E8           	inx
002F0B  3  C6 rr        	dec rcol
002F0D  3  10 F2        	bpl hspr_loop
002F0F  3               ;	inx
002F0F  3  A4 62        	ldy z80_c		; Test x-stradding skip flag
002F11  3  F0 01        	beq :+			; If reset, no skipping
002F13  3  E8           	inx			; If set, skip 1 byte
002F14  3               :
002F14  3  C6 rr        	dec rrow
002F16  3  10 E5        	bpl vspr_loop
002F18  3               end_sprloop:
002F18  3  48           	pha
002F19  3  18           	clc
002F1A  3  98           	tya
002F1B  3  65 rr        	adc bufaddr
002F1D  3  85 rr        	sta bufaddr
002F1F  3  90 02        	bcc :+
002F21  3  E6 rr        	inc bufaddr+1
002F23  3               :
002F23  3  68           	pla
002F24  3  60           	rts
002F25  3               
002F25  3               spr_ptr:
002F25  3  00 01 02 03  	.byte   0,  1,  2,  3,  4
002F29  3  04           
002F2A  3  28 29 2A 2B  	.byte  40, 41, 42, 43, 44
002F2E  3  2C           
002F2F  3  50 51 52 53  	.byte  80, 81, 82, 83, 84
002F33  3  54           
002F34  3  78 79 7A 7B  	.byte 120,121,122,123,124
002F38  3  7C           
002F39  3               
002F39  3               ;---------------------------------------------------
002F39  3               ; Fetch block type at (dispx, dispy).
002F39  3               ;
002F39  3               ; Output:
002F39  3               ;  A = block type
002F39  3               ;---------------------------------------------------
002F39  3               
002F39  3               tstbl:
002F39  3  A5 rr        	lda dispy 		; fetch y coord.
002F3B  3  AA           	tax
002F3C  3               
002F3C  3  A5 rr        	lda dispx		; x/8
002F3E  3  4A           	lsr a
002F3F  3  85 rr        	sta charx
002F41  3               
002F41  3  18           	clc
002F42  3  BD 00 DC     	lda SCADTB_lb,x
002F45  3  65 rr        	adc charx
002F47  3  85 rr        	sta bufaddr
002F49  3               
002F49  3  BD 00 DD     	lda SCADTB_hb,x
002F4C  3  69 D4        	adc #(>MAP->ScreenAddr)
002F4E  3  85 rr        	sta bufaddr+1
002F50  3               
002F50  3  A0 00        	ldy #0
002F52  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002F54  3  60           	rts
002F55  3               
002F55  3               ;-------------------------------------------------------------------
002F55  3               ; Jump - if we can.
002F55  3               ; Requires initial speed to be set up in accumulator prior to call.
002F55  3               ;
002F55  3               ; Input:
002F55  3               ;  IX = sprite address
002F55  3               ;-------------------------------------------------------------------
002F55  3               
002F55  3               jump:
002F55  3  A0 0D        	ldy #13
002F57  3  B1 68        	lda (z80_ix),y		; jump table low.
002F59  3  A0 0E        	ldy #14
002F5B  3  11 68        	ora (z80_ix),y		; jump table high.
002F5D  3  F0 01        	beq :+
002F5F  3  60           	rts			; already in the air.
002F60  3               :
002F60  3  A9 4E        	lda #>jtab
002F62  3  A0 0E        	ldy #14
002F64  3  91 68        	sta (z80_ix),y		; set jump high.
002F66  3  A9 03        	lda #<jtab		; jump table start.
002F68  3  A0 0D        	ldy #13
002F6A  3  91 68        	sta (z80_ix),y		; set jump low.
002F6C  3  60           	rts
002F6D  3               
002F6D  3               ; Jump table.
002F6D  3               
002F6D  3               ;jtab:
002F6D  3               ;	.byte 248,250,252
002F6D  3               ;	.byte 254,254,255
002F6D  3               ;	.byte 255,255,0,0
002F6D  3               ;	.byte 0,1,1,1,2,2
002F6D  3               ;	.byte 4,6,8,8,8,99
002F6D  3               
002F6D  3               ;------------------------------------------------
002F6D  3               ; Random numbers code.
002F6D  3               ; Pseudo-random number generator, 8-bit.
002F6D  3               ;
002F6D  3               ; Output:
002F6D  3               ;  RND = random number
002F6D  3               ;------------------------------------------------
002F6D  3               
002F6D  3               random:
002F6D  3  A5 rr        	lda seed
002F6F  3  F0 05        	beq doEor
002F71  3  0A           	asl a
002F72  3  F0 04        	beq noEor
002F74  3  90 02        	bcc noEor
002F76  3  49 1D        doEor:	eor #$1d
002F78  3  85 rr        noEor:	sta seed
002F7A  3  60           	rts
002F7B  3               
002F7B  3  A5 rr        	lda seed		; get last random number.
002F7D  3  0A           	asl a
002F7E  3  0A           	asl a
002F7F  3  18           	clc
002F80  3  65 rr        	adc seed
002F82  3  18           	clc
002F83  3  69 45        	adc #$45
002F85  3  85 rr        	sta seed		; store new seed.
002F87  3  85 rr        	sta varrnd		; return number in variable.
002F89  3  60           	rts
002F8A  3               
002F8A  3               ;--------------------------------------------------------
002F8A  3               ; Keys
002F8A  3               ;
002F8A  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002F8A  3               ;             ||||||||
002F8A  3               ;             |||||||+> Right    KEY 0  - X
002F8A  3               ;             ||||||+-> Left     KEY 1  - Z
002F8A  3               ;             |||||+--> Down     KEY 2  - .
002F8A  3               ;             ||||+---> Up       KEY 3  - ;
002F8A  3               ;             |||+----> Fire1    KEY 4  - SPC
002F8A  3               ;             ||+-----> Fire2    KEY 5  - Q
002F8A  3               ;             |+------> Fire3    KEY 6  - P
002F8A  3               ;             +-------> Not used
002F8A  3               ;
002F8A  3               ;                       Option1  KEY 7  - 1
002F8A  3               ;                       Option2  KEY 8  - 2
002F8A  3               ;                       Option3  KEY 9  - 3
002F8A  3               ;                       Option4  KEY 10 - 4
002F8A  3               ;--------------------------------------------------------
002F8A  3               
002F8A  3               ;              X   Z   .   ;  SPC  Q   P
002F8A  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002F8A  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002F8A  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002F8E  3  00 04 14     
002F91  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002F95  3               
002F95  3               ;-------------------------------------------------------
002F95  3               ; Joystick and keyboard reading routines.
002F95  3               ;
002F95  3               ; contrl = 0, Keyboard
002F95  3               ;          1, JoyKeyb
002F95  3               ;          2, JoyMMC
002F95  3               ;-------------------------------------------------------
002F95  3               
002F95  3               joykey:
002F95  3  A5 rr        	lda contrl 		; control flag.
002F97  3  C9 01        	cmp #1
002F99  3  D0 03        	bne :+
002F9B  3  4C 1E 4F     	jmp joy1 		; read keyboard joystick
002F9E  3               :
002F9E  3  C9 02        	cmp #2
002FA0  3  D0 03        	bne :+
002FA2  3  4C 50 4F     	jmp joy2 		; read MMC joystick.
002FA5  3               :
002FA5  3               ; Keyboard controls.
002FA5  3               
002FA5  3  A9 00        	lda #0		 	; zero reading.
002FA7  3  85 64        	sta z80_e
002FA9  3               
002FA9  3  A0 06        	ldy #6	 		; address of last key.
002FAB  3               joyke0:
002FAB  3  B9 04 4E     	lda keys,y 		; get key from table.
002FAE  3  20 51 4F     	jsr ktest		; being pressed?
002FB1  3  26 64        	rol z80_e 		; rotate into reading.
002FB3  3               
002FB3  3  88           	dey		 	; next key.
002FB4  3  10 F5        	bpl joyke0 		; repeat for all keys.
002FB6  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002FB8  3  85 rr        	sta joyval		; remember value.
002FBA  3  60           	rts
002FBB  3               
002FBB  3               ;---------------------------------------------------------------
002FBB  3               ; Getkey in column,row format
002FBB  3               ;
002FBB  3               ; Output:
002FBB  3               ;  A = high nibble=row and low nibble=column key in matrix
002FBB  3               ;---------------------------------------------------------------
002FBB  3               
002FBB  3               ;kget:
002FBB  3               ;	lda #ScrMode		; high-mono mode.
002FBB  3               ;	sta ScrSelAddr		; screen select port
002FBB  3               ;	stx xtmp
002FBB  3               ;kget4:
002FBB  3               ;	jsr READKEY		; read key until pressed
002FBB  3               ;	cpy #255
002FBB  3               ;	beq kget4
002FBB  3               ;	sta rcol		; save column
002FBB  3               ;	stx rrow		; determine row
002FBB  3               ;kget3:
002FBB  3               ;	jsr READKEY		; wait until key released
002FBB  3               ;	cpy #255
002FBB  3               ;	bne kget3
002FBB  3               ;
002FBB  3               ;	sec			; calculate matrix row
002FBB  3               ;	lda #10
002FBB  3               ;	sbc rrow
002FBB  3               ;	asl a
002FBB  3               ;	asl a
002FBB  3               ;	asl a
002FBB  3               ;	asl a
002FBB  3               ;	sta rrow
002FBB  3               ;
002FBB  3               ;	ldy #255		; find column mask
002FBB  3               ;kget1:
002FBB  3               ;	iny
002FBB  3               ;	lda keymask,y
002FBB  3               ;	cmp rcol
002FBB  3               ;	beq kget2
002FBB  3               ;	jmp kget1
002FBB  3               ;kget2:
002FBB  3               ;	tya			; determine column
002FBB  3               ;	clc
002FBB  3               ;	adc rrow
002FBB  3               ;	ldx xtmp
002FBB  3               ;	rts
002FBB  3               
002FBB  3               ;---------------------------------------------------------------
002FBB  3               ; Display message.
002FBB  3               ;
002FBB  3               ; Input:
002FBB  3               ;  A = message number
002FBB  3               ;---------------------------------------------------------------
002FBB  3               
002FBB  3               dmsg:
002FBB  3  AA           	tax
002FBC  3  A9 10        	lda #<msgdat		; pointer to messages.
002FBE  3  85 66        	sta z80_l
002FC0  3  A9 3E        	lda #>msgdat
002FC2  3  85 67        	sta z80_h
002FC4  3  20 B5 30     	jsr getwrd		; get message number.
002FC7  3               dmsg3:
002FC7  3  20 AC 30     	jsr preprt		; pre-printing stuff.
002FCA  3  20 15 2B     	jsr checkx		; make sure we"re in a printable range.
002FCD  3  A5 rr        	lda prtmod		; print mode.
002FCF  3  D0 50        	bne bmsg1		; no, double-height text.
002FD1  3               
002FD1  3  AD 53 38     	lda fcolour		; Set textcolour
002FD4  3  20 93 2C     	jsr pchar
002FD7  3  20 99 30     	jsr nexpos
002FDA  3               dmsg0:
002FDA  3  A5 67        	lda z80_h		; store string pointer.
002FDC  3  48           	pha
002FDD  3  A5 66        	lda z80_l
002FDF  3  48           	pha
002FE0  3               
002FE0  3  A0 00        	ldy #0
002FE2  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002FE4  3  29 7F        	and #127		; remove any end marker.
002FE6  3  C9 0D        	cmp #13
002FE8  3  F0 24        	beq dmsg1
002FEA  3  20 93 2C     	jsr pchar		; display character.
002FED  3  20 99 30     	jsr nexpos 		; display position.
002FF0  3  D0 03        	bne dmsg2		; not on a new line.
002FF2  3  20 9E 30     	jsr nexlin		; next line down.
002FF5  3               dmsg2:
002FF5  3  68           	pla			; retrieve string pointer
002FF6  3  85 66        	sta z80_l
002FF8  3  68           	pla
002FF9  3  85 67        	sta z80_h
002FFB  3               
002FFB  3  A0 00        	ldy #0
002FFD  3  B1 66        	lda (z80_hl),y		; fetch last character.
002FFF  3  0A           	asl a  			; was it the end?
003000  3  90 03        	bcc :+
003002  3  4C 68 2B     	jmp dscor2		; yes, job done.
003005  3               :
003005  3  E6 66        	inc z80_l		; next character to display.
003007  3  D0 02        	bne :+
003009  3  E6 67        	inc z80_h
00300B  3               :
00300B  3  4C DA 2F     	jmp dmsg0
00300E  3               dmsg1:
00300E  3  E6 rr        	inc dispy
003010  3  A5 rr        	lda dispy
003012  3  C9 19        	cmp #ScrHeight
003014  3  90 04        	bcc dmsg4
003016  3  A9 00        	lda #0
003018  3  85 rr        	sta dispy
00301A  3               dmsg4:
00301A  3  A9 00        	lda #0
00301C  3  85 rr        	sta dispx
00301E  3  4C F5 2F     	jmp dmsg2
003021  3               
003021  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
003021  3               
003021  3               ;----------------------------------------------------------
003021  3               ; Display message in big text.
003021  3               ;
003021  3               ; Input:
003021  3               ;  HL = string pointer
003021  3               ;----------------------------------------------------------
003021  3               
003021  3               bmsg1:
003021  3  AD 53 38     	lda fcolour		; Set textcolour
003024  3  20 6A 30     	jsr bchar
003027  3  A9 0D        	lda #13			; Set double height
003029  3  20 6A 30     	jsr bchar
00302C  3               bmsg4:
00302C  3  A0 00        	ldy #0
00302E  3  B1 66        	lda (z80_hl),y 		; get character to display.
003030  3  29 7F        	and #127		; only want 7 bits.
003032  3  C9 0D        	cmp #13
003034  3  F0 1F        	beq bmsg2
003036  3  20 6A 30     	jsr bchar 		; display big char.
003039  3               bmsg3:
003039  3  A0 00        	ldy #0
00303B  3  B1 66        	lda (z80_hl),y 		; look at last character.
00303D  3  48           	pha
00303E  3  E6 66        	inc z80_l 		; next character in list.
003040  3  D0 02        	bne :+
003042  3  E6 67        	inc z80_h
003044  3               :
003044  3  68           	pla
003045  3  0A           	asl a  			; was terminator flag set?
003046  3  90 E4        	bcc bmsg4		; no, keep going.
003048  3  20 68 2B     	jsr dscor2
00304B  3  C6 rr        	dec dispx
00304D  3  E6 rr        	inc dispy
00304F  3  20 68 2B     	jsr dscor2
003052  3  C6 rr        	dec dispy
003054  3  60           	rts
003055  3               bmsg2:
003055  3  A9 00        	lda #0
003057  3  85 rr        	sta dispx
003059  3  E6 rr        	inc dispy
00305B  3  E6 rr        	inc dispy
00305D  3  A5 rr        	lda dispy
00305F  3  C9 18        	cmp #ScrHeight-1
003061  3  90 D6        	bcc bmsg3
003063  3  A9 00        	lda #0
003065  3  85 rr        	sta dispy
003067  3  4C 39 30     	jmp bmsg3
00306A  3               
00306A  3               ;----------------------------------------------------------
00306A  3               ; Big character display.
00306A  3               ;
00306A  3               ; Input:
00306A  3               ;  A = character
00306A  3               ;----------------------------------------------------------
00306A  3               
00306A  3               bchar:
00306A  3  20 93 2C     	jsr pchar 		; display big char.
00306D  3  E6 rr        	inc dispy
00306F  3  20 93 2C     	jsr pchar
003072  3  C6 rr        	dec dispy
003074  3  20 99 30     	jsr nexpos		; display position.
003077  3  60           	rts
003078  3               
003078  3               bchar3:
003078  3  E6 rr        	inc dispy
00307A  3  20 9E 30     	jsr nexlin 		; next line check.
00307D  3               bchar2:
00307D  3  4C 68 2B     	jmp dscor2		; tidy up line and column variables.
003080  3               
003080  3               
003080  3               ;-------------------------------------------------
003080  3               ; Display a character.
003080  3               ;
003080  3               ; Input:
003080  3               ;  A = character
003080  3               ;-------------------------------------------------
003080  3               
003080  3               achar:
003080  3  85 63        	sta z80_b 		; copy to b.
003082  3  20 AC 30     	jsr preprt 		; get ready to print.
003085  3  A5 63        	lda z80_b		; character in accumulator.
003087  3  A6 rr        	ldx prtmod 		; print mode.
003089  3  F0 03        	beq :+
00308B  3  4C 6A 30     	jmp bchar 		; no, double-height text.
00308E  3               :
00308E  3  20 93 2C     	jsr pchar 		; display character.
003091  3  20 99 30     	jsr nexpos 		; display position.
003094  3  F0 E2        	beq bchar3		; next line down.
003096  3  4C 7D 30     	jmp bchar2 		; tidy up.
003099  3               
003099  3               
003099  3               ;-------------------------------------------------
003099  3               ; Get next print column position.
003099  3               ;-------------------------------------------------
003099  3               
003099  3               nexpos:
003099  3  E6 rr        	inc dispx		; move along one position.
00309B  3  A5 rr        	lda dispx 		; get coordinate.
00309D  3               ;	and #31
00309D  3  60           	rts 			; return with status in zero flag.
00309E  3               
00309E  3               ;-------------------------------------------------
00309E  3               ; Get next print line position.
00309E  3               ;-------------------------------------------------
00309E  3               
00309E  3               nexlin:
00309E  3  E6 rr        	inc dispy 		; newline.
0030A0  3  A5 rr        	lda dispy		; vertical position.
0030A2  3  C9 19        	cmp #ScrHeight			; past screen edge?
0030A4  3  B0 01        	bcs :+
0030A6  3  60           	rts			; no, still okay.
0030A7  3               :
0030A7  3  A9 00        	lda #0			; restart at top.
0030A9  3  85 rr        	sta dispy
0030AB  3  60           	rts
0030AC  3               
0030AC  3               ;--------------------------------------------------------
0030AC  3               ; Pre-print preliminaries.
0030AC  3               ;--------------------------------------------------------
0030AC  3               
0030AC  3               preprt:
0030AC  3               ;	lda #<(FONT-256)		; font pointer.
0030AC  3               ;	sta grbase		; set up graphics base.
0030AC  3               ;	lda #>(FONT-256)
0030AC  3               ;	sta grbase+1
0030AC  3               prescr:
0030AC  3  A5 rr        	lda charx 		; display coordinates.
0030AE  3  85 rr        	sta dispx		; set up general coordinates.
0030B0  3  A5 rr        	lda chary
0030B2  3  85 rr        	sta dispy
0030B4  3  60           	rts
0030B5  3               
0030B5  3               ;--------------------------------------------------------------
0030B5  3               ; Get messagenr x in hl
0030B5  3               ;
0030B5  3               ; Input:
0030B5  3               ;  HL = pointer to message list
0030B5  3               ;  X  = message number.
0030B5  3               ;--------------------------------------------------------------
0030B5  3               
0030B5  3               getwrd:
0030B5  3  E0 00        	cpx #0
0030B7  3  D0 01        	bne:+ 			; first word in list?
0030B9  3  60           	rts 			; yep, don't search.
0030BA  3               :
0030BA  3  A0 00        	ldy #0
0030BC  3               getwd0:
0030BC  3  B1 66        	lda (z80_hl),y
0030BE  3  48           	pha
0030BF  3  E6 66        	inc z80_l
0030C1  3  D0 02        	bne :+
0030C3  3  E6 67        	inc z80_h
0030C5  3               :
0030C5  3  68           	pla
0030C6  3  C9 80        	cmp #128		; found end?
0030C8  3  30 F2        	bmi getwd0		; no, carry on.
0030CA  3  CA           	dex			; until we have right number.
0030CB  3  D0 EF        	bne getwd0
0030CD  3  60           	rts
0030CE  3               
0030CE  3               ;-----------------------------------------------------------
0030CE  3               ; Bubble sort.
0030CE  3               ;-----------------------------------------------------------
0030CE  3               
0030CE  3               bsort:
0030CE  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0030D0  3  85 rr        	sta qscnt
0030D2  3               
0030D2  3  A9 65        	lda #<sprtab 		; sprite table.
0030D4  3  85 68        	sta z80_x
0030D6  3  A9 37        	lda #>sprtab
0030D8  3  85 69        	sta z80_i
0030DA  3               bsort0:
0030DA  3  A0 00        	ldy #0
0030DC  3  B1 68        	lda (z80_ix),y 		; first sprite type.
0030DE  3  C9 FF        	cmp #255 		; is it switched off?
0030E0  3  F0 30        	beq swemp		; yes, may need to switch another in here.
0030E2  3               
0030E2  3  A0 11        	ldy #TABSIZ
0030E4  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
0030E6  3  C9 FF        	cmp #255 		; is it enabled?
0030E8  3  F0 0A        	beq bsort2 		; no, nothing to swap.
0030EA  3               
0030EA  3  A0 14        	ldy #TABSIZ+3
0030EC  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0030EE  3  A0 03        	ldy #3
0030F0  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
0030F2  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0030F4  3               bsort2:
0030F4  3  18           	clc
0030F5  3  A5 68        	lda z80_x
0030F7  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0030F9  3  85 68        	sta z80_x
0030FB  3  90 02        	bcc :+
0030FD  3  E6 69        	inc z80_i
0030FF  3               :
0030FF  3  C6 rr        	dec qscnt
003101  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
003103  3  60           	rts
003104  3               
003104  3               ;qscnt:	.byte 0
003104  3               
003104  3               bsort1:
003104  3  A0 11        	ldy #TABSIZ
003106  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
003108  3  C9 FF        	cmp #255		; is it enabled?
00310A  3  F0 E8        	beq bsort2		; no, nothing to swap.
00310C  3  20 20 31     	jsr swspr		; swap positions.
00310F  3  4C F4 30     	jmp bsort2
003112  3               swemp:
003112  3  A0 11        	ldy #TABSIZ
003114  3  B1 68        	lda (z80_ix),y		; next table entry.
003116  3  C9 FF        	cmp #255		; is that one on?
003118  3  F0 DA        	beq bsort2		; no, nothing to swap.
00311A  3  20 20 31     	jsr swspr		; swap positions.
00311D  3  4C F4 30     	jmp bsort2
003120  3               
003120  3               ; Swap sprites.
003120  3               
003120  3               swspr:
003120  3  A5 68        	lda z80_x		; table address
003122  3  85 64        	sta z80_e		; copy to de pair.
003124  3  85 66        	sta z80_l		; copy to hl pair.
003126  3  A5 69        	lda z80_i
003128  3  85 67        	sta z80_h
00312A  3  85 65        	sta z80_d
00312C  3               
00312C  3  18           	clc
00312D  3  A5 66        	lda z80_l
00312F  3  69 11        	adc #TABSIZ		; distance to second entry.
003131  3  85 66        	sta z80_l
003133  3  90 02        	bcc :+
003135  3  E6 67        	inc z80_h
003137  3               :
003137  3  A9 11        	lda #TABSIZ		; bytes to swap.
003139  3  85 63        	sta z80_b
00313B  3  A0 00        	ldy #0
00313D  3               swspr0:
00313D  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00313F  3  48           	pha
003140  3  B1 64        	lda (z80_de),y 		; fetch first byte.
003142  3  91 66        	sta (z80_hl),y 		; copy to second.
003144  3  68           	pla
003145  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
003147  3               
003147  3  E6 64        	inc z80_e 		; next byte.
003149  3  D0 02        	bne :+
00314B  3  E6 65        	inc z80_d
00314D  3               :
00314D  3  E6 66        	inc z80_l 		; next byte.
00314F  3  D0 02        	bne :+
003151  3  E6 67        	inc z80_h
003153  3               :
003153  3  C6 63        	dec z80_b
003155  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
003157  3  60           	rts
003158  3               
003158  3               ;----------------------------------------------------
003158  3               ; Process sprites.
003158  3               ;----------------------------------------------------
003158  3               
003158  3               pspr:
003158  3  A9 0C        	lda #NUMSPR		; sprites to process.
00315A  3  85 rr        	sta sprptr
00315C  3               
00315C  3  A9 65        	lda #<sprtab 		; sprite table.
00315E  3  85 68        	sta z80_x
003160  3  A9 37        	lda #>sprtab
003162  3  85 69        	sta z80_i
003164  3               pspr1:
003164  3  A0 00        	ldy #0
003166  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
003168  3  C9 09        	cmp #9 			; within range of sprite types?
00316A  3  B0 03        	bcs :+
00316C  3  20 7F 31     	jsr pspr2 		; yes, process this one.
00316F  3               :
00316F  3  18           	clc
003170  3  A5 68        	lda z80_x
003172  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003174  3  85 68        	sta z80_x
003176  3  90 02        	bcc :+
003178  3  E6 69        	inc z80_i		; next sprite.
00317A  3               :
00317A  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
00317C  3  D0 E6        	bne pspr1
00317E  3  60           	rts
00317F  3               
00317F  3               ;sprptr:	.byte 0
00317F  3               
00317F  3               pspr2:
00317F  3  A5 68        	lda z80_x 		; store original sprite pointer.
003181  3  85 rr        	sta ogptr
003183  3  A5 69        	lda z80_i
003185  3  85 rr        	sta ogptr+1
003187  3  20 93 31     	jsr pspr3		; do the routine.
00318A  3               rtorg:
00318A  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
00318C  3  85 68        	sta z80_x
00318E  3  A5 rr        	lda ogptr+1
003190  3  85 69        	sta z80_i
003192  3               rtorg0:
003192  3  60           	rts
003193  3               
003193  3               pspr3:
003193  3  A9 C8        	lda #<evtyp0		; sprite type events list.
003195  3  85 66        	sta z80_l
003197  3  A9 31        	lda #>evtyp0
003199  3  85 67        	sta z80_h
00319B  3               pspr4:
00319B  3  B1 68        	lda (z80_ix),y
00319D  3  0A           	asl a			; double accumulator.
00319E  3  18           	clc
00319F  3  65 66        	adc z80_l
0031A1  3  85 66        	sta z80_l
0031A3  3  90 02        	bcc :+
0031A5  3  E6 67        	inc z80_h
0031A7  3               :
0031A7  3  B1 66        	lda (z80_hl),y
0031A9  3  85 64        	sta z80_e 		; copy to de.
0031AB  3  48           	pha
0031AC  3               
0031AC  3  E6 66        	inc z80_l 		; next byte of address.
0031AE  3  D0 02        	bne :+
0031B0  3  E6 67        	inc z80_h
0031B2  3               :
0031B2  3  B1 66        	lda (z80_hl),y 		; address high.
0031B4  3  85 65        	sta z80_d
0031B6  3               
0031B6  3  48           	pha	 		; swap address into hl.
0031B7  3  A5 67        	lda z80_h
0031B9  3  85 65        	sta z80_d
0031BB  3  68           	pla
0031BC  3  85 67        	sta z80_h
0031BE  3  68           	pla
0031BF  3  85 66        	sta z80_l
0031C1  3  A5 66        	lda z80_l
0031C3  3  85 64        	sta z80_e
0031C5  3               
0031C5  3  6C 66 00     	jmp (z80_hl) 		; go there.
0031C8  3               
0031C8  3               ;ogptr:	.word 0			; original sprite pointer.
0031C8  3               
0031C8  3               ; Address of each sprite type's routine.
0031C8  3               
0031C8  3  60 38        evtyp0:	.word evnt00
0031CA  3  49 39        evtyp1:	.word evnt01
0031CC  3  7A 3C        evtyp2:	.word evnt02
0031CE  3  B2 3C        evtyp3:	.word evnt03
0031D0  3  B3 3C        evtyp4:	.word evnt04
0031D2  3  B4 3C        evtyp5:	.word evnt05
0031D4  3  B5 3C        evtyp6:	.word evnt06
0031D6  3  B6 3C        evtyp7:	.word evnt07
0031D8  3  B7 3C        evtyp8:	.word evnt08
0031DA  3               
0031DA  3               ;--------------------------------------------------------------
0031DA  3               ; Display sprites.
0031DA  3               ;
0031DA  3               ; Input:
0031DA  3               ;  IX = sprite table
0031DA  3               ;--------------------------------------------------------------
0031DA  3               
0031DA  3               dspr:
0031DA  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0031DC  3  85 rr        	sta sprcnt
0031DE  3               dspr0:
0031DE  3  A0 00        	ldy #0
0031E0  3  B1 68        	lda (z80_ix),y 		; get sprite type.
0031E2  3  C9 FF        	cmp #255 		; is it enabled?
0031E4  3  D0 42        	bne dspr1 		; yes, it needs deleting.
0031E6  3               dspr5:
0031E6  3  A0 05        	ldy #5
0031E8  3  B1 68        	lda (z80_ix),y 		; new type.
0031EA  3  C9 FF        	cmp #255		; is it enabled?
0031EC  3  D0 76        	bne dspr3 		; yes, it needs drawing.
0031EE  3               dspr2:
0031EE  3  A0 05        	ldy #5
0031F0  3  B1 68        	lda (z80_ix),y 		; copy new type.
0031F2  3  A0 00        	ldy #0
0031F4  3  91 68        	sta (z80_ix),y
0031F6  3  A0 06        	ldy #6
0031F8  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0031FA  3  A0 01        	ldy #1
0031FC  3  91 68        	sta (z80_ix),y
0031FE  3  A0 07        	ldy #7
003200  3  B1 68        	lda (z80_ix),y 		; copy new frame.
003202  3  A0 02        	ldy #2
003204  3  91 68        	sta (z80_ix),y
003206  3  A0 08        	ldy #8
003208  3  B1 68        	lda (z80_ix),y 		; copy new y.
00320A  3  A0 03        	ldy #3
00320C  3  91 68        	sta (z80_ix),y
00320E  3  A0 09        	ldy #9
003210  3  B1 68        	lda (z80_ix),y 		; copy new x.
003212  3  A0 04        	ldy #4
003214  3  91 68        	sta (z80_ix),y
003216  3               
003216  3  18           	clc
003217  3  A5 68        	lda z80_x
003219  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
00321B  3  85 68        	sta z80_x
00321D  3  A5 69        	lda z80_i
00321F  3  69 00        	adc #0
003221  3  85 69        	sta z80_i 		; next sprite.
003223  3  C6 rr        	dec sprcnt
003225  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
003227  3  60           	rts
003228  3               dspr1:
003228  3  A0 05        	ldy #5
00322A  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
00322C  3  C9 FF        	cmp #255		; is this enabled?
00322E  3  D0 06        	bne dspr4 		; yes, display both.
003230  3               dspr6:
003230  3  20 6E 4F     	jsr sspria 		; show single sprite.
003233  3  4C EE 31     	jmp dspr2
003236  3               
003236  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
003236  3               
003236  3               dspr4:
003236  3  A0 04        	ldy #4
003238  3  B1 68        	lda (z80_ix),y		; old x.
00323A  3  A0 09        	ldy #9
00323C  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
00323E  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
003240  3               
003240  3  A0 03        	ldy #3
003242  3  B1 68        	lda (z80_ix),y		; old y.
003244  3  A0 08        	ldy #8
003246  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003248  3  D0 14        	bne dspr7		; they differ, need to redraw.
00324A  3               
00324A  3  A0 02        	ldy #2
00324C  3  B1 68        	lda (z80_ix),y 		; old frame.
00324E  3  A0 07        	ldy #7
003250  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003252  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
003254  3               
003254  3  A0 01        	ldy #1
003256  3  B1 68        	lda (z80_ix),y 		; old image.
003258  3  A0 06        	ldy #6
00325A  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00325C  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
00325E  3               dspr7:
00325E  3  20 8F 4F     	jsr sspric 		; delete old sprite, draw new one simultaneously.
003261  3  4C EE 31     	jmp dspr2
003264  3               dspr3:
003264  3  20 89 4F     	jsr ssprib 		; show single sprite.
003267  3  4C EE 31     	jmp dspr2
00326A  3               
00326A  3               ;sprcnt:	.byte 0
00326A  3               
00326A  3               ;-----------------------------------------
00326A  3               ; Get sprite address calculations.
00326A  3               ; gspran = new sprite, gsprad = old sprite.
00326A  3               ;
00326A  3               ; Input:
00326A  3               ;  IX = sprite address
00326A  3               ;-----------------------------------------
00326A  3               
00326A  3               gspran:
00326A  3  A0 08        	ldy #8
00326C  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00326E  3  85 rr        	sta dispy
003270  3  A0 09        	ldy #9
003272  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
003274  3  85 rr        	sta dispx
003276  3  A0 06        	ldy #6
003278  3  B1 68        	lda (z80_ix),y 		; new sprite image.
00327A  3  20 87 35     	jsr gfrm		; fetch start frame for this sprite.
00327D  3               
00327D  3  A0 00        	ldy #0
00327F  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003281  3  A0 07        	ldy #7
003283  3  18           	clc
003284  3  71 68        	adc (z80_ix),y 		; new add frame number.
003286  3  4C A5 32     	jmp gspra0
003289  3               
003289  3               ;-----------------------------------------
003289  3               ; Calculate old sprite address
003289  3               ;
003289  3               ; Input:
003289  3               ;  IX = sprite address
003289  3               ;
003289  3               ; Output:
003289  3               ;  B  = right byte mask
003289  3               ;  C  = left byte mask
003289  3               ;  DE = spriteframe address
003289  3               ;  scraddr = screenaddress(dispx,dispy)
003289  3               ;-----------------------------------------
003289  3               
003289  3               gsprad:
003289  3  A0 03        	ldy #3
00328B  3  B1 68        	lda (z80_ix),y		; y coordinate.
00328D  3  85 rr        	sta dispy
00328F  3  A0 04        	ldy #4
003291  3  B1 68        	lda (z80_ix),y		; x coordinate.
003293  3  85 rr        	sta dispx
003295  3  A0 01        	ldy #1
003297  3  B1 68        	lda (z80_ix),y 		; sprite image.
003299  3  20 87 35     	jsr gfrm 		; fetch start frame for this sprite.
00329C  3               
00329C  3               ; z80_hl = sprite framenr
00329C  3               
00329C  3  A0 00        	ldy #0
00329E  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032A0  3               
0032A0  3               ; z80_ix+2 = current framenr
0032A0  3               
0032A0  3  A0 02        	ldy #2
0032A2  3  18           	clc
0032A3  3  71 68        	adc (z80_ix),y 		; add frame number.
0032A5  3               
0032A5  3               ; A = sprite framenr + current framenr
0032A5  3               ;
0032A5  3               ; framestart = z80_d/e = 120 * A (Normal 4 x 32 = 128)
0032A5  3               ; framestart = framestart + (x AND 1) * 60
0032A5  3               ; framestart = framestart + (reftable(dispy) * 20)
0032A5  3               
0032A5  3               gspra0:
0032A5  3               
0032A5  3               ; Calculate framestart = 120 * sprite image
0032A5  3               
0032A5  3  85 65        	sta z80_d
0032A7  3  85 rr        	sta tmp
0032A9  3  A9 00        	lda #0
0032AB  3  85 64        	sta z80_e
0032AD  3  85 rr        	sta tmp+1
0032AF  3               
0032AF  3  46 65        	lsr z80_d	; a * 128
0032B1  3  66 64        	ror z80_e
0032B3  3               
0032B3  3  06 rr        	asl tmp		; a x 8
0032B5  3  26 rr        	rol tmp+1
0032B7  3  06 rr        	asl tmp
0032B9  3  26 rr        	rol tmp+1
0032BB  3  06 rr        	asl tmp
0032BD  3  26 rr        	rol tmp+1
0032BF  3               
0032BF  3  38           	sec		; a*128 - a*8
0032C0  3  A5 64        	lda z80_e
0032C2  3  E5 rr        	sbc tmp
0032C4  3  85 64        	sta z80_e
0032C6  3  A5 65        	lda z80_d
0032C8  3  E5 rr        	sbc tmp+1
0032CA  3  85 65        	sta z80_d
0032CC  3               
0032CC  3               ;.if bflag
0032CC  3               ;	lsr tmp1
0032CC  3               ;	ror tmp2
0032CC  3               ;	clc
0032CC  3               ;	lda tmp2
0032CC  3               ;	adc z80_e
0032CC  3               ;	sta z80_e
0032CC  3               ;	lda tmp1
0032CC  3               ;	adc z80_d
0032CC  3               ;	sta z80_d
0032CC  3               ;.endif
0032CC  3               
0032CC  3               ; Add spritedata address
0032CC  3               
0032CC  3  18           	clc 			; address of play sprites.
0032CD  3  A5 64        	lda z80_e
0032CF  3  69 D1        	adc #<sprgfx
0032D1  3  85 64        	sta z80_e
0032D3  3  A5 65        	lda z80_d
0032D5  3  69 3E        	adc #>sprgfx
0032D7  3  85 65        	sta z80_d
0032D9  3               
0032D9  3               ; Check for x-shift
0032D9  3               
0032D9  3  A5 rr        	lda dispx 		; x coordinate.
0032DB  3  29 01        	and #1
0032DD  3  F0 0B        	beq chk_y_shift
0032DF  3  18           	clc			; Point to odd frame
0032E0  3  A5 64        	lda z80_e
0032E2  3  69 3C        	adc #60
0032E4  3  85 64        	sta z80_e
0032E6  3  90 02        	bcc :+
0032E8  3  E6 65        	inc z80_d
0032EA  3               :
0032EA  3               ; SCheck for y-shift
0032EA  3               
0032EA  3               chk_y_shift:
0032EA  3  A6 rr        	ldx dispy
0032EC  3  BD 4A DF     	lda V_SPR_PTR,x
0032EF  3  18           	clc
0032F0  3  65 64        	adc z80_e
0032F2  3  85 64        	sta z80_e
0032F4  3  90 02        	bcc :+
0032F6  3  E6 65        	inc z80_d
0032F8  3               :
0032F8  3               
0032F8  3               ;------------------------------------------------------------------
0032F8  3               ; Drop into screen address routine.
0032F8  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0032F8  3               ;------------------------------------------------------------------
0032F8  3               
0032F8  3               ; Check for bottom of screen
0032F8  3               
0032F8  3               scadd:
0032F8  3  A6 rr        	ldx dispy
0032FA  3  E0 4C        	cpx #76
0032FC  3  90 02        	bcc :+
0032FE  3  A2 4C        	ldx #76
003300  3               :
003300  3               
003300  3  A5 rr        	lda dispx
003302  3  4A           	lsr a
003303  3  18           	clc
003304  3  7D 00 DC     	adc SCADTB_lb,x
003307  3  85 rr        	sta scraddr
003309  3  BD 00 DD     	lda SCADTB_hb,x
00330C  3  69 00        	adc #0
00330E  3  85 rr        	sta scraddr+1
003310  3  60           	rts
003311  3               
003311  3               spmask:
003311  3  FF 00        	.byte $ff,$00
003313  3  6A 35        	.byte $6a,$35
003315  3               
003315  3  00           tmp1:	.byte 0
003316  3  00           tmp2:	.byte 0
003317  3               
003317  3               
003317  3               ;----------------------------------------------------------------------
003317  3               ; Line drawn, now work out next target address.
003317  3               ;----------------------------------------------------------------------
003317  3               
003317  3               nline:
003317  3  18           	clc
003318  3  A5 rr        	lda scraddr 		; get low byte of address.
00331A  3  69 28        	adc #ScrWidth
00331C  3  85 rr        	sta scraddr 		; new low byte of address.
00331E  3  90 02        	bcc :+
003320  3  E6 rr        	inc scraddr+1 		; new high byte of address.
003322  3               :
003322  3  60           	rts
003323  3               
003323  3               ;-----------------------------------------------------------
003323  3               ; Animates a sprite.
003323  3               ;
003323  3               ; Input:
003323  3               ;  IX = sprite address
003323  3               ;  HL = last sprite address
003323  3               ;-----------------------------------------------------------
003323  3               
003323  3               animsp:
003323  3  25 rr        	and frmno
003325  3  F0 01        	beq :+
003327  3  60           	rts
003328  3               :
003328  3  A0 06        	ldy #6
00332A  3  B1 68        	lda (z80_ix),y		; sprite image
00332C  3  20 87 35     	jsr gfrm		; get frame data.
00332F  3               
00332F  3  E6 66        	inc z80_l		; point to frames.
003331  3  D0 02        	bne :+
003333  3  E6 67        	inc z80_h
003335  3               :
003335  3  A0 07        	ldy #7
003337  3  B1 68        	lda (z80_ix),y		; sprite frame.
003339  3  18           	clc
00333A  3  69 01        	adc #1			; next one along.
00333C  3  A0 00        	ldy #0
00333E  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
003340  3  90 02        	bcc anims0		; no, not yet.
003342  3  A9 00        	lda #0			; start at first frame.
003344  3               anims0:
003344  3  A0 07        	ldy #7
003346  3  91 68        	sta (z80_ix),y		; new frame.
003348  3  60           	rts
003349  3               
003349  3               ;--------------------------------------------------------------
003349  3               ; Animate back
003349  3               ;
003349  3               ; Input:
003349  3               ;  IX = sprite address
003349  3               ;  HL = last sprite address
003349  3               ;--------------------------------------------------------------
003349  3               
003349  3               animbk:
003349  3  25 rr        	and frmno
00334B  3  F0 01        	beq :+
00334D  3  60           	rts
00334E  3               :
00334E  3  A0 06        	ldy #6
003350  3  B1 68        	lda (z80_ix),y		; sprite image.
003352  3  20 87 35     	jsr gfrm		; get frame data.
003355  3               
003355  3  E6 66        	inc z80_l 		; point to frames.
003357  3  D0 02        	bne :+
003359  3  E6 67        	inc z80_h
00335B  3               :
00335B  3  A0 07        	ldy #7
00335D  3  B1 68        	lda (z80_ix),y 		; sprite frame.
00335F  3  F0 03        	beq :+
003361  3  4C 68 33     	jmp rtanb0 		; yes, start at end.
003364  3               :
003364  3  A0 00        	ldy #0
003366  3  B1 66        	lda (z80_hl),y 		; last sprite.
003368  3               rtanb0:
003368  3  38           	sec
003369  3  E9 01        	sbc #1			; next one along.
00336B  3  4C 44 33     	jmp anims0		; set new frame.
00336E  3               
00336E  3               ;--------------------------------------------------------------
00336E  3               ; Check for collision with other sprite, strict enforcement.
00336E  3               ;
00336E  3               ; Input:
00336E  3               ;  b		= sprite to test for
00336E  3               ;  ix		= current sprite pointer
00336E  3               ;
00336E  3               ; global:	b
00336E  3               ; local:	x,y,hl,de,skptr
00336E  3               ; calls:	-
00336E  3               ;--------------------------------------------------------------
00336E  3               
00336E  3               sktyp:
00336E  3  A9 65        	lda #<sprtab				; sprite table.
003370  3  85 66        	sta z80_l
003372  3  A9 37        	lda #>sprtab
003374  3  85 67        	sta z80_h
003376  3               numsp2:
003376  3  A9 0C        	lda #NUMSPR				; number of sprites.
003378  3  85 rr        	sta sktptr
00337A  3               sktyp0:
00337A  3  A5 66        	lda z80_l 				; store pointer to sprite.
00337C  3  85 rr        	sta skptr
00337E  3  A5 67        	lda z80_h
003380  3  85 rr        	sta skptr+1
003382  3               
003382  3  A0 00        	ldy #0
003384  3  B1 66        	lda (z80_hl),y 				; get sprite type.
003386  3  C5 63        	cmp z80_b				; is it the type we seek?
003388  3  F0 1D        	beq coltyp				; yes, we can use this one.
00338A  3               sktyp1:
00338A  3  18           	clc
00338B  3  A5 rr        	lda skptr				; retrieve sprite pointer.
00338D  3  69 11        	adc #TABSIZ				; size of each entry.
00338F  3  85 66        	sta z80_l
003391  3  A5 rr        	lda skptr+1
003393  3  69 00        	adc #0
003395  3  85 67        	sta z80_h
003397  3  C6 rr        	dec sktptr					; one less iteration.
003399  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
00339B  3  A9 00        	lda #0					; default to ROM address - no sprite.
00339D  3  85 66        	sta z80_l
00339F  3  85 67        	sta z80_h
0033A1  3  85 rr        	sta skptr				; store pointer to sprite.
0033A3  3  85 rr        	sta skptr+1
0033A5  3               
0033A5  3  18           	clc					; don't return with zero flag set.
0033A6  3  60           	rts 					; didn't find one.
0033A7  3               
0033A7  3               ;skptr:	.word 0					; search pointer.
0033A7  3               ;sktptr:	.byte 0
0033A7  3               
0033A7  3               coltyp:
0033A7  3  A0 00        	ldy #0
0033A9  3  B1 68        	lda (z80_ix),y				; current sprite type.
0033AB  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0033AD  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0033AF  3               colty0:
0033AF  3  A0 09        	ldy #9					; distance to x position in table.
0033B1  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0033B3  3  85 64        	sta z80_e
0033B5  3  88           	dey
0033B6  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0033B8  3  85 65        	sta z80_d
0033BA  3               
0033BA  3               ; Drop into collision detection.
0033BA  3               
0033BA  3               colc16:
0033BA  3  A0 09        	ldy #9
0033BC  3  B1 68        	lda (z80_ix),y			 	; x coord.
0033BE  3  38           	sec					; subtract x.
0033BF  3  E5 64        	sbc z80_e
0033C1  3  B0 05        	bcs  colc1a 				; result is positive.
0033C3  3  49 FF        	eor #$ff				; make negative positive.
0033C5  3  18           	clc
0033C6  3  69 01        	adc #1
0033C8  3               colc1a:
0033C8  3  C9 08        	cmp #SPR_WID				; within x range?
0033CA  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0033CC  3  85 62        	sta z80_c				; store difference.
0033CE  3               
0033CE  3  A0 08        	ldy #8
0033D0  3  B1 68        	lda (z80_ix),y				; y coord.
0033D2  3  38           	sec
0033D3  3  E5 65        	sbc z80_d				; subtract y.
0033D5  3  B0 05        	bcs colc1b				; result is positive.
0033D7  3  49 FF        	eor #$ff				; make negative positive.
0033D9  3  18           	clc
0033DA  3  69 01        	adc #1
0033DC  3               colc1b:
0033DC  3  C9 09        	cmp #SPR_HGT					; within y range?
0033DE  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0033E0  3  18           	clc					; add x difference.
0033E1  3  65 62        	adc z80_c
0033E3  3  C9 0C        	cmp #12					; only 5 corner pixels touching?
0033E5  3  B0 02        	bcs :+
0033E7  3  38           	sec
0033E8  3  60           	rts 					; carry set if there's a collision.
0033E9  3               :
0033E9  3  4C 8A 33     	jmp sktyp1				; try next sprite in table.
0033EC  3               colty1:
0033EC  3  A5 68        	lda z80_x  				; compare the two.
0033EE  3  C5 66        	cmp z80_l
0033F0  3  D0 09        	bne end_col
0033F2  3  A5 69        	lda z80_i
0033F4  3  C5 67        	cmp z80_h
0033F6  3  D0 03        	bne end_col
0033F8  3  4C 8A 33     	jmp sktyp1 				; addresses are identical.
0033FB  3               end_col:
0033FB  3  4C AF 33     	jmp colty0
0033FE  3               
0033FE  3               ;-----------------------------------------------------------
0033FE  3               ; Display number, left aligned
0033FE  3               ;
0033FE  3               ; Input:
0033FE  3               ;  a		= number
0033FE  3               ;
0033FE  3               ; global:	-
0033FE  3               ; local:	a,y,bc,hl,displ0
0033FE  3               ; calls:	num2ch,dmsg3
0033FE  3               ;-----------------------------------------------------------
0033FE  3               
0033FE  3               disply:
0033FE  3  85 61        	sta z80_a
003400  3  A9 26        	lda #<displ0				; display workspace.
003402  3  85 62        	sta z80_c
003404  3  A9 34        	lda #>displ0
003406  3  85 63        	sta z80_b
003408  3  A5 61        	lda z80_a
00340A  3  20 C3 29     	jsr num2ch				; convert accumulator to string.
00340D  3               displ1:
00340D  3  C6 62        	dec z80_c				; back one character.
00340F  3  D0 02        	bne :+
003411  3  C6 63        	dec z80_b
003413  3               :
003413  3  A0 00        	ldy #0
003415  3  B1 62        	lda (z80_bc),y				; fetch digit.
003417  3  09 80        	ora #128				; insert end marker.
003419  3  91 62        	sta (z80_bc),y				; new value.
00341B  3               
00341B  3  A9 26        	lda #<displ0				; display space.
00341D  3  85 66        	sta z80_l
00341F  3  A9 34        	lda #>displ0
003421  3  85 67        	sta z80_h
003423  3               
003423  3  4C C7 2F     	jmp dmsg3				; display the string.
003426  3               
003426  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00342A  3               
00342A  3               ;----------------------------------------------------------------
00342A  3               ; Initialise screen.
00342A  3               ;
00342A  3               ; global:	roomtb,scno
00342A  3               ; local:	-
00342A  3               ; calls:	tstcs
00342A  3               ;----------------------------------------------------------------
00342A  3               
00342A  3               initsc:
00342A  3  AD 42 38     	lda roomtb 			; whereabouts in the map are we?
00342D  3  20 37 34     	jsr tstsc 			; find displacement.
003430  3  C9 FF        	cmp #255 			; is it valid?
003432  3  F0 02        	beq init_end 			; no, it's rubbish.
003434  3  85 rr        	sta scno			; store new room number.
003436  3               init_end:
003436  3  60           	rts
003437  3               
003437  3               ;----------------------------------------------------------------
003437  3               ; Test screen.
003437  3               ;
003437  3               ; global:	-
003437  3               ; local:	x
003437  3               ; calls:	-
003437  3               ;----------------------------------------------------------------
003437  3               
003437  3               tstsc:
003437  3  85 rr        	sta tmproom
003439  3  18           	clc
00343A  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
00343C  3  AA           	tax 				; add displacement to map data.
00343D  3  BD 56 38     	lda mapdat-MAPWID,x 		; find room number there.
003440  3  60           	rts
003441  3               
003441  3               ;tmproom:	.byte 0
003441  3               
003441  3               ;--------------------------
003441  3               ; Screen left.
003441  3               ;--------------------------
003441  3               
003441  3               scrl:
003441  3  AD 42 38     	lda roomtb 			; present room table pointer.
003444  3  38           	sec
003445  3  E9 01        	sbc #1				; room left.
003447  3               scrl0:
003447  3  20 37 34     	jsr tstsc			; test screen.
00344A  3  C9 FF        	cmp #255			; is there a screen this way?
00344C  3  D0 01        	bne :+
00344E  3  60           	rts				; no, return to loop.
00344F  3               :
00344F  3  A5 rr        	lda tmproom			; restore room displacement.
003451  3  8D 42 38     	sta roomtb			; new room table position.
003454  3               scrl1:
003454  3  20 2A 34     	jsr initsc 			; set new screen.
003457  3  A9 02        	lda #2
003459  3  85 rr        	sta restfl 			; set it.
00345B  3  60           	rts
00345C  3               scrr:
00345C  3  AD 42 38     	lda roomtb 			; room table pointer.
00345F  3  18           	clc
003460  3  69 01        	adc #1				; room right.
003462  3  4C 47 34     	jmp scrl0
003465  3               scru:
003465  3  AD 42 38     	lda roomtb 			; room table pointer.
003468  3  38           	sec
003469  3  E9 03        	sbc #MAPWID 			; room up.
00346B  3  4C 47 34     	jmp scrl0
00346E  3               scrd:
00346E  3  AD 42 38     	lda roomtb 			; room table pointer.
003471  3  18           	clc
003472  3  69 03        	adc #MAPWID 			; room down.
003474  3  4C 47 34     	jmp scrl0
003477  3               
003477  3               ;-----------------------------------------
003477  3               ; Jump to new screen.
003477  3               ;-----------------------------------------
003477  3               
003477  3               nwscr:
003477  3  A2 00        	ldx #0				; start of map data.
003479  3               nwscr0:
003479  3  DD 59 38     	cmp mapdat,x
00347C  3  F0 06        	beq nwscr1			; have we found a match for screen?
00347E  3  E8           	inx 				; next room.
00347F  3  E0 50        	cpx #80				; zero room count, 80 to search.
003481  3  D0 F6        	bne nwscr0			; keep looking.
003483  3  60           	rts
003484  3               nwscr1:
003484  3  8E 42 38     	stx roomtb			; set the map position.
003487  3  4C 54 34     	jmp scrl1			; draw new room.
00348A  3               
00348A  3               
00348A  3               ;----------------------------------------------------------
00348A  3               ; Gravity processing.
00348A  3               ;----------------------------------------------------------
00348A  3               
00348A  3               grav:
00348A  3  A0 0D        	ldy #13
00348C  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00348E  3  85 66        	sta z80_l
003490  3  A0 0E        	ldy #14
003492  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003494  3  85 67        	sta z80_h
003496  3  05 66        	ora z80_l			; merge in low byte.
003498  3  D0 01        	bne :+
00349A  3  60           	rts				; if neither is set, we're not in the air.
00349B  3               :
00349B  3  A0 00        	ldy #0
00349D  3  B1 66        	lda (z80_hl),y			; pixels to move.
00349F  3  85 61        	sta z80_a
0034A1  3  C9 63        	cmp #99				; reached the end?
0034A3  3  D0 0C        	bne grav0			; no, continue.
0034A5  3               grav2:
0034A5  3  C6 66        	dec z80_l			; go back to previous value.
0034A7  3  C9 FF        	cmp #$ff
0034A9  3  D0 02        	bne :+
0034AB  3  C6 67        	dec z80_h
0034AD  3               :
0034AD  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0034AF  3  85 61        	sta z80_a
0034B1  3               grav0:
0034B1  3  E6 66        	inc z80_l			; point to next table entry.
0034B3  3  D0 02        	bne :+
0034B5  3  E6 67        	inc z80_h
0034B7  3               :
0034B7  3  A5 66        	lda z80_l
0034B9  3  A0 0D        	ldy #13
0034BB  3  91 68        	sta (z80_ix),y			; store new pointer low.
0034BD  3  A5 67        	lda z80_h
0034BF  3  A0 0E        	ldy #14
0034C1  3  91 68        	sta (z80_ix),y			; store new pointer high.
0034C3  3               grav1:
0034C3  3  A5 61        	lda z80_a
0034C5  3  D0 01        	bne :+				; any movement required?
0034C7  3  60           	rts				; no, not this time.
0034C8  3               :
0034C8  3  A5 61        	lda z80_a
0034CA  3  C9 80        	cmp #128			; is it up or down?
0034CC  3  B0 15        	bcs gravu			; it's up.
0034CE  3               gravd:
0034CE  3  85 63        	sta z80_b			; set pixels to move.
0034D0  3               gravd0:
0034D0  3  20 D2 2D     	jsr cangd			; can we go down?
0034D3  3  D0 28        	bne gravst			; can't move down, so stop.
0034D5  3  A0 08        	ldy #8
0034D7  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0034D9  3  18           	clc
0034DA  3  69 01        	adc #1
0034DC  3  91 68        	sta (z80_ix),y
0034DE  3  C6 63        	dec z80_b
0034E0  3  D0 EE        	bne gravd0
0034E2  3  60           	rts
0034E3  3               gravu:
0034E3  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0034E5  3  18           	clc
0034E6  3  69 01        	adc #1
0034E8  3  85 63        	sta z80_b			; set pixels to move.
0034EA  3               gravu0:
0034EA  3  20 85 2D     	jsr cangu			; can we go up?
0034ED  3  D0 6E        	bne ifalls			; can't move up, go down next.
0034EF  3  A0 08        	ldy #8
0034F1  3  B1 68        	lda (z80_ix),y
0034F3  3  38           	sec
0034F4  3  E9 01        	sbc #1
0034F6  3  91 68        	sta (z80_ix),y			; adjust new x coord.
0034F8  3  C6 63        	dec z80_b
0034FA  3  D0 EE        	bne gravu0
0034FC  3  60           	rts
0034FD  3               gravst:
0034FD  3  A0 0D        	ldy #13
0034FF  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003501  3  85 66        	sta z80_l
003503  3  A0 0E        	ldy #14
003505  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003507  3  85 67        	sta z80_h
003509  3               
003509  3  A9 00        	lda #0				; null value in pointer.
00350B  3  A0 0D        	ldy #13
00350D  3  91 68        	sta (z80_ix),y			; store new pointer low.
00350F  3  C8           	iny
003510  3  91 68        	sta (z80_ix),y			; store new pointer high.
003512  3               
003512  3  A0 00        	ldy #0
003514  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
003516  3  C9 63        	cmp #99				; is it the end marker?
003518  3               evftf:
003518  3  F0 01        	beq :+				; yes, fallen too far.
00351A  3  60           	rts
00351B  3               :
00351B  3  4C BE 3D     	jmp evnt15			; EVENT FELLTOOFAR
00351E  3               
00351E  3               ;------------------------------------------------
00351E  3               ; Initiate fall check.
00351E  3               ;------------------------------------------------
00351E  3               
00351E  3               ifall:
00351E  3  A0 0D        	ldy #13
003520  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
003522  3  85 66        	sta z80_l
003524  3  A0 0E        	ldy #14
003526  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
003528  3  85 67        	sta z80_h			; high byte in accumulator.
00352A  3  05 66        	ora z80_l			; merge in low byte.
00352C  3  F0 01        	beq :+
00352E  3  60           	rts				; if either is set, we're already in the air.
00352F  3               :
00352F  3  A0 09        	ldy #9
003531  3  B1 68        	lda (z80_ix),y			; y coordinate.
003533  3  85 rr        	sta dispx
003535  3  A0 08        	ldy #8
003537  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003539  3  18           	clc
00353A  3               numsp7:
00353A  3  69 09        	adc #SPR_HGT			; add 16 pixels.
00353C  3  85 rr        	sta dispy			; set up test coordinates.
00353E  3  20 39 2F     	jsr tstbl			; get map address.
003541  3  20 7D 2E     	jsr plchk			; block, platform check.
003544  3  F0 01        	beq :+
003546  3  60           	rts				; it's solid, don't fall.
003547  3               :
003547  3  E6 rr        	inc bufaddr			; look right one cell.
003549  3  20 7D 2E     	jsr plchk			; block, platform check.
00354C  3  F0 01        	beq :+
00354E  3  60           	rts				; it's solid, don't fall.
00354F  3               :
00354F  3  A5 rr        	lda dispx			; y coordinate.
003551  3  29 07        	and #7				; position straddling block cells.
003553  3  F0 08        	beq ifalls			; no more checks needed.
003555  3  E6 rr        	inc bufaddr			; look to third cell.
003557  3  20 7D 2E     	jsr plchk			; block, platform check.
00355A  3  F0 01        	beq :+
00355C  3  60           	rts				; it's solid, don't fall.
00355D  3               :
00355D  3               ifalls:
00355D  3  A9 03        	lda #<jtab			; jump table start.
00355F  3  85 66        	sta z80_l
003561  3  A9 4E        	lda #>jtab
003563  3  85 67        	sta z80_h
003565  3               ifal0:
003565  3  E6 66        	inc z80_l			; point to next value.
003567  3  D0 02        	bne :+
003569  3  E6 67        	inc z80_h
00356B  3               :
00356B  3  A0 00        	ldy #0
00356D  3  B1 66        	lda (z80_hl),y			; fetch value.
00356F  3  F0 F4        	beq ifal0			; no, get next value.
003571  3  C9 63        	cmp #99				; reached end of table?
003573  3  D0 01        	bne :+
003575  3  60           	rts				; yes, don't fall.
003576  3               :
003576  3  C9 80        	cmp #128			; is it going up?
003578  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
00357A  3               
00357A  3  A0 0D        	ldy #13
00357C  3  A5 66        	lda z80_l
00357E  3  91 68        	sta (z80_ix),y 			; set jump low.
003580  3  A0 0E        	ldy #14
003582  3  A5 67        	lda z80_h
003584  3  91 68        	sta (z80_ix),y 			; set jump high.
003586  3  60           	rts
003587  3               
003587  3               
003587  3               ;----------------------------------------------------
003587  3               ; Get frame data for a particular sprite.
003587  3               ; Input:
003587  3               ;  a		= framenumer
003587  3               ; Output:
003587  3               ;  hl		= frame address
003587  3               ;
003587  3               ; global:	hl,frmptr
003587  3               ; local:	-
003587  3               ; calls:	-
003587  3               ;----------------------------------------------------
003587  3               
003587  3               gfrm:
003587  3  0A           	asl a	 		 	; multiple of 2.
003588  3  18           	clc
003589  3  6D 17 28     	adc frmptr 			; frames used by game.
00358C  3  85 66        	sta z80_l
00358E  3  AD 18 28     	lda frmptr+1
003591  3  69 00        	adc #0
003593  3  85 67        	sta z80_h 			; point to frame start.
003595  3  60           	rts
003596  3               
003596  3               ;----------------------------------------------------
003596  3               ; Find sprite list for current room.
003596  3               ;
003596  3               ; global:	hl
003596  3               ; local:	x,y
003596  3               ; calls:	-
003596  3               ;----------------------------------------------------
003596  3               
003596  3               sprlst:
003596  3  A9 D0        	lda #<nmedat 			; list of enemy sprites.
003598  3  85 66        	sta z80_l
00359A  3  A9 4A        	lda #>nmedat
00359C  3  85 67        	sta z80_h
00359E  3  A6 rr        	ldx scno 			; screen number.
0035A0  3  D0 01        	bne sprls2 			; is it the first screen?
0035A2  3  60           	rts 				; yes, don't need to search data.
0035A3  3               sprls2:
0035A3  3  A0 00        	ldy #0
0035A5  3               sprls1:
0035A5  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0035A7  3  C9 FF        	cmp #255			; is it an end marker?
0035A9  3  F0 0E        	beq sprls0 			; yes, end of this room.
0035AB  3               
0035AB  3  18           	clc 				; point to next sprite in list.
0035AC  3  A5 66        	lda z80_l
0035AE  3  69 04        	adc #NMESIZ
0035B0  3  85 66        	sta z80_l
0035B2  3  90 02        	bcc :+
0035B4  3  E6 67        	inc z80_h
0035B6  3               :
0035B6  3  4C A5 35     	jmp sprls1 			; continue until end of room.
0035B9  3               sprls0:
0035B9  3  E6 66        	inc z80_l 			; point to start of next screen.s
0035BB  3  D0 02        	bne :+
0035BD  3  E6 67        	inc z80_h
0035BF  3               :
0035BF  3  CA           	dex
0035C0  3  D0 E3        	bne sprls1 			; continue until room found.
0035C2  3  60           	rts
0035C3  3               
0035C3  3               
0035C3  3               ;----------------------------------------------------
0035C3  3               ; Clear all but a single player sprite.
0035C3  3               ;
0035C3  3               ; global:	-
0035C3  3               ; local:	x,y,ix
0035C3  3               ; calls:	-
0035C3  3               ;----------------------------------------------------
0035C3  3               
0035C3  3               nspr:
0035C3  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0035C5  3  85 rr        	sta sprcnt
0035C7  3  A9 65        	lda #<sprtab 			; sprite table.
0035C9  3  85 68        	sta z80_x
0035CB  3  A9 37        	lda #>sprtab
0035CD  3  85 69        	sta z80_i
0035CF  3               nspr0:
0035CF  3  A0 00        	ldy #0 				; fetch sprite type.
0035D1  3  B1 68        	lda (z80_ix),y 			; is it a player?
0035D3  3  F0 1A        	beq nspr1 			; yes, keep this one.
0035D5  3               
0035D5  3  A9 FF        	lda #255
0035D7  3  A0 00        	ldy #0 				; fetch sprite type.
0035D9  3  91 68        	sta (z80_ix),y 			; delete sprite.
0035DB  3  A0 05        	ldy #5
0035DD  3  91 68        	sta (z80_ix),y 			; remove next type.
0035DF  3               
0035DF  3  18           	clc	 			; next sprite.
0035E0  3  A5 68        	lda z80_x
0035E2  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0035E4  3  85 68        	sta z80_x
0035E6  3  90 02        	bcc :+
0035E8  3  E6 69        	inc z80_i
0035EA  3               :
0035EA  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0035EC  3  D0 E1        	bne nspr0
0035EE  3  60           	rts
0035EF  3               nspr1:
0035EF  3  A9 FF        	lda #255
0035F1  3  A0 00        	ldy #0
0035F3  3  91 68        	sta (z80_ix),y 			; delete sprite.
0035F5  3               
0035F5  3  18           	clc	 			; point to next sprite.
0035F6  3  A5 68        	lda z80_x
0035F8  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0035FA  3  85 68        	sta z80_x
0035FC  3  90 02        	bcc :+
0035FE  3  E6 69        	inc z80_i
003600  3               :
003600  3  C6 rr        	dec sprcnt	 			; one less to do.
003602  3  D0 01        	bne nspr2
003604  3  60           	rts
003605  3               nspr2:
003605  3  A9 FF        	lda #255
003607  3  A0 00        	ldy #0
003609  3  91 68        	sta (z80_ix),y 			; delete sprite.
00360B  3  A0 05        	ldy #5
00360D  3  91 68        	sta (z80_ix),y 			; remove next type.
00360F  3               
00360F  3  18           	clc	 			; next sprite.
003610  3  A5 68        	lda z80_x
003612  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003614  3  85 68        	sta z80_x
003616  3  90 02        	bcc :+
003618  3  E6 69        	inc z80_i
00361A  3               :
00361A  3  C6 rr        	dec sprcnt	 			; one less space in table.
00361C  3  D0 E7        	bne nspr2
00361E  3  60           	rts
00361F  3               
00361F  3               ;----------------------------------------------------------
00361F  3               ; Two initialisation routines.
00361F  3               ; Initialise sprites - copy everything from list to table.
00361F  3               ;
00361F  3               ; global:	-
00361F  3               ; local:	x,y,ix
00361F  3               ; calls:	cpsp
00361F  3               ;----------------------------------------------------------
00361F  3               
00361F  3               ispr:
00361F  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003621  3  85 rr        	sta sprcnt
003623  3  A9 65        	lda #<sprtab			; sprite table.
003625  3  85 68        	sta z80_x
003627  3  A9 37        	lda #>sprtab
003629  3  85 69        	sta z80_i
00362B  3               ispr2:
00362B  3  A0 00        	ldy #0
00362D  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00362F  3  C9 FF        	cmp #255 			; is it an end marker?
003631  3  D0 01        	bne :+
003633  3  60           	rts 				; yes, no more to do.
003634  3               :
003634  3               ispr1:
003634  3  A0 00        	ldy #0
003636  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003638  3  C9 FF        	cmp #255 			; is it enabled yet?
00363A  3  D0 08        	bne ispr4			; yes, try another slot.
00363C  3               
00363C  3  A0 05        	ldy #5
00363E  3  B1 68        	lda (z80_ix),y		 	; next type.
003640  3  C9 FF        	cmp #255 			; is it enabled yet?
003642  3  F0 10        	beq ispr3 			; no, process this one.
003644  3               ispr4:
003644  3  18           	clc 				; next sprite.
003645  3  A5 68        	lda z80_x
003647  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003649  3  85 68        	sta z80_x
00364B  3  90 02        	bcc :+
00364D  3  E6 69        	inc z80_i
00364F  3               :
00364F  3  C6 rr        	dec sprcnt
003651  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
003653  3  60           	rts  				; no more room in table.
003654  3               ispr3:
003654  3  20 A7 36     	jsr cpsp			; initialise a sprite.
003657  3  C6 rr        	dec sprcnt			; one less space in the table.
003659  3  D0 D0        	bne ispr2
00365B  3  60           	rts
00365C  3               
00365C  3               
00365C  3               ;-----------------------------------------------------------------------
00365C  3               ; Initialise sprites - but not player, we're keeping the old one.
00365C  3               ;
00365C  3               ; global:	-
00365C  3               ; local:	x,y,ix
00365C  3               ; calls:	cpsp
00365C  3               ;-----------------------------------------------------------------------
00365C  3               
00365C  3               kspr:
00365C  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00365E  3  A9 65        	lda #<sprtab 			; sprite table.
003660  3  85 68        	sta z80_x
003662  3  A9 37        	lda #>sprtab
003664  3  85 69        	sta z80_i
003666  3               kspr2:
003666  3  A0 00        	ldy #0
003668  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00366A  3  C9 FF        	cmp #255 			; is it an end marker?
00366C  3  D0 01        	bne :+
00366E  3  60           	rts 				; yes, no more to do.
00366F  3               :
00366F  3  C9 00        	cmp #0
003671  3  D0 0E        	bne kspr1 			; no, add to table as normal.
003673  3               
003673  3  18           	clc 				; next sprite.
003674  3  A5 66        	lda z80_l
003676  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003678  3  85 66        	sta z80_l
00367A  3  90 02        	bcc :+
00367C  3  E6 67        	inc z80_h
00367E  3               :
00367E  3  4C 66 36     	jmp kspr2
003681  3               kspr1:
003681  3  A0 00        	ldy #0 				; fetch sprite type.
003683  3  B1 68        	lda (z80_ix),y
003685  3  C9 FF        	cmp #255 			; is it enabled yet?
003687  3  D0 08        	bne kspr4 			; yes, try another slot.
003689  3               
003689  3  A0 05        	ldy #5 				; next type.
00368B  3  B1 68        	lda (z80_ix),y
00368D  3  C9 FF        	cmp #255 			; is it enabled yet?
00368F  3  F0 0F        	beq kspr3 			; no, process this one.
003691  3               kspr4:
003691  3  18           	clc 				; next sprite.
003692  3  A5 68        	lda z80_x
003694  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003696  3  85 68        	sta z80_x
003698  3  90 02        	bcc :+
00369A  3  E6 69        	inc z80_i
00369C  3               :
00369C  3  CA           	dex	 			; repeat for remaining sprites.
00369D  3  D0 E2        	bne kspr1
00369F  3  60           	rts  				; no more room in table.
0036A0  3               kspr3:
0036A0  3  20 A7 36     	jsr cpsp 			; copy sprite to table.
0036A3  3  CA           	dex	 			; one less space in the table.
0036A4  3  D0 C0        	bne kspr2
0036A6  3  60           	rts
0036A7  3               
0036A7  3               ;----------------------------------------------
0036A7  3               ; Copy sprite from list to table.
0036A7  3               ;
0036A7  3               ; global:	hl,ix
0036A7  3               ; local:	y
0036A7  3               ; calls:	evnt09
0036A7  3               ;----------------------------------------------
0036A7  3               
0036A7  3               cpsp:
0036A7  3  A0 00        	ldy #0				; fetch byte from table.
0036A9  3  B1 66        	lda (z80_hl),y
0036AB  3  91 68        	sta (z80_ix),y			; set up type.
0036AD  3  A0 05        	ldy #PAM1ST
0036AF  3  91 68        	sta (z80_ix),y 			; set up type.
0036B1  3               
0036B1  3  E6 66        	inc z80_l 			; move to next byte.
0036B3  3  D0 02        	bne :+
0036B5  3  E6 67        	inc z80_h
0036B7  3               :
0036B7  3  A0 00        	ldy #0 				; fetch byte from table.
0036B9  3  B1 66        	lda (z80_hl),y
0036BB  3  A0 06        	ldy #6
0036BD  3  91 68        	sta (z80_ix),y			; set up image.
0036BF  3               
0036BF  3  E6 66        	inc z80_l 			; move to next byte.
0036C1  3  D0 02        	bne :+
0036C3  3  E6 67        	inc z80_h
0036C5  3               :
0036C5  3  A0 00        	ldy #0
0036C7  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0036C9  3  A0 08        	ldy #8
0036CB  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0036CD  3               
0036CD  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0036CF  3  A0 03        	ldy #3
0036D1  3  91 68        	sta (z80_ix),y
0036D3  3               
0036D3  3  E6 66        	inc z80_l 			; move to next byte.
0036D5  3  D0 02        	bne :+
0036D7  3  E6 67        	inc z80_h
0036D9  3               :
0036D9  3  A0 00        	ldy #0 				; fetch byte from table.
0036DB  3  B1 66        	lda (z80_hl),y
0036DD  3  A0 09        	ldy #9
0036DF  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0036E1  3               
0036E1  3  E6 66        	inc z80_l 			; move to next byte.
0036E3  3  D0 02        	bne :+
0036E5  3  E6 67        	inc z80_h
0036E7  3               :
0036E7  3  A9 00        	lda #0				; zeroes in accumulator.
0036E9  3  A0 07        	ldy #7 				; reset frame number.
0036EB  3  91 68        	sta (z80_ix),y
0036ED  3  A0 0A        	ldy #10 			; reset direction.
0036EF  3  91 68        	sta (z80_ix),y
0036F1  3  A0 0D        	ldy #13				; reset jump pointer low.
0036F3  3  91 68        	sta (z80_ix),y
0036F5  3  A0 0E        	ldy #14	 			; reset jump pointer high.
0036F7  3  91 68        	sta (z80_ix),y
0036F9  3               
0036F9  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
0036FB  3  A0 10        	ldy #16
0036FD  3  91 68        	sta (z80_ix),y
0036FF  3               evis0:
0036FF  3  A5 69        	lda z80_i
003701  3  48           	pha
003702  3  A5 68        	lda z80_x
003704  3  48           	pha
003705  3  A5 67        	lda z80_h
003707  3  48           	pha
003708  3  A5 66        	lda z80_l
00370A  3  48           	pha
00370B  3               
00370B  3  20 B8 3C     	jsr evnt09 			; perform event.
00370E  3               
00370E  3  68           	pla
00370F  3  85 66        	sta z80_l
003711  3  68           	pla
003712  3  85 67        	sta z80_h
003714  3  68           	pla
003715  3  85 68        	sta z80_x
003717  3  68           	pla
003718  3  85 69        	sta z80_i
00371A  3               
00371A  3  18           	clc
00371B  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
00371D  3  69 11        	adc #TABSIZ		 	; next sprite.
00371F  3  85 68        	sta z80_x
003721  3  90 02        	bcc :+
003723  3  E6 69        	inc z80_i
003725  3               :
003725  3  60           	rts
003726  3               
003726  3               
003726  3               ;-------------------------------------
003726  3               ; Clear the play area window.
003726  3               ;-------------------------------------
003726  3               
003726  3               clw:
003726  3  AD 1F 28     	lda wintop			; get coordinates of window.
003729  3  85 rr        	sta dispy			; put into dispx for calculation.
00372B  3  AD 20 28     	lda winlft
00372E  3  85 rr        	sta dispx
003730  3               
003730  3  AD 21 28     	lda winhgt			; height of window.
003733  3  85 rr        	sta rrow			; copy to b register.
003735  3               clw3:
003735  3  AD 22 28     	lda winwid 			; width of window.
003738  3  85 rr        	sta rcol
00373A  3               clw2:
00373A  3  20 63 2C     	jsr gprad 			; get print address.
00373D  3  A9 00        	lda #0				; zero byte to write.
00373F  3  A2 07        	ldx #7				; pixel height of each cell.
003741  3               clw1:
003741  3  BC 9D 2C     	ldy scrtab,x
003744  3  91 rr        	sta (scraddr),y 			; copy to screen.
003746  3  CA           	dex				; next screen row down.
003747  3  10 F8        	bpl clw1
003749  3               
003749  3  E6 rr        	inc dispx			; next column.
00374B  3  C6 rr        	dec rcol			; one less to do.
00374D  3  D0 EB        	bne clw2			; repeat for remaining columns.
00374F  3               
00374F  3  AD 20 28     	lda winlft			; get left edge.
003752  3  85 rr        	sta dispx 			; reset x.
003754  3  E6 rr        	inc dispy 			; next line down.
003756  3               
003756  3  C6 rr        	dec rrow
003758  3  D0 DB        	bne clw3			; repeat down the screen.
00375A  3               
00375A  3  AD 1F 28     	lda wintop			; get coordinates of window.
00375D  3  85 rr        	sta chary			; put into display position.
00375F  3  AD 20 28     	lda winlft
003762  3  85 rr        	sta charx
003764  3  60           	rts
003765  3               
003765  3               
003765  3               ;----------------------------------------------------------
003765  3               ; Effects code.
003765  3               ; Ticker routine is called 25 times per second.
003765  3               ;
003765  3               ; HL = txtscr = left text screen address
003765  3               ; DE = txtscr+txtwid-1 = right text screen address
003765  3               ; BC = txtpos = text scroller position
003765  3               ;
003765  3               ;----------------------------------------------------------
003765  3               
003765  3               .if sflag
003765  3               scrly:
003765  3               	rts
003765  3               	.word txtscr         	; get left screen address.
003765  3               	sta scr_l
003765  3               	lda txtscr+1
003765  3               	sta scr_l+1
003765  3               	sta scr_r+1
003765  3               
003765  3               	stx xtmp
003765  3               
003765  3               	clc         		; get right screen address.
003765  3               	lda scr_l
003765  3               	adc txtwid
003765  3               	sta scr_r
003765  3               	dec scr_r
003765  3               scrly1:
003765  3               	ldy txtwid		; set txtwide
003765  3               	dey
003765  3               	clc
003765  3               scrly0:
003765  3               	lda (scr_l),y		; scroll 1 line
003765  3               	rol a
003765  3               	sta (scr_l),y
003765  3               	dey
003765  3               	bpl scrly0
003765  3               
003765  3               	clc			; point to next line
003765  3               	lda scr_l
003765  3               	adc #32
003765  3               	sta scr_l
003765  3               	bcc scrly1		; repeat 8 times
003765  3               
003765  3               	lda txtpos 		; get text pointer.
003765  3               	sta scr_txt
003765  3               	lda txtpos+1
003765  3               	sta scr_txt+1
003765  3               
003765  3               	ldy #0
003765  3               	lda (scr_txt),y 		; find character we're displaying.
003765  3               	and #127 		; remove end marker bit if applicable.
003765  3               	cmp #13			; is it newline?
003765  3               	bne scrly5 		; no, it's okay.
003765  3               	lda #32			; convert to a space instead.
003765  3               scrly5:
003765  3               	sta fntaddr		; calculate char address
003765  3               	lda #0
003765  3               	sta fntaddr+1
003765  3               	asl fntaddr  		; multiply char by 8.
003765  3               	rol fntaddr+1
003765  3               	asl fntaddr
003765  3               	rol fntaddr+1
003765  3               	asl fntaddr
003765  3               	rol fntaddr+1
003765  3               	lda fntaddr
003765  3               	clc
003765  3               	adc #<(FONT-256)
003765  3               	sta scrly3+1		; that's the low byte.
003765  3               	lda fntaddr+1
003765  3               	adc #>(FONT-256)
003765  3               	sta scrly3+2		; add displacement.
003765  3               
003765  3               	ldx #0
003765  3               scrly3:
003765  3               	lda $3333,x		; get image of char line.
003765  3               	and txtbit
003765  3               	beq scrly2		; don't plot pixel
003765  3               	ldy scrline,x
003765  3               	lda (scr_r),y
003765  3               	clc
003765  3               	ora #1
003765  3               	sta (scr_r),y		; plot pixel
003765  3               scrly2:
003765  3               	inx			; next line of char.
003765  3               	cpx #8
003765  3               	bne scrly3
003765  3               
003765  3               	lsr txtbit		; bit of text to display.
003765  3               	bcs :+
003765  3               	rts
003765  3               :
003765  3               	ldy #0
003765  3               	lda (scr_txt),y 	; what was the character?
003765  3               	asl a	  		; end of message?
003765  3               	bcs scrly4
003765  3               	inc txtpos
003765  3               	bne :+
003765  3               	inc txtpos+1
003765  3               :
003765  3               	jmp scrly6 		; not yet - continue.
003765  3               scrly4:
003765  3               	lda txtini 		; start of scrolling message.
003765  3               	sta txtpos
003765  3               	lda txtini+1
003765  3               	sta txtpos+1
003765  3               scrly6:
003765  3               	lda #128
003765  3               	sta txtbit
003765  3               	ldx xtmp
003765  3               	rts
003765  3               
003765  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003765  3               
003765  3               ;-------------------------------------------------------
003765  3               ; Entry TICKER command
003765  3               ;
003765  3               ; Entry:
003765  3               ;  z80_b = message nr
003765  3               ;  z80_c = width
003765  3               ;-------------------------------------------------------
003765  3               
003765  3               iscrly:
003765  3               	jsr prescr 		; set up display position.
003765  3               
003765  3               	lda #<msgdat 		; text messages.
003765  3               	sta z80_l
003765  3               	lda #>msgdat
003765  3               	sta z80_h
003765  3               
003765  3               	lda z80_c 		; width.
003765  3               	sec
003765  3               	sbc #1			; subtract one.
003765  3               	cmp #32 		; is it between 1 and 32?
003765  3               	bcc :+
003765  3               	lda #$60
003765  3               	jmp iscrl0		; no, disable messages.
003765  3               :
003765  3               	ldx z80_b		; message number.
003765  3               	jsr getwrd 		; find message start.
003765  3               
003765  3               	lda z80_l		; set initial text position.
003765  3               	sta txtini
003765  3               	lda z80_h
003765  3               	sta txtini+1
003765  3               
003765  3               	lda #$ad		; code for lda adrr
003765  3               iscrl0:
003765  3               	sta scrly		; enable/disable scrolling routine.
003765  3               
003765  3               	jsr prescr 		; set up display position.
003765  3               	jsr gprad 		; get print address.
003765  3               
003765  3               	lda scraddr 		; set text screen address.
003765  3               	sta txtscr
003765  3               	lda scraddr+1
003765  3               	sta txtscr+1
003765  3               
003765  3               	lda z80_c		; width.
003765  3               	sta txtwid		; set width in working storage.
003765  3               
003765  3               	lda #128 		; start with leftmost bit.
003765  3               	sta txtbit
003765  3               
003765  3               	jmp scrly4
003765  3               .endif
003765  3               
003765  3               ;------------------------------------------------------------------
003765  3               ; Dig routine, conditional assembly depending on dflag
003765  3               ;------------------------------------------------------------------
003765  3               .if dflag
003765  3               dig:
003765  3               	and #3
003765  3               	beq digr		; dig right
003765  3               	cmp #1
003765  3               	beq digl		; dig left
003765  3               	cmp #2
003765  3               	beq digd		; dig down
003765  3               
003765  3               ; Dig up.
003765  3               
003765  3               digu:				; dig up
003765  3               	ldy #8
003765  3               	lda (z80_ix),y
003765  3               	sec
003765  3               	sbc #2
003765  3               	sta dispy		; set y
003765  3               
003765  3               	iny
003765  3               	lda (z80_ix),y
003765  3               	sta dispx		; set x
003765  3               	jmp digv
003765  3               
003765  3               ; Dig down.
003765  3               
003765  3               digd:
003765  3               	ldy #9
003765  3               	lda (z80_ix),y
003765  3               	sta dispx		; set y
003765  3               
003765  3               	dey
003765  3               	clc
003765  3               	lda (z80_ix),y
003765  3               	adc #16
003765  3               	sta dispy		; set y
003765  3               	jmp digv
003765  3               
003765  3               ; Dig left.
003765  3               
003765  3               digl:
003765  3               	ldy #8
003765  3               	lda (z80_ix),y
003765  3               	sta dispy		; set y
003765  3               
003765  3               	iny
003765  3               	lda (z80_ix),y
003765  3               	sec
003765  3               	sbc #2			; x=x-2
003765  3               	sta dispx		; set x
003765  3               	jmp digh
003765  3               
003765  3               ; Dig right.
003765  3               
003765  3               digr:
003765  3               	ldy #8
003765  3               	lda (z80_ix),y
003765  3               	sta dispy		; set y
003765  3               
003765  3               	iny
003765  3               	lda (z80_ix),y
003765  3               	clc
003765  3               	adc #16
003765  3               	sta dispx		; set x+16
003765  3               	jmp digh
003765  3               
003765  3               ; Vertical digging
003765  3               
003765  3               digv:
003765  3               	jsr tstbl		; check blocktype in MAP
003765  3               	jsr fdchk		; test if FODDER
003765  3               
003765  3               	clc
003765  3               	lda dispx		; look 1 cell down
003765  3               	adc #8
003765  3               	sta dispx
003765  3               	jsr tstbl		; check blocktype in MAP
003765  3               	jsr fdchk
003765  3               	lda dispx
003765  3               	and #7
003765  3               	bne :+
003765  3               	rts
003765  3               :
003765  3               	clc
003765  3               	lda dispx		; look 1 cell down
003765  3               	adc #8
003765  3               	sta dispx
003765  3               	jsr tstbl		; check blocktype in MAP
003765  3               	jmp fdchk
003765  3               
003765  3               ; Horizontal digging
003765  3               
003765  3               digh:
003765  3               	jsr tstbl		; check blocktype in MAP
003765  3               	jsr fdchk		; test if FODDER
003765  3               
003765  3               	clc
003765  3               	lda dispy		; look 1 cell down
003765  3               	adc #8
003765  3               	sta dispy
003765  3               	jsr tstbl		; check blocktype in MAP
003765  3               	jsr fdchk
003765  3               	lda dispy
003765  3               	and #7
003765  3               	bne :+
003765  3               	rts
003765  3               :
003765  3               	clc
003765  3               	lda dispy		; look 1 cell down
003765  3               	adc #8
003765  3               	sta dispy
003765  3               	jsr tstbl		; check blocktype in MAP
003765  3               	jmp fdchk
003765  3               
003765  3               digcnt:	.byte 0
003765  3               
003765  3               .endif
003765  3               
003765  3               ;------------------------------------------------------------------
003765  3               ; Sprite table
003765  3               ;------------------------------------------------------------------
003765  3               
003765  3               
003765  3               ; ix+0  = type.
003765  3               ; ix+1  = sprite image number.
003765  3               ; ix+2  = frame.
003765  3               ; ix+3  = y coord.
003765  3               ; ix+4  = x coord.
003765  3               
003765  3               ; ix+5  = new type.
003765  3               ; ix+6  = new image number.
003765  3               ; ix+7  = new frame.
003765  3               ; ix+8  = new y coord.
003765  3               ; ix+9  = new x coord.
003765  3               
003765  3               ; ix+10 = direction.
003765  3               ; ix+11 = parameter 1.
003765  3               ; ix+12 = parameter 2.
003765  3               ; ix+13 = jump pointer low.
003765  3               ; ix+14 = jump pointer high.
003765  3               ; ix+15 = data pointer low.
003765  3               ; ix+16 = data pointer high.
003765  3               
003765  3               ; block NUMSPR * TABSIZ,255
003765  3               
003765  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003769  3  FF FF FF FF  
00376D  3  FF FF FF FF  
003831  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003835  3  FF FF FF 00  
003839  3  C0 78 00 00  
003842  3  07           roomtb:	.byte 7                      ; start room map offset.
003843  3               
003843  3               ; User routine.  Put your own code in here to be called with USER instruction.
003843  3               ; if USER has an argument it will be passed in the accumulator.
003843  3               
003843  3               user:
003843  3               	.include "user.inc"
003843  4  60           	rts
003844  4               
003844  3               
003844  3               setfgcol:
003844  3  29 07        	and #7
003846  3  8D 53 38     	sta fcolour
003849  3  60           	rts
00384A  3               
00384A  3               setbgcol:
00384A  3  29 07        	and #7
00384C  3  18           	clc
00384D  3  69 10        	adc #16
00384F  3  8D 54 38     	sta bcolour
003852  3  60           	rts
003853  3               
003853  3  07           fcolour:	.byte t_white
003854  3  17           bcolour:	.byte g_white
003855  3               
003855  3               ; Everything below here will be generated by the editors.
003855  3               
003855  3  60                   rts
003856  3               WINDOWTOP = 0
003856  3               WINDOWLFT = 1
003856  3               WINDOWHGT = 25
003856  3               WINDOWWID = 39 ;
003856  3               MAPWID = 3
003856  3  FF FF FF             .byte 255,255,255
003859  3               mapdat:
003859  3  FF 00 FF             .byte 255,0,255
00385C  3  FF FF FF             .byte 255,255,255
00385F  3  01           stmap:  .byte 1
003860  3               
003860  3               evnt00:
003860  3  20 95 2E             jsr getcol	; GETBLOCKS
003863  3  A9 00                lda #0
003865  3  85 rr                sta varm
003867  3  A5 rr                lda joyval	; KEY
003869  3  29 08                and #8
00386B  3  F0 03                beq :+
00386D  3  4C 8B 38             jmp a00099
003870  3               :
003870  3  A9 04                lda #4
003872  3  A0 06                ldy #6
003874  3  91 68                sta (z80_ix),y
003876  3  A9 01                lda #1
003878  3  85 rr                sta varm
00387A  3  20 85 2D             jsr cangu	; CANGOUP
00387D  3  F0 03                beq :+
00387F  3  4C 8B 38             jmp a00099
003882  3               :
003882  3  A0 08                ldy #8 		; SPRITEUP
003884  3  B1 68                lda (z80_ix),y
003886  3  38                   sec
003887  3  E9 01                sbc #1
003889  3  91 68                sta (z80_ix),y
00388B  3  A5 rr        a00099: lda joyval	; KEY
00388D  3  29 04                and #4
00388F  3  F0 03                beq :+
003891  3  4C AF 38             jmp a00181
003894  3               :
003894  3  A9 05                lda #5
003896  3  A0 06                ldy #6
003898  3  91 68                sta (z80_ix),y
00389A  3  A9 01                lda #1
00389C  3  85 rr                sta varm
00389E  3  20 D2 2D             jsr cangd	; CANGODOWN
0038A1  3  F0 03                beq :+
0038A3  3  4C AF 38             jmp a00181
0038A6  3               :
0038A6  3  A0 08                ldy #8 		; SPRITEDOWN
0038A8  3  B1 68                lda (z80_ix),y
0038AA  3  18                   clc
0038AB  3  69 01                adc #1
0038AD  3  91 68                sta (z80_ix),y
0038AF  3  A5 rr        a00181: lda joyval	; KEY
0038B1  3  29 02                and #2
0038B3  3  F0 03                beq :+
0038B5  3  4C E4 38             jmp a00299
0038B8  3               :
0038B8  3  A9 03                lda #3
0038BA  3  A0 06                ldy #6
0038BC  3  91 68                sta (z80_ix),y
0038BE  3  A9 01                lda #1
0038C0  3  85 rr                sta varm
0038C2  3  20 1F 2E             jsr cangl	; CANGOLEFT
0038C5  3  F0 03                beq :+
0038C7  3  4C E4 38             jmp a00299
0038CA  3               :
0038CA  3  A0 09                ldy #9 		; SPRITELEFT
0038CC  3  B1 68                lda (z80_ix),y
0038CE  3  38                   sec
0038CF  3  E9 01                sbc #1
0038D1  3  91 68                sta (z80_ix),y
0038D3  3  A9 02                lda #2
0038D5  3  A0 09                ldy #9
0038D7  3  D1 68                cmp (z80_ix),y
0038D9  3  F0 03                beq *+5
0038DB  3  4C E4 38             jmp a00299
0038DE  3  A9 47                lda #71
0038E0  3  A0 09                ldy #9
0038E2  3  91 68                sta (z80_ix),y
0038E4  3  A5 rr        a00299: lda joyval	; KEY
0038E6  3  29 01                and #1
0038E8  3  F0 03                beq :+
0038EA  3  4C 19 39             jmp a00418
0038ED  3               :
0038ED  3  A9 02                lda #2
0038EF  3  A0 06                ldy #6
0038F1  3  91 68                sta (z80_ix),y
0038F3  3  A9 01                lda #1
0038F5  3  85 rr                sta varm
0038F7  3  20 31 2E             jsr cangr	; CANGORIGHT
0038FA  3  F0 03                beq :+
0038FC  3  4C 19 39             jmp a00418
0038FF  3               :
0038FF  3  A0 09                ldy #9 		; SPRITERIGHT
003901  3  B1 68                lda (z80_ix),y
003903  3  18                   clc
003904  3  69 01                adc #1
003906  3  91 68                sta (z80_ix),y
003908  3  A9 48                lda #72
00390A  3  A0 09                ldy #9
00390C  3  D1 68                cmp (z80_ix),y
00390E  3  F0 03                beq *+5
003910  3  4C 19 39             jmp a00418
003913  3  A9 03                lda #3
003915  3  A0 09                ldy #9
003917  3  91 68                sta (z80_ix),y
003919  3  A9 00        a00418: lda #0
00391B  3  C5 rr                cmp varm
00391D  3  90 03                bcc *+5
00391F  3  4C 27 39             jmp a00446
003922  3  A9 00                lda #0		; ANIMATE
003924  3  20 23 33             jsr animsp
003927  3  A9 01        a00446: lda #1 	; COLLISION
003929  3  85 63                sta z80_b
00392B  3  20 6E 33             jsr sktyp
00392E  3  B0 03                bcs :+
003930  3  4C 48 39             jmp a00518
003933  3               :
003933  3  A9 02                lda #2	; SPAWN
003935  3  85 62                sta z80_c
003937  3  A9 06                lda #6
003939  3  85 63                sta z80_b
00393B  3  20 68 2A             jsr spawn
00393E  3  A9 FF                lda #255	; REMOVE
003940  3  A0 05                ldy #5
003942  3  91 68                sta (z80_ix),y
003944  3  A9 01                lda #1
003946  3  85 rr                sta varq
003948  3  60           a00518: rts
003949  3               evnt01:
003949  3  A9 01                lda #1
00394B  3  C5 rr                cmp varq
00394D  3  F0 03                beq *+5
00394F  3  4C 59 39             jmp b00039
003952  3  A9 FF                lda #255	; REMOVE
003954  3  A0 05                ldy #5
003956  3  91 68                sta (z80_ix),y
003958  3  60                   rts		; EXIT
003959  3  A9 00        b00039: lda #0
00395B  3  85 rr                sta vars
00395D  3  A9 00                lda #0
00395F  3  85 rr                sta vart
003961  3  A9 00                lda #0
003963  3  85 rr                sta varu
003965  3  A9 00                lda #0
003967  3  85 rr                sta varv
003969  3  A0 09                ldy #9
00396B  3  B1 68                lda (z80_ix),y
00396D  3  85 rr                sta varm
00396F  3  A9 04                lda #4
003971  3  85 62                sta z80_c
003973  3  A5 rr                lda varm
003975  3  38                   sec
003976  3  E5 62                sbc z80_c
003978  3  85 rr                sta varm
00397A  3  A5 rr                lda varm
00397C  3  85 65                sta z80_d
00397E  3  A9 0A                lda #10
003980  3  85 64                sta z80_e
003982  3  20 54 2A             jsr idiv
003985  3  A5 65                lda z80_d
003987  3  85 rr                sta varm
003989  3  A5 rr                lda varm
00398B  3  0A                   asl a
00398C  3  85 65                sta z80_d
00398E  3  0A                   asl a
00398F  3  0A                   asl a
003990  3  18                   clc
003991  3  65 65                adc z80_d
003993  3  85 rr                sta varm
003995  3  A9 04                lda #4
003997  3  85 62                sta z80_c
003999  3  A5 rr                lda varm
00399B  3  18                   clc
00399C  3  65 62                adc z80_c
00399E  3  85 rr                sta varm
0039A0  3  A0 08                ldy #8
0039A2  3  B1 68                lda (z80_ix),y
0039A4  3  85 rr                sta varn
0039A6  3  A9 03                lda #3
0039A8  3  85 62                sta z80_c
0039AA  3  A5 rr                lda varn
0039AC  3  38                   sec
0039AD  3  E5 62                sbc z80_c
0039AF  3  85 rr                sta varn
0039B1  3  A5 rr                lda varn
0039B3  3  85 65                sta z80_d
0039B5  3  A9 0C                lda #12
0039B7  3  85 64                sta z80_e
0039B9  3  20 54 2A             jsr idiv
0039BC  3  A5 65                lda z80_d
0039BE  3  85 rr                sta varn
0039C0  3  A5 rr                lda varn
0039C2  3  85 65                sta z80_d
0039C4  3  A9 0C                lda #12
0039C6  3  85 67                sta z80_h
0039C8  3  20 23 2A             jsr imul
0039CB  3  A5 66                lda z80_l
0039CD  3  85 rr                sta varn
0039CF  3  A9 03                lda #3
0039D1  3  85 62                sta z80_c
0039D3  3  A5 rr                lda varn
0039D5  3  18                   clc
0039D6  3  65 62                adc z80_c
0039D8  3  85 rr                sta varn
0039DA  3  20 1F 2E             jsr cangl	; CANGOLEFT
0039DD  3  F0 03                beq :+
0039DF  3  4C E6 39             jmp b00342
0039E2  3               :
0039E2  3  A9 01                lda #1
0039E4  3  85 rr                sta vars
0039E6  3  20 31 2E     b00342: jsr cangr	; CANGORIGHT
0039E9  3  F0 03                beq :+
0039EB  3  4C F2 39             jmp b00367
0039EE  3               :
0039EE  3  A9 01                lda #1
0039F0  3  85 rr                sta vart
0039F2  3  20 85 2D     b00367: jsr cangu	; CANGOUP
0039F5  3  F0 03                beq :+
0039F7  3  4C FE 39             jmp b00391
0039FA  3               :
0039FA  3  A9 01                lda #1
0039FC  3  85 rr                sta varu
0039FE  3  20 D2 2D     b00391: jsr cangd	; CANGODOWN
003A01  3  F0 03                beq :+
003A03  3  4C 0A 3A             jmp b00415
003A06  3               :
003A06  3  A9 01                lda #1
003A08  3  85 rr                sta varv
003A0A  3  A9 00        b00415: lda #0
003A0C  3  85 rr                sta varm
003A0E  3  A9 01                lda #1
003A10  3  A0 0A                ldy #10
003A12  3  D1 68                cmp (z80_ix),y
003A14  3  F0 03                beq *+5
003A16  3  4C 31 3A             jmp b00494
003A19  3  20 85 2D             jsr cangu	; CANGOUP
003A1C  3  F0 03                beq :+
003A1E  3  4C 25 3A             jmp b00470
003A21  3               :
003A21  3  A9 01                lda #1
003A23  3  85 rr                sta varm
003A25  3  20 D2 2D     b00470: jsr cangd	; CANGODOWN
003A28  3  F0 03                beq :+
003A2A  3  4C 31 3A             jmp b00494
003A2D  3               :
003A2D  3  A9 01                lda #1
003A2F  3  85 rr                sta varm
003A31  3  A9 00        b00494: lda #0
003A33  3  A0 0A                ldy #10
003A35  3  D1 68                cmp (z80_ix),y
003A37  3  F0 03                beq *+5
003A39  3  4C 54 3A             jmp b00565
003A3C  3  20 85 2D             jsr cangu	; CANGOUP
003A3F  3  F0 03                beq :+
003A41  3  4C 48 3A             jmp b00540
003A44  3               :
003A44  3  A9 01                lda #1
003A46  3  85 rr                sta varm
003A48  3  20 D2 2D     b00540: jsr cangd	; CANGODOWN
003A4B  3  F0 03                beq :+
003A4D  3  4C 54 3A             jmp b00565
003A50  3               :
003A50  3  A9 01                lda #1
003A52  3  85 rr                sta varm
003A54  3  A9 03        b00565: lda #3
003A56  3  A0 0A                ldy #10
003A58  3  D1 68                cmp (z80_ix),y
003A5A  3  F0 03                beq *+5
003A5C  3  4C 77 3A             jmp b00636
003A5F  3  20 1F 2E             jsr cangl	; CANGOLEFT
003A62  3  F0 03                beq :+
003A64  3  4C 6B 3A             jmp b00612
003A67  3               :
003A67  3  A9 01                lda #1
003A69  3  85 rr                sta varm
003A6B  3  20 31 2E     b00612: jsr cangr	; CANGORIGHT
003A6E  3  F0 03                beq :+
003A70  3  4C 77 3A             jmp b00636
003A73  3               :
003A73  3  A9 01                lda #1
003A75  3  85 rr                sta varm
003A77  3  A9 02        b00636: lda #2
003A79  3  A0 0A                ldy #10
003A7B  3  D1 68                cmp (z80_ix),y
003A7D  3  F0 03                beq *+5
003A7F  3  4C 9A 3A             jmp b00708
003A82  3  20 1F 2E             jsr cangl	; CANGOLEFT
003A85  3  F0 03                beq :+
003A87  3  4C 8E 3A             jmp b00683
003A8A  3               :
003A8A  3  A9 01                lda #1
003A8C  3  85 rr                sta varm
003A8E  3  20 31 2E     b00683: jsr cangr	; CANGORIGHT
003A91  3  F0 03                beq :+
003A93  3  4C 9A 3A             jmp b00708
003A96  3               :
003A96  3  A9 01                lda #1
003A98  3  85 rr                sta varm
003A9A  3  A9 01        b00708: lda #1
003A9C  3  C5 rr                cmp varm
003A9E  3  F0 03                beq *+5
003AA0  3  4C E8 3A             jmp b00862
003AA3  3  A9 00                lda #0
003AA5  3  C5 rr                cmp vari
003AA7  3  F0 03                beq *+5
003AA9  3  4C E8 3A             jmp b00862
003AAC  3  A9 01                lda #1
003AAE  3  A0 0A                ldy #10
003AB0  3  D1 68                cmp (z80_ix),y
003AB2  3  F0 03                beq *+5
003AB4  3  4C BB 3A             jmp b00772
003AB7  3  A9 01                lda #1
003AB9  3  85 rr                sta vari
003ABB  3  A9 00        b00772: lda #0
003ABD  3  A0 0A                ldy #10
003ABF  3  D1 68                cmp (z80_ix),y
003AC1  3  F0 03                beq *+5
003AC3  3  4C CA 3A             jmp b00802
003AC6  3  A9 01                lda #1
003AC8  3  85 rr                sta vari
003ACA  3  A9 03        b00802: lda #3
003ACC  3  A0 0A                ldy #10
003ACE  3  D1 68                cmp (z80_ix),y
003AD0  3  F0 03                beq *+5
003AD2  3  4C D9 3A             jmp b00832
003AD5  3  A9 02                lda #2
003AD7  3  85 rr                sta vari
003AD9  3  A9 02        b00832: lda #2
003ADB  3  A0 0A                ldy #10
003ADD  3  D1 68                cmp (z80_ix),y
003ADF  3  F0 03                beq *+5
003AE1  3  4C E8 3A             jmp b00862
003AE4  3  A9 02                lda #2
003AE6  3  85 rr                sta vari
003AE8  3  A9 01        b00862: lda #1
003AEA  3  C5 rr                cmp vari
003AEC  3  F0 03                beq *+5
003AEE  3  4C 4F 3B             jmp b01066
003AF1  3  A9 02                lda #2
003AF3  3  85 65                sta z80_d	; GETRANDOM
003AF5  3  20 6D 2F             jsr random
003AF8  3  85 67                sta z80_h
003AFA  3  20 23 2A             jsr imul
003AFD  3  A5 67                lda z80_h
003AFF  3  85 rr                sta varrnd
003B01  3  A9 00                lda #0
003B03  3  C5 rr                cmp varrnd
003B05  3  F0 03                beq *+5
003B07  3  4C 2E 3B             jmp b01000
003B0A  3  A9 01                lda #1
003B0C  3  C5 rr                cmp varu
003B0E  3  F0 03                beq *+5
003B10  3  4C 1C 3B             jmp b00965
003B13  3  A9 03                lda #3
003B15  3  A0 0A                ldy #10
003B17  3  91 68                sta (z80_ix),y
003B19  3  4C 2B 3B             jmp b00996
003B1C  3  A9 01        b00965: lda #1
003B1E  3  C5 rr                cmp varv
003B20  3  F0 03                beq *+5
003B22  3  4C 2B 3B             jmp b00996
003B25  3  A9 02                lda #2
003B27  3  A0 0A                ldy #10
003B29  3  91 68                sta (z80_ix),y
003B2B  3  4C 4F 3B     b00996: jmp b01066
003B2E  3  A9 01        b01000: lda #1
003B30  3  C5 rr                cmp varv
003B32  3  F0 03                beq *+5
003B34  3  4C 40 3B             jmp b01035
003B37  3  A9 02                lda #2
003B39  3  A0 0A                ldy #10
003B3B  3  91 68                sta (z80_ix),y
003B3D  3  4C 4F 3B             jmp b01066
003B40  3  A9 01        b01035: lda #1
003B42  3  C5 rr                cmp varu
003B44  3  F0 03                beq *+5
003B46  3  4C 4F 3B             jmp b01066
003B49  3  A9 03                lda #3
003B4B  3  A0 0A                ldy #10
003B4D  3  91 68                sta (z80_ix),y
003B4F  3  A9 02        b01066: lda #2
003B51  3  C5 rr                cmp vari
003B53  3  F0 03                beq *+5
003B55  3  4C B6 3B             jmp b01269
003B58  3  A9 02                lda #2
003B5A  3  85 65                sta z80_d	; GETRANDOM
003B5C  3  20 6D 2F             jsr random
003B5F  3  85 67                sta z80_h
003B61  3  20 23 2A             jsr imul
003B64  3  A5 67                lda z80_h
003B66  3  85 rr                sta varrnd
003B68  3  A9 00                lda #0
003B6A  3  C5 rr                cmp varrnd
003B6C  3  F0 03                beq *+5
003B6E  3  4C 95 3B             jmp b01204
003B71  3  A9 01                lda #1
003B73  3  C5 rr                cmp vars
003B75  3  F0 03                beq *+5
003B77  3  4C 83 3B             jmp b01169
003B7A  3  A9 01                lda #1
003B7C  3  A0 0A                ldy #10
003B7E  3  91 68                sta (z80_ix),y
003B80  3  4C 92 3B             jmp b01199
003B83  3  A9 01        b01169: lda #1
003B85  3  C5 rr                cmp vart
003B87  3  F0 03                beq *+5
003B89  3  4C 92 3B             jmp b01199
003B8C  3  A9 00                lda #0
003B8E  3  A0 0A                ldy #10
003B90  3  91 68                sta (z80_ix),y
003B92  3  4C B6 3B     b01199: jmp b01269
003B95  3  A9 01        b01204: lda #1
003B97  3  C5 rr                cmp vart
003B99  3  F0 03                beq *+5
003B9B  3  4C A7 3B             jmp b01239
003B9E  3  A9 00                lda #0
003BA0  3  A0 0A                ldy #10
003BA2  3  91 68                sta (z80_ix),y
003BA4  3  4C B6 3B             jmp b01269
003BA7  3  A9 01        b01239: lda #1
003BA9  3  C5 rr                cmp vars
003BAB  3  F0 03                beq *+5
003BAD  3  4C B6 3B             jmp b01269
003BB0  3  A9 01                lda #1
003BB2  3  A0 0A                ldy #10
003BB4  3  91 68                sta (z80_ix),y
003BB6  3  A9 00        b01269: lda #0
003BB8  3  85 rr                sta vari
003BBA  3  A9 01                lda #1
003BBC  3  A0 0A                ldy #10
003BBE  3  D1 68                cmp (z80_ix),y
003BC0  3  F0 03                beq *+5
003BC2  3  4C F1 3B             jmp b01395
003BC5  3  A9 01                lda #1
003BC7  3  C5 rr                cmp vars
003BC9  3  F0 03                beq *+5
003BCB  3  4C EB 3B             jmp b01382
003BCE  3  A0 09                ldy #9 		; SPRITELEFT
003BD0  3  B1 68                lda (z80_ix),y
003BD2  3  38                   sec
003BD3  3  E9 01                sbc #1
003BD5  3  91 68                sta (z80_ix),y
003BD7  3  A9 02                lda #2
003BD9  3  A0 09                ldy #9
003BDB  3  D1 68                cmp (z80_ix),y
003BDD  3  F0 03                beq *+5
003BDF  3  4C E8 3B             jmp b01377
003BE2  3  A9 47                lda #71
003BE4  3  A0 09                ldy #9
003BE6  3  91 68                sta (z80_ix),y
003BE8  3  4C F1 3B     b01377: jmp b01395
003BEB  3  A9 00        b01382: lda #0
003BED  3  A0 0A                ldy #10
003BEF  3  91 68                sta (z80_ix),y
003BF1  3  A9 00        b01395: lda #0
003BF3  3  A0 0A                ldy #10
003BF5  3  D1 68                cmp (z80_ix),y
003BF7  3  F0 03                beq *+5
003BF9  3  4C 28 3C             jmp b01514
003BFC  3  A9 01                lda #1
003BFE  3  C5 rr                cmp vart
003C00  3  F0 03                beq *+5
003C02  3  4C 22 3C             jmp b01501
003C05  3  A0 09                ldy #9 		; SPRITERIGHT
003C07  3  B1 68                lda (z80_ix),y
003C09  3  18                   clc
003C0A  3  69 01                adc #1
003C0C  3  91 68                sta (z80_ix),y
003C0E  3  A9 48                lda #72
003C10  3  A0 09                ldy #9
003C12  3  D1 68                cmp (z80_ix),y
003C14  3  F0 03                beq *+5
003C16  3  4C 1F 3C             jmp b01496
003C19  3  A9 03                lda #3
003C1B  3  A0 09                ldy #9
003C1D  3  91 68                sta (z80_ix),y
003C1F  3  4C 28 3C     b01496: jmp b01514
003C22  3  A9 01        b01501: lda #1
003C24  3  A0 0A                ldy #10
003C26  3  91 68                sta (z80_ix),y
003C28  3  A9 03        b01514: lda #3
003C2A  3  A0 0A                ldy #10
003C2C  3  D1 68                cmp (z80_ix),y
003C2E  3  F0 03                beq *+5
003C30  3  4C 4E 3C             jmp b01597
003C33  3  A9 01                lda #1
003C35  3  C5 rr                cmp varu
003C37  3  F0 03                beq *+5
003C39  3  4C 48 3C             jmp b01583
003C3C  3  A0 08                ldy #8 		; SPRITEUP
003C3E  3  B1 68                lda (z80_ix),y
003C40  3  38                   sec
003C41  3  E9 01                sbc #1
003C43  3  91 68                sta (z80_ix),y
003C45  3  4C 4E 3C             jmp b01597
003C48  3  A9 02        b01583: lda #2
003C4A  3  A0 0A                ldy #10
003C4C  3  91 68                sta (z80_ix),y
003C4E  3  A9 02        b01597: lda #2
003C50  3  A0 0A                ldy #10
003C52  3  D1 68                cmp (z80_ix),y
003C54  3  F0 03                beq *+5
003C56  3  4C 74 3C             jmp b01680
003C59  3  A9 01                lda #1
003C5B  3  C5 rr                cmp varv
003C5D  3  F0 03                beq *+5
003C5F  3  4C 6E 3C             jmp b01666
003C62  3  A0 08                ldy #8 		; SPRITEDOWN
003C64  3  B1 68                lda (z80_ix),y
003C66  3  18                   clc
003C67  3  69 01                adc #1
003C69  3  91 68                sta (z80_ix),y
003C6B  3  4C 74 3C             jmp b01680
003C6E  3  A9 03        b01666: lda #3
003C70  3  A0 0A                ldy #10
003C72  3  91 68                sta (z80_ix),y
003C74  3  A9 03        b01680: lda #3		; ANIMATE
003C76  3  20 23 33             jsr animsp
003C79  3  60                   rts
003C7A  3               evnt02:
003C7A  3  A0 0B                ldy #11
003C7C  3  B1 68                lda (z80_ix),y
003C7E  3  18                   clc
003C7F  3  69 01                adc #1
003C81  3  A0 0B                ldy #11
003C83  3  91 68                sta (z80_ix),y
003C85  3  A9 02                lda #2
003C87  3  A0 0B                ldy #11
003C89  3  D1 68                cmp (z80_ix),y
003C8B  3  F0 03                beq *+5
003C8D  3  4C B1 3C             jmp c00128
003C90  3  A9 07                lda #7
003C92  3  A0 07                ldy #7
003C94  3  D1 68                cmp (z80_ix),y
003C96  3  F0 03                beq *+5
003C98  3  4C A6 3C             jmp c00104
003C9B  3  A9 FF                lda #255	; REMOVE
003C9D  3  A0 05                ldy #5
003C9F  3  91 68                sta (z80_ix),y
003CA1  3  A9 01                lda #1 		; KILL
003CA3  3  85 rr                sta deadf
003CA5  3  60                   rts		; EXIT
003CA6  3  A9 00        c00104: lda #0
003CA8  3  A0 0B                ldy #11
003CAA  3  91 68                sta (z80_ix),y
003CAC  3  A9 00                lda #0		; ANIMATE
003CAE  3  20 23 33             jsr animsp
003CB1  3  60           c00128: rts
003CB2  3               evnt03:
003CB2  3  60                   rts
003CB3  3               evnt04:
003CB3  3  60                   rts
003CB4  3               evnt05:
003CB4  3  60                   rts
003CB5  3               evnt06:
003CB5  3  60                   rts
003CB6  3               evnt07:
003CB6  3  60                   rts
003CB7  3               evnt08:
003CB7  3  60                   rts
003CB8  3               evnt09:
003CB8  3  A9 01                lda #1
003CBA  3  A0 05                ldy #5
003CBC  3  D1 68                cmp (z80_ix),y
003CBE  3  F0 03                beq *+5
003CC0  3  4C C9 3C             jmp j00037
003CC3  3  A9 01                lda #1
003CC5  3  A0 0A                ldy #10
003CC7  3  91 68                sta (z80_ix),y
003CC9  3  A9 02        j00037: lda #2
003CCB  3  A0 05                ldy #5
003CCD  3  D1 68                cmp (z80_ix),y
003CCF  3  F0 03                beq *+5
003CD1  3  4C DA 3C             jmp j00072
003CD4  3  A9 00                lda #0
003CD6  3  A0 07                ldy #7
003CD8  3  91 68                sta (z80_ix),y
003CDA  3  60           j00072: rts
003CDB  3               evnt10:
003CDB  3  A9 06                lda #6 	; INK
003CDD  3  20 44 38             jsr setfgcol
003CE0  3  A9 00                lda #0		; LINECOL
003CE2  3  20 E1 4E             jsr linecol
003CE5  3  A9 04                lda #4 	; INK
003CE7  3  20 44 38             jsr setfgcol
003CEA  3  A9 00                lda #0		; AT
003CEC  3  85 rr                sta chary
003CEE  3  A9 02                lda #2
003CF0  3  85 rr                sta charx
003CF2  3  A9 06                lda #6		; PRINT
003CF4  3  20 BB 2F             jsr dmsg
003CF7  3  A9 00                lda #0		; AT
003CF9  3  85 rr                sta chary
003CFB  3  A9 09                lda #9
003CFD  3  85 rr                sta charx
003CFF  3  A0 00                ldy #0		; SHOWSCORE
003D01  3  A9 06                lda #6
003D03  3  85 63                sta z80_b
003D05  3  20 36 2B             jsr dscor
003D08  3  A9 00                lda #0		; AT
003D0A  3  85 rr                sta chary
003D0C  3  A9 1E                lda #30
003D0E  3  85 rr                sta charx
003D10  3  A9 07                lda #7		; PRINT
003D12  3  20 BB 2F             jsr dmsg
003D15  3  A9 00                lda #0		; AT
003D17  3  85 rr                sta chary
003D19  3  A9 25                lda #37
003D1B  3  85 rr                sta charx
003D1D  3  A5 rr                lda numlif	; DISPLAY
003D1F  3  20 FE 33             jsr disply
003D22  3  60                   rts
003D23  3               evnt11:
003D23  3  60                   rts
003D24  3               evnt12:
003D24  3  20 AA 4E             jsr cls		; CLS
003D27  3  A9 01                lda #1		; PRINTMODE
003D29  3  85 rr                sta prtmod
003D2B  3  A9 05                lda #5 	; INK
003D2D  3  20 44 38             jsr setfgcol
003D30  3  A9 01                lda #1		; AT
003D32  3  85 rr                sta chary
003D34  3  A9 10                lda #16
003D36  3  85 rr                sta charx
003D38  3  A9 08                lda #8		; PRINT
003D3A  3  20 BB 2F             jsr dmsg
003D3D  3  A9 00                lda #0		; PRINTMODE
003D3F  3  85 rr                sta prtmod
003D41  3  A9 01                lda #1 	; INK
003D43  3  20 44 38             jsr setfgcol
003D46  3  A9 05                lda #5		; AT
003D48  3  85 rr                sta chary
003D4A  3  A9 0C                lda #12
003D4C  3  85 rr                sta charx
003D4E  3  A9 09                lda #9		; PRINT
003D50  3  20 BB 2F             jsr dmsg
003D53  3  A9 03                lda #3 	; INK
003D55  3  20 44 38             jsr setfgcol
003D58  3  A9 0A                lda #10		; AT
003D5A  3  85 rr                sta chary
003D5C  3  A9 0E                lda #14
003D5E  3  85 rr                sta charx
003D60  3  A9 0A                lda #10		; PRINT
003D62  3  20 BB 2F             jsr dmsg
003D65  3  A9 0C                lda #12		; AT
003D67  3  85 rr                sta chary
003D69  3  A9 0E                lda #14
003D6B  3  85 rr                sta charx
003D6D  3  A9 0B                lda #11		; PRINT
003D6F  3  20 BB 2F             jsr dmsg
003D72  3  A9 02                lda #2 	; INK
003D74  3  20 44 38             jsr setfgcol
003D77  3  A9 17                lda #23		; AT
003D79  3  85 rr                sta chary
003D7B  3  A9 08                lda #8
003D7D  3  85 rr                sta charx
003D7F  3  A9 0C                lda #12		; PRINT
003D81  3  20 BB 2F             jsr dmsg
003D84  3               
003D84  3               rtcon:			; CONTROLMENU
003D84  3  20 F9 4E             jsr vsync
003D87  3  A9 00                lda #0
003D89  3  85 rr                sta contrl
003D8B  3  AD 0B 4E             lda keys+7
003D8E  3  20 51 4F             jsr ktest
003D91  3  90 18                bcc rtcon1
003D93  3  A9 01                lda #1
003D95  3  85 rr                sta contrl
003D97  3  AD 0C 4E             lda keys+8
003D9A  3  20 51 4F             jsr ktest
003D9D  3  90 0C                bcc rtcon1
003D9F  3  A9 02                lda #2
003DA1  3  85 rr                sta contrl
003DA3  3  AD 0D 4E             lda keys+9
003DA6  3  20 51 4F             jsr ktest
003DA9  3  B0 D9                bcs rtcon
003DAB  3                       rtcon1:
003DAB  3  A9 00                lda #0
003DAD  3  85 rr                sta varq
003DAF  3  A9 03                lda #3
003DB1  3  85 rr                sta numlif
003DB3  3  60                   rts
003DB4  3               evnt13:
003DB4  3  60                   rts
003DB5  3               evnt14:
003DB5  3  A9 05                lda #5 	; PAPER
003DB7  3  20 4A 38             jsr setbgcol
003DBA  3  20 AA 4E             jsr cls		; CLS
003DBD  3  60                   rts
003DBE  3               evnt15:
003DBE  3  60                   rts
003DBF  3               evnt16:
003DBF  3  A5 rr                lda numlif
003DC1  3  38                   sec
003DC2  3  E9 01                sbc #1
003DC4  3  85 rr                sta numlif
003DC6  3  A9 00                lda #0
003DC8  3  85 rr                sta varq
003DCA  3  A9 05                lda #5 	; DELAY
003DCC  3  20 28 28             jsr delay
003DCF  3  60                   rts
003DD0  3               evnt17:
003DD0  3  A9 01                lda #1		; PRINTMODE
003DD2  3  85 rr                sta prtmod
003DD4  3  A9 01                lda #1 	; INK
003DD6  3  20 44 38             jsr setfgcol
003DD9  3  A9 0D                lda #13		; AT
003DDB  3  85 rr                sta chary
003DDD  3  A9 0F                lda #15
003DDF  3  85 rr                sta charx
003DE1  3  A9 0D                lda #13		; PRINT
003DE3  3  20 BB 2F             jsr dmsg
003DE6  3  A9 00                lda #0		; PRINTMODE
003DE8  3  85 rr                sta prtmod
003DEA  3  A9 32                lda #50 	; DELAY
003DEC  3  20 28 28             jsr delay
003DEF  3  A9 00                lda #0
003DF1  3  85 rr                sta numlif
003DF3  3  60                   rts
003DF4  3               evnt18:
003DF4  3  60                   rts
003DF5  3               evnt19:
003DF5  3  A9 0E                lda #14
003DF7  3  85 rr                sta chary
003DF9  3  A9 08                lda #8
003DFB  3  85 rr                sta charx
003DFD  3  A9 0E                lda #14		; PRINT
003DFF  3  20 BB 2F             jsr dmsg
003E02  3  60                   rts
003E03  3               evnt20:
003E03  3  A9 0A                lda #<10		; SCORE
003E05  3  85 66                sta z80_l
003E07  3  A9 00                lda #>10
003E09  3  85 67                sta z80_h
003E0B  3  20 8F 2B             jsr addsc
003E0E  3  60                   rts
003E0F  3  60           ptcusr: rts
003E10  3               msgdat:
003E10  3  53 43 4F 52          .byte "SCOR",197
003E14  3  C5           
003E15  3  20 20 48 49          .byte "  HIG",200
003E19  3  47 C8        
003E1B  3  4B 43 20 4D          .byte "KC MUNHCKI",206
003E1F  3  55 4E 48 43  
003E23  3  4B 49 CE     
003E26  3  20 47 41 4D          .byte " GAM",197
003E2A  3  C5           
003E2B  3  20 4F 56 45          .byte " OVE",210
003E2F  3  D2           
003E30  3  20 4E 45 57          .byte " NEW HIGH SCOR",197
003E34  3  20 48 49 47  
003E38  3  48 20 53 43  
003E3F  3  53 43 4F 52          .byte "SCORE:",160
003E43  3  45 3A A0     
003E46  3  4C 49 56 45          .byte "LIVES:",160
003E4A  3  53 3A A0     
003E4D  3  50 41 43 4D          .byte "PACMA",206
003E51  3  41 CE        
003E53  3  43 68 6F 6F          .byte "Choose controls",186
003E57  3  73 65 20 63  
003E5B  3  6F 6E 74 72  
003E63  3  31 2E 20 4B          .byte "1. Keyboar",228
003E67  3  65 79 62 6F  
003E6B  3  61 72 E4     
003E6E  3  32 2E 20 4A          .byte "2. Joystic",235
003E72  3  6F 79 73 74  
003E76  3  69 63 EB     
003E79  3  57 72 69 74          .byte "Written by K.v.Oss 202",181
003E7D  3  74 65 6E 20  
003E81  3  62 79 20 4B  
003E90  3  47 41 4D 45          .byte "GAME OVE",210
003E94  3  20 4F 56 45  
003E98  3  D2           
003E99  3  20 4E 45 57          .byte " NEW HIGH SCORE",160
003E9D  3  20 48 49 47  
003EA1  3  48 20 53 43  
003EA9  3               nummsg:
003EA9  3  0F                   .byte 15
003EAA  3               chgfx:
003EAA  3  00 01                .byte 0,1
003EAC  3  7F 01                .byte 127,1
003EAE  3  00 01                .byte 0,1
003EB0  3  28 01                .byte 40,1
003EB2  3  3C 01                .byte 60,1
003EB4  3  35 01                .byte 53,1
003EB6  3  2D 01                .byte 45,1
003EB8  3  6C 01                .byte 108,1
003EBA  3  2C 01                .byte 44,1
003EBC  3  2E 01                .byte 46,1
003EBE  3  25 01                .byte 37,1
003EC0  3  34 01                .byte 52,1
003EC2  3  6E 01                .byte 110,1
003EC4  3               bprop:
003EC4  3  00                   .byte 0
003EC5  3  02                   .byte 2
003EC6  3  02                   .byte 2
003EC7  3  08                   .byte 8
003EC8  3  02                   .byte 2
003EC9  3  02                   .byte 2
003ECA  3  02                   .byte 2
003ECB  3  02                   .byte 2
003ECC  3  02                   .byte 2
003ECD  3  02                   .byte 2
003ECE  3  02                   .byte 2
003ECF  3  02                   .byte 2
003ED0  3  02                   .byte 2
003ED1  3               sprgfx:
003ED1  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,41,115,115,38,0,0,0,0,0,0
003ED5  3  00 78 7B 77  
003ED9  3  74 00 29 73  
003EE5  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,71,15,15,27,0,0,3,3,0,0
003EE9  3  00 42 4E 1D  
003EED  3  11 00 47 0F  
003EF9  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,30,94,93,77,0,2,12,12,1,0
003EFD  3  00 09 58 54  
003F01  3  06 00 1E 5E  
003F0D  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,70,83,25,1,0,0,0,0,0
003F11  3  04 40 56 5F  
003F15  3  59 10 02 46  
003F21  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,27,15,71,5,0,2,3,1,0
003F25  3  10 00 19 5F  
003F29  3  46 00 0A 1B  
003F35  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,77,95,30,20,0,9,12,6,0
003F39  3  00 02 44 5C  
003F3D  3  18 01 48 4D  
003F49  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,41,112,112,38,0,0,0,0,0,0
003F4D  3  00 78 7B 77  
003F51  3  74 00 29 70  
003F5D  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,71,3,3,27,0,0,3,3,0,0
003F61  3  00 42 4E 1D  
003F65  3  11 00 47 03  
003F71  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,30,14,13,77,0,2,12,12,1,0
003F75  3  00 09 58 54  
003F79  3  06 00 1E 0E  
003F85  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,68,80,24,1,0,0,0,0,0
003F89  3  04 40 56 5F  
003F8D  3  59 10 02 44  
003F99  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,19,3,67,5,0,2,3,1,0
003F9D  3  10 00 19 5F  
003FA1  3  46 00 0A 13  
003FAD  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,13,15,14,20,0,9,12,6,0
003FB1  3  00 02 44 5C  
003FB5  3  18 01 48 0D  
003FC1  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,43,127,127,39,0,0,0,0,0,0
003FC5  3  00 78 7B 77  
003FC9  3  74 00 2B 7F  
003FD5  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,79,95,95,31,0,0,3,3,0,0
003FD9  3  00 42 4E 1D  
003FDD  3  11 00 4F 5F  
003FE9  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,94,94,93,93,0,2,15,15,1,0
003FED  3  00 09 58 54  
003FF1  3  06 00 5E 5E  
003FFD  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,79,95,31,1,0,0,0,0,0
004001  3  04 40 56 5F  
004005  3  59 10 02 4F  
004011  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,95,95,95,5,0,2,3,1,0
004015  3  10 00 19 5F  
004019  3  46 00 0A 5F  
004025  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,93,95,94,20,0,11,15,7,0
004029  3  00 02 44 5C  
00402D  3  18 01 48 5D  
004039  3  64 7C 7C 38          .byte 100,124,124,56,0,117,127,122,127,0,110,43,55,61,0,0,0,0,0,0
00403D  3  00 75 7F 7A  
004041  3  7F 00 6E 2B  
00404D  3  10 50 50 40          .byte 16,80,80,64,0,22,95,75,93,0,91,79,31,87,0,2,0,1,1,0
004051  3  00 16 5F 4B  
004055  3  5D 00 5B 4F  
004061  3  00 00 00 00          .byte 0,0,0,0,0,25,95,79,86,0,77,95,94,31,0,11,2,5,7,0
004065  3  00 19 5F 4F  
004069  3  56 00 4D 5F  
004075  3  08 58 5C 54          .byte 8,88,92,84,4,74,90,85,95,21,8,23,79,75,4,0,0,0,0,0
004079  3  04 4A 5A 55  
00407D  3  5F 15 08 17  
004089  3  40 40 50 10          .byte 64,64,80,16,16,72,75,23,95,20,66,31,95,79,17,0,1,2,2,0
00408D  3  10 48 4B 17  
004091  3  5F 14 42 1F  
00409D  3  00 00 00 00          .byte 0,0,0,0,0,66,78,31,93,17,10,94,93,95,5,2,5,11,10,1
0040A1  3  00 42 4E 1F  
0040A5  3  5D 11 0A 5E  
0040B1  3  64 7C 7C 38          .byte 100,124,124,56,0,117,127,122,127,0,62,107,39,109,0,0,0,0,0,0
0040B5  3  00 75 7F 7A  
0040B9  3  7F 00 3E 6B  
0040C5  3  10 50 50 40          .byte 16,80,80,64,0,22,95,75,93,0,91,79,31,87,0,1,2,0,2,0
0040C9  3  00 16 5F 4B  
0040CD  3  5D 00 5B 4F  
0040D9  3  00 00 00 00          .byte 0,0,0,0,0,25,95,79,86,0,77,95,94,31,0,7,10,1,11,0
0040DD  3  00 19 5F 4F  
0040E1  3  56 00 4D 5F  
0040ED  3  08 58 5C 54          .byte 8,88,92,84,4,74,90,85,95,21,72,7,31,11,20,0,0,0,0,0
0040F1  3  04 4A 5A 55  
0040F5  3  5F 15 48 07  
004101  3  40 40 50 10          .byte 64,64,80,16,16,72,75,23,95,20,66,31,95,79,17,2,0,1,0,1
004105  3  10 48 4B 17  
004109  3  5F 14 42 1F  
004115  3  00 00 00 00          .byte 0,0,0,0,0,66,78,31,93,17,10,94,93,95,5,10,1,7,2,5
004119  3  00 42 4E 1F  
00411D  3  5D 11 0A 5E  
004129  3  64 3C 7C 24          .byte 100,60,124,36,0,110,119,33,32,0,32,43,47,36,0,0,0,0,0,0
00412D  3  00 6E 77 21  
004131  3  20 00 20 2B  
00413D  3  10 50 50 10          .byte 16,80,80,16,0,90,29,7,0,0,2,79,92,16,0,0,0,0,0,0
004141  3  00 5A 1D 07  
004145  3  00 00 02 4F  
004151  3  00 00 00 00          .byte 0,0,0,0,0,73,87,31,1,0,11,93,80,0,0,0,2,3,1,0
004155  3  00 49 57 1F  
004159  3  01 00 0B 5D  
004165  3  08 58 4C 1C          .byte 8,88,76,28,0,8,95,19,0,0,0,2,15,13,0,0,0,0,0,0
004169  3  00 08 5F 13  
00416D  3  00 00 00 02  
004179  3  40 40 50 50          .byte 64,64,80,80,0,64,95,14,1,0,0,11,93,84,0,0,0,0,0,0
00417D  3  00 40 5F 0E  
004181  3  01 00 00 0B  
00418D  3  00 00 00 00          .byte 0,0,0,0,0,2,94,91,7,0,2,79,84,16,0,0,0,3,3,0
004191  3  00 02 5E 5B  
004195  3  07 00 02 4F  
0041A1  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
0041A5  3  00 6E 7F 7F  
0041A9  3  3D 00 20 2B  
0041B5  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
0041B9  3  00 58 5F 5F  
0041BD  3  54 00 02 4F  
0041C9  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
0041CD  3  00 40 5E 5D  
0041D1  3  10 00 0B 5F  
0041DD  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
0041E1  3  00 08 5F 5F  
0041E5  3  5F 04 00 02  
0041F1  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
0041F5  3  00 40 5E 5F  
0041F9  3  5D 10 00 0B  
004205  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
004209  3  00 00 58 5F  
00420D  3  54 00 02 4F  
004219  3  28 7C 6C 38          .byte 40,124,108,56,0,32,34,123,61,0,40,47,39,32,0,0,0,0,0,0
00421D  3  00 20 22 7B  
004221  3  3D 00 28 2F  
00422D  3  40 50 50 40          .byte 64,80,80,64,0,0,11,78,85,0,64,92,31,1,0,0,0,0,0,0
004231  3  00 00 0B 4E  
004235  3  55 00 40 5C  
004241  3  00 00 00 00          .byte 0,0,0,0,0,2,79,91,22,0,0,80,94,7,0,2,3,1,0,0
004245  3  00 02 4F 5B  
004249  3  16 00 00 50  
004255  3  00 4C 1C 54          .byte 0,76,28,84,4,0,0,67,95,4,0,14,15,1,0,0,0,0,0,0
004259  3  04 00 00 43  
00425D  3  5F 04 00 0E  
004269  3  00 50 50 10          .byte 0,80,80,16,16,0,2,13,95,16,0,88,94,7,0,0,0,0,0,0
00426D  3  10 00 02 0D  
004271  3  5F 10 00 58  
00427D  3  00 00 00 00          .byte 0,0,0,0,0,0,11,87,93,1,0,64,88,31,1,0,3,3,0,0
004281  3  00 00 0B 57  
004285  3  5D 01 00 40  
004291  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
004295  3  00 6E 7F 7F  
004299  3  3D 00 20 2B  
0042A5  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
0042A9  3  00 58 5F 5F  
0042AD  3  54 00 02 4F  
0042B9  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
0042BD  3  00 40 5E 5D  
0042C1  3  10 00 0B 5F  
0042CD  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
0042D1  3  00 08 5F 5F  
0042D5  3  5F 04 00 02  
0042E1  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
0042E5  3  00 40 5E 5F  
0042E9  3  5D 10 00 0B  
0042F5  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
0042F9  3  00 00 58 5F  
0042FD  3  54 00 02 4F  
004309  3  74 20 20 78          .byte 116,32,32,120,0,119,125,122,63,0,38,43,35,32,0,0,0,0,0,0
00430D  3  00 77 7D 7A  
004311  3  3F 00 26 2B  
00431D  3  10 00 00 40          .byte 16,0,0,64,0,31,84,72,95,0,27,79,15,1,0,0,0,0,0,0
004321  3  00 1F 54 48  
004325  3  5F 00 1B 4F  
004331  3  00 00 00 00          .byte 0,0,0,0,0,93,16,64,94,0,77,95,94,7,0,1,2,0,0,0
004335  3  00 5D 10 40  
004339  3  5E 00 4D 5F  
004345  3  48 10 00 40          .byte 72,16,0,64,20,74,91,84,95,5,8,3,7,1,0,0,0,0,0,0
004349  3  14 4A 5B 54  
00434D  3  5F 05 08 03  
004359  3  40 00 00 00          .byte 64,0,0,0,16,74,77,16,94,21,66,15,31,7,0,0,0,0,0,0
00435D  3  10 4A 4D 10  
004361  3  5E 15 42 0F  
00436D  3  00 00 00 00          .byte 0,0,0,0,0,74,84,0,88,21,10,94,93,31,1,2,0,1,0,0
004371  3  00 4A 54 00  
004375  3  58 15 0A 5E  
004381  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
004385  3  00 6E 7F 7F  
004389  3  3D 00 20 2B  
004395  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
004399  3  00 58 5F 5F  
00439D  3  54 00 02 4F  
0043A9  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
0043AD  3  00 40 5E 5D  
0043B1  3  10 00 0B 5F  
0043BD  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
0043C1  3  00 08 5F 5F  
0043C5  3  5F 04 00 02  
0043D1  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
0043D5  3  00 40 5E 5F  
0043D9  3  5D 10 00 0B  
0043E5  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
0043E9  3  00 00 58 5F  
0043ED  3  54 00 02 4F  
0043F9  3  64 78 70 20          .byte 100,120,112,32,0,119,63,107,125,0,39,32,32,43,0,0,0,0,0,0
0043FD  3  00 77 3F 6B  
004401  3  7D 00 27 20  
00440D  3  10 40 00 00          .byte 16,64,0,0,0,30,95,79,84,0,31,1,2,79,0,0,0,0,0,0
004411  3  00 1E 5F 4F  
004415  3  54 00 1F 01  
004421  3  00 00 00 00          .byte 0,0,0,0,0,89,94,92,16,0,93,7,10,95,0,1,0,0,2,0
004425  3  00 59 5E 5C  
004429  3  10 00 5D 07  
004435  3  08 50 54 10          .byte 8,80,84,16,0,74,91,7,95,20,10,1,0,2,5,0,0,0,0,0
004439  3  00 4A 5B 07  
00443D  3  5F 14 0A 01  
004449  3  40 00 10 00          .byte 64,0,16,0,0,72,79,31,93,16,74,7,0,11,21,0,0,0,0,0
00444D  3  00 48 4F 1F  
004451  3  5D 10 4A 07  
00445D  3  00 00 00 00          .byte 0,0,0,0,0,66,92,93,84,0,74,30,1,79,21,2,0,0,0,1
004461  3  00 42 5C 5D  
004465  3  54 00 4A 1E  
004471  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
004475  3  00 6E 7F 7F  
004479  3  3D 00 20 2B  
004485  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
004489  3  00 58 5F 5F  
00448D  3  54 00 02 4F  
004499  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
00449D  3  00 40 5E 5D  
0044A1  3  10 00 0B 5F  
0044AD  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
0044B1  3  00 08 5F 5F  
0044B5  3  5F 04 00 02  
0044C1  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
0044C5  3  00 40 5E 5F  
0044C9  3  5D 10 00 0B  
0044D5  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
0044D9  3  00 00 58 5F  
0044DD  3  54 00 02 4F  
0044E9  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,41,112,112,38,0,0,0,0,0,0
0044ED  3  00 78 7B 77  
0044F1  3  74 00 29 70  
0044FD  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,71,3,3,27,0,0,3,3,0,0
004501  3  00 42 4E 1D  
004505  3  11 00 47 03  
004511  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,30,14,13,77,0,2,12,12,1,0
004515  3  00 09 58 54  
004519  3  06 00 1E 0E  
004525  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,68,80,24,1,0,0,0,0,0
004529  3  04 40 56 5F  
00452D  3  59 10 02 44  
004539  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,19,3,67,5,0,2,3,1,0
00453D  3  10 00 19 5F  
004541  3  46 00 0A 13  
00454D  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,13,15,14,20,0,9,12,6,0
004551  3  00 02 44 5C  
004555  3  18 01 48 0D  
004561  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,43,127,127,39,0,0,0,0,0,0
004565  3  00 78 7B 77  
004569  3  74 00 2B 7F  
004575  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,79,95,95,31,0,0,3,3,0,0
004579  3  00 42 4E 1D  
00457D  3  11 00 4F 5F  
004589  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,94,94,93,93,0,2,15,15,1,0
00458D  3  00 09 58 54  
004591  3  06 00 5E 5E  
00459D  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,79,95,31,1,0,0,0,0,0
0045A1  3  04 40 56 5F  
0045A5  3  59 10 02 4F  
0045B1  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,95,95,95,5,0,2,3,1,0
0045B5  3  10 00 19 5F  
0045B9  3  46 00 0A 5F  
0045C5  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,93,95,94,20,0,11,15,7,0
0045C9  3  00 02 44 5C  
0045CD  3  18 01 48 5D  
0045D9  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,43,33,34,39,0,0,0,0,0,0
0045DD  3  00 78 7B 77  
0045E1  3  74 00 2B 21  
0045ED  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,79,7,11,31,0,0,0,0,0,0
0045F1  3  00 42 4E 1D  
0045F5  3  11 00 4F 07  
004601  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,94,30,77,93,0,2,0,0,1,0
004605  3  00 09 58 54  
004609  3  06 00 5E 1E  
004615  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,7,0,11,1,0,0,0,0,0
004619  3  04 40 56 5F  
00461D  3  59 10 02 07  
004629  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,31,3,79,5,0,0,0,0,0
00462D  3  10 00 19 5F  
004631  3  46 00 0A 1F  
00463D  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,93,15,94,20,0,1,0,2,0
004641  3  00 02 44 5C  
004645  3  18 01 48 5D  
004651  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,32,32,32,32,0,0,0,0,0,0
004655  3  00 78 7B 77  
004659  3  74 00 20 20  
004665  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,3,3,3,3,0,0,0,0,0,0
004669  3  00 42 4E 1D  
00466D  3  11 00 03 03  
004679  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,14,14,13,13,0,0,0,0,0,0
00467D  3  00 09 58 54  
004681  3  06 00 0E 0E  
00468D  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,0,0,0,0,0,0,0,0,0,0
004691  3  04 40 56 5F  
004695  3  59 10 00 00  
0046A1  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,2,3,3,3,1,0,0,0,0,0
0046A5  3  10 00 19 5F  
0046A9  3  46 00 02 03  
0046B5  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,8,13,15,14,4,0,0,0,0,0
0046B9  3  00 02 44 5C  
0046BD  3  18 01 08 0D  
0046C9  3  64 60 30 38          .byte 100,96,48,56,0,32,107,55,32,0,32,32,32,32,0,0,0,0,0,0
0046CD  3  00 20 6B 37  
0046D1  3  20 00 20 20  
0046DD  3  10 00 00 40          .byte 16,0,0,64,0,2,78,29,1,0,0,2,1,0,0,0,0,0,0,0
0046E1  3  00 02 4E 1D  
0046E5  3  01 00 00 02  
0046F1  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,0,10,5,0,0,0,0,0,0,0
0046F5  3  00 09 58 54  
0046F9  3  06 00 00 0A  
004705  3  08 10 50 40          .byte 8,16,80,64,4,0,2,95,1,0,0,0,0,0,0,0,0,0,0,0
004709  3  04 00 02 5F  
00470D  3  01 00 00 00  
004719  3  40 00 00 00          .byte 64,0,0,0,16,0,9,95,6,0,0,0,3,0,0,0,0,0,0,0
00471D  3  10 00 09 5F  
004721  3  06 00 00 00  
00472D  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,0,0,15,0,0,0,0,0,0,0
004731  3  00 02 44 5C  
004735  3  18 01 00 00  
004741  3  20 20 20 20          .byte 32,32,32,32,0,32,42,37,32,0,32,32,32,32,0,0,0,0,0,0
004745  3  00 20 2A 25  
004749  3  20 00 20 20  
004755  3  00 00 00 00          .byte 0,0,0,0,0,0,72,20,0,0,0,0,0,0,0,0,0,0,0,0
004759  3  00 00 48 14  
00475D  3  00 00 00 00  
004769  3  00 00 00 00          .byte 0,0,0,0,0,0,64,16,0,0,0,2,1,0,0,0,0,0,0,0
00476D  3  00 00 40 10  
004771  3  00 00 00 02  
00477D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0
004781  3  00 00 00 0F  
004785  3  00 00 00 00  
004791  3  00 00 00 00          .byte 0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0
004795  3  00 00 00 5C  
004799  3  00 00 00 00  
0047A5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,80,0,0,0,0,3,0,0,0,0,0,0,0
0047A9  3  00 00 00 50  
0047AD  3  00 00 00 00  
0047B9  3  28 34 60 24          .byte 40,52,96,36,0,44,52,104,44,0,54,106,32,101,0,0,0,0,0,0
0047BD  3  00 2C 34 68  
0047C1  3  2C 00 36 6A  
0047CD  3  40 10 00 10          .byte 64,16,0,16,0,80,17,66,80,0,24,73,2,20,0,1,2,0,2,0
0047D1  3  00 50 11 42  
0047D5  3  50 00 18 49  
0047E1  3  00 00 00 00          .byte 0,0,0,0,0,2,5,8,1,0,67,69,10,19,0,5,10,0,9,0
0047E5  3  00 02 05 08  
0047E9  3  01 00 43 45  
0047F5  3  00 4C 00 18          .byte 0,76,0,24,0,8,76,0,28,4,72,1,21,10,16,0,0,0,0,0
0047F9  3  00 08 4C 00  
0047FD  3  1C 04 48 01  
004809  3  00 50 00 40          .byte 0,80,0,64,0,64,82,0,81,16,64,6,20,73,0,2,0,1,0,1
00480D  3  00 40 52 00  
004811  3  51 10 40 06  
00481D  3  00 00 00 00          .byte 0,0,0,0,0,0,11,0,6,0,2,27,16,71,1,10,0,5,2,4
004821  3  00 00 0B 00  
004825  3  06 00 02 1B  
004831  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004835  3  00 00 00 00  
004839  3  00 00 00 00  
004845  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004849  3  00 00 00 00  
00484D  3  00 00 00 00  
004859  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00485D  3  00 00 00 00  
004861  3  00 00 00 00  
00486D  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004871  3  00 00 00 00  
004875  3  00 00 00 00  
004881  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004885  3  00 00 00 00  
004889  3  00 00 00 00  
004895  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004899  3  00 00 00 00  
00489D  3  00 00 00 00  
0048A9  3               frmlst:
0048A9  3  00 03                .byte 0,3
0048AB  3  03 02                .byte 3,2
0048AD  3  05 02                .byte 5,2
0048AF  3  07 02                .byte 7,2
0048B1  3  09 02                .byte 9,2
0048B3  3  0B 02                .byte 11,2
0048B5  3  0D 08 15 00          .byte 13,8,21,0
0048B9  3               scdat:
0048B9  3  14 02                .word 532
0048BB  3  FF 02 27 05          .byte 255,2,39,5,255,0,9,5,255,0,4,5,0,0,0,5,255,0,8,5,255,0,9,5,5,0,255,3,7,0,5,0,3
0048BF  3  FF 00 09 05  
0048C3  3  FF 00 04 05  
0048DC  3  00 00 05 00          .byte 0,0,5,0,0,0,5,0,255,3,5,0,0,5,0,255,3,7,0,5,5,0,3,255,0,7,5,0,3,0,0,5,0,0,0
0048E0  3  00 00 05 00  
0048E4  3  FF 03 05 00  
0048FF  3  05 00 03 FF          .byte 5,0,3,255,0,6,5,0,3,255,0,7,5,5,0,3,0,0,255,8,5,10,0,3,0,0,6,8,8,8,10,0,3
004903  3  00 06 05 00  
004907  3  03 FF 00 07  
004920  3  00 00 FF 08          .byte 0,0,255,8,4,10,0,3,0,0,255,8,5,5,5,0,3,255,0,9,3,255,0,8,3,255,0,8,3,255,0,7,5,5
004924  3  04 0A 00 03  
004928  3  00 00 FF 08  
004942  3  00 FF 03 22          .byte 0,255,3,34,0,0,5,5,0,3,255,0,9,3,255,0,12,3,255,0,9,3,0,0,5,5,0,3,0,0,255,8,5
004946  3  00 00 05 05  
00494A  3  00 03 FF 00  
004963  3  0B 00 03 00          .byte 11,0,3,0,0,255,8,9,0,3,0,0,4,255,8,5,0,3,0,0,5,5,0,3,255,0,7,5,0,3,255,0,12
004967  3  00 FF 08 09  
00496B  3  00 03 00 00  
004984  3  03 00 00 05          .byte 3,0,0,5,255,0,6,3,0,0,5,5,0,255,3,6,0,0,5,0,255,3,14,0,0,5,0,255,3,6,0,0,5,5
004988  3  FF 00 06 03  
00498C  3  00 00 05 05  
0049A6  3  FF 00 06 03          .byte 255,0,6,3,0,0,5,255,0,17,5,0,3,255,0,7,5,6,255,8,5,0,3,0,0,6,255,8,17,10,0,3,0,0
0049AA  3  00 00 05 FF  
0049AE  3  00 11 05 00  
0049C8  3  FF 08 05 0A          .byte 255,8,5,10,255,0,7,3,255,0,22,3,255,0,8,255,3,16,255,0,5,255,3,17,255,0,8,3,255,0,22,3,255,0,8
0049CC  3  FF 00 07 03  
0049D0  3  FF 00 16 03  
0049EB  3  04 FF 08 04          .byte 4,255,8,4,11,0,3,0,0,255,8,5,4,255,8,7,4,255,8,5,0,3,0,0,4,255,8,4,11,5,255,0,4
0049EF  3  0B 00 03 00  
0049F3  3  00 FF 08 05  
004A0C  3  05 00 03 FF          .byte 5,0,3,255,0,7,5,255,0,7,5,255,0,6,3,0,0,5,255,0,4,5,5,0,3,0,0,5,0,255,3,6,0,0
004A10  3  00 07 05 FF  
004A14  3  00 07 05 FF  
004A2E  3  05 FF 00 07          .byte 5,255,0,7,5,0,255,3,6,0,0,5,0,3,0,0,5,5,0,3,0,0,5,0,3,255,0,4,3,0,0,5,255,0,7
004A32  3  05 00 FF 03  
004A36  3  06 00 00 05  
004A51  3  05 00 03 FF          .byte 5,0,3,255,0,4,3,0,0,5,0,3,0,0,5,5,0,3,0,0,5,0,3,0,0,5,0,3,0,0,6,255,8,7
004A55  3  00 04 03 00  
004A59  3  00 05 00 03  
004A73  3  0A 00 03 00          .byte 10,0,3,0,0,5,0,3,0,0,5,0,3,0,0,5,5,0,3,255,0,4,3,0,0,5,0,3,255,0,12,3,0,0
004A77  3  00 05 00 03  
004A7B  3  00 00 05 00  
004A95  3  05 00 03 FF          .byte 5,0,3,255,0,4,3,0,0,5,5,0,255,3,6,0,0,5,0,255,3,14,0,0,5,0,255,3,6,0,0,5,5
004A99  3  00 04 03 00  
004A9D  3  00 05 05 00  
004AB6  3  FF 00 09 05          .byte 255,0,9,5,255,0,17,5,255,0,9,5,6,255,8,9,6,255,8,17,6,255,8,9,10
004ABA  3  FF 00 11 05  
004ABE  3  FF 00 09 05  
004ACF  3               numsc:
004ACF  3  01                   .byte 1
004AD0  3               nmedat:
004AD0  3  00 00 27 24          .byte 0,0,39,36,1,1,15,36,1,1,63,36,255
004AD4  3  01 01 0F 24  
004AD8  3  01 01 3F 24  
004ADD  3               NUMOBJ = 1
004ADD  3               objdta:
004ADD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
004AE1  3  00 00 00 00  
004AE5  3  00 00 00 00  
004B03  3               font:
004B03  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B07  3  00 00 00 00  
004B0B  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
004B0F  3  30 00 30 00  
004B13  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
004B17  3  00 00 00 00  
004B1B  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
004B1F  3  6C FE 6C 00  
004B23  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
004B27  3  7E 1E 7E 18  
004B2B  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
004B2F  3  30 6E CE 00  
004B33  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
004B37  3  7E CC 7E 00  
004B3B  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
004B3F  3  00 00 00 00  
004B43  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
004B47  3  18 18 0C 00  
004B4B  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
004B4F  3  30 30 60 00  
004B53  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
004B57  3  7E 18 3C 00  
004B5B  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
004B5F  3  7E 18 18 00  
004B63  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
004B67  3  00 18 18 30  
004B6B  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
004B6F  3  7E 00 00 00  
004B73  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
004B77  3  00 38 38 00  
004B7B  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
004B7F  3  18 30 60 00  
004B83  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
004B87  3  F6 E6 7C 00  
004B8B  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
004B8F  3  18 18 7E 00  
004B93  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
004B97  3  7C C0 FE 00  
004B9B  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
004B9F  3  06 C6 7C 00  
004BA3  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
004BA7  3  D8 FE 18 00  
004BAB  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
004BAF  3  06 C6 7C 00  
004BB3  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
004BB7  3  C6 C6 7C 00  
004BBB  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
004BBF  3  18 30 30 00  
004BC3  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
004BC7  3  C6 C6 7C 00  
004BCB  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
004BCF  3  7E 06 7C 00  
004BD3  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
004BD7  3  00 00 30 00  
004BDB  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
004BDF  3  00 30 30 60  
004BE3  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
004BE7  3  30 18 0C 00  
004BEB  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
004BEF  3  00 7E 00 00  
004BF3  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
004BF7  3  0C 18 30 00  
004BFB  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
004BFF  3  18 00 18 00  
004C03  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
004C07  3  FE C0 7C 00  
004C0B  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
004C0F  3  FE C6 C6 00  
004C13  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
004C17  3  C6 C6 FC 00  
004C1B  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
004C1F  3  C0 C6 7C 00  
004C23  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
004C27  3  C6 CC F8 00  
004C2B  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
004C2F  3  C0 C0 FE 00  
004C33  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
004C37  3  C0 C0 C0 00  
004C3B  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
004C3F  3  DE C6 7C 00  
004C43  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
004C47  3  C6 C6 C6 00  
004C4B  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
004C4F  3  18 18 7E 00  
004C53  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
004C57  3  C6 C6 7C 00  
004C5B  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
004C5F  3  D8 CC C6 00  
004C63  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
004C67  3  C0 C0 FE 00  
004C6B  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
004C6F  3  C6 C6 C6 00  
004C73  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
004C77  3  DE CE C6 00  
004C7B  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
004C7F  3  C6 C6 7C 00  
004C83  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
004C87  3  FC C0 C0 00  
004C8B  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
004C8F  3  F6 DE 7C 00  
004C93  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
004C97  3  FC CC C6 00  
004C9B  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
004C9F  3  06 C6 7C 00  
004CA3  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
004CA7  3  30 30 30 00  
004CAB  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
004CAF  3  C6 C6 7C 00  
004CB3  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
004CB7  3  C6 6C 38 00  
004CBB  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
004CBF  3  C6 FE 6C 00  
004CC3  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
004CC7  3  38 6C C6 00  
004CCB  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
004CCF  3  30 30 30 00  
004CD3  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
004CD7  3  30 60 FE 00  
004CDB  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
004CDF  3  18 18 1E 00  
004CE3  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
004CE7  3  30 18 0C 00  
004CEB  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
004CEF  3  30 30 F0 00  
004CF3  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
004CF7  3  30 30 30 00  
004CFB  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
004CFF  3  00 00 00 FF  
004D03  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
004D07  3  60 60 FE 00  
004D0B  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
004D0F  3  7C CC 7C 00  
004D13  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
004D17  3  66 66 7C 00  
004D1B  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
004D1F  3  60 60 3C 00  
004D23  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
004D27  3  CC CC 7C 00  
004D2B  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
004D2F  3  F8 C0 7C 00  
004D33  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
004D37  3  30 30 30 00  
004D3B  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
004D3F  3  CC 7C 0C 78  
004D43  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
004D47  3  CC CC CC 00  
004D4B  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
004D4F  3  30 30 78 00  
004D53  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
004D57  3  0C 0C 6C 38  
004D5B  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
004D5F  3  70 78 6C 00  
004D63  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
004D67  3  30 30 1C 00  
004D6B  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
004D6F  3  FC FC FC 00  
004D73  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
004D77  3  CC CC CC 00  
004D7B  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
004D7F  3  CC CC 78 00  
004D83  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
004D87  3  CC F8 C0 C0  
004D8B  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
004D8F  3  CC 7C 0C 0E  
004D93  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
004D97  3  60 60 60 00  
004D9B  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
004D9F  3  78 0C F8 00  
004DA3  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
004DA7  3  30 30 1C 00  
004DAB  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
004DAF  3  CC CC 78 00  
004DB3  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
004DB7  3  78 78 30 00  
004DBB  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
004DBF  3  FC FC 78 00  
004DC3  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
004DC7  3  30 78 CC 00  
004DCB  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
004DCF  3  CC 7C 0C 78  
004DD3  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
004DD7  3  30 60 FC 00  
004DDB  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
004DDF  3  18 18 1E 00  
004DE3  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
004DE7  3  18 18 18 00  
004DEB  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
004DEF  3  30 30 F0 00  
004DF3  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
004DF7  3  00 00 00 00  
004DFB  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
004DFF  3  E3 BB C6 7C  
004E03  3               jtab:
004E03  3  63                   .byte 99
004E04  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
004E08  3  20 4E 4D 31  
004E0C  3  32 33 34     
004E0F  3               
004E0F  2               
004E0F  1               	.include "lib.inc"
004E0F  2               ;----------------------------------------------------------------------
004E0F  2               ; System 5 depending variables and routines
004E0F  2               ;----------------------------------------------------------------------
004E0F  2               
004E0F  2               ; Flags
004E0F  2               
004E0F  2               	real		= 0		; 0=emulator, 1=real system5
004E0F  2               
004E0F  2               ; Global variables
004E0F  2               
004E0F  2               	t_red		= 1		; Text colour definition filters
004E0F  2               	t_green		= 2
004E0F  2               	t_yellow	= 3
004E0F  2               	t_blue		= 4
004E0F  2               	t_magenta	= 5
004E0F  2               	t_cyan		= 6
004E0F  2               	t_white		= 7
004E0F  2               
004E0F  2               	g_red		= 17		; Graphics colour definition filters
004E0F  2               	g_green		= 18
004E0F  2               	g_yellow	= 19
004E0F  2               	g_blue		= 20
004E0F  2               	g_magenta	= 21
004E0F  2               	g_cyan		= 22
004E0F  2               	g_white		= 23
004E0F  2               
004E0F  2               	ScrWidth	= 40
004E0F  2               	ScrHeight	= 25
004E0F  2               
004E0F  2               .if real=1
004E0F  2               	IRQtime		= 20000		; 50Hz at 1Mhz clock
004E0F  2               .else
004E0F  2               	IRQtime		= 40000		; 50Hz at 2Mhz clock
004E0F  2               .endif
004E0F  2               
004E0F  2               ; System constants
004E0F  2               
004E0F  2               	IRQVEC		= $0204		; Interrupt vector
004E0F  2               	ScreenAddr	= $0400		; Startaddress video RAM
004E0F  2               
004E0F  2               	MC6845_Reg	= $0800		; MC6845 CRT controller register ptr
004E0F  2               	MC6845_Dat	= $0801		; MC6845 CRT controller data
004E0F  2               
004E0F  2               	VIA1		= $0e20
004E0F  2               	PORT_A		= VIA1+$1	; Keyboard
004E0F  2               	Timer1_Low  	= VIA1+$4	; Timer 1 low byte
004E0F  2               	Timer1_High 	= VIA1+$5	; Timer 1 high byte
004E0F  2               	Timer2_Low	= VIA1+$8	; Timer 2 low byte
004E0F  2               	Timer2_High	= VIA1+$9	; Timer 2 high byte
004E0F  2               	ACR		= VIA1+$b	; Auxiliary Control Register
004E0F  2               	PCR		= VIA1+$c	; Peripheral Control Register
004E0F  2               	IFR		= VIA1+$d 	; Interrupt Flag Register
004E0F  2               	IER		= VIA1+$e	; Interupt Enable Register
004E0F  2               
004E0F  2               	MAP 		= $D800		; properties map buffer (4x256 bytes)
004E0F  2               	SCADTB_lb 	= $DC00		; screen address table lo-byte (256 bytes)
004E0F  2               	SCADTB_hb 	= $DD00		; screen address table hi-byte (256 bytes)
004E0F  2               	SHRAPN 		= $DE00		; shrapnel table (55x6 bytes)
004E0F  2               	V_SPR_PTR	= $DF4A		; Vertical spriteframe pointer (75 bytes)
004E0F  2               
004E0F  2               ; System calls
004E0F  2               
004E0F  2               	OS_CLI   = $FFF7
004E0F  2               	OSBYTE   = $FFF4
004E0F  2               	OSWORD   = $FFF1
004E0F  2               	OSWRCH   = $FFEE
004E0F  2               	OSWRCR   = $FFEC
004E0F  2               	OSNEWL   = $FFE7
004E0F  2               	OSASCI   = $FFE3
004E0F  2               	OSRDCH   = $FFE0
004E0F  2               	OSFILE   = $FFDD
004E0F  2               	OSARGS   = $FFDA
004E0F  2               	OSBGET   = $FFD7
004E0F  2               	OSBPUT   = $FFD4
004E0F  2               	OSGBPB   = $FFD1
004E0F  2               	OSFIND   = $FFCE
004E0F  2               
004E0F  2               ; To be removed
004E0F  2               
004E0F  2               	SCRSYNC	= $fff4
004E0F  2               
004E0F  2               ;======================================================================
004E0F  2               ; System depending routines
004E0F  2               ;======================================================================
004E0F  2               
004E0F  2               ;----------------------------------------------------------------------
004E0F  2               ; Init hardware
004E0F  2               ;----------------------------------------------------------------------
004E0F  2               
004E0F  2               init:
004E0F  2               
004E0F  2               ; Set up screen address table.
004E0F  2               
004E0F  2               setsat:
004E0F  2  A9 00        	lda #<ScreenAddr	; start of screen.
004E11  2  85 rr        	sta scraddr
004E13  2  A9 04        	lda #>ScreenAddr
004E15  2  85 rr        	sta scraddr+1
004E17  2               
004E17  2  A2 00        	ldx #0
004E19  2  A0 00        	ldy #0			; vertical lines on screen.
004E1B  2               setsa0:
004E1B  2  A5 rr        	lda scraddr
004E1D  2  99 00 DC     	sta SCADTB_lb,y		; write low byte.
004E20  2  A5 rr        	lda scraddr+1
004E22  2  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
004E24  2  90 02        	bcc :+
004E26  2  09 F0        	ora #$F0		; plot sprites in rom if of screen
004E28  2               :
004E28  2  99 00 DD     	sta SCADTB_hb,y		; write high byte.
004E2B  2  E8           	inx
004E2C  2  E0 03        	cpx #3
004E2E  2  D0 05        	bne :+
004E30  2  20 17 33     	jsr nline		; next line down.
004E33  2  A2 00        	ldx #0
004E35  2               :
004E35  2  C8           	iny			; next position in table.
004E36  2  D0 E3        	bne setsa0
004E38  2               
004E38  2               ; Set up vertical sprite pointer table
004E38  2               
004E38  2  A0 00        	ldy #0
004E3A  2  A9 00        	lda #0
004E3C  2               vspriteloop:
004E3C  2  99 4A DF     	sta V_SPR_PTR,y
004E3F  2  18           	clc
004E40  2  69 14        	adc #20
004E42  2  C9 3C        	cmp #60
004E44  2  D0 02        	bne :+
004E46  2  A9 00        	lda #0
004E48  2               :
004E48  2  C8           	iny
004E49  2  C0 4B        	cpy #75
004E4B  2  D0 EF        	bne vspriteloop
004E4D  2               
004E4D  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004E4D  2               ; Hack for MAME to use VDU40x25
004E4D  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004E4D  2               
004E4D  2               ; Init VDU40x25
004E4D  2               
004E4D  2  A0 0F        	ldy #$f
004E4F  2               loops:
004E4F  2  8C 00 08     	sty MC6845_Reg
004E52  2  B9 9A 4E     	lda CRTTAB,y
004E55  2  8D 01 08     	sta MC6845_Dat
004E58  2  88           	dey
004E59  2  10 F4        	bpl loops
004E5B  2               
004E5B  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004E5B  2               
004E5B  2               ; Disable cursor
004E5B  2               
004E5B  2  A9 0A        	lda #$0a
004E5D  2  8D 00 08     	sta MC6845_Reg
004E60  2  A9 20        	lda #$20
004E62  2  8D 01 08     	sta MC6845_Dat
004E65  2               
004E65  2  20 AA 4E     	jsr cls
004E68  2               
004E68  2               ; Set new interrupt routine to sync at 25Hz
004E68  2               
004E68  2  A9 88        	lda #<irq_handler	; New interrupt handler
004E6A  2  8D 04 02     	sta IRQVEC
004E6D  2  A9 4E        	lda #>irq_handler
004E6F  2  8D 05 02     	sta IRQVEC+1
004E72  2               
004E72  2  A9 40        	lda #<IRQtime		; Interrupt at 25Hz
004E74  2  8D 24 0E     	sta Timer1_Low
004E77  2  A9 9C        	lda #>IRQtime
004E79  2  8D 25 0E     	sta Timer1_High
004E7C  2  A9 40        	lda #%01000000
004E7E  2  8D 2B 0E     	sta ACR
004E81  2  A9 C0        	lda #%11000000
004E83  2  8D 2E 0E     	sta IER
004E86  2  58           	cli
004E87  2               
004E87  2  60           	rts
004E88  2               
004E88  2               irq_handler:
004E88  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
004E8B  2               
004E8B  2  8A           	txa			; Save x,y
004E8C  2  48           	pha
004E8D  2  98           	tya
004E8E  2  48           	pha
004E8F  2               
004E8F  2  EE 98 4E     	inc frames_passed	; Nr of frames past
004E92  2               
004E92  2  68           	pla			; Restore x,y,a
004E93  2  A8           	tay
004E94  2  68           	pla
004E95  2  AA           	tax
004E96  2  68           	pla
004E97  2  40           	rti
004E98  2               
004E98  2  00           frames_passed:	.byte 0
004E99  2               
004E99  2  60           	rts
004E9A  2               
004E9A  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
004E9E  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
004EA2  2  03 12 72 13  	.byte $03,$12,$72,$13
004EA6  2  04 00 07 FF  	.byte $04,$00,$07,$ff
004EAA  2               
004EAA  2               ;======================================================================
004EAA  2               ; Screen routines
004EAA  2               ;======================================================================
004EAA  2               
004EAA  2               ;----------------------------------------------------------------------
004EAA  2               ; Clear screen routine.
004EAA  2               ;
004EAA  2               ; Fill screenmem $0400-$07ff with ScrFillByte
004EAA  2               ; Set semigraphics at 1st column every line
004EAA  2               ;----------------------------------------------------------------------
004EAA  2               
004EAA  2               cls:
004EAA  2               
004EAA  2               ; Fill screen with 0
004EAA  2               
004EAA  2  A9 00        	lda #0
004EAC  2  A0 00        	ldy #0
004EAE  2               clsloop:
004EAE  2  99 00 04     	sta ScreenAddr,y
004EB1  2  99 00 05     	sta ScreenAddr+256,y
004EB4  2  99 00 06     	sta ScreenAddr+512,y
004EB7  2  99 00 07     	sta ScreenAddr+768,y
004EBA  2  C8           	iny
004EBB  2  D0 F1        	bne clsloop
004EBD  2               
004EBD  2               ; Init every row as graphics
004EBD  2               
004EBD  2  A0 00        	ldy #0
004EBF  2  A2 19        	ldx #ScrHeight
004EC1  2  AD 00 DC     	lda SCADTB_lb
004EC4  2  85 rr        	sta scraddr
004EC6  2  AD 00 DD     	lda SCADTB_hb
004EC9  2  85 rr        	sta scraddr+1
004ECB  2  AD 54 38     	lda bcolour
004ECE  2               colloop:
004ECE  2  91 rr        	sta (scraddr),y
004ED0  2  48           	pha
004ED1  2  A5 rr        	lda scraddr
004ED3  2  18           	clc
004ED4  2  69 28        	adc #ScrWidth
004ED6  2  85 rr        	sta scraddr
004ED8  2  90 02        	bcc :+
004EDA  2  E6 rr        	inc scraddr+1
004EDC  2               :
004EDC  2  68           	pla
004EDD  2  CA           	dex
004EDE  2  D0 EE        	bne colloop
004EE0  2               
004EE0  2  60           	rts
004EE1  2               
004EE1  2               ;-------------------------------------------------------------
004EE1  2               ; Colour background line
004EE1  2               ;-------------------------------------------------------------
004EE1  2               
004EE1  2               linecol:
004EE1  2  A8           	tay
004EE2  2  B9 00 DC     	lda SCADTB_lb,y
004EE5  2  85 rr        	sta scraddr
004EE7  2  B9 00 DD     	lda SCADTB_hb,y
004EEA  2  85 rr        	sta scraddr+1
004EEC  2  A0 00        	ldy #0
004EEE  2  AD 54 38     	lda bcolour		; set background colour
004EF1  2  91 rr        	sta (scraddr),y
004EF3  2  C8           	iny
004EF4  2  A9 1D        	lda #$1d		; set new background colour
004EF6  2  91 rr        	sta (scraddr),y
004EF8  2  60           	rts
004EF9  2               
004EF9  2               
004EF9  2               ;-------------------------------------------------------------
004EF9  2               ; Screen synchronisation.
004EF9  2               ;
004EF9  2               ;  - read joystick/keyboard
004EF9  2               ;  - handle sound
004EF9  2               ;  - sync framerate at 25Hz
004EF9  2               ;  - handle shrapnel every even frame
004EF9  2               ;-------------------------------------------------------------
004EF9  2               
004EF9  2               vsync:
004EF9  2  48           	pha
004EFA  2  98           	tya
004EFB  2  48           	pha
004EFC  2  8A           	txa
004EFD  2  48           	pha
004EFE  2  20 95 2F     	jsr joykey		; read joystick/keyboard.
004F01  2               
004F01  2               ; Sync framerate to 25 Hz
004F01  2               
004F01  2               vsync1:
004F01  2  AD 98 4E     	lda frames_passed	; Wait 2 frames at 50Hz
004F04  2  C9 02        	cmp #2
004F06  2  90 F9        	bcc vsync1
004F08  2               
004F08  2  A9 00        	lda #0			; sync framerate 25 Hz
004F0A  2  8D 98 4E     	sta frames_passed
004F0D  2               
004F0D  2               
004F0D  2  A5 rr        	lda clock
004F0F  2  29 01        	and #1
004F11  2  D0 03        	bne:+
004F13  2  20 8C 28     	jsr proshr		; handle shrapnel every even frame
004F16  2               :
004F16  2               ;	lda sndtyp
004F16  2               ;	beq sndskip
004F16  2               ;sndloop:
004F16  2               ;	lda SpeakerBit		; handle sound
004F16  2               ;	ldy sndtyp
004F16  2               ;sndwait:
004F16  2               ;	dey
004F16  2               ;	bne sndwait
004F16  2               ;	eor #4
004F16  2               ;	sta SpeakerBit
004F16  2               ;	dec sndtyp
004F16  2               ;	bne sndloop
004F16  2               ;sndskip:
004F16  2               
004F16  2  68           	pla
004F17  2  AA           	tax
004F18  2  68           	pla
004F19  2  A8           	tay
004F1A  2  68           	pla
004F1B  2  60           	rts
004F1C  2               
004F1C  2  00           sndtyp:	.byte 0
004F1D  2               
004F1D  2               ;======================================================================
004F1D  2               ; Joystick routines
004F1D  2               ;======================================================================
004F1D  2               
004F1D  2               joyinit:
004F1D  2  60           	rts
004F1E  2               
004F1E  2               joy1:
004F1E  2  AD 2C 0E     	lda PCR			; Switch to joystick
004F21  2  29 F1        	and #%11110001
004F23  2  09 0E        	ora #%00001110
004F25  2               
004F25  2  AD 21 0E     	lda PORT_A		; Read LRUDF joystick
004F28  2  29 7F        	and #$7f
004F2A  2  85 rr        	sta joyval
004F2C  2               
004F2C  2  AD 2C 0E     	lda PCR			; Switch to keyboard
004F2F  2  29 F1        	and #%11110001
004F31  2  09 0C        	ora #%00001100
004F33  2               
004F33  2  AD 09 4E     	lda keys+5
004F36  2  20 51 4F     	jsr ktest
004F39  2  B0 06        	bcs :+
004F3B  2  A5 rr        	lda joyval
004F3D  2  29 DF        	and #%11011111
004F3F  2  85 rr        	sta joyval
004F41  2               :
004F41  2  AD 0A 4E     	lda keys+6
004F44  2  20 51 4F     	jsr ktest
004F47  2  B0 06        	bcs :+
004F49  2  A5 rr        	lda joyval
004F4B  2  29 BF        	and #%10111111
004F4D  2  85 rr        	sta joyval
004F4F  2               :
004F4F  2  60           	rts
004F50  2               
004F50  2               joy2:
004F50  2  60           	rts
004F51  2               
004F51  2               ;======================================================================
004F51  2               ; Keyboard routines
004F51  2               ;======================================================================
004F51  2               
004F51  2               ;----------------------------------------------------------------------
004F51  2               ; KTEST
004F51  2               ; Check if key in A is pressed
004F51  2               ; 	return clc if pressed
004F51  2               ; 	return sec if not pressed
004F51  2               ;----------------------------------------------------------------------
004F51  2               
004F51  2               ktest:
004F51  2  85 rr        	sta tmp
004F53  2  2C 21 0E     	bit PORT_A
004F56  2               ;.if real=1
004F56  2               ;	bpl not_pressed
004F56  2               ;.else
004F56  2  30 07        	bmi not_pressed	; BUG MAME, bit 7 not set ....
004F58  2               ;.endif
004F58  2  AD 21 0E     	lda PORT_A
004F5B  2  C5 rr        	cmp tmp
004F5D  2  F0 02        	beq pressed
004F5F  2               not_pressed:
004F5F  2  38           	sec
004F60  2  60           	rts
004F61  2               pressed:
004F61  2  18           	clc
004F62  2  60           	rts
004F63  2               
004F63  2               ;======================================================================
004F63  2               ; PRSKEY
004F63  2               ; Wait for keypress and release
004F63  2               ;======================================================================
004F63  2               
004F63  2               prskey:
004F63  2  2C 21 0E     	bit PORT_A
004F66  2  10 FB        	bpl prskey
004F68  2               relkey:
004F68  2  2C 21 0E     	bit PORT_A
004F6B  2  30 FB        	bmi relkey
004F6D  2  60           	rts
004F6E  2               
004F6E  2               ;======================================================================
004F6E  2               ; Sprite routines
004F6E  2               ;======================================================================
004F6E  2               
004F6E  2               ;-----------------------------------------------------------------
004F6E  2               ; These are the sprite routines.
004F6E  2               ; sspria = single sprite, old (ix).
004F6E  2               ; ssprib = single sprite, new (ix+5).
004F6E  2               ; sspric = both sprites, old (ix) and new (ix+5).
004F6E  2               ;-----------------------------------------------------------------
004F6E  2               
004F6E  2               sspria:
004F6E  2  20 89 32     	jsr gsprad		; get old sprite address.
004F71  2               sspri2:
004F71  2  A5 64        	lda z80_e
004F73  2  8D CA 4F     	sta dline1+1		; Set spritedata address
004F76  2  A5 65        	lda z80_d
004F78  2  8D CB 4F     	sta dline1+2
004F7B  2               
004F7B  2  86 rr        	stx xtmp
004F7D  2  A2 00        	ldx #0			; vertical lines.
004F7F  2               sspri0:
004F7F  2  20 C2 4F     	jsr dline		; draw a line.
004F82  2               
004F82  2               ;.if bflag
004F82  2               ;	cpx #16			; Detect end of line 3
004F82  2               ;.else
004F82  2  E0 14        	cpx #20			; Detect end of line 2
004F84  2               ;.endif
004F84  2               
004F84  2  D0 F9        	bne sspri0		; no, repeat
004F86  2  A6 rr        	ldx xtmp
004F88  2  60           	rts
004F89  2               
004F89  2               ;-----------------------------------------------------------------
004F89  2               ; ssprib = single sprite, new (ix).
004F89  2               ;-----------------------------------------------------------------
004F89  2               
004F89  2               ssprib:
004F89  2  20 6A 32     	jsr gspran 		; get new sprite address.
004F8C  2               				; z80_de = new sprite address
004F8C  2  4C 71 4F     	jmp sspri2
004F8F  2               
004F8F  2               ;-----------------------------------------------------------------
004F8F  2               ; sspric = erase old sprite and plot new sprite line by line
004F8F  2               ;-----------------------------------------------------------------
004F8F  2               
004F8F  2               sspric:
004F8F  2  20 89 32     	jsr gsprad 		; get old sprite address.
004F92  2               				; z80_de = old sprite address
004F92  2  A5 64        	lda z80_e
004F94  2  8D E3 4F     	sta ddline1+1		; Set spritedata address
004F97  2  A5 65        	lda z80_d
004F99  2  8D E4 4F     	sta ddline1+2
004F9C  2  20 08 50     	jsr exx  		; store addresses.
004F9F  2               
004F9F  2  20 6A 32     	jsr gspran 		; get new sprite addresses.
004FA2  2               				; z80_de = old sprite address
004FA2  2  A5 64        	lda z80_e
004FA4  2  8D CA 4F     	sta dline1+1		; Set spritedata address
004FA7  2  A5 65        	lda z80_d
004FA9  2  8D CB 4F     	sta dline1+2
004FAC  2               
004FAC  2  86 rr        	stx xtmp
004FAE  2  A2 00        	ldx #0			; vertical lines.
004FB0  2               lloop:
004FB0  2  20 C2 4F     	jsr dline 		; draw a line.
004FB3  2  CA           	dex
004FB4  2  CA           	dex
004FB5  2  CA           	dex
004FB6  2  CA           	dex
004FB7  2  CA           	dex
004FB8  2  20 DB 4F     	jsr ddline 		; delete a line.
004FBB  2               
004FBB  2               ;.if bflag
004FBB  2               ;	cpx #16			; Detect end of line 3
004FBB  2               ;.else
004FBB  2  E0 14        	cpx #20			; Detect end of line 2
004FBD  2               ;.endif
004FBD  2  D0 F1        	bne lloop		; no, repeat
004FBF  2  A6 rr        	ldx xtmp
004FC1  2  60           	rts
004FC2  2               
004FC2  2               ;-----------------------------------------------------------------
004FC2  2               ; Erase sprite line
004FC2  2               ;-----------------------------------------------------------------
004FC2  2               
004FC2  2               dline:
004FC2  2  BC F4 4F     	ldy sprline,x		; point to screenleft
004FC5  2               
004FC5  2  A9 05        	lda #5
004FC7  2  85 rr        	sta rrow
004FC9  2               dline1:
004FC9  2  BD DD 4A     	lda objdta,x		; fetch spriteleft byte
004FCC  2  F0 06        	beq :+
004FCE  2  51 rr        	eor (scraddr),y		; merge with screenleft
004FD0  2  09 20        	ora #$20		; Set bit 5
004FD2  2  91 rr        	sta (scraddr),y		; write screenleft
004FD4  2               :
004FD4  2  E8           	inx			; next spritebyte
004FD5  2  C8           	iny			; point to screenmiddle
004FD6  2               
004FD6  2  C6 rr        	dec rrow
004FD8  2  D0 EF        	bne dline1
004FDA  2  60           	rts
004FDB  2               
004FDB  2               ;-----------------------------------------------------------------
004FDB  2               ; Draw sprite line
004FDB  2               ;-----------------------------------------------------------------
004FDB  2               
004FDB  2               ddline:
004FDB  2  BC F4 4F     	ldy sprline,x		; point to screenleft
004FDE  2               
004FDE  2  A9 05        	lda #5
004FE0  2  85 rr        	sta rrow
004FE2  2               ddline1:
004FE2  2  BD DD 4A     	lda objdta,x		; fetch spriteleft byte
004FE5  2  F0 06        	beq :+
004FE7  2  51 72        	eor (z80_hlp),y		; merge with screenleft
004FE9  2  09 20        	ora #$20		; Set bit 5
004FEB  2  91 72        	sta (z80_hlp),y		; write spritedata0
004FED  2               :
004FED  2  E8           	inx			; next spritebyte
004FEE  2  C8           	iny			; point to screenmiddle
004FEF  2               
004FEF  2  C6 rr        	dec rrow
004FF1  2  D0 EF        	bne ddline1
004FF3  2  60           	rts
004FF4  2               
004FF4  2               ;-----------------------------------------------------------------
004FF4  2               ; Spritebyte location on screen
004FF4  2               ;-----------------------------------------------------------------
004FF4  2               
004FF4  2               sprline:
004FF4  2  00 01 02 03  	.byte $00,$01,$02,$03,$04
004FF8  2  04           
004FF9  2  28 29 2A 2B  	.byte $28,$29,$2a,$2b,$2c
004FFD  2  2C           
004FFE  2  50 51 52 53  	.byte $50,$51,$52,$53,$54
005002  2  54           
005003  2  78 79 7A 7B  	.byte $78,$79,$7a,$7b,$7c
005007  2  7C           
005008  2               
005008  1               	.include "z80.asm"
005008  2               ;------------------------------------------------------
005008  2               ; z80.asm
005008  2               ; spectrum stuff
005008  2               ; adresses
005008  2               
005008  2               
005008  2               ; Contains seperatly 1 bit set
005008  2               
005008  2               _bitmem0	= $f8
005008  2               _bitmem1	= $f9
005008  2               _bitmem2	= $fa
005008  2               _bitmem3	= $fb
005008  2               _bitmem4	= $fc
005008  2               _bitmem5	= $fd
005008  2               _bitmem6	= $fe
005008  2               _bitmem7	= $ff
005008  2               
005008  2               ; constants
005008  2               _bitvalue0	= $01
005008  2               _bitvalue1	= $02
005008  2               _bitvalue2	= $04
005008  2               _bitvalue3	= $08
005008  2               _bitvalue4	= $10
005008  2               _bitvalue5	= $20
005008  2               _bitvalue6	= $40
005008  2               _bitvalue7	= $80
005008  2               
005008  2               _notbitvalue0	= $fe
005008  2               _notbitvalue1	= $fd
005008  2               _notbitvalue2	= $fb
005008  2               _notbitvalue3	= $f7
005008  2               _notbitvalue4	= $ef
005008  2               _notbitvalue5	= $df
005008  2               _notbitvalue6	= $bf
005008  2               _notbitvalue7	= $7f
005008  2               
005008  2               
005008  2               exx:
005008  2  A5 62        		lda z80_c
00500A  2  A4 6E        		ldy z80_cp
00500C  2  84 62        		sty z80_c
00500E  2  85 6E        		sta z80_cp
005010  2  A5 63        		lda z80_b
005012  2  A4 6F        		ldy z80_bp
005014  2  84 63        		sty z80_b
005016  2  85 6F        		sta z80_bp
005018  2  A5 64        		lda z80_e
00501A  2  A4 70        		ldy z80_ep
00501C  2  84 64        		sty z80_e
00501E  2  85 70        		sta z80_ep
005020  2  A5 65        		lda z80_d
005022  2  A4 71        		ldy z80_dp
005024  2  84 65        		sty z80_d
005026  2  85 71        		sta z80_dp
005028  2  A5 rr        		lda scraddr
00502A  2  A4 72        		ldy z80_lp
00502C  2  84 rr        		sty scraddr
00502E  2  85 72        		sta z80_lp
005030  2  A5 rr        		lda scraddr+1
005032  2  A4 73        		ldy z80_hp
005034  2  84 rr        		sty scraddr+1
005036  2  85 73        		sta z80_hp
005038  2  60           		rts
005039  2               
005039  2               
005039  1               eind_asm:
005039  1               eop:					; End Of Program
005039  1               
005039  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
005039  1               
