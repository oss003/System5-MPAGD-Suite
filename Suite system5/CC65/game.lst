ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 1 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "kcmunchkin.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 83 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  6D 3B        msgptr:		.word msgdat	; messages
002811  3  CA 3B        blkptr:		.word chgfx	; block graphics.
002813  3  D2 3B        proptr:		.word bprop	; address of char properties.
002815  3  D6 3B        sptptr:		.word sprgfx	; sprite graphics
002817  3  EE 41        frmptr:		.word frmlst	; sprite frames.
002819  3  FC 41        scrptr:		.word scdat	; address of screens.
00281B  3  FC 43        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  05 44        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3               ;txtcol:		.byte green,yellow,blue,red
00281F  3               
00281F  3               ; Don't change the order of these four.
00281F  3               ; Menu routine relies on winlft following wintop.
00281F  3               
00281F  3  00           wintop:		.byte WINDOWTOP	; top of window.
002820  3  01           winlft:		.byte WINDOWLFT	; left edge.
002821  3  19           winhgt:		.byte WINDOWHGT	; window height.
002822  3  27           winwid:		.byte WINDOWWID	; window width.
002823  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002824  3               
002824  3               ; Variables start here.
002824  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002824  3               
002824  3  00           wntopx:		.byte (3 * WINDOWTOP)
002825  3  02           wnlftx:		.byte (2 * WINDOWLFT)
002826  3  42           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
002827  3  46           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
002828  3               
002828  3               ; Assorted game routines which can go in contended memory.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for inventory called by the INV command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with objects seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected objectnr of INV menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if mflag
002828  3               minve:
002828  3               .if gflag
002828  3               	lda #$ff		; blue frontcolour
002828  3               	sta andeor
002828  3               	lda #$aa		; yellow backcoloour
002828  3               	sta andeor+1
002828  3               .endif
002828  3               	lda #<(invdis)		; routine address.
002828  3               	sta mod0+1		; set up menu routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(invdis)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               	lda #<(fopt)		; find option from available objects.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fopt)
002828  3               	sta mod1+1+1
002828  3               	jmp dbox		; do menu routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for menu called by the MENU command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with menu items seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected line nr of MENU menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               mmenu:
002828  3               	lda #<(always)		; routine address.
002828  3               	sta mod0+1		; set up routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(always)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               
002828  3               	lda #<(fstd)		; standard option selection.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fstd)
002828  3               	sta mod1+2
002828  3               
002828  3               ; Drop through into box routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Work out size of box for message or menu.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               dbox:
002828  3               	lda #<(msgdat)		; pointer to messages.
002828  3               	sta z80_l
002828  3               	lda #>(msgdat)
002828  3               	sta z80_h
002828  3               
002828  3               	jsr getwrd		; get message number.
002828  3               
002828  3               	lda z80_h		; store pointer to message.
002828  3               	sta TmpAddr
002828  3               	lda z80_l
002828  3               	sta TmpAddr+1
002828  3               
002828  3               	lda #1			; height.
002828  3               	sta z80_d
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               	sta z80_e		; maximum width.
002828  3               dbox5:
002828  3               	lda #0			; this line"s width.
002828  3               	sta z80_b
002828  3               mod2:
002828  3               	jsr always		; item in player"s possession?
002828  3               	cmp #255
002828  3               	bne dbox6		; not in inventory, skip this line.
002828  3               	inc z80_d		; add to tally.
002828  3               dbox6:
002828  3               	ldy #0			; get character.
002828  3               	lda (z80_hl),y
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a		; reached end of line?
002828  3               	cmp #','
002828  3               	beq dbox3		; yes.
002828  3               	cmp #13
002828  3               	beq dbox3		; yes.
002828  3               	inc z80_b		; add to this line"s width.
002828  3               	lda z80_a
002828  3               	bmi dbox4		; end of message? yes, end count.
002828  3               	jmp dbox6		; repeat until we find the end.
002828  3               dbox3:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox5		; no, carry on looking.
002828  3               	lda z80_b		; make this the widest so far.
002828  3               	sta z80_e
002828  3               	jmp dbox5		; keep looking.
002828  3               dbox4:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox8		; no, carry on looking.
002828  3               	lda z80_b		; final line is the longest so far.
002828  3               	sta z80_e
002828  3               dbox8:
002828  3               	dec z80_d		; decrement items found.
002828  3               	bne :+			; total was zero.
002828  3               	lda #255
002828  3               	sta varopt
002828  3               	jmp dbox15
002828  3               :
002828  3               	lda z80_e		; longest line.
002828  3               	bne :+			; was it zero?
002828  3               	jmp dbox15		; total was zero.
002828  3               :
002828  3               	sta bwid		; set up size.
002828  3               	lda z80_d
002828  3               	sta blen
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; That's set up our box size.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               	lda winhgt		; window height in characters.
002828  3               	sec
002828  3               	sbc z80_d		; subtract height of box.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc wintop		; add top edge of window.
002828  3               	sta btop		; set up box top.
002828  3               
002828  3               	lda winwid		; window width in characters.
002828  3               	sec
002828  3               	sbc z80_e		; subtract box width.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc winlft		; add left edge of window.
002828  3               	sta blft		; box left.
002828  3               
002828  3               	lda #<(FONT-256)		; font.
002828  3               	sta grbase		; set up for text display.
002828  3               	lda #>(FONT-256)
002828  3               	sta grbase+1
002828  3               
002828  3               	lda TmpAddr+1		; restore message pointer.
002828  3               	sta z80_l
002828  3               	lda TmpAddr
002828  3               	sta z80_h
002828  3               
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set display coordinate.
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               dbox2:
002828  3               	lda combyt		; get object number.
002828  3               	sta z80_a
002828  3               mod0:
002828  3               	jsr always		; check inventory for display.
002828  3               	cmp #255
002828  3               	beq :+
002828  3               	jmp dbox13		; not in inventory, skip this line.
002828  3               :
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set left display position.
002828  3               	lda bwid		; box width.
002828  3               	sta z80_b		; store width.
002828  3               
002828  3               	lda fcolour		; Set textcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               dbox0:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	cmp #','		; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               	cmp #13			; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               
002828  3               	cmp #141			; end of line?
002828  3               	bne :+
002828  3               	dec bwid
002828  3               	jmp dbox7		; yes, next one.
002828  3               :
002828  3               	dec z80_b		; one less to display.
002828  3               	and #127		; remove terminator.
002828  3               
002828  3               	jsr pchr		; display on screen.
002828  3               
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a
002828  3               	cmp #128		; end of message?
002828  3               	bmi :+
002828  3               	jsr dscor2
002828  3               	jmp dbox7		; yes, job done.
002828  3               :
002828  3               	lda z80_b		; chars remaining.
002828  3               	beq :+			; are any left?
002828  3               	jmp dbox0		; yes, continue.
002828  3               :
002828  3               ;---------------------------------------------------
002828  3               ; Reached limit of characters per line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dbox9:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #13			; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #128		; end of message?
002828  3               	bcs :+
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox9
002828  3               
002828  3               ;---------------------------------------------------
002828  3               ; Fill box to end of line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dboxf:
002828  3               	lda #32			; space character.
002828  3               	jsr pchr		; display character.
002828  3               	dec z80_b
002828  3               	beq :+
002828  3               	jmp dboxf		; repeat for remaining chars on line.
002828  3               :
002828  3               	rts
002828  3               dbox1:
002828  3               	inc z80_l		; skip character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	jsr dboxf		; fill box out to right side.
002828  3               dbox10:
002828  3               	inc dispy		; y coordinate down a line next position.
002828  3               	jmp dbox2		; next line.
002828  3               dbox7:
002828  3               	lda z80_b		; chars remaining.
002828  3               	bne :+			; are any left?
002828  3               	jmp dbox11		; no, nothing to draw.
002828  3               :
002828  3               	jsr dboxf		; fill message to line.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Drawn the box menu, now select option.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox11:
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set bar position.
002828  3               dbox14:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	bne dbox14		; yes, debounce it.
002828  3               	jsr dbar		; draw bar.
002828  3               dbox12:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	beq dbox12		; no, nothing.
002828  3               	and #16			; fire button pressed?
002828  3               	bne :+
002828  3               mod1:
002828  3               	jmp fstd		; yes, job done.
002828  3               :
002828  3               	jsr dbar		; delete bar.
002828  3               
002828  3               	lda joyval		; joystick reading.
002828  3               	and #8			; going up?
002828  3               	beq dboxu		; yes, go up.
002828  3               
002828  3               	ldx dispy		; vertical position of bar.
002828  3               	inx			; look down.
002828  3               	txa
002828  3               	sec
002828  3               	sbc btop		; find distance from top.
002828  3               	cmp blen		; top of box.
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	inc dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               dboxu:
002828  3               	lda dispy		; vertical position of bar.
002828  3               	cmp btop		; are we at the top?
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	dec dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               fstd:
002828  3               	lda dispy		; bar position.
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta varopt		; store the option.
002828  3               	jmp redraw		; redraw the screen.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Option not available.  Skip this line.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox13:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               	cmp #13			; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               
002828  3               	bpl :+			; end of message?
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox13
002828  3               dbox15:
002828  3               	lda TmpAddr		; pop message pointer from the stack.
002828  3               	sta z80_h
002828  3               	lda TmpAddr+1
002828  3               	sta z80_l
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Invert bar
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbar:
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set display coordinate.
002828  3               	jsr gprad		; get printing address.
002828  3               
002828  3               ;	lda bwid		; box width.
002828  3               ;	sta z80_c		; loop counter in c.
002828  3               ;	lda z80_h
002828  3               ;	sta z80_d		; store screen address high byte.
002828  3               ;dbar1:
002828  3               ;	ldx #7			; pixel height in b.
002828  3               ;dbar0:
002828  3               ;	ldy scrtab,x
002828  3               ;	lda (scraddr),y		; get screen byte.
002828  3               ;	eor #255		; reverse all bits.
002828  3               ;	sta (scraddr),y		; write back to screen.
002828  3               ;	dex			; next line down.
002828  3               ;	bpl dbar0		; draw rest of character.
002828  3               
002828  3               ;	inc scraddr		; one char right.
002828  3               ;	dec z80_c		; decrement character counter.
002828  3               ;	bne dbar1		; repeat for whole line.
002828  3               
002828  3               	ldy #0
002828  3               	lda (scraddr),y
002828  3               	eor #7
002828  3               	sta (scraddr),y
002828  3               
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Point to object
002828  3               ;
002828  3               ; Input:
002828  3               ;  combyt
002828  3               ;
002828  3               ; Output:
002828  3               ;  A = object number, A=255 if already in possession
002828  3               ;------------------------------------------------------
002828  3               
002828  3               invdis:
002828  3               	lda z80_l		; store message text pointer.
002828  3               	pha
002828  3               	lda z80_h
002828  3               	pha
002828  3               	lda combyt		; object number.
002828  3               	inc combyt		; ready for next one.
002828  3               	jsr gotob		; check if we have object.
002828  3               	tay
002828  3               	pla
002828  3               	sta z80_h
002828  3               	pla
002828  3               	sta z80_l
002828  3               	tya
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Find option selected.
002828  3               ;
002828  3               ; Input:
002828  3               ;  -
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected object
002828  3               ;------------------------------------------------------
002828  3               
002828  3               fopt:
002828  3               	lda dispy
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta tmp+2		; option selected in b register.
002828  3               	inc tmp+2
002828  3               
002828  3               	lda #0			; set to first item.
002828  3               	sta combyt		; object number.
002828  3               fopt0:
002828  3               	jsr fobj		; find next object in inventory.
002828  3               	dec tmp+2
002828  3               	bne fopt0		; repeat for relevant steps down the list.
002828  3               
002828  3               	lda combyt		; get option.
002828  3               	sta varopt		; store the option.
002828  3               	dec varopt		; one less, due to where we increment combyt.
002828  3               	jmp redraw		; redraw the screen.
002828  3               fobj:
002828  3               	ldy combyt		; object number.
002828  3               	inc combyt		; ready for next item.
002828  3               	tya
002828  3               	jsr gotob		; do we have this item?
002828  3               	cmp #255
002828  3               	bne :+
002828  3               	rts
002828  3               :
002828  3               	jmp fobj		; yes, it's on the list.
002828  3               .endif
002828  3               
002828  3               ;----------------------------------------------------
002828  3               ; Delay routine 1/50 sec
002828  3               ;
002828  3               ; Wait 1/60 sec = 16666 usec
002828  3               ; Wait 208 x 16 =  3328 usec
002828  3               ;                 19994 usec
002828  3               ; rts           =     6 usec
002828  3               ; Total         = 20000 usec
002828  3               ;----------------------------------------------------
002828  3               
002828  3               delay:
002828  3  85 rr        	sta xtmp
00282A  3               del_loop:
00282A  3  AD C0 47     	lda frames_passed	; Wait if not at 25Hz
00282D  3  C9 02        	cmp #2
00282F  3  90 F9        	bcc del_loop
002831  3  C6 rr        	dec xtmp
002833  3  D0 F5        	bne del_loop
002835  3  60           	rts
002836  3               
002836  3               ;----------------------------------------------------
002836  3               ; Clear sprite table.
002836  3               ;
002836  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002836  3               ;----------------------------------------------------
002836  3               
002836  3               xspr:
002836  3  A9 FF        	lda #255		; clear byte.
002838  3  A2 00        	ldx #0			; length of table.
00283A  3               xspr0:
00283A  3  9D 92 37     	sta sprtab,x		; sprite table.
00283D  3  E8           	inx			; move to next byte.
00283E  3  E0 CC        	cpx #SPRBUF
002840  3  D0 F8        	bne xspr0		; repeat for rest of table.
002842  3  60           	rts
002843  3               
002843  3               ;-------------------------------------------------------------
002843  3               ; Initialise all objects.
002843  3               ;
002843  3               ; Reset current room,y,x to start room,y,x for all objects
002843  3               ;-------------------------------------------------------------
002843  3               
002843  3               .if oflag
002843  3               iniob:
002843  3               	lda #<objdta 		; objects table.
002843  3               	sta z80_x
002843  3               	lda #>objdta
002843  3               	sta z80_i
002843  3               
002843  3               	ldx numob 		; number of objects in the game.
002843  3               iniob0:
002843  3               	ldy #35
002843  3               	lda (z80_ix),y 		; start screen.
002843  3               	ldy #32
002843  3               	sta (z80_ix),y 		; set start screen.
002843  3               
002843  3               	ldy #36
002843  3               	lda (z80_ix),y 		; find start y.
002843  3               	ldy #33
002843  3               	sta (z80_ix),y 		; set start y.
002843  3               
002843  3               	ldy #37
002843  3               	lda (z80_ix),y 		; get initial x.
002843  3               	ldy #34
002843  3               	sta (z80_ix),y 		; set x coord.
002843  3               
002843  3               	clc 			; point to next object.
002843  3               	lda z80_x
002843  3               	adc #38			; distance between objects.
002843  3               	sta z80_x
002843  3               	bcc :+
002843  3               	inc z80_i
002843  3               :
002843  3               	dex 			; repeat.
002843  3               	bne iniob0
002843  3               
002843  3               	rts
002843  3               .endif
002843  3               
002843  3               ;-----------------------------------------------
002843  3               ; Redraw the screen.
002843  3               ;
002843  3               ; Remove old copy of all sprites for redraw.
002843  3               ;-----------------------------------------------
002843  3               
002843  3               redraw:
002843  3               .if gflag
002843  3               	lda #$ff
002843  3               	sta andeor
002843  3               	lda #$00
002843  3               	sta andeor+1
002843  3               .endif
002843  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002845  3  48           	pha
002846  3  A5 68        	lda z80_x
002848  3  48           	pha
002849  3               
002849  3  20 18 2D     	jsr droom		; show screen layout.
00284C  3               .if oflag
00284C  3               	jsr shwob		; draw objects.
00284C  3               .endif
00284C  3               numsp0:
00284C  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00284E  3  85 rr        	sta tmp
002850  3               
002850  3  A9 92        	lda #<sprtab		; sprite table.
002852  3  85 68        	sta z80_x
002854  3  A9 37        	lda #>sprtab
002856  3  85 69        	sta z80_i
002858  3               redrw0:
002858  3  A0 00        	ldy #0
00285A  3  B1 68        	lda (z80_ix),y		; old sprite type.
00285C  3  C9 FF        	cmp #255		; is it enabled?
00285E  3  F0 0B        	beq redrw1 		; no, find next one.
002860  3               
002860  3  A0 03        	ldy #3
002862  3  B1 68        	lda (z80_ix),y 		; sprite y.
002864  3  C9 B1        	cmp #177		; beyond maximum?
002866  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002868  3               
002868  3  20 4D 48     	jsr sspria		; show single sprite.
00286B  3               redrw1:
00286B  3  18           	clc			; next sprite.
00286C  3  A5 68        	lda z80_x
00286E  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
002870  3  85 68        	sta z80_x
002872  3  90 02        	bcc :+
002874  3  E6 69        	inc z80_i
002876  3               :
002876  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002878  3  D0 DE        	bne redrw0
00287A  3               rpblc1:
00287A  3               ;	jsr dshrp		; redraw shrapnel.
00287A  3               
00287A  3               .if aflag
00287A  3               	jsr rbloc		; draw blocks for this screen
00287A  3               .endif
00287A  3  68           	pla			; retrieve sprite pointer.
00287B  3  85 68        	sta z80_x
00287D  3  68           	pla
00287E  3  85 69        	sta z80_i
002880  3               
002880  3  60           	rts
002881  3               
002881  3               ;----------------------------------------------------------------------
002881  3               ; Atomic palette is static
002881  3               ;----------------------------------------------------------------------
002881  3               
002881  3               setpal:
002881  3  60           	rts
002882  3               
002882  3               ;----------------------------------------------------------------------
002882  3               ; FODDER check
002882  3               ;----------------------------------------------------------------------
002882  3               
002882  3               .if pflag .or dflag
002882  3               fdchk:
002882  3               	cmp #FODDER 		; is it fodder?
002882  3               	beq :+
002882  3               	rts 			; no.
002882  3               :
002882  3               	lda #0			; wipe fodder in MAP
002882  3               	ldy #0
002882  3               	sta (bufaddr),y 	; rewrite block type.
002882  3               
002882  3               	lda dispx		; x=x/8
002882  3               	pha
002882  3               	lsr a
002882  3               	lsr a
002882  3               	lsr a
002882  3               	sta dispx
002882  3               
002882  3               	lda dispy		; y=y/8
002882  3               	pha
002882  3               	lsr a
002882  3               	lsr a
002882  3               	lsr a
002882  3               	sta dispy
002882  3               
002882  3               	lda #0 			; block to write.
002882  3               	jsr pattr 		; write block.
002882  3               
002882  3               	pla
002882  3               	sta dispy
002882  3               	pla
002882  3               	sta dispx
002882  3               	rts
002882  3               .endif
002882  3               
002882  3               ;----------------------------------------------------
002882  3               ; Scrolly text and puzzle variables.
002882  3               ;----------------------------------------------------
002882  3               
002882  3               .if sflag
002882  3               txtbit:	.byte 128		; bit to write.
002882  3               txtwid:	.byte 16		; width of ticker message.
002882  3               txtpos:	.word msgdat
002882  3               txtini:	.word msgdat
002882  3               txtscr:	.word ScreenAddr
002882  3               .endif
002882  3               
002882  3               ;----------------------------------------------------
002882  3               ; Specialist routines.
002882  3               ; Process shrapnel.
002882  3               ;----------------------------------------------------
002882  3               proshr:
002882  3               .if pflag
002882  3               	lda #<SHRAPN		; table.
002882  3               	sta z80_x
002882  3               	lda #>SHRAPN
002882  3               	sta z80_i
002882  3               
002882  3               	lda #NUMSHR		; shrapnel pieces to process.
002882  3               	sta shrctr
002882  3               prosh0:
002882  3               	ldy #0
002882  3               	lda (z80_ix),y		; on/off marker.
002882  3               	asl a
002882  3               proshx:
002882  3               	bcs :+
002882  3               	jsr prosh1 		; on, so process it.
002882  3               :
002882  3               	clc
002882  3               	lda z80_x
002882  3               	adc #SHRSIZ
002882  3               	sta z80_x
002882  3               	bcc :+
002882  3               	inc z80_i
002882  3               :
002882  3               	dec shrctr		; round again.
002882  3               	bne prosh0
002882  3               .endif
002882  3               .if sflag
002882  3               	jsr scrly
002882  3               .endif
002882  3  60           	rts
002883  3               
002883  3               .if pflag
002883  3               ;shrctr:	.byte 0
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Proces shrapnel piece
002883  3               ;----------------------------------------------------
002883  3               
002883  3               prosh1:
002883  3               	jsr plot 		; delete the pixel.
002883  3               
002883  3               	lda #<shrptr		; shrapnel routine pointers.
002883  3               	sta z80_l
002883  3               	lda #>shrptr
002883  3               	sta z80_h
002883  3               
002883  3               	ldy #0
002883  3               	lda (z80_ix),y		; restore shrapnel type.
002883  3               	jsr prosh2 		; run the routine.
002883  3               	jsr chkxy		; check x and y are good before we redisplay.
002883  3               
002883  3               	lda #<SHRSIZ 		; distance to next.
002883  3               	sta z80_e
002883  3               	lda #>SHRSIZ
002883  3               	sta z80_d
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Run the routine
002883  3               ;----------------------------------------------------
002883  3               
002883  3               prosh2:
002883  3               	asl a 			; 2 bytes per address.
002883  3               	tay
002883  3               	lda shrptr,y
002883  3               	sta z80_l
002883  3               	lda shrptr+1,y 		; fetch high byte from table.
002883  3               	sta z80_h
002883  3               	jmp (z80_hl) 		; jump to routine.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Paricle routine table
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shrptr:	.word laser		; laser.
002883  3               	.word trail		; vapour trail.
002883  3               	.word shrap		; shrapnel from explosion.
002883  3               	.word dotl		; horizontal starfield left.
002883  3               	.word dotr		; horizontal starfield right.
002883  3               	.word dotu		; vertical starfield up.
002883  3               	.word dotd		; vertical starfield down.
002883  3               	.word ptcusr		; user particle.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Explosion shrapnel.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shrap:
002883  3               	ldy #1
002883  3               	lda (z80_ix),y 		; get the angle.
002883  3               	clc
002883  3               	adc #<shrsin		; shrapnel sine table.
002883  3               	sta z80_l
002883  3               	lda #>shrsin
002883  3               	adc #0
002883  3               	sta z80_h
002883  3               
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; fetch value from table.
002883  3               	sta z80_e
002883  3               	inc z80_l 		; next byte of table.
002883  3               	bne :+
002883  3               	inc z80_h
002883  3               :
002883  3               	ldy #0
002883  3               	lda (z80_hl),y		; fetch value from table.
002883  3               	sta z80_d
002883  3               	inc z80_l		; next byte of table.
002883  3               	bne :+
002883  3               	inc z80_h
002883  3               :
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; fetch value from table.
002883  3               	sta z80_c
002883  3               	inc z80_l 		; next byte of table.
002883  3               	bne :+
002883  3               	inc z80_h
002883  3               :
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; fetch value from table.
002883  3               	sta z80_b
002883  3               
002883  3               	ldy #2
002883  3               	lda (z80_ix),y 		; x coordinate in hl.
002883  3               	clc
002883  3               	adc z80_e		; add sine lb
002883  3               	sta (z80_ix),y		; store new coordinate lb.
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	adc z80_d		; add sine hb
002883  3               	sta (z80_ix),y		; store new coordinate hb.
002883  3               
002883  3               	ldy #4
002883  3               	lda (z80_ix),y	 	; y coordinate in hl.
002883  3               	clc
002883  3               	adc z80_c		; add cosine lb
002883  3               	sta (z80_ix),y		; store new coordinate lb.
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	adc z80_b		; add cosine lb
002883  3               	sta (z80_ix),y		; store new coordinate hb.
002883  3               
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Move dots
002883  3               ;----------------------------------------------------
002883  3               
002883  3               dotl:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1		 	; move left.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               dotr:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1		 	; move left.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               dotu:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1		 	; move up.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               dotd:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1			; move down.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Check if coordinates are ok before redrawing at new position.
002883  3               ;
002883  3               ; left:   X>L		X=L	Ok
002883  3               ; right:  R+15>X	X=R	Ok
002883  3               ; top:    Y>T		Y=T	Ok
002883  3               ; bottom: B+15>Y	Y=B	Ok
002883  3               ;----------------------------------------------------
002883  3               
002883  3               chkxy:
002883  3               
002883  3               ; top:    Y>T		Y=T	Ok
002883  3               
002883  3               	ldy #3
002883  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	cmp wntopx		; window top.
002883  3               	bcs :+			; compare with top window limit.
002883  3               	jmp kilshr		; out of window, kill shrapnel.
002883  3               :
002883  3               ; left:   X>L		X=L	Ok
002883  3               
002883  3               	ldy #5
002883  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	cmp wnlftx		; left edge.
002883  3               	bcs :+			; compare with left window limit.
002883  3               	jmp kilshr		; out of window, kill shrapnel.
002883  3               :
002883  3               ; bottom: B+15>Y	Y=B	Ok
002883  3               
002883  3               	lda wnbotx		; point to bottom.
002883  3               	clc
002883  3               	adc #15
002883  3               	ldy #3
002883  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	bcs :+			; compare with shrapnel x coordinate.
002883  3               	jmp kilshr		; off screen, kill shrapnel..
002883  3               :
002883  3               ; right:  R+15>X	X=R	Ok
002883  3               
002883  3               	lda wnrgtx		; point to right edge.
002883  3               	clc
002883  3               	adc #15
002883  3               	ldy #5
002883  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	bcs :+			; compare with window limit.
002883  3               	jmp kilshr		; off screen, kill shrapnel.
002883  3               :
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Drop through.
002883  3               ; Display shrapnel.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               plot:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y		; y integer.
002883  3               	sta dispy	 	; workspace coordinates.
002883  3               	ldy #5
002883  3               	lda (z80_ix),y	 	; x integer.
002883  3               	sta dispx 		; workspace coordinates.
002883  3               
002883  3               	ldy #0
002883  3               	lda (z80_ix),y 		; type.
002883  3               	bne :+			; is it a laser?
002883  3               	jmp plot1 		; yes, draw laser instead.
002883  3               :
002883  3               plot0:
002883  3               	lda dispx		; which pixel within byte do we
002883  3               	and #7			; want to set first?
002883  3               	tay
002883  3               	lda dots,y 		; table of small pixel positions.
002883  3               	sta z80_e 		; get value.
002883  3               
002883  3               	jsr scadd 		; screen address.
002883  3               	ldy #0
002883  3               	lda (scraddr),y		; see what's already there.
002883  3               	eor z80_e
002883  3               	sta (scraddr),y 	; put back on screen.
002883  3               	rts
002883  3               
002883  3               plot1:
002883  3               	jsr scadd 		; screen address.
002883  3               	ldy #0
002883  3               	lda (scraddr),y 	; fetch byte there.
002883  3               	eor #255 		; toggle all bits.
002883  3               	sta (scraddr),y 	; new byte.
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Switch off shrapnel
002883  3               ;----------------------------------------------------
002883  3               
002883  3               kilshr:
002883  3               	lda #128
002883  3               	ldy #0
002883  3               	sta (z80_ix),y	; switch off shrapnel.
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Sine/cosine table
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shrsin:	.word 0,1024,391,946,724,724,946,391
002883  3               	.word 1024,0,946,65144,724,64811,391,64589
002883  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
002883  3               	.word 64512,0,64589,391,64811,724,65144,946
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create trail
002883  3               ;----------------------------------------------------
002883  3               
002883  3               trail:
002883  3               	ldy #1
002883  3               	lda (z80_ix),y 	; time remaining.
002883  3               	sec
002883  3               	sbc #1
002883  3               	sta (z80_ix),y
002883  3               	bne :+
002883  3               	jmp trailk		; time to switch it off.
002883  3               :
002883  3               	jsr qrand		; get a random number.
002883  3               	lsr a 			; x or y axis?
002883  3               	bcc :+
002883  3               	jmp trailv		; use y.
002883  3               :
002883  3               ; Trail horizontal
002883  3               
002883  3               	lsr a 			; which direction?
002883  3               	bcc :+
002883  3               	jmp traill		; go left.
002883  3               :
002883  3               ; Trail right
002883  3               
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1	 		; go right.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Trail left
002883  3               
002883  3               traill:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1 			; go left.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Trail vertical
002883  3               
002883  3               trailv:
002883  3               	lsr a		 	; which direction?
002883  3               	bcc :+
002883  3               	jmp trailu		; go up.
002883  3               :
002883  3               ; Trail down
002883  3               
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1 			; go down.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Trail up
002883  3               
002883  3               trailu:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1 			; go up.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Kill trail
002883  3               
002883  3               trailk:
002883  3               	lda #200		; set off-screen to kill vapour trail.
002883  3               	ldy #3
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create laser beam
002883  3               ;----------------------------------------------------
002883  3               
002883  3               laser:
002883  3               	ldy #1
002883  3               	lda (z80_ix),y 		; direction.
002883  3               	ror a 			; left or right?
002883  3               	bcs :+
002883  3               	jmp laserl		; move left.
002883  3               :
002883  3               ; Laser right
002883  3               
002883  3               	lda #8			; distance to travel.
002883  3               	sta z80_b
002883  3               	jmp laserm		; move laser.
002883  3               
002883  3               ; Laser left
002883  3               
002883  3               laserl:
002883  3               	lda #248		; distance to travel.
002883  3               	sta z80_b
002883  3               laserm:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y		; x position.
002883  3               	clc
002883  3               	adc z80_b		; add distance.
002883  3               	sta (z80_ix),y		; set new x coordinate.
002883  3               
002883  3               ; Test new block.
002883  3               
002883  3               	sta dispx 		; set x for block collision detection purposes.
002883  3               	ldy #3
002883  3               	lda (z80_ix),y 		; get y.
002883  3               	sta dispy		; set coordinate for collision test.
002883  3               	jsr tstbl 		; get block type there.
002883  3               	cmp #WALL		; is it solid?
002883  3               	bne :+
002883  3               	jmp trailk		; yes, it cannot pass.
002883  3               :
002883  3               .if pflag .or dflag
002883  3                       cmp #FODDER             ; is it fodder?
002883  3                       bne :+
002883  3                       jsr fdchk               ; remove fodder block.
002883  3                       jmp trailk              ; destroy laser.
002883  3               :
002883  3               .endif
002883  3                       rts                     ; no, ignore it.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Dots mask
002883  3               ;----------------------------------------------------
002883  3               
002883  3               dots:	.byte 128,64,32,16,8,4,2,1
002883  3               
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Plot, preserving de.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               plotde:
002883  3               	lda z80_d 		; put de on stack.
002883  3               	pha
002883  3               	lda z80_e
002883  3               	pha
002883  3               
002883  3               	jsr plot 		; plot pixel.
002883  3               
002883  3               	pla			; restore de from stack.
002883  3               	sta z80_e
002883  3               	pla
002883  3               	sta z80_d
002883  3               
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Shoot a laser.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shoot:
002883  3               	sta z80_c		; store direction in c register.
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	clc
002883  3               shoot1:
002883  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
002883  3               	sta z80_l 		; puty y coordinate in l.
002883  3               
002883  3               	ldy #9
002883  3               	lda (z80_ix),y 		; x coordinate in h.
002883  3               	sta z80_h
002883  3               
002883  3               	lda z80_i		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcs :+
002883  3               	jmp vapou2		; failed, restore ix.
002883  3               :
002883  3               	lda #0
002883  3               	ldy #0
002883  3               	sta (z80_ix),y 		; set up a laser.
002883  3               
002883  3               	lda z80_c
002883  3               	ldy #1
002883  3               	sta (z80_ix),y 		; set the direction.
002883  3               
002883  3               	lda z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; set y coordinate.
002883  3               
002883  3               	ror z80_c		; check direction we want.
002883  3               	bcc :+
002883  3               	jmp shootr		; shoot right.
002883  3               :
002883  3               	lda z80_h		; X position.
002883  3               shoot0:
002883  3               	and #248		; align on character boundary.
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; set x coordinate.
002883  3               	jmp vapou0 		; draw first image.
002883  3               shootr:
002883  3               	lda z80_h		; x position.
002883  3               	clc
002883  3               	adc #15			; look right.
002883  3               	jmp shoot0		; align and continue.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create a bit of vapour trail.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               vapour:
002883  3               	lda z80_i		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	clc
002883  3               vapou3:
002883  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
002883  3               	sta z80_l
002883  3               
002883  3               	ldy #9
002883  3               	lda (z80_ix),y 		; x coordinate.
002883  3               	adc #7
002883  3               	sta z80_h
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcc :+
002883  3               	jmp vapou1		; no, we can use it.
002883  3               :
002883  3               vapou2:
002883  3               	pla
002883  3               	sta z80_x
002883  3               	pla
002883  3               	sta z80_i
002883  3               	rts
002883  3               vapou1:
002883  3               	lda z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; set up y.
002883  3               
002883  3               	lda z80_h
002883  3               	ldy #5
002883  3               	sta (z80_ix),y 		; set up x coordinate.
002883  3               
002883  3               	jsr qrand		; get quick random number.
002883  3               	and #15			; random time.
002883  3               	clc
002883  3               	adc #15			; minimum time on screen.
002883  3               	ldy #1
002883  3               	sta (z80_ix),y		; set time on screen.
002883  3               
002883  3               	lda #1
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; define particle as vapour trail.
002883  3               vapou0:
002883  3               	jsr chkxy		; plot first position.
002883  3               	jmp vapou2
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create a user particle.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               ptusr:
002883  3               	sta z80_f		; store timer.
002883  3               
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	clc
002883  3               	adc #7			; mid-point of sprite.
002883  3               	sta z80_l
002883  3               
002883  3               	ldy #9
002883  3               	lda (z80_ix),y 		; x coordinate.
002883  3               	clc
002883  3               	adc #7			; mid-point of sprite.
002883  3               	sta z80_h
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcs ptusr1
002883  3               	rts 			; out of slots, can't generate anything.
002883  3               ptusr1:
002883  3               	lda z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y 		; set up y.
002883  3               
002883  3               	lda z80_h
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; set up x coordinate.
002883  3               
002883  3               	lda z80_f 		; restore timer.
002883  3               	ldy #1
002883  3               	sta (z80_ix),y		; set time on screen.
002883  3               
002883  3               	lda #7
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; define particle as user particle.
002883  3               
002883  3               	jmp chkxy		; plot first position.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create a vertical or horizontal star.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               star:
002883  3               	lda z80_i		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcs star7		; found one we can use.
002883  3               star0:
002883  3               	pla 			; restore sprite pointer.
002883  3               	sta z80_x
002883  3               	pla
002883  3               	sta z80_i
002883  3               	rts 			; out of slots, can't generate anything.
002883  3               star7:
002883  3               	lda z80_c		; direction.
002883  3               	and #3 			; is it left?
002883  3               	bne :+
002883  3               	jmp star1 		; yes, it's left.
002883  3               :
002883  3               	cmp #1 			; is it right?
002883  3               	bne :+
002883  3               	jmp star2 		; yes, it's right.
002883  3               :
002883  3               	cmp #2 			; is it up?
002883  3               	bne :+
002883  3               	jmp star3 		; yes, it's up.
002883  3               :
002883  3               	ldy wntopx 		; get edge of screen.
002883  3               	iny			; down one pixel.
002883  3               	tya
002883  3               star8:
002883  3               	ldy #3
002883  3               	sta (z80_ix),y 		; set y coord.
002883  3               	jsr qrand 		; get quick random number.
002883  3               star9:
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; set x position.
002883  3               
002883  3               	lda z80_c		; direction.
002883  3               	and #3			; zero to three.
002883  3               	clc
002883  3               	adc #3			; 3 to 6 for starfield.
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; define particle as star.
002883  3               	jsr chkxy		; plot first position.
002883  3               	jmp star0
002883  3               star1:
002883  3               	jsr qrand		; get quick random number.
002883  3               	ldy #3
002883  3               	sta (z80_ix),y 		; set y coord.
002883  3               
002883  3               	lda wnrgtx 		; get edge of screen.
002883  3               	clc
002883  3               	adc #15			; add width of sprite minus 1.
002883  3               	jmp star9
002883  3               star2:
002883  3               	jsr qrand 		; get quick random number.
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; set y coord.
002883  3               
002883  3               	lda wnlftx		; get edge of screen.
002883  3               	jmp star9
002883  3               star3:
002883  3               	lda wnbotx 		; get edge of screen.
002883  3               	clc
002883  3               	adc #15 		; height of sprite minus one pixel.
002883  3               	jmp star8
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Find particle slot for lasers or vapour trail.
002883  3               ; can't use alternate accumulator.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               fpslot:
002883  3               	lda #<SHRAPN 		; shrapnel table.
002883  3               	sta z80_x
002883  3               	lda #>SHRAPN
002883  3               	sta z80_i
002883  3               
002883  3               	lda #NUMSHR		; number of pieces in table.
002883  3               	sta z80_b
002883  3               fpslt0:
002883  3               	ldy #0
002883  3               	lda (z80_ix),y		; get type.
002883  3               	asl a  			; is this slot in use?
002883  3               	bcc :+
002883  3               	rts			; no, we can use it.
002883  3               :
002883  3               	clc			; point to more shrapnel.
002883  3               	lda z80_x
002883  3               	adc #SHRSIZ
002883  3               	sta z80_x
002883  3               	bcc :+
002883  3               	inc z80_i
002883  3               :
002883  3               	dec z80_b		; repeat for all shrapnel.
002883  3               	bne fpslt0
002883  3               
002883  3               	clc
002883  3               	rts 			; out of slots, can't generate anything.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create an explosion at sprite position.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               explod:
002883  3               	sta z80_c 		; particles to create.
002883  3               
002883  3               	lda z80_i 		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	sta z80_l
002883  3               	ldy #9
002883  3               	lda (z80_ix),y		; x coordinate.
002883  3               	sta z80_h
002883  3               
002883  3               	lda #<SHRAPN		; shrapnel table.
002883  3               	sta z80_x
002883  3               	lda #>SHRAPN
002883  3               	sta z80_i
002883  3               
002883  3               	lda #NUMSHR		; number of pieces in table.
002883  3               	sta explcnt
002883  3               expld0:
002883  3               	ldy #0
002883  3               	lda (z80_ix),y		; get type.
002883  3               	asl a 			; is this slot in use?
002883  3               	bcs expld1		; no, we can use it.
002883  3               expld2:
002883  3               	clc
002883  3               	lda z80_x
002883  3               	adc #SHRSIZ
002883  3               	sta z80_x
002883  3               	bcc :+
002883  3               	inc z80_i
002883  3               :
002883  3               	dec explcnt		; repeat for all shrapnel.
002883  3               	bne expld0
002883  3               expld3:
002883  3               	pla			; restore sprite pointer.
002883  3               	sta z80_x
002883  3               	pla
002883  3               	sta z80_i
002883  3               	rts 			; out of slots, can't generate any more.
002883  3               
002883  3               expld1:
002883  3               	lda z80_c		; shrapnel counter.
002883  3               	and #15			; 0 to 15.
002883  3               	clc			; add to x.
002883  3               	adc z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; y coord.
002883  3               
002883  3               	lda seed3 		; crap random number.
002883  3               	and #15			; 0 to 15.
002883  3               	clc 			; add to y.
002883  3               	adc z80_h
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; x coord.
002883  3               
002883  3               	lda #2
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; switch it on.
002883  3               
002883  3               	jsr chkxy		; plot first position.
002883  3               	jsr qrand		; quick random angle.
002883  3               	and #60 		; keep within range.
002883  3               	ldy #1
002883  3               	sta (z80_ix),y		; angle.
002883  3               
002883  3               	dec z80_c		; one less piece of shrapnel to generate.
002883  3               	bne expld2 		; back to main explosion loop.
002883  3               	jmp expld3 		; restore sprite pointer and exit.
002883  3               
002883  3               ;explcnt:	.byte 0
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Quick random
002883  3               ;----------------------------------------------------
002883  3               
002883  3               qrand:
002883  3               	jsr random		; r register.
002883  3               	eor seed3		; combine with seed.
002883  3               	sta seed3 		; new seed.
002883  3               	rts
002883  3               
002883  3               ;seed3:	.byte 0
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Display all shrapnel.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               dshrp:
002883  3               	lda #<plotde		; display routine.
002883  3               	sta proshx+1
002883  3               	lda #>plotde
002883  3               	sta proshx+2
002883  3               	jsr proshr		; process shrapnel.
002883  3               
002883  3               	lda #<prosh1		; processing routine.
002883  3               	sta proshx+1
002883  3               	lda #>prosh1
002883  3               	sta proshx+2
002883  3               	rts
002883  3               
002883  3               ;------------------------------------------------------
002883  3               ; Particle engine.
002883  3               ;
002883  3               ; Init particle data for 55 particles in SHRAPN table.
002883  3               ; Every particle has 6 bytes.
002883  3               ;
002883  3               ; global:	-
002883  3               ; local:	x,y,hl
002883  3               ; calls:	-
002883  3               ;------------------------------------------------------
002883  3               
002883  3               inishr:
002883  3               	lda #<SHRAPN 		; table.
002883  3               	sta z80_l
002883  3               	lda #>SHRAPN
002883  3               	sta z80_h
002883  3               
002883  3               	ldy #0
002883  3               	ldx #NUMSHR		; shrapnel pieces to process.
002883  3               inish0:
002883  3               	lda #255 		; kill the shrapnel.
002883  3               	sta (z80_hl),y
002883  3               
002883  3               	clc 			; point there.
002883  3               	lda z80_l
002883  3               	adc #SHRSIZ		; distance to next.
002883  3               	sta z80_l
002883  3               	bcc :+
002883  3               	inc z80_h
002883  3               :
002883  3               	dex
002883  3               	bne inish0 		; round again.
002883  3               	rts
002883  3               
002883  3               ;------------------------------------------------------
002883  3               ; Check for collision between laser and sprite.
002883  3               ;------------------------------------------------------
002883  3               
002883  3               lcol:
002883  3               	lda #<SHRAPN		; shrapnel table.
002883  3               	sta z80_l
002883  3               	lda #>SHRAPN
002883  3               	sta z80_h
002883  3               
002883  3               	lda #NUMSHR		; number of pieces in table.
002883  3               	sta z80_b
002883  3               lcol0:
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; get type.
002883  3               	beq lcol1		; yes, check collision.
002883  3               lcol3:
002883  3               	clc			; point to more shrapnel.
002883  3               	lda z80_l
002883  3               	adc #SHRSIZ
002883  3               	sta z80_l
002883  3               	bcc :+
002883  3               	inc z80_h
002883  3               :
002883  3               	dec z80_b		; repeat for all shrapnel.
002883  3               	bne lcol0
002883  3               	rts 			; no collision, carry not set.
002883  3               lcol1:
002883  3               	ldy #3
002883  3               	lda (z80_hl),y		; get y.
002883  3               	sec
002883  3               	ldy #8
002883  3               	sbc (z80_ix),y		; subtract sprite y.
002883  3               lcolh:
002883  3               	cmp #SPR_HGT 		; within range?
002883  3               	bcc :+
002883  3               	jmp lcol2		; no, missed.
002883  3               :
002883  3               	ldy #5
002883  3               	lda (z80_hl),y 		; get x.
002883  3               	sec
002883  3               	ldy #9
002883  3               	sbc (z80_ix),y 		; subtract sprite y.
002883  3               	cmp #16			; within range?
002883  3               	bcs :+
002883  3               	jmp lcol4 		; yes, collision occurred.
002883  3               :
002883  3               lcol2:
002883  3               	jmp lcol3
002883  3               lcol4:
002883  3               	sec
002883  3               	rts 			; return with carry set for collision.
002883  3               .endif
002883  3               
002883  3               ;------------------------------------------------------
002883  3               ; Main game engine code starts here.
002883  3               ; After initialisation, mloop is the main loop
002883  3               ;------------------------------------------------------
002883  3               
002883  3               game:
002883  3               
002883  3               
002883  3               ; Init hardware and graphics mode
002883  3               
002883  3  20 37 47     	jsr init 		; Init hardware
002886  3               
002886  3               ; Init joystick
002886  3               
002886  3  20 2D 48     	jsr joyinit		; Init joystick
002889  3               
002889  3               rpblc2:
002889  3               .if pflag
002889  3               	jsr inishr 		; initialise particle engine.
002889  3               .endif
002889  3               evintr:
002889  3  20 13 3B     	jsr evnt12 		; call intro/menu event.
00288C  3               
00288C  3  A9 02        	lda #WALL 		; write default property.
00288E  3  A2 00        	ldx #0
002890  3               clrmap:
002890  3  9D 00 D8     	sta MAP,x 		; block properties.
002893  3  9D 00 D9     	sta MAP+256,x
002896  3  9D 00 DA     	sta MAP+512,x
002899  3  9D 00 DB     	sta MAP+768,x
00289C  3  E8           	inx			; next byte.
00289D  3  D0 F1        	bne clrmap
00289F  3               
00289F  3               .if oflag
00289F  3               	jsr iniob 		; initialise objects.
00289F  3               .endif
00289F  3  A9 00        	lda #0			; put zero in accumulator.
0028A1  3  85 rr        	sta gamwon		; reset game won flag.
0028A3  3               
0028A3  3  20 0E 2A     	jsr inisc 		; init the score.
0028A6  3               mapst:
0028A6  3  AD 8C 38     	lda stmap 		; start position on map.
0028A9  3  8D 6F 38     	sta roomtb		; set up position in table, if there is one.
0028AC  3               
0028AC  3               inipbl:
0028AC  3               .if aflag
0028AC  3               	lda #<eop		; reset blockpointer
0028AC  3               	sta pbptr
0028AC  3               	lda #>eop
0028AC  3               	sta pbptr+1
0028AC  3               .endif
0028AC  3               
0028AC  3  20 57 34     	jsr initsc 		; set up first screen.
0028AF  3               
0028AF  3  A9 5E        	lda #<ssprit 		; default to spare sprite in table.
0028B1  3  85 68        	sta z80_x
0028B3  3  A9 38        	lda #>ssprit
0028B5  3  85 69        	sta z80_i
0028B7  3               evini:
0028B7  3  20 21 3B     	jsr evnt13 		; initialisation.
0028BA  3               
0028BA  3               ; Two restarts.
0028BA  3               ; First restart - clear all sprites and initialise everything.
0028BA  3               
0028BA  3               rstrt:
0028BA  3  20 AE 29     	jsr rsevt 		; restart events.
0028BD  3  20 36 28     	jsr xspr 		; clear sprite table.
0028C0  3  20 C3 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028C3  3  20 4C 36     	jsr ispr 		; initialise sprite table.
0028C6  3               
0028C6  3  4C D5 28     	jmp rstrt0
0028C9  3               
0028C9  3               ; Second restart - clear all but player, and don't initialise him.
0028C9  3               
0028C9  3               rstrtn:
0028C9  3  20 AE 29     	jsr rsevt		; restart events.
0028CC  3  20 F0 35     	jsr nspr 		; clear all non-player sprites.
0028CF  3  20 C3 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028D2  3  20 89 36     	jsr kspr 		; initialise sprite table, no more players.
0028D5  3               
0028D5  3               ; Set up the player and/or enemy sprites.
0028D5  3               
0028D5  3               rstrt0:
0028D5  3  A9 00        	lda #0 			; zero in accumulator.
0028D7  3  85 rr        	sta nexlev 		; reset next level flag.
0028D9  3  85 rr        	sta restfl 		; reset restart flag.
0028DB  3  85 rr        	sta deadf 		; reset dead flag.
0028DD  3               
0028DD  3  20 18 2D     	jsr droom 		; show screen layout.
0028E0  3               
0028E0  3               rpblc0:
0028E0  3               .if pflag
0028E0  3               	jsr inishr 		; initialise particle engine.
0028E0  3               .endif
0028E0  3               .if aflag
0028E0  3               	jsr rbloc		; draw blocks for this screen
0028E0  3               .endif
0028E0  3               .if oflag
0028E0  3               	jsr shwob		; draw objects.
0028E0  3               .endif
0028E0  3               
0028E0  3  A9 92        	lda #<sprtab 		; address of sprite table, even sprites.
0028E2  3  85 68        	sta z80_x
0028E4  3  A9 37        	lda #>sprtab
0028E6  3  85 69        	sta z80_i
0028E8  3  20 07 32     	jsr dspr 		; display sprites.
0028EB  3               
0028EB  3  A9 A3        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0028ED  3  85 68        	sta z80_x
0028EF  3  A9 37        	lda #>(sprtab+TABSIZ)
0028F1  3  85 69        	sta z80_i
0028F3  3  20 07 32     	jsr dspr 		; display sprites.
0028F6  3               
0028F6  3               
0028F6  3               mloop:
0028F6  3  20 09 48     	jsr vsync 		; synchronise with display.
0028F9  3  A9 92        	lda #<sprtab 		; address of sprite table, even sprites.
0028FB  3  85 68        	sta z80_x
0028FD  3  A9 37        	lda #>sprtab
0028FF  3  85 69        	sta z80_i
002901  3  20 07 32     	jsr dspr 		; display even sprites.
002904  3               
002904  3               ;	jsr plsnd 		; play sounds.
002904  3               
002904  3  20 82 28     	jsr proshr
002907  3  A9 A3        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002909  3  85 68        	sta z80_x
00290B  3  A9 37        	lda #>(sprtab+TABSIZ)
00290D  3  85 69        	sta z80_i
00290F  3  20 07 32     	jsr dspr 		; display odd sprites.
002912  3               
002912  3  A9 5E        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002914  3  85 68        	sta z80_x
002916  3  A9 38        	lda #>(ssprit)
002918  3  85 69        	sta z80_i
00291A  3               evlp1:
00291A  3  20 EE 3A     	jsr evnt10 		; called once per main loop.
00291D  3               
00291D  3  20 85 31     	jsr pspr 		; process sprites.
002920  3               
002920  3               ; Main loop events.
002920  3               
002920  3  A9 5E        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002922  3  85 68        	sta z80_x
002924  3  A9 38        	lda #>ssprit
002926  3  85 69        	sta z80_i
002928  3               evlp2:
002928  3  20 12 3B     	jsr evnt11 		; called once per main loop.
00292B  3               bsortx:
00292B  3  20 FB 30     	jsr bsort 		; sort sprites.
00292E  3               
00292E  3  A5 rr        	lda nexlev		; finished level flag.
002930  3  F0 03        	beq :+
002932  3  4C 5A 29     	jmp newlev		; is set, go to next level.
002935  3               :
002935  3  A5 rr        	lda gamwon		; finished game flag.
002937  3  F0 03        	beq :+
002939  3  4C 69 29     	jmp evwon		; is set, finish the game.
00293C  3               :
00293C  3  A5 rr        	lda restfl 		; finished level flag.
00293E  3  C9 01        	cmp #1			; has it been set?
002940  3  D0 03        	bne :+
002942  3  4C BA 28     	jmp rstrt		; yes, go to next level.
002945  3               :
002945  3  C9 02        	cmp #2			; has it been set?
002947  3  D0 03        	bne :+
002949  3  4C C9 28     	jmp rstrtn		; yes, go to next level.
00294C  3               :
00294C  3  A5 rr        	lda deadf 		; dead flag.
00294E  3  F0 03        	beq :+
002950  3  4C 6F 29     	jmp pdead		; yes, player dead.
002953  3               :
002953  3               ; back to start of main loop.
002953  3               
002953  3  E6 rr        	inc frmno
002955  3  E6 rr        	inc clock
002957  3  4C F6 28     	jmp mloop		; switched to a jmp mloop during test mode.
00295A  3               
00295A  3               ;----------------------------------------------------------
00295A  3               ; Read blocks from list and update screen accordingly.
00295A  3               ;----------------------------------------------------------
00295A  3               
00295A  3               .if aflag
00295A  3               rbloc:
00295A  3               	lda #<eop		; reset temp blockpointer
00295A  3               	sta pbbuf
00295A  3               	lda #>eop
00295A  3               	sta pbbuf+1
00295A  3               
00295A  3               rbloc2:
00295A  3               	lda pbbuf			; check for last block
00295A  3               	cmp pbptr
00295A  3               	bne rbloc1
00295A  3               	lda pbbuf+1
00295A  3               	cmp pbptr+1
00295A  3               	bne rbloc1
00295A  3               	rts
00295A  3               rbloc1:
00295A  3               	ldy #0
00295A  3               	lda (pbbuf),y		; check if block for this scno
00295A  3               	cmp scno
00295A  3               	bne rbloc0		; if not, skip
00295A  3               	iny
00295A  3               	lda (pbbuf),y		; get y
00295A  3               	sta dispy
00295A  3               	iny
00295A  3               	lda (pbbuf),y		; get x
00295A  3               	sta dispx
00295A  3               	iny
00295A  3               	lda (pbbuf),y		; get blocknr
00295A  3               	jsr pattr2		; draw block
00295A  3               rbloc0:
00295A  3               	clc			; point to next block
00295A  3               	lda pbbuf
00295A  3               	adc #4
00295A  3               	sta pbbuf
00295A  3               	bcc rbloc2
00295A  3               	inc pbbuf+1
00295A  3               	jmp rbloc2
00295A  3               .endif
00295A  3               
00295A  3               ;----------------------------------------------------------
00295A  3               ; New level
00295A  3               ;----------------------------------------------------------
00295A  3               
00295A  3               newlev:
00295A  3  A5 rr        	lda scno 			; current screen.
00295C  3  18           	clc
00295D  3  69 01        	adc #1				; next screen.
00295F  3  CD FB 43     	cmp numsc			; total number of screens.
002962  3  B0 05        	bcs evwon			; yes, game finished.
002964  3  85 rr        	sta scno			; set new level number.
002966  3  4C BA 28     	jmp rstrt			; restart, clearing all aliens.
002969  3               
002969  3               evwon:
002969  3  20 51 3B     	jsr evnt18		 	; game completed.
00296C  3  4C 83 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00296F  3               
00296F  3               ;----------------------------------------------------------
00296F  3               ; Player dead.
00296F  3               ;----------------------------------------------------------
00296F  3               
00296F  3               pdead:
00296F  3  A9 00        	lda #0				; zeroise accumulator.
002971  3  85 rr        	sta deadf			; reset dead flag.
002973  3               evdie:
002973  3  20 27 3B     	jsr evnt16 			; death subroutine.
002976  3  A5 rr        	lda numlif			; number of lives.
002978  3  F0 03        	beq :+
00297A  3  4C BA 28     	jmp rstrt 			; restart game.
00297D  3               :
00297D  3               evfail:
00297D  3  20 28 3B     	jsr evnt17 			; failure event.
002980  3  4C 83 28     	jmp game			; restart game
002983  3               
002983  3               ;----------------------------------------------------------
002983  3               ; Tidy things up
002983  3               ;----------------------------------------------------------
002983  3               
002983  3               tidyup:
002983  3  A0 00        	ldy #0				; digits to check.
002985  3               tidyu2:
002985  3  B9 F7 2A     	lda score,y 			; get score digit.
002988  3  CD FD 2A     	cmp hiscor 			; are we larger than high score digit?
00298B  3  90 07        	bcc tidyu0			; high score is bigger.
00298D  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00298F  3  C8           	iny				; next digit of high score.
002990  3  C0 06        	cpy #6
002992  3  D0 F1        	bne tidyu2			; repeat for all digits
002994  3               tidyu0:
002994  3  A9 F7        	lda #<score			; return pointing to score.
002996  3  85 62        	sta z80_c
002998  3  A9 2A        	lda #>score
00299A  3  85 63        	sta z80_b
00299C  3  60           	rts
00299D  3               tidyu1:
00299D  3  A0 05        	ldy #5
00299F  3               tidyu3:
00299F  3  B9 F7 2A     	lda score,y			; score.
0029A2  3  99 FD 2A     	sta hiscor,y			; high score.
0029A5  3  88           	dey
0029A6  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029A8  3               evnewh:
0029A8  3  20 52 3B     	jsr evnt19			; new high score event.
0029AB  3  4C 94 29     	jmp tidyu0			; tidy up.
0029AE  3               
0029AE  3               ;--------------------------------------------------
0029AE  3               ; Restart event.
0029AE  3               ;--------------------------------------------------
0029AE  3               
0029AE  3               rsevt:
0029AE  3  A9 5E        	lda #<ssprit 			; default to spare element in table.
0029B0  3  85 68        	sta z80_x
0029B2  3  A9 38        	lda #>ssprit
0029B4  3  85 69        	sta z80_i
0029B6  3               evrs:
0029B6  3  4C 22 3B     	jmp evnt14	 		; call restart event.
0029B9  3               
0029B9  3               ;------------------------------------------------------------------
0029B9  3               ; Copy number passed in a to string position bc, right-justified.
0029B9  3               ;
0029B9  3               ; Input:
0029B9  3               ;  A  = number
0029B9  3               ;  BC = string address
0029B9  3               ;
0029B9  3               ; Output:
0029B9  3               ;  BC = string with number
0029B9  3               ;-----------------------------------------------------------------
0029B9  3               
0029B9  3               num2ch:
0029B9  3  85 65        	sta z80_d		; Save number
0029BB  3               
0029BB  3  A9 00        	lda #0
0029BD  3  85 rr        	sta flag
0029BF  3               numdg3:
0029BF  3  A2 64        	ldx #100		; hundreds column.
0029C1  3  86 64        	stx z80_e
0029C3  3  20 D3 29     	jsr numdg		; show digit.
0029C6  3               numdg2:
0029C6  3  A2 0A        	ldx #10			; tens column.
0029C8  3  86 64        	stx z80_e
0029CA  3  20 D3 29     	jsr numdg		; show digit.
0029CD  3               
0029CD  3  E6 rr        	inc flag
0029CF  3  A2 01        	ldx #1			; units column.
0029D1  3  86 64        	stx z80_e
0029D3  3               numdg:
0029D3  3  A9 30        	lda #48			; clear digit.
0029D5  3  85 61        	sta z80_a
0029D7  3               numdg1:
0029D7  3  A5 65        	lda z80_d
0029D9  3  C5 64        	cmp z80_e
0029DB  3  90 0E        	bcc numdg0		; nothing to show.
0029DD  3  38           	sec
0029DE  3  A5 65        	lda z80_d
0029E0  3  E5 64        	sbc z80_e		; subtract from column.
0029E2  3  85 65        	sta z80_d
0029E4  3  E6 61        	inc z80_a		; increment digit.
0029E6  3  E6 rr        	inc flag
0029E8  3  4C D7 29     	jmp numdg1		; repeat until column is zero.
0029EB  3               numdg0:
0029EB  3  A0 00        	ldy #0
0029ED  3  A5 61        	lda z80_a
0029EF  3  91 62        	sta (z80_bc),y		; write digit to buffer.
0029F1  3  A5 rr        	lda flag
0029F3  3  F0 06        	beq :+
0029F5  3  E6 62        	inc z80_c		; next buffer position.
0029F7  3  D0 02        	bne :+
0029F9  3  E6 63        	inc z80_b
0029FB  3               :
0029FB  3  60           	rts
0029FC  3               num2dd:
0029FC  3  85 65        	sta z80_d		; Save number
0029FE  3               
0029FE  3  A9 01        	lda #1
002A00  3  85 rr        	sta flag
002A02  3               
002A02  3  4C C6 29     	jmp numdg2
002A05  3               num2td:
002A05  3  85 65        	sta z80_d		; Save number
002A07  3               
002A07  3  A9 01        	lda #1
002A09  3  85 rr        	sta flag
002A0B  3  4C BF 29     	jmp numdg3
002A0E  3               
002A0E  3               ;flag:	.byte 0
002A0E  3               
002A0E  3               ;---------------------------------------------------------
002A0E  3               ; Reset score to "000000"
002A0E  3               ;---------------------------------------------------------
002A0E  3               
002A0E  3               inisc:
002A0E  3  A9 30        	lda #'0'
002A10  3  A2 05        	ldx #5			; digits to initialise.
002A12  3               inisc0:
002A12  3  9D F7 2A     	sta score,x 		; write zero digit.
002A15  3  CA           	dex			; next column.
002A16  3  10 FA        	bpl inisc0		; repeat for all digits.
002A18  3               
002A18  3  60           	rts
002A19  3               
002A19  3               ;-----------------------------------------------------
002A19  3               ; Multiply h by d and return in hl.
002A19  3               ;
002A19  3               ; Input:
002A19  3               ;  H = first number
002A19  3               ;  D = second number
002A19  3               ;
002A19  3               ; Output:
002A19  3               ;  HL = result H x D
002A19  3               ;-----------------------------------------------------
002A19  3               
002A19  3               imul:
002A19  3  A5 65        	lda z80_d		; HL = H * D
002A1B  3  85 64        	sta z80_e
002A1D  3  A5 67        	lda z80_h
002A1F  3  85 62        	sta z80_c		; make c first multiplier.
002A21  3               imul0:
002A21  3  A9 00        	lda #0			; zeroise total.
002A23  3  85 66        	sta z80_l
002A25  3  85 67        	sta z80_h
002A27  3               
002A27  3  A5 67        	lda z80_h
002A29  3  85 65        	sta z80_d		; zeroise high byte.
002A2B  3               
002A2B  3  A9 08        	lda #8			; repeat 8 times.
002A2D  3  85 63        	sta z80_b
002A2F  3               imul1:
002A2F  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A31  3  90 0E        	bcc imul2		; wasn't set.
002A33  3  18           	clc			; bit was set, so add de.
002A34  3  A5 66        	lda z80_l
002A36  3  65 64        	adc z80_e
002A38  3  85 66        	sta z80_l
002A3A  3  A5 67        	lda z80_h
002A3C  3  65 65        	adc z80_d
002A3E  3  85 67        	sta z80_h
002A40  3  18           	clc 			; reset carry.
002A41  3               imul2:
002A41  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A43  3  26 65        	rol z80_d
002A45  3  C6 63        	dec z80_b
002A47  3  D0 E6        	bne imul1		; repeat 8 times.
002A49  3               
002A49  3  60           	rts
002A4A  3               
002A4A  3               ;-----------------------------------------------
002A4A  3               ; Divide d by e and return in d, remainder in a.
002A4A  3               ;
002A4A  3               ; Input:
002A4A  3               ;  D = first number
002A4A  3               ;  E = second number
002A4A  3               ;
002A4A  3               ; Output:
002A4A  3               ;  D = result D/E
002A4A  3               ;  A = remainder
002A4A  3               ;-----------------------------------------------
002A4A  3               
002A4A  3               idiv:
002A4A  3  A9 00        	lda #0
002A4C  3  A0 08        	ldy #8		 	; bits to shift.
002A4E  3  06 65        	asl z80_d
002A50  3               idiv0:
002A50  3  2A           	rol a 			; multiply d by 2.
002A51  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A53  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A55  3  E5 64        	sbc z80_e		; subtract it.
002A57  3               idiv1:
002A57  3  26 65        	rol z80_d		; rotate into d.
002A59  3  88           	dey
002A5A  3  D0 F4        	bne idiv0		; repeat
002A5C  3  60           	rts
002A5D  3               
002A5D  3               ;---------------------------------------------------
002A5D  3               ; Play AY sound effect
002A5D  3               ;---------------------------------------------------
002A5D  3               
002A5D  3               plsnd:
002A5D  3  60           	rts
002A5E  3               
002A5E  3               ;---------------------------------------------------
002A5E  3               ; Objects handling.
002A5E  3               ; 32 bytes for image
002A5E  3               ; 3 for room, y and x
002A5E  3               ; 3 for starting room, y and x.
002A5E  3               ; 254 = disabled.
002A5E  3               ; 255 = object in player"s pockets.
002A5E  3               ;---------------------------------------------------
002A5E  3               
002A5E  3               ;---------------------------------------------------
002A5E  3               ; Show items present.
002A5E  3               ;---------------------------------------------------
002A5E  3               
002A5E  3               .if oflag
002A5E  3               shwob:
002A5E  3               	lda #<objdta 			; objects table.
002A5E  3               	sta z80_l
002A5E  3               	lda #>objdta
002A5E  3               	sta z80_h
002A5E  3               
002A5E  3               	lda numob 			; number of objects in the game.
002A5E  3               	sta sprcnt
002A5E  3               shwob0:
002A5E  3               	ldy #32 			; distance to room number.
002A5E  3               	lda (z80_hl),y 			; same as an item?
002A5E  3               	cmp scno 			; current location.
002A5E  3               	bne :+
002A5E  3               	jsr dobj 			; yes, display object.
002A5E  3               :
002A5E  3               	clc
002A5E  3               	lda z80_l
002A5E  3               	adc #38 			; distance to next item.
002A5E  3               	sta z80_l
002A5E  3               	lda z80_h
002A5E  3               	adc #0
002A5E  3               	sta z80_h	 		; point to it.
002A5E  3               	dec sprcnt
002A5E  3               	bne shwob0 			; repeat for others.
002A5E  3               	rts
002A5E  3               
002A5E  3               ;---------------------------------------------------
002A5E  3               ; Display object.
002A5E  3               ; hl must point to object's start address.
002A5E  3               ;
002A5E  3               ; Input:
002A5E  3               ;  HL = object address
002A5E  3               ;---------------------------------------------------
002A5E  3               
002A5E  3               dobj:
002A5E  3               	ldy #33
002A5E  3               	lda (z80_hl),y 			; point to y.
002A5E  3               	sta dispy
002A5E  3               	iny
002A5E  3               	lda (z80_hl),y 			; point to x.
002A5E  3               	sta dispx
002A5E  3               dobj1:
002A5E  3               	jmp sprite 			; draw this sprite.
002A5E  3               
002A5E  3               ;--------------------------------------
002A5E  3               ; Remove an object.
002A5E  3               ;
002A5E  3               ; Input:
002A5E  3               ;  A = object number
002A5E  3               ;--------------------------------------
002A5E  3               
002A5E  3               remob:
002A5E  3               	cmp numob			; number of objects in game.
002A5E  3               	bcc :+				; are we checking past the end?
002A5E  3               	rts				; yes, can't get non-existent item.
002A5E  3               :
002A5E  3               	pha				; remember object.
002A5E  3               	jsr getob			; pick it up if we haven't already got it.
002A5E  3               	pla				; retrieve object number.
002A5E  3               	jsr gotob			; get its address.
002A5E  3               	lda #254
002A5E  3               	ldy #32
002A5E  3               	sta (z80_hl),y			; remove it.
002A5E  3               	rts
002A5E  3               
002A5E  3               ;---------------------------------------------------
002A5E  3               ; Pick up object number held in the accumulator.
002A5E  3               ;
002A5E  3               ; Input:
002A5E  3               ;  A = object number
002A5E  3               ;---------------------------------------------------
002A5E  3               
002A5E  3               getob:
002A5E  3               	cmp numob 		; number of objects in game.
002A5E  3               	bcc :+			; are we checking past the end?
002A5E  3               	rts			; yes, can't get non-existent item.
002A5E  3               :
002A5E  3               	jsr gotob 		; check if we already have it.
002A5E  3               	cmp #255
002A5E  3               	bne :+
002A5E  3               	rts			; we already do.
002A5E  3               :
002A5E  3               	ldy #32
002A5E  3               	lda (z80_hl),y		; is it on this screen?
002A5E  3               	cmp scno 		; current screen.
002A5E  3               	bne getob0		; not on screen, so nothing to delete.
002A5E  3               
002A5E  3               	lda #255
002A5E  3               	sta (z80_hl),y		; pick it up.
002A5E  3               	iny 			; point to y coord.
002A5E  3               getob1:
002A5E  3               	ldy #33
002A5E  3               	lda (z80_hl),y		; y coord.
002A5E  3               	sta dispy
002A5E  3               	ldy #34
002A5E  3               	lda (z80_hl),y 		; x coord.
002A5E  3               	sta dispx
002A5E  3               	jmp dobj1 		; delete object sprite.
002A5E  3               getob0:
002A5E  3               	lda #255
002A5E  3               	sta (z80_hl),y 		; pick it up.
002A5E  3               	rts
002A5E  3               .endif
002A5E  3               
002A5E  3               ;-----------------------------------------------------------------
002A5E  3               ; Got object check.
002A5E  3               ; Call with object in accumulator, returns zero set if in pockets.
002A5E  3               ;
002A5E  3               ; Input:
002A5E  3               ;  A = object number
002A5E  3               ;-----------------------------------------------------------------
002A5E  3               .if oflag .or mflag
002A5E  3               gotob:
002A5E  3               	cmp numob 		; number of objects in game.
002A5E  3               	bcc :+ 			; are we checking past the end?
002A5E  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A5E  3               :
002A5E  3               	jsr findob		; find the object.
002A5E  3               gotob1:
002A5E  3               	rts
002A5E  3               
002A5E  3               gotob0:
002A5E  3               	lda #254 		; missing.
002A5E  3               	jmp gotob1
002A5E  3               
002A5E  3               findob:
002A5E  3               	pha			; save object number
002A5E  3               	lda #<objdta 		; objects.
002A5E  3               	sta z80_l
002A5E  3               	lda #>objdta
002A5E  3               	sta z80_h
002A5E  3               	pla			; retreive object number
002A5E  3               	beq fndob1 		; is it zero? yes, skip loop.
002A5E  3               	tax 			; loop counter
002A5E  3               fndob2:
002A5E  3               	clc
002A5E  3               	lda z80_l
002A5E  3               	adc #38 		; size of each object.
002A5E  3               	sta z80_l
002A5E  3               	bcc :+
002A5E  3               	inc z80_h
002A5E  3               :
002A5E  3               	dex 			; repeat until we find address.
002A5E  3               	bne fndob2
002A5E  3               fndob1:
002A5E  3               	ldy #32			; distance to room it's in.
002A5E  3               	lda (z80_hl),y		; fetch status.
002A5E  3               	rts
002A5E  3               .endif
002A5E  3               
002A5E  3               ;---------------------------------------------
002A5E  3               ; Drop object number at (dispx, dispy).
002A5E  3               ;
002A5E  3               ; Input:
002A5E  3               ;  A = object number
002A5E  3               ;---------------------------------------------
002A5E  3               
002A5E  3               .if oflag
002A5E  3               drpob:
002A5E  3               	cmp numob 		; are we checking past the end?
002A5E  3               	bcc :+
002A5E  3               	rts			; yes, can't drop non-existent item.
002A5E  3               :
002A5E  3               	jsr gotob		; make sure object is in inventory.
002A5E  3               	cmp scno		; already on this screen?
002A5E  3               	bne :+
002A5E  3               	rts			; yes, nothing to do.
002A5E  3               :
002A5E  3               	ldy #32
002A5E  3               	lda scno
002A5E  3               	sta (z80_hl),y		; bring onto screen.
002A5E  3               	lda dispy		; sprite y coordinate.
002A5E  3               	iny
002A5E  3               	sta (z80_hl),y		; point to object y.
002A5E  3               	lda dispx 		; sprite x coordinate.
002A5E  3               	iny
002A5E  3               	sta (z80_hl),y 		; point to object x
002A5E  3               	jmp dobj		; draw the object sprite.
002A5E  3               
002A5E  3               ;-----------------------------------------------
002A5E  3               ; Seek objects at sprite position.
002A5E  3               ;
002A5E  3               ; Output:
002A5E  3               ;  A = object number, if not found A=255
002A5E  3               ;-----------------------------------------------
002A5E  3               
002A5E  3               skobj:
002A5E  3               	lda #<objdta 		; pointer to objects.
002A5E  3               	sta z80_l
002A5E  3               	lda #>objdta
002A5E  3               	sta z80_h
002A5E  3               
002A5E  3               	lda numob 		; number of objects in game.
002A5E  3               	sta z80_b 		; set up the loop counter.
002A5E  3               skobj0:
002A5E  3               	lda scno		; current room number.
002A5E  3               	ldy #32
002A5E  3               	cmp (z80_hl),y		; is object in here?
002A5E  3               	bne :+
002A5E  3               	jsr skobj1		; yes, check coordinates.
002A5E  3               :
002A5E  3               	clc			; point to next object in table.
002A5E  3               	lda z80_l
002A5E  3               	adc #38			; size of each object.
002A5E  3               	sta z80_l
002A5E  3               	bcc :+
002A5E  3               	inc z80_h
002A5E  3               :
002A5E  3               	dec z80_b
002A5E  3               	bne skobj0		; repeat for all objects.
002A5E  3               
002A5E  3               	lda #255		; end of list and nothing found, return 255.
002A5E  3               	rts
002A5E  3               
002A5E  3               skobj1:
002A5E  3               	ldy #33			; point to y coordinate.
002A5E  3               	lda (z80_hl),y		; point to y coordinate.
002A5E  3               	sec
002A5E  3               	ldy #8
002A5E  3               	sbc (z80_ix),y 		; subtract sprite y.
002A5E  3               	clc
002A5E  3               	adc #15			; add sprite height minus one.
002A5E  3               	cmp #31			; within range?
002A5E  3               	bcs skobj2		; no, ignore object.
002A5E  3               
002A5E  3               	ldy #34			; point to x coordinate now.
002A5E  3               	lda (z80_hl),y 		; get coordinate.
002A5E  3               	sec
002A5E  3               	ldy #9
002A5E  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A5E  3               	clc			; add sprite width minus one.
002A5E  3               	adc #15
002A5E  3               	cmp #31			; within range?
002A5E  3               	bcs skobj2		; no, ignore object.
002A5E  3               
002A5E  3               	pla			; remove return address from stack.
002A5E  3               	pla
002A5E  3               
002A5E  3               	lda numob 		; objects in game.
002A5E  3               	sec
002A5E  3               	sbc z80_b		; subtract loop counter.
002A5E  3               skobj2:
002A5E  3               	rts			; accumulator now points to object.
002A5E  3               .endif
002A5E  3               
002A5E  3               ;---------------------------------------------------------------------
002A5E  3               ; Spawn a new sprite.
002A5E  3               ;---------------------------------------------------------------------
002A5E  3               
002A5E  3               .if gflag
002A5E  3                 offset = 0
002A5E  3               .else
002A5E  3                 offset = 20
002A5E  3               .endif
002A5E  3               
002A5E  3               spawn:
002A5E  3  A9 92        	lda #<sprtab		; sprite table.
002A60  3  85 66        	sta z80_l
002A62  3  A9 37        	lda #>sprtab
002A64  3  85 67        	sta z80_h
002A66  3               numsp1:
002A66  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A68  3  85 rr        	sta spcnt
002A6A  3               spaw0:
002A6A  3  A0 00        	ldy #0
002A6C  3  B1 66        	lda (z80_hl),y		; get sprite type.
002A6E  3  C9 FF        	cmp #255		; is it an unused slot?
002A70  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002A72  3               
002A72  3  18           	clc 			; point to next sprite in table.
002A73  3  A5 66        	lda z80_l
002A75  3  69 11        	adc #TABSIZ		; size of each entry.
002A77  3  85 66        	sta z80_l
002A79  3  90 02        	bcc :+
002A7B  3  E6 67        	inc z80_h
002A7D  3               :
002A7D  3  C6 rr        	dec spcnt		; one less iteration.
002A7F  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002A81  3               
002A81  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002A81  3               
002A81  3               spaw1:
002A81  3  A5 69        	lda z80_i		; address of original sprite.
002A83  3  48           	pha
002A84  3  A5 68        	lda z80_x
002A86  3  48           	pha
002A87  3               
002A87  3  A5 66        	lda z80_l		; store spawned sprite address.
002A89  3  85 rr        	sta spptr
002A8B  3  A5 67        	lda z80_h
002A8D  3  85 rr        	sta spptr+1
002A8F  3               
002A8F  3  A5 62        	lda z80_c
002A91  3  A0 00        	ldy #0
002A93  3  91 66        	sta (z80_hl),y 		; set the type.
002A95  3  A0 05        	ldy #5
002A97  3  91 66        	sta (z80_hl),y		; copy
002A99  3               
002A99  3  A5 63        	lda z80_b
002A9B  3  A0 01        	ldy #1
002A9D  3  91 66        	sta (z80_hl),y		; set the image.
002A9F  3  A0 06        	ldy #6
002AA1  3  91 66        	sta (z80_hl),y		; copy
002AA3  3               
002AA3  3  A9 00        	lda #0 			; frame zero.
002AA5  3  A0 02        	ldy #2
002AA7  3  91 66        	sta (z80_hl),y		; set frame.
002AA9  3  A0 07        	ldy #7
002AAB  3  91 66        	sta (z80_hl),y		; copy
002AAD  3               
002AAD  3  A0 08        	ldy #8
002AAF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002AB1  3  A0 03        	ldy #3
002AB3  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AB5  3  A0 08        	ldy #8
002AB7  3  91 66        	sta (z80_hl),y		; copy
002AB9  3               
002AB9  3  A0 09        	ldy #9
002ABB  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002ABD  3  A0 04        	ldy #4
002ABF  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AC1  3  A0 09        	ldy #9
002AC3  3  91 66        	sta (z80_hl),y		; copy
002AC5  3               
002AC5  3  A0 0A        	ldy #10			; direction of original.
002AC7  3  B1 68        	lda (z80_ix),y
002AC9  3  91 66        	sta (z80_hl),y		; direction
002ACB  3               
002ACB  3  A9 00        	lda #0
002ACD  3  A0 0B        	ldy #11
002ACF  3  91 66        	sta (z80_hl),y		; reset parameter.
002AD1  3  C8           	iny
002AD2  3  91 66        	sta (z80_hl),y		; reset parameter.
002AD4  3  C8           	iny
002AD5  3  91 66        	sta (z80_hl),y		; reset parameter.
002AD7  3  C8           	iny
002AD8  3  91 66        	sta (z80_hl),y		; reset parameter.
002ADA  3               rtssp:
002ADA  3  A5 rr        	lda spptr		; address of new sprite.
002ADC  3  85 68        	sta z80_x
002ADE  3  A5 rr        	lda spptr+1
002AE0  3  85 69        	sta z80_i
002AE2  3               evis1:
002AE2  3  20 CB 3A     	jsr evnt09 		; call sprite initialisation event.
002AE5  3               
002AE5  3  A5 rr        	lda spptr 		; address of new sprite.
002AE7  3  85 68        	sta z80_x
002AE9  3  A5 rr        	lda spptr+1
002AEB  3  85 69        	sta z80_i
002AED  3  20 4D 48     	jsr sspria 		; display the new sprite.
002AF0  3               
002AF0  3  68           	pla			; address of original sprite.
002AF1  3  85 68        	sta z80_x
002AF3  3  68           	pla
002AF4  3  85 69        	sta z80_i
002AF6  3               
002AF6  3  60           	rts
002AF7  3               
002AF7  3               ;spcnt:	.byte 0
002AF7  3               ;spptr:	.word 0			; spawned sprite pointer.
002AF7  3               ;seed:	.byte 0			; seed for random numbers.
002AF7  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002AFB  3  30 30        
002AFD  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B01  3  30 30        
002B03  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B07  3  30 30        
002B09  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B0B  3               
002B0B  3               ;----------------------------------------------------
002B0B  3               ; Check y-pos
002B0B  3               ;----------------------------------------------------
002B0B  3               
002B0B  3               checkx:
002B0B  3  A5 rr        	lda dispy		; y position.
002B0D  3  C9 19        	cmp #ScrHeight			; off screen?
002B0F  3  B0 01        	bcs :+
002B11  3  60           	rts			; no, it's okay.
002B12  3               :
002B12  3  68           	pla			; remove return address from stack.
002B13  3  85 66        	sta z80_l
002B15  3  68           	pla
002B16  3  85 67        	sta z80_h
002B18  3  60           	rts
002B19  3               
002B19  3               ;-----------------------------------------------
002B19  3               ; Displays the current high score.
002B19  3               ;-----------------------------------------------
002B19  3               
002B19  3               dhisc:
002B19  3  A9 FD        	lda #<hiscor 		; high score text.
002B1B  3  8D 50 2B     	sta dscor3+1
002B1E  3  8D 74 2B     	sta bscor3+1
002B21  3  A9 2A        	lda #>hiscor
002B23  3  8D 51 2B     	sta dscor3+2
002B26  3  8D 75 2B     	sta bscor3+2
002B29  3  4C 3C 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B2C  3               
002B2C  3               ;------------------------------------------------------
002B2C  3               ; Displays the current score.
002B2C  3               ;------------------------------------------------------
002B2C  3               
002B2C  3               dscor:
002B2C  3  A9 F7        	lda #<score		; score text.
002B2E  3  8D 50 2B     	sta dscor3+1
002B31  3  8D 74 2B     	sta bscor3+1
002B34  3  A9 2A        	lda #>score
002B36  3  8D 51 2B     	sta dscor3+2
002B39  3  8D 75 2B     	sta bscor3+2
002B3C  3               dscor1:
002B3C  3  8C 70 2B     	sty tmpscr
002B3F  3  20 D9 30     	jsr preprt		; set up font and print position.
002B42  3  20 0B 2B     	jsr checkx		; make sure we're in a printable range.
002B45  3               
002B45  3               ;	lda #6			; digits to display.
002B45  3               ;	sta z80_b
002B45  3  A5 rr        	lda prtmod		; get print mode.
002B47  3  F0 03        	beq :+			; standard size text?
002B49  3  4C 71 2B     	jmp bscor0		; no, show double-height.
002B4C  3               :
002B4C  3               dscor0:
002B4C  3               ;	ldy #0
002B4C  3               ;	lda (z80_hl),y 		; fetch character.
002B4C  3  AC 70 2B     	ldy tmpscr
002B4F  3               dscor3:
002B4F  3  B9 F7 2A     	lda score,y
002B52  3  20 89 2C     	jsr pchar 		; display character.
002B55  3  E6 rr        	inc dispx		; move along x coordinate
002B57  3               
002B57  3               ;	inc z80_l		; next score column.
002B57  3               ;	bne :+
002B57  3               ;	inc z80_h
002B57  3               ;:
002B57  3  EE 70 2B     	inc tmpscr
002B5A  3  C6 63        	dec z80_b
002B5C  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B5E  3               dscor2:
002B5E  3  AD 81 38     	lda bcolour
002B61  3  20 89 2C     	jsr pchar
002B64  3  20 C6 30     	jsr nexpos
002B67  3               
002B67  3  A5 rr        	lda dispx 		; set up display coordinates.
002B69  3  85 rr        	sta charx
002B6B  3  A5 rr        	lda dispy
002B6D  3  85 rr        	sta chary
002B6F  3  60           	rts
002B70  3               
002B70  3  00           tmpscr:	.byte 0
002B71  3               ;------------------------------------------------------
002B71  3               ; Displays the current score in double-height characters.
002B71  3               ;
002B71  3               ; Input:
002B71  3               ;  B  = digit number
002B71  3               ;  HL = score string
002B71  3               ;------------------------------------------------------
002B71  3               
002B71  3               bscor0:
002B71  3               ;	ldy #0
002B71  3               
002B71  3               ;	lda (z80_hl),y 		; fetch character.
002B71  3  A4 rr        	ldy tmp
002B73  3               bscor3:
002B73  3  B9 F7 2A     	lda score,y
002B76  3  20 97 30     	jsr bchar 		; display big char.
002B79  3               
002B79  3               ;	inc z80_l 		; next score column.
002B79  3               ;	bne :+
002B79  3               ;	inc z80_h
002B79  3               ;:
002B79  3  E6 rr        	inc tmp
002B7B  3  C6 63        	dec z80_b
002B7D  3  F0 03        	beq :+
002B7F  3  4C 71 2B     	jmp bscor0 		; repeat for all digits.
002B82  3               :
002B82  3  4C 5E 2B     	jmp dscor2 		; tidy up line and column variables.
002B85  3               
002B85  3               ;-----------------------------------------------------
002B85  3               ; Adds number in the hl pair to the score.
002B85  3               ;-----------------------------------------------------
002B85  3               
002B85  3               addsc:
002B85  3  A9 F8        	lda #<(score+1) 	; ten thousands column.
002B87  3  85 64        	sta z80_e
002B89  3  A9 2A        	lda #>(score+1)
002B8B  3  85 65        	sta z80_d
002B8D  3  A9 10        	lda #<10000		; amount to add each time.
002B8F  3  85 62        	sta z80_c
002B91  3  A9 27        	lda #>10000
002B93  3  85 63        	sta z80_b
002B95  3  20 D9 2B     	jsr incsc		; add to score.
002B98  3               
002B98  3  E6 64        	inc z80_e		; thousands column.
002B9A  3  D0 02        	bne :+
002B9C  3  E6 65        	inc z80_d
002B9E  3               :
002B9E  3  A9 E8        	lda #<1000		; amount to add each time.
002BA0  3  85 62        	sta z80_c
002BA2  3  A9 03        	lda #>1000
002BA4  3  85 63        	sta z80_b
002BA6  3  20 D9 2B     	jsr incsc 		; add to score.
002BA9  3               
002BA9  3  E6 64        	inc z80_e		; hundreds column.
002BAB  3  D0 02        	bne :+
002BAD  3  E6 65        	inc z80_d
002BAF  3               :
002BAF  3  A9 64        	lda #<100		; amount to add each time.
002BB1  3  85 62        	sta z80_c
002BB3  3  A9 00        	lda #>100
002BB5  3  85 63        	sta z80_b
002BB7  3  20 D9 2B     	jsr incsc		; add to score.
002BBA  3               
002BBA  3  E6 64        	inc z80_e 		; tens column.
002BBC  3  D0 02        	bne :+
002BBE  3  E6 65        	inc z80_d
002BC0  3               :
002BC0  3  A9 0A        	lda #<10		; amount to add each time.
002BC2  3  85 62        	sta z80_c
002BC4  3  A9 00        	lda #>10
002BC6  3  85 63        	sta z80_b
002BC8  3  20 D9 2B     	jsr incsc 		; add to score.
002BCB  3               
002BCB  3  E6 64        	inc z80_e		; units column.
002BCD  3  D0 02        	bne :+
002BCF  3  E6 65        	inc z80_d
002BD1  3               :
002BD1  3  A9 01        	lda #<1			; units.
002BD3  3  85 62        	sta z80_c
002BD5  3  A9 00        	lda #>1
002BD7  3  85 63        	sta z80_b
002BD9  3               incsc:
002BD9  3  A5 67        	lda z80_h		; store amount to add.
002BDB  3  48           	pha
002BDC  3  A5 66        	lda z80_l
002BDE  3  48           	pha
002BDF  3               
002BDF  3  38           	sec			; subtract from amount to add.
002BE0  3  A5 66        	lda z80_l
002BE2  3  E5 62        	sbc z80_c
002BE4  3  85 66        	sta z80_l
002BE6  3  A5 67        	lda z80_h
002BE8  3  E5 63        	sbc z80_b
002BEA  3  85 67        	sta z80_h
002BEC  3  90 14        	bcc incsc0		; too much, restore value.
002BEE  3               
002BEE  3  68           	pla			; delete the previous amount from the stack.
002BEF  3  68           	pla
002BF0  3               
002BF0  3  A5 65        	lda z80_d 		; store column position.
002BF2  3  48           	pha
002BF3  3  A5 64        	lda z80_e
002BF5  3  48           	pha
002BF6  3  20 09 2C     	jsr incsc2		; do the increment.
002BF9  3               
002BF9  3  68           	pla			; restore column.
002BFA  3  85 64        	sta z80_e
002BFC  3  68           	pla
002BFD  3  85 65        	sta z80_d
002BFF  3  4C D9 2B     	jmp incsc		; repeat until all added.
002C02  3               
002C02  3               incsc0:
002C02  3  68           	pla			; restore previous value.
002C03  3  85 66        	sta z80_l
002C05  3  68           	pla
002C06  3  85 67        	sta z80_h
002C08  3  60           	rts
002C09  3               incsc2:
002C09  3  A0 00        	ldy #0
002C0B  3  B1 64        	lda (z80_de),y 		; get amount.
002C0D  3  18           	clc
002C0E  3  69 01        	adc #1			; add one to column.
002C10  3  91 64        	sta (z80_de),y		; write new column total.
002C12  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C14  3  B0 01        	bcs :+
002C16  3  60           	rts			; no, carry on.
002C17  3               :
002C17  3  A9 30        	lda #'0'		; make it zero.
002C19  3  91 64        	sta (z80_de),y		; write new column total.
002C1B  3  C6 64        	dec z80_e		; back one column.
002C1D  3  D0 02        	bne :+
002C1F  3  C6 65        	dec z80_d
002C21  3               :
002C21  3  4C 09 2C     	jmp incsc2
002C24  3               
002C24  3               ;------------------------------------
002C24  3               ; Add bonus to score and reset bonus
002C24  3               ;------------------------------------
002C24  3               
002C24  3               addbo:
002C24  3  A2 05        	ldx #5			; last digit.
002C26  3  18           	clc
002C27  3               addbo0:
002C27  3  BD F7 2A     	lda score,x		; get score.
002C2A  3  7D 03 2B     	adc bonus,x		; add bonus.
002C2D  3  38           	sec			; 0 to 18.
002C2E  3  E9 30        	sbc #48
002C30  3  48           	pha
002C31  3  A9 30        	lda #'0'
002C33  3  9D 03 2B     	sta bonus,x
002C36  3  68           	pla
002C37  3  C9 3A        	cmp #58
002C39  3  90 03        	bcc addbo1
002C3B  3  38           	sec
002C3C  3  E9 0A        	sbc #10
002C3E  3               addbo1:
002C3E  3  9D F7 2A     	sta score,x		; zeroise bonus.
002C41  3  CA           	dex			; next digit.
002C42  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C44  3  60           	rts
002C45  3               
002C45  3               ;------------------------------------
002C45  3               ; Swap score and bonus.
002C45  3               ;------------------------------------
002C45  3               
002C45  3               swpsb:
002C45  3  A2 05        	ldx #5			; digits to add.
002C47  3               swpsb0:
002C47  3  BD F7 2A     	lda score,x 		; get score digits.
002C4A  3  48           	pha			; save digit
002C4B  3  BD 03 2B     	lda bonus,x 		; get bonus digits.
002C4E  3  9D F7 2A     	sta score,x		; switch score-bonus
002C51  3  68           	pla
002C52  3  9D 03 2B     	sta bonus,x
002C55  3  CA           	dex 			; repeat for all 6 digits.
002C56  3  10 EF        	bpl swpsb0
002C58  3  60           	rts
002C59  3               
002C59  3               ;----------------------------------------------------
002C59  3               ; Get print address.
002C59  3               ;----------------------------------------------------
002C59  3               
002C59  3               gprad:
002C59  3  A5 rr        	lda dispy
002C5B  3  85 rr        	sta tmp
002C5D  3  0A           	asl a
002C5E  3  18           	clc
002C5F  3  65 rr        	adc tmp
002C61  3  A8           	tay
002C62  3  B9 00 DC     	lda SCADTB_lb,y
002C65  3  18           	clc
002C66  3  65 rr        	adc dispx
002C68  3  85 rr        	sta scraddr
002C6A  3  B9 00 DD     	lda SCADTB_hb,y
002C6D  3  69 00        	adc #0
002C6F  3  85 rr        	sta scraddr+1
002C71  3  60           	rts
002C72  3               
002C72  3               ;--------------------------------------------------------------
002C72  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002C72  3               ;
002C72  3               ; Output:
002C72  3               ;  bufaddr = MAP + dispy*40 + dispx
002C72  3               ;--------------------------------------------------------------
002C72  3               
002C72  3               pradd:
002C72  3  A5 rr        	lda dispy 		; y coordinate.
002C74  3  0A           	asl a
002C75  3  18           	clc
002C76  3  65 rr        	adc dispy
002C78  3  AA           	tax
002C79  3               
002C79  3  18           	clc
002C7A  3  BD 00 DC     	lda SCADTB_lb,x
002C7D  3  65 rr        	adc dispx
002C7F  3  85 rr        	sta bufaddr
002C81  3               
002C81  3  BD 00 DD     	lda SCADTB_hb,x
002C84  3  69 D4        	adc #(>MAP->ScreenAddr)
002C86  3  85 rr        	sta bufaddr+1
002C88  3  60           	rts
002C89  3               
002C89  3               ;----------------------------------------------------
002C89  3               ; Display character in A at dispx,dispy.
002C89  3               ;
002C89  3               ; Input:
002C89  3               ;  A 	   = character to print
002C89  3               ;----------------------------------------------------
002C89  3               
002C89  3               pchar:
002C89  3  48           	pha
002C8A  3  20 59 2C     	jsr gprad		; get screen address.
002C8D  3               .if gflag
002C8D  3               	and andeor
002C8D  3               	eor andeor+1
002C8D  3               .endif
002C8D  3               .if iflag
002C8D  3               	eor #$ff
002C8D  3               .endif
002C8D  3  68           	pla
002C8E  3  A0 00        	ldy #0
002C90  3  91 rr        	sta (scraddr),y 	; copy to screen.
002C92  3  60           	rts
002C93  3               
002C93  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002C97  3  60 40 20 00  
002C9B  3               
002C9B  3               ;----------------------------------------------
002C9B  3               
002C9B  3               ; Print attributes, properties and pixels.
002C9B  3               ;
002C9B  3               ; Input:
002C9B  3               ;  A	= tile number
002C9B  3               ;----------------------------------------------
002C9B  3               
002C9B  3               pbpattr:			; entry PUTBLOCK command
002C9B  3  A4 rr        	ldy charx
002C9D  3  84 rr        	sty dispx
002C9F  3  A4 rr        	ldy chary
002CA1  3  84 rr        	sty dispy
002CA3  3               pattr:
002CA3  3               .if aflag
002CA3  3               	pha
002CA3  3               	jsr wbloc		; save blockinfo
002CA3  3               	pla
002CA3  3               .endif
002CA3  3               
002CA3  3               pattr2:
002CA3  3  85 63        	sta z80_b		; store cell in b register for now.
002CA5  3  AA           	tax
002CA6  3  BD D2 3B     	lda bprop,x 		; block properties.
002CA9  3  85 62        	sta z80_c
002CAB  3  C9 08        	cmp #COLECT
002CAD  3  D0 05        	bne :+
002CAF  3  A5 63        	lda z80_b
002CB1  3  8D C2 2C     	sta colpatt
002CB4  3               :
002CB4  3  20 72 2C     	jsr pradd 		; get property buffer address.
002CB7  3  A5 62        	lda z80_c
002CB9  3  A0 00        	ldy #0
002CBB  3  91 rr        	sta (bufaddr),y 	; write property.
002CBD  3  A5 63        	lda z80_b 		; restore cell.
002CBF  3  4C C3 2C     	jmp panp
002CC2  3               ; Print attributes, no properties.
002CC2  3               
002CC2  3  00           colpatt:	.byte 0
002CC3  3               
002CC3  3               panp:
002CC3  3               ;	sta z80_e		; displacement in e.
002CC3  3               ;	lda #0
002CC3  3               ;	sta z80_d		; no high byte.
002CC3  3               ;	asl z80_e  		; multiply char by 8.
002CC3  3               ;	rol z80_d
002CC3  3               ;	asl z80_e
002CC3  3               ;	rol z80_d
002CC3  3               ;	asl z80_e
002CC3  3               ;	rol z80_d
002CC3  3  0A           	asl a
002CC4  3  18           	clc
002CC5  3               ;	lda z80_e
002CC5  3  69 CA        	adc #<chgfx 		; address of graphics.
002CC7  3  85 rr        	sta tileaddr
002CC9  3  A5 65        	lda z80_d
002CCB  3  69 3B        	adc #>chgfx
002CCD  3  85 rr        	sta tileaddr+1
002CCF  3  20 59 2C     	jsr gprad 		; get screen address.
002CD2  3               panp0:
002CD2  3  A0 00        	ldy #0
002CD4  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002CD6  3               .if iflag
002CD6  3               	eor #$ff		; Invert
002CD6  3               .endif
002CD6  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CD8  3  E6 rr        	inc dispx 		; move along one.
002CDA  3  E6 rr        	inc charx
002CDC  3  60           	rts
002CDD  3               
002CDD  3               ;----------------------------------------------
002CDD  3               ; Write block
002CDD  3               ;----------------------------------------------
002CDD  3               
002CDD  3               .if aflag
002CDD  3               wbloc:
002CDD  3               	ldy #3
002CDD  3               	sta (pbptr),y		; store block number
002CDD  3               	dey
002CDD  3               	lda dispx
002CDD  3               	sta (pbptr),y		; write x position of block.
002CDD  3               	dey
002CDD  3               	lda dispy
002CDD  3               	sta (pbptr),y		; write y position of block.
002CDD  3               	dey
002CDD  3               	lda scno
002CDD  3               	sta (pbptr),y		; write screen.
002CDD  3               	clc			; point to next free location
002CDD  3               	lda pbptr
002CDD  3               	adc #4
002CDD  3               	sta pbptr
002CDD  3               	bcc :+
002CDD  3               	inc pbptr+1
002CDD  3               :
002CDD  3               	rts
002CDD  3               .endif
002CDD  3               
002CDD  3               ;----------------------------------------------
002CDD  3               ; Print character pixels, no more.
002CDD  3               ;
002CDD  3               ; Input:
002CDD  3               ;  A	= character to print
002CDD  3               ;----------------------------------------------
002CDD  3               
002CDD  3               pchr:
002CDD  3  20 89 2C     	jsr pchar 		; show character in accumulator.
002CE0  3  E6 rr        	inc dispx		; move along one.
002CE2  3  60           	rts
002CE3  3               
002CE3  3               ;----------------------------------------------------
002CE3  3               ; Shifter sprite routine for objects.
002CE3  3               ;----------------------------------------------------
002CE3  3               
002CE3  3               .if oflag
002CE3  3               sprit7:
002CE3  3               	lda z80_b
002CE3  3               	beq sprit0
002CE3  3               	sta z80_a
002CE3  3               sprit3:
002CE3  3               	lsr spr			; shift into position.
002CE3  3               	ror spr+1
002CE3  3               	ror spr+2
002CE3  3               	dec z80_a		; one less iteration.
002CE3  3               	bne sprit3
002CE3  3               sprit0:
002CE3  3               	rts 			; now apply to screen.
002CE3  3               
002CE3  3               ;----------------------------------------------------
002CE3  3               ; Draw sprite
002CE3  3               ;----------------------------------------------------
002CE3  3               
002CE3  3               sprite:
002CE3  3               	stx xtmp		; Save X-reg
002CE3  3               	jsr scadd 		; get screen address in scraddr.
002CE3  3               
002CE3  3               	lda dispx 		; x position.
002CE3  3               	and #7 			; position straddling cells.
002CE3  3               	sta z80_b		; store in b register.
002CE3  3               
002CE3  3               	lda z80_l		; store sprite graphic address.
002CE3  3               	sta sprit1+1
002CE3  3               	sta sprit2+1
002CE3  3               	lda z80_h
002CE3  3               	sta sprit1+2
002CE3  3               	sta sprit2+2
002CE3  3               
002CE3  3               	ldx #0			; pixel height.
002CE3  3               	ldy #0
002CE3  3               sprit1:
002CE3  3               	lda objdta,x		; fetch first byte.
002CE3  3               	sta spr
002CE3  3               	inx
002CE3  3               sprit2:
002CE3  3               	lda objdta,x
002CE3  3               	sta spr+1
002CE3  3               
002CE3  3               	lda #0
002CE3  3               	sta spr+2
002CE3  3               	jsr sprit7		; shift sprite
002CE3  3               
002CE3  3               	dex
002CE3  3               	lda spr			; fetch graphic.
002CE3  3               	ldy spritetab,x
002CE3  3               	eor (scraddr),y		; merge with screen image.
002CE3  3               	sta (scraddr),y		; write to screen.
002CE3  3               	inx			; next screen byte.
002CE3  3               
002CE3  3               	lda spr+1		; fetch graphic.
002CE3  3               	ldy spritetab,x
002CE3  3               	eor (scraddr),y		; merge with screen image.
002CE3  3               	sta (scraddr),y		; write to screen.
002CE3  3               	iny
002CE3  3               
002CE3  3               	lda spr+2		; fetch graphic.
002CE3  3               	eor (scraddr),y		; merge with screen image.
002CE3  3               	sta (scraddr),y		; write to screen.
002CE3  3               
002CE3  3               	inx			; next source byte.
002CE3  3               	cpx #16
002CE3  3               	bne :+
002CE3  3               	inc scraddr+1
002CE3  3               :
002CE3  3               	cpx #32
002CE3  3               	bne sprit1		; repeat
002CE3  3               
002CE3  3               	ldx xtmp		; retreive X-reg
002CE3  3               	rts
002CE3  3               
002CE3  3               spritetab:
002CE3  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002CE3  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002CE3  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002CE3  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002CE3  3               
002CE3  3               spr:	.byte 0,0,0
002CE3  3               
002CE3  3               ;xtmp:	.byte 0
002CE3  3               .endif
002CE3  3               
002CE3  3               ;-----------------------------------------------------------
002CE3  3               ; Get room address.
002CE3  3               ;-----------------------------------------------------------
002CE3  3               
002CE3  3               groom:
002CE3  3  A6 rr        	ldx scno 		; screen number.
002CE5  3  A0 00        	ldy #0
002CE7  3               groomx:
002CE7  3  A9 FC        	lda #<scdat 		; pointer to screens.
002CE9  3  85 66        	sta z80_l
002CEB  3  A9 41        	lda #>scdat
002CED  3  85 67        	sta z80_h
002CEF  3               groom1:
002CEF  3  E0 00        	cpx #0			; is it the first one?
002CF1  3  F0 15        	beq groom0 		; no more screens to skip.
002CF3  3               
002CF3  3  18           	clc
002CF4  3  A5 66        	lda z80_l
002CF6  3  79 FC 41     	adc scdat,y 		; low byte of screen size.
002CF9  3  85 66        	sta z80_l
002CFB  3  C8           	iny			; point to high byte.
002CFC  3  A5 67        	lda z80_h
002CFE  3  79 FC 41     	adc scdat,y 		; high byte of screen size.
002D01  3  85 67        	sta z80_h
002D03  3  C8           	iny			; next address.
002D04  3               
002D04  3  CA           	dex 			; one less iteration.
002D05  3  4C EF 2C     	jmp groom1 		; loop until we reach the end.
002D08  3               groom0:
002D08  3  AD FB 43     	lda numsc 		; add displacement.
002D0B  3  0A           	asl a
002D0C  3  18           	clc			; add double displacement to address.
002D0D  3  65 66        	adc z80_l
002D0F  3  85 66        	sta z80_l
002D11  3  A5 67        	lda z80_h
002D13  3  69 00        	adc #0
002D15  3  85 67        	sta z80_h
002D17  3  60           	rts
002D18  3               
002D18  3               ;-----------------------------------------------------------
002D18  3               ; Draw present room.
002D18  3               ;-----------------------------------------------------------
002D18  3               
002D18  3               droom:
002D18  3  AD 1F 28     	lda wintop 		; window top.
002D1B  3  85 rr        	sta dispy		; set cursor y position.
002D1D  3               droom2:
002D1D  3  20 E3 2C     	jsr groom 		; get address of current room.
002D20  3  A9 00        	lda #0	 		; zero in accumulator.
002D22  3  85 rr        	sta comcnt 		; reset compression counter.
002D24  3  AD 21 28     	lda winhgt 		; height of window.
002D27  3  85 rr        	sta rrow		; set row counter
002D29  3               droom0:
002D29  3  AD 20 28     	lda winlft 		; window left edge.
002D2C  3  85 rr        	sta dispx 		; set cursor x position.
002D2E  3  AD 22 28     	lda winwid 		; width of window.
002D31  3  85 rr        	sta rcol		; set column counter
002D33  3               droom1:
002D33  3  20 44 2D     	jsr flbyt 		; decompress next byte on the fly.
002D36  3  20 A3 2C     	jsr pattr2 		; show attributes and block.
002D39  3  C6 rr        	dec rcol		; one less column.
002D3B  3  D0 F6        	bne droom1 		; repeat for entire line.
002D3D  3  E6 rr        	inc dispy		; move down one line.
002D3F  3  C6 rr        	dec rrow 		; one less row.
002D41  3  D0 E6        	bne droom0 		; repeat for all rows.
002D43  3  60           	rts
002D44  3               
002D44  3               ;rcol:	.byte 0
002D44  3               ;rrow:	.byte 0
002D44  3               
002D44  3               ;----------------------------------------------
002D44  3               ; Decompress bytes on-the-fly.
002D44  3               ;----------------------------------------------
002D44  3               
002D44  3               flbyt:
002D44  3  A5 rr        	lda comcnt 		; compression counter.
002D46  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D48  3               
002D48  3  A0 00        	ldy #0
002D4A  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D4C  3  E6 66        	inc z80_l 		; point to next cell.
002D4E  3  D0 02        	bne :+
002D50  3  E6 67        	inc z80_h
002D52  3               :
002D52  3  C9 FF        	cmp #255 		; is this byte a control code?
002D54  3  F0 01        	beq :+
002D56  3  60           	rts 			; no, this byte is uncompressed.
002D57  3               :
002D57  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002D59  3  85 rr        	sta combyt 		; set up the type.
002D5B  3  E6 66        	inc z80_l 		; point to quantity.
002D5D  3  D0 02        	bne :+
002D5F  3  E6 67        	inc z80_h
002D61  3               :
002D61  3  B1 66        	lda (z80_hl),y 		; get quantity.
002D63  3  E6 66        	inc z80_l 		; point to next byte.
002D65  3  D0 02        	bne :+
002D67  3  E6 67        	inc z80_h
002D69  3               :
002D69  3               flbyt1:
002D69  3  85 rr        	sta comcnt 		; store new quantity.
002D6B  3  C6 rr        	dec comcnt		; one less.
002D6D  3  A5 rr        	lda combyt 		; byte to expand.
002D6F  3  60           	rts
002D70  3               
002D70  3               ;combyt:	.byte 0			; byte type compressed.
002D70  3               ;comcnt:	.byte 0			; compression counter.
002D70  3               
002D70  3               ;------------------------------------------
002D70  3               ; Ladder down check.
002D70  3               ;
002D70  3               ; Input:
002D70  3               ;  IX = sprite pointer
002D70  3               ;------------------------------------------
002D70  3               
002D70  3               .if lflag
002D70  3               laddd:
002D70  3               	ldy #9
002D70  3               	lda (z80_ix),y		; x coordinate.
002D70  3               	sta dispx
002D70  3               
002D70  3               	ldy #8
002D70  3               	lda (z80_ix),y		; y coordinate.
002D70  3               	and #254		; make it even.
002D70  3               	sta (z80_ix),y 		; reset it.
002D70  3               	clc 			; look down 16 pixels.
002D70  3               numsp5:
002D70  3               	adc #SPR_HGT
002D70  3               	sta dispy		; coords in dispx,dispy.
002D70  3               	jmp laddv
002D70  3               
002D70  3               ;------------------------------------------
002D70  3               ; Ladder up check.
002D70  3               ;
002D70  3               ; Input:
002D70  3               ;  IX = sprite pointer
002D70  3               ;
002D70  3               ; Output:
002D70  3               ;  A  = 0 is ok, A <>0 is not ok
002D70  3               ;------------------------------------------
002D70  3               
002D70  3               laddu:
002D70  3               	ldy #9
002D70  3               	lda (z80_ix),y		; x coordinate.
002D70  3               	sta dispx
002D70  3               
002D70  3               	ldy #8
002D70  3               	lda (z80_ix),y		; y coordinate.
002D70  3               	and #254 		; make it even.
002D70  3               	sta (z80_ix),y		; reset it.
002D70  3               	clc 			; look 2 pixels above feet.
002D70  3               numsp6:
002D70  3               	adc #SPR_HGT-2
002D70  3               	sta dispy		; coords in dispx,dispy.
002D70  3               laddv:
002D70  3               	jsr tstbl 		; get map address.
002D70  3               	jsr ldchk 		; standard ladder check.
002D70  3               	beq :+
002D70  3               	rts 			; no way through.
002D70  3               :
002D70  3               	inc bufaddr 		; look right one cell.
002D70  3               	bne :+
002D70  3               	inc bufaddr+1
002D70  3               :
002D70  3               	jsr ldchk 		; do the check.
002D70  3               	beq :+
002D70  3               	rts 			; impassable.
002D70  3               :
002D70  3               	lda dispx 		; y coordinate.
002D70  3               	and #7 			; position straddling block cells.
002D70  3               	bne :+
002D70  3               	rts 			; no more checks needed.
002D70  3               :
002D70  3               	inc bufaddr 		; look to third cell.
002D70  3               	bne :+
002D70  3               	inc bufaddr+1
002D70  3               :
002D70  3               	jsr ldchk 		; do the check.
002D70  3               	rts  			; return with zero flag set accordingly.
002D70  3               .endif
002D70  3               
002D70  3               ;---------------------------------------------------------
002D70  3               ; Can go up check.
002D70  3               ;
002D70  3               ; Input:
002D70  3               ;  IX = sprite pointer
002D70  3               ;
002D70  3               ; Output:
002D70  3               ;  A  = 0 is ok, A <>0 is not ok
002D70  3               ;---------------------------------------------------------
002D70  3               
002D70  3               cangu:
002D70  3  A0 09        	ldy #9
002D72  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D74  3  85 rr        	sta dispx
002D76  3  A0 08        	ldy #8
002D78  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002D7A  3  38           	sec
002D7B  3  E9 01        	sbc #1
002D7D  3  85 rr        	sta dispy		; coords in dispx,dispy.
002D7F  3  20 70 2F     	jsr tstbl 		; get map address.
002D82  3  20 53 2E     	jsr lrchk 		; standard left/right check.
002D85  3  F0 01        	beq :+
002D87  3  60           	rts			; no way through.
002D88  3               :
002D88  3  E6 rr        	inc bufaddr		; look right one cell.
002D8A  3  D0 02        	bne :+
002D8C  3  E6 rr        	inc bufaddr+1
002D8E  3               :
002D8E  3  20 53 2E     	jsr lrchk 		; do the check.
002D91  3  F0 01        	beq :+
002D93  3  60           	rts			; impassable.
002D94  3               :
002D94  3  E6 rr        	inc bufaddr		; look right one cell.
002D96  3  D0 02        	bne :+
002D98  3  E6 rr        	inc bufaddr+1
002D9A  3               :
002D9A  3  20 53 2E     	jsr lrchk 		; do the check.
002D9D  3  F0 01        	beq :+
002D9F  3  60           	rts			; impassable.
002DA0  3               :
002DA0  3  E6 rr        	inc bufaddr		; look right one cell.
002DA2  3  D0 02        	bne :+
002DA4  3  E6 rr        	inc bufaddr+1
002DA6  3               :
002DA6  3  20 53 2E     	jsr lrchk 		; do the check.
002DA9  3  F0 01        	beq :+
002DAB  3  60           	rts			; impassable.
002DAC  3               :
002DAC  3  A5 rr        	lda dispx		; x coordinate.
002DAE  3  29 01        	and #1			; position straddling block cells.
002DB0  3  D0 01        	bne :+
002DB2  3  60           	rts			; no more checks needed.
002DB3  3               :
002DB3  3  E6 rr        	inc bufaddr		; look to third cell.
002DB5  3  D0 02        	bne :+
002DB7  3  E6 rr        	inc bufaddr+1
002DB9  3               :
002DB9  3  20 53 2E     	jsr lrchk		; do the check.
002DBC  3  60           	rts 			; return with zero flag set accordingly.
002DBD  3               
002DBD  3               ;---------------------------------------------------------
002DBD  3               ; Can go down check.
002DBD  3               ;
002DBD  3               ; Input:
002DBD  3               ;  IX = sprite pointer
002DBD  3               ;
002DBD  3               ; Output:
002DBD  3               ;  A  = 0 is ok, A <>0 is not ok
002DBD  3               ;---------------------------------------------------------
002DBD  3               
002DBD  3               cangd:
002DBD  3  A0 09        	ldy #9
002DBF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002DC1  3  85 rr        	sta dispx
002DC3  3  A0 08        	ldy #8
002DC5  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DC7  3  18           	clc
002DC8  3               numsp3:
002DC8  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002DCA  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DCC  3  20 70 2F     	jsr tstbl 		; get map address.
002DCF  3  20 68 2E     	jsr plchk 		; block, platform check.
002DD2  3  F0 01        	beq :+
002DD4  3  60           	rts			; no way through.
002DD5  3               :
002DD5  3  E6 rr        	inc bufaddr		; look right one cell.
002DD7  3  D0 02        	bne :+
002DD9  3  E6 rr        	inc bufaddr+1
002DDB  3               :
002DDB  3  20 68 2E     	jsr plchk		; block, platform check.
002DDE  3  F0 01        	beq :+
002DE0  3  60           	rts			; impassable.
002DE1  3               :
002DE1  3  E6 rr        	inc bufaddr		; look right one cell.
002DE3  3  D0 02        	bne :+
002DE5  3  E6 rr        	inc bufaddr+1
002DE7  3               :
002DE7  3  20 68 2E     	jsr plchk		; block, platform check.
002DEA  3  F0 01        	beq :+
002DEC  3  60           	rts			; impassable.
002DED  3               :
002DED  3  E6 rr        	inc bufaddr		; look right one cell.
002DEF  3  D0 02        	bne :+
002DF1  3  E6 rr        	inc bufaddr+1
002DF3  3               :
002DF3  3  20 68 2E     	jsr plchk		; block, platform check.
002DF6  3  F0 01        	beq :+
002DF8  3  60           	rts			; impassable.
002DF9  3               :
002DF9  3  A5 rr        	lda dispx		; x coordinate.
002DFB  3  29 01        	and #1			; position straddling block cells.
002DFD  3  D0 01        	bne :+
002DFF  3  60           	rts			; no more checks needed.
002E00  3               :
002E00  3  E6 rr        	inc bufaddr		; look to third cell.
002E02  3  D0 02        	bne :+
002E04  3  E6 rr        	inc bufaddr+1
002E06  3               :
002E06  3  20 68 2E     	jsr plchk		; block, platform check.
002E09  3  60           	rts			; return with zero flag set accordingly.
002E0A  3               
002E0A  3               ;---------------------------------------------------------
002E0A  3               ; Can go left check.
002E0A  3               ;
002E0A  3               ; Input:
002E0A  3               ;  IX = sprite pointer
002E0A  3               ;
002E0A  3               ; Output:
002E0A  3               ;  A  = 0 is ok, A <>0 is not ok
002E0A  3               ;---------------------------------------------------------
002E0A  3               
002E0A  3               cangl:
002E0A  3  A0 08        	ldy #8
002E0C  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E0E  3  85 rr        	sta dispy
002E10  3  A0 09        	ldy #9
002E12  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E14  3  38           	sec
002E15  3  E9 01        	sbc #1			; look left 2 pixels.
002E17  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E19  3  4C 2B 2E     	jmp cangh		; test if we can go there.
002E1C  3               
002E1C  3               ;---------------------------------------------------------
002E1C  3               ; Can go right check.
002E1C  3               ;
002E1C  3               ; Input:
002E1C  3               ;  IX = sprite pointer
002E1C  3               ;
002E1C  3               ; Output:
002E1C  3               ;  A  = 0 is ok, A <>0 is not ok
002E1C  3               ;---------------------------------------------------------
002E1C  3               
002E1C  3               cangr:
002E1C  3  A0 08        	ldy #8
002E1E  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E20  3  85 rr        	sta dispy
002E22  3  A0 09        	ldy #9
002E24  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E26  3  18           	clc
002E27  3  69 08        	adc #SPR_WID		; look right 8 pixels.
002E29  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E2B  3               cangh:
002E2B  3               cangh2:
002E2B  3  A9 04        	lda #(SPR_HGT/3+1)	; default rows to write.
002E2D  3  85 63        	sta z80_b
002E2F  3  A4 rr        	ldy dispy		; y position.
002E31  3  B9 4A DF     	lda V_SPR_PTR,y		; does x straddle cells?
002E34  3  D0 02        	bne cangh0		; yes, loop counter is good.
002E36  3  C6 63        	dec z80_b		; one less row to write.
002E38  3               cangh0:
002E38  3  20 70 2F     	jsr tstbl		; get map address.
002E3B  3               cangh1:
002E3B  3  20 53 2E     	jsr lrchk		; standard left/right check.
002E3E  3  F0 01        	beq :+
002E40  3  60           	rts			; no way through.
002E41  3               :
002E41  3  48           	pha
002E42  3  18           	clc
002E43  3  A5 rr        	lda bufaddr
002E45  3  69 28        	adc #ScrWidth		; look down.
002E47  3  85 rr        	sta bufaddr
002E49  3  90 02        	bcc :+
002E4B  3  E6 rr        	inc bufaddr+1
002E4D  3               :
002E4D  3  68           	pla
002E4E  3               
002E4E  3  C6 63        	dec z80_b
002E50  3  D0 E9        	bne cangh1
002E52  3  60           	rts
002E53  3               
002E53  3               ;-------------------------------------
002E53  3               ; Check left/right movement is okay.
002E53  3               ;
002E53  3               ; Input:
002E53  3               ;  bufaddr = MAP + x/8 + y/8*32
002E53  3               ;
002E53  3               ; Output:
002E53  3               ;  A  = 0 is ok, A <>0 is not ok
002E53  3               ;-------------------------------------
002E53  3               
002E53  3               lrchk:
002E53  3  A0 00        	ldy #0
002E55  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002E57  3  C9 02        	cmp #WALL 		; is it passable?
002E59  3  F0 0A        	beq lrchkx		; no.
002E5B  3               
002E5B  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002E5D  3  F0 06        	beq lrchkx		; not passable.
002E5F  3  A9 00        	lda #0
002E61  3  60           	rts
002E62  3               
002E62  3               ;--------------------------------------------------------------
002E62  3               ; Called by mmenu
002E62  3               ;--------------------------------------------------------------
002E62  3               
002E62  3               always:
002E62  3  A9 FF        	lda #255		; report it as okay.
002E64  3  60           	rts
002E65  3               
002E65  3               lrchkx:
002E65  3  A9 01        	lda #1 			; reset all bits.
002E67  3  60           	rts
002E68  3               
002E68  3               
002E68  3               ;--------------------------------------------------------------
002E68  3               ; Check platform or solid item is not in way.
002E68  3               ;
002E68  3               ; Input:
002E68  3               ;  bufaddr = MAP + x/2 + y/3*40
002E68  3               ;
002E68  3               ; Output:
002E68  3               ;  A  = 0 is ok, A <>0 is not ok
002E68  3               ;--------------------------------------------------------------
002E68  3               
002E68  3               plchk:
002E68  3  A0 00        	ldy #0
002E6A  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002E6C  3  C9 02        	cmp #WALL 		; is it passable?
002E6E  3  F0 F5        	beq lrchkx		; no.
002E70  3               .if pflag .or dflag
002E70  3               	cmp #FODDER		; fodder has to be dug.
002E70  3               	beq lrchkx		; not passable.
002E70  3               .endif
002E70  3  C9 01        	cmp #PLATFM		; platform is solid.
002E72  3  F0 03        	beq plchkx		; not passable.
002E74  3               .if lflag
002E74  3               	cmp #LADDER		; is it a ladder?
002E74  3               	beq lrchkx		; on ladder, deny movement.
002E74  3               .endif
002E74  3               plchk0:
002E74  3  A9 00        	lda #0			; report as ok
002E76  3  60           	rts
002E77  3               plchkx:
002E77  3  A5 rr        	lda dispy		; y coordinate.
002E79  3  29 03        	and #3			; position straddling blocks.
002E7B  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002E7D  3  4C 74 2E     	jmp plchk0
002E80  3               
002E80  3               ;--------------------------------------------------------------
002E80  3               ; Check ladder is available.
002E80  3               ;
002E80  3               ; Input:
002E80  3               ;  bufaddr = MAP + x/8 + y/8*32
002E80  3               ;
002E80  3               ; Output:
002E80  3               ;  A  = 0 is ok, A <>0 is not ok
002E80  3               ;--------------------------------------------------------------
002E80  3               
002E80  3               .if lflag
002E80  3               ldchk:
002E80  3               	ldy #0
002E80  3               	lda (bufaddr),y 	; fetch cell.
002E80  3               	cmp #LADDER 		; is it a ladder?
002E80  3               	beq :+
002E80  3               	lda #1
002E80  3               	rts  			; return with zero flag set accordingly.
002E80  3               :
002E80  3               	lda #0
002E80  3               	rts
002E80  3               .endif
002E80  3               
002E80  3               ;--------------------------------------------------------------
002E80  3               ; Get collectables.
002E80  3               ;--------------------------------------------------------------
002E80  3               
002E80  3               .if cflag
002E80  3               getcol:
002E80  3  A9 08                lda #COLECT             ; collectable blocks.
002E82  3  85 63                sta z80_b
002E84  3  20 B5 2E             jsr tded                ; test for collectable blocks.
002E87  3  C5 63                cmp z80_b               ; did we find one?
002E89  3  F0 01                beq :+
002E8B  3  60                   rts                     ; none were found, job done.
002E8C  3               :
002E8C  3  20 95 2E             jsr gtblk               ; get block.
002E8F  3  20 60 3B             jsr evnt20              ; collected block event.
002E92  3  4C 80 2E             jmp getcol              ; repeat until none left.
002E95  3               
002E95  3               ; Get collectable block.
002E95  3               
002E95  3               gtblk:
002E95  3  A0 00        	ldy #0
002E97  3  B1 rr        	lda (bufaddr),y
002E99  3  8D C2 2C     	sta colpatt		; save collectable block nr
002E9C  3               
002E9C  3  A9 00                lda #0
002E9E  3  91 rr                sta (bufaddr),y		; make it empty now in MAP.
002EA0  3               
002EA0  3  A5 rr        	lda bufaddr		; calculate screenaddr
002EA2  3  85 rr        	sta scraddr
002EA4  3  38           	sec
002EA5  3  A5 rr        	lda bufaddr+1
002EA7  3  E9 D4        	sbc #>(MAP-ScreenAddr)	;$d4
002EA9  3  85 rr        	sta scraddr+1
002EAB  3               
002EAB  3  A0 00        	ldy #0			; erase block on screen
002EAD  3  B1 rr        	lda (scraddr),y
002EAF  3  4D C2 2C     	eor colpatt
002EB2  3  91 rr        	sta (scraddr),y
002EB4  3               
002EB4  3  60           	rts
002EB5  3               .endif
002EB5  3               
002EB5  3               ;--------------------------------------------------------------
002EB5  3               ; Touched deadly block check.
002EB5  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002EB5  3               ;
002EB5  3               ; Input:
002EB5  3               ;  IX = sprite address
002EB5  3               ;
002EB5  3               ; Output:
002EB5  3               ;  A  = 0 is ok, A=5 is not ok
002EB5  3               ;--------------------------------------------------------------
002EB5  3               
002EB5  3               tded:
002EB5  3  A0 08        	ldy #8
002EB7  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002EB9  3  85 rr        	sta dispy
002EBB  3  C8           	iny
002EBC  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002EBE  3  85 rr        	sta dispx		; coords in dispx,dispy.
002EC0  3  20 70 2F     	jsr tstbl		; get map address.
002EC3  3  48           	pha
002EC4  3  A9 27        	lda #ScrWidth-1		; default distance to next line down.
002EC6  3  85 64        	sta z80_e
002EC8  3  68           	pla
002EC9  3  C5 63        	cmp z80_b		; is this the required block?
002ECB  3  D0 01        	bne :+
002ECD  3  60           	rts			; yes.
002ECE  3               :
002ECE  3  E6 rr        	inc bufaddr 		; next cell.
002ED0  3  D0 02        	bne :+
002ED2  3  E6 rr        	inc bufaddr+1
002ED4  3               :
002ED4  3  A0 00        	ldy #0
002ED6  3  B1 rr        	lda (bufaddr),y		; fetch type.
002ED8  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002EDA  3  D0 01        	bne :+
002EDC  3  60           	rts			; yes.
002EDD  3               :
002EDD  3  A5 rr        	lda dispx		; horizontal position.
002EDF  3  85 62        	sta z80_c 		; store column in c register.
002EE1  3  29 01        	and #1			; is it straddling cells?
002EE3  3  D0 03        	bne :+
002EE5  3  4C F9 2E     	jmp tded0		; no.
002EE8  3               :
002EE8  3  E6 rr        	inc bufaddr 		; last cell.
002EEA  3  D0 02        	bne :+
002EEC  3  E6 rr        	inc bufaddr+1
002EEE  3               :
002EEE  3  A0 00        	ldy #0
002EF0  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002EF2  3  C5 63        	cmp z80_b		; is this the block?
002EF4  3  D0 01        	bne :+
002EF6  3  60           	rts			; yes.
002EF7  3               :
002EF7  3  C6 64        	dec z80_e		; one less cell to next row down.
002EF9  3               tded0:
002EF9  3  18           	clc 			; point to next row.
002EFA  3  A5 rr        	lda bufaddr
002EFC  3  65 64        	adc z80_e
002EFE  3  85 rr        	sta bufaddr
002F00  3  90 02        	bcc :+
002F02  3  E6 rr        	inc bufaddr+1
002F04  3               :
002F04  3  A0 00        	ldy #0
002F06  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002F08  3  C5 63        	cmp z80_b		; is this fatal?
002F0A  3  D0 01        	bne :+
002F0C  3  60           	rts			; yes.
002F0D  3               :
002F0D  3  E6 rr        	inc bufaddr 		; next cell.
002F0F  3  D0 02        	bne :+
002F11  3  E6 rr        	inc bufaddr+1
002F13  3               :
002F13  3  A0 00        	ldy #0
002F15  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F17  3  C5 63        	cmp z80_b		; is this fatal?
002F19  3  D0 01        	bne :+
002F1B  3  60           	rts			; yes.
002F1C  3               :
002F1C  3  A5 62        	lda z80_c		; horizontal position.
002F1E  3  29 01        	and #1			; is it straddling cells?
002F20  3  D0 03        	bne :+
002F22  3  4C 34 2F     	jmp tded1 		; no.
002F25  3               :
002F25  3  E6 rr        	inc bufaddr		; last cell.
002F27  3  D0 02        	bne :+
002F29  3  E6 rr        	inc bufaddr+1
002F2B  3               :
002F2B  3  A0 00        	ldy #0
002F2D  3  B1 rr        	lda (bufaddr),y		; fetch type.
002F2F  3  C5 63        	cmp z80_b		; is this fatal?
002F31  3  D0 01        	bne :+
002F33  3  60           	rts			; yes.
002F34  3               :
002F34  3               tded1:
002F34  3  A5 rr        	lda dispy		; vertical position.
002F36  3  29 03        	and #3 			; is it straddling cells?
002F38  3  D0 01        	bne :+
002F3A  3  60           	rts			; no, job done.
002F3B  3               :
002F3B  3  18           	clc			; point to next row.
002F3C  3  A5 rr        	lda bufaddr
002F3E  3  65 64        	adc z80_e
002F40  3  85 rr        	sta bufaddr
002F42  3  90 02        	bcc :+
002F44  3  E6 rr        	inc bufaddr+1
002F46  3               :
002F46  3  A0 00        	ldy #0
002F48  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002F4A  3  C5 63        	cmp z80_b		; is this fatal?
002F4C  3  D0 01        	bne :+
002F4E  3  60           	rts			; yes.
002F4F  3               :
002F4F  3  E6 rr        	inc bufaddr		; next cell.
002F51  3  D0 02        	bne :+
002F53  3  E6 rr        	inc bufaddr+1
002F55  3               :
002F55  3  A0 00        	ldy #0
002F57  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F59  3  C5 63        	cmp z80_b		; is this fatal?
002F5B  3  D0 01        	bne :+
002F5D  3  60           	rts			; yes.
002F5E  3               :
002F5E  3  A5 62        	lda z80_c		; horizontal position.
002F60  3  29 01        	and #1			; is it straddling cells?
002F62  3  D0 01        	bne :+
002F64  3  60           	rts			; no.
002F65  3               :
002F65  3  E6 rr        	inc bufaddr		; last cell.
002F67  3  D0 02        	bne :+
002F69  3  E6 rr        	inc bufaddr+1
002F6B  3               :
002F6B  3  A0 00        	ldy #0
002F6D  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002F6F  3  60           	rts 			; return with final type in accumulator.
002F70  3               
002F70  3               ;---------------------------------------------------
002F70  3               ; Fetch block type at (dispx, dispy).
002F70  3               ;
002F70  3               ; Output:
002F70  3               ;  A = block type
002F70  3               ;---------------------------------------------------
002F70  3               
002F70  3               tstbl:
002F70  3  A5 rr        	lda dispy 		; fetch y coord.
002F72  3  AA           	tax
002F73  3               
002F73  3  A5 rr        	lda dispx		; x/8
002F75  3  4A           	lsr a
002F76  3  85 rr        	sta charx
002F78  3               
002F78  3  18           	clc
002F79  3  BD 00 DC     	lda SCADTB_lb,x
002F7C  3  65 rr        	adc charx
002F7E  3  85 rr        	sta bufaddr
002F80  3               
002F80  3  BD 00 DD     	lda SCADTB_hb,x
002F83  3  69 D4        	adc #(>MAP->ScreenAddr)
002F85  3  85 rr        	sta bufaddr+1
002F87  3               
002F87  3  A0 00        	ldy #0
002F89  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002F8B  3  60           	rts
002F8C  3               
002F8C  3               ;-------------------------------------------------------------------
002F8C  3               ; Jump - if we can.
002F8C  3               ; Requires initial speed to be set up in accumulator prior to call.
002F8C  3               ;
002F8C  3               ; Input:
002F8C  3               ;  IX = sprite address
002F8C  3               ;-------------------------------------------------------------------
002F8C  3               
002F8C  3               jump:
002F8C  3  A0 0D        	ldy #13
002F8E  3  B1 68        	lda (z80_ix),y		; jump table low.
002F90  3  A0 0E        	ldy #14
002F92  3  11 68        	ora (z80_ix),y		; jump table high.
002F94  3  F0 01        	beq :+
002F96  3  60           	rts			; already in the air.
002F97  3               :
002F97  3  A9 47        	lda #>jtab
002F99  3  A0 0E        	ldy #14
002F9B  3  91 68        	sta (z80_ix),y		; set jump high.
002F9D  3  A9 2B        	lda #<jtab		; jump table start.
002F9F  3  A0 0D        	ldy #13
002FA1  3  91 68        	sta (z80_ix),y		; set jump low.
002FA3  3  60           	rts
002FA4  3               
002FA4  3               ; Jump table.
002FA4  3               
002FA4  3               ;jtab:
002FA4  3               ;	.byte 248,250,252
002FA4  3               ;	.byte 254,254,255
002FA4  3               ;	.byte 255,255,0,0
002FA4  3               ;	.byte 0,1,1,1,2,2
002FA4  3               ;	.byte 4,6,8,8,8,99
002FA4  3               
002FA4  3               ;------------------------------------------------
002FA4  3               ; Random numbers code.
002FA4  3               ; Pseudo-random number generator, 8-bit.
002FA4  3               ;
002FA4  3               ; Output:
002FA4  3               ;  RND = random number
002FA4  3               ;------------------------------------------------
002FA4  3               
002FA4  3               random:
002FA4  3  A5 rr        	lda seed
002FA6  3  F0 05        	beq doEor
002FA8  3  0A           	asl a
002FA9  3  F0 04        	beq noEor
002FAB  3  90 02        	bcc noEor
002FAD  3  49 1D        doEor:	eor #$1d
002FAF  3  85 rr        noEor:	sta seed
002FB1  3  60           	rts
002FB2  3               
002FB2  3  A5 rr        	lda seed		; get last random number.
002FB4  3  0A           	asl a
002FB5  3  0A           	asl a
002FB6  3  18           	clc
002FB7  3  65 rr        	adc seed
002FB9  3  18           	clc
002FBA  3  69 45        	adc #$45
002FBC  3  85 rr        	sta seed		; store new seed.
002FBE  3  85 rr        	sta varrnd		; return number in variable.
002FC0  3  60           	rts
002FC1  3               
002FC1  3               ;--------------------------------------------------------
002FC1  3               ; Keys
002FC1  3               ;
002FC1  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002FC1  3               ;             ||||||||
002FC1  3               ;             |||||||+> Right    KEY 0  - X
002FC1  3               ;             ||||||+-> Left     KEY 1  - Z
002FC1  3               ;             |||||+--> Down     KEY 2  - .
002FC1  3               ;             ||||+---> Up       KEY 3  - ;
002FC1  3               ;             |||+----> Fire1    KEY 4  - SPC
002FC1  3               ;             ||+-----> Fire2    KEY 5  - Q
002FC1  3               ;             |+------> Fire3    KEY 6  - P
002FC1  3               ;             +-------> Not used
002FC1  3               ;
002FC1  3               ;                       Option1  KEY 7  - 1
002FC1  3               ;                       Option2  KEY 8  - 2
002FC1  3               ;                       Option3  KEY 9  - 3
002FC1  3               ;                       Option4  KEY 10 - 4
002FC1  3               ;--------------------------------------------------------
002FC1  3               
002FC1  3               ;              X   Z   .   ;  SPC  Q   P
002FC1  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002FC1  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002FC1  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002FC5  3  00 04 14     
002FC8  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002FCC  3               
002FCC  3               ;-------------------------------------------------------
002FCC  3               ; Joystick and keyboard reading routines.
002FCC  3               ;
002FCC  3               ; contrl = 0, Keyboard
002FCC  3               ;          1, JoyKeyb
002FCC  3               ;          2, JoyMMC
002FCC  3               ;-------------------------------------------------------
002FCC  3               
002FCC  3               joykey:
002FCC  3  A5 rr        	lda contrl 		; control flag.
002FCE  3  C9 01        	cmp #1
002FD0  3  D0 03        	bne :+
002FD2  3  4C 2E 48     	jmp joy1 		; read keyboard joystick
002FD5  3               :
002FD5  3  C9 02        	cmp #2
002FD7  3  D0 03        	bne :+
002FD9  3  4C 2F 48     	jmp joy2 		; read MMC joystick.
002FDC  3               :
002FDC  3               ; Keyboard controls.
002FDC  3               
002FDC  3  A9 00        	lda #0		 	; zero reading.
002FDE  3  85 64        	sta z80_e
002FE0  3               
002FE0  3  A0 06        	ldy #6	 		; address of last key.
002FE2  3               joyke0:
002FE2  3  B9 2C 47     	lda keys,y 		; get key from table.
002FE5  3  20 30 48     	jsr ktest		; being pressed?
002FE8  3  26 64        	rol z80_e 		; rotate into reading.
002FEA  3               
002FEA  3  88           	dey		 	; next key.
002FEB  3  10 F5        	bpl joyke0 		; repeat for all keys.
002FED  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002FEF  3  85 rr        	sta joyval		; remember value.
002FF1  3  60           	rts
002FF2  3               
002FF2  3               ;---------------------------------------------------------------
002FF2  3               ; Getkey in column,row format
002FF2  3               ;
002FF2  3               ; Output:
002FF2  3               ;  A = high nibble=row and low nibble=column key in matrix
002FF2  3               ;---------------------------------------------------------------
002FF2  3               
002FF2  3               ;kget:
002FF2  3               ;	lda #ScrMode		; high-mono mode.
002FF2  3               ;	sta ScrSelAddr		; screen select port
002FF2  3               ;	stx xtmp
002FF2  3               ;kget4:
002FF2  3               ;	jsr READKEY		; read key until pressed
002FF2  3               ;	cpy #255
002FF2  3               ;	beq kget4
002FF2  3               ;	sta rcol		; save column
002FF2  3               ;	stx rrow		; determine row
002FF2  3               ;kget3:
002FF2  3               ;	jsr READKEY		; wait until key released
002FF2  3               ;	cpy #255
002FF2  3               ;	bne kget3
002FF2  3               ;
002FF2  3               ;	sec			; calculate matrix row
002FF2  3               ;	lda #10
002FF2  3               ;	sbc rrow
002FF2  3               ;	asl a
002FF2  3               ;	asl a
002FF2  3               ;	asl a
002FF2  3               ;	asl a
002FF2  3               ;	sta rrow
002FF2  3               ;
002FF2  3               ;	ldy #255		; find column mask
002FF2  3               ;kget1:
002FF2  3               ;	iny
002FF2  3               ;	lda keymask,y
002FF2  3               ;	cmp rcol
002FF2  3               ;	beq kget2
002FF2  3               ;	jmp kget1
002FF2  3               ;kget2:
002FF2  3               ;	tya			; determine column
002FF2  3               ;	clc
002FF2  3               ;	adc rrow
002FF2  3               ;	ldx xtmp
002FF2  3               ;	rts
002FF2  3               
002FF2  3               ;---------------------------------------------------------------
002FF2  3               ; Display message.
002FF2  3               ;
002FF2  3               ; Input:
002FF2  3               ;  A = message number
002FF2  3               ;---------------------------------------------------------------
002FF2  3               
002FF2  3               dmsg:
002FF2  3  AA           	tax
002FF3  3  A9 6D        	lda #<msgdat		; pointer to messages.
002FF5  3  85 66        	sta z80_l
002FF7  3  A9 3B        	lda #>msgdat
002FF9  3  85 67        	sta z80_h
002FFB  3  20 E2 30     	jsr getwrd		; get message number.
002FFE  3               dmsg3:
002FFE  3  20 D9 30     	jsr preprt		; pre-printing stuff.
003001  3  20 0B 2B     	jsr checkx		; make sure we"re in a printable range.
003004  3  A5 rr        	lda prtmod		; print mode.
003006  3  D0 50        	bne bmsg1		; no, double-height text.
003008  3               
003008  3  AD 80 38     	lda fcolour		; Set textcolour
00300B  3  20 89 2C     	jsr pchar
00300E  3  20 C6 30     	jsr nexpos
003011  3               dmsg0:
003011  3  A5 67        	lda z80_h		; store string pointer.
003013  3  48           	pha
003014  3  A5 66        	lda z80_l
003016  3  48           	pha
003017  3               
003017  3  A0 00        	ldy #0
003019  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
00301B  3  29 7F        	and #127		; remove any end marker.
00301D  3  C9 0D        	cmp #13
00301F  3  F0 24        	beq dmsg1
003021  3  20 89 2C     	jsr pchar		; display character.
003024  3  20 C6 30     	jsr nexpos 		; display position.
003027  3  D0 03        	bne dmsg2		; not on a new line.
003029  3  20 CB 30     	jsr nexlin		; next line down.
00302C  3               dmsg2:
00302C  3  68           	pla			; retrieve string pointer
00302D  3  85 66        	sta z80_l
00302F  3  68           	pla
003030  3  85 67        	sta z80_h
003032  3               
003032  3  A0 00        	ldy #0
003034  3  B1 66        	lda (z80_hl),y		; fetch last character.
003036  3  0A           	asl a  			; was it the end?
003037  3  90 03        	bcc :+
003039  3  4C 5E 2B     	jmp dscor2		; yes, job done.
00303C  3               :
00303C  3  E6 66        	inc z80_l		; next character to display.
00303E  3  D0 02        	bne :+
003040  3  E6 67        	inc z80_h
003042  3               :
003042  3  4C 11 30     	jmp dmsg0
003045  3               dmsg1:
003045  3  E6 rr        	inc dispy
003047  3  A5 rr        	lda dispy
003049  3  C9 19        	cmp #ScrHeight
00304B  3  90 04        	bcc dmsg4
00304D  3  A9 00        	lda #0
00304F  3  85 rr        	sta dispy
003051  3               dmsg4:
003051  3  A9 00        	lda #0
003053  3  85 rr        	sta dispx
003055  3  4C 2C 30     	jmp dmsg2
003058  3               
003058  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
003058  3               
003058  3               ;----------------------------------------------------------
003058  3               ; Display message in big text.
003058  3               ;
003058  3               ; Input:
003058  3               ;  HL = string pointer
003058  3               ;----------------------------------------------------------
003058  3               
003058  3               bmsg1:
003058  3  AD 80 38     	lda fcolour		; Set textcolour
00305B  3  20 97 30     	jsr bchar
00305E  3  A9 0D        	lda #13			; Set double height
003060  3  20 97 30     	jsr bchar
003063  3               bmsg4:
003063  3  A0 00        	ldy #0
003065  3  B1 66        	lda (z80_hl),y 		; get character to display.
003067  3  29 7F        	and #127		; only want 7 bits.
003069  3  C9 0D        	cmp #13
00306B  3  F0 15        	beq bmsg2
00306D  3  20 97 30     	jsr bchar 		; display big char.
003070  3               bmsg3:
003070  3  A0 00        	ldy #0
003072  3  B1 66        	lda (z80_hl),y 		; look at last character.
003074  3  48           	pha
003075  3  E6 66        	inc z80_l 		; next character in list.
003077  3  D0 02        	bne :+
003079  3  E6 67        	inc z80_h
00307B  3               :
00307B  3  68           	pla
00307C  3  0A           	asl a  			; was terminator flag set?
00307D  3  90 E4        	bcc bmsg4		; no, keep going.
00307F  3  4C 5E 2B     	jmp dscor2
003082  3               bmsg2:
003082  3  A9 00        	lda #0
003084  3  85 rr        	sta dispx
003086  3  E6 rr        	inc dispy
003088  3  E6 rr        	inc dispy
00308A  3  A5 rr        	lda dispy
00308C  3  C9 18        	cmp #ScrHeight-1
00308E  3  90 E0        	bcc bmsg3
003090  3  A9 00        	lda #0
003092  3  85 rr        	sta dispy
003094  3  4C 70 30     	jmp bmsg3
003097  3               
003097  3               ;----------------------------------------------------------
003097  3               ; Big character display.
003097  3               ;
003097  3               ; Input:
003097  3               ;  A = character
003097  3               ;----------------------------------------------------------
003097  3               
003097  3               bchar:
003097  3  20 89 2C     	jsr pchar 		; display big char.
00309A  3  E6 rr        	inc dispy
00309C  3  20 89 2C     	jsr pchar
00309F  3  C6 rr        	dec dispy
0030A1  3  20 C6 30     	jsr nexpos		; display position.
0030A4  3  60           	rts
0030A5  3               
0030A5  3               bchar3:
0030A5  3  E6 rr        	inc dispy
0030A7  3  20 CB 30     	jsr nexlin 		; next line check.
0030AA  3               bchar2:
0030AA  3  4C 5E 2B     	jmp dscor2		; tidy up line and column variables.
0030AD  3               
0030AD  3               
0030AD  3               ;-------------------------------------------------
0030AD  3               ; Display a character.
0030AD  3               ;
0030AD  3               ; Input:
0030AD  3               ;  A = character
0030AD  3               ;-------------------------------------------------
0030AD  3               
0030AD  3               achar:
0030AD  3  85 63        	sta z80_b 		; copy to b.
0030AF  3  20 D9 30     	jsr preprt 		; get ready to print.
0030B2  3  A5 63        	lda z80_b		; character in accumulator.
0030B4  3  A6 rr        	ldx prtmod 		; print mode.
0030B6  3  F0 03        	beq :+
0030B8  3  4C 97 30     	jmp bchar 		; no, double-height text.
0030BB  3               :
0030BB  3  20 89 2C     	jsr pchar 		; display character.
0030BE  3  20 C6 30     	jsr nexpos 		; display position.
0030C1  3  F0 E2        	beq bchar3		; next line down.
0030C3  3  4C AA 30     	jmp bchar2 		; tidy up.
0030C6  3               
0030C6  3               
0030C6  3               ;-------------------------------------------------
0030C6  3               ; Get next print column position.
0030C6  3               ;-------------------------------------------------
0030C6  3               
0030C6  3               nexpos:
0030C6  3  E6 rr        	inc dispx		; move along one position.
0030C8  3  A5 rr        	lda dispx 		; get coordinate.
0030CA  3               ;	and #31
0030CA  3  60           	rts 			; return with status in zero flag.
0030CB  3               
0030CB  3               ;-------------------------------------------------
0030CB  3               ; Get next print line position.
0030CB  3               ;-------------------------------------------------
0030CB  3               
0030CB  3               nexlin:
0030CB  3  E6 rr        	inc dispy 		; newline.
0030CD  3  A5 rr        	lda dispy		; vertical position.
0030CF  3  C9 19        	cmp #ScrHeight			; past screen edge?
0030D1  3  B0 01        	bcs :+
0030D3  3  60           	rts			; no, still okay.
0030D4  3               :
0030D4  3  A9 00        	lda #0			; restart at top.
0030D6  3  85 rr        	sta dispy
0030D8  3  60           	rts
0030D9  3               
0030D9  3               ;--------------------------------------------------------
0030D9  3               ; Pre-print preliminaries.
0030D9  3               ;--------------------------------------------------------
0030D9  3               
0030D9  3               preprt:
0030D9  3               ;	lda #<(FONT-256)		; font pointer.
0030D9  3               ;	sta grbase		; set up graphics base.
0030D9  3               ;	lda #>(FONT-256)
0030D9  3               ;	sta grbase+1
0030D9  3               prescr:
0030D9  3  A5 rr        	lda charx 		; display coordinates.
0030DB  3  85 rr        	sta dispx		; set up general coordinates.
0030DD  3  A5 rr        	lda chary
0030DF  3  85 rr        	sta dispy
0030E1  3  60           	rts
0030E2  3               
0030E2  3               ;--------------------------------------------------------------
0030E2  3               ; Get messagenr x in hl
0030E2  3               ;
0030E2  3               ; Input:
0030E2  3               ;  HL = pointer to message list
0030E2  3               ;  X  = message number.
0030E2  3               ;--------------------------------------------------------------
0030E2  3               
0030E2  3               getwrd:
0030E2  3  E0 00        	cpx #0
0030E4  3  D0 01        	bne:+ 			; first word in list?
0030E6  3  60           	rts 			; yep, don't search.
0030E7  3               :
0030E7  3  A0 00        	ldy #0
0030E9  3               getwd0:
0030E9  3  B1 66        	lda (z80_hl),y
0030EB  3  48           	pha
0030EC  3  E6 66        	inc z80_l
0030EE  3  D0 02        	bne :+
0030F0  3  E6 67        	inc z80_h
0030F2  3               :
0030F2  3  68           	pla
0030F3  3  C9 80        	cmp #128		; found end?
0030F5  3  30 F2        	bmi getwd0		; no, carry on.
0030F7  3  CA           	dex			; until we have right number.
0030F8  3  D0 EF        	bne getwd0
0030FA  3  60           	rts
0030FB  3               
0030FB  3               ;-----------------------------------------------------------
0030FB  3               ; Bubble sort.
0030FB  3               ;-----------------------------------------------------------
0030FB  3               
0030FB  3               bsort:
0030FB  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0030FD  3  85 rr        	sta qscnt
0030FF  3               
0030FF  3  A9 92        	lda #<sprtab 		; sprite table.
003101  3  85 68        	sta z80_x
003103  3  A9 37        	lda #>sprtab
003105  3  85 69        	sta z80_i
003107  3               bsort0:
003107  3  A0 00        	ldy #0
003109  3  B1 68        	lda (z80_ix),y 		; first sprite type.
00310B  3  C9 FF        	cmp #255 		; is it switched off?
00310D  3  F0 30        	beq swemp		; yes, may need to switch another in here.
00310F  3               
00310F  3  A0 11        	ldy #TABSIZ
003111  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
003113  3  C9 FF        	cmp #255 		; is it enabled?
003115  3  F0 0A        	beq bsort2 		; no, nothing to swap.
003117  3               
003117  3  A0 14        	ldy #TABSIZ+3
003119  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00311B  3  A0 03        	ldy #3
00311D  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
00311F  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
003121  3               bsort2:
003121  3  18           	clc
003122  3  A5 68        	lda z80_x
003124  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003126  3  85 68        	sta z80_x
003128  3  90 02        	bcc :+
00312A  3  E6 69        	inc z80_i
00312C  3               :
00312C  3  C6 rr        	dec qscnt
00312E  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
003130  3  60           	rts
003131  3               
003131  3               ;qscnt:	.byte 0
003131  3               
003131  3               bsort1:
003131  3  A0 11        	ldy #TABSIZ
003133  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
003135  3  C9 FF        	cmp #255		; is it enabled?
003137  3  F0 E8        	beq bsort2		; no, nothing to swap.
003139  3  20 4D 31     	jsr swspr		; swap positions.
00313C  3  4C 21 31     	jmp bsort2
00313F  3               swemp:
00313F  3  A0 11        	ldy #TABSIZ
003141  3  B1 68        	lda (z80_ix),y		; next table entry.
003143  3  C9 FF        	cmp #255		; is that one on?
003145  3  F0 DA        	beq bsort2		; no, nothing to swap.
003147  3  20 4D 31     	jsr swspr		; swap positions.
00314A  3  4C 21 31     	jmp bsort2
00314D  3               
00314D  3               ; Swap sprites.
00314D  3               
00314D  3               swspr:
00314D  3  A5 68        	lda z80_x		; table address
00314F  3  85 64        	sta z80_e		; copy to de pair.
003151  3  85 66        	sta z80_l		; copy to hl pair.
003153  3  A5 69        	lda z80_i
003155  3  85 67        	sta z80_h
003157  3  85 65        	sta z80_d
003159  3               
003159  3  18           	clc
00315A  3  A5 66        	lda z80_l
00315C  3  69 11        	adc #TABSIZ		; distance to second entry.
00315E  3  85 66        	sta z80_l
003160  3  90 02        	bcc :+
003162  3  E6 67        	inc z80_h
003164  3               :
003164  3  A9 11        	lda #TABSIZ		; bytes to swap.
003166  3  85 63        	sta z80_b
003168  3  A0 00        	ldy #0
00316A  3               swspr0:
00316A  3  B1 66        	lda (z80_hl),y		; fetch second byte.
00316C  3  48           	pha
00316D  3  B1 64        	lda (z80_de),y 		; fetch first byte.
00316F  3  91 66        	sta (z80_hl),y 		; copy to second.
003171  3  68           	pla
003172  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
003174  3               
003174  3  E6 64        	inc z80_e 		; next byte.
003176  3  D0 02        	bne :+
003178  3  E6 65        	inc z80_d
00317A  3               :
00317A  3  E6 66        	inc z80_l 		; next byte.
00317C  3  D0 02        	bne :+
00317E  3  E6 67        	inc z80_h
003180  3               :
003180  3  C6 63        	dec z80_b
003182  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
003184  3  60           	rts
003185  3               
003185  3               ;----------------------------------------------------
003185  3               ; Process sprites.
003185  3               ;----------------------------------------------------
003185  3               
003185  3               pspr:
003185  3  A9 0C        	lda #NUMSPR		; sprites to process.
003187  3  85 rr        	sta sprptr
003189  3               
003189  3  A9 92        	lda #<sprtab 		; sprite table.
00318B  3  85 68        	sta z80_x
00318D  3  A9 37        	lda #>sprtab
00318F  3  85 69        	sta z80_i
003191  3               pspr1:
003191  3  A0 00        	ldy #0
003193  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
003195  3  C9 09        	cmp #9 			; within range of sprite types?
003197  3  B0 03        	bcs :+
003199  3  20 AC 31     	jsr pspr2 		; yes, process this one.
00319C  3               :
00319C  3  18           	clc
00319D  3  A5 68        	lda z80_x
00319F  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0031A1  3  85 68        	sta z80_x
0031A3  3  90 02        	bcc :+
0031A5  3  E6 69        	inc z80_i		; next sprite.
0031A7  3               :
0031A7  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
0031A9  3  D0 E6        	bne pspr1
0031AB  3  60           	rts
0031AC  3               
0031AC  3               ;sprptr:	.byte 0
0031AC  3               
0031AC  3               pspr2:
0031AC  3  A5 68        	lda z80_x 		; store original sprite pointer.
0031AE  3  85 rr        	sta ogptr
0031B0  3  A5 69        	lda z80_i
0031B2  3  85 rr        	sta ogptr+1
0031B4  3  20 C0 31     	jsr pspr3		; do the routine.
0031B7  3               rtorg:
0031B7  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0031B9  3  85 68        	sta z80_x
0031BB  3  A5 rr        	lda ogptr+1
0031BD  3  85 69        	sta z80_i
0031BF  3               rtorg0:
0031BF  3  60           	rts
0031C0  3               
0031C0  3               pspr3:
0031C0  3  A9 F5        	lda #<evtyp0		; sprite type events list.
0031C2  3  85 66        	sta z80_l
0031C4  3  A9 31        	lda #>evtyp0
0031C6  3  85 67        	sta z80_h
0031C8  3               pspr4:
0031C8  3  B1 68        	lda (z80_ix),y
0031CA  3  0A           	asl a			; double accumulator.
0031CB  3  18           	clc
0031CC  3  65 66        	adc z80_l
0031CE  3  85 66        	sta z80_l
0031D0  3  90 02        	bcc :+
0031D2  3  E6 67        	inc z80_h
0031D4  3               :
0031D4  3  B1 66        	lda (z80_hl),y
0031D6  3  85 64        	sta z80_e 		; copy to de.
0031D8  3  48           	pha
0031D9  3               
0031D9  3  E6 66        	inc z80_l 		; next byte of address.
0031DB  3  D0 02        	bne :+
0031DD  3  E6 67        	inc z80_h
0031DF  3               :
0031DF  3  B1 66        	lda (z80_hl),y 		; address high.
0031E1  3  85 65        	sta z80_d
0031E3  3               
0031E3  3  48           	pha	 		; swap address into hl.
0031E4  3  A5 67        	lda z80_h
0031E6  3  85 65        	sta z80_d
0031E8  3  68           	pla
0031E9  3  85 67        	sta z80_h
0031EB  3  68           	pla
0031EC  3  85 66        	sta z80_l
0031EE  3  A5 66        	lda z80_l
0031F0  3  85 64        	sta z80_e
0031F2  3               
0031F2  3  6C 66 00     	jmp (z80_hl) 		; go there.
0031F5  3               
0031F5  3               ;ogptr:	.word 0			; original sprite pointer.
0031F5  3               
0031F5  3               ; Address of each sprite type's routine.
0031F5  3               
0031F5  3  8D 38        evtyp0:	.word evnt00
0031F7  3  7F 39        evtyp1:	.word evnt01
0031F9  3  C4 3A        evtyp2:	.word evnt02
0031FB  3  C5 3A        evtyp3:	.word evnt03
0031FD  3  C6 3A        evtyp4:	.word evnt04
0031FF  3  C7 3A        evtyp5:	.word evnt05
003201  3  C8 3A        evtyp6:	.word evnt06
003203  3  C9 3A        evtyp7:	.word evnt07
003205  3  CA 3A        evtyp8:	.word evnt08
003207  3               
003207  3               ;--------------------------------------------------------------
003207  3               ; Display sprites.
003207  3               ;
003207  3               ; Input:
003207  3               ;  IX = sprite table
003207  3               ;--------------------------------------------------------------
003207  3               
003207  3               dspr:
003207  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003209  3  85 rr        	sta sprcnt
00320B  3               dspr0:
00320B  3  A0 00        	ldy #0
00320D  3  B1 68        	lda (z80_ix),y 		; get sprite type.
00320F  3  C9 FF        	cmp #255 		; is it enabled?
003211  3  D0 42        	bne dspr1 		; yes, it needs deleting.
003213  3               dspr5:
003213  3  A0 05        	ldy #5
003215  3  B1 68        	lda (z80_ix),y 		; new type.
003217  3  C9 FF        	cmp #255		; is it enabled?
003219  3  D0 76        	bne dspr3 		; yes, it needs drawing.
00321B  3               dspr2:
00321B  3  A0 05        	ldy #5
00321D  3  B1 68        	lda (z80_ix),y 		; copy new type.
00321F  3  A0 00        	ldy #0
003221  3  91 68        	sta (z80_ix),y
003223  3  A0 06        	ldy #6
003225  3  B1 68        	lda (z80_ix),y 		; copy new image number.
003227  3  A0 01        	ldy #1
003229  3  91 68        	sta (z80_ix),y
00322B  3  A0 07        	ldy #7
00322D  3  B1 68        	lda (z80_ix),y 		; copy new frame.
00322F  3  A0 02        	ldy #2
003231  3  91 68        	sta (z80_ix),y
003233  3  A0 08        	ldy #8
003235  3  B1 68        	lda (z80_ix),y 		; copy new y.
003237  3  A0 03        	ldy #3
003239  3  91 68        	sta (z80_ix),y
00323B  3  A0 09        	ldy #9
00323D  3  B1 68        	lda (z80_ix),y 		; copy new x.
00323F  3  A0 04        	ldy #4
003241  3  91 68        	sta (z80_ix),y
003243  3               
003243  3  18           	clc
003244  3  A5 68        	lda z80_x
003246  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
003248  3  85 68        	sta z80_x
00324A  3  A5 69        	lda z80_i
00324C  3  69 00        	adc #0
00324E  3  85 69        	sta z80_i 		; next sprite.
003250  3  C6 rr        	dec sprcnt
003252  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
003254  3  60           	rts
003255  3               dspr1:
003255  3  A0 05        	ldy #5
003257  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
003259  3  C9 FF        	cmp #255		; is this enabled?
00325B  3  D0 06        	bne dspr4 		; yes, display both.
00325D  3               dspr6:
00325D  3  20 4D 48     	jsr sspria 		; show single sprite.
003260  3  4C 1B 32     	jmp dspr2
003263  3               
003263  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
003263  3               
003263  3               dspr4:
003263  3  A0 04        	ldy #4
003265  3  B1 68        	lda (z80_ix),y		; old x.
003267  3  A0 09        	ldy #9
003269  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
00326B  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
00326D  3               
00326D  3  A0 03        	ldy #3
00326F  3  B1 68        	lda (z80_ix),y		; old y.
003271  3  A0 08        	ldy #8
003273  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003275  3  D0 14        	bne dspr7		; they differ, need to redraw.
003277  3               
003277  3  A0 02        	ldy #2
003279  3  B1 68        	lda (z80_ix),y 		; old frame.
00327B  3  A0 07        	ldy #7
00327D  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00327F  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
003281  3               
003281  3  A0 01        	ldy #1
003283  3  B1 68        	lda (z80_ix),y 		; old image.
003285  3  A0 06        	ldy #6
003287  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003289  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
00328B  3               dspr7:
00328B  3  20 6E 48     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00328E  3  4C 1B 32     	jmp dspr2
003291  3               dspr3:
003291  3  20 68 48     	jsr ssprib 		; show single sprite.
003294  3  4C 1B 32     	jmp dspr2
003297  3               
003297  3               ;sprcnt:	.byte 0
003297  3               
003297  3               ;-----------------------------------------
003297  3               ; Get sprite address calculations.
003297  3               ; gspran = new sprite, gsprad = old sprite.
003297  3               ;
003297  3               ; Input:
003297  3               ;  IX = sprite address
003297  3               ;-----------------------------------------
003297  3               
003297  3               gspran:
003297  3  A0 08        	ldy #8
003299  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00329B  3  85 rr        	sta dispy
00329D  3  A0 09        	ldy #9
00329F  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0032A1  3  85 rr        	sta dispx
0032A3  3  A0 06        	ldy #6
0032A5  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0032A7  3  20 B4 35     	jsr gfrm		; fetch start frame for this sprite.
0032AA  3               
0032AA  3  A0 00        	ldy #0
0032AC  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032AE  3  A0 07        	ldy #7
0032B0  3  18           	clc
0032B1  3  71 68        	adc (z80_ix),y 		; new add frame number.
0032B3  3  4C D2 32     	jmp gspra0
0032B6  3               
0032B6  3               ;-----------------------------------------
0032B6  3               ; Calculate old sprite address
0032B6  3               ;
0032B6  3               ; Input:
0032B6  3               ;  IX = sprite address
0032B6  3               ;
0032B6  3               ; Output:
0032B6  3               ;  B  = right byte mask
0032B6  3               ;  C  = left byte mask
0032B6  3               ;  DE = spriteframe address
0032B6  3               ;  scraddr = screenaddress(dispx,dispy)
0032B6  3               ;-----------------------------------------
0032B6  3               
0032B6  3               gsprad:
0032B6  3  A0 03        	ldy #3
0032B8  3  B1 68        	lda (z80_ix),y		; y coordinate.
0032BA  3  85 rr        	sta dispy
0032BC  3  A0 04        	ldy #4
0032BE  3  B1 68        	lda (z80_ix),y		; x coordinate.
0032C0  3  85 rr        	sta dispx
0032C2  3  A0 01        	ldy #1
0032C4  3  B1 68        	lda (z80_ix),y 		; sprite image.
0032C6  3  20 B4 35     	jsr gfrm 		; fetch start frame for this sprite.
0032C9  3               
0032C9  3               ; z80_hl = sprite framenr
0032C9  3               
0032C9  3  A0 00        	ldy #0
0032CB  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032CD  3               
0032CD  3               ; z80_ix+2 = current framenr
0032CD  3               
0032CD  3  A0 02        	ldy #2
0032CF  3  18           	clc
0032D0  3  71 68        	adc (z80_ix),y 		; add frame number.
0032D2  3               
0032D2  3               ; A = sprite framenr + current framenr
0032D2  3               ;
0032D2  3               ; framestart = z80_d/e = 120 * A (Normal 4 x 32 = 128)
0032D2  3               ; framestart = framestart + (x AND 1) * 60
0032D2  3               ; framestart = framestart + (reftable(dispy) * 20)
0032D2  3               
0032D2  3               gspra0:
0032D2  3               
0032D2  3               ; Calculate framestart = 120 * sprite image
0032D2  3               
0032D2  3  85 65        	sta z80_d
0032D4  3  85 rr        	sta tmp
0032D6  3  A9 00        	lda #0
0032D8  3  85 64        	sta z80_e
0032DA  3  85 rr        	sta tmp+1
0032DC  3               
0032DC  3  46 65        	lsr z80_d	; a * 128
0032DE  3  66 64        	ror z80_e
0032E0  3               
0032E0  3  06 rr        	asl tmp		; a x 8
0032E2  3  26 rr        	rol tmp+1
0032E4  3  06 rr        	asl tmp
0032E6  3  26 rr        	rol tmp+1
0032E8  3  06 rr        	asl tmp
0032EA  3  26 rr        	rol tmp+1
0032EC  3               
0032EC  3  38           	sec		; a*128 - a*8
0032ED  3  A5 64        	lda z80_e
0032EF  3  E5 rr        	sbc tmp
0032F1  3  85 64        	sta z80_e
0032F3  3  A5 65        	lda z80_d
0032F5  3  E5 rr        	sbc tmp+1
0032F7  3  85 65        	sta z80_d
0032F9  3               
0032F9  3               ;.if bflag
0032F9  3               ;	lsr tmp1
0032F9  3               ;	ror tmp2
0032F9  3               ;	clc
0032F9  3               ;	lda tmp2
0032F9  3               ;	adc z80_e
0032F9  3               ;	sta z80_e
0032F9  3               ;	lda tmp1
0032F9  3               ;	adc z80_d
0032F9  3               ;	sta z80_d
0032F9  3               ;.endif
0032F9  3               
0032F9  3               ; Add spritedata address
0032F9  3               
0032F9  3  18           	clc 			; address of play sprites.
0032FA  3  A5 64        	lda z80_e
0032FC  3  69 D6        	adc #<sprgfx
0032FE  3  85 64        	sta z80_e
003300  3  A5 65        	lda z80_d
003302  3  69 3B        	adc #>sprgfx
003304  3  85 65        	sta z80_d
003306  3               
003306  3               ; Check for x-shift
003306  3               
003306  3  A5 rr        	lda dispx 		; x coordinate.
003308  3  29 01        	and #1
00330A  3  F0 0B        	beq chk_y_shift
00330C  3  18           	clc			; Point to odd frame
00330D  3  A5 64        	lda z80_e
00330F  3  69 3C        	adc #60
003311  3  85 64        	sta z80_e
003313  3  90 02        	bcc :+
003315  3  E6 65        	inc z80_d
003317  3               :
003317  3               ; SCheck for y-shift
003317  3               
003317  3               chk_y_shift:
003317  3  A6 rr        	ldx dispy
003319  3  BD 4A DF     	lda V_SPR_PTR,x
00331C  3  18           	clc
00331D  3  65 64        	adc z80_e
00331F  3  85 64        	sta z80_e
003321  3  90 02        	bcc :+
003323  3  E6 65        	inc z80_d
003325  3               :
003325  3               
003325  3               ;------------------------------------------------------------------
003325  3               ; Drop into screen address routine.
003325  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003325  3               ;------------------------------------------------------------------
003325  3               
003325  3               ; Check for bottom of screen
003325  3               
003325  3               scadd:
003325  3  A6 rr        	ldx dispy
003327  3  E0 4C        	cpx #76
003329  3  90 02        	bcc :+
00332B  3  A2 4C        	ldx #76
00332D  3               :
00332D  3               
00332D  3  A5 rr        	lda dispx
00332F  3  4A           	lsr a
003330  3  18           	clc
003331  3  7D 00 DC     	adc SCADTB_lb,x
003334  3  85 rr        	sta scraddr
003336  3  BD 00 DD     	lda SCADTB_hb,x
003339  3  69 00        	adc #0
00333B  3  85 rr        	sta scraddr+1
00333D  3  60           	rts
00333E  3               
00333E  3               spmask:
00333E  3  FF 00        	.byte $ff,$00
003340  3  6A 35        	.byte $6a,$35
003342  3               
003342  3  00           tmp1:	.byte 0
003343  3  00           tmp2:	.byte 0
003344  3               
003344  3               
003344  3               ;----------------------------------------------------------------------
003344  3               ; Line drawn, now work out next target address.
003344  3               ;----------------------------------------------------------------------
003344  3               
003344  3               nline:
003344  3  18           	clc
003345  3  A5 rr        	lda scraddr 		; get low byte of address.
003347  3  69 28        	adc #ScrWidth
003349  3  85 rr        	sta scraddr 		; new low byte of address.
00334B  3  90 02        	bcc :+
00334D  3  E6 rr        	inc scraddr+1 		; new high byte of address.
00334F  3               :
00334F  3  60           	rts
003350  3               
003350  3               ;-----------------------------------------------------------
003350  3               ; Animates a sprite.
003350  3               ;
003350  3               ; Input:
003350  3               ;  IX = sprite address
003350  3               ;  HL = last sprite address
003350  3               ;-----------------------------------------------------------
003350  3               
003350  3               animsp:
003350  3  25 rr        	and frmno
003352  3  F0 01        	beq :+
003354  3  60           	rts
003355  3               :
003355  3  A0 06        	ldy #6
003357  3  B1 68        	lda (z80_ix),y		; sprite image
003359  3  20 B4 35     	jsr gfrm		; get frame data.
00335C  3               
00335C  3  E6 66        	inc z80_l		; point to frames.
00335E  3  D0 02        	bne :+
003360  3  E6 67        	inc z80_h
003362  3               :
003362  3  A0 07        	ldy #7
003364  3  B1 68        	lda (z80_ix),y		; sprite frame.
003366  3  18           	clc
003367  3  69 01        	adc #1			; next one along.
003369  3  A0 00        	ldy #0
00336B  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
00336D  3  90 02        	bcc anims0		; no, not yet.
00336F  3  A9 00        	lda #0			; start at first frame.
003371  3               anims0:
003371  3  A0 07        	ldy #7
003373  3  91 68        	sta (z80_ix),y		; new frame.
003375  3  60           	rts
003376  3               
003376  3               ;--------------------------------------------------------------
003376  3               ; Animate back
003376  3               ;
003376  3               ; Input:
003376  3               ;  IX = sprite address
003376  3               ;  HL = last sprite address
003376  3               ;--------------------------------------------------------------
003376  3               
003376  3               animbk:
003376  3  25 rr        	and frmno
003378  3  F0 01        	beq :+
00337A  3  60           	rts
00337B  3               :
00337B  3  A0 06        	ldy #6
00337D  3  B1 68        	lda (z80_ix),y		; sprite image.
00337F  3  20 B4 35     	jsr gfrm		; get frame data.
003382  3               
003382  3  E6 66        	inc z80_l 		; point to frames.
003384  3  D0 02        	bne :+
003386  3  E6 67        	inc z80_h
003388  3               :
003388  3  A0 07        	ldy #7
00338A  3  B1 68        	lda (z80_ix),y 		; sprite frame.
00338C  3  F0 03        	beq :+
00338E  3  4C 95 33     	jmp rtanb0 		; yes, start at end.
003391  3               :
003391  3  A0 00        	ldy #0
003393  3  B1 66        	lda (z80_hl),y 		; last sprite.
003395  3               rtanb0:
003395  3  38           	sec
003396  3  E9 01        	sbc #1			; next one along.
003398  3  4C 71 33     	jmp anims0		; set new frame.
00339B  3               
00339B  3               ;--------------------------------------------------------------
00339B  3               ; Check for collision with other sprite, strict enforcement.
00339B  3               ;
00339B  3               ; Input:
00339B  3               ;  b		= sprite to test for
00339B  3               ;  ix		= current sprite pointer
00339B  3               ;
00339B  3               ; global:	b
00339B  3               ; local:	x,y,hl,de,skptr
00339B  3               ; calls:	-
00339B  3               ;--------------------------------------------------------------
00339B  3               
00339B  3               sktyp:
00339B  3  A9 92        	lda #<sprtab				; sprite table.
00339D  3  85 66        	sta z80_l
00339F  3  A9 37        	lda #>sprtab
0033A1  3  85 67        	sta z80_h
0033A3  3               numsp2:
0033A3  3  A9 0C        	lda #NUMSPR				; number of sprites.
0033A5  3  85 rr        	sta sktptr
0033A7  3               sktyp0:
0033A7  3  A5 66        	lda z80_l 				; store pointer to sprite.
0033A9  3  85 rr        	sta skptr
0033AB  3  A5 67        	lda z80_h
0033AD  3  85 rr        	sta skptr+1
0033AF  3               
0033AF  3  A0 00        	ldy #0
0033B1  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0033B3  3  C5 63        	cmp z80_b				; is it the type we seek?
0033B5  3  F0 1D        	beq coltyp				; yes, we can use this one.
0033B7  3               sktyp1:
0033B7  3  18           	clc
0033B8  3  A5 rr        	lda skptr				; retrieve sprite pointer.
0033BA  3  69 11        	adc #TABSIZ				; size of each entry.
0033BC  3  85 66        	sta z80_l
0033BE  3  A5 rr        	lda skptr+1
0033C0  3  69 00        	adc #0
0033C2  3  85 67        	sta z80_h
0033C4  3  C6 rr        	dec sktptr					; one less iteration.
0033C6  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0033C8  3  A9 00        	lda #0					; default to ROM address - no sprite.
0033CA  3  85 66        	sta z80_l
0033CC  3  85 67        	sta z80_h
0033CE  3  85 rr        	sta skptr				; store pointer to sprite.
0033D0  3  85 rr        	sta skptr+1
0033D2  3               
0033D2  3  18           	clc					; don't return with zero flag set.
0033D3  3  60           	rts 					; didn't find one.
0033D4  3               
0033D4  3               ;skptr:	.word 0					; search pointer.
0033D4  3               ;sktptr:	.byte 0
0033D4  3               
0033D4  3               coltyp:
0033D4  3  A0 00        	ldy #0
0033D6  3  B1 68        	lda (z80_ix),y				; current sprite type.
0033D8  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0033DA  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0033DC  3               colty0:
0033DC  3  A0 09        	ldy #9					; distance to x position in table.
0033DE  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0033E0  3  85 64        	sta z80_e
0033E2  3  88           	dey
0033E3  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0033E5  3  85 65        	sta z80_d
0033E7  3               
0033E7  3               ; Drop into collision detection.
0033E7  3               
0033E7  3               colc16:
0033E7  3  A0 09        	ldy #9
0033E9  3  B1 68        	lda (z80_ix),y			 	; x coord.
0033EB  3  38           	sec					; subtract x.
0033EC  3  E5 64        	sbc z80_e
0033EE  3  B0 05        	bcs  colc1a 				; result is positive.
0033F0  3  49 FF        	eor #$ff				; make negative positive.
0033F2  3  18           	clc
0033F3  3  69 01        	adc #1
0033F5  3               colc1a:
0033F5  3  C9 08        	cmp #SPR_WID				; within x range?
0033F7  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0033F9  3  85 62        	sta z80_c				; store difference.
0033FB  3               
0033FB  3  A0 08        	ldy #8
0033FD  3  B1 68        	lda (z80_ix),y				; y coord.
0033FF  3  38           	sec
003400  3  E5 65        	sbc z80_d				; subtract y.
003402  3  B0 05        	bcs colc1b				; result is positive.
003404  3  49 FF        	eor #$ff				; make negative positive.
003406  3  18           	clc
003407  3  69 01        	adc #1
003409  3               colc1b:
003409  3  C9 09        	cmp #SPR_HGT					; within y range?
00340B  3  B0 AA        	bcs sktyp1 				; no - they've missed.
00340D  3  18           	clc					; add x difference.
00340E  3  65 62        	adc z80_c
003410  3  C9 0C        	cmp #12					; only 5 corner pixels touching?
003412  3  B0 02        	bcs :+
003414  3  38           	sec
003415  3  60           	rts 					; carry set if there's a collision.
003416  3               :
003416  3  4C B7 33     	jmp sktyp1				; try next sprite in table.
003419  3               colty1:
003419  3  A5 68        	lda z80_x  				; compare the two.
00341B  3  C5 66        	cmp z80_l
00341D  3  D0 09        	bne end_col
00341F  3  A5 69        	lda z80_i
003421  3  C5 67        	cmp z80_h
003423  3  D0 03        	bne end_col
003425  3  4C B7 33     	jmp sktyp1 				; addresses are identical.
003428  3               end_col:
003428  3  4C DC 33     	jmp colty0
00342B  3               
00342B  3               ;-----------------------------------------------------------
00342B  3               ; Display number, left aligned
00342B  3               ;
00342B  3               ; Input:
00342B  3               ;  a		= number
00342B  3               ;
00342B  3               ; global:	-
00342B  3               ; local:	a,y,bc,hl,displ0
00342B  3               ; calls:	num2ch,dmsg3
00342B  3               ;-----------------------------------------------------------
00342B  3               
00342B  3               disply:
00342B  3  85 61        	sta z80_a
00342D  3  A9 53        	lda #<displ0				; display workspace.
00342F  3  85 62        	sta z80_c
003431  3  A9 34        	lda #>displ0
003433  3  85 63        	sta z80_b
003435  3  A5 61        	lda z80_a
003437  3  20 B9 29     	jsr num2ch				; convert accumulator to string.
00343A  3               displ1:
00343A  3  C6 62        	dec z80_c				; back one character.
00343C  3  D0 02        	bne :+
00343E  3  C6 63        	dec z80_b
003440  3               :
003440  3  A0 00        	ldy #0
003442  3  B1 62        	lda (z80_bc),y				; fetch digit.
003444  3  09 80        	ora #128				; insert end marker.
003446  3  91 62        	sta (z80_bc),y				; new value.
003448  3               
003448  3  A9 53        	lda #<displ0				; display space.
00344A  3  85 66        	sta z80_l
00344C  3  A9 34        	lda #>displ0
00344E  3  85 67        	sta z80_h
003450  3               
003450  3  4C FE 2F     	jmp dmsg3				; display the string.
003453  3               
003453  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003457  3               
003457  3               ;----------------------------------------------------------------
003457  3               ; Initialise screen.
003457  3               ;
003457  3               ; global:	roomtb,scno
003457  3               ; local:	-
003457  3               ; calls:	tstcs
003457  3               ;----------------------------------------------------------------
003457  3               
003457  3               initsc:
003457  3  AD 6F 38     	lda roomtb 			; whereabouts in the map are we?
00345A  3  20 64 34     	jsr tstsc 			; find displacement.
00345D  3  C9 FF        	cmp #255 			; is it valid?
00345F  3  F0 02        	beq init_end 			; no, it's rubbish.
003461  3  85 rr        	sta scno			; store new room number.
003463  3               init_end:
003463  3  60           	rts
003464  3               
003464  3               ;----------------------------------------------------------------
003464  3               ; Test screen.
003464  3               ;
003464  3               ; global:	-
003464  3               ; local:	x
003464  3               ; calls:	-
003464  3               ;----------------------------------------------------------------
003464  3               
003464  3               tstsc:
003464  3  85 rr        	sta tmproom
003466  3  18           	clc
003467  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
003469  3  AA           	tax 				; add displacement to map data.
00346A  3  BD 83 38     	lda mapdat-MAPWID,x 		; find room number there.
00346D  3  60           	rts
00346E  3               
00346E  3               ;tmproom:	.byte 0
00346E  3               
00346E  3               ;--------------------------
00346E  3               ; Screen left.
00346E  3               ;--------------------------
00346E  3               
00346E  3               scrl:
00346E  3  AD 6F 38     	lda roomtb 			; present room table pointer.
003471  3  38           	sec
003472  3  E9 01        	sbc #1				; room left.
003474  3               scrl0:
003474  3  20 64 34     	jsr tstsc			; test screen.
003477  3  C9 FF        	cmp #255			; is there a screen this way?
003479  3  D0 01        	bne :+
00347B  3  60           	rts				; no, return to loop.
00347C  3               :
00347C  3  A5 rr        	lda tmproom			; restore room displacement.
00347E  3  8D 6F 38     	sta roomtb			; new room table position.
003481  3               scrl1:
003481  3  20 57 34     	jsr initsc 			; set new screen.
003484  3  A9 02        	lda #2
003486  3  85 rr        	sta restfl 			; set it.
003488  3  60           	rts
003489  3               scrr:
003489  3  AD 6F 38     	lda roomtb 			; room table pointer.
00348C  3  18           	clc
00348D  3  69 01        	adc #1				; room right.
00348F  3  4C 74 34     	jmp scrl0
003492  3               scru:
003492  3  AD 6F 38     	lda roomtb 			; room table pointer.
003495  3  38           	sec
003496  3  E9 03        	sbc #MAPWID 			; room up.
003498  3  4C 74 34     	jmp scrl0
00349B  3               scrd:
00349B  3  AD 6F 38     	lda roomtb 			; room table pointer.
00349E  3  18           	clc
00349F  3  69 03        	adc #MAPWID 			; room down.
0034A1  3  4C 74 34     	jmp scrl0
0034A4  3               
0034A4  3               ;-----------------------------------------
0034A4  3               ; Jump to new screen.
0034A4  3               ;-----------------------------------------
0034A4  3               
0034A4  3               nwscr:
0034A4  3  A2 00        	ldx #0				; start of map data.
0034A6  3               nwscr0:
0034A6  3  DD 86 38     	cmp mapdat,x
0034A9  3  F0 06        	beq nwscr1			; have we found a match for screen?
0034AB  3  E8           	inx 				; next room.
0034AC  3  E0 50        	cpx #80				; zero room count, 80 to search.
0034AE  3  D0 F6        	bne nwscr0			; keep looking.
0034B0  3  60           	rts
0034B1  3               nwscr1:
0034B1  3  8E 6F 38     	stx roomtb			; set the map position.
0034B4  3  4C 81 34     	jmp scrl1			; draw new room.
0034B7  3               
0034B7  3               
0034B7  3               ;----------------------------------------------------------
0034B7  3               ; Gravity processing.
0034B7  3               ;----------------------------------------------------------
0034B7  3               
0034B7  3               grav:
0034B7  3  A0 0D        	ldy #13
0034B9  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0034BB  3  85 66        	sta z80_l
0034BD  3  A0 0E        	ldy #14
0034BF  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0034C1  3  85 67        	sta z80_h
0034C3  3  05 66        	ora z80_l			; merge in low byte.
0034C5  3  D0 01        	bne :+
0034C7  3  60           	rts				; if neither is set, we're not in the air.
0034C8  3               :
0034C8  3  A0 00        	ldy #0
0034CA  3  B1 66        	lda (z80_hl),y			; pixels to move.
0034CC  3  85 61        	sta z80_a
0034CE  3  C9 63        	cmp #99				; reached the end?
0034D0  3  D0 0C        	bne grav0			; no, continue.
0034D2  3               grav2:
0034D2  3  C6 66        	dec z80_l			; go back to previous value.
0034D4  3  C9 FF        	cmp #$ff
0034D6  3  D0 02        	bne :+
0034D8  3  C6 67        	dec z80_h
0034DA  3               :
0034DA  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0034DC  3  85 61        	sta z80_a
0034DE  3               grav0:
0034DE  3  E6 66        	inc z80_l			; point to next table entry.
0034E0  3  D0 02        	bne :+
0034E2  3  E6 67        	inc z80_h
0034E4  3               :
0034E4  3  A5 66        	lda z80_l
0034E6  3  A0 0D        	ldy #13
0034E8  3  91 68        	sta (z80_ix),y			; store new pointer low.
0034EA  3  A5 67        	lda z80_h
0034EC  3  A0 0E        	ldy #14
0034EE  3  91 68        	sta (z80_ix),y			; store new pointer high.
0034F0  3               grav1:
0034F0  3  A5 61        	lda z80_a
0034F2  3  D0 01        	bne :+				; any movement required?
0034F4  3  60           	rts				; no, not this time.
0034F5  3               :
0034F5  3  A5 61        	lda z80_a
0034F7  3  C9 80        	cmp #128			; is it up or down?
0034F9  3  B0 15        	bcs gravu			; it's up.
0034FB  3               gravd:
0034FB  3  85 63        	sta z80_b			; set pixels to move.
0034FD  3               gravd0:
0034FD  3  20 BD 2D     	jsr cangd			; can we go down?
003500  3  D0 28        	bne gravst			; can't move down, so stop.
003502  3  A0 08        	ldy #8
003504  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003506  3  18           	clc
003507  3  69 01        	adc #1
003509  3  91 68        	sta (z80_ix),y
00350B  3  C6 63        	dec z80_b
00350D  3  D0 EE        	bne gravd0
00350F  3  60           	rts
003510  3               gravu:
003510  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003512  3  18           	clc
003513  3  69 01        	adc #1
003515  3  85 63        	sta z80_b			; set pixels to move.
003517  3               gravu0:
003517  3  20 70 2D     	jsr cangu			; can we go up?
00351A  3  D0 6E        	bne ifalls			; can't move up, go down next.
00351C  3  A0 08        	ldy #8
00351E  3  B1 68        	lda (z80_ix),y
003520  3  38           	sec
003521  3  E9 01        	sbc #1
003523  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003525  3  C6 63        	dec z80_b
003527  3  D0 EE        	bne gravu0
003529  3  60           	rts
00352A  3               gravst:
00352A  3  A0 0D        	ldy #13
00352C  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00352E  3  85 66        	sta z80_l
003530  3  A0 0E        	ldy #14
003532  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003534  3  85 67        	sta z80_h
003536  3               
003536  3  A9 00        	lda #0				; null value in pointer.
003538  3  A0 0D        	ldy #13
00353A  3  91 68        	sta (z80_ix),y			; store new pointer low.
00353C  3  C8           	iny
00353D  3  91 68        	sta (z80_ix),y			; store new pointer high.
00353F  3               
00353F  3  A0 00        	ldy #0
003541  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
003543  3  C9 63        	cmp #99				; is it the end marker?
003545  3               evftf:
003545  3  F0 01        	beq :+				; yes, fallen too far.
003547  3  60           	rts
003548  3               :
003548  3  4C 26 3B     	jmp evnt15			; EVENT FELLTOOFAR
00354B  3               
00354B  3               ;------------------------------------------------
00354B  3               ; Initiate fall check.
00354B  3               ;------------------------------------------------
00354B  3               
00354B  3               ifall:
00354B  3  A0 0D        	ldy #13
00354D  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
00354F  3  85 66        	sta z80_l
003551  3  A0 0E        	ldy #14
003553  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
003555  3  85 67        	sta z80_h			; high byte in accumulator.
003557  3  05 66        	ora z80_l			; merge in low byte.
003559  3  F0 01        	beq :+
00355B  3  60           	rts				; if either is set, we're already in the air.
00355C  3               :
00355C  3  A0 09        	ldy #9
00355E  3  B1 68        	lda (z80_ix),y			; y coordinate.
003560  3  85 rr        	sta dispx
003562  3  A0 08        	ldy #8
003564  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003566  3  18           	clc
003567  3               numsp7:
003567  3  69 09        	adc #SPR_HGT			; add 16 pixels.
003569  3  85 rr        	sta dispy			; set up test coordinates.
00356B  3  20 70 2F     	jsr tstbl			; get map address.
00356E  3  20 68 2E     	jsr plchk			; block, platform check.
003571  3  F0 01        	beq :+
003573  3  60           	rts				; it's solid, don't fall.
003574  3               :
003574  3  E6 rr        	inc bufaddr			; look right one cell.
003576  3  20 68 2E     	jsr plchk			; block, platform check.
003579  3  F0 01        	beq :+
00357B  3  60           	rts				; it's solid, don't fall.
00357C  3               :
00357C  3  A5 rr        	lda dispx			; y coordinate.
00357E  3  29 07        	and #7				; position straddling block cells.
003580  3  F0 08        	beq ifalls			; no more checks needed.
003582  3  E6 rr        	inc bufaddr			; look to third cell.
003584  3  20 68 2E     	jsr plchk			; block, platform check.
003587  3  F0 01        	beq :+
003589  3  60           	rts				; it's solid, don't fall.
00358A  3               :
00358A  3               ifalls:
00358A  3  A9 2B        	lda #<jtab			; jump table start.
00358C  3  85 66        	sta z80_l
00358E  3  A9 47        	lda #>jtab
003590  3  85 67        	sta z80_h
003592  3               ifal0:
003592  3  E6 66        	inc z80_l			; point to next value.
003594  3  D0 02        	bne :+
003596  3  E6 67        	inc z80_h
003598  3               :
003598  3  A0 00        	ldy #0
00359A  3  B1 66        	lda (z80_hl),y			; fetch value.
00359C  3  F0 F4        	beq ifal0			; no, get next value.
00359E  3  C9 63        	cmp #99				; reached end of table?
0035A0  3  D0 01        	bne :+
0035A2  3  60           	rts				; yes, don't fall.
0035A3  3               :
0035A3  3  C9 80        	cmp #128			; is it going up?
0035A5  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0035A7  3               
0035A7  3  A0 0D        	ldy #13
0035A9  3  A5 66        	lda z80_l
0035AB  3  91 68        	sta (z80_ix),y 			; set jump low.
0035AD  3  A0 0E        	ldy #14
0035AF  3  A5 67        	lda z80_h
0035B1  3  91 68        	sta (z80_ix),y 			; set jump high.
0035B3  3  60           	rts
0035B4  3               
0035B4  3               
0035B4  3               ;----------------------------------------------------
0035B4  3               ; Get frame data for a particular sprite.
0035B4  3               ; Input:
0035B4  3               ;  a		= framenumer
0035B4  3               ; Output:
0035B4  3               ;  hl		= frame address
0035B4  3               ;
0035B4  3               ; global:	hl,frmptr
0035B4  3               ; local:	-
0035B4  3               ; calls:	-
0035B4  3               ;----------------------------------------------------
0035B4  3               
0035B4  3               gfrm:
0035B4  3  0A           	asl a	 		 	; multiple of 2.
0035B5  3  18           	clc
0035B6  3  6D 17 28     	adc frmptr 			; frames used by game.
0035B9  3  85 66        	sta z80_l
0035BB  3  AD 18 28     	lda frmptr+1
0035BE  3  69 00        	adc #0
0035C0  3  85 67        	sta z80_h 			; point to frame start.
0035C2  3  60           	rts
0035C3  3               
0035C3  3               ;----------------------------------------------------
0035C3  3               ; Find sprite list for current room.
0035C3  3               ;
0035C3  3               ; global:	hl
0035C3  3               ; local:	x,y
0035C3  3               ; calls:	-
0035C3  3               ;----------------------------------------------------
0035C3  3               
0035C3  3               sprlst:
0035C3  3  A9 FC        	lda #<nmedat 			; list of enemy sprites.
0035C5  3  85 66        	sta z80_l
0035C7  3  A9 43        	lda #>nmedat
0035C9  3  85 67        	sta z80_h
0035CB  3  A6 rr        	ldx scno 			; screen number.
0035CD  3  D0 01        	bne sprls2 			; is it the first screen?
0035CF  3  60           	rts 				; yes, don't need to search data.
0035D0  3               sprls2:
0035D0  3  A0 00        	ldy #0
0035D2  3               sprls1:
0035D2  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0035D4  3  C9 FF        	cmp #255			; is it an end marker?
0035D6  3  F0 0E        	beq sprls0 			; yes, end of this room.
0035D8  3               
0035D8  3  18           	clc 				; point to next sprite in list.
0035D9  3  A5 66        	lda z80_l
0035DB  3  69 04        	adc #NMESIZ
0035DD  3  85 66        	sta z80_l
0035DF  3  90 02        	bcc :+
0035E1  3  E6 67        	inc z80_h
0035E3  3               :
0035E3  3  4C D2 35     	jmp sprls1 			; continue until end of room.
0035E6  3               sprls0:
0035E6  3  E6 66        	inc z80_l 			; point to start of next screen.s
0035E8  3  D0 02        	bne :+
0035EA  3  E6 67        	inc z80_h
0035EC  3               :
0035EC  3  CA           	dex
0035ED  3  D0 E3        	bne sprls1 			; continue until room found.
0035EF  3  60           	rts
0035F0  3               
0035F0  3               
0035F0  3               ;----------------------------------------------------
0035F0  3               ; Clear all but a single player sprite.
0035F0  3               ;
0035F0  3               ; global:	-
0035F0  3               ; local:	x,y,ix
0035F0  3               ; calls:	-
0035F0  3               ;----------------------------------------------------
0035F0  3               
0035F0  3               nspr:
0035F0  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0035F2  3  85 rr        	sta sprcnt
0035F4  3  A9 92        	lda #<sprtab 			; sprite table.
0035F6  3  85 68        	sta z80_x
0035F8  3  A9 37        	lda #>sprtab
0035FA  3  85 69        	sta z80_i
0035FC  3               nspr0:
0035FC  3  A0 00        	ldy #0 				; fetch sprite type.
0035FE  3  B1 68        	lda (z80_ix),y 			; is it a player?
003600  3  F0 1A        	beq nspr1 			; yes, keep this one.
003602  3               
003602  3  A9 FF        	lda #255
003604  3  A0 00        	ldy #0 				; fetch sprite type.
003606  3  91 68        	sta (z80_ix),y 			; delete sprite.
003608  3  A0 05        	ldy #5
00360A  3  91 68        	sta (z80_ix),y 			; remove next type.
00360C  3               
00360C  3  18           	clc	 			; next sprite.
00360D  3  A5 68        	lda z80_x
00360F  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003611  3  85 68        	sta z80_x
003613  3  90 02        	bcc :+
003615  3  E6 69        	inc z80_i
003617  3               :
003617  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003619  3  D0 E1        	bne nspr0
00361B  3  60           	rts
00361C  3               nspr1:
00361C  3  A9 FF        	lda #255
00361E  3  A0 00        	ldy #0
003620  3  91 68        	sta (z80_ix),y 			; delete sprite.
003622  3               
003622  3  18           	clc	 			; point to next sprite.
003623  3  A5 68        	lda z80_x
003625  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003627  3  85 68        	sta z80_x
003629  3  90 02        	bcc :+
00362B  3  E6 69        	inc z80_i
00362D  3               :
00362D  3  C6 rr        	dec sprcnt	 			; one less to do.
00362F  3  D0 01        	bne nspr2
003631  3  60           	rts
003632  3               nspr2:
003632  3  A9 FF        	lda #255
003634  3  A0 00        	ldy #0
003636  3  91 68        	sta (z80_ix),y 			; delete sprite.
003638  3  A0 05        	ldy #5
00363A  3  91 68        	sta (z80_ix),y 			; remove next type.
00363C  3               
00363C  3  18           	clc	 			; next sprite.
00363D  3  A5 68        	lda z80_x
00363F  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003641  3  85 68        	sta z80_x
003643  3  90 02        	bcc :+
003645  3  E6 69        	inc z80_i
003647  3               :
003647  3  C6 rr        	dec sprcnt	 			; one less space in table.
003649  3  D0 E7        	bne nspr2
00364B  3  60           	rts
00364C  3               
00364C  3               ;----------------------------------------------------------
00364C  3               ; Two initialisation routines.
00364C  3               ; Initialise sprites - copy everything from list to table.
00364C  3               ;
00364C  3               ; global:	-
00364C  3               ; local:	x,y,ix
00364C  3               ; calls:	cpsp
00364C  3               ;----------------------------------------------------------
00364C  3               
00364C  3               ispr:
00364C  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00364E  3  85 rr        	sta sprcnt
003650  3  A9 92        	lda #<sprtab			; sprite table.
003652  3  85 68        	sta z80_x
003654  3  A9 37        	lda #>sprtab
003656  3  85 69        	sta z80_i
003658  3               ispr2:
003658  3  A0 00        	ldy #0
00365A  3  B1 66        	lda (z80_hl),y 			; fetch byte.
00365C  3  C9 FF        	cmp #255 			; is it an end marker?
00365E  3  D0 01        	bne :+
003660  3  60           	rts 				; yes, no more to do.
003661  3               :
003661  3               ispr1:
003661  3  A0 00        	ldy #0
003663  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003665  3  C9 FF        	cmp #255 			; is it enabled yet?
003667  3  D0 08        	bne ispr4			; yes, try another slot.
003669  3               
003669  3  A0 05        	ldy #5
00366B  3  B1 68        	lda (z80_ix),y		 	; next type.
00366D  3  C9 FF        	cmp #255 			; is it enabled yet?
00366F  3  F0 10        	beq ispr3 			; no, process this one.
003671  3               ispr4:
003671  3  18           	clc 				; next sprite.
003672  3  A5 68        	lda z80_x
003674  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003676  3  85 68        	sta z80_x
003678  3  90 02        	bcc :+
00367A  3  E6 69        	inc z80_i
00367C  3               :
00367C  3  C6 rr        	dec sprcnt
00367E  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
003680  3  60           	rts  				; no more room in table.
003681  3               ispr3:
003681  3  20 D4 36     	jsr cpsp			; initialise a sprite.
003684  3  C6 rr        	dec sprcnt			; one less space in the table.
003686  3  D0 D0        	bne ispr2
003688  3  60           	rts
003689  3               
003689  3               
003689  3               ;-----------------------------------------------------------------------
003689  3               ; Initialise sprites - but not player, we're keeping the old one.
003689  3               ;
003689  3               ; global:	-
003689  3               ; local:	x,y,ix
003689  3               ; calls:	cpsp
003689  3               ;-----------------------------------------------------------------------
003689  3               
003689  3               kspr:
003689  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00368B  3  A9 92        	lda #<sprtab 			; sprite table.
00368D  3  85 68        	sta z80_x
00368F  3  A9 37        	lda #>sprtab
003691  3  85 69        	sta z80_i
003693  3               kspr2:
003693  3  A0 00        	ldy #0
003695  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003697  3  C9 FF        	cmp #255 			; is it an end marker?
003699  3  D0 01        	bne :+
00369B  3  60           	rts 				; yes, no more to do.
00369C  3               :
00369C  3  C9 00        	cmp #0
00369E  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0036A0  3               
0036A0  3  18           	clc 				; next sprite.
0036A1  3  A5 66        	lda z80_l
0036A3  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0036A5  3  85 66        	sta z80_l
0036A7  3  90 02        	bcc :+
0036A9  3  E6 67        	inc z80_h
0036AB  3               :
0036AB  3  4C 93 36     	jmp kspr2
0036AE  3               kspr1:
0036AE  3  A0 00        	ldy #0 				; fetch sprite type.
0036B0  3  B1 68        	lda (z80_ix),y
0036B2  3  C9 FF        	cmp #255 			; is it enabled yet?
0036B4  3  D0 08        	bne kspr4 			; yes, try another slot.
0036B6  3               
0036B6  3  A0 05        	ldy #5 				; next type.
0036B8  3  B1 68        	lda (z80_ix),y
0036BA  3  C9 FF        	cmp #255 			; is it enabled yet?
0036BC  3  F0 0F        	beq kspr3 			; no, process this one.
0036BE  3               kspr4:
0036BE  3  18           	clc 				; next sprite.
0036BF  3  A5 68        	lda z80_x
0036C1  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0036C3  3  85 68        	sta z80_x
0036C5  3  90 02        	bcc :+
0036C7  3  E6 69        	inc z80_i
0036C9  3               :
0036C9  3  CA           	dex	 			; repeat for remaining sprites.
0036CA  3  D0 E2        	bne kspr1
0036CC  3  60           	rts  				; no more room in table.
0036CD  3               kspr3:
0036CD  3  20 D4 36     	jsr cpsp 			; copy sprite to table.
0036D0  3  CA           	dex	 			; one less space in the table.
0036D1  3  D0 C0        	bne kspr2
0036D3  3  60           	rts
0036D4  3               
0036D4  3               ;----------------------------------------------
0036D4  3               ; Copy sprite from list to table.
0036D4  3               ;
0036D4  3               ; global:	hl,ix
0036D4  3               ; local:	y
0036D4  3               ; calls:	evnt09
0036D4  3               ;----------------------------------------------
0036D4  3               
0036D4  3               cpsp:
0036D4  3  A0 00        	ldy #0				; fetch byte from table.
0036D6  3  B1 66        	lda (z80_hl),y
0036D8  3  91 68        	sta (z80_ix),y			; set up type.
0036DA  3  A0 05        	ldy #PAM1ST
0036DC  3  91 68        	sta (z80_ix),y 			; set up type.
0036DE  3               
0036DE  3  E6 66        	inc z80_l 			; move to next byte.
0036E0  3  D0 02        	bne :+
0036E2  3  E6 67        	inc z80_h
0036E4  3               :
0036E4  3  A0 00        	ldy #0 				; fetch byte from table.
0036E6  3  B1 66        	lda (z80_hl),y
0036E8  3  A0 06        	ldy #6
0036EA  3  91 68        	sta (z80_ix),y			; set up image.
0036EC  3               
0036EC  3  E6 66        	inc z80_l 			; move to next byte.
0036EE  3  D0 02        	bne :+
0036F0  3  E6 67        	inc z80_h
0036F2  3               :
0036F2  3  A0 00        	ldy #0
0036F4  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0036F6  3  A0 08        	ldy #8
0036F8  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0036FA  3               
0036FA  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0036FC  3  A0 03        	ldy #3
0036FE  3  91 68        	sta (z80_ix),y
003700  3               
003700  3  E6 66        	inc z80_l 			; move to next byte.
003702  3  D0 02        	bne :+
003704  3  E6 67        	inc z80_h
003706  3               :
003706  3  A0 00        	ldy #0 				; fetch byte from table.
003708  3  B1 66        	lda (z80_hl),y
00370A  3  A0 09        	ldy #9
00370C  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00370E  3               
00370E  3  E6 66        	inc z80_l 			; move to next byte.
003710  3  D0 02        	bne :+
003712  3  E6 67        	inc z80_h
003714  3               :
003714  3  A9 00        	lda #0				; zeroes in accumulator.
003716  3  A0 07        	ldy #7 				; reset frame number.
003718  3  91 68        	sta (z80_ix),y
00371A  3  A0 0A        	ldy #10 			; reset direction.
00371C  3  91 68        	sta (z80_ix),y
00371E  3  A0 0D        	ldy #13				; reset jump pointer low.
003720  3  91 68        	sta (z80_ix),y
003722  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003724  3  91 68        	sta (z80_ix),y
003726  3               
003726  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003728  3  A0 10        	ldy #16
00372A  3  91 68        	sta (z80_ix),y
00372C  3               evis0:
00372C  3  A5 69        	lda z80_i
00372E  3  48           	pha
00372F  3  A5 68        	lda z80_x
003731  3  48           	pha
003732  3  A5 67        	lda z80_h
003734  3  48           	pha
003735  3  A5 66        	lda z80_l
003737  3  48           	pha
003738  3               
003738  3  20 CB 3A     	jsr evnt09 			; perform event.
00373B  3               
00373B  3  68           	pla
00373C  3  85 66        	sta z80_l
00373E  3  68           	pla
00373F  3  85 67        	sta z80_h
003741  3  68           	pla
003742  3  85 68        	sta z80_x
003744  3  68           	pla
003745  3  85 69        	sta z80_i
003747  3               
003747  3  18           	clc
003748  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
00374A  3  69 11        	adc #TABSIZ		 	; next sprite.
00374C  3  85 68        	sta z80_x
00374E  3  90 02        	bcc :+
003750  3  E6 69        	inc z80_i
003752  3               :
003752  3  60           	rts
003753  3               
003753  3               
003753  3               ;-------------------------------------
003753  3               ; Clear the play area window.
003753  3               ;-------------------------------------
003753  3               
003753  3               clw:
003753  3  AD 1F 28     	lda wintop			; get coordinates of window.
003756  3  85 rr        	sta dispy			; put into dispx for calculation.
003758  3  AD 20 28     	lda winlft
00375B  3  85 rr        	sta dispx
00375D  3               
00375D  3  AD 21 28     	lda winhgt			; height of window.
003760  3  85 rr        	sta rrow			; copy to b register.
003762  3               clw3:
003762  3  AD 22 28     	lda winwid 			; width of window.
003765  3  85 rr        	sta rcol
003767  3               clw2:
003767  3  20 59 2C     	jsr gprad 			; get print address.
00376A  3  A9 00        	lda #0				; zero byte to write.
00376C  3  A2 07        	ldx #7				; pixel height of each cell.
00376E  3               clw1:
00376E  3  BC 93 2C     	ldy scrtab,x
003771  3  91 rr        	sta (scraddr),y 			; copy to screen.
003773  3  CA           	dex				; next screen row down.
003774  3  10 F8        	bpl clw1
003776  3               
003776  3  E6 rr        	inc dispx			; next column.
003778  3  C6 rr        	dec rcol			; one less to do.
00377A  3  D0 EB        	bne clw2			; repeat for remaining columns.
00377C  3               
00377C  3  AD 20 28     	lda winlft			; get left edge.
00377F  3  85 rr        	sta dispx 			; reset x.
003781  3  E6 rr        	inc dispy 			; next line down.
003783  3               
003783  3  C6 rr        	dec rrow
003785  3  D0 DB        	bne clw3			; repeat down the screen.
003787  3               
003787  3  AD 1F 28     	lda wintop			; get coordinates of window.
00378A  3  85 rr        	sta chary			; put into display position.
00378C  3  AD 20 28     	lda winlft
00378F  3  85 rr        	sta charx
003791  3  60           	rts
003792  3               
003792  3               
003792  3               ;----------------------------------------------------------
003792  3               ; Effects code.
003792  3               ; Ticker routine is called 25 times per second.
003792  3               ;
003792  3               ; HL = txtscr = left text screen address
003792  3               ; DE = txtscr+txtwid-1 = right text screen address
003792  3               ; BC = txtpos = text scroller position
003792  3               ;
003792  3               ;----------------------------------------------------------
003792  3               
003792  3               .if sflag
003792  3               scrly:
003792  3               	rts
003792  3               	.word txtscr         	; get left screen address.
003792  3               	sta scr_l
003792  3               	lda txtscr+1
003792  3               	sta scr_l+1
003792  3               	sta scr_r+1
003792  3               
003792  3               	stx xtmp
003792  3               
003792  3               	clc         		; get right screen address.
003792  3               	lda scr_l
003792  3               	adc txtwid
003792  3               	sta scr_r
003792  3               	dec scr_r
003792  3               scrly1:
003792  3               	ldy txtwid		; set txtwide
003792  3               	dey
003792  3               	clc
003792  3               scrly0:
003792  3               	lda (scr_l),y		; scroll 1 line
003792  3               	rol a
003792  3               	sta (scr_l),y
003792  3               	dey
003792  3               	bpl scrly0
003792  3               
003792  3               	clc			; point to next line
003792  3               	lda scr_l
003792  3               	adc #32
003792  3               	sta scr_l
003792  3               	bcc scrly1		; repeat 8 times
003792  3               
003792  3               	lda txtpos 		; get text pointer.
003792  3               	sta scr_txt
003792  3               	lda txtpos+1
003792  3               	sta scr_txt+1
003792  3               
003792  3               	ldy #0
003792  3               	lda (scr_txt),y 		; find character we're displaying.
003792  3               	and #127 		; remove end marker bit if applicable.
003792  3               	cmp #13			; is it newline?
003792  3               	bne scrly5 		; no, it's okay.
003792  3               	lda #32			; convert to a space instead.
003792  3               scrly5:
003792  3               	sta fntaddr		; calculate char address
003792  3               	lda #0
003792  3               	sta fntaddr+1
003792  3               	asl fntaddr  		; multiply char by 8.
003792  3               	rol fntaddr+1
003792  3               	asl fntaddr
003792  3               	rol fntaddr+1
003792  3               	asl fntaddr
003792  3               	rol fntaddr+1
003792  3               	lda fntaddr
003792  3               	clc
003792  3               	adc #<(FONT-256)
003792  3               	sta scrly3+1		; that's the low byte.
003792  3               	lda fntaddr+1
003792  3               	adc #>(FONT-256)
003792  3               	sta scrly3+2		; add displacement.
003792  3               
003792  3               	ldx #0
003792  3               scrly3:
003792  3               	lda $3333,x		; get image of char line.
003792  3               	and txtbit
003792  3               	beq scrly2		; don't plot pixel
003792  3               	ldy scrline,x
003792  3               	lda (scr_r),y
003792  3               	clc
003792  3               	ora #1
003792  3               	sta (scr_r),y		; plot pixel
003792  3               scrly2:
003792  3               	inx			; next line of char.
003792  3               	cpx #8
003792  3               	bne scrly3
003792  3               
003792  3               	lsr txtbit		; bit of text to display.
003792  3               	bcs :+
003792  3               	rts
003792  3               :
003792  3               	ldy #0
003792  3               	lda (scr_txt),y 	; what was the character?
003792  3               	asl a	  		; end of message?
003792  3               	bcs scrly4
003792  3               	inc txtpos
003792  3               	bne :+
003792  3               	inc txtpos+1
003792  3               :
003792  3               	jmp scrly6 		; not yet - continue.
003792  3               scrly4:
003792  3               	lda txtini 		; start of scrolling message.
003792  3               	sta txtpos
003792  3               	lda txtini+1
003792  3               	sta txtpos+1
003792  3               scrly6:
003792  3               	lda #128
003792  3               	sta txtbit
003792  3               	ldx xtmp
003792  3               	rts
003792  3               
003792  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003792  3               
003792  3               ;-------------------------------------------------------
003792  3               ; Entry TICKER command
003792  3               ;
003792  3               ; Entry:
003792  3               ;  z80_b = message nr
003792  3               ;  z80_c = width
003792  3               ;-------------------------------------------------------
003792  3               
003792  3               iscrly:
003792  3               	jsr prescr 		; set up display position.
003792  3               
003792  3               	lda #<msgdat 		; text messages.
003792  3               	sta z80_l
003792  3               	lda #>msgdat
003792  3               	sta z80_h
003792  3               
003792  3               	lda z80_c 		; width.
003792  3               	sec
003792  3               	sbc #1			; subtract one.
003792  3               	cmp #32 		; is it between 1 and 32?
003792  3               	bcc :+
003792  3               	lda #$60
003792  3               	jmp iscrl0		; no, disable messages.
003792  3               :
003792  3               	ldx z80_b		; message number.
003792  3               	jsr getwrd 		; find message start.
003792  3               
003792  3               	lda z80_l		; set initial text position.
003792  3               	sta txtini
003792  3               	lda z80_h
003792  3               	sta txtini+1
003792  3               
003792  3               	lda #$ad		; code for lda adrr
003792  3               iscrl0:
003792  3               	sta scrly		; enable/disable scrolling routine.
003792  3               
003792  3               	jsr prescr 		; set up display position.
003792  3               	jsr gprad 		; get print address.
003792  3               
003792  3               	lda scraddr 		; set text screen address.
003792  3               	sta txtscr
003792  3               	lda scraddr+1
003792  3               	sta txtscr+1
003792  3               
003792  3               	lda z80_c		; width.
003792  3               	sta txtwid		; set width in working storage.
003792  3               
003792  3               	lda #128 		; start with leftmost bit.
003792  3               	sta txtbit
003792  3               
003792  3               	jmp scrly4
003792  3               .endif
003792  3               
003792  3               ;------------------------------------------------------------------
003792  3               ; Dig routine, conditional assembly depending on dflag
003792  3               ;------------------------------------------------------------------
003792  3               .if dflag
003792  3               dig:
003792  3               	and #3
003792  3               	beq digr		; dig right
003792  3               	cmp #1
003792  3               	beq digl		; dig left
003792  3               	cmp #2
003792  3               	beq digd		; dig down
003792  3               
003792  3               ; Dig up.
003792  3               
003792  3               digu:				; dig up
003792  3               	ldy #8
003792  3               	lda (z80_ix),y
003792  3               	sec
003792  3               	sbc #2
003792  3               	sta dispy		; set y
003792  3               
003792  3               	iny
003792  3               	lda (z80_ix),y
003792  3               	sta dispx		; set x
003792  3               	jmp digv
003792  3               
003792  3               ; Dig down.
003792  3               
003792  3               digd:
003792  3               	ldy #9
003792  3               	lda (z80_ix),y
003792  3               	sta dispx		; set y
003792  3               
003792  3               	dey
003792  3               	clc
003792  3               	lda (z80_ix),y
003792  3               	adc #16
003792  3               	sta dispy		; set y
003792  3               	jmp digv
003792  3               
003792  3               ; Dig left.
003792  3               
003792  3               digl:
003792  3               	ldy #8
003792  3               	lda (z80_ix),y
003792  3               	sta dispy		; set y
003792  3               
003792  3               	iny
003792  3               	lda (z80_ix),y
003792  3               	sec
003792  3               	sbc #2			; x=x-2
003792  3               	sta dispx		; set x
003792  3               	jmp digh
003792  3               
003792  3               ; Dig right.
003792  3               
003792  3               digr:
003792  3               	ldy #8
003792  3               	lda (z80_ix),y
003792  3               	sta dispy		; set y
003792  3               
003792  3               	iny
003792  3               	lda (z80_ix),y
003792  3               	clc
003792  3               	adc #16
003792  3               	sta dispx		; set x+16
003792  3               	jmp digh
003792  3               
003792  3               ; Vertical digging
003792  3               
003792  3               digv:
003792  3               	jsr tstbl		; check blocktype in MAP
003792  3               	jsr fdchk		; test if FODDER
003792  3               
003792  3               	clc
003792  3               	lda dispx		; look 1 cell down
003792  3               	adc #8
003792  3               	sta dispx
003792  3               	jsr tstbl		; check blocktype in MAP
003792  3               	jsr fdchk
003792  3               	lda dispx
003792  3               	and #7
003792  3               	bne :+
003792  3               	rts
003792  3               :
003792  3               	clc
003792  3               	lda dispx		; look 1 cell down
003792  3               	adc #8
003792  3               	sta dispx
003792  3               	jsr tstbl		; check blocktype in MAP
003792  3               	jmp fdchk
003792  3               
003792  3               ; Horizontal digging
003792  3               
003792  3               digh:
003792  3               	jsr tstbl		; check blocktype in MAP
003792  3               	jsr fdchk		; test if FODDER
003792  3               
003792  3               	clc
003792  3               	lda dispy		; look 1 cell down
003792  3               	adc #8
003792  3               	sta dispy
003792  3               	jsr tstbl		; check blocktype in MAP
003792  3               	jsr fdchk
003792  3               	lda dispy
003792  3               	and #7
003792  3               	bne :+
003792  3               	rts
003792  3               :
003792  3               	clc
003792  3               	lda dispy		; look 1 cell down
003792  3               	adc #8
003792  3               	sta dispy
003792  3               	jsr tstbl		; check blocktype in MAP
003792  3               	jmp fdchk
003792  3               
003792  3               digcnt:	.byte 0
003792  3               
003792  3               .endif
003792  3               
003792  3               ;------------------------------------------------------------------
003792  3               ; Sprite table
003792  3               ;------------------------------------------------------------------
003792  3               
003792  3               
003792  3               ; ix+0  = type.
003792  3               ; ix+1  = sprite image number.
003792  3               ; ix+2  = frame.
003792  3               ; ix+3  = y coord.
003792  3               ; ix+4  = x coord.
003792  3               
003792  3               ; ix+5  = new type.
003792  3               ; ix+6  = new image number.
003792  3               ; ix+7  = new frame.
003792  3               ; ix+8  = new y coord.
003792  3               ; ix+9  = new x coord.
003792  3               
003792  3               ; ix+10 = direction.
003792  3               ; ix+11 = parameter 1.
003792  3               ; ix+12 = parameter 2.
003792  3               ; ix+13 = jump pointer low.
003792  3               ; ix+14 = jump pointer high.
003792  3               ; ix+15 = data pointer low.
003792  3               ; ix+16 = data pointer high.
003792  3               
003792  3               ; block NUMSPR * TABSIZ,255
003792  3               
003792  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003796  3  FF FF FF FF  
00379A  3  FF FF FF FF  
00385E  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003862  3  FF FF FF 00  
003866  3  C0 78 00 00  
00386F  3  07           roomtb:	.byte 7                      ; start room map offset.
003870  3               
003870  3               ; User routine.  Put your own code in here to be called with USER instruction.
003870  3               ; if USER has an argument it will be passed in the accumulator.
003870  3               
003870  3               user:
003870  3               	.include "user.inc"
003870  4  60           	rts
003871  4               
003871  3               
003871  3               setfgcol:
003871  3  29 07        	and #7
003873  3  8D 80 38     	sta fcolour
003876  3  60           	rts
003877  3               
003877  3               setbgcol:
003877  3  29 07        	and #7
003879  3  18           	clc
00387A  3  69 10        	adc #16
00387C  3  8D 81 38     	sta bcolour
00387F  3  60           	rts
003880  3               
003880  3  07           fcolour:	.byte t_white
003881  3  17           bcolour:	.byte g_white
003882  3               
003882  3               ; Everything below here will be generated by the editors.
003882  3               
003882  3  60                   rts
003883  3               WINDOWTOP = 0
003883  3               WINDOWLFT = 1
003883  3               WINDOWHGT = 25
003883  3               WINDOWWID = 39 ;
003883  3               MAPWID = 3
003883  3  FF FF FF             .byte 255,255,255
003886  3               mapdat:
003886  3  FF 00 FF             .byte 255,0,255
003889  3  FF FF FF             .byte 255,255,255
00388C  3  01           stmap:  .byte 1
00388D  3               
00388D  3               evnt00:
00388D  3  20 80 2E             jsr getcol	; GETBLOCKS
003890  3  A0 0B                ldy #11
003892  3  B1 68                lda (z80_ix),y
003894  3  18                   clc
003895  3  69 01                adc #1
003897  3  A0 0B                ldy #11
003899  3  91 68                sta (z80_ix),y
00389B  3  A9 00                lda #0
00389D  3  85 rr                sta varm
00389F  3  A5 rr                lda joyval	; KEY
0038A1  3  29 08                and #8
0038A3  3  F0 03                beq :+
0038A5  3  4C C3 38             jmp a00125
0038A8  3               :
0038A8  3  A9 04                lda #4
0038AA  3  A0 06                ldy #6
0038AC  3  91 68                sta (z80_ix),y
0038AE  3  A9 01                lda #1
0038B0  3  85 rr                sta varm
0038B2  3  20 70 2D             jsr cangu	; CANGOUP
0038B5  3  F0 03                beq :+
0038B7  3  4C C3 38             jmp a00125
0038BA  3               :
0038BA  3  A0 08                ldy #8 		; SPRITEUP
0038BC  3  B1 68                lda (z80_ix),y
0038BE  3  38                   sec
0038BF  3  E9 01                sbc #1
0038C1  3  91 68                sta (z80_ix),y
0038C3  3  A5 rr        a00125: lda joyval	; KEY
0038C5  3  29 04                and #4
0038C7  3  F0 03                beq :+
0038C9  3  4C E7 38             jmp a00208
0038CC  3               :
0038CC  3  A9 05                lda #5
0038CE  3  A0 06                ldy #6
0038D0  3  91 68                sta (z80_ix),y
0038D2  3  A9 01                lda #1
0038D4  3  85 rr                sta varm
0038D6  3  20 BD 2D             jsr cangd	; CANGODOWN
0038D9  3  F0 03                beq :+
0038DB  3  4C E7 38             jmp a00208
0038DE  3               :
0038DE  3  A0 08                ldy #8 		; SPRITEDOWN
0038E0  3  B1 68                lda (z80_ix),y
0038E2  3  18                   clc
0038E3  3  69 01                adc #1
0038E5  3  91 68                sta (z80_ix),y
0038E7  3  A5 rr        a00208: lda joyval	; KEY
0038E9  3  29 02                and #2
0038EB  3  F0 03                beq :+
0038ED  3  4C 16 39             jmp a00312
0038F0  3               :
0038F0  3  A9 03                lda #3
0038F2  3  A0 06                ldy #6
0038F4  3  91 68                sta (z80_ix),y
0038F6  3  A9 01                lda #1
0038F8  3  85 rr                sta varm
0038FA  3  20 0A 2E             jsr cangl	; CANGOLEFT
0038FD  3  F0 03                beq :+
0038FF  3  4C 16 39             jmp a00312
003902  3               :
003902  3  A9 04                lda #4
003904  3  A0 09                ldy #9
003906  3  D1 68                cmp (z80_ix),y
003908  3  90 03                bcc *+5
00390A  3  4C 16 39             jmp a00312
00390D  3  A0 09                ldy #9 		; SPRITELEFT
00390F  3  B1 68                lda (z80_ix),y
003911  3  38                   sec
003912  3  E9 01                sbc #1
003914  3  91 68                sta (z80_ix),y
003916  3  A5 rr        a00312: lda joyval	; KEY
003918  3  29 01                and #1
00391A  3  F0 03                beq :+
00391C  3  4C 47 39             jmp a00421
00391F  3               :
00391F  3  A9 02                lda #2
003921  3  A0 06                ldy #6
003923  3  91 68                sta (z80_ix),y
003925  3  A9 01                lda #1
003927  3  85 rr                sta varm
003929  3  20 1C 2E             jsr cangr	; CANGORIGHT
00392C  3  F0 03                beq :+
00392E  3  4C 47 39             jmp a00421
003931  3               :
003931  3  A9 48                lda #72
003933  3  A0 09                ldy #9
003935  3  D1 68                cmp (z80_ix),y
003937  3  90 02                bcc *+4
003939  3  D0 03                bne *+5
00393B  3  4C 47 39             jmp a00421
00393E  3  A0 09                ldy #9 		; SPRITERIGHT
003940  3  B1 68                lda (z80_ix),y
003942  3  18                   clc
003943  3  69 01                adc #1
003945  3  91 68                sta (z80_ix),y
003947  3  A9 00        a00421: lda #0
003949  3  C5 rr                cmp varm
00394B  3  90 03                bcc *+5
00394D  3  4C 55 39             jmp a00449
003950  3  A9 00                lda #0		; ANIMATE
003952  3  20 50 33             jsr animsp
003955  3               a00449: ; SPRITEINK command
003955  3  A9 01                lda #1 	; COLLISION
003957  3  85 63                sta z80_b
003959  3  20 9B 33             jsr sktyp
00395C  3  B0 03                bcs :+
00395E  3  4C 71 39             jmp a00515
003961  3               :
003961  3  A9 18                lda #24		; AT
003963  3  85 rr                sta chary
003965  3  A9 11                lda #17
003967  3  85 rr                sta charx
003969  3  A9 06                lda #6		; PRINT
00396B  3  20 F2 2F             jsr dmsg
00396E  3  4C 7E 39             jmp a00544
003971  3  A9 18        a00515: lda #24		; AT
003973  3  85 rr                sta chary
003975  3  A9 11                lda #17
003977  3  85 rr                sta charx
003979  3  A9 07                lda #7		; PRINT
00397B  3  20 F2 2F             jsr dmsg
00397E  3  60           a00544: rts
00397F  3               evnt01:
00397F  3  A9 00                lda #0		; ANIMATE
003981  3  20 50 33             jsr animsp
003984  3  A9 00                lda #0
003986  3  C5 rr                cmp varc
003988  3  F0 03                beq *+5
00398A  3  4C B8 39             jmp b00120
00398D  3  A9 06                lda #CUSTOM	; CUSTOM
00398F  3  85 63                sta z80_b
003991  3  20 B5 2E             jsr tded
003994  3  C5 63                cmp z80_b
003996  3  F0 03                beq :+
003998  3  4C B1 39             jmp b00108
00399B  3               :
00399B  3  A9 03                lda #3
00399D  3  85 65                sta z80_d	; GETRANDOM
00399F  3  20 A4 2F             jsr random
0039A2  3  85 67                sta z80_h
0039A4  3  20 19 2A             jsr imul
0039A7  3  A5 67                lda z80_h
0039A9  3  85 rr                sta varrnd
0039AB  3  A5 rr                lda varrnd
0039AD  3  A0 0A                ldy #10
0039AF  3  91 68                sta (z80_ix),y
0039B1  3  A9 01        b00108: lda #1
0039B3  3  85 rr                sta varc
0039B5  3  4C BC 39             jmp b00128
0039B8  3  A9 00        b00120: lda #0
0039BA  3  85 rr                sta varc
0039BC  3  A9 00        b00128: lda #0
0039BE  3  A0 0A                ldy #10
0039C0  3  D1 68                cmp (z80_ix),y
0039C2  3  F0 03                beq *+5
0039C4  3  4C 08 3A             jmp b00291
0039C7  3  20 0A 2E             jsr cangl	; CANGOLEFT
0039CA  3  F0 03                beq :+
0039CC  3  4C EF 39             jmp b00238
0039CF  3               :
0039CF  3  A9 04                lda #4
0039D1  3  A0 09                ldy #9
0039D3  3  D1 68                cmp (z80_ix),y
0039D5  3  90 03                bcc *+5
0039D7  3  4C E6 39             jmp b00220
0039DA  3  A0 09                ldy #9 		; SPRITELEFT
0039DC  3  B1 68                lda (z80_ix),y
0039DE  3  38                   sec
0039DF  3  E9 01                sbc #1
0039E1  3  91 68                sta (z80_ix),y
0039E3  3  4C EC 39             jmp b00233
0039E6  3  A9 01        b00220: lda #1
0039E8  3  A0 0A                ldy #10
0039EA  3  91 68                sta (z80_ix),y
0039EC  3  4C 05 3A     b00233: jmp b00286
0039EF  3  A9 03        b00238: lda #3
0039F1  3  85 65                sta z80_d	; GETRANDOM
0039F3  3  20 A4 2F             jsr random
0039F6  3  85 67                sta z80_h
0039F8  3  20 19 2A             jsr imul
0039FB  3  A5 67                lda z80_h
0039FD  3  85 rr                sta varrnd
0039FF  3  A5 rr                lda varrnd
003A01  3  A0 0A                ldy #10
003A03  3  91 68                sta (z80_ix),y
003A05  3  4C C3 3A     b00286: jmp b00698
003A08  3  A9 01        b00291: lda #1
003A0A  3  A0 0A                ldy #10
003A0C  3  D1 68                cmp (z80_ix),y
003A0E  3  F0 03                beq *+5
003A10  3  4C 56 3A             jmp b00459
003A13  3  20 1C 2E             jsr cangr	; CANGORIGHT
003A16  3  F0 03                beq :+
003A18  3  4C 3D 3A             jmp b00405
003A1B  3               :
003A1B  3  A9 46                lda #70
003A1D  3  A0 09                ldy #9
003A1F  3  D1 68                cmp (z80_ix),y
003A21  3  90 02                bcc *+4
003A23  3  D0 03                bne *+5
003A25  3  4C 34 3A             jmp b00387
003A28  3  A0 09                ldy #9 		; SPRITERIGHT
003A2A  3  B1 68                lda (z80_ix),y
003A2C  3  18                   clc
003A2D  3  69 01                adc #1
003A2F  3  91 68                sta (z80_ix),y
003A31  3  4C 3A 3A             jmp b00401
003A34  3  A9 00        b00387: lda #0
003A36  3  A0 0A                ldy #10
003A38  3  91 68                sta (z80_ix),y
003A3A  3  4C 53 3A     b00401: jmp b00454
003A3D  3  A9 03        b00405: lda #3
003A3F  3  85 65                sta z80_d	; GETRANDOM
003A41  3  20 A4 2F             jsr random
003A44  3  85 67                sta z80_h
003A46  3  20 19 2A             jsr imul
003A49  3  A5 67                lda z80_h
003A4B  3  85 rr                sta varrnd
003A4D  3  A5 rr                lda varrnd
003A4F  3  A0 0A                ldy #10
003A51  3  91 68                sta (z80_ix),y
003A53  3  4C C3 3A     b00454: jmp b00698
003A56  3  A9 02        b00459: lda #2
003A58  3  A0 0A                ldy #10
003A5A  3  D1 68                cmp (z80_ix),y
003A5C  3  F0 03                beq *+5
003A5E  3  4C 8E 3A             jmp b00580
003A61  3  20 70 2D             jsr cangu	; CANGOUP
003A64  3  F0 03                beq :+
003A66  3  4C 75 3A             jmp b00527
003A69  3               :
003A69  3  A0 08                ldy #8 		; SPRITEUP
003A6B  3  B1 68                lda (z80_ix),y
003A6D  3  38                   sec
003A6E  3  E9 01                sbc #1
003A70  3  91 68                sta (z80_ix),y
003A72  3  4C 8B 3A             jmp b00575
003A75  3  A9 03        b00527: lda #3
003A77  3  85 65                sta z80_d	; GETRANDOM
003A79  3  20 A4 2F             jsr random
003A7C  3  85 67                sta z80_h
003A7E  3  20 19 2A             jsr imul
003A81  3  A5 67                lda z80_h
003A83  3  85 rr                sta varrnd
003A85  3  A5 rr                lda varrnd
003A87  3  A0 0A                ldy #10
003A89  3  91 68                sta (z80_ix),y
003A8B  3  4C C3 3A     b00575: jmp b00698
003A8E  3  A9 03        b00580: lda #3
003A90  3  A0 0A                ldy #10
003A92  3  D1 68                cmp (z80_ix),y
003A94  3  F0 03                beq *+5
003A96  3  4C C3 3A             jmp b00698
003A99  3  20 BD 2D             jsr cangd	; CANGODOWN
003A9C  3  F0 03                beq :+
003A9E  3  4C AD 3A             jmp b00649
003AA1  3               :
003AA1  3  A0 08                ldy #8 		; SPRITEDOWN
003AA3  3  B1 68                lda (z80_ix),y
003AA5  3  18                   clc
003AA6  3  69 01                adc #1
003AA8  3  91 68                sta (z80_ix),y
003AAA  3  4C C3 3A             jmp b00698
003AAD  3  A9 03        b00649: lda #3
003AAF  3  85 65                sta z80_d	; GETRANDOM
003AB1  3  20 A4 2F             jsr random
003AB4  3  85 67                sta z80_h
003AB6  3  20 19 2A             jsr imul
003AB9  3  A5 67                lda z80_h
003ABB  3  85 rr                sta varrnd
003ABD  3  A5 rr                lda varrnd
003ABF  3  A0 0A                ldy #10
003AC1  3  91 68                sta (z80_ix),y
003AC3  3  60           b00698: rts
003AC4  3               evnt02:
003AC4  3  60                   rts
003AC5  3               evnt03:
003AC5  3  60                   rts
003AC6  3               evnt04:
003AC6  3  60                   rts
003AC7  3               evnt05:
003AC7  3  60                   rts
003AC8  3               evnt06:
003AC8  3  60                   rts
003AC9  3               evnt07:
003AC9  3  60                   rts
003ACA  3               evnt08:
003ACA  3  60                   rts
003ACB  3               evnt09:
003ACB  3  A9 01                lda #1
003ACD  3  A0 05                ldy #5
003ACF  3  D1 68                cmp (z80_ix),y
003AD1  3  F0 03                beq *+5
003AD3  3  4C DC 3A             jmp j00037
003AD6  3  A9 00                lda #0
003AD8  3  A0 0A                ldy #10
003ADA  3  91 68                sta (z80_ix),y
003ADC  3  A9 02        j00037: lda #2
003ADE  3  A0 05                ldy #5
003AE0  3  D1 68                cmp (z80_ix),y
003AE2  3  F0 03                beq *+5
003AE4  3  4C ED 3A             jmp j00073
003AE7  3  A9 02                lda #2
003AE9  3  A0 0A                ldy #10
003AEB  3  91 68                sta (z80_ix),y
003AED  3  60           j00073: rts
003AEE  3               evnt10:
003AEE  3  A9 19                lda #25 	; DELAY
003AF0  3  20 28 28             jsr delay
003AF3  3  A9 00                lda #0		; AT
003AF5  3  85 rr                sta chary
003AF7  3  A9 01                lda #1
003AF9  3  85 rr                sta charx
003AFB  3  A9 08                lda #8		; PRINT
003AFD  3  20 F2 2F             jsr dmsg
003B00  3  A9 00                lda #0		; AT
003B02  3  85 rr                sta chary
003B04  3  A9 08                lda #8
003B06  3  85 rr                sta charx
003B08  3  A0 00                ldy #0		; SHOWSCORE
003B0A  3  A9 06                lda #6
003B0C  3  85 63                sta z80_b
003B0E  3  20 2C 2B             jsr dscor
003B11  3  60                   rts
003B12  3               evnt11:
003B12  3  60                   rts
003B13  3               evnt12:
003B13  3  A9 05                lda #5 	; PAPER
003B15  3  20 77 38             jsr setbgcol
003B18  3  20 D2 47             jsr cls		; CLS
003B1B  3  A9 C8                lda #200 	; DELAY
003B1D  3  20 28 28             jsr delay
003B20  3  60                   rts
003B21  3               evnt13:
003B21  3  60                   rts
003B22  3               evnt14:
003B22  3  20 D2 47             jsr cls		; CLS
003B25  3  60                   rts
003B26  3               evnt15:
003B26  3  60                   rts
003B27  3               evnt16:
003B27  3  60                   rts
003B28  3               evnt17:
003B28  3  A9 01                lda #1		; PRINTMODE
003B2A  3  85 rr                sta prtmod
003B2C  3  A9 08                lda #8
003B2E  3  85 rr                sta chary
003B30  3  A9 0D                lda #13
003B32  3  85 rr                sta charx
003B34  3                       ; COLOUR command
003B34  3  A9 09                lda #9		; PRINT
003B36  3  20 F2 2F             jsr dmsg
003B39  3  A9 02                lda #2
003B3B  3  85 62                sta z80_c
003B3D  3  A5 rr                lda chary
003B3F  3  18                   clc
003B40  3  65 62                adc z80_c
003B42  3  85 rr                sta chary
003B44  3  A9 0D                lda #13
003B46  3  85 rr                sta charx
003B48  3                       ; COLOUR command
003B48  3  A9 0A                lda #10		; PRINT
003B4A  3  20 F2 2F             jsr dmsg
003B4D  3  20 42 48             jsr prskey	; WAITKEY
003B50  3  60                   rts
003B51  3               evnt18:
003B51  3  60                   rts
003B52  3               evnt19:
003B52  3                       ; COLOUR command
003B52  3  A9 0E                lda #14
003B54  3  85 rr                sta chary
003B56  3  A9 08                lda #8
003B58  3  85 rr                sta charx
003B5A  3  A9 0B                lda #11		; PRINT
003B5C  3  20 F2 2F             jsr dmsg
003B5F  3  60                   rts
003B60  3               evnt20:
003B60  3  A9 0A                lda #<10		; SCORE
003B62  3  85 66                sta z80_l
003B64  3  A9 00                lda #>10
003B66  3  85 67                sta z80_h
003B68  3  20 85 2B             jsr addsc
003B6B  3  60                   rts
003B6C  3  60           ptcusr: rts
003B6D  3               msgdat:
003B6D  3  53 43 4F 52          .byte "SCOR",197
003B71  3  C5           
003B72  3  20 20 48 49          .byte "  HIG",200
003B76  3  47 C8        
003B78  3  4B 43 20 4D          .byte "KC MUNHCKI",206
003B7C  3  55 4E 48 43  
003B80  3  4B 49 CE     
003B83  3  20 47 41 4D          .byte " GAM",197
003B87  3  C5           
003B88  3  20 4F 56 45          .byte " OVE",210
003B8C  3  D2           
003B8D  3  20 4E 45 57          .byte " NEW HIGH SCOR",197
003B91  3  20 48 49 47  
003B95  3  48 20 53 43  
003B9C  3  48 49 54 3A          .byte "HIT:",177
003BA0  3  B1           
003BA1  3  48 49 54 3A          .byte "HIT:",160
003BA5  3  A0           
003BA6  3  53 43 4F 52          .byte "SCORE:",160
003BAA  3  45 3A A0     
003BAD  3  20 47 41 4D          .byte " GAME",160
003BB1  3  45 A0        
003BB3  3  20 4F 56 45          .byte " OVER",160
003BB7  3  52 A0        
003BB9  3  20 4E 45 57          .byte " NEW HIGH SCORE",160
003BBD  3  20 48 49 47  
003BC1  3  48 20 53 43  
003BC9  3               nummsg:
003BC9  3  0C                   .byte 12
003BCA  3               chgfx:
003BCA  3  00 01                .byte 0,1
003BCC  3  7F 01                .byte 127,1
003BCE  3  00 01                .byte 0,1
003BD0  3  28 01                .byte 40,1
003BD2  3               bprop:
003BD2  3  00                   .byte 0
003BD3  3  02                   .byte 2
003BD4  3  06                   .byte 6
003BD5  3  08                   .byte 8
003BD6  3               sprgfx:
003BD6  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,41,115,115,38,0,0,0,0,0,0
003BDA  3  00 78 7B 77  
003BDE  3  74 00 29 73  
003BEA  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,71,15,15,27,0,0,3,3,0,0
003BEE  3  00 42 4E 1D  
003BF2  3  11 00 47 0F  
003BFE  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,30,94,93,77,0,2,12,12,1,0
003C02  3  00 09 58 54  
003C06  3  06 00 1E 5E  
003C12  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,70,83,25,1,0,0,0,0,0
003C16  3  04 40 56 5F  
003C1A  3  59 10 02 46  
003C26  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,27,15,71,5,0,2,3,1,0
003C2A  3  10 00 19 5F  
003C2E  3  46 00 0A 1B  
003C3A  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,77,95,30,20,0,9,12,6,0
003C3E  3  00 02 44 5C  
003C42  3  18 01 48 4D  
003C4E  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,41,112,112,38,0,0,0,0,0,0
003C52  3  00 78 7B 77  
003C56  3  74 00 29 70  
003C62  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,71,3,3,27,0,0,3,3,0,0
003C66  3  00 42 4E 1D  
003C6A  3  11 00 47 03  
003C76  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,30,14,13,77,0,2,12,12,1,0
003C7A  3  00 09 58 54  
003C7E  3  06 00 1E 0E  
003C8A  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,68,80,24,1,0,0,0,0,0
003C8E  3  04 40 56 5F  
003C92  3  59 10 02 44  
003C9E  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,19,3,67,5,0,2,3,1,0
003CA2  3  10 00 19 5F  
003CA6  3  46 00 0A 13  
003CB2  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,13,15,14,20,0,9,12,6,0
003CB6  3  00 02 44 5C  
003CBA  3  18 01 48 0D  
003CC6  3  64 60 30 38          .byte 100,96,48,56,0,120,123,119,116,0,43,127,127,39,0,0,0,0,0,0
003CCA  3  00 78 7B 77  
003CCE  3  74 00 2B 7F  
003CDA  3  10 00 00 40          .byte 16,0,0,64,0,66,78,29,17,0,79,95,95,31,0,0,3,3,0,0
003CDE  3  00 42 4E 1D  
003CE2  3  11 00 4F 5F  
003CEE  3  00 00 00 00          .byte 0,0,0,0,0,9,88,84,6,0,94,94,93,93,0,2,15,15,1,0
003CF2  3  00 09 58 54  
003CF6  3  06 00 5E 5E  
003D02  3  08 10 50 40          .byte 8,16,80,64,4,64,86,95,89,16,2,79,95,31,1,0,0,0,0,0
003D06  3  04 40 56 5F  
003D0A  3  59 10 02 4F  
003D16  3  40 00 00 00          .byte 64,0,0,0,16,0,25,95,70,0,10,95,95,95,5,0,2,3,1,0
003D1A  3  10 00 19 5F  
003D1E  3  46 00 0A 5F  
003D2A  3  00 00 00 00          .byte 0,0,0,0,0,2,68,92,24,1,72,93,95,94,20,0,11,15,7,0
003D2E  3  00 02 44 5C  
003D32  3  18 01 48 5D  
003D3E  3  64 7C 7C 38          .byte 100,124,124,56,0,117,127,122,127,0,110,43,55,61,0,0,0,0,0,0
003D42  3  00 75 7F 7A  
003D46  3  7F 00 6E 2B  
003D52  3  10 50 50 40          .byte 16,80,80,64,0,22,95,75,93,0,91,79,31,87,0,2,0,1,1,0
003D56  3  00 16 5F 4B  
003D5A  3  5D 00 5B 4F  
003D66  3  00 00 00 00          .byte 0,0,0,0,0,25,95,79,86,0,77,95,94,31,0,11,2,5,7,0
003D6A  3  00 19 5F 4F  
003D6E  3  56 00 4D 5F  
003D7A  3  08 58 5C 54          .byte 8,88,92,84,4,74,90,85,95,21,8,23,79,75,4,0,0,0,0,0
003D7E  3  04 4A 5A 55  
003D82  3  5F 15 08 17  
003D8E  3  40 40 50 10          .byte 64,64,80,16,16,72,75,23,95,20,66,31,95,79,17,0,1,2,2,0
003D92  3  10 48 4B 17  
003D96  3  5F 14 42 1F  
003DA2  3  00 00 00 00          .byte 0,0,0,0,0,66,78,31,93,17,10,94,93,95,5,2,5,11,10,1
003DA6  3  00 42 4E 1F  
003DAA  3  5D 11 0A 5E  
003DB6  3  64 7C 7C 38          .byte 100,124,124,56,0,117,127,122,127,0,62,107,39,109,0,0,0,0,0,0
003DBA  3  00 75 7F 7A  
003DBE  3  7F 00 3E 6B  
003DCA  3  10 50 50 40          .byte 16,80,80,64,0,22,95,75,93,0,91,79,31,87,0,1,2,0,2,0
003DCE  3  00 16 5F 4B  
003DD2  3  5D 00 5B 4F  
003DDE  3  00 00 00 00          .byte 0,0,0,0,0,25,95,79,86,0,77,95,94,31,0,7,10,1,11,0
003DE2  3  00 19 5F 4F  
003DE6  3  56 00 4D 5F  
003DF2  3  08 58 5C 54          .byte 8,88,92,84,4,74,90,85,95,21,72,7,31,11,20,0,0,0,0,0
003DF6  3  04 4A 5A 55  
003DFA  3  5F 15 48 07  
003E06  3  40 40 50 10          .byte 64,64,80,16,16,72,75,23,95,20,66,31,95,79,17,2,0,1,0,1
003E0A  3  10 48 4B 17  
003E0E  3  5F 14 42 1F  
003E1A  3  00 00 00 00          .byte 0,0,0,0,0,66,78,31,93,17,10,94,93,95,5,10,1,7,2,5
003E1E  3  00 42 4E 1F  
003E22  3  5D 11 0A 5E  
003E2E  3  64 3C 7C 24          .byte 100,60,124,36,0,110,119,33,32,0,32,43,47,36,0,0,0,0,0,0
003E32  3  00 6E 77 21  
003E36  3  20 00 20 2B  
003E42  3  10 50 50 10          .byte 16,80,80,16,0,90,29,7,0,0,2,79,92,16,0,0,0,0,0,0
003E46  3  00 5A 1D 07  
003E4A  3  00 00 02 4F  
003E56  3  00 00 00 00          .byte 0,0,0,0,0,73,87,31,1,0,11,93,80,0,0,0,2,3,1,0
003E5A  3  00 49 57 1F  
003E5E  3  01 00 0B 5D  
003E6A  3  08 58 4C 1C          .byte 8,88,76,28,0,8,95,19,0,0,0,2,15,13,0,0,0,0,0,0
003E6E  3  00 08 5F 13  
003E72  3  00 00 00 02  
003E7E  3  40 40 50 50          .byte 64,64,80,80,0,64,95,14,1,0,0,11,93,84,0,0,0,0,0,0
003E82  3  00 40 5F 0E  
003E86  3  01 00 00 0B  
003E92  3  00 00 00 00          .byte 0,0,0,0,0,2,94,91,7,0,2,79,84,16,0,0,0,3,3,0
003E96  3  00 02 5E 5B  
003E9A  3  07 00 02 4F  
003EA6  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
003EAA  3  00 6E 7F 7F  
003EAE  3  3D 00 20 2B  
003EBA  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
003EBE  3  00 58 5F 5F  
003EC2  3  54 00 02 4F  
003ECE  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
003ED2  3  00 40 5E 5D  
003ED6  3  10 00 0B 5F  
003EE2  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
003EE6  3  00 08 5F 5F  
003EEA  3  5F 04 00 02  
003EF6  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
003EFA  3  00 40 5E 5F  
003EFE  3  5D 10 00 0B  
003F0A  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
003F0E  3  00 00 58 5F  
003F12  3  54 00 02 4F  
003F1E  3  28 7C 6C 38          .byte 40,124,108,56,0,32,34,123,61,0,40,47,39,32,0,0,0,0,0,0
003F22  3  00 20 22 7B  
003F26  3  3D 00 28 2F  
003F32  3  40 50 50 40          .byte 64,80,80,64,0,0,11,78,85,0,64,92,31,1,0,0,0,0,0,0
003F36  3  00 00 0B 4E  
003F3A  3  55 00 40 5C  
003F46  3  00 00 00 00          .byte 0,0,0,0,0,2,79,91,22,0,0,80,94,7,0,2,3,1,0,0
003F4A  3  00 02 4F 5B  
003F4E  3  16 00 00 50  
003F5A  3  00 4C 1C 54          .byte 0,76,28,84,4,0,0,67,95,4,0,14,15,1,0,0,0,0,0,0
003F5E  3  04 00 00 43  
003F62  3  5F 04 00 0E  
003F6E  3  00 50 50 10          .byte 0,80,80,16,16,0,2,13,95,16,0,88,94,7,0,0,0,0,0,0
003F72  3  10 00 02 0D  
003F76  3  5F 10 00 58  
003F82  3  00 00 00 00          .byte 0,0,0,0,0,0,11,87,93,1,0,64,88,31,1,0,3,3,0,0
003F86  3  00 00 0B 57  
003F8A  3  5D 01 00 40  
003F96  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
003F9A  3  00 6E 7F 7F  
003F9E  3  3D 00 20 2B  
003FAA  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
003FAE  3  00 58 5F 5F  
003FB2  3  54 00 02 4F  
003FBE  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
003FC2  3  00 40 5E 5D  
003FC6  3  10 00 0B 5F  
003FD2  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
003FD6  3  00 08 5F 5F  
003FDA  3  5F 04 00 02  
003FE6  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
003FEA  3  00 40 5E 5F  
003FEE  3  5D 10 00 0B  
003FFA  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
003FFE  3  00 00 58 5F  
004002  3  54 00 02 4F  
00400E  3  74 20 20 78          .byte 116,32,32,120,0,119,125,122,63,0,38,43,35,32,0,0,0,0,0,0
004012  3  00 77 7D 7A  
004016  3  3F 00 26 2B  
004022  3  10 00 00 40          .byte 16,0,0,64,0,31,84,72,95,0,27,79,15,1,0,0,0,0,0,0
004026  3  00 1F 54 48  
00402A  3  5F 00 1B 4F  
004036  3  00 00 00 00          .byte 0,0,0,0,0,93,16,64,94,0,77,95,94,7,0,1,2,0,0,0
00403A  3  00 5D 10 40  
00403E  3  5E 00 4D 5F  
00404A  3  48 10 00 40          .byte 72,16,0,64,20,74,91,84,95,5,8,3,7,1,0,0,0,0,0,0
00404E  3  14 4A 5B 54  
004052  3  5F 05 08 03  
00405E  3  40 00 00 00          .byte 64,0,0,0,16,74,77,16,94,21,66,15,31,7,0,0,0,0,0,0
004062  3  10 4A 4D 10  
004066  3  5E 15 42 0F  
004072  3  00 00 00 00          .byte 0,0,0,0,0,74,84,0,88,21,10,94,93,31,1,2,0,1,0,0
004076  3  00 4A 54 00  
00407A  3  58 15 0A 5E  
004086  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
00408A  3  00 6E 7F 7F  
00408E  3  3D 00 20 2B  
00409A  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
00409E  3  00 58 5F 5F  
0040A2  3  54 00 02 4F  
0040AE  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
0040B2  3  00 40 5E 5D  
0040B6  3  10 00 0B 5F  
0040C2  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
0040C6  3  00 08 5F 5F  
0040CA  3  5F 04 00 02  
0040D6  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
0040DA  3  00 40 5E 5F  
0040DE  3  5D 10 00 0B  
0040EA  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
0040EE  3  00 00 58 5F  
0040F2  3  54 00 02 4F  
0040FE  3  64 78 70 20          .byte 100,120,112,32,0,119,63,107,125,0,39,32,32,43,0,0,0,0,0,0
004102  3  00 77 3F 6B  
004106  3  7D 00 27 20  
004112  3  10 40 00 00          .byte 16,64,0,0,0,30,95,79,84,0,31,1,2,79,0,0,0,0,0,0
004116  3  00 1E 5F 4F  
00411A  3  54 00 1F 01  
004126  3  00 00 00 00          .byte 0,0,0,0,0,89,94,92,16,0,93,7,10,95,0,1,0,0,2,0
00412A  3  00 59 5E 5C  
00412E  3  10 00 5D 07  
00413A  3  08 50 54 10          .byte 8,80,84,16,0,74,91,7,95,20,10,1,0,2,5,0,0,0,0,0
00413E  3  00 4A 5B 07  
004142  3  5F 14 0A 01  
00414E  3  40 00 10 00          .byte 64,0,16,0,0,72,79,31,93,16,74,7,0,11,21,0,0,0,0,0
004152  3  00 48 4F 1F  
004156  3  5D 10 4A 07  
004162  3  00 00 00 00          .byte 0,0,0,0,0,66,92,93,84,0,74,30,1,79,21,2,0,0,0,1
004166  3  00 42 5C 5D  
00416A  3  54 00 4A 1E  
004176  3  20 78 74 20          .byte 32,120,116,32,0,110,127,127,61,0,32,43,39,32,0,0,0,0,0,0
00417A  3  00 6E 7F 7F  
00417E  3  3D 00 20 2B  
00418A  3  00 40 10 00          .byte 0,64,16,0,0,88,95,95,84,0,2,79,31,1,0,0,0,0,0,0
00418E  3  00 58 5F 5F  
004192  3  54 00 02 4F  
00419E  3  00 00 00 00          .byte 0,0,0,0,0,64,94,93,16,0,11,95,95,7,0,0,2,1,0,0
0041A2  3  00 40 5E 5D  
0041A6  3  10 00 0B 5F  
0041B2  3  00 40 5C 10          .byte 0,64,92,16,0,8,95,95,95,4,0,2,15,1,0,0,0,0,0,0
0041B6  3  00 08 5F 5F  
0041BA  3  5F 04 00 02  
0041C6  3  00 00 50 00          .byte 0,0,80,0,0,64,94,95,93,16,0,11,95,7,0,0,0,0,0,0
0041CA  3  00 40 5E 5F  
0041CE  3  5D 10 00 0B  
0041DA  3  00 00 00 00          .byte 0,0,0,0,0,0,88,95,84,0,2,79,95,31,1,0,0,3,0,0
0041DE  3  00 00 58 5F  
0041E2  3  54 00 02 4F  
0041EE  3               frmlst:
0041EE  3  00 03                .byte 0,3
0041F0  3  03 02                .byte 3,2
0041F2  3  05 02                .byte 5,2
0041F4  3  07 02                .byte 7,2
0041F6  3  09 02                .byte 9,2
0041F8  3  0B 02 0D 00          .byte 11,2,13,0
0041FC  3               scdat:
0041FC  3  FD 01                .word 509
0041FE  3  FF 01 28 02          .byte 255,1,40,2,2,255,0,7,1,255,0,4,1,0,0,0,1,255,0,8,1,255,0,9,1,1,0,255,3,6,0,0,1
004202  3  02 FF 00 07  
004206  3  01 FF 00 04  
00421F  3  00 03 00 00          .byte 0,3,0,0,1,0,0,0,1,0,255,3,5,0,0,1,0,255,3,6,0,0,1,1,0,3,255,0,7,1,0,3,0,0
004223  3  01 00 00 00  
004227  3  01 00 FF 03  
004241  3  01 00 00 00          .byte 1,0,0,0,1,0,3,255,0,6,1,0,3,255,0,7,1,1,0,3,0,0,255,1,6,0,3,0,0,255,1,5,0
004245  3  01 00 03 FF  
004249  3  00 06 01 00  
004262  3  03 00 00 FF          .byte 3,0,0,255,1,5,0,3,0,0,255,1,7,2,3,255,0,9,3,2,255,0,7,3,2,255,0,7,3,2,0,0,0
004266  3  01 05 00 03  
00426A  3  00 00 FF 01  
004283  3  02 02 00 01          .byte 2,2,0,1,1,0,255,3,34,0,0,1,1,0,3,255,0,9,3,255,0,12,3,255,0,9,3,0,0,1,1,0,3
004287  3  01 00 FF 03  
00428B  3  22 00 00 01  
0042A4  3  00 00 FF 01          .byte 0,0,255,1,6,0,3,0,0,255,1,9,0,3,0,0,255,1,6,0,3,0,0,1,1,2,3,255,0,5,2,2,1
0042A8  3  06 00 03 00  
0042AC  3  00 FF 01 09  
0042C5  3  00 03 FF 00          .byte 0,3,255,0,12,3,0,0,1,0,2,2,0,0,0,3,2,0,1,1,0,255,3,6,0,0,1,0,255,3,14,0,0
0042C9  3  0C 03 00 00  
0042CD  3  01 00 02 02  
0042E6  3  01 00 FF 03          .byte 1,0,255,3,6,0,0,1,1,255,0,6,3,0,0,1,255,0,17,1,0,3,255,0,7,255,1,7,0,3,0,0,255,1,19
0042EA  3  06 00 00 01  
0042EE  3  01 FF 00 06  
004309  3  00 03 00 00          .byte 0,3,0,0,255,1,6,255,0,7,3,2,255,0,21,3,2,255,0,8,255,3,15,255,0,5,255,3,16,255,0,9,3
00430D  3  FF 01 06 FF  
004311  3  00 07 03 02  
00432A  3  FF 00 16 03          .byte 255,0,22,3,255,0,8,255,1,6,0,3,0,0,255,1,19,0,3,0,0,255,1,7,255,0,4,1,0,3,255,0,7
00432E  3  FF 00 08 FF  
004332  3  01 06 00 03  
00434B  3  01 FF 00 07          .byte 1,255,0,7,1,255,0,6,3,0,0,1,255,0,4,1,1,0,3,0,0,1,0,255,3,6,0,0,1,255,0,7,1
00434F  3  01 FF 00 06  
004353  3  03 00 00 01  
00436C  3  00 FF 03 06          .byte 0,255,3,6,0,0,1,0,3,0,0,1,1,0,3,0,0,1,0,3,255,0,4,3,0,0,1,255,0,7,1,0,3
004370  3  00 00 01 00  
004374  3  03 00 00 01  
00438D  3  FF 00 04 03          .byte 255,0,4,3,0,0,1,0,3,0,0,1,1,0,3,0,0,1,0,3,0,0,1,0,3,0,0,255,1,9,0,3,0,0
004391  3  00 00 01 00  
004395  3  03 00 00 01  
0043AF  3  01 00 03 00          .byte 1,0,3,0,0,1,0,3,0,0,1,1,0,3,255,0,4,3,0,0,1,0,3,255,0,12,3,0,0,1,0,3,255,0,4
0043B3  3  00 01 00 03  
0043B7  3  00 00 01 01  
0043D2  3  03 00 00 01          .byte 3,0,0,1,1,0,255,3,6,0,0,1,0,255,3,14,0,0,1,0,255,3,6,0,0,1,1,255,0,9,1,255,0,17
0043D6  3  01 00 FF 03  
0043DA  3  06 00 00 01  
0043F4  3  01 FF 00 09          .byte 1,255,0,9,255,1,40
0043F8  3  FF 01 28     
0043FB  3               numsc:
0043FB  3  01                   .byte 1
0043FC  3               nmedat:
0043FC  3  00 00 27 24          .byte 0,0,39,36,1,1,27,36,255
004400  3  01 01 1B 24  
004404  3  FF           
004405  3               NUMOBJ = 1
004405  3               objdta:
004405  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
004409  3  00 00 00 00  
00440D  3  00 00 00 00  
00442B  3               font:
00442B  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00442F  3  00 00 00 00  
004433  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
004437  3  30 00 30 00  
00443B  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
00443F  3  00 00 00 00  
004443  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
004447  3  6C FE 6C 00  
00444B  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
00444F  3  7E 1E 7E 18  
004453  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
004457  3  30 6E CE 00  
00445B  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00445F  3  7E CC 7E 00  
004463  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
004467  3  00 00 00 00  
00446B  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
00446F  3  18 18 0C 00  
004473  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
004477  3  30 30 60 00  
00447B  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
00447F  3  7E 18 3C 00  
004483  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
004487  3  7E 18 18 00  
00448B  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
00448F  3  00 18 18 30  
004493  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
004497  3  7E 00 00 00  
00449B  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
00449F  3  00 38 38 00  
0044A3  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0044A7  3  18 30 60 00  
0044AB  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0044AF  3  F6 E6 7C 00  
0044B3  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0044B7  3  18 18 7E 00  
0044BB  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0044BF  3  7C C0 FE 00  
0044C3  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0044C7  3  06 C6 7C 00  
0044CB  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
0044CF  3  D8 FE 18 00  
0044D3  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
0044D7  3  06 C6 7C 00  
0044DB  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
0044DF  3  C6 C6 7C 00  
0044E3  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
0044E7  3  18 30 30 00  
0044EB  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
0044EF  3  C6 C6 7C 00  
0044F3  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
0044F7  3  7E 06 7C 00  
0044FB  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
0044FF  3  00 00 30 00  
004503  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
004507  3  00 30 30 60  
00450B  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00450F  3  30 18 0C 00  
004513  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
004517  3  00 7E 00 00  
00451B  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00451F  3  0C 18 30 00  
004523  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
004527  3  18 00 18 00  
00452B  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00452F  3  FE C0 7C 00  
004533  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
004537  3  FE C6 C6 00  
00453B  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
00453F  3  C6 C6 FC 00  
004543  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
004547  3  C0 C6 7C 00  
00454B  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
00454F  3  C6 CC F8 00  
004553  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
004557  3  C0 C0 FE 00  
00455B  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00455F  3  C0 C0 C0 00  
004563  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
004567  3  DE C6 7C 00  
00456B  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
00456F  3  C6 C6 C6 00  
004573  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
004577  3  18 18 7E 00  
00457B  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
00457F  3  C6 C6 7C 00  
004583  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
004587  3  D8 CC C6 00  
00458B  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
00458F  3  C0 C0 FE 00  
004593  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
004597  3  C6 C6 C6 00  
00459B  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
00459F  3  DE CE C6 00  
0045A3  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0045A7  3  C6 C6 7C 00  
0045AB  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0045AF  3  FC C0 C0 00  
0045B3  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0045B7  3  F6 DE 7C 00  
0045BB  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0045BF  3  FC CC C6 00  
0045C3  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0045C7  3  06 C6 7C 00  
0045CB  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
0045CF  3  30 30 30 00  
0045D3  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
0045D7  3  C6 C6 7C 00  
0045DB  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
0045DF  3  C6 6C 38 00  
0045E3  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
0045E7  3  C6 FE 6C 00  
0045EB  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
0045EF  3  38 6C C6 00  
0045F3  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
0045F7  3  30 30 30 00  
0045FB  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
0045FF  3  30 60 FE 00  
004603  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
004607  3  18 18 1E 00  
00460B  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00460F  3  30 18 0C 00  
004613  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
004617  3  30 30 F0 00  
00461B  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00461F  3  30 30 30 00  
004623  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
004627  3  00 00 00 FF  
00462B  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00462F  3  60 60 FE 00  
004633  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
004637  3  7C CC 7C 00  
00463B  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00463F  3  66 66 7C 00  
004643  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
004647  3  60 60 3C 00  
00464B  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00464F  3  CC CC 7C 00  
004653  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
004657  3  F8 C0 7C 00  
00465B  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00465F  3  30 30 30 00  
004663  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
004667  3  CC 7C 0C 78  
00466B  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00466F  3  CC CC CC 00  
004673  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
004677  3  30 30 78 00  
00467B  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00467F  3  0C 0C 6C 38  
004683  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
004687  3  70 78 6C 00  
00468B  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00468F  3  30 30 1C 00  
004693  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
004697  3  FC FC FC 00  
00469B  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00469F  3  CC CC CC 00  
0046A3  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0046A7  3  CC CC 78 00  
0046AB  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0046AF  3  CC F8 C0 C0  
0046B3  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0046B7  3  CC 7C 0C 0E  
0046BB  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0046BF  3  60 60 60 00  
0046C3  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0046C7  3  78 0C F8 00  
0046CB  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0046CF  3  30 30 1C 00  
0046D3  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0046D7  3  CC CC 78 00  
0046DB  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0046DF  3  78 78 30 00  
0046E3  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
0046E7  3  FC FC 78 00  
0046EB  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
0046EF  3  30 78 CC 00  
0046F3  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
0046F7  3  CC 7C 0C 78  
0046FB  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
0046FF  3  30 60 FC 00  
004703  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
004707  3  18 18 1E 00  
00470B  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00470F  3  18 18 18 00  
004713  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
004717  3  30 30 F0 00  
00471B  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00471F  3  00 00 00 00  
004723  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
004727  3  E3 BB C6 7C  
00472B  3               jtab:
00472B  3  63                   .byte 99
00472C  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
004730  3  20 4E 4D 31  
004734  3  32 33 34     
004737  3               
004737  2               
004737  1               	.include "lib.inc"
004737  2               ;----------------------------------------------------------------------
004737  2               ; System 5 depending variables and routines
004737  2               ;----------------------------------------------------------------------
004737  2               
004737  2               ; Global variables
004737  2               
004737  2               	t_red		= 1	; Text colour definition filters
004737  2               	t_green		= 2
004737  2               	t_yellow	= 3
004737  2               	t_blue		= 4
004737  2               	t_magenta	= 5
004737  2               	t_cyan		= 6
004737  2               	t_white		= 7
004737  2               
004737  2               	g_red		= 17	; Graphics colour definition filters
004737  2               	g_green		= 18
004737  2               	g_yellow	= 19
004737  2               	g_blue		= 20
004737  2               	g_magenta	= 21
004737  2               	g_cyan		= 22
004737  2               	g_white		= 23
004737  2               
004737  2               	ScrWidth	= 40
004737  2               	ScrHeight	= 25
004737  2               
004737  2               ; System constants
004737  2               
004737  2               	IRQVEC		= $0204		; Interrupt vector
004737  2               	ScreenAddr	= $0400		; Startaddress video RAM
004737  2               
004737  2               	MC6845_Reg	= $0800		; MC6845 CRT controller register ptr
004737  2               	MC6845_Dat	= $0801		; MC6845 CRT controller data
004737  2               
004737  2               	VIA1		= $0e20
004737  2               	PORT_A		= VIA1+$1	; Keyboard
004737  2               	Timer1_Low  	= VIA1+$4	; Timer 1 low byte
004737  2               	Timer1_High 	= VIA1+$5	; Timer 1 high byte
004737  2               	Timer2_Low	= VIA1+$8	; Timer 2 low byte
004737  2               	Timer2_High	= VIA1+$9	; Timer 2 high byte
004737  2               	ACR		= VIA1+$b	; Auxiliary Control Register
004737  2               	IFR		= VIA1+$d 	; Interrupt Flag Register
004737  2               	IER		= VIA1+$e	; Interupt Enable Register
004737  2               
004737  2               	MAP 		= $D800		; properties map buffer (4x256 bytes)
004737  2               	SCADTB_lb 	= $DC00		; screen address table lo-byte (256 bytes)
004737  2               	SCADTB_hb 	= $DD00		; screen address table hi-byte (256 bytes)
004737  2               	SHRAPN 		= $DE00		; shrapnel table (55x6 bytes)
004737  2               	V_SPR_PTR	= $DF4A		; Vertical spriteframe pointer (75 bytes)
004737  2               
004737  2               ; System calls
004737  2               
004737  2               	OS_CLI   = $FFF7
004737  2               	OSBYTE   = $FFF4
004737  2               	OSWORD   = $FFF1
004737  2               	OSWRCH   = $FFEE
004737  2               	OSWRCR   = $FFEC
004737  2               	OSNEWL   = $FFE7
004737  2               	OSASCI   = $FFE3
004737  2               	OSRDCH   = $FFE0
004737  2               	OSFILE   = $FFDD
004737  2               	OSARGS   = $FFDA
004737  2               	OSBGET   = $FFD7
004737  2               	OSBPUT   = $FFD4
004737  2               	OSGBPB   = $FFD1
004737  2               	OSFIND   = $FFCE
004737  2               
004737  2               ; To be removed
004737  2               
004737  2               	SCRSYNC	= $fff4
004737  2               
004737  2               ;======================================================================
004737  2               ; System depending routines
004737  2               ;======================================================================
004737  2               
004737  2               ;----------------------------------------------------------------------
004737  2               ; Init hardware
004737  2               ;----------------------------------------------------------------------
004737  2               
004737  2               init:
004737  2               
004737  2               ; Set up screen address table.
004737  2               
004737  2               setsat:
004737  2  A9 00        	lda #<ScreenAddr	; start of screen.
004739  2  85 rr        	sta scraddr
00473B  2  A9 04        	lda #>ScreenAddr
00473D  2  85 rr        	sta scraddr+1
00473F  2               
00473F  2  A2 00        	ldx #0
004741  2  A0 00        	ldy #0			; vertical lines on screen.
004743  2               setsa0:
004743  2  A5 rr        	lda scraddr
004745  2  99 00 DC     	sta SCADTB_lb,y		; write low byte.
004748  2  A5 rr        	lda scraddr+1
00474A  2  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
00474C  2  90 02        	bcc :+
00474E  2  09 F0        	ora #$F0		; plot sprites in rom if of screen
004750  2               :
004750  2  99 00 DD     	sta SCADTB_hb,y		; write high byte.
004753  2  E8           	inx
004754  2  E0 03        	cpx #3
004756  2  D0 05        	bne :+
004758  2  20 44 33     	jsr nline		; next line down.
00475B  2  A2 00        	ldx #0
00475D  2               :
00475D  2  C8           	iny			; next position in table.
00475E  2  D0 E3        	bne setsa0
004760  2               
004760  2               ; Set up vertical sprite pointer table
004760  2               
004760  2  A0 00        	ldy #0
004762  2  A9 00        	lda #0
004764  2               vspriteloop:
004764  2  99 4A DF     	sta V_SPR_PTR,y
004767  2  18           	clc
004768  2  69 14        	adc #20
00476A  2  C9 3C        	cmp #60
00476C  2  D0 02        	bne :+
00476E  2  A9 00        	lda #0
004770  2               :
004770  2  C8           	iny
004771  2  C0 4B        	cpy #75
004773  2  D0 EF        	bne vspriteloop
004775  2               
004775  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004775  2               ; Hack for MAME to use VDU40x25
004775  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004775  2               
004775  2               ; Init VDU40x25
004775  2               
004775  2  A0 0F        	ldy #$f
004777  2               loops:
004777  2  8C 00 08     	sty MC6845_Reg
00477A  2  B9 C2 47     	lda CRTTAB,y
00477D  2  8D 01 08     	sta MC6845_Dat
004780  2  88           	dey
004781  2  10 F4        	bpl loops
004783  2               
004783  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004783  2               
004783  2               ; Disable cursor
004783  2               
004783  2  A9 0A        	lda #$0a
004785  2  8D 00 08     	sta MC6845_Reg
004788  2  A9 20        	lda #$20
00478A  2  8D 01 08     	sta MC6845_Dat
00478D  2               
00478D  2  20 D2 47     	jsr cls
004790  2               
004790  2               ; Set new interrupt routine to sync at 25Hz
004790  2               
004790  2  A9 B0        	lda #<irq_handler	; New interrupt handler
004792  2  8D 04 02     	sta IRQVEC
004795  2  A9 47        	lda #>irq_handler
004797  2  8D 05 02     	sta IRQVEC+1
00479A  2               
00479A  2  A9 30        	lda #<30000		; Interrupt at 50Hz
00479C  2  8D 24 0E     	sta Timer1_Low
00479F  2  A9 75        	lda #>30000
0047A1  2  8D 25 0E     	sta Timer1_High
0047A4  2  A9 40        	lda #%01000000
0047A6  2  8D 2B 0E     	sta ACR
0047A9  2  A9 C0        	lda #%11000000
0047AB  2  8D 2E 0E     	sta IER
0047AE  2  58           	cli
0047AF  2               
0047AF  2  60           	rts
0047B0  2               
0047B0  2               irq_handler:
0047B0  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
0047B3  2               
0047B3  2  8A           	txa			; Save x,y
0047B4  2  48           	pha
0047B5  2  98           	tya
0047B6  2  48           	pha
0047B7  2               
0047B7  2  EE C0 47     	inc frames_passed	; Nr of frames past
0047BA  2               
0047BA  2  68           	pla			; Restore x,y,a
0047BB  2  A8           	tay
0047BC  2  68           	pla
0047BD  2  AA           	tax
0047BE  2  68           	pla
0047BF  2  40           	rti
0047C0  2               
0047C0  2  00           frames_passed:	.byte 0
0047C1  2               
0047C1  2  60           	rts
0047C2  2               
0047C2  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
0047C6  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
0047CA  2  03 12 72 13  	.byte $03,$12,$72,$13
0047CE  2  04 00 07 FF  	.byte $04,$00,$07,$ff
0047D2  2               
0047D2  2               ;======================================================================
0047D2  2               ; Screen routines
0047D2  2               ;======================================================================
0047D2  2               
0047D2  2               ;----------------------------------------------------------------------
0047D2  2               ; Clear screen routine.
0047D2  2               ;
0047D2  2               ; Fill screenmem $0400-$07ff with ScrFillByte
0047D2  2               ; Set semigraphics at 1st column every line
0047D2  2               ;----------------------------------------------------------------------
0047D2  2               
0047D2  2               cls:
0047D2  2               
0047D2  2               ; Fill screen with 0
0047D2  2               
0047D2  2  A9 00        	lda #0
0047D4  2  A0 00        	ldy #0
0047D6  2               clsloop:
0047D6  2  99 00 04     	sta ScreenAddr,y
0047D9  2  99 00 05     	sta ScreenAddr+256,y
0047DC  2  99 00 06     	sta ScreenAddr+512,y
0047DF  2  99 00 07     	sta ScreenAddr+768,y
0047E2  2  C8           	iny
0047E3  2  D0 F1        	bne clsloop
0047E5  2               
0047E5  2               ; Init every row as graphics
0047E5  2               
0047E5  2  A0 00        	ldy #0
0047E7  2  A2 19        	ldx #ScrHeight
0047E9  2  AD 00 DC     	lda SCADTB_lb
0047EC  2  85 rr        	sta scraddr
0047EE  2  AD 00 DD     	lda SCADTB_hb
0047F1  2  85 rr        	sta scraddr+1
0047F3  2  AD 81 38     	lda bcolour
0047F6  2               colloop:
0047F6  2  91 rr        	sta (scraddr),y
0047F8  2  48           	pha
0047F9  2  A5 rr        	lda scraddr
0047FB  2  18           	clc
0047FC  2  69 28        	adc #ScrWidth
0047FE  2  85 rr        	sta scraddr
004800  2  90 02        	bcc :+
004802  2  E6 rr        	inc scraddr+1
004804  2               :
004804  2  68           	pla
004805  2  CA           	dex
004806  2  D0 EE        	bne colloop
004808  2               
004808  2  60           	rts
004809  2               
004809  2               ;-------------------------------------------------------------
004809  2               ; Screen synchronisation.
004809  2               ;
004809  2               ;  - read joystick/keyboard
004809  2               ;  - handle sound
004809  2               ;  - sync framerate with clock
004809  2               ;  - handle shrapnel every even frame
004809  2               ;-------------------------------------------------------------
004809  2               
004809  2               vsync:
004809  2  48           	pha
00480A  2  98           	tya
00480B  2  48           	pha
00480C  2  8A           	txa
00480D  2  48           	pha
00480E  2  20 CC 2F     	jsr joykey		; read joystick/keyboard.
004811  2               
004811  2               ; Sync framerate to 25 Hz
004811  2               
004811  2               vsync1:
004811  2  AD C0 47     	lda frames_passed	; Wait if not at 25Hz
004814  2  C9 02        	cmp #2
004816  2  90 F9        	bcc vsync1
004818  2               
004818  2  A9 00        	lda #0			; sync framerate 25 Hz
00481A  2  8D C0 47     	sta frames_passed
00481D  2               
00481D  2               
00481D  2  A5 rr        	lda clock
00481F  2  29 01        	and #1
004821  2  D0 03        	bne:+
004823  2  20 82 28     	jsr proshr		; handle shrapnel every even frame
004826  2               :
004826  2               ;	lda sndtyp
004826  2               ;	beq sndskip
004826  2               ;sndloop:
004826  2               ;	lda SpeakerBit		; handle sound
004826  2               ;	ldy sndtyp
004826  2               ;sndwait:
004826  2               ;	dey
004826  2               ;	bne sndwait
004826  2               ;	eor #4
004826  2               ;	sta SpeakerBit
004826  2               ;	dec sndtyp
004826  2               ;	bne sndloop
004826  2               ;sndskip:
004826  2               
004826  2  68           	pla
004827  2  AA           	tax
004828  2  68           	pla
004829  2  A8           	tay
00482A  2  68           	pla
00482B  2  60           	rts
00482C  2               
00482C  2  00           sndtyp:	.byte 0
00482D  2               
00482D  2               ;======================================================================
00482D  2               ; Joystick routines
00482D  2               ;======================================================================
00482D  2               
00482D  2               joyinit:
00482D  2  60           	rts
00482E  2               joy1:
00482E  2  60           	rts
00482F  2               joy2:
00482F  2  60           	rts
004830  2               
004830  2               ;======================================================================
004830  2               ; Keyboard routines
004830  2               ;======================================================================
004830  2               
004830  2               ;----------------------------------------------------------------------
004830  2               ; KTEST
004830  2               ; Check if key in A is pressed
004830  2               ; 	return clc if pressed
004830  2               ; 	return sec if not pressed
004830  2               ;----------------------------------------------------------------------
004830  2               
004830  2               ktest:
004830  2  85 rr        	sta tmp
004832  2  AD 21 0E     	lda PORT_A
004835  2  30 07        	bmi not_pressed	; BUG MAME, bit 7 not set ....
004837  2  AD 21 0E     	lda PORT_A
00483A  2  C5 rr        	cmp tmp
00483C  2  F0 02        	beq pressed
00483E  2               not_pressed:
00483E  2  38           	sec
00483F  2  60           	rts
004840  2               pressed:
004840  2  18           	clc
004841  2  60           	rts
004842  2               
004842  2               ;======================================================================
004842  2               ; PRSKEY
004842  2               ; Wait for keypress and release
004842  2               ;======================================================================
004842  2               
004842  2               prskey:
004842  2  2C 21 0E     	bit PORT_A
004845  2  10 FB        	bpl prskey
004847  2               relkey:
004847  2  2C 21 0E     	bit PORT_A
00484A  2  30 FB        	bmi relkey
00484C  2  60           	rts
00484D  2               
00484D  2               ;======================================================================
00484D  2               ; Sprite routines
00484D  2               ;======================================================================
00484D  2               
00484D  2               ;-----------------------------------------------------------------
00484D  2               ; These are the sprite routines.
00484D  2               ; sspria = single sprite, old (ix).
00484D  2               ; ssprib = single sprite, new (ix+5).
00484D  2               ; sspric = both sprites, old (ix) and new (ix+5).
00484D  2               ;-----------------------------------------------------------------
00484D  2               
00484D  2               sspria:
00484D  2  20 B6 32     	jsr gsprad		; get old sprite address.
004850  2               sspri2:
004850  2  A5 64        	lda z80_e
004852  2  8D A9 48     	sta dline1+1		; Set spritedata address
004855  2  A5 65        	lda z80_d
004857  2  8D AA 48     	sta dline1+2
00485A  2               
00485A  2  86 rr        	stx xtmp
00485C  2  A2 00        	ldx #0			; vertical lines.
00485E  2               sspri0:
00485E  2  20 A1 48     	jsr dline		; draw a line.
004861  2               
004861  2               ;.if bflag
004861  2               ;	cpx #16			; Detect end of line 3
004861  2               ;.else
004861  2  E0 14        	cpx #20			; Detect end of line 2
004863  2               ;.endif
004863  2               
004863  2  D0 F9        	bne sspri0		; no, repeat
004865  2  A6 rr        	ldx xtmp
004867  2  60           	rts
004868  2               
004868  2               ;-----------------------------------------------------------------
004868  2               ; ssprib = single sprite, new (ix).
004868  2               ;-----------------------------------------------------------------
004868  2               
004868  2               ssprib:
004868  2  20 97 32     	jsr gspran 		; get new sprite address.
00486B  2               				; z80_de = new sprite address
00486B  2  4C 50 48     	jmp sspri2
00486E  2               
00486E  2               ;-----------------------------------------------------------------
00486E  2               ; sspric = erase old sprite and plot new sprite line by line
00486E  2               ;-----------------------------------------------------------------
00486E  2               
00486E  2               sspric:
00486E  2  20 B6 32     	jsr gsprad 		; get old sprite address.
004871  2               				; z80_de = old sprite address
004871  2  A5 64        	lda z80_e
004873  2  8D C2 48     	sta ddline1+1		; Set spritedata address
004876  2  A5 65        	lda z80_d
004878  2  8D C3 48     	sta ddline1+2
00487B  2  20 E7 48     	jsr exx  		; store addresses.
00487E  2               
00487E  2  20 97 32     	jsr gspran 		; get new sprite addresses.
004881  2               				; z80_de = old sprite address
004881  2  A5 64        	lda z80_e
004883  2  8D A9 48     	sta dline1+1		; Set spritedata address
004886  2  A5 65        	lda z80_d
004888  2  8D AA 48     	sta dline1+2
00488B  2               
00488B  2  86 rr        	stx xtmp
00488D  2  A2 00        	ldx #0			; vertical lines.
00488F  2               lloop:
00488F  2  20 A1 48     	jsr dline 		; draw a line.
004892  2  CA           	dex
004893  2  CA           	dex
004894  2  CA           	dex
004895  2  CA           	dex
004896  2  CA           	dex
004897  2  20 BA 48     	jsr ddline 		; delete a line.
00489A  2               
00489A  2               ;.if bflag
00489A  2               ;	cpx #16			; Detect end of line 3
00489A  2               ;.else
00489A  2  E0 14        	cpx #20			; Detect end of line 2
00489C  2               ;.endif
00489C  2  D0 F1        	bne lloop		; no, repeat
00489E  2  A6 rr        	ldx xtmp
0048A0  2  60           	rts
0048A1  2               
0048A1  2               ;-----------------------------------------------------------------
0048A1  2               ; Erase sprite line
0048A1  2               ;-----------------------------------------------------------------
0048A1  2               
0048A1  2               dline:
0048A1  2  BC D3 48     	ldy sprline,x		; point to screenleft
0048A4  2               
0048A4  2  A9 05        	lda #5
0048A6  2  85 rr        	sta rrow
0048A8  2               dline1:
0048A8  2  BD 05 44     	lda objdta,x		; fetch spriteleft byte
0048AB  2  F0 06        	beq :+
0048AD  2  51 rr        	eor (scraddr),y		; merge with screenleft
0048AF  2  09 20        	ora #$20		; Set bit 5
0048B1  2  91 rr        	sta (scraddr),y		; write screenleft
0048B3  2               :
0048B3  2  E8           	inx			; next spritebyte
0048B4  2  C8           	iny			; point to screenmiddle
0048B5  2               
0048B5  2  C6 rr        	dec rrow
0048B7  2  D0 EF        	bne dline1
0048B9  2  60           	rts
0048BA  2               
0048BA  2               ;-----------------------------------------------------------------
0048BA  2               ; Draw sprite line
0048BA  2               ;-----------------------------------------------------------------
0048BA  2               
0048BA  2               ddline:
0048BA  2  BC D3 48     	ldy sprline,x		; point to screenleft
0048BD  2               
0048BD  2  A9 05        	lda #5
0048BF  2  85 rr        	sta rrow
0048C1  2               ddline1:
0048C1  2  BD 05 44     	lda objdta,x		; fetch spriteleft byte
0048C4  2  F0 06        	beq :+
0048C6  2  51 72        	eor (z80_hlp),y		; merge with screenleft
0048C8  2  09 20        	ora #$20		; Set bit 5
0048CA  2  91 72        	sta (z80_hlp),y		; write spritedata0
0048CC  2               :
0048CC  2  E8           	inx			; next spritebyte
0048CD  2  C8           	iny			; point to screenmiddle
0048CE  2               
0048CE  2  C6 rr        	dec rrow
0048D0  2  D0 EF        	bne ddline1
0048D2  2  60           	rts
0048D3  2               
0048D3  2               ;-----------------------------------------------------------------
0048D3  2               ; Spritebyte location on screen
0048D3  2               ;-----------------------------------------------------------------
0048D3  2               
0048D3  2               sprline:
0048D3  2  00 01 02 03  	.byte $00,$01,$02,$03,$04
0048D7  2  04           
0048D8  2  28 29 2A 2B  	.byte $28,$29,$2a,$2b,$2c
0048DC  2  2C           
0048DD  2  50 51 52 53  	.byte $50,$51,$52,$53,$54
0048E1  2  54           
0048E2  2  78 79 7A 7B  	.byte $78,$79,$7a,$7b,$7c
0048E6  2  7C           
0048E7  2               
0048E7  1               	.include "z80.asm"
0048E7  2               ;------------------------------------------------------
0048E7  2               ; z80.asm
0048E7  2               ; spectrum stuff
0048E7  2               ; adresses
0048E7  2               
0048E7  2               
0048E7  2               ; Contains seperatly 1 bit set
0048E7  2               
0048E7  2               _bitmem0	= $f8
0048E7  2               _bitmem1	= $f9
0048E7  2               _bitmem2	= $fa
0048E7  2               _bitmem3	= $fb
0048E7  2               _bitmem4	= $fc
0048E7  2               _bitmem5	= $fd
0048E7  2               _bitmem6	= $fe
0048E7  2               _bitmem7	= $ff
0048E7  2               
0048E7  2               ; constants
0048E7  2               _bitvalue0	= $01
0048E7  2               _bitvalue1	= $02
0048E7  2               _bitvalue2	= $04
0048E7  2               _bitvalue3	= $08
0048E7  2               _bitvalue4	= $10
0048E7  2               _bitvalue5	= $20
0048E7  2               _bitvalue6	= $40
0048E7  2               _bitvalue7	= $80
0048E7  2               
0048E7  2               _notbitvalue0	= $fe
0048E7  2               _notbitvalue1	= $fd
0048E7  2               _notbitvalue2	= $fb
0048E7  2               _notbitvalue3	= $f7
0048E7  2               _notbitvalue4	= $ef
0048E7  2               _notbitvalue5	= $df
0048E7  2               _notbitvalue6	= $bf
0048E7  2               _notbitvalue7	= $7f
0048E7  2               
0048E7  2               
0048E7  2               exx:
0048E7  2  A5 62        		lda z80_c
0048E9  2  A4 6E        		ldy z80_cp
0048EB  2  84 62        		sty z80_c
0048ED  2  85 6E        		sta z80_cp
0048EF  2  A5 63        		lda z80_b
0048F1  2  A4 6F        		ldy z80_bp
0048F3  2  84 63        		sty z80_b
0048F5  2  85 6F        		sta z80_bp
0048F7  2  A5 64        		lda z80_e
0048F9  2  A4 70        		ldy z80_ep
0048FB  2  84 64        		sty z80_e
0048FD  2  85 70        		sta z80_ep
0048FF  2  A5 65        		lda z80_d
004901  2  A4 71        		ldy z80_dp
004903  2  84 65        		sty z80_d
004905  2  85 71        		sta z80_dp
004907  2  A5 rr        		lda scraddr
004909  2  A4 72        		ldy z80_lp
00490B  2  84 rr        		sty scraddr
00490D  2  85 72        		sta z80_lp
00490F  2  A5 rr        		lda scraddr+1
004911  2  A4 73        		ldy z80_hp
004913  2  84 rr        		sty scraddr+1
004915  2  85 73        		sta z80_hp
004917  2  60           		rts
004918  2               
004918  2               
004918  1               eind_asm:
004918  1               eop:					; End Of Program
004918  1               
004918  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
004918  1               
