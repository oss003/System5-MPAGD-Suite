ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 1 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "testdig.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 AD 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  CE 3A        msgptr:		.word msgdat	; messages
002811  3  F6 3A        blkptr:		.word chgfx	; block graphics.
002813  3  FE 3A        proptr:		.word bprop	; address of char properties.
002815  3  02 3B        sptptr:		.word sprgfx	; sprite graphics
002817  3  5A 3D        frmptr:		.word frmlst	; sprite frames.
002819  3  60 3D        scrptr:		.word scdat	; address of screens.
00281B  3  A7 3E        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  B0 3E        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3               ;txtcol:		.byte green,yellow,blue,red
00281F  3               
00281F  3               ; Don't change the order of these four.
00281F  3               ; Menu routine relies on winlft following wintop.
00281F  3               
00281F  3  02           wintop:		.byte WINDOWTOP	; top of window.
002820  3  01           winlft:		.byte WINDOWLFT	; left edge.
002821  3  16           winhgt:		.byte WINDOWHGT	; window height.
002822  3  1E           winwid:		.byte WINDOWWID	; window width.
002823  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002824  3               
002824  3               ; Variables start here.
002824  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002824  3               
002824  3  06           wntopx:		.byte (3 * WINDOWTOP)
002825  3  02           wnlftx:		.byte (2 * WINDOWLFT)
002826  3  3F           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
002827  3  34           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
002828  3               
002828  3               ; Assorted game routines which can go in contended memory.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for inventory called by the INV command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with objects seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected objectnr of INV menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if mflag
002828  3               minve:
002828  3               .if gflag
002828  3               	lda #$ff		; blue frontcolour
002828  3               	sta andeor
002828  3               	lda #$aa		; yellow backcoloour
002828  3               	sta andeor+1
002828  3               .endif
002828  3               	lda #<(invdis)		; routine address.
002828  3               	sta mod0+1		; set up menu routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(invdis)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               	lda #<(fopt)		; find option from available objects.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fopt)
002828  3               	sta mod1+1+1
002828  3               	jmp dbox		; do menu routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for menu called by the MENU command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with menu items seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected line nr of MENU menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               mmenu:
002828  3               	lda #<(always)		; routine address.
002828  3               	sta mod0+1		; set up routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(always)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               
002828  3               	lda #<(fstd)		; standard option selection.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fstd)
002828  3               	sta mod1+2
002828  3               
002828  3               ; Drop through into box routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Work out size of box for message or menu.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               dbox:
002828  3               	lda #<(msgdat)		; pointer to messages.
002828  3               	sta z80_l
002828  3               	lda #>(msgdat)
002828  3               	sta z80_h
002828  3               
002828  3               	jsr getwrd		; get message number.
002828  3               
002828  3               	lda z80_h		; store pointer to message.
002828  3               	sta TmpAddr
002828  3               	lda z80_l
002828  3               	sta TmpAddr+1
002828  3               
002828  3               	lda #1			; height.
002828  3               	sta z80_d
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               	sta z80_e		; maximum width.
002828  3               dbox5:
002828  3               	lda #0			; this line"s width.
002828  3               	sta z80_b
002828  3               mod2:
002828  3               	jsr always		; item in player"s possession?
002828  3               	cmp #255
002828  3               	bne dbox6		; not in inventory, skip this line.
002828  3               	inc z80_d		; add to tally.
002828  3               dbox6:
002828  3               	ldy #0			; get character.
002828  3               	lda (z80_hl),y
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a		; reached end of line?
002828  3               	cmp #','
002828  3               	beq dbox3		; yes.
002828  3               	cmp #13
002828  3               	beq dbox3		; yes.
002828  3               	inc z80_b		; add to this line"s width.
002828  3               	lda z80_a
002828  3               	bmi dbox4		; end of message? yes, end count.
002828  3               	jmp dbox6		; repeat until we find the end.
002828  3               dbox3:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox5		; no, carry on looking.
002828  3               	lda z80_b		; make this the widest so far.
002828  3               	sta z80_e
002828  3               	jmp dbox5		; keep looking.
002828  3               dbox4:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox8		; no, carry on looking.
002828  3               	lda z80_b		; final line is the longest so far.
002828  3               	sta z80_e
002828  3               dbox8:
002828  3               	dec z80_d		; decrement items found.
002828  3               	bne :+			; total was zero.
002828  3               	lda #255
002828  3               	sta varopt
002828  3               	jmp dbox15
002828  3               :
002828  3               	lda z80_e		; longest line.
002828  3               	bne :+			; was it zero?
002828  3               	jmp dbox15		; total was zero.
002828  3               :
002828  3               	sta bwid		; set up size.
002828  3               	lda z80_d
002828  3               	sta blen
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; That's set up our box size.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               	lda winhgt		; window height in characters.
002828  3               	sec
002828  3               	sbc z80_d		; subtract height of box.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc wintop		; add top edge of window.
002828  3               	sta btop		; set up box top.
002828  3               
002828  3               	lda winwid		; window width in characters.
002828  3               	sec
002828  3               	sbc z80_e		; subtract box width.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc winlft		; add left edge of window.
002828  3               	sta blft		; box left.
002828  3               
002828  3               	lda #<(FONT-256)		; font.
002828  3               	sta grbase		; set up for text display.
002828  3               	lda #>(FONT-256)
002828  3               	sta grbase+1
002828  3               
002828  3               	lda TmpAddr+1		; restore message pointer.
002828  3               	sta z80_l
002828  3               	lda TmpAddr
002828  3               	sta z80_h
002828  3               
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set display coordinate.
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               dbox2:
002828  3               	lda combyt		; get object number.
002828  3               	sta z80_a
002828  3               mod0:
002828  3               	jsr always		; check inventory for display.
002828  3               	cmp #255
002828  3               	beq :+
002828  3               	jmp dbox13		; not in inventory, skip this line.
002828  3               :
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set left display position.
002828  3               	lda bwid		; box width.
002828  3               	sta z80_b		; store width.
002828  3               
002828  3               	lda fcolour		; Set textcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               dbox0:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	cmp #','		; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               	cmp #13			; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               
002828  3               	cmp #141			; end of line?
002828  3               	bne :+
002828  3               	dec bwid
002828  3               	jmp dbox7		; yes, next one.
002828  3               :
002828  3               	dec z80_b		; one less to display.
002828  3               	and #127		; remove terminator.
002828  3               
002828  3               	jsr pchr		; display on screen.
002828  3               
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a
002828  3               	cmp #128		; end of message?
002828  3               	bmi :+
002828  3               	jsr dscor2
002828  3               	jmp dbox7		; yes, job done.
002828  3               :
002828  3               	lda z80_b		; chars remaining.
002828  3               	beq :+			; are any left?
002828  3               	jmp dbox0		; yes, continue.
002828  3               :
002828  3               ;---------------------------------------------------
002828  3               ; Reached limit of characters per line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dbox9:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #13			; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #128		; end of message?
002828  3               	bcs :+
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox9
002828  3               
002828  3               ;---------------------------------------------------
002828  3               ; Fill box to end of line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dboxf:
002828  3               	lda #32			; space character.
002828  3               	jsr pchr		; display character.
002828  3               	dec z80_b
002828  3               	beq :+
002828  3               	jmp dboxf		; repeat for remaining chars on line.
002828  3               :
002828  3               	rts
002828  3               dbox1:
002828  3               	inc z80_l		; skip character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	jsr dboxf		; fill box out to right side.
002828  3               dbox10:
002828  3               	inc dispy		; y coordinate down a line next position.
002828  3               	jmp dbox2		; next line.
002828  3               dbox7:
002828  3               	lda z80_b		; chars remaining.
002828  3               	bne :+			; are any left?
002828  3               	jmp dbox11		; no, nothing to draw.
002828  3               :
002828  3               	jsr dboxf		; fill message to line.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Drawn the box menu, now select option.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox11:
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set bar position.
002828  3               dbox14:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	bne dbox14		; yes, debounce it.
002828  3               	jsr dbar		; draw bar.
002828  3               dbox12:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	beq dbox12		; no, nothing.
002828  3               	and #16			; fire button pressed?
002828  3               	bne :+
002828  3               mod1:
002828  3               	jmp fstd		; yes, job done.
002828  3               :
002828  3               	jsr dbar		; delete bar.
002828  3               
002828  3               	lda joyval		; joystick reading.
002828  3               	and #8			; going up?
002828  3               	beq dboxu		; yes, go up.
002828  3               
002828  3               	ldx dispy		; vertical position of bar.
002828  3               	inx			; look down.
002828  3               	txa
002828  3               	sec
002828  3               	sbc btop		; find distance from top.
002828  3               	cmp blen		; top of box.
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	inc dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               dboxu:
002828  3               	lda dispy		; vertical position of bar.
002828  3               	cmp btop		; are we at the top?
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	dec dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               fstd:
002828  3               	lda dispy		; bar position.
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta varopt		; store the option.
002828  3               	jmp redraw		; redraw the screen.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Option not available.  Skip this line.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox13:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               	cmp #13			; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               
002828  3               	bpl :+			; end of message?
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox13
002828  3               dbox15:
002828  3               	lda TmpAddr		; pop message pointer from the stack.
002828  3               	sta z80_h
002828  3               	lda TmpAddr+1
002828  3               	sta z80_l
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Invert bar
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbar:
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set display coordinate.
002828  3               	jsr gprad		; get printing address.
002828  3               
002828  3               ;	lda bwid		; box width.
002828  3               ;	sta z80_c		; loop counter in c.
002828  3               ;	lda z80_h
002828  3               ;	sta z80_d		; store screen address high byte.
002828  3               ;dbar1:
002828  3               ;	ldx #7			; pixel height in b.
002828  3               ;dbar0:
002828  3               ;	ldy scrtab,x
002828  3               ;	lda (scraddr),y		; get screen byte.
002828  3               ;	eor #255		; reverse all bits.
002828  3               ;	sta (scraddr),y		; write back to screen.
002828  3               ;	dex			; next line down.
002828  3               ;	bpl dbar0		; draw rest of character.
002828  3               
002828  3               ;	inc scraddr		; one char right.
002828  3               ;	dec z80_c		; decrement character counter.
002828  3               ;	bne dbar1		; repeat for whole line.
002828  3               
002828  3               	ldy #0
002828  3               	lda (scraddr),y
002828  3               	eor #7
002828  3               	sta (scraddr),y
002828  3               
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Point to object
002828  3               ;
002828  3               ; Input:
002828  3               ;  combyt
002828  3               ;
002828  3               ; Output:
002828  3               ;  A = object number, A=255 if already in possession
002828  3               ;------------------------------------------------------
002828  3               
002828  3               invdis:
002828  3               	lda z80_l		; store message text pointer.
002828  3               	pha
002828  3               	lda z80_h
002828  3               	pha
002828  3               	lda combyt		; object number.
002828  3               	inc combyt		; ready for next one.
002828  3               	jsr gotob		; check if we have object.
002828  3               	tay
002828  3               	pla
002828  3               	sta z80_h
002828  3               	pla
002828  3               	sta z80_l
002828  3               	tya
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Find option selected.
002828  3               ;
002828  3               ; Input:
002828  3               ;  -
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected object
002828  3               ;------------------------------------------------------
002828  3               
002828  3               fopt:
002828  3               	lda dispy
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta tmp+2		; option selected in b register.
002828  3               	inc tmp+2
002828  3               
002828  3               	lda #0			; set to first item.
002828  3               	sta combyt		; object number.
002828  3               fopt0:
002828  3               	jsr fobj		; find next object in inventory.
002828  3               	dec tmp+2
002828  3               	bne fopt0		; repeat for relevant steps down the list.
002828  3               
002828  3               	lda combyt		; get option.
002828  3               	sta varopt		; store the option.
002828  3               	dec varopt		; one less, due to where we increment combyt.
002828  3               	jmp redraw		; redraw the screen.
002828  3               fobj:
002828  3               	ldy combyt		; object number.
002828  3               	inc combyt		; ready for next item.
002828  3               	tya
002828  3               	jsr gotob		; do we have this item?
002828  3               	cmp #255
002828  3               	bne :+
002828  3               	rts
002828  3               :
002828  3               	jmp fobj		; yes, it's on the list.
002828  3               .endif
002828  3               
002828  3               ;----------------------------------------------------
002828  3               ; Delay routine A * 1/25 sec
002828  3               ;----------------------------------------------------
002828  3               
002828  3               delay:
002828  3  85 rr        	sta xtmp
00282A  3               
00282A  3               del_start:
00282A  3  A9 00        	lda #0
00282C  3  8D 6B 42     	sta frames_passed
00282F  3               del_loop:
00282F  3  AD 6B 42     	lda frames_passed
002832  3  C9 02        	cmp #2
002834  3  90 F9        	bcc del_loop
002836  3               
002836  3  A9 00        	lda #0
002838  3  8D 6B 42     	sta frames_passed
00283B  3  C6 rr        	dec xtmp
00283D  3  D0 EB        	bne del_start
00283F  3  60           	rts
002840  3               
002840  3               ;----------------------------------------------------
002840  3               ; Clear sprite table.
002840  3               ;
002840  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002840  3               ;----------------------------------------------------
002840  3               
002840  3               xspr:
002840  3  A9 FF        	lda #255		; clear byte.
002842  3  A2 00        	ldx #0			; length of table.
002844  3               xspr0:
002844  3  9D 26 38     	sta sprtab,x		; sprite table.
002847  3  E8           	inx			; move to next byte.
002848  3  E0 CC        	cpx #SPRBUF
00284A  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284C  3  60           	rts
00284D  3               
00284D  3               ;-------------------------------------------------------------
00284D  3               ; Initialise all objects.
00284D  3               ;
00284D  3               ; Reset current room,y,x to start room,y,x for all objects
00284D  3               ;-------------------------------------------------------------
00284D  3               
00284D  3               .if oflag
00284D  3               iniob:
00284D  3               	lda #<objdta 		; objects table.
00284D  3               	sta z80_x
00284D  3               	lda #>objdta
00284D  3               	sta z80_i
00284D  3               
00284D  3               	ldx numob 		; number of objects in the game.
00284D  3               iniob0:
00284D  3               	ldy #35
00284D  3               	lda (z80_ix),y 		; start screen.
00284D  3               	ldy #32
00284D  3               	sta (z80_ix),y 		; set start screen.
00284D  3               
00284D  3               	ldy #36
00284D  3               	lda (z80_ix),y 		; find start y.
00284D  3               	ldy #33
00284D  3               	sta (z80_ix),y 		; set start y.
00284D  3               
00284D  3               	ldy #37
00284D  3               	lda (z80_ix),y 		; get initial x.
00284D  3               	ldy #34
00284D  3               	sta (z80_ix),y 		; set x coord.
00284D  3               
00284D  3               	clc 			; point to next object.
00284D  3               	lda z80_x
00284D  3               	adc #38			; distance between objects.
00284D  3               	sta z80_x
00284D  3               	bcc :+
00284D  3               	inc z80_i
00284D  3               :
00284D  3               	dex 			; repeat.
00284D  3               	bne iniob0
00284D  3               
00284D  3               	rts
00284D  3               .endif
00284D  3               
00284D  3               ;-----------------------------------------------
00284D  3               ; Redraw the screen.
00284D  3               ;
00284D  3               ; Remove old copy of all sprites for redraw.
00284D  3               ;-----------------------------------------------
00284D  3               
00284D  3               redraw:
00284D  3               .if gflag
00284D  3               	lda #$ff
00284D  3               	sta andeor
00284D  3               	lda #$00
00284D  3               	sta andeor+1
00284D  3               .endif
00284D  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
00284F  3  48           	pha
002850  3  A5 68        	lda z80_x
002852  3  48           	pha
002853  3               
002853  3  20 4D 2D     	jsr droom		; show screen layout.
002856  3               .if oflag
002856  3               	jsr shwob		; draw objects.
002856  3               .endif
002856  3               numsp0:
002856  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002858  3  8D 8D 28     	sta tmpbyte
00285B  3               
00285B  3  A9 26        	lda #<sprtab		; sprite table.
00285D  3  85 68        	sta z80_x
00285F  3  A9 38        	lda #>sprtab
002861  3  85 69        	sta z80_i
002863  3               redrw0:
002863  3  A0 00        	ldy #0
002865  3  B1 68        	lda (z80_ix),y		; old sprite type.
002867  3  C9 FF        	cmp #255		; is it enabled?
002869  3  F0 0B        	beq redrw1 		; no, find next one.
00286B  3               
00286B  3  A0 03        	ldy #3
00286D  3  B1 68        	lda (z80_ix),y 		; sprite y.
00286F  3  C9 B1        	cmp #177		; beyond maximum?
002871  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002873  3               
002873  3  20 3F 43     	jsr sspria		; show single sprite.
002876  3               redrw1:
002876  3  18           	clc			; next sprite.
002877  3  A5 68        	lda z80_x
002879  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00287B  3  85 68        	sta z80_x
00287D  3  90 02        	bcc :+
00287F  3  E6 69        	inc z80_i
002881  3               :
002881  3  CE 8D 28     	dec tmpbyte			; repeat for remaining sprites.
002884  3  D0 DD        	bne redrw0
002886  3               rpblc1:
002886  3               ;	jsr dshrp		; redraw shrapnel.
002886  3               
002886  3               .if aflag
002886  3               	jsr rbloc		; draw blocks for this screen
002886  3               .endif
002886  3  68           	pla			; retrieve sprite pointer.
002887  3  85 68        	sta z80_x
002889  3  68           	pla
00288A  3  85 69        	sta z80_i
00288C  3               
00288C  3  60           	rts
00288D  3               
00288D  3  00           tmpbyte:	.byte 0
00288E  3               ;----------------------------------------------------------------------
00288E  3               ; Atomic palette is static
00288E  3               ;----------------------------------------------------------------------
00288E  3               
00288E  3               setpal:
00288E  3  60           	rts
00288F  3               
00288F  3               ;----------------------------------------------------------------------
00288F  3               ; FODDER check
00288F  3               ;----------------------------------------------------------------------
00288F  3               
00288F  3               .if pflag .or dflag
00288F  3               fdchk:
00288F  3  C9 04        	cmp #FODDER 		; is it fodder?
002891  3  F0 01        	beq :+
002893  3  60           	rts 			; no.
002894  3               :
002894  3  A9 00        	lda #0			; wipe fodder in MAP
002896  3  A0 00        	ldy #0
002898  3  91 rr        	sta (bufaddr),y 	; rewrite block type.
00289A  3               
00289A  3  A5 rr        	lda bufaddr		; calculate screenaddr
00289C  3  85 rr        	sta scraddr
00289E  3  38           	sec
00289F  3  A5 rr        	lda bufaddr+1
0028A1  3  E9 D4        	sbc #>(MAP-ScreenAddr)	;$d4
0028A3  3  85 rr        	sta scraddr+1
0028A5  3               
0028A5  3  A9 00        	lda #0
0028A7  3  A0 00        	ldy #0			; erase block on screen
0028A9  3  91 rr        	sta (scraddr),y
0028AB  3               
0028AB  3  60           	rts
0028AC  3               .endif
0028AC  3               
0028AC  3               ;----------------------------------------------------
0028AC  3               ; Scrolly text and puzzle variables.
0028AC  3               ;----------------------------------------------------
0028AC  3               
0028AC  3               .if sflag
0028AC  3               txtbit:	.byte 128		; bit to write.
0028AC  3               txtwid:	.byte 16		; width of ticker message.
0028AC  3               txtpos:	.word msgdat
0028AC  3               txtini:	.word msgdat
0028AC  3               txtscr:	.word ScreenAddr
0028AC  3               .endif
0028AC  3               
0028AC  3               ;----------------------------------------------------
0028AC  3               ; Specialist routines.
0028AC  3               ; Process shrapnel.
0028AC  3               ;----------------------------------------------------
0028AC  3               proshr:
0028AC  3               .if pflag
0028AC  3               	lda #<SHRAPN		; table.
0028AC  3               	sta z80_x
0028AC  3               	lda #>SHRAPN
0028AC  3               	sta z80_i
0028AC  3               
0028AC  3               	lda #NUMSHR		; shrapnel pieces to process.
0028AC  3               	sta shrctr
0028AC  3               prosh0:
0028AC  3               	ldy #0
0028AC  3               	lda (z80_ix),y		; on/off marker.
0028AC  3               	asl a
0028AC  3               proshx:
0028AC  3               	bcs :+
0028AC  3               	jsr prosh1 		; on, so process it.
0028AC  3               :
0028AC  3               	clc
0028AC  3               	lda z80_x
0028AC  3               	adc #SHRSIZ
0028AC  3               	sta z80_x
0028AC  3               	bcc :+
0028AC  3               	inc z80_i
0028AC  3               :
0028AC  3               	dec shrctr		; round again.
0028AC  3               	bne prosh0
0028AC  3               .endif
0028AC  3               .if sflag
0028AC  3               	jsr scrly
0028AC  3               .endif
0028AC  3  60           	rts
0028AD  3               
0028AD  3               .if pflag
0028AD  3               ;shrctr:	.byte 0
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Proces shrapnel piece
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               prosh1:
0028AD  3               	jsr plot 		; delete the pixel.
0028AD  3               
0028AD  3               	lda #<shrptr		; shrapnel routine pointers.
0028AD  3               	sta z80_l
0028AD  3               	lda #>shrptr
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	ldy #0
0028AD  3               	lda (z80_ix),y		; restore shrapnel type.
0028AD  3               	jsr prosh2 		; run the routine.
0028AD  3               	jsr chkxy		; check x and y are good before we redisplay.
0028AD  3               
0028AD  3               	lda #<SHRSIZ 		; distance to next.
0028AD  3               	sta z80_e
0028AD  3               	lda #>SHRSIZ
0028AD  3               	sta z80_d
0028AD  3               	rts
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Run the routine
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               prosh2:
0028AD  3               	asl a 			; 2 bytes per address.
0028AD  3               	tay
0028AD  3               	lda shrptr,y
0028AD  3               	sta z80_l
0028AD  3               	lda shrptr+1,y 		; fetch high byte from table.
0028AD  3               	sta z80_h
0028AD  3               	jmp (z80_hl) 		; jump to routine.
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Paricle routine table
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               shrptr:	.word laser		; laser.
0028AD  3               	.word trail		; vapour trail.
0028AD  3               	.word shrap		; shrapnel from explosion.
0028AD  3               	.word dotl		; horizontal starfield left.
0028AD  3               	.word dotr		; horizontal starfield right.
0028AD  3               	.word dotu		; vertical starfield up.
0028AD  3               	.word dotd		; vertical starfield down.
0028AD  3               	.word ptcusr		; user particle.
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Explosion shrapnel.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               shrap:
0028AD  3               	ldy #1
0028AD  3               	lda (z80_ix),y 		; get the angle.
0028AD  3               	clc
0028AD  3               	adc #<shrsin		; shrapnel sine table.
0028AD  3               	sta z80_l
0028AD  3               	lda #>shrsin
0028AD  3               	adc #0
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	ldy #0
0028AD  3               	lda (z80_hl),y 		; fetch value from table.
0028AD  3               	sta z80_e
0028AD  3               	inc z80_l 		; next byte of table.
0028AD  3               	bne :+
0028AD  3               	inc z80_h
0028AD  3               :
0028AD  3               	ldy #0
0028AD  3               	lda (z80_hl),y		; fetch value from table.
0028AD  3               	sta z80_d
0028AD  3               	inc z80_l		; next byte of table.
0028AD  3               	bne :+
0028AD  3               	inc z80_h
0028AD  3               :
0028AD  3               	ldy #0
0028AD  3               	lda (z80_hl),y 		; fetch value from table.
0028AD  3               	sta z80_c
0028AD  3               	inc z80_l 		; next byte of table.
0028AD  3               	bne :+
0028AD  3               	inc z80_h
0028AD  3               :
0028AD  3               	ldy #0
0028AD  3               	lda (z80_hl),y 		; fetch value from table.
0028AD  3               	sta z80_b
0028AD  3               
0028AD  3               	ldy #2
0028AD  3               	lda (z80_ix),y 		; x coordinate in hl.
0028AD  3               	clc
0028AD  3               	adc z80_e		; add sine lb
0028AD  3               	sta (z80_ix),y		; store new coordinate lb.
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y
0028AD  3               	adc z80_d		; add sine hb
0028AD  3               	sta (z80_ix),y		; store new coordinate hb.
0028AD  3               
0028AD  3               	ldy #4
0028AD  3               	lda (z80_ix),y	 	; y coordinate in hl.
0028AD  3               	clc
0028AD  3               	adc z80_c		; add cosine lb
0028AD  3               	sta (z80_ix),y		; store new coordinate lb.
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y
0028AD  3               	adc z80_b		; add cosine lb
0028AD  3               	sta (z80_ix),y		; store new coordinate hb.
0028AD  3               
0028AD  3               	rts
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Move dots
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               dotl:
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y
0028AD  3               	sec
0028AD  3               	sbc #1		 	; move left.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               dotr:
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y
0028AD  3               	clc
0028AD  3               	adc #1		 	; move left.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               dotu:
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y
0028AD  3               	sec
0028AD  3               	sbc #1		 	; move up.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               dotd:
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y
0028AD  3               	clc
0028AD  3               	adc #1			; move down.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Check if coordinates are ok before redrawing at new position.
0028AD  3               ;
0028AD  3               ; left:   X>L		X=L	Ok
0028AD  3               ; right:  R+15>X	X=R	Ok
0028AD  3               ; top:    Y>T		Y=T	Ok
0028AD  3               ; bottom: B+15>Y	Y=B	Ok
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               chkxy:
0028AD  3               
0028AD  3               ; top:    Y>T		Y=T	Ok
0028AD  3               
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0028AD  3               	cmp wntopx		; window top.
0028AD  3               	bcs :+			; compare with top window limit.
0028AD  3               	jmp kilshr		; out of window, kill shrapnel.
0028AD  3               :
0028AD  3               ; left:   X>L		X=L	Ok
0028AD  3               
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0028AD  3               	cmp wnlftx		; left edge.
0028AD  3               	bcs :+			; compare with left window limit.
0028AD  3               	jmp kilshr		; out of window, kill shrapnel.
0028AD  3               :
0028AD  3               ; bottom: B+15>Y	Y=B	Ok
0028AD  3               
0028AD  3               	lda wnbotx		; point to bottom.
0028AD  3               	ldy #3
0028AD  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0028AD  3               	bcs :+			; compare with shrapnel x coordinate.
0028AD  3               	jmp kilshr		; off screen, kill shrapnel..
0028AD  3               :
0028AD  3               ; right:  R+15>X	X=R	Ok
0028AD  3               	lda wnrgtx		; point to right edge.
0028AD  3               	ldy #5
0028AD  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0028AD  3               	bcs :+			; compare with window limit.
0028AD  3               	jmp kilshr		; off screen, kill shrapnel.
0028AD  3               :
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Drop through.
0028AD  3               ; Display shrapnel.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               plot:
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y		; y integer.
0028AD  3               	sta dispy	 	; workspace coordinates.
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y	 	; x integer.
0028AD  3               	sta dispx 		; workspace coordinates.
0028AD  3               
0028AD  3               	ldy #0
0028AD  3               	lda (z80_ix),y 		; type.
0028AD  3               	bne :+			; is it a laser?
0028AD  3               	jmp plot1 		; yes, draw laser instead.
0028AD  3               :
0028AD  3               plot0:
0028AD  3               	lda dispx		; which pixel within byte do we
0028AD  3               	and #1			; want to set first?
0028AD  3               	tay
0028AD  3               	lda dots,y 		; table of small pixel positions.
0028AD  3               	sta z80_e 		; get value.
0028AD  3               
0028AD  3               	jsr scadd 		; screen address.
0028AD  3               	ldy #0
0028AD  3               	lda (scraddr),y		; see what's already there.
0028AD  3               	eor z80_e
0028AD  3               	ora #$20
0028AD  3               	sta (scraddr),y 	; put back on screen.
0028AD  3               	rts
0028AD  3               
0028AD  3               plot1:
0028AD  3               	jsr scadd 		; screen address.
0028AD  3               	ldy #0
0028AD  3               	lda (scraddr),y 	; fetch byte there.
0028AD  3               	eor #12 		; toggle all bits.
0028AD  3               	ora #$20
0028AD  3               	sta (scraddr),y 	; new byte.
0028AD  3               	rts
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Switch off shrapnel
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               kilshr:
0028AD  3               	lda #128
0028AD  3               	ldy #0
0028AD  3               	sta (z80_ix),y	; switch off shrapnel.
0028AD  3               	rts
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Sine/cosine table
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0028AD  3               	.word 1024,0,946,65144,724,64811,391,64589
0028AD  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0028AD  3               	.word 64512,0,64589,391,64811,724,65144,946
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Create trail
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               trail:
0028AD  3               	ldy #1
0028AD  3               	lda (z80_ix),y 	; time remaining.
0028AD  3               	sec
0028AD  3               	sbc #1
0028AD  3               	sta (z80_ix),y
0028AD  3               	bne :+
0028AD  3               	jmp trailk		; time to switch it off.
0028AD  3               :
0028AD  3               	jsr qrand		; get a random number.
0028AD  3               	lsr a 			; x or y axis?
0028AD  3               	bcc :+
0028AD  3               	jmp trailv		; use y.
0028AD  3               :
0028AD  3               ; Trail horizontal
0028AD  3               
0028AD  3               	lsr a 			; which direction?
0028AD  3               	bcc :+
0028AD  3               	jmp traill		; go left.
0028AD  3               :
0028AD  3               ; Trail right
0028AD  3               
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y
0028AD  3               	clc
0028AD  3               	adc #1	 		; go right.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               
0028AD  3               ; Trail left
0028AD  3               
0028AD  3               traill:
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y
0028AD  3               	sec
0028AD  3               	sbc #1 			; go left.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               
0028AD  3               ; Trail vertical
0028AD  3               
0028AD  3               trailv:
0028AD  3               	lsr a		 	; which direction?
0028AD  3               	bcc :+
0028AD  3               	jmp trailu		; go up.
0028AD  3               :
0028AD  3               ; Trail down
0028AD  3               
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y
0028AD  3               	clc
0028AD  3               	adc #1 			; go down.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               
0028AD  3               ; Trail up
0028AD  3               
0028AD  3               trailu:
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y
0028AD  3               	sec
0028AD  3               	sbc #1 			; go up.
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               
0028AD  3               ; Kill trail
0028AD  3               
0028AD  3               trailk:
0028AD  3               	lda #200		; set off-screen to kill vapour trail.
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y
0028AD  3               	rts
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Create laser beam
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               laser:
0028AD  3               	ldy #1
0028AD  3               	lda (z80_ix),y 		; direction.
0028AD  3               	ror a 			; left or right?
0028AD  3               	bcc :+
0028AD  3               	jmp laserl		; move left.
0028AD  3               :
0028AD  3               ; Laser right
0028AD  3               
0028AD  3               	lda #2			; distance to travel.
0028AD  3               	sta z80_b
0028AD  3               	jmp laserm		; move laser.
0028AD  3               
0028AD  3               ; Laser left
0028AD  3               
0028AD  3               laserl:
0028AD  3               	lda #254		; distance to travel.
0028AD  3               	sta z80_b
0028AD  3               laserm:
0028AD  3               	ldy #5
0028AD  3               	lda (z80_ix),y		; x position.
0028AD  3               	clc
0028AD  3               	adc z80_b		; add distance.
0028AD  3               	sta (z80_ix),y		; set new x coordinate.
0028AD  3               
0028AD  3               ; Test new block.
0028AD  3               
0028AD  3               	sta dispx 		; set x for block collision detection purposes.
0028AD  3               	ldy #3
0028AD  3               	lda (z80_ix),y 		; get y.
0028AD  3               	sta dispy		; set coordinate for collision test.
0028AD  3               	jsr tstbl 		; get block type there.
0028AD  3               	cmp #WALL		; is it solid?
0028AD  3               	bne :+
0028AD  3               	jmp trailk		; yes, it cannot pass.
0028AD  3               :
0028AD  3               .if pflag .or dflag
0028AD  3                       cmp #FODDER             ; is it fodder?
0028AD  3                       bne :+
0028AD  3                       jsr fdchk               ; remove fodder block.
0028AD  3                       jmp trailk              ; destroy laser.
0028AD  3               :
0028AD  3               .endif
0028AD  3                       rts                     ; no, ignore it.
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Dots mask
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               dots:	.byte 2,1
0028AD  3               
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Plot, preserving de.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               plotde:
0028AD  3               	lda z80_d 		; put de on stack.
0028AD  3               	pha
0028AD  3               	lda z80_e
0028AD  3               	pha
0028AD  3               
0028AD  3               	jsr plot 		; plot pixel.
0028AD  3               
0028AD  3               	pla			; restore de from stack.
0028AD  3               	sta z80_e
0028AD  3               	pla
0028AD  3               	sta z80_d
0028AD  3               
0028AD  3               	rts
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Shoot a laser.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               shoot:
0028AD  3               	sta z80_c		; store type in c register.
0028AD  3               	ldy #8
0028AD  3               	lda (z80_ix),y 		; y coordinate.
0028AD  3               	clc
0028AD  3               shoot1:
0028AD  3               	adc #(SPR_HGT/2)	; down 4 pixels.
0028AD  3               	sta z80_l 		; y coordinate in l.
0028AD  3               
0028AD  3               	ldy #9
0028AD  3               	lda (z80_ix),y 		; x coordinate in h.
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	lda z80_i		; store pointer to sprite.
0028AD  3               	pha
0028AD  3               	lda z80_x
0028AD  3               	pha
0028AD  3               
0028AD  3               	jsr fpslot 		; find particle slot.
0028AD  3               	bcs :+
0028AD  3               	jmp vapou2		; failed, restore ix.
0028AD  3               :
0028AD  3               	lda #0
0028AD  3               	ldy #0
0028AD  3               	sta (z80_ix),y 		; set up type laser.
0028AD  3               
0028AD  3               	lda z80_c
0028AD  3               	ldy #1
0028AD  3               	sta (z80_ix),y 		; set the direction.
0028AD  3               
0028AD  3               	lda z80_l
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y		; set y coordinate.
0028AD  3               
0028AD  3               	ror z80_c		; check direction we want.
0028AD  3               	bcs :+
0028AD  3               	jmp shootr		; shoot right.
0028AD  3               :
0028AD  3               	lda z80_h		; X position.
0028AD  3               shoot0:
0028AD  3               	and #$fe		; align on character boundary.
0028AD  3               	ldy #5
0028AD  3               	sta (z80_ix),y		; set x coordinate.
0028AD  3               	jmp vapou0 		; draw first image.
0028AD  3               shootr:
0028AD  3               	lda z80_h		; x position.
0028AD  3               	clc
0028AD  3               	adc #SPR_WID-1		; look right.
0028AD  3               	jmp shoot0		; align and continue.
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Create a bit of vapour trail.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               vapour:
0028AD  3               	lda z80_i		; store pointer to sprite.
0028AD  3               	pha
0028AD  3               	lda z80_x
0028AD  3               	pha
0028AD  3               
0028AD  3               	ldy #8
0028AD  3               	lda (z80_ix),y 		; y coordinate.
0028AD  3               	clc
0028AD  3               vapou3:
0028AD  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0028AD  3               	sta z80_l
0028AD  3               
0028AD  3               	ldy #9
0028AD  3               	lda (z80_ix),y 		; x coordinate.
0028AD  3               	adc #7
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	jsr fpslot 		; find particle slot.
0028AD  3               	bcc :+
0028AD  3               	jmp vapou1		; no, we can use it.
0028AD  3               :
0028AD  3               vapou2:
0028AD  3               	pla
0028AD  3               	sta z80_x
0028AD  3               	pla
0028AD  3               	sta z80_i
0028AD  3               	rts
0028AD  3               vapou1:
0028AD  3               	lda z80_l
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y		; set up y.
0028AD  3               
0028AD  3               	lda z80_h
0028AD  3               	ldy #5
0028AD  3               	sta (z80_ix),y 		; set up x coordinate.
0028AD  3               
0028AD  3               	jsr qrand		; get quick random number.
0028AD  3               	and #15			; random time.
0028AD  3               	clc
0028AD  3               	adc #15			; minimum time on screen.
0028AD  3               	ldy #1
0028AD  3               	sta (z80_ix),y		; set time on screen.
0028AD  3               
0028AD  3               	lda #1
0028AD  3               	ldy #0
0028AD  3               	sta (z80_ix),y		; define particle as vapour trail.
0028AD  3               vapou0:
0028AD  3               	jsr chkxy		; plot first position.
0028AD  3               	jmp vapou2
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Create a user particle.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               ptusr:
0028AD  3               	sta z80_f		; store timer.
0028AD  3               
0028AD  3               	ldy #8
0028AD  3               	lda (z80_ix),y 		; y coordinate.
0028AD  3               	clc
0028AD  3               	adc #7			; mid-point of sprite.
0028AD  3               	sta z80_l
0028AD  3               
0028AD  3               	ldy #9
0028AD  3               	lda (z80_ix),y 		; x coordinate.
0028AD  3               	clc
0028AD  3               	adc #7			; mid-point of sprite.
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	jsr fpslot 		; find particle slot.
0028AD  3               	bcs ptusr1
0028AD  3               	rts 			; out of slots, can't generate anything.
0028AD  3               ptusr1:
0028AD  3               	lda z80_l
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y 		; set up y.
0028AD  3               
0028AD  3               	lda z80_h
0028AD  3               	ldy #5
0028AD  3               	sta (z80_ix),y		; set up x coordinate.
0028AD  3               
0028AD  3               	lda z80_f 		; restore timer.
0028AD  3               	ldy #1
0028AD  3               	sta (z80_ix),y		; set time on screen.
0028AD  3               
0028AD  3               	lda #7
0028AD  3               	ldy #0
0028AD  3               	sta (z80_ix),y		; define particle as user particle.
0028AD  3               
0028AD  3               	jmp chkxy		; plot first position.
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Create a vertical or horizontal star.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               star:
0028AD  3               	lda z80_i		; store pointer to sprite.
0028AD  3               	pha
0028AD  3               	lda z80_x
0028AD  3               	pha
0028AD  3               
0028AD  3               	jsr fpslot 		; find particle slot.
0028AD  3               	bcs star7		; found one we can use.
0028AD  3               star0:
0028AD  3               	pla 			; restore sprite pointer.
0028AD  3               	sta z80_x
0028AD  3               	pla
0028AD  3               	sta z80_i
0028AD  3               	rts 			; out of slots, can't generate anything.
0028AD  3               star7:
0028AD  3               	lda z80_c		; direction.
0028AD  3               	and #3 			; is it left?
0028AD  3               	bne :+
0028AD  3               	jmp star1 		; yes, it's left.
0028AD  3               :
0028AD  3               	cmp #1 			; is it right?
0028AD  3               	bne :+
0028AD  3               	jmp star2 		; yes, it's right.
0028AD  3               :
0028AD  3               	cmp #2 			; is it up?
0028AD  3               	bne :+
0028AD  3               	jmp star3 		; yes, it's up.
0028AD  3               :
0028AD  3               	ldy wntopx 		; get edge of screen.
0028AD  3               	iny			; down one pixel.
0028AD  3               	tya
0028AD  3               star8:
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y 		; set y coord.
0028AD  3               	jsr qrand 		; get quick random number.
0028AD  3               star9:
0028AD  3               	ldy #5
0028AD  3               	sta (z80_ix),y		; set x position.
0028AD  3               
0028AD  3               	lda z80_c		; direction.
0028AD  3               	and #3			; zero to three.
0028AD  3               	clc
0028AD  3               	adc #3			; 3 to 6 for starfield.
0028AD  3               	ldy #0
0028AD  3               	sta (z80_ix),y		; define particle as star.
0028AD  3               	jsr chkxy		; plot first position.
0028AD  3               	jmp star0
0028AD  3               star1:
0028AD  3               	jsr qrand		; get quick random number.
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y 		; set y coord.
0028AD  3               
0028AD  3               	lda wnrgtx 		; get edge of screen.
0028AD  3               	clc
0028AD  3               	adc #15			; add width of sprite minus 1.
0028AD  3               	jmp star9
0028AD  3               star2:
0028AD  3               	jsr qrand 		; get quick random number.
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y		; set y coord.
0028AD  3               
0028AD  3               	lda wnlftx		; get edge of screen.
0028AD  3               	jmp star9
0028AD  3               star3:
0028AD  3               	lda wnbotx 		; get edge of screen.
0028AD  3               	clc
0028AD  3               	adc #15 		; height of sprite minus one pixel.
0028AD  3               	jmp star8
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Find particle slot for lasers or vapour trail.
0028AD  3               ; can't use alternate accumulator.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               fpslot:
0028AD  3               	lda #<SHRAPN 		; shrapnel table.
0028AD  3               	sta z80_x
0028AD  3               	lda #>SHRAPN
0028AD  3               	sta z80_i
0028AD  3               
0028AD  3               	lda #NUMSHR		; number of pieces in table.
0028AD  3               	sta z80_b
0028AD  3               fpslt0:
0028AD  3               	ldy #0
0028AD  3               	lda (z80_ix),y		; get type.
0028AD  3               	asl a  			; is this slot in use?
0028AD  3               	bcc :+
0028AD  3               	rts			; no, we can use it.
0028AD  3               :
0028AD  3               	clc			; point to more shrapnel.
0028AD  3               	lda z80_x
0028AD  3               	adc #SHRSIZ
0028AD  3               	sta z80_x
0028AD  3               	bcc :+
0028AD  3               	inc z80_i
0028AD  3               :
0028AD  3               	dec z80_b		; repeat for all shrapnel.
0028AD  3               	bne fpslt0
0028AD  3               
0028AD  3               	clc
0028AD  3               	rts 			; out of slots, can't generate anything.
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Create an explosion at sprite position.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               explod:
0028AD  3               	sta z80_c 		; particles to create.
0028AD  3               
0028AD  3               	lda z80_i 		; store pointer to sprite.
0028AD  3               	pha
0028AD  3               	lda z80_x
0028AD  3               	pha
0028AD  3               
0028AD  3               	ldy #8
0028AD  3               	lda (z80_ix),y 		; y coordinate.
0028AD  3               	sta z80_l
0028AD  3               	ldy #9
0028AD  3               	lda (z80_ix),y		; x coordinate.
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	lda #<SHRAPN		; shrapnel table.
0028AD  3               	sta z80_x
0028AD  3               	lda #>SHRAPN
0028AD  3               	sta z80_i
0028AD  3               
0028AD  3               	lda #NUMSHR		; number of pieces in table.
0028AD  3               	sta explcnt
0028AD  3               expld0:
0028AD  3               	ldy #0
0028AD  3               	lda (z80_ix),y		; get type.
0028AD  3               	asl a 			; is this slot in use?
0028AD  3               	bcs expld1		; no, we can use it.
0028AD  3               expld2:
0028AD  3               	clc
0028AD  3               	lda z80_x
0028AD  3               	adc #SHRSIZ
0028AD  3               	sta z80_x
0028AD  3               	bcc :+
0028AD  3               	inc z80_i
0028AD  3               :
0028AD  3               	dec explcnt		; repeat for all shrapnel.
0028AD  3               	bne expld0
0028AD  3               expld3:
0028AD  3               	pla			; restore sprite pointer.
0028AD  3               	sta z80_x
0028AD  3               	pla
0028AD  3               	sta z80_i
0028AD  3               	rts 			; out of slots, can't generate any more.
0028AD  3               
0028AD  3               expld1:
0028AD  3               	lda z80_c		; shrapnel counter.
0028AD  3               	and #15			; 0 to 15.
0028AD  3               	clc			; add to x.
0028AD  3               	adc z80_l
0028AD  3               	ldy #3
0028AD  3               	sta (z80_ix),y		; y coord.
0028AD  3               
0028AD  3               	lda seed3 		; crap random number.
0028AD  3               	and #15			; 0 to 15.
0028AD  3               	clc 			; add to y.
0028AD  3               	adc z80_h
0028AD  3               	ldy #5
0028AD  3               	sta (z80_ix),y		; x coord.
0028AD  3               
0028AD  3               	lda #2
0028AD  3               	ldy #0
0028AD  3               	sta (z80_ix),y		; switch it on.
0028AD  3               
0028AD  3               	jsr chkxy		; plot first position.
0028AD  3               	jsr qrand		; quick random angle.
0028AD  3               	and #60 		; keep within range.
0028AD  3               	ldy #1
0028AD  3               	sta (z80_ix),y		; angle.
0028AD  3               
0028AD  3               	dec z80_c		; one less piece of shrapnel to generate.
0028AD  3               	bne expld2 		; back to main explosion loop.
0028AD  3               	jmp expld3 		; restore sprite pointer and exit.
0028AD  3               
0028AD  3               ;explcnt:	.byte 0
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Quick random
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               qrand:
0028AD  3               	jsr random		; r register.
0028AD  3               	eor seed3		; combine with seed.
0028AD  3               	sta seed3 		; new seed.
0028AD  3               	rts
0028AD  3               
0028AD  3               ;seed3:	.byte 0
0028AD  3               
0028AD  3               ;----------------------------------------------------
0028AD  3               ; Display all shrapnel.
0028AD  3               ;----------------------------------------------------
0028AD  3               
0028AD  3               dshrp:
0028AD  3               	lda #<plotde		; display routine.
0028AD  3               	sta proshx+1
0028AD  3               	lda #>plotde
0028AD  3               	sta proshx+2
0028AD  3               	jsr proshr		; process shrapnel.
0028AD  3               
0028AD  3               	lda #<prosh1		; processing routine.
0028AD  3               	sta proshx+1
0028AD  3               	lda #>prosh1
0028AD  3               	sta proshx+2
0028AD  3               	rts
0028AD  3               
0028AD  3               ;------------------------------------------------------
0028AD  3               ; Particle engine.
0028AD  3               ;
0028AD  3               ; Init particle data for 55 particles in SHRAPN table.
0028AD  3               ; Every particle has 6 bytes.
0028AD  3               ;
0028AD  3               ; global:	-
0028AD  3               ; local:	x,y,hl
0028AD  3               ; calls:	-
0028AD  3               ;------------------------------------------------------
0028AD  3               
0028AD  3               inishr:
0028AD  3               	lda #<SHRAPN 		; table.
0028AD  3               	sta z80_l
0028AD  3               	lda #>SHRAPN
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	ldy #0
0028AD  3               	ldx #NUMSHR		; shrapnel pieces to process.
0028AD  3               inish0:
0028AD  3               	lda #255 		; kill the shrapnel.
0028AD  3               	sta (z80_hl),y
0028AD  3               
0028AD  3               	clc 			; point there.
0028AD  3               	lda z80_l
0028AD  3               	adc #SHRSIZ		; distance to next.
0028AD  3               	sta z80_l
0028AD  3               	bcc :+
0028AD  3               	inc z80_h
0028AD  3               :
0028AD  3               	dex
0028AD  3               	bne inish0 		; round again.
0028AD  3               	rts
0028AD  3               
0028AD  3               ;------------------------------------------------------
0028AD  3               ; Check for collision between laser and sprite.
0028AD  3               ;------------------------------------------------------
0028AD  3               
0028AD  3               lcol:
0028AD  3               	lda #<SHRAPN		; shrapnel table.
0028AD  3               	sta z80_l
0028AD  3               	lda #>SHRAPN
0028AD  3               	sta z80_h
0028AD  3               
0028AD  3               	lda #NUMSHR		; number of pieces in table.
0028AD  3               	sta z80_b
0028AD  3               lcol0:
0028AD  3               	ldy #0
0028AD  3               	lda (z80_hl),y 		; get type.
0028AD  3               	beq lcol1		; yes, check collision.
0028AD  3               lcol3:
0028AD  3               	clc			; point to more shrapnel.
0028AD  3               	lda z80_l
0028AD  3               	adc #SHRSIZ
0028AD  3               	sta z80_l
0028AD  3               	bcc :+
0028AD  3               	inc z80_h
0028AD  3               :
0028AD  3               	dec z80_b		; repeat for all shrapnel.
0028AD  3               	bne lcol0
0028AD  3               	rts 			; no collision, carry not set.
0028AD  3               lcol1:
0028AD  3               	ldy #3
0028AD  3               	lda (z80_hl),y		; get y.
0028AD  3               	sec
0028AD  3               	ldy #8
0028AD  3               	sbc (z80_ix),y		; subtract sprite y.
0028AD  3               lcolh:
0028AD  3               	cmp #SPR_HGT 		; within range?
0028AD  3               	bcc :+
0028AD  3               	jmp lcol2		; no, missed.
0028AD  3               :
0028AD  3               	ldy #5
0028AD  3               	lda (z80_hl),y 		; get x.
0028AD  3               	sec
0028AD  3               	ldy #9
0028AD  3               	sbc (z80_ix),y 		; subtract sprite y.
0028AD  3               	cmp #SPR_WID		; within range?
0028AD  3               	bcs :+
0028AD  3               	jmp lcol4 		; yes, collision occurred.
0028AD  3               :
0028AD  3               lcol2:
0028AD  3               	jmp lcol3
0028AD  3               lcol4:
0028AD  3               	sec
0028AD  3               	rts 			; return with carry set for collision.
0028AD  3               .endif
0028AD  3               
0028AD  3               ;------------------------------------------------------
0028AD  3               ; Main game engine code starts here.
0028AD  3               ; After initialisation, mloop is the main loop
0028AD  3               ;------------------------------------------------------
0028AD  3               
0028AD  3               game:
0028AD  3               
0028AD  3               
0028AD  3               ; Init hardware and graphics mode
0028AD  3               
0028AD  3  20 E2 41     	jsr init 		; Init hardware
0028B0  3               
0028B0  3               ; Init joystick
0028B0  3               
0028B0  3  20 EE 42     	jsr joyinit		; Init joystick
0028B3  3               
0028B3  3               rpblc2:
0028B3  3               .if pflag
0028B3  3               	jsr inishr 		; initialise particle engine.
0028B3  3               .endif
0028B3  3               evintr:
0028B3  3  20 26 3A     	jsr evnt12 		; call intro/menu event.
0028B6  3               
0028B6  3  A9 02        	lda #WALL 		; write default property.
0028B8  3  A2 00        	ldx #0
0028BA  3               clrmap:
0028BA  3  9D 00 D8     	sta MAP,x 		; block properties.
0028BD  3  9D 00 D9     	sta MAP+256,x
0028C0  3  9D 00 DA     	sta MAP+512,x
0028C3  3  9D 00 DB     	sta MAP+768,x
0028C6  3  E8           	inx			; next byte.
0028C7  3  D0 F1        	bne clrmap
0028C9  3               
0028C9  3               .if oflag
0028C9  3               	jsr iniob 		; initialise objects.
0028C9  3               .endif
0028C9  3  A9 00        	lda #0			; put zero in accumulator.
0028CB  3  85 rr        	sta gamwon		; reset game won flag.
0028CD  3               
0028CD  3  20 38 2A     	jsr inisc 		; init the score.
0028D0  3               mapst:
0028D0  3  AD 20 39     	lda stmap 		; start position on map.
0028D3  3  8D 03 39     	sta roomtb		; set up position in table, if there is one.
0028D6  3               
0028D6  3               inipbl:
0028D6  3               .if aflag
0028D6  3               	lda #<eop		; reset blockpointer
0028D6  3               	sta pbptr
0028D6  3               	lda #>eop
0028D6  3               	sta pbptr+1
0028D6  3               .endif
0028D6  3               
0028D6  3  20 33 34     	jsr initsc 		; set up first screen.
0028D9  3               
0028D9  3  A9 F2        	lda #<ssprit 		; default to spare sprite in table.
0028DB  3  85 68        	sta z80_x
0028DD  3  A9 38        	lda #>ssprit
0028DF  3  85 69        	sta z80_i
0028E1  3               evini:
0028E1  3  20 2B 3A     	jsr evnt13 		; initialisation.
0028E4  3               
0028E4  3               ; Two restarts.
0028E4  3               ; First restart - clear all sprites and initialise everything.
0028E4  3               
0028E4  3               rstrt:
0028E4  3  20 D8 29     	jsr rsevt 		; restart events.
0028E7  3  20 40 28     	jsr xspr 		; clear sprite table.
0028EA  3  20 9F 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028ED  3  20 28 36     	jsr ispr 		; initialise sprite table.
0028F0  3               
0028F0  3  4C FF 28     	jmp rstrt0
0028F3  3               
0028F3  3               ; Second restart - clear all but player, and don't initialise him.
0028F3  3               
0028F3  3               rstrtn:
0028F3  3  20 D8 29     	jsr rsevt		; restart events.
0028F6  3  20 CC 35     	jsr nspr 		; clear all non-player sprites.
0028F9  3  20 9F 35     	jsr sprlst 		; fetch pointer to screen sprites.
0028FC  3  20 65 36     	jsr kspr 		; initialise sprite table, no more players.
0028FF  3               
0028FF  3               ; Set up the player and/or enemy sprites.
0028FF  3               
0028FF  3               rstrt0:
0028FF  3  A9 00        	lda #0 			; zero in accumulator.
002901  3  85 rr        	sta nexlev 		; reset next level flag.
002903  3  85 rr        	sta restfl 		; reset restart flag.
002905  3  85 rr        	sta deadf 		; reset dead flag.
002907  3               
002907  3  20 4D 2D     	jsr droom 		; show screen layout.
00290A  3               
00290A  3               rpblc0:
00290A  3               .if pflag
00290A  3               	jsr inishr 		; initialise particle engine.
00290A  3               .endif
00290A  3               .if aflag
00290A  3               	jsr rbloc		; draw blocks for this screen
00290A  3               .endif
00290A  3               .if oflag
00290A  3               	jsr shwob		; draw objects.
00290A  3               .endif
00290A  3               
00290A  3  A9 26        	lda #<sprtab 		; address of sprite table, even sprites.
00290C  3  85 68        	sta z80_x
00290E  3  A9 38        	lda #>sprtab
002910  3  85 69        	sta z80_i
002912  3  20 E3 31     	jsr dspr 		; display sprites.
002915  3               
002915  3  A9 37        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002917  3  85 68        	sta z80_x
002919  3  A9 38        	lda #>(sprtab+TABSIZ)
00291B  3  85 69        	sta z80_i
00291D  3  20 E3 31     	jsr dspr 		; display sprites.
002920  3               
002920  3               
002920  3               mloop:
002920  3  20 CA 42     	jsr vsync 		; synchronise with display.
002923  3  A9 26        	lda #<sprtab 		; address of sprite table, even sprites.
002925  3  85 68        	sta z80_x
002927  3  A9 38        	lda #>sprtab
002929  3  85 69        	sta z80_i
00292B  3  20 E3 31     	jsr dspr 		; display even sprites.
00292E  3               
00292E  3               ;	jsr plsnd 		; play sounds.
00292E  3               
00292E  3  20 AC 28     	jsr proshr
002931  3  A9 37        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002933  3  85 68        	sta z80_x
002935  3  A9 38        	lda #>(sprtab+TABSIZ)
002937  3  85 69        	sta z80_i
002939  3  20 E3 31     	jsr dspr 		; display odd sprites.
00293C  3               
00293C  3  A9 F2        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00293E  3  85 68        	sta z80_x
002940  3  A9 38        	lda #>(ssprit)
002942  3  85 69        	sta z80_i
002944  3               evlp1:
002944  3  20 24 3A     	jsr evnt10 		; called once per main loop.
002947  3               
002947  3  20 61 31     	jsr pspr 		; process sprites.
00294A  3               
00294A  3               ; Main loop events.
00294A  3               
00294A  3  A9 F2        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00294C  3  85 68        	sta z80_x
00294E  3  A9 38        	lda #>ssprit
002950  3  85 69        	sta z80_i
002952  3               evlp2:
002952  3  20 25 3A     	jsr evnt11 		; called once per main loop.
002955  3               bsortx:
002955  3  20 D7 30     	jsr bsort 		; sort sprites.
002958  3               
002958  3  A5 rr        	lda nexlev		; finished level flag.
00295A  3  F0 03        	beq :+
00295C  3  4C 84 29     	jmp newlev		; is set, go to next level.
00295F  3               :
00295F  3  A5 rr        	lda gamwon		; finished game flag.
002961  3  F0 03        	beq :+
002963  3  4C 93 29     	jmp evwon		; is set, finish the game.
002966  3               :
002966  3  A5 rr        	lda restfl 		; finished level flag.
002968  3  C9 01        	cmp #1			; has it been set?
00296A  3  D0 03        	bne :+
00296C  3  4C E4 28     	jmp rstrt		; yes, go to next level.
00296F  3               :
00296F  3  C9 02        	cmp #2			; has it been set?
002971  3  D0 03        	bne :+
002973  3  4C F3 28     	jmp rstrtn		; yes, go to next level.
002976  3               :
002976  3  A5 rr        	lda deadf 		; dead flag.
002978  3  F0 03        	beq :+
00297A  3  4C 99 29     	jmp pdead		; yes, player dead.
00297D  3               :
00297D  3               ; back to start of main loop.
00297D  3               
00297D  3  E6 rr        	inc frmno
00297F  3  E6 rr        	inc clock
002981  3  4C 20 29     	jmp mloop		; switched to a jmp mloop during test mode.
002984  3               
002984  3               ;----------------------------------------------------------
002984  3               ; Read blocks from list and update screen accordingly.
002984  3               ;----------------------------------------------------------
002984  3               
002984  3               .if aflag
002984  3               rbloc:
002984  3               	lda #<eop		; reset temp blockpointer
002984  3               	sta pbbuf
002984  3               	lda #>eop
002984  3               	sta pbbuf+1
002984  3               
002984  3               rbloc2:
002984  3               	lda pbbuf			; check for last block
002984  3               	cmp pbptr
002984  3               	bne rbloc1
002984  3               	lda pbbuf+1
002984  3               	cmp pbptr+1
002984  3               	bne rbloc1
002984  3               	rts
002984  3               rbloc1:
002984  3               	ldy #0
002984  3               	lda (pbbuf),y		; check if block for this scno
002984  3               	cmp scno
002984  3               	bne rbloc0		; if not, skip
002984  3               	iny
002984  3               	lda (pbbuf),y		; get y
002984  3               	sta dispy
002984  3               	iny
002984  3               	lda (pbbuf),y		; get x
002984  3               	sta dispx
002984  3               	iny
002984  3               	lda (pbbuf),y		; get blocknr
002984  3               	jsr pattr2		; draw block
002984  3               rbloc0:
002984  3               	clc			; point to next block
002984  3               	lda pbbuf
002984  3               	adc #4
002984  3               	sta pbbuf
002984  3               	bcc rbloc2
002984  3               	inc pbbuf+1
002984  3               	jmp rbloc2
002984  3               .endif
002984  3               
002984  3               ;----------------------------------------------------------
002984  3               ; New level
002984  3               ;----------------------------------------------------------
002984  3               
002984  3               newlev:
002984  3  A5 rr        	lda scno 			; current screen.
002986  3  18           	clc
002987  3  69 01        	adc #1				; next screen.
002989  3  CD A6 3E     	cmp numsc			; total number of screens.
00298C  3  B0 05        	bcs evwon			; yes, game finished.
00298E  3  85 rr        	sta scno			; set new level number.
002990  3  4C E4 28     	jmp rstrt			; restart, clearing all aliens.
002993  3               
002993  3               evwon:
002993  3  20 CA 3A     	jsr evnt18		 	; game completed.
002996  3  4C AD 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002999  3               
002999  3               ;----------------------------------------------------------
002999  3               ; Player dead.
002999  3               ;----------------------------------------------------------
002999  3               
002999  3               pdead:
002999  3  A9 00        	lda #0				; zeroise accumulator.
00299B  3  85 rr        	sta deadf			; reset dead flag.
00299D  3               evdie:
00299D  3  20 C8 3A     	jsr evnt16 			; death subroutine.
0029A0  3  A5 rr        	lda numlif			; number of lives.
0029A2  3  F0 03        	beq :+
0029A4  3  4C E4 28     	jmp rstrt 			; restart game.
0029A7  3               :
0029A7  3               evfail:
0029A7  3  20 C9 3A     	jsr evnt17 			; failure event.
0029AA  3  4C AD 28     	jmp game			; restart game
0029AD  3               
0029AD  3               ;----------------------------------------------------------
0029AD  3               ; Tidy things up
0029AD  3               ;----------------------------------------------------------
0029AD  3               
0029AD  3               tidyup:
0029AD  3  A0 00        	ldy #0				; digits to check.
0029AF  3               tidyu2:
0029AF  3  B9 21 2B     	lda score,y 			; get score digit.
0029B2  3  CD 27 2B     	cmp hiscor 			; are we larger than high score digit?
0029B5  3  90 07        	bcc tidyu0			; high score is bigger.
0029B7  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0029B9  3  C8           	iny				; next digit of high score.
0029BA  3  C0 06        	cpy #6
0029BC  3  D0 F1        	bne tidyu2			; repeat for all digits
0029BE  3               tidyu0:
0029BE  3  A9 21        	lda #<score			; return pointing to score.
0029C0  3  85 62        	sta z80_c
0029C2  3  A9 2B        	lda #>score
0029C4  3  85 63        	sta z80_b
0029C6  3  60           	rts
0029C7  3               tidyu1:
0029C7  3  A0 05        	ldy #5
0029C9  3               tidyu3:
0029C9  3  B9 21 2B     	lda score,y			; score.
0029CC  3  99 27 2B     	sta hiscor,y			; high score.
0029CF  3  88           	dey
0029D0  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029D2  3               evnewh:
0029D2  3  20 CB 3A     	jsr evnt19			; new high score event.
0029D5  3  4C BE 29     	jmp tidyu0			; tidy up.
0029D8  3               
0029D8  3               ;--------------------------------------------------
0029D8  3               ; Restart event.
0029D8  3               ;--------------------------------------------------
0029D8  3               
0029D8  3               rsevt:
0029D8  3  A9 F2        	lda #<ssprit 			; default to spare element in table.
0029DA  3  85 68        	sta z80_x
0029DC  3  A9 38        	lda #>ssprit
0029DE  3  85 69        	sta z80_i
0029E0  3               evrs:
0029E0  3  4C 2C 3A     	jmp evnt14	 		; call restart event.
0029E3  3               
0029E3  3               ;------------------------------------------------------------------
0029E3  3               ; Copy number passed in a to string position bc, right-justified.
0029E3  3               ;
0029E3  3               ; Input:
0029E3  3               ;  A  = number
0029E3  3               ;  BC = string address
0029E3  3               ;
0029E3  3               ; Output:
0029E3  3               ;  BC = string with number
0029E3  3               ;-----------------------------------------------------------------
0029E3  3               
0029E3  3               num2ch:
0029E3  3  85 65        	sta z80_d		; Save number
0029E5  3               
0029E5  3  A9 00        	lda #0
0029E7  3  85 rr        	sta flag
0029E9  3               numdg3:
0029E9  3  A2 64        	ldx #100		; hundreds column.
0029EB  3  86 64        	stx z80_e
0029ED  3  20 FD 29     	jsr numdg		; show digit.
0029F0  3               numdg2:
0029F0  3  A2 0A        	ldx #10			; tens column.
0029F2  3  86 64        	stx z80_e
0029F4  3  20 FD 29     	jsr numdg		; show digit.
0029F7  3               
0029F7  3  E6 rr        	inc flag
0029F9  3  A2 01        	ldx #1			; units column.
0029FB  3  86 64        	stx z80_e
0029FD  3               numdg:
0029FD  3  A9 30        	lda #48			; clear digit.
0029FF  3  85 61        	sta z80_a
002A01  3               numdg1:
002A01  3  A5 65        	lda z80_d
002A03  3  C5 64        	cmp z80_e
002A05  3  90 0E        	bcc numdg0		; nothing to show.
002A07  3  38           	sec
002A08  3  A5 65        	lda z80_d
002A0A  3  E5 64        	sbc z80_e		; subtract from column.
002A0C  3  85 65        	sta z80_d
002A0E  3  E6 61        	inc z80_a		; increment digit.
002A10  3  E6 rr        	inc flag
002A12  3  4C 01 2A     	jmp numdg1		; repeat until column is zero.
002A15  3               numdg0:
002A15  3  A0 00        	ldy #0
002A17  3  A5 61        	lda z80_a
002A19  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002A1B  3  A5 rr        	lda flag
002A1D  3  F0 06        	beq :+
002A1F  3  E6 62        	inc z80_c		; next buffer position.
002A21  3  D0 02        	bne :+
002A23  3  E6 63        	inc z80_b
002A25  3               :
002A25  3  60           	rts
002A26  3               num2dd:
002A26  3  85 65        	sta z80_d		; Save number
002A28  3               
002A28  3  A9 01        	lda #1
002A2A  3  85 rr        	sta flag
002A2C  3               
002A2C  3  4C F0 29     	jmp numdg2
002A2F  3               num2td:
002A2F  3  85 65        	sta z80_d		; Save number
002A31  3               
002A31  3  A9 01        	lda #1
002A33  3  85 rr        	sta flag
002A35  3  4C E9 29     	jmp numdg3
002A38  3               
002A38  3               ;flag:	.byte 0
002A38  3               
002A38  3               ;---------------------------------------------------------
002A38  3               ; Reset score to "000000"
002A38  3               ;---------------------------------------------------------
002A38  3               
002A38  3               inisc:
002A38  3  A9 30        	lda #'0'
002A3A  3  A2 05        	ldx #5			; digits to initialise.
002A3C  3               inisc0:
002A3C  3  9D 21 2B     	sta score,x 		; write zero digit.
002A3F  3  CA           	dex			; next column.
002A40  3  10 FA        	bpl inisc0		; repeat for all digits.
002A42  3               
002A42  3  60           	rts
002A43  3               
002A43  3               ;-----------------------------------------------------
002A43  3               ; Multiply h by d and return in hl.
002A43  3               ;
002A43  3               ; Input:
002A43  3               ;  H = first number
002A43  3               ;  D = second number
002A43  3               ;
002A43  3               ; Output:
002A43  3               ;  HL = result H x D
002A43  3               ;-----------------------------------------------------
002A43  3               
002A43  3               imul:
002A43  3  A5 65        	lda z80_d		; HL = H * D
002A45  3  85 64        	sta z80_e
002A47  3  A5 67        	lda z80_h
002A49  3  85 62        	sta z80_c		; make c first multiplier.
002A4B  3               imul0:
002A4B  3  A9 00        	lda #0			; zeroise total.
002A4D  3  85 66        	sta z80_l
002A4F  3  85 67        	sta z80_h
002A51  3               
002A51  3  A5 67        	lda z80_h
002A53  3  85 65        	sta z80_d		; zeroise high byte.
002A55  3               
002A55  3  A9 08        	lda #8			; repeat 8 times.
002A57  3  85 63        	sta z80_b
002A59  3               imul1:
002A59  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A5B  3  90 0E        	bcc imul2		; wasn't set.
002A5D  3  18           	clc			; bit was set, so add de.
002A5E  3  A5 66        	lda z80_l
002A60  3  65 64        	adc z80_e
002A62  3  85 66        	sta z80_l
002A64  3  A5 67        	lda z80_h
002A66  3  65 65        	adc z80_d
002A68  3  85 67        	sta z80_h
002A6A  3  18           	clc 			; reset carry.
002A6B  3               imul2:
002A6B  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A6D  3  26 65        	rol z80_d
002A6F  3  C6 63        	dec z80_b
002A71  3  D0 E6        	bne imul1		; repeat 8 times.
002A73  3               
002A73  3  60           	rts
002A74  3               
002A74  3               ;-----------------------------------------------
002A74  3               ; Divide d by e and return in d, remainder in a.
002A74  3               ;
002A74  3               ; Input:
002A74  3               ;  D = first number
002A74  3               ;  E = second number
002A74  3               ;
002A74  3               ; Output:
002A74  3               ;  D = result D/E
002A74  3               ;  A = remainder
002A74  3               ;-----------------------------------------------
002A74  3               
002A74  3               idiv:
002A74  3  A9 00        	lda #0
002A76  3  A0 08        	ldy #8		 	; bits to shift.
002A78  3  06 65        	asl z80_d
002A7A  3               idiv0:
002A7A  3  2A           	rol a 			; multiply d by 2.
002A7B  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A7D  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A7F  3  E5 64        	sbc z80_e		; subtract it.
002A81  3               idiv1:
002A81  3  26 65        	rol z80_d		; rotate into d.
002A83  3  88           	dey
002A84  3  D0 F4        	bne idiv0		; repeat
002A86  3  60           	rts
002A87  3               
002A87  3               ;---------------------------------------------------
002A87  3               ; Play AY sound effect
002A87  3               ;---------------------------------------------------
002A87  3               
002A87  3               plsnd:
002A87  3  60           	rts
002A88  3               
002A88  3               ;---------------------------------------------------
002A88  3               ; Objects handling.
002A88  3               ; 32 bytes for image
002A88  3               ; 3 for room, y and x
002A88  3               ; 3 for starting room, y and x.
002A88  3               ; 254 = disabled.
002A88  3               ; 255 = object in player"s pockets.
002A88  3               ;---------------------------------------------------
002A88  3               
002A88  3               ;---------------------------------------------------
002A88  3               ; Show items present.
002A88  3               ;---------------------------------------------------
002A88  3               
002A88  3               .if oflag
002A88  3               shwob:
002A88  3               	lda #<objdta 			; objects table.
002A88  3               	sta z80_l
002A88  3               	lda #>objdta
002A88  3               	sta z80_h
002A88  3               
002A88  3               	lda numob 			; number of objects in the game.
002A88  3               	sta sprcnt
002A88  3               shwob0:
002A88  3               	ldy #32 			; distance to room number.
002A88  3               	lda (z80_hl),y 			; same as an item?
002A88  3               	cmp scno 			; current location.
002A88  3               	bne :+
002A88  3               	jsr dobj 			; yes, display object.
002A88  3               :
002A88  3               	clc
002A88  3               	lda z80_l
002A88  3               	adc #38 			; distance to next item.
002A88  3               	sta z80_l
002A88  3               	lda z80_h
002A88  3               	adc #0
002A88  3               	sta z80_h	 		; point to it.
002A88  3               	dec sprcnt
002A88  3               	bne shwob0 			; repeat for others.
002A88  3               	rts
002A88  3               
002A88  3               ;---------------------------------------------------
002A88  3               ; Display object.
002A88  3               ; hl must point to object's start address.
002A88  3               ;
002A88  3               ; Input:
002A88  3               ;  HL = object address
002A88  3               ;---------------------------------------------------
002A88  3               
002A88  3               dobj:
002A88  3               	ldy #33
002A88  3               	lda (z80_hl),y 			; point to y.
002A88  3               	sta dispy
002A88  3               	iny
002A88  3               	lda (z80_hl),y 			; point to x.
002A88  3               	sta dispx
002A88  3               dobj1:
002A88  3               	jmp sprite 			; draw this sprite.
002A88  3               
002A88  3               ;--------------------------------------
002A88  3               ; Remove an object.
002A88  3               ;
002A88  3               ; Input:
002A88  3               ;  A = object number
002A88  3               ;--------------------------------------
002A88  3               
002A88  3               remob:
002A88  3               	cmp numob			; number of objects in game.
002A88  3               	bcc :+				; are we checking past the end?
002A88  3               	rts				; yes, can't get non-existent item.
002A88  3               :
002A88  3               	pha				; remember object.
002A88  3               	jsr getob			; pick it up if we haven't already got it.
002A88  3               	pla				; retrieve object number.
002A88  3               	jsr gotob			; get its address.
002A88  3               	lda #254
002A88  3               	ldy #32
002A88  3               	sta (z80_hl),y			; remove it.
002A88  3               	rts
002A88  3               
002A88  3               ;---------------------------------------------------
002A88  3               ; Pick up object number held in the accumulator.
002A88  3               ;
002A88  3               ; Input:
002A88  3               ;  A = object number
002A88  3               ;---------------------------------------------------
002A88  3               
002A88  3               getob:
002A88  3               	cmp numob 		; number of objects in game.
002A88  3               	bcc :+			; are we checking past the end?
002A88  3               	rts			; yes, can't get non-existent item.
002A88  3               :
002A88  3               	jsr gotob 		; check if we already have it.
002A88  3               	cmp #255
002A88  3               	bne :+
002A88  3               	rts			; we already do.
002A88  3               :
002A88  3               	ldy #32
002A88  3               	lda (z80_hl),y		; is it on this screen?
002A88  3               	cmp scno 		; current screen.
002A88  3               	bne getob0		; not on screen, so nothing to delete.
002A88  3               
002A88  3               	lda #255
002A88  3               	sta (z80_hl),y		; pick it up.
002A88  3               	iny 			; point to y coord.
002A88  3               getob1:
002A88  3               	ldy #33
002A88  3               	lda (z80_hl),y		; y coord.
002A88  3               	sta dispy
002A88  3               	ldy #34
002A88  3               	lda (z80_hl),y 		; x coord.
002A88  3               	sta dispx
002A88  3               	jmp dobj1 		; delete object sprite.
002A88  3               getob0:
002A88  3               	lda #255
002A88  3               	sta (z80_hl),y 		; pick it up.
002A88  3               	rts
002A88  3               .endif
002A88  3               
002A88  3               ;-----------------------------------------------------------------
002A88  3               ; Got object check.
002A88  3               ; Call with object in accumulator, returns zero set if in pockets.
002A88  3               ;
002A88  3               ; Input:
002A88  3               ;  A = object number
002A88  3               ;-----------------------------------------------------------------
002A88  3               .if oflag .or mflag
002A88  3               gotob:
002A88  3               	cmp numob 		; number of objects in game.
002A88  3               	bcc :+ 			; are we checking past the end?
002A88  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A88  3               :
002A88  3               	jsr findob		; find the object.
002A88  3               gotob1:
002A88  3               	rts
002A88  3               
002A88  3               gotob0:
002A88  3               	lda #254 		; missing.
002A88  3               	jmp gotob1
002A88  3               
002A88  3               findob:
002A88  3               	pha			; save object number
002A88  3               	lda #<objdta 		; objects.
002A88  3               	sta z80_l
002A88  3               	lda #>objdta
002A88  3               	sta z80_h
002A88  3               	pla			; retreive object number
002A88  3               	beq fndob1 		; is it zero? yes, skip loop.
002A88  3               	tax 			; loop counter
002A88  3               fndob2:
002A88  3               	clc
002A88  3               	lda z80_l
002A88  3               	adc #38 		; size of each object.
002A88  3               	sta z80_l
002A88  3               	bcc :+
002A88  3               	inc z80_h
002A88  3               :
002A88  3               	dex 			; repeat until we find address.
002A88  3               	bne fndob2
002A88  3               fndob1:
002A88  3               	ldy #32			; distance to room it's in.
002A88  3               	lda (z80_hl),y		; fetch status.
002A88  3               	rts
002A88  3               .endif
002A88  3               
002A88  3               ;---------------------------------------------
002A88  3               ; Drop object number at (dispx, dispy).
002A88  3               ;
002A88  3               ; Input:
002A88  3               ;  A = object number
002A88  3               ;---------------------------------------------
002A88  3               
002A88  3               .if oflag
002A88  3               drpob:
002A88  3               	cmp numob 		; are we checking past the end?
002A88  3               	bcc :+
002A88  3               	rts			; yes, can't drop non-existent item.
002A88  3               :
002A88  3               	jsr gotob		; make sure object is in inventory.
002A88  3               	cmp scno		; already on this screen?
002A88  3               	bne :+
002A88  3               	rts			; yes, nothing to do.
002A88  3               :
002A88  3               	ldy #32
002A88  3               	lda scno
002A88  3               	sta (z80_hl),y		; bring onto screen.
002A88  3               	lda dispy		; sprite y coordinate.
002A88  3               	iny
002A88  3               	sta (z80_hl),y		; point to object y.
002A88  3               	lda dispx 		; sprite x coordinate.
002A88  3               	iny
002A88  3               	sta (z80_hl),y 		; point to object x
002A88  3               	jmp dobj		; draw the object sprite.
002A88  3               
002A88  3               ;-----------------------------------------------
002A88  3               ; Seek objects at sprite position.
002A88  3               ;
002A88  3               ; Output:
002A88  3               ;  A = object number, if not found A=255
002A88  3               ;-----------------------------------------------
002A88  3               
002A88  3               skobj:
002A88  3               	lda #<objdta 		; pointer to objects.
002A88  3               	sta z80_l
002A88  3               	lda #>objdta
002A88  3               	sta z80_h
002A88  3               
002A88  3               	lda numob 		; number of objects in game.
002A88  3               	sta z80_b 		; set up the loop counter.
002A88  3               skobj0:
002A88  3               	lda scno		; current room number.
002A88  3               	ldy #32
002A88  3               	cmp (z80_hl),y		; is object in here?
002A88  3               	bne :+
002A88  3               	jsr skobj1		; yes, check coordinates.
002A88  3               :
002A88  3               	clc			; point to next object in table.
002A88  3               	lda z80_l
002A88  3               	adc #38			; size of each object.
002A88  3               	sta z80_l
002A88  3               	bcc :+
002A88  3               	inc z80_h
002A88  3               :
002A88  3               	dec z80_b
002A88  3               	bne skobj0		; repeat for all objects.
002A88  3               
002A88  3               	lda #255		; end of list and nothing found, return 255.
002A88  3               	rts
002A88  3               
002A88  3               skobj1:
002A88  3               	ldy #33			; point to y coordinate.
002A88  3               	lda (z80_hl),y		; point to y coordinate.
002A88  3               	sec
002A88  3               	ldy #8
002A88  3               	sbc (z80_ix),y 		; subtract sprite y.
002A88  3               	clc
002A88  3               	adc #15			; add sprite height minus one.
002A88  3               	cmp #31			; within range?
002A88  3               	bcs skobj2		; no, ignore object.
002A88  3               
002A88  3               	ldy #34			; point to x coordinate now.
002A88  3               	lda (z80_hl),y 		; get coordinate.
002A88  3               	sec
002A88  3               	ldy #9
002A88  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A88  3               	clc			; add sprite width minus one.
002A88  3               	adc #15
002A88  3               	cmp #31			; within range?
002A88  3               	bcs skobj2		; no, ignore object.
002A88  3               
002A88  3               	pla			; remove return address from stack.
002A88  3               	pla
002A88  3               
002A88  3               	lda numob 		; objects in game.
002A88  3               	sec
002A88  3               	sbc z80_b		; subtract loop counter.
002A88  3               skobj2:
002A88  3               	rts			; accumulator now points to object.
002A88  3               .endif
002A88  3               
002A88  3               ;---------------------------------------------------------------------
002A88  3               ; Spawn a new sprite.
002A88  3               ;---------------------------------------------------------------------
002A88  3               
002A88  3               .if gflag
002A88  3                 offset = 0
002A88  3               .else
002A88  3                 offset = 20
002A88  3               .endif
002A88  3               
002A88  3               spawn:
002A88  3  A9 26        	lda #<sprtab		; sprite table.
002A8A  3  85 66        	sta z80_l
002A8C  3  A9 38        	lda #>sprtab
002A8E  3  85 67        	sta z80_h
002A90  3               numsp1:
002A90  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A92  3  85 rr        	sta spcnt
002A94  3               spaw0:
002A94  3  A0 00        	ldy #0
002A96  3  B1 66        	lda (z80_hl),y		; get sprite type.
002A98  3  C9 FF        	cmp #255		; is it an unused slot?
002A9A  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002A9C  3               
002A9C  3  18           	clc 			; point to next sprite in table.
002A9D  3  A5 66        	lda z80_l
002A9F  3  69 11        	adc #TABSIZ		; size of each entry.
002AA1  3  85 66        	sta z80_l
002AA3  3  90 02        	bcc :+
002AA5  3  E6 67        	inc z80_h
002AA7  3               :
002AA7  3  C6 rr        	dec spcnt		; one less iteration.
002AA9  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002AAB  3               
002AAB  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002AAB  3               
002AAB  3               spaw1:
002AAB  3  A5 69        	lda z80_i		; address of original sprite.
002AAD  3  48           	pha
002AAE  3  A5 68        	lda z80_x
002AB0  3  48           	pha
002AB1  3               
002AB1  3  A5 66        	lda z80_l		; store spawned sprite address.
002AB3  3  85 rr        	sta spptr
002AB5  3  A5 67        	lda z80_h
002AB7  3  85 rr        	sta spptr+1
002AB9  3               
002AB9  3  A5 62        	lda z80_c
002ABB  3  A0 00        	ldy #0
002ABD  3  91 66        	sta (z80_hl),y 		; set the type.
002ABF  3  A0 05        	ldy #5
002AC1  3  91 66        	sta (z80_hl),y		; copy
002AC3  3               
002AC3  3  A5 63        	lda z80_b
002AC5  3  A0 01        	ldy #1
002AC7  3  91 66        	sta (z80_hl),y		; set the image.
002AC9  3  A0 06        	ldy #6
002ACB  3  91 66        	sta (z80_hl),y		; copy
002ACD  3               
002ACD  3  A9 00        	lda #0 			; frame zero.
002ACF  3  A0 02        	ldy #2
002AD1  3  91 66        	sta (z80_hl),y		; set frame.
002AD3  3  A0 07        	ldy #7
002AD5  3  91 66        	sta (z80_hl),y		; copy
002AD7  3               
002AD7  3  A0 08        	ldy #8
002AD9  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002ADB  3  A0 03        	ldy #3
002ADD  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002ADF  3  A0 08        	ldy #8
002AE1  3  91 66        	sta (z80_hl),y		; copy
002AE3  3               
002AE3  3  A0 09        	ldy #9
002AE5  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AE7  3  A0 04        	ldy #4
002AE9  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AEB  3  A0 09        	ldy #9
002AED  3  91 66        	sta (z80_hl),y		; copy
002AEF  3               
002AEF  3  A0 0A        	ldy #10			; direction of original.
002AF1  3  B1 68        	lda (z80_ix),y
002AF3  3  91 66        	sta (z80_hl),y		; direction
002AF5  3               
002AF5  3  A9 00        	lda #0
002AF7  3  A0 0B        	ldy #11
002AF9  3  91 66        	sta (z80_hl),y		; reset parameter.
002AFB  3  C8           	iny
002AFC  3  91 66        	sta (z80_hl),y		; reset parameter.
002AFE  3  C8           	iny
002AFF  3  91 66        	sta (z80_hl),y		; reset parameter.
002B01  3  C8           	iny
002B02  3  91 66        	sta (z80_hl),y		; reset parameter.
002B04  3               rtssp:
002B04  3  A5 rr        	lda spptr		; address of new sprite.
002B06  3  85 68        	sta z80_x
002B08  3  A5 rr        	lda spptr+1
002B0A  3  85 69        	sta z80_i
002B0C  3               evis1:
002B0C  3  20 23 3A     	jsr evnt09 		; call sprite initialisation event.
002B0F  3               
002B0F  3  A5 rr        	lda spptr 		; address of new sprite.
002B11  3  85 68        	sta z80_x
002B13  3  A5 rr        	lda spptr+1
002B15  3  85 69        	sta z80_i
002B17  3  20 3F 43     	jsr sspria 		; display the new sprite.
002B1A  3               
002B1A  3  68           	pla			; address of original sprite.
002B1B  3  85 68        	sta z80_x
002B1D  3  68           	pla
002B1E  3  85 69        	sta z80_i
002B20  3               
002B20  3  60           	rts
002B21  3               
002B21  3               ;spcnt:	.byte 0
002B21  3               ;spptr:	.word 0			; spawned sprite pointer.
002B21  3               ;seed:	.byte 0			; seed for random numbers.
002B21  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B25  3  30 30        
002B27  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B2B  3  30 30        
002B2D  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B31  3  30 30        
002B33  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B35  3               
002B35  3               ;----------------------------------------------------
002B35  3               ; Check y-pos
002B35  3               ;----------------------------------------------------
002B35  3               
002B35  3               checkx:
002B35  3  A5 rr        	lda dispy		; y position.
002B37  3  C9 19        	cmp #ScrHeight			; off screen?
002B39  3  B0 01        	bcs :+
002B3B  3  60           	rts			; no, it's okay.
002B3C  3               :
002B3C  3  68           	pla			; remove return address from stack.
002B3D  3  85 66        	sta z80_l
002B3F  3  68           	pla
002B40  3  85 67        	sta z80_h
002B42  3  60           	rts
002B43  3               
002B43  3               ;-----------------------------------------------
002B43  3               ; Displays the current high score.
002B43  3               ;-----------------------------------------------
002B43  3               
002B43  3               dhisc:
002B43  3  A9 27        	lda #<hiscor 		; high score text.
002B45  3  8D 7A 2B     	sta dscor3+1
002B48  3  8D 9E 2B     	sta bscor3+1
002B4B  3  A9 2B        	lda #>hiscor
002B4D  3  8D 7B 2B     	sta dscor3+2
002B50  3  8D 9F 2B     	sta bscor3+2
002B53  3  4C 66 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B56  3               
002B56  3               ;------------------------------------------------------
002B56  3               ; Displays the current score.
002B56  3               ;------------------------------------------------------
002B56  3               
002B56  3               dscor:
002B56  3  A9 21        	lda #<score		; score text.
002B58  3  8D 7A 2B     	sta dscor3+1
002B5B  3  8D 9E 2B     	sta bscor3+1
002B5E  3  A9 2B        	lda #>score
002B60  3  8D 7B 2B     	sta dscor3+2
002B63  3  8D 9F 2B     	sta bscor3+2
002B66  3               dscor1:
002B66  3  8C 9A 2B     	sty tmpscr
002B69  3  20 B5 30     	jsr preprt		; set up font and print position.
002B6C  3  20 35 2B     	jsr checkx		; make sure we're in a printable range.
002B6F  3               
002B6F  3               ;	lda #6			; digits to display.
002B6F  3               ;	sta z80_b
002B6F  3  A5 rr        	lda prtmod		; get print mode.
002B71  3  F0 03        	beq :+			; standard size text?
002B73  3  4C 9B 2B     	jmp bscor0		; no, show double-height.
002B76  3               :
002B76  3               dscor0:
002B76  3               ;	ldy #0
002B76  3               ;	lda (z80_hl),y 		; fetch character.
002B76  3  AC 9A 2B     	ldy tmpscr
002B79  3               dscor3:
002B79  3  B9 21 2B     	lda score,y
002B7C  3  20 B3 2C     	jsr pchar 		; display character.
002B7F  3  E6 rr        	inc dispx		; move along x coordinate
002B81  3               
002B81  3               ;	inc z80_l		; next score column.
002B81  3               ;	bne :+
002B81  3               ;	inc z80_h
002B81  3               ;:
002B81  3  EE 9A 2B     	inc tmpscr
002B84  3  C6 63        	dec z80_b
002B86  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B88  3               dscor2:
002B88  3  AD 15 39     	lda bcolour
002B8B  3  20 B3 2C     	jsr pchar
002B8E  3  20 8B 30     	jsr nexpos
002B91  3               
002B91  3  A5 rr        	lda dispx 		; set up display coordinates.
002B93  3  85 rr        	sta charx
002B95  3  A5 rr        	lda dispy
002B97  3  85 rr        	sta chary
002B99  3  60           	rts
002B9A  3               
002B9A  3  00           tmpscr:	.byte 0
002B9B  3               ;------------------------------------------------------
002B9B  3               ; Displays the current score in double-height characters.
002B9B  3               ;
002B9B  3               ; Input:
002B9B  3               ;  B  = digit number
002B9B  3               ;  HL = score string
002B9B  3               ;------------------------------------------------------
002B9B  3               
002B9B  3               bscor0:
002B9B  3               ;	ldy #0
002B9B  3               
002B9B  3               ;	lda (z80_hl),y 		; fetch character.
002B9B  3  A4 rr        	ldy tmp
002B9D  3               bscor3:
002B9D  3  B9 21 2B     	lda score,y
002BA0  3  20 5C 30     	jsr bchar 		; display big char.
002BA3  3               
002BA3  3               ;	inc z80_l 		; next score column.
002BA3  3               ;	bne :+
002BA3  3               ;	inc z80_h
002BA3  3               ;:
002BA3  3  E6 rr        	inc tmp
002BA5  3  C6 63        	dec z80_b
002BA7  3  F0 03        	beq :+
002BA9  3  4C 9B 2B     	jmp bscor0 		; repeat for all digits.
002BAC  3               :
002BAC  3  4C 88 2B     	jmp dscor2 		; tidy up line and column variables.
002BAF  3               
002BAF  3               ;-----------------------------------------------------
002BAF  3               ; Adds number in the hl pair to the score.
002BAF  3               ;-----------------------------------------------------
002BAF  3               
002BAF  3               addsc:
002BAF  3  A9 22        	lda #<(score+1) 	; ten thousands column.
002BB1  3  85 64        	sta z80_e
002BB3  3  A9 2B        	lda #>(score+1)
002BB5  3  85 65        	sta z80_d
002BB7  3  A9 10        	lda #<10000		; amount to add each time.
002BB9  3  85 62        	sta z80_c
002BBB  3  A9 27        	lda #>10000
002BBD  3  85 63        	sta z80_b
002BBF  3  20 03 2C     	jsr incsc		; add to score.
002BC2  3               
002BC2  3  E6 64        	inc z80_e		; thousands column.
002BC4  3  D0 02        	bne :+
002BC6  3  E6 65        	inc z80_d
002BC8  3               :
002BC8  3  A9 E8        	lda #<1000		; amount to add each time.
002BCA  3  85 62        	sta z80_c
002BCC  3  A9 03        	lda #>1000
002BCE  3  85 63        	sta z80_b
002BD0  3  20 03 2C     	jsr incsc 		; add to score.
002BD3  3               
002BD3  3  E6 64        	inc z80_e		; hundreds column.
002BD5  3  D0 02        	bne :+
002BD7  3  E6 65        	inc z80_d
002BD9  3               :
002BD9  3  A9 64        	lda #<100		; amount to add each time.
002BDB  3  85 62        	sta z80_c
002BDD  3  A9 00        	lda #>100
002BDF  3  85 63        	sta z80_b
002BE1  3  20 03 2C     	jsr incsc		; add to score.
002BE4  3               
002BE4  3  E6 64        	inc z80_e 		; tens column.
002BE6  3  D0 02        	bne :+
002BE8  3  E6 65        	inc z80_d
002BEA  3               :
002BEA  3  A9 0A        	lda #<10		; amount to add each time.
002BEC  3  85 62        	sta z80_c
002BEE  3  A9 00        	lda #>10
002BF0  3  85 63        	sta z80_b
002BF2  3  20 03 2C     	jsr incsc 		; add to score.
002BF5  3               
002BF5  3  E6 64        	inc z80_e		; units column.
002BF7  3  D0 02        	bne :+
002BF9  3  E6 65        	inc z80_d
002BFB  3               :
002BFB  3  A9 01        	lda #<1			; units.
002BFD  3  85 62        	sta z80_c
002BFF  3  A9 00        	lda #>1
002C01  3  85 63        	sta z80_b
002C03  3               incsc:
002C03  3  A5 67        	lda z80_h		; store amount to add.
002C05  3  48           	pha
002C06  3  A5 66        	lda z80_l
002C08  3  48           	pha
002C09  3               
002C09  3  38           	sec			; subtract from amount to add.
002C0A  3  A5 66        	lda z80_l
002C0C  3  E5 62        	sbc z80_c
002C0E  3  85 66        	sta z80_l
002C10  3  A5 67        	lda z80_h
002C12  3  E5 63        	sbc z80_b
002C14  3  85 67        	sta z80_h
002C16  3  90 14        	bcc incsc0		; too much, restore value.
002C18  3               
002C18  3  68           	pla			; delete the previous amount from the stack.
002C19  3  68           	pla
002C1A  3               
002C1A  3  A5 65        	lda z80_d 		; store column position.
002C1C  3  48           	pha
002C1D  3  A5 64        	lda z80_e
002C1F  3  48           	pha
002C20  3  20 33 2C     	jsr incsc2		; do the increment.
002C23  3               
002C23  3  68           	pla			; restore column.
002C24  3  85 64        	sta z80_e
002C26  3  68           	pla
002C27  3  85 65        	sta z80_d
002C29  3  4C 03 2C     	jmp incsc		; repeat until all added.
002C2C  3               
002C2C  3               incsc0:
002C2C  3  68           	pla			; restore previous value.
002C2D  3  85 66        	sta z80_l
002C2F  3  68           	pla
002C30  3  85 67        	sta z80_h
002C32  3  60           	rts
002C33  3               incsc2:
002C33  3  A0 00        	ldy #0
002C35  3  B1 64        	lda (z80_de),y 		; get amount.
002C37  3  18           	clc
002C38  3  69 01        	adc #1			; add one to column.
002C3A  3  91 64        	sta (z80_de),y		; write new column total.
002C3C  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C3E  3  B0 01        	bcs :+
002C40  3  60           	rts			; no, carry on.
002C41  3               :
002C41  3  A9 30        	lda #'0'		; make it zero.
002C43  3  91 64        	sta (z80_de),y		; write new column total.
002C45  3  C6 64        	dec z80_e		; back one column.
002C47  3  D0 02        	bne :+
002C49  3  C6 65        	dec z80_d
002C4B  3               :
002C4B  3  4C 33 2C     	jmp incsc2
002C4E  3               
002C4E  3               ;------------------------------------
002C4E  3               ; Add bonus to score and reset bonus
002C4E  3               ;------------------------------------
002C4E  3               
002C4E  3               addbo:
002C4E  3  A2 05        	ldx #5			; last digit.
002C50  3  18           	clc
002C51  3               addbo0:
002C51  3  BD 21 2B     	lda score,x		; get score.
002C54  3  7D 2D 2B     	adc bonus,x		; add bonus.
002C57  3  38           	sec			; 0 to 18.
002C58  3  E9 30        	sbc #48
002C5A  3  48           	pha
002C5B  3  A9 30        	lda #'0'
002C5D  3  9D 2D 2B     	sta bonus,x
002C60  3  68           	pla
002C61  3  C9 3A        	cmp #58
002C63  3  90 03        	bcc addbo1
002C65  3  38           	sec
002C66  3  E9 0A        	sbc #10
002C68  3               addbo1:
002C68  3  9D 21 2B     	sta score,x		; zeroise bonus.
002C6B  3  CA           	dex			; next digit.
002C6C  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C6E  3  60           	rts
002C6F  3               
002C6F  3               ;------------------------------------
002C6F  3               ; Swap score and bonus.
002C6F  3               ;------------------------------------
002C6F  3               
002C6F  3               swpsb:
002C6F  3  A2 05        	ldx #5			; digits to add.
002C71  3               swpsb0:
002C71  3  BD 21 2B     	lda score,x 		; get score digits.
002C74  3  48           	pha			; save digit
002C75  3  BD 2D 2B     	lda bonus,x 		; get bonus digits.
002C78  3  9D 21 2B     	sta score,x		; switch score-bonus
002C7B  3  68           	pla
002C7C  3  9D 2D 2B     	sta bonus,x
002C7F  3  CA           	dex 			; repeat for all 6 digits.
002C80  3  10 EF        	bpl swpsb0
002C82  3  60           	rts
002C83  3               
002C83  3               ;----------------------------------------------------
002C83  3               ; Get print address.
002C83  3               ;----------------------------------------------------
002C83  3               
002C83  3               gprad:
002C83  3  A5 rr        	lda dispy
002C85  3  85 rr        	sta tmp
002C87  3  0A           	asl a
002C88  3  18           	clc
002C89  3  65 rr        	adc tmp
002C8B  3  A8           	tay
002C8C  3  B9 00 DC     	lda SCADTB_lb,y
002C8F  3  18           	clc
002C90  3  65 rr        	adc dispx
002C92  3  85 rr        	sta scraddr
002C94  3  B9 00 DD     	lda SCADTB_hb,y
002C97  3  69 00        	adc #0
002C99  3  85 rr        	sta scraddr+1
002C9B  3  60           	rts
002C9C  3               
002C9C  3               ;--------------------------------------------------------------
002C9C  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002C9C  3               ;
002C9C  3               ; Output:
002C9C  3               ;  bufaddr = MAP + dispy*40 + dispx
002C9C  3               ;--------------------------------------------------------------
002C9C  3               
002C9C  3               pradd:
002C9C  3  A5 rr        	lda dispy 		; y coordinate.
002C9E  3  0A           	asl a
002C9F  3  18           	clc
002CA0  3  65 rr        	adc dispy
002CA2  3  AA           	tax
002CA3  3               
002CA3  3  18           	clc
002CA4  3  BD 00 DC     	lda SCADTB_lb,x
002CA7  3  65 rr        	adc dispx
002CA9  3  85 rr        	sta bufaddr
002CAB  3               
002CAB  3  BD 00 DD     	lda SCADTB_hb,x
002CAE  3  69 D4        	adc #(>MAP->ScreenAddr)
002CB0  3  85 rr        	sta bufaddr+1
002CB2  3  60           	rts
002CB3  3               
002CB3  3               ;----------------------------------------------------
002CB3  3               ; Display character in A at dispx,dispy.
002CB3  3               ;
002CB3  3               ; Input:
002CB3  3               ;  A 	   = character to print
002CB3  3               ;----------------------------------------------------
002CB3  3               
002CB3  3               pchar:
002CB3  3  48           	pha
002CB4  3  20 83 2C     	jsr gprad		; get screen address.
002CB7  3               .if gflag
002CB7  3               	and andeor
002CB7  3               	eor andeor+1
002CB7  3               .endif
002CB7  3               .if iflag
002CB7  3               	eor #$ff
002CB7  3               .endif
002CB7  3  68           	pla
002CB8  3  A0 00        	ldy #0
002CBA  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CBC  3  60           	rts
002CBD  3               
002CBD  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002CC1  3  60 40 20 00  
002CC5  3               
002CC5  3               ;----------------------------------------------
002CC5  3               
002CC5  3               ; Print attributes, properties and pixels.
002CC5  3               ;
002CC5  3               ; Input:
002CC5  3               ;  A	= tile number
002CC5  3               ;----------------------------------------------
002CC5  3               
002CC5  3               pbpattr:			; entry PUTBLOCK command
002CC5  3  A4 rr        	ldy charx
002CC7  3  84 rr        	sty dispx
002CC9  3  A4 rr        	ldy chary
002CCB  3  84 rr        	sty dispy
002CCD  3               pattr:
002CCD  3               .if aflag
002CCD  3               	pha
002CCD  3               	jsr wbloc		; save blockinfo
002CCD  3               	pla
002CCD  3               .endif
002CCD  3               
002CCD  3               pattr2:
002CCD  3  85 63        	sta z80_b		; store cell in b register for now.
002CCF  3  AA           	tax
002CD0  3  BD FE 3A     	lda bprop,x 		; block properties.
002CD3  3  85 62        	sta z80_c
002CD5  3  C9 08        	cmp #COLECT
002CD7  3  D0 05        	bne :+
002CD9  3  A5 63        	lda z80_b
002CDB  3  8D EC 2C     	sta colpatt
002CDE  3               :
002CDE  3  20 9C 2C     	jsr pradd 		; get property buffer address.
002CE1  3  A5 62        	lda z80_c
002CE3  3  A0 00        	ldy #0
002CE5  3  91 rr        	sta (bufaddr),y 	; write property.
002CE7  3  A5 63        	lda z80_b 		; restore cell.
002CE9  3  4C ED 2C     	jmp panp
002CEC  3               ; Print attributes, no properties.
002CEC  3               
002CEC  3  00           colpatt:	.byte 0
002CED  3               
002CED  3               panp:
002CED  3  85 64        	sta z80_e		; displacement in e.
002CEF  3  A9 00        	lda #0
002CF1  3  85 65        	sta z80_d		; no high byte.
002CF3  3  06 64        	asl z80_e  		; multiply char by 8.
002CF5  3  26 65        	rol z80_d
002CF7  3  18           	clc
002CF8  3  A5 64        	lda z80_e
002CFA  3  69 F6        	adc #<chgfx 		; address of graphics.
002CFC  3  85 rr        	sta tileaddr
002CFE  3  A5 65        	lda z80_d
002D00  3  69 3A        	adc #>chgfx
002D02  3  85 rr        	sta tileaddr+1
002D04  3  20 83 2C     	jsr gprad 		; get screen address.
002D07  3               panp0:
002D07  3  A0 00        	ldy #0
002D09  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002D0B  3               .if iflag
002D0B  3               	eor #$ff		; Invert
002D0B  3               .endif
002D0B  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D0D  3  E6 rr        	inc dispx 		; move along one.
002D0F  3  E6 rr        	inc charx
002D11  3  60           	rts
002D12  3               
002D12  3               ;----------------------------------------------
002D12  3               ; Write block
002D12  3               ;----------------------------------------------
002D12  3               
002D12  3               .if aflag
002D12  3               wbloc:
002D12  3               	ldy #3
002D12  3               	sta (pbptr),y		; store block number
002D12  3               	dey
002D12  3               	lda dispx
002D12  3               	sta (pbptr),y		; write x position of block.
002D12  3               	dey
002D12  3               	lda dispy
002D12  3               	sta (pbptr),y		; write y position of block.
002D12  3               	dey
002D12  3               	lda scno
002D12  3               	sta (pbptr),y		; write screen.
002D12  3               	clc			; point to next free location
002D12  3               	lda pbptr
002D12  3               	adc #4
002D12  3               	sta pbptr
002D12  3               	bcc :+
002D12  3               	inc pbptr+1
002D12  3               :
002D12  3               	rts
002D12  3               .endif
002D12  3               
002D12  3               ;----------------------------------------------
002D12  3               ; Print character pixels, no more.
002D12  3               ;
002D12  3               ; Input:
002D12  3               ;  A	= character to print
002D12  3               ;----------------------------------------------
002D12  3               
002D12  3               pchr:
002D12  3  20 B3 2C     	jsr pchar 		; show character in accumulator.
002D15  3  E6 rr        	inc dispx		; move along one.
002D17  3  60           	rts
002D18  3               
002D18  3               ;----------------------------------------------------
002D18  3               ; Shifter sprite routine for objects.
002D18  3               ;----------------------------------------------------
002D18  3               
002D18  3               .if oflag
002D18  3               sprit7:
002D18  3               	lda z80_b
002D18  3               	beq sprit0
002D18  3               	sta z80_a
002D18  3               sprit3:
002D18  3               	lsr spr			; shift into position.
002D18  3               	ror spr+1
002D18  3               	ror spr+2
002D18  3               	dec z80_a		; one less iteration.
002D18  3               	bne sprit3
002D18  3               sprit0:
002D18  3               	rts 			; now apply to screen.
002D18  3               
002D18  3               ;----------------------------------------------------
002D18  3               ; Draw sprite
002D18  3               ;----------------------------------------------------
002D18  3               
002D18  3               sprite:
002D18  3               	stx xtmp		; Save X-reg
002D18  3               	jsr scadd 		; get screen address in scraddr.
002D18  3               
002D18  3               	lda dispx 		; x position.
002D18  3               	and #7 			; position straddling cells.
002D18  3               	sta z80_b		; store in b register.
002D18  3               
002D18  3               	lda z80_l		; store sprite graphic address.
002D18  3               	sta sprit1+1
002D18  3               	sta sprit2+1
002D18  3               	lda z80_h
002D18  3               	sta sprit1+2
002D18  3               	sta sprit2+2
002D18  3               
002D18  3               	ldx #0			; pixel height.
002D18  3               	ldy #0
002D18  3               sprit1:
002D18  3               	lda objdta,x		; fetch first byte.
002D18  3               	sta spr
002D18  3               	inx
002D18  3               sprit2:
002D18  3               	lda objdta,x
002D18  3               	sta spr+1
002D18  3               
002D18  3               	lda #0
002D18  3               	sta spr+2
002D18  3               	jsr sprit7		; shift sprite
002D18  3               
002D18  3               	dex
002D18  3               	lda spr			; fetch graphic.
002D18  3               	ldy spritetab,x
002D18  3               	eor (scraddr),y		; merge with screen image.
002D18  3               	sta (scraddr),y		; write to screen.
002D18  3               	inx			; next screen byte.
002D18  3               
002D18  3               	lda spr+1		; fetch graphic.
002D18  3               	ldy spritetab,x
002D18  3               	eor (scraddr),y		; merge with screen image.
002D18  3               	sta (scraddr),y		; write to screen.
002D18  3               	iny
002D18  3               
002D18  3               	lda spr+2		; fetch graphic.
002D18  3               	eor (scraddr),y		; merge with screen image.
002D18  3               	sta (scraddr),y		; write to screen.
002D18  3               
002D18  3               	inx			; next source byte.
002D18  3               	cpx #16
002D18  3               	bne :+
002D18  3               	inc scraddr+1
002D18  3               :
002D18  3               	cpx #32
002D18  3               	bne sprit1		; repeat
002D18  3               
002D18  3               	ldx xtmp		; retreive X-reg
002D18  3               	rts
002D18  3               
002D18  3               spritetab:
002D18  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D18  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D18  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D18  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D18  3               
002D18  3               spr:	.byte 0,0,0
002D18  3               
002D18  3               ;xtmp:	.byte 0
002D18  3               .endif
002D18  3               
002D18  3               ;-----------------------------------------------------------
002D18  3               ; Get room address.
002D18  3               ;-----------------------------------------------------------
002D18  3               
002D18  3               groom:
002D18  3  A6 rr        	ldx scno 		; screen number.
002D1A  3  A0 00        	ldy #0
002D1C  3               groomx:
002D1C  3  A9 60        	lda #<scdat 		; pointer to screens.
002D1E  3  85 66        	sta z80_l
002D20  3  A9 3D        	lda #>scdat
002D22  3  85 67        	sta z80_h
002D24  3               groom1:
002D24  3  E0 00        	cpx #0			; is it the first one?
002D26  3  F0 15        	beq groom0 		; no more screens to skip.
002D28  3               
002D28  3  18           	clc
002D29  3  A5 66        	lda z80_l
002D2B  3  79 60 3D     	adc scdat,y 		; low byte of screen size.
002D2E  3  85 66        	sta z80_l
002D30  3  C8           	iny			; point to high byte.
002D31  3  A5 67        	lda z80_h
002D33  3  79 60 3D     	adc scdat,y 		; high byte of screen size.
002D36  3  85 67        	sta z80_h
002D38  3  C8           	iny			; next address.
002D39  3               
002D39  3  CA           	dex 			; one less iteration.
002D3A  3  4C 24 2D     	jmp groom1 		; loop until we reach the end.
002D3D  3               groom0:
002D3D  3  AD A6 3E     	lda numsc 		; add displacement.
002D40  3  0A           	asl a
002D41  3  18           	clc			; add double displacement to address.
002D42  3  65 66        	adc z80_l
002D44  3  85 66        	sta z80_l
002D46  3  A5 67        	lda z80_h
002D48  3  69 00        	adc #0
002D4A  3  85 67        	sta z80_h
002D4C  3  60           	rts
002D4D  3               
002D4D  3               ;-----------------------------------------------------------
002D4D  3               ; Draw present room.
002D4D  3               ;-----------------------------------------------------------
002D4D  3               
002D4D  3               droom:
002D4D  3  AD 1F 28     	lda wintop 		; window top.
002D50  3  85 rr        	sta dispy		; set cursor y position.
002D52  3               droom2:
002D52  3  20 18 2D     	jsr groom 		; get address of current room.
002D55  3  A9 00        	lda #0	 		; zero in accumulator.
002D57  3  85 rr        	sta comcnt 		; reset compression counter.
002D59  3  AD 21 28     	lda winhgt 		; height of window.
002D5C  3  85 rr        	sta rrow		; set row counter
002D5E  3               droom0:
002D5E  3  AD 20 28     	lda winlft 		; window left edge.
002D61  3  85 rr        	sta dispx 		; set cursor x position.
002D63  3  AD 22 28     	lda winwid 		; width of window.
002D66  3  85 rr        	sta rcol		; set column counter
002D68  3               droom1:
002D68  3  20 79 2D     	jsr flbyt 		; decompress next byte on the fly.
002D6B  3  20 CD 2C     	jsr pattr2 		; show attributes and block.
002D6E  3  C6 rr        	dec rcol		; one less column.
002D70  3  D0 F6        	bne droom1 		; repeat for entire line.
002D72  3  E6 rr        	inc dispy		; move down one line.
002D74  3  C6 rr        	dec rrow 		; one less row.
002D76  3  D0 E6        	bne droom0 		; repeat for all rows.
002D78  3  60           	rts
002D79  3               
002D79  3               ;rcol:	.byte 0
002D79  3               ;rrow:	.byte 0
002D79  3               
002D79  3               ;----------------------------------------------
002D79  3               ; Decompress bytes on-the-fly.
002D79  3               ;----------------------------------------------
002D79  3               
002D79  3               flbyt:
002D79  3  A5 rr        	lda comcnt 		; compression counter.
002D7B  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D7D  3               
002D7D  3  A0 00        	ldy #0
002D7F  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D81  3  E6 66        	inc z80_l 		; point to next cell.
002D83  3  D0 02        	bne :+
002D85  3  E6 67        	inc z80_h
002D87  3               :
002D87  3  C9 FF        	cmp #255 		; is this byte a control code?
002D89  3  F0 01        	beq :+
002D8B  3  60           	rts 			; no, this byte is uncompressed.
002D8C  3               :
002D8C  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002D8E  3  85 rr        	sta combyt 		; set up the type.
002D90  3  E6 66        	inc z80_l 		; point to quantity.
002D92  3  D0 02        	bne :+
002D94  3  E6 67        	inc z80_h
002D96  3               :
002D96  3  B1 66        	lda (z80_hl),y 		; get quantity.
002D98  3  E6 66        	inc z80_l 		; point to next byte.
002D9A  3  D0 02        	bne :+
002D9C  3  E6 67        	inc z80_h
002D9E  3               :
002D9E  3               flbyt1:
002D9E  3  85 rr        	sta comcnt 		; store new quantity.
002DA0  3  C6 rr        	dec comcnt		; one less.
002DA2  3  A5 rr        	lda combyt 		; byte to expand.
002DA4  3  60           	rts
002DA5  3               
002DA5  3               ;combyt:	.byte 0			; byte type compressed.
002DA5  3               ;comcnt:	.byte 0			; compression counter.
002DA5  3               
002DA5  3               ;------------------------------------------
002DA5  3               ; Ladder down check.
002DA5  3               ;
002DA5  3               ; Input:
002DA5  3               ;  IX = sprite pointer
002DA5  3               ;------------------------------------------
002DA5  3               
002DA5  3               .if lflag
002DA5  3               laddd:
002DA5  3               	ldy #9
002DA5  3               	lda (z80_ix),y		; x coordinate.
002DA5  3               	sta dispx
002DA5  3               
002DA5  3               	ldy #8
002DA5  3               	lda (z80_ix),y		; y coordinate.
002DA5  3               	and #254		; make it even.
002DA5  3               	sta (z80_ix),y 		; reset it.
002DA5  3               	clc 			; look down 16 pixels.
002DA5  3               numsp5:
002DA5  3               	adc #SPR_HGT
002DA5  3               	sta dispy		; coords in dispx,dispy.
002DA5  3               	jmp laddv
002DA5  3               
002DA5  3               ;------------------------------------------
002DA5  3               ; Ladder up check.
002DA5  3               ;
002DA5  3               ; Input:
002DA5  3               ;  IX = sprite pointer
002DA5  3               ;
002DA5  3               ; Output:
002DA5  3               ;  A  = 0 is ok, A <>0 is not ok
002DA5  3               ;------------------------------------------
002DA5  3               
002DA5  3               laddu:
002DA5  3               	ldy #9
002DA5  3               	lda (z80_ix),y		; x coordinate.
002DA5  3               	sta dispx
002DA5  3               
002DA5  3               	ldy #8
002DA5  3               	lda (z80_ix),y		; y coordinate.
002DA5  3               	and #254 		; make it even.
002DA5  3               	sta (z80_ix),y		; reset it.
002DA5  3               	clc 			; look 2 pixels above feet.
002DA5  3               numsp6:
002DA5  3               	adc #SPR_HGT-2
002DA5  3               	sta dispy		; coords in dispx,dispy.
002DA5  3               laddv:
002DA5  3               	jsr tstbl 		; get map address.
002DA5  3               	jsr ldchk 		; standard ladder check.
002DA5  3               	beq :+
002DA5  3               	rts 			; no way through.
002DA5  3               :
002DA5  3               	inc bufaddr 		; look right one cell.
002DA5  3               	bne :+
002DA5  3               	inc bufaddr+1
002DA5  3               :
002DA5  3               	jsr ldchk 		; do the check.
002DA5  3               	beq :+
002DA5  3               	rts 			; impassable.
002DA5  3               :
002DA5  3               	lda dispx 		; y coordinate.
002DA5  3               	and #7 			; position straddling block cells.
002DA5  3               	bne :+
002DA5  3               	rts 			; no more checks needed.
002DA5  3               :
002DA5  3               	inc bufaddr 		; look to third cell.
002DA5  3               	bne :+
002DA5  3               	inc bufaddr+1
002DA5  3               :
002DA5  3               	jsr ldchk 		; do the check.
002DA5  3               	rts  			; return with zero flag set accordingly.
002DA5  3               .endif
002DA5  3               
002DA5  3               ;---------------------------------------------------------
002DA5  3               ; Can go up check.
002DA5  3               ;
002DA5  3               ; Input:
002DA5  3               ;  IX = sprite pointer
002DA5  3               ;
002DA5  3               ; Output:
002DA5  3               ;  A  = 0 is ok, A <>0 is not ok
002DA5  3               ;---------------------------------------------------------
002DA5  3               
002DA5  3               cangu:
002DA5  3  A0 09        	ldy #9
002DA7  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DA9  3  85 rr        	sta dispx
002DAB  3  A0 08        	ldy #8
002DAD  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002DAF  3  38           	sec
002DB0  3  E9 01        	sbc #1
002DB2  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DB4  3  20 29 2F     	jsr tstbl 		; get map address.
002DB7  3  20 88 2E     	jsr lrchk 		; standard left/right check.
002DBA  3  F0 01        	beq :+
002DBC  3  60           	rts			; no way through.
002DBD  3               :
002DBD  3  E6 rr        	inc bufaddr		; look right one cell.
002DBF  3  D0 02        	bne :+
002DC1  3  E6 rr        	inc bufaddr+1
002DC3  3               :
002DC3  3  20 88 2E     	jsr lrchk 		; do the check.
002DC6  3  F0 01        	beq :+
002DC8  3  60           	rts			; impassable.
002DC9  3               :
002DC9  3  E6 rr        	inc bufaddr		; look right one cell.
002DCB  3  D0 02        	bne :+
002DCD  3  E6 rr        	inc bufaddr+1
002DCF  3               :
002DCF  3  20 88 2E     	jsr lrchk 		; do the check.
002DD2  3  F0 01        	beq :+
002DD4  3  60           	rts			; impassable.
002DD5  3               :
002DD5  3  E6 rr        	inc bufaddr		; look right one cell.
002DD7  3  D0 02        	bne :+
002DD9  3  E6 rr        	inc bufaddr+1
002DDB  3               :
002DDB  3  20 88 2E     	jsr lrchk 		; do the check.
002DDE  3  F0 01        	beq :+
002DE0  3  60           	rts			; impassable.
002DE1  3               :
002DE1  3  A5 rr        	lda dispx		; x coordinate.
002DE3  3  29 01        	and #1			; position straddling block cells.
002DE5  3  D0 01        	bne :+
002DE7  3  60           	rts			; no more checks needed.
002DE8  3               :
002DE8  3  E6 rr        	inc bufaddr		; look to third cell.
002DEA  3  D0 02        	bne :+
002DEC  3  E6 rr        	inc bufaddr+1
002DEE  3               :
002DEE  3  20 88 2E     	jsr lrchk		; do the check.
002DF1  3  60           	rts 			; return with zero flag set accordingly.
002DF2  3               
002DF2  3               ;---------------------------------------------------------
002DF2  3               ; Can go down check.
002DF2  3               ;
002DF2  3               ; Input:
002DF2  3               ;  IX = sprite pointer
002DF2  3               ;
002DF2  3               ; Output:
002DF2  3               ;  A  = 0 is ok, A <>0 is not ok
002DF2  3               ;---------------------------------------------------------
002DF2  3               
002DF2  3               cangd:
002DF2  3  A0 09        	ldy #9
002DF4  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002DF6  3  85 rr        	sta dispx
002DF8  3  A0 08        	ldy #8
002DFA  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DFC  3  18           	clc
002DFD  3               numsp3:
002DFD  3  69 09        	adc #SPR_HGT 		; look down 9 pixels.
002DFF  3  85 rr        	sta dispy		; coords in dispx,dispy.
002E01  3  20 29 2F     	jsr tstbl 		; get map address.
002E04  3  20 9D 2E     	jsr plchk 		; block, platform check.
002E07  3  F0 01        	beq :+
002E09  3  60           	rts			; no way through.
002E0A  3               :
002E0A  3  E6 rr        	inc bufaddr		; look right one cell.
002E0C  3  D0 02        	bne :+
002E0E  3  E6 rr        	inc bufaddr+1
002E10  3               :
002E10  3  20 9D 2E     	jsr plchk		; block, platform check.
002E13  3  F0 01        	beq :+
002E15  3  60           	rts			; impassable.
002E16  3               :
002E16  3  E6 rr        	inc bufaddr		; look right one cell.
002E18  3  D0 02        	bne :+
002E1A  3  E6 rr        	inc bufaddr+1
002E1C  3               :
002E1C  3  20 9D 2E     	jsr plchk		; block, platform check.
002E1F  3  F0 01        	beq :+
002E21  3  60           	rts			; impassable.
002E22  3               :
002E22  3  E6 rr        	inc bufaddr		; look right one cell.
002E24  3  D0 02        	bne :+
002E26  3  E6 rr        	inc bufaddr+1
002E28  3               :
002E28  3  20 9D 2E     	jsr plchk		; block, platform check.
002E2B  3  F0 01        	beq :+
002E2D  3  60           	rts			; impassable.
002E2E  3               :
002E2E  3  A5 rr        	lda dispx		; x coordinate.
002E30  3  29 01        	and #1			; position straddling block cells.
002E32  3  D0 01        	bne :+
002E34  3  60           	rts			; no more checks needed.
002E35  3               :
002E35  3  E6 rr        	inc bufaddr		; look to third cell.
002E37  3  D0 02        	bne :+
002E39  3  E6 rr        	inc bufaddr+1
002E3B  3               :
002E3B  3  20 9D 2E     	jsr plchk		; block, platform check.
002E3E  3  60           	rts			; return with zero flag set accordingly.
002E3F  3               
002E3F  3               ;---------------------------------------------------------
002E3F  3               ; Can go left check.
002E3F  3               ;
002E3F  3               ; Input:
002E3F  3               ;  IX = sprite pointer
002E3F  3               ;
002E3F  3               ; Output:
002E3F  3               ;  A  = 0 is ok, A <>0 is not ok
002E3F  3               ;---------------------------------------------------------
002E3F  3               
002E3F  3               cangl:
002E3F  3  A0 08        	ldy #8
002E41  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E43  3  85 rr        	sta dispy
002E45  3  A0 09        	ldy #9
002E47  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E49  3  38           	sec
002E4A  3  E9 01        	sbc #1			; look left 2 pixels.
002E4C  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E4E  3  4C 60 2E     	jmp cangh		; test if we can go there.
002E51  3               
002E51  3               ;---------------------------------------------------------
002E51  3               ; Can go right check.
002E51  3               ;
002E51  3               ; Input:
002E51  3               ;  IX = sprite pointer
002E51  3               ;
002E51  3               ; Output:
002E51  3               ;  A  = 0 is ok, A <>0 is not ok
002E51  3               ;---------------------------------------------------------
002E51  3               
002E51  3               cangr:
002E51  3  A0 08        	ldy #8
002E53  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E55  3  85 rr        	sta dispy
002E57  3  A0 09        	ldy #9
002E59  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E5B  3  18           	clc
002E5C  3  69 08        	adc #SPR_WID		; look right 8 pixels.
002E5E  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E60  3               cangh:
002E60  3               cangh2:
002E60  3  A9 04        	lda #(SPR_HGT/3+1)	; default rows to write.
002E62  3  85 63        	sta z80_b
002E64  3  A4 rr        	ldy dispy		; y position.
002E66  3  B9 4A DF     	lda V_SPR_PTR,y		; does x straddle cells?
002E69  3  D0 02        	bne cangh0		; yes, loop counter is good.
002E6B  3  C6 63        	dec z80_b		; one less row to write.
002E6D  3               cangh0:
002E6D  3  20 29 2F     	jsr tstbl		; get map address.
002E70  3               cangh1:
002E70  3  20 88 2E     	jsr lrchk		; standard left/right check.
002E73  3  F0 01        	beq :+
002E75  3  60           	rts			; no way through.
002E76  3               :
002E76  3  48           	pha
002E77  3  18           	clc
002E78  3  A5 rr        	lda bufaddr
002E7A  3  69 28        	adc #ScrWidth		; look down.
002E7C  3  85 rr        	sta bufaddr
002E7E  3  90 02        	bcc :+
002E80  3  E6 rr        	inc bufaddr+1
002E82  3               :
002E82  3  68           	pla
002E83  3               
002E83  3  C6 63        	dec z80_b
002E85  3  D0 E9        	bne cangh1
002E87  3  60           	rts
002E88  3               
002E88  3               ;-------------------------------------
002E88  3               ; Check left/right movement is okay.
002E88  3               ;
002E88  3               ; Input:
002E88  3               ;  bufaddr = MAP + x/8 + y/8*32
002E88  3               ;
002E88  3               ; Output:
002E88  3               ;  A  = 0 is ok, A <>0 is not ok
002E88  3               ;-------------------------------------
002E88  3               
002E88  3               lrchk:
002E88  3  A0 00        	ldy #0
002E8A  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002E8C  3  C9 02        	cmp #WALL 		; is it passable?
002E8E  3  F0 0A        	beq lrchkx		; no.
002E90  3               
002E90  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002E92  3  F0 06        	beq lrchkx		; not passable.
002E94  3  A9 00        	lda #0
002E96  3  60           	rts
002E97  3               
002E97  3               ;--------------------------------------------------------------
002E97  3               ; Called by mmenu
002E97  3               ;--------------------------------------------------------------
002E97  3               
002E97  3               always:
002E97  3  A9 FF        	lda #255		; report it as okay.
002E99  3  60           	rts
002E9A  3               
002E9A  3               lrchkx:
002E9A  3  A9 01        	lda #1 			; reset all bits.
002E9C  3  60           	rts
002E9D  3               
002E9D  3               
002E9D  3               ;--------------------------------------------------------------
002E9D  3               ; Check platform or solid item is not in way.
002E9D  3               ;
002E9D  3               ; Input:
002E9D  3               ;  bufaddr = MAP + x/2 + y/3*40
002E9D  3               ;
002E9D  3               ; Output:
002E9D  3               ;  A  = 0 is ok, A <>0 is not ok
002E9D  3               ;--------------------------------------------------------------
002E9D  3               
002E9D  3               plchk:
002E9D  3  A0 00        	ldy #0
002E9F  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002EA1  3  C9 02        	cmp #WALL 		; is it passable?
002EA3  3  F0 F5        	beq lrchkx		; no.
002EA5  3               .if pflag .or dflag
002EA5  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002EA7  3  F0 F1        	beq lrchkx		; not passable.
002EA9  3               .endif
002EA9  3  C9 01        	cmp #PLATFM		; platform is solid.
002EAB  3  F0 03        	beq plchkx		; not passable.
002EAD  3               .if lflag
002EAD  3               	cmp #LADDER		; is it a ladder?
002EAD  3               	beq lrchkx		; on ladder, deny movement.
002EAD  3               .endif
002EAD  3               plchk0:
002EAD  3  A9 00        	lda #0			; report as ok
002EAF  3  60           	rts
002EB0  3               plchkx:
002EB0  3  A4 rr        	ldy dispy		; y coordinate.
002EB2  3  B9 4A DF     	lda V_SPR_PTR,y		; position straddling blocks.
002EB5  3  F0 E3        	beq lrchkx		; on platform, deny movement.
002EB7  3  4C AD 2E     	jmp plchk0
002EBA  3               
002EBA  3               ;--------------------------------------------------------------
002EBA  3               ; Check ladder is available.
002EBA  3               ;
002EBA  3               ; Input:
002EBA  3               ;  bufaddr = MAP + x/8 + y/8*32
002EBA  3               ;
002EBA  3               ; Output:
002EBA  3               ;  A  = 0 is ok, A <>0 is not ok
002EBA  3               ;--------------------------------------------------------------
002EBA  3               
002EBA  3               .if lflag
002EBA  3               ldchk:
002EBA  3               	ldy #0
002EBA  3               	lda (bufaddr),y 	; fetch cell.
002EBA  3               	cmp #LADDER 		; is it a ladder?
002EBA  3               	beq :+
002EBA  3               	lda #1
002EBA  3               	rts  			; return with zero flag set accordingly.
002EBA  3               :
002EBA  3               	lda #0
002EBA  3               	rts
002EBA  3               .endif
002EBA  3               
002EBA  3               ;--------------------------------------------------------------
002EBA  3               ; Get collectables.
002EBA  3               ;--------------------------------------------------------------
002EBA  3               
002EBA  3               .if cflag
002EBA  3               getcol:
002EBA  3                       lda #COLECT             ; collectable blocks.
002EBA  3                       sta z80_b
002EBA  3                       jsr tded                ; test for collectable blocks.
002EBA  3                       cmp z80_b               ; did we find one?
002EBA  3                       beq :+
002EBA  3                       rts                     ; none were found, job done.
002EBA  3               :
002EBA  3                       jsr gtblk               ; get block.
002EBA  3                       jsr evnt20              ; collected block event.
002EBA  3                       jmp getcol              ; repeat until none left.
002EBA  3               
002EBA  3               ; Get collectable block.
002EBA  3               
002EBA  3               gtblk:
002EBA  3               	ldy #0
002EBA  3               	lda (bufaddr),y
002EBA  3               	sta colpatt		; save collectable block nr
002EBA  3               
002EBA  3                       lda #0
002EBA  3                       sta (bufaddr),y		; make it empty now in MAP.
002EBA  3               
002EBA  3               	lda bufaddr		; calculate screenaddr
002EBA  3               	sta scraddr
002EBA  3               	sec
002EBA  3               	lda bufaddr+1
002EBA  3               	sbc #>(MAP-ScreenAddr)	;$d4
002EBA  3               	sta scraddr+1
002EBA  3               
002EBA  3               	ldy #0			; erase block on screen
002EBA  3               	lda (scraddr),y
002EBA  3               	eor colpatt
002EBA  3               	sta (scraddr),y
002EBA  3               
002EBA  3               	rts
002EBA  3               .endif
002EBA  3               
002EBA  3               ;--------------------------------------------------------------
002EBA  3               ; Touched deadly block check.
002EBA  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002EBA  3               ;
002EBA  3               ; Input:
002EBA  3               ;  IX = sprite address
002EBA  3               ;
002EBA  3               ; Output:
002EBA  3               ;  A  = 0 is ok, A=5 is not ok
002EBA  3               ;--------------------------------------------------------------
002EBA  3               
002EBA  3               ; Calculate map address from dispx,dispy
002EBA  3               
002EBA  3               tded:
002EBA  3  A0 08        	ldy #8
002EBC  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002EBE  3  85 rr        	sta dispy
002EC0  3  C8           	iny
002EC1  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002EC3  3  85 rr        	sta dispx		; coords in dispx,dispy.
002EC5  3  20 29 2F     	jsr tstbl		; get map address in bufaddr.
002EC8  3               
002EC8  3               ; Set variables
002EC8  3               
002EC8  3  A9 00        	lda #0
002ECA  3  85 62        	sta z80_c		; reset x-stradding skip flag
002ECC  3               
002ECC  3  A9 04        	lda #4			; Set nr of sprite columns
002ECE  3  85 rr        	sta rcol
002ED0  3  A5 rr        	lda dispx
002ED2  3  29 01        	and #1
002ED4  3  D0 04        	bne :+
002ED6  3  C6 rr        	dec rcol
002ED8  3  E6 62        	inc z80_c		; set x-stradding skip flag
002EDA  3               :
002EDA  3  A5 rr        	lda rcol
002EDC  3  85 64        	sta z80_e
002EDE  3               
002EDE  3  A9 03        	lda #3			; Set nr of sprite rows
002EE0  3  85 rr        	sta rrow
002EE2  3  A4 rr        	ldy dispy
002EE4  3  B9 4A DF     	lda V_SPR_PTR,y
002EE7  3  D0 02        	bne :+
002EE9  3  C6 rr        	dec rrow
002EEB  3               :
002EEB  3  A2 00        	ldx #0
002EED  3               vspr_loop:
002EED  3  A5 64        	lda z80_e
002EEF  3  85 rr        	sta rcol
002EF1  3               hspr_loop:
002EF1  3  BC 15 2F     	ldy spr_ptr,x
002EF4  3  B1 rr        	lda (bufaddr),y
002EF6  3  C5 63        	cmp z80_b
002EF8  3  F0 0E        	beq end_sprloop
002EFA  3  E8           	inx
002EFB  3  C6 rr        	dec rcol
002EFD  3  10 F2        	bpl hspr_loop
002EFF  3               ;	inx
002EFF  3  A4 62        	ldy z80_c		; Test x-stradding skip flag
002F01  3  F0 01        	beq :+			; If reset, no skipping
002F03  3  E8           	inx			; If set, skip 1 byte
002F04  3               :
002F04  3  C6 rr        	dec rrow
002F06  3  10 E5        	bpl vspr_loop
002F08  3               end_sprloop:
002F08  3  48           	pha
002F09  3  18           	clc
002F0A  3  98           	tya
002F0B  3  65 rr        	adc bufaddr
002F0D  3  85 rr        	sta bufaddr
002F0F  3  90 02        	bcc :+
002F11  3  E6 rr        	inc bufaddr+1
002F13  3               :
002F13  3  68           	pla
002F14  3  60           	rts
002F15  3               
002F15  3               spr_ptr:
002F15  3  00 01 02 03  	.byte   0,  1,  2,  3,  4
002F19  3  04           
002F1A  3  28 29 2A 2B  	.byte  40, 41, 42, 43, 44
002F1E  3  2C           
002F1F  3  50 51 52 53  	.byte  80, 81, 82, 83, 84
002F23  3  54           
002F24  3  78 79 7A 7B  	.byte 120,121,122,123,124
002F28  3  7C           
002F29  3               
002F29  3               ;---------------------------------------------------
002F29  3               ; Fetch block type at (dispx, dispy).
002F29  3               ;
002F29  3               ; Output:
002F29  3               ;  A = block type
002F29  3               ;---------------------------------------------------
002F29  3               
002F29  3               tstbl:
002F29  3  A5 rr        	lda dispy 		; fetch y coord.
002F2B  3  AA           	tax
002F2C  3               
002F2C  3  A5 rr        	lda dispx		; x/2
002F2E  3  4A           	lsr a
002F2F  3  85 rr        	sta charx
002F31  3               
002F31  3  18           	clc			; Get offset address
002F32  3  BD 00 DC     	lda SCADTB_lb,x
002F35  3  65 rr        	adc charx
002F37  3  85 rr        	sta bufaddr
002F39  3               
002F39  3  BD 00 DD     	lda SCADTB_hb,x
002F3C  3  69 D4        	adc #(>MAP->ScreenAddr)	; Get map address
002F3E  3  85 rr        	sta bufaddr+1
002F40  3               
002F40  3  A0 00        	ldy #0
002F42  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002F44  3  60           	rts
002F45  3               
002F45  3               ;-------------------------------------------------------------------
002F45  3               ; Jump - if we can.
002F45  3               ; Requires initial speed to be set up in accumulator prior to call.
002F45  3               ;
002F45  3               ; Input:
002F45  3               ;  IX = sprite address
002F45  3               ;-------------------------------------------------------------------
002F45  3               
002F45  3               jump:
002F45  3  A0 0D        	ldy #13
002F47  3  B1 68        	lda (z80_ix),y		; jump table low.
002F49  3  A0 0E        	ldy #14
002F4B  3  11 68        	ora (z80_ix),y		; jump table high.
002F4D  3  F0 01        	beq :+
002F4F  3  60           	rts			; already in the air.
002F50  3               :
002F50  3  A9 41        	lda #>jtab
002F52  3  A0 0E        	ldy #14
002F54  3  91 68        	sta (z80_ix),y		; set jump high.
002F56  3  A9 D6        	lda #<jtab		; jump table start.
002F58  3  A0 0D        	ldy #13
002F5A  3  91 68        	sta (z80_ix),y		; set jump low.
002F5C  3  60           	rts
002F5D  3               
002F5D  3               ; Jump table.
002F5D  3               
002F5D  3               ;jtab:
002F5D  3               ;	.byte 248,250,252
002F5D  3               ;	.byte 254,254,255
002F5D  3               ;	.byte 255,255,0,0
002F5D  3               ;	.byte 0,1,1,1,2,2
002F5D  3               ;	.byte 4,6,8,8,8,99
002F5D  3               
002F5D  3               ;------------------------------------------------
002F5D  3               ; Random numbers code.
002F5D  3               ; Pseudo-random number generator, 8-bit.
002F5D  3               ;
002F5D  3               ; Output:
002F5D  3               ;  RND = random number
002F5D  3               ;------------------------------------------------
002F5D  3               
002F5D  3               random:
002F5D  3  A5 rr        	lda seed
002F5F  3  F0 05        	beq doEor
002F61  3  0A           	asl a
002F62  3  F0 04        	beq noEor
002F64  3  90 02        	bcc noEor
002F66  3  49 1D        doEor:	eor #$1d
002F68  3  85 rr        noEor:	sta seed
002F6A  3  60           	rts
002F6B  3               
002F6B  3  A5 rr        	lda seed		; get last random number.
002F6D  3  0A           	asl a
002F6E  3  0A           	asl a
002F6F  3  18           	clc
002F70  3  65 rr        	adc seed
002F72  3  18           	clc
002F73  3  69 45        	adc #$45
002F75  3  85 rr        	sta seed		; store new seed.
002F77  3  85 rr        	sta varrnd		; return number in variable.
002F79  3  60           	rts
002F7A  3               
002F7A  3               ;--------------------------------------------------------
002F7A  3               ; Keys
002F7A  3               ;
002F7A  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002F7A  3               ;             ||||||||
002F7A  3               ;             |||||||+> Right    KEY 0  - X
002F7A  3               ;             ||||||+-> Left     KEY 1  - Z
002F7A  3               ;             |||||+--> Down     KEY 2  - .
002F7A  3               ;             ||||+---> Up       KEY 3  - ;
002F7A  3               ;             |||+----> Fire1    KEY 4  - SPC
002F7A  3               ;             ||+-----> Fire2    KEY 5  - Q
002F7A  3               ;             |+------> Fire3    KEY 6  - P
002F7A  3               ;             +-------> Not used
002F7A  3               ;
002F7A  3               ;                       Option1  KEY 7  - 1
002F7A  3               ;                       Option2  KEY 8  - 2
002F7A  3               ;                       Option3  KEY 9  - 3
002F7A  3               ;                       Option4  KEY 10 - 4
002F7A  3               ;--------------------------------------------------------
002F7A  3               
002F7A  3               ;              X   Z   .   ;  SPC  Q   P
002F7A  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002F7A  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002F7A  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002F7E  3  00 04 14     
002F81  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002F85  3               
002F85  3               ;-------------------------------------------------------
002F85  3               ; Joystick and keyboard reading routines.
002F85  3               ;
002F85  3               ; contrl = 0, Keyboard
002F85  3               ;          1, JoyKeyb
002F85  3               ;          2, JoyMMC
002F85  3               ;-------------------------------------------------------
002F85  3               
002F85  3               joykey:
002F85  3  A5 rr        	lda contrl 		; control flag.
002F87  3  C9 01        	cmp #1
002F89  3  D0 03        	bne :+
002F8B  3  4C EF 42     	jmp joy1 		; read keyboard joystick
002F8E  3               :
002F8E  3  C9 02        	cmp #2
002F90  3  D0 03        	bne :+
002F92  3  4C 21 43     	jmp joy2 		; read MMC joystick.
002F95  3               :
002F95  3               ; Keyboard controls.
002F95  3               
002F95  3  A9 00        	lda #0		 	; zero reading.
002F97  3  85 64        	sta z80_e
002F99  3               
002F99  3  A0 06        	ldy #6	 		; address of last key.
002F9B  3               joyke0:
002F9B  3  B9 D7 41     	lda keys,y 		; get key from table.
002F9E  3  20 22 43     	jsr ktest		; being pressed?
002FA1  3  26 64        	rol z80_e 		; rotate into reading.
002FA3  3               
002FA3  3  88           	dey		 	; next key.
002FA4  3  10 F5        	bpl joyke0 		; repeat for all keys.
002FA6  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002FA8  3  85 rr        	sta joyval		; remember value.
002FAA  3  60           	rts
002FAB  3               
002FAB  3               ;---------------------------------------------------------------
002FAB  3               ; Getkey in column,row format
002FAB  3               ;
002FAB  3               ; Output:
002FAB  3               ;  A = high nibble=row and low nibble=column key in matrix
002FAB  3               ;---------------------------------------------------------------
002FAB  3               
002FAB  3               ;kget:
002FAB  3               ;	lda #ScrMode		; high-mono mode.
002FAB  3               ;	sta ScrSelAddr		; screen select port
002FAB  3               ;	stx xtmp
002FAB  3               ;kget4:
002FAB  3               ;	jsr READKEY		; read key until pressed
002FAB  3               ;	cpy #255
002FAB  3               ;	beq kget4
002FAB  3               ;	sta rcol		; save column
002FAB  3               ;	stx rrow		; determine row
002FAB  3               ;kget3:
002FAB  3               ;	jsr READKEY		; wait until key released
002FAB  3               ;	cpy #255
002FAB  3               ;	bne kget3
002FAB  3               ;
002FAB  3               ;	sec			; calculate matrix row
002FAB  3               ;	lda #10
002FAB  3               ;	sbc rrow
002FAB  3               ;	asl a
002FAB  3               ;	asl a
002FAB  3               ;	asl a
002FAB  3               ;	asl a
002FAB  3               ;	sta rrow
002FAB  3               ;
002FAB  3               ;	ldy #255		; find column mask
002FAB  3               ;kget1:
002FAB  3               ;	iny
002FAB  3               ;	lda keymask,y
002FAB  3               ;	cmp rcol
002FAB  3               ;	beq kget2
002FAB  3               ;	jmp kget1
002FAB  3               ;kget2:
002FAB  3               ;	tya			; determine column
002FAB  3               ;	clc
002FAB  3               ;	adc rrow
002FAB  3               ;	ldx xtmp
002FAB  3               ;	rts
002FAB  3               
002FAB  3               ;---------------------------------------------------------------
002FAB  3               ; Display message.
002FAB  3               ;
002FAB  3               ; Input:
002FAB  3               ;  A = message number
002FAB  3               ;---------------------------------------------------------------
002FAB  3               
002FAB  3               dmsg:
002FAB  3  AA           	tax
002FAC  3  A9 CE        	lda #<msgdat		; pointer to messages.
002FAE  3  85 66        	sta z80_l
002FB0  3  A9 3A        	lda #>msgdat
002FB2  3  85 67        	sta z80_h
002FB4  3  20 BE 30     	jsr getwrd		; get message number.
002FB7  3               dmsg3:
002FB7  3  20 B5 30     	jsr preprt		; pre-printing stuff.
002FBA  3  20 35 2B     	jsr checkx		; make sure we"re in a printable range.
002FBD  3  A5 rr        	lda prtmod		; print mode.
002FBF  3  D0 50        	bne bmsg1		; no, double-height text.
002FC1  3               
002FC1  3  AD 14 39     	lda fcolour		; Set textcolour
002FC4  3  20 B3 2C     	jsr pchar
002FC7  3  20 8B 30     	jsr nexpos
002FCA  3               dmsg0:
002FCA  3  A5 67        	lda z80_h		; store string pointer.
002FCC  3  48           	pha
002FCD  3  A5 66        	lda z80_l
002FCF  3  48           	pha
002FD0  3               
002FD0  3  A0 00        	ldy #0
002FD2  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
002FD4  3  29 7F        	and #127		; remove any end marker.
002FD6  3  C9 0D        	cmp #13
002FD8  3  F0 24        	beq dmsg1
002FDA  3  20 B3 2C     	jsr pchar		; display character.
002FDD  3  20 8B 30     	jsr nexpos 		; display position.
002FE0  3  D0 03        	bne dmsg2		; not on a new line.
002FE2  3  20 A7 30     	jsr nexlin		; next line down.
002FE5  3               dmsg2:
002FE5  3  68           	pla			; retrieve string pointer
002FE6  3  85 66        	sta z80_l
002FE8  3  68           	pla
002FE9  3  85 67        	sta z80_h
002FEB  3               
002FEB  3  A0 00        	ldy #0
002FED  3  B1 66        	lda (z80_hl),y		; fetch last character.
002FEF  3  0A           	asl a  			; was it the end?
002FF0  3  90 03        	bcc :+
002FF2  3  4C 88 2B     	jmp dscor2		; yes, job done.
002FF5  3               :
002FF5  3  E6 66        	inc z80_l		; next character to display.
002FF7  3  D0 02        	bne :+
002FF9  3  E6 67        	inc z80_h
002FFB  3               :
002FFB  3  4C CA 2F     	jmp dmsg0
002FFE  3               dmsg1:
002FFE  3  E6 rr        	inc dispy
003000  3  A5 rr        	lda dispy
003002  3  C9 19        	cmp #ScrHeight
003004  3  90 04        	bcc dmsg4
003006  3  A9 00        	lda #0
003008  3  85 rr        	sta dispy
00300A  3               dmsg4:
00300A  3  A9 00        	lda #0
00300C  3  85 rr        	sta dispx
00300E  3  4C E5 2F     	jmp dmsg2
003011  3               
003011  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
003011  3               
003011  3               ;----------------------------------------------------------
003011  3               ; Display message in big text.
003011  3               ;
003011  3               ; Input:
003011  3               ;  HL = string pointer
003011  3               ;----------------------------------------------------------
003011  3               
003011  3               bmsg1:
003011  3  AD 14 39     	lda fcolour		; Set textcolour
003014  3  20 5C 30     	jsr bchar
003017  3  A9 0D        	lda #13			; Set double height
003019  3  20 5C 30     	jsr bchar
00301C  3               bmsg4:
00301C  3  A0 00        	ldy #0
00301E  3  B1 66        	lda (z80_hl),y 		; get character to display.
003020  3  29 7F        	and #127		; only want 7 bits.
003022  3  C9 0D        	cmp #13
003024  3  F0 21        	beq bmsg2
003026  3  20 5C 30     	jsr bchar 		; display big char.
003029  3               bmsg3:
003029  3  A0 00        	ldy #0
00302B  3  B1 66        	lda (z80_hl),y 		; look at last character.
00302D  3  48           	pha
00302E  3  E6 66        	inc z80_l 		; next character in list.
003030  3  D0 02        	bne :+
003032  3  E6 67        	inc z80_h
003034  3               :
003034  3  68           	pla
003035  3  0A           	asl a  			; was terminator flag set?
003036  3  90 E4        	bcc bmsg4		; no, keep going.
003038  3  20 88 2B     	jsr dscor2
00303B  3  C6 rr        	dec dispx
00303D  3  E6 rr        	inc dispy
00303F  3  20 88 2B     	jsr dscor2
003042  3  C6 rr        	dec dispy
003044  3  C6 rr        	dec chary
003046  3  60           	rts
003047  3               bmsg2:
003047  3  A9 00        	lda #0
003049  3  85 rr        	sta dispx
00304B  3  E6 rr        	inc dispy
00304D  3  E6 rr        	inc dispy
00304F  3  A5 rr        	lda dispy
003051  3  C9 18        	cmp #ScrHeight-1
003053  3  90 D4        	bcc bmsg3
003055  3  A9 00        	lda #0
003057  3  85 rr        	sta dispy
003059  3  4C 29 30     	jmp bmsg3
00305C  3               
00305C  3               ;----------------------------------------------------------
00305C  3               ; Big character display.
00305C  3               ;
00305C  3               ; Input:
00305C  3               ;  A = character
00305C  3               ;----------------------------------------------------------
00305C  3               
00305C  3               bchar:
00305C  3  20 B3 2C     	jsr pchar 		; display big char.
00305F  3  E6 rr        	inc dispy
003061  3  20 B3 2C     	jsr pchar
003064  3  C6 rr        	dec dispy
003066  3  20 8B 30     	jsr nexpos		; display position.
003069  3  60           	rts
00306A  3               
00306A  3               bchar3:
00306A  3  E6 rr        	inc dispy
00306C  3  20 A7 30     	jsr nexlin 		; next line check.
00306F  3               bchar2:
00306F  3  4C 88 2B     	jmp dscor2		; tidy up line and column variables.
003072  3               
003072  3               
003072  3               ;-------------------------------------------------
003072  3               ; Display a character.
003072  3               ;
003072  3               ; Input:
003072  3               ;  A = character
003072  3               ;-------------------------------------------------
003072  3               
003072  3               achar:
003072  3  85 63        	sta z80_b 		; copy to b.
003074  3  20 B5 30     	jsr preprt 		; get ready to print.
003077  3  A5 63        	lda z80_b		; character in accumulator.
003079  3  A6 rr        	ldx prtmod 		; print mode.
00307B  3  F0 03        	beq :+
00307D  3  4C 5C 30     	jmp bchar 		; no, double-height text.
003080  3               :
003080  3  20 B3 2C     	jsr pchar 		; display character.
003083  3  20 8B 30     	jsr nexpos 		; display position.
003086  3  F0 E2        	beq bchar3		; next line down.
003088  3  4C 6F 30     	jmp bchar2 		; tidy up.
00308B  3               
00308B  3               
00308B  3               ;-------------------------------------------------
00308B  3               ; Get next print column position.
00308B  3               ;-------------------------------------------------
00308B  3               
00308B  3               nexpos:
00308B  3  E6 rr        	inc dispx		; move along one position.
00308D  3  A5 rr        	lda prtmod
00308F  3  F0 13        	beq skip
003091  3  A5 rr        	lda dispx 		; get coordinate.
003093  3  C9 28        	cmp #40
003095  3  D0 0D        	bne skip
003097  3  E6 rr        	inc dispy
003099  3  E6 rr        	inc dispy
00309B  3  A9 01        	lda #1
00309D  3  85 rr        	sta dispx
00309F  3  A9 0D        	lda #$d
0030A1  3  20 5C 30     	jsr bchar
0030A4  3               skip:
0030A4  3  A5 rr        	lda dispx
0030A6  3  60           	rts 			; return with status in zero flag.
0030A7  3               
0030A7  3               ;-------------------------------------------------
0030A7  3               ; Get next print line position.
0030A7  3               ;-------------------------------------------------
0030A7  3               
0030A7  3               nexlin:
0030A7  3  E6 rr        	inc dispy 		; newline.
0030A9  3  A5 rr        	lda dispy		; vertical position.
0030AB  3  C9 19        	cmp #ScrHeight			; past screen edge?
0030AD  3  B0 01        	bcs :+
0030AF  3  60           	rts			; no, still okay.
0030B0  3               :
0030B0  3  A9 00        	lda #0			; restart at top.
0030B2  3  85 rr        	sta dispy
0030B4  3  60           	rts
0030B5  3               
0030B5  3               ;--------------------------------------------------------
0030B5  3               ; Pre-print preliminaries.
0030B5  3               ;--------------------------------------------------------
0030B5  3               
0030B5  3               preprt:
0030B5  3               ;	lda #<(FONT-256)		; font pointer.
0030B5  3               ;	sta grbase		; set up graphics base.
0030B5  3               ;	lda #>(FONT-256)
0030B5  3               ;	sta grbase+1
0030B5  3               prescr:
0030B5  3  A5 rr        	lda charx 		; display coordinates.
0030B7  3  85 rr        	sta dispx		; set up general coordinates.
0030B9  3  A5 rr        	lda chary
0030BB  3  85 rr        	sta dispy
0030BD  3  60           	rts
0030BE  3               
0030BE  3               ;--------------------------------------------------------------
0030BE  3               ; Get messagenr x in hl
0030BE  3               ;
0030BE  3               ; Input:
0030BE  3               ;  HL = pointer to message list
0030BE  3               ;  X  = message number.
0030BE  3               ;--------------------------------------------------------------
0030BE  3               
0030BE  3               getwrd:
0030BE  3  E0 00        	cpx #0
0030C0  3  D0 01        	bne:+ 			; first word in list?
0030C2  3  60           	rts 			; yep, don't search.
0030C3  3               :
0030C3  3  A0 00        	ldy #0
0030C5  3               getwd0:
0030C5  3  B1 66        	lda (z80_hl),y
0030C7  3  48           	pha
0030C8  3  E6 66        	inc z80_l
0030CA  3  D0 02        	bne :+
0030CC  3  E6 67        	inc z80_h
0030CE  3               :
0030CE  3  68           	pla
0030CF  3  C9 80        	cmp #128		; found end?
0030D1  3  30 F2        	bmi getwd0		; no, carry on.
0030D3  3  CA           	dex			; until we have right number.
0030D4  3  D0 EF        	bne getwd0
0030D6  3  60           	rts
0030D7  3               
0030D7  3               ;-----------------------------------------------------------
0030D7  3               ; Bubble sort.
0030D7  3               ;-----------------------------------------------------------
0030D7  3               
0030D7  3               bsort:
0030D7  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0030D9  3  85 rr        	sta qscnt
0030DB  3               
0030DB  3  A9 26        	lda #<sprtab 		; sprite table.
0030DD  3  85 68        	sta z80_x
0030DF  3  A9 38        	lda #>sprtab
0030E1  3  85 69        	sta z80_i
0030E3  3               bsort0:
0030E3  3  A0 00        	ldy #0
0030E5  3  B1 68        	lda (z80_ix),y 		; first sprite type.
0030E7  3  C9 FF        	cmp #255 		; is it switched off?
0030E9  3  F0 30        	beq swemp		; yes, may need to switch another in here.
0030EB  3               
0030EB  3  A0 11        	ldy #TABSIZ
0030ED  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
0030EF  3  C9 FF        	cmp #255 		; is it enabled?
0030F1  3  F0 0A        	beq bsort2 		; no, nothing to swap.
0030F3  3               
0030F3  3  A0 14        	ldy #TABSIZ+3
0030F5  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0030F7  3  A0 03        	ldy #3
0030F9  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
0030FB  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0030FD  3               bsort2:
0030FD  3  18           	clc
0030FE  3  A5 68        	lda z80_x
003100  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003102  3  85 68        	sta z80_x
003104  3  90 02        	bcc :+
003106  3  E6 69        	inc z80_i
003108  3               :
003108  3  C6 rr        	dec qscnt
00310A  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
00310C  3  60           	rts
00310D  3               
00310D  3               ;qscnt:	.byte 0
00310D  3               
00310D  3               bsort1:
00310D  3  A0 11        	ldy #TABSIZ
00310F  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
003111  3  C9 FF        	cmp #255		; is it enabled?
003113  3  F0 E8        	beq bsort2		; no, nothing to swap.
003115  3  20 29 31     	jsr swspr		; swap positions.
003118  3  4C FD 30     	jmp bsort2
00311B  3               swemp:
00311B  3  A0 11        	ldy #TABSIZ
00311D  3  B1 68        	lda (z80_ix),y		; next table entry.
00311F  3  C9 FF        	cmp #255		; is that one on?
003121  3  F0 DA        	beq bsort2		; no, nothing to swap.
003123  3  20 29 31     	jsr swspr		; swap positions.
003126  3  4C FD 30     	jmp bsort2
003129  3               
003129  3               ; Swap sprites.
003129  3               
003129  3               swspr:
003129  3  A5 68        	lda z80_x		; table address
00312B  3  85 64        	sta z80_e		; copy to de pair.
00312D  3  85 66        	sta z80_l		; copy to hl pair.
00312F  3  A5 69        	lda z80_i
003131  3  85 67        	sta z80_h
003133  3  85 65        	sta z80_d
003135  3               
003135  3  18           	clc
003136  3  A5 66        	lda z80_l
003138  3  69 11        	adc #TABSIZ		; distance to second entry.
00313A  3  85 66        	sta z80_l
00313C  3  90 02        	bcc :+
00313E  3  E6 67        	inc z80_h
003140  3               :
003140  3  A9 11        	lda #TABSIZ		; bytes to swap.
003142  3  85 63        	sta z80_b
003144  3  A0 00        	ldy #0
003146  3               swspr0:
003146  3  B1 66        	lda (z80_hl),y		; fetch second byte.
003148  3  48           	pha
003149  3  B1 64        	lda (z80_de),y 		; fetch first byte.
00314B  3  91 66        	sta (z80_hl),y 		; copy to second.
00314D  3  68           	pla
00314E  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
003150  3               
003150  3  E6 64        	inc z80_e 		; next byte.
003152  3  D0 02        	bne :+
003154  3  E6 65        	inc z80_d
003156  3               :
003156  3  E6 66        	inc z80_l 		; next byte.
003158  3  D0 02        	bne :+
00315A  3  E6 67        	inc z80_h
00315C  3               :
00315C  3  C6 63        	dec z80_b
00315E  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
003160  3  60           	rts
003161  3               
003161  3               ;----------------------------------------------------
003161  3               ; Process sprites.
003161  3               ;----------------------------------------------------
003161  3               
003161  3               pspr:
003161  3  A9 0C        	lda #NUMSPR		; sprites to process.
003163  3  85 rr        	sta sprptr
003165  3               
003165  3  A9 26        	lda #<sprtab 		; sprite table.
003167  3  85 68        	sta z80_x
003169  3  A9 38        	lda #>sprtab
00316B  3  85 69        	sta z80_i
00316D  3               pspr1:
00316D  3  A0 00        	ldy #0
00316F  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
003171  3  C9 09        	cmp #9 			; within range of sprite types?
003173  3  B0 03        	bcs :+
003175  3  20 88 31     	jsr pspr2 		; yes, process this one.
003178  3               :
003178  3  18           	clc
003179  3  A5 68        	lda z80_x
00317B  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00317D  3  85 68        	sta z80_x
00317F  3  90 02        	bcc :+
003181  3  E6 69        	inc z80_i		; next sprite.
003183  3               :
003183  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
003185  3  D0 E6        	bne pspr1
003187  3  60           	rts
003188  3               
003188  3               ;sprptr:	.byte 0
003188  3               
003188  3               pspr2:
003188  3  A5 68        	lda z80_x 		; store original sprite pointer.
00318A  3  85 rr        	sta ogptr
00318C  3  A5 69        	lda z80_i
00318E  3  85 rr        	sta ogptr+1
003190  3  20 9C 31     	jsr pspr3		; do the routine.
003193  3               rtorg:
003193  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
003195  3  85 68        	sta z80_x
003197  3  A5 rr        	lda ogptr+1
003199  3  85 69        	sta z80_i
00319B  3               rtorg0:
00319B  3  60           	rts
00319C  3               
00319C  3               pspr3:
00319C  3  A9 D1        	lda #<evtyp0		; sprite type events list.
00319E  3  85 66        	sta z80_l
0031A0  3  A9 31        	lda #>evtyp0
0031A2  3  85 67        	sta z80_h
0031A4  3               pspr4:
0031A4  3  B1 68        	lda (z80_ix),y
0031A6  3  0A           	asl a			; double accumulator.
0031A7  3  18           	clc
0031A8  3  65 66        	adc z80_l
0031AA  3  85 66        	sta z80_l
0031AC  3  90 02        	bcc :+
0031AE  3  E6 67        	inc z80_h
0031B0  3               :
0031B0  3  B1 66        	lda (z80_hl),y
0031B2  3  85 64        	sta z80_e 		; copy to de.
0031B4  3  48           	pha
0031B5  3               
0031B5  3  E6 66        	inc z80_l 		; next byte of address.
0031B7  3  D0 02        	bne :+
0031B9  3  E6 67        	inc z80_h
0031BB  3               :
0031BB  3  B1 66        	lda (z80_hl),y 		; address high.
0031BD  3  85 65        	sta z80_d
0031BF  3               
0031BF  3  48           	pha	 		; swap address into hl.
0031C0  3  A5 67        	lda z80_h
0031C2  3  85 65        	sta z80_d
0031C4  3  68           	pla
0031C5  3  85 67        	sta z80_h
0031C7  3  68           	pla
0031C8  3  85 66        	sta z80_l
0031CA  3  A5 66        	lda z80_l
0031CC  3  85 64        	sta z80_e
0031CE  3               
0031CE  3  6C 66 00     	jmp (z80_hl) 		; go there.
0031D1  3               
0031D1  3               ;ogptr:	.word 0			; original sprite pointer.
0031D1  3               
0031D1  3               ; Address of each sprite type's routine.
0031D1  3               
0031D1  3  21 39        evtyp0:	.word evnt00
0031D3  3  F0 39        evtyp1:	.word evnt01
0031D5  3  1C 3A        evtyp2:	.word evnt02
0031D7  3  1D 3A        evtyp3:	.word evnt03
0031D9  3  1E 3A        evtyp4:	.word evnt04
0031DB  3  1F 3A        evtyp5:	.word evnt05
0031DD  3  20 3A        evtyp6:	.word evnt06
0031DF  3  21 3A        evtyp7:	.word evnt07
0031E1  3  22 3A        evtyp8:	.word evnt08
0031E3  3               
0031E3  3               ;--------------------------------------------------------------
0031E3  3               ; Display sprites.
0031E3  3               ;
0031E3  3               ; Input:
0031E3  3               ;  IX = sprite table
0031E3  3               ;--------------------------------------------------------------
0031E3  3               
0031E3  3               dspr:
0031E3  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0031E5  3  85 rr        	sta sprcnt
0031E7  3               dspr0:
0031E7  3  A0 00        	ldy #0
0031E9  3  B1 68        	lda (z80_ix),y 		; get sprite type.
0031EB  3  C9 FF        	cmp #255 		; is it enabled?
0031ED  3  D0 42        	bne dspr1 		; yes, it needs deleting.
0031EF  3               dspr5:
0031EF  3  A0 05        	ldy #5
0031F1  3  B1 68        	lda (z80_ix),y 		; new type.
0031F3  3  C9 FF        	cmp #255		; is it enabled?
0031F5  3  D0 76        	bne dspr3 		; yes, it needs drawing.
0031F7  3               dspr2:
0031F7  3  A0 05        	ldy #5
0031F9  3  B1 68        	lda (z80_ix),y 		; copy new type.
0031FB  3  A0 00        	ldy #0
0031FD  3  91 68        	sta (z80_ix),y
0031FF  3  A0 06        	ldy #6
003201  3  B1 68        	lda (z80_ix),y 		; copy new image number.
003203  3  A0 01        	ldy #1
003205  3  91 68        	sta (z80_ix),y
003207  3  A0 07        	ldy #7
003209  3  B1 68        	lda (z80_ix),y 		; copy new frame.
00320B  3  A0 02        	ldy #2
00320D  3  91 68        	sta (z80_ix),y
00320F  3  A0 08        	ldy #8
003211  3  B1 68        	lda (z80_ix),y 		; copy new y.
003213  3  A0 03        	ldy #3
003215  3  91 68        	sta (z80_ix),y
003217  3  A0 09        	ldy #9
003219  3  B1 68        	lda (z80_ix),y 		; copy new x.
00321B  3  A0 04        	ldy #4
00321D  3  91 68        	sta (z80_ix),y
00321F  3               
00321F  3  18           	clc
003220  3  A5 68        	lda z80_x
003222  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
003224  3  85 68        	sta z80_x
003226  3  A5 69        	lda z80_i
003228  3  69 00        	adc #0
00322A  3  85 69        	sta z80_i 		; next sprite.
00322C  3  C6 rr        	dec sprcnt
00322E  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
003230  3  60           	rts
003231  3               dspr1:
003231  3  A0 05        	ldy #5
003233  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
003235  3  C9 FF        	cmp #255		; is this enabled?
003237  3  D0 06        	bne dspr4 		; yes, display both.
003239  3               dspr6:
003239  3  20 3F 43     	jsr sspria 		; show single sprite.
00323C  3  4C F7 31     	jmp dspr2
00323F  3               
00323F  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00323F  3               
00323F  3               dspr4:
00323F  3  A0 04        	ldy #4
003241  3  B1 68        	lda (z80_ix),y		; old x.
003243  3  A0 09        	ldy #9
003245  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
003247  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
003249  3               
003249  3  A0 03        	ldy #3
00324B  3  B1 68        	lda (z80_ix),y		; old y.
00324D  3  A0 08        	ldy #8
00324F  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003251  3  D0 14        	bne dspr7		; they differ, need to redraw.
003253  3               
003253  3  A0 02        	ldy #2
003255  3  B1 68        	lda (z80_ix),y 		; old frame.
003257  3  A0 07        	ldy #7
003259  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00325B  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
00325D  3               
00325D  3  A0 01        	ldy #1
00325F  3  B1 68        	lda (z80_ix),y 		; old image.
003261  3  A0 06        	ldy #6
003263  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003265  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
003267  3               dspr7:
003267  3  20 60 43     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00326A  3  4C F7 31     	jmp dspr2
00326D  3               dspr3:
00326D  3  20 5A 43     	jsr ssprib 		; show single sprite.
003270  3  4C F7 31     	jmp dspr2
003273  3               
003273  3               ;sprcnt:	.byte 0
003273  3               
003273  3               ;-----------------------------------------
003273  3               ; Get sprite address calculations.
003273  3               ; gspran = new sprite, gsprad = old sprite.
003273  3               ;
003273  3               ; Input:
003273  3               ;  IX = sprite address
003273  3               ;-----------------------------------------
003273  3               
003273  3               gspran:
003273  3  A0 08        	ldy #8
003275  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003277  3  85 rr        	sta dispy
003279  3  A0 09        	ldy #9
00327B  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00327D  3  85 rr        	sta dispx
00327F  3  A0 06        	ldy #6
003281  3  B1 68        	lda (z80_ix),y 		; new sprite image.
003283  3  20 90 35     	jsr gfrm		; fetch start frame for this sprite.
003286  3               
003286  3  A0 00        	ldy #0
003288  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00328A  3  A0 07        	ldy #7
00328C  3  18           	clc
00328D  3  71 68        	adc (z80_ix),y 		; new add frame number.
00328F  3  4C AE 32     	jmp gspra0
003292  3               
003292  3               ;-----------------------------------------
003292  3               ; Calculate old sprite address
003292  3               ;
003292  3               ; Input:
003292  3               ;  IX = sprite address
003292  3               ;
003292  3               ; Output:
003292  3               ;  B  = right byte mask
003292  3               ;  C  = left byte mask
003292  3               ;  DE = spriteframe address
003292  3               ;  scraddr = screenaddress(dispx,dispy)
003292  3               ;-----------------------------------------
003292  3               
003292  3               gsprad:
003292  3  A0 03        	ldy #3
003294  3  B1 68        	lda (z80_ix),y		; y coordinate.
003296  3  85 rr        	sta dispy
003298  3  A0 04        	ldy #4
00329A  3  B1 68        	lda (z80_ix),y		; x coordinate.
00329C  3  85 rr        	sta dispx
00329E  3  A0 01        	ldy #1
0032A0  3  B1 68        	lda (z80_ix),y 		; sprite image.
0032A2  3  20 90 35     	jsr gfrm 		; fetch start frame for this sprite.
0032A5  3               
0032A5  3               ; z80_hl = sprite framenr
0032A5  3               
0032A5  3  A0 00        	ldy #0
0032A7  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032A9  3               
0032A9  3               ; z80_ix+2 = current framenr
0032A9  3               
0032A9  3  A0 02        	ldy #2
0032AB  3  18           	clc
0032AC  3  71 68        	adc (z80_ix),y 		; add frame number.
0032AE  3               
0032AE  3               ; A = sprite framenr + current framenr
0032AE  3               ;
0032AE  3               ; framestart = z80_d/e = 120 * A (Normal 4 x 32 = 128)
0032AE  3               ; framestart = framestart + (x AND 1) * 60
0032AE  3               ; framestart = framestart + (reftable(dispy) * 20)
0032AE  3               
0032AE  3               gspra0:
0032AE  3               
0032AE  3               ; Calculate framestart = 120 * sprite image
0032AE  3               
0032AE  3  85 65        	sta z80_d
0032B0  3  85 rr        	sta tmp
0032B2  3  A9 00        	lda #0
0032B4  3  85 64        	sta z80_e
0032B6  3  85 rr        	sta tmp+1
0032B8  3               
0032B8  3  46 65        	lsr z80_d	; a * 128
0032BA  3  66 64        	ror z80_e
0032BC  3               
0032BC  3  06 rr        	asl tmp		; a x 8
0032BE  3  26 rr        	rol tmp+1
0032C0  3  06 rr        	asl tmp
0032C2  3  26 rr        	rol tmp+1
0032C4  3  06 rr        	asl tmp
0032C6  3  26 rr        	rol tmp+1
0032C8  3               
0032C8  3  38           	sec		; a*128 - a*8
0032C9  3  A5 64        	lda z80_e
0032CB  3  E5 rr        	sbc tmp
0032CD  3  85 64        	sta z80_e
0032CF  3  A5 65        	lda z80_d
0032D1  3  E5 rr        	sbc tmp+1
0032D3  3  85 65        	sta z80_d
0032D5  3               
0032D5  3               ;.if bflag
0032D5  3               ;	lsr tmp1
0032D5  3               ;	ror tmp2
0032D5  3               ;	clc
0032D5  3               ;	lda tmp2
0032D5  3               ;	adc z80_e
0032D5  3               ;	sta z80_e
0032D5  3               ;	lda tmp1
0032D5  3               ;	adc z80_d
0032D5  3               ;	sta z80_d
0032D5  3               ;.endif
0032D5  3               
0032D5  3               ; Add spritedata address
0032D5  3               
0032D5  3  18           	clc 			; address of play sprites.
0032D6  3  A5 64        	lda z80_e
0032D8  3  69 02        	adc #<sprgfx
0032DA  3  85 64        	sta z80_e
0032DC  3  A5 65        	lda z80_d
0032DE  3  69 3B        	adc #>sprgfx
0032E0  3  85 65        	sta z80_d
0032E2  3               
0032E2  3               ; Check for x-shift
0032E2  3               
0032E2  3  A5 rr        	lda dispx 		; x coordinate.
0032E4  3  29 01        	and #1
0032E6  3  F0 0B        	beq chk_y_shift
0032E8  3  18           	clc			; Point to odd frame
0032E9  3  A5 64        	lda z80_e
0032EB  3  69 3C        	adc #60
0032ED  3  85 64        	sta z80_e
0032EF  3  90 02        	bcc :+
0032F1  3  E6 65        	inc z80_d
0032F3  3               :
0032F3  3               ; SCheck for y-shift
0032F3  3               
0032F3  3               chk_y_shift:
0032F3  3  A6 rr        	ldx dispy
0032F5  3  BD 4A DF     	lda V_SPR_PTR,x
0032F8  3  18           	clc
0032F9  3  65 64        	adc z80_e
0032FB  3  85 64        	sta z80_e
0032FD  3  90 02        	bcc :+
0032FF  3  E6 65        	inc z80_d
003301  3               :
003301  3               
003301  3               ;------------------------------------------------------------------
003301  3               ; Drop into screen address routine.
003301  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003301  3               ;------------------------------------------------------------------
003301  3               
003301  3               ; Check for bottom of screen
003301  3               
003301  3               scadd:
003301  3  A6 rr        	ldx dispy
003303  3  E0 4C        	cpx #76
003305  3  90 02        	bcc :+
003307  3  A2 4C        	ldx #76
003309  3               :
003309  3               
003309  3  A5 rr        	lda dispx
00330B  3  4A           	lsr a
00330C  3  18           	clc
00330D  3  7D 00 DC     	adc SCADTB_lb,x
003310  3  85 rr        	sta scraddr
003312  3  BD 00 DD     	lda SCADTB_hb,x
003315  3  69 00        	adc #0
003317  3  85 rr        	sta scraddr+1
003319  3  60           	rts
00331A  3               
00331A  3               spmask:
00331A  3  FF 00        	.byte $ff,$00
00331C  3  6A 35        	.byte $6a,$35
00331E  3               
00331E  3  00           tmp1:	.byte 0
00331F  3  00           tmp2:	.byte 0
003320  3               
003320  3               
003320  3               ;----------------------------------------------------------------------
003320  3               ; Line drawn, now work out next target address.
003320  3               ;----------------------------------------------------------------------
003320  3               
003320  3               nline:
003320  3  18           	clc
003321  3  A5 rr        	lda scraddr 		; get low byte of address.
003323  3  69 28        	adc #ScrWidth
003325  3  85 rr        	sta scraddr 		; new low byte of address.
003327  3  90 02        	bcc :+
003329  3  E6 rr        	inc scraddr+1 		; new high byte of address.
00332B  3               :
00332B  3  60           	rts
00332C  3               
00332C  3               ;-----------------------------------------------------------
00332C  3               ; Animates a sprite.
00332C  3               ;
00332C  3               ; Input:
00332C  3               ;  IX = sprite address
00332C  3               ;  HL = last sprite address
00332C  3               ;-----------------------------------------------------------
00332C  3               
00332C  3               animsp:
00332C  3  25 rr        	and frmno
00332E  3  F0 01        	beq :+
003330  3  60           	rts
003331  3               :
003331  3  A0 06        	ldy #6
003333  3  B1 68        	lda (z80_ix),y		; sprite image
003335  3  20 90 35     	jsr gfrm		; get frame data.
003338  3               
003338  3  E6 66        	inc z80_l		; point to frames.
00333A  3  D0 02        	bne :+
00333C  3  E6 67        	inc z80_h
00333E  3               :
00333E  3  A0 07        	ldy #7
003340  3  B1 68        	lda (z80_ix),y		; sprite frame.
003342  3  18           	clc
003343  3  69 01        	adc #1			; next one along.
003345  3  A0 00        	ldy #0
003347  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
003349  3  90 02        	bcc anims0		; no, not yet.
00334B  3  A9 00        	lda #0			; start at first frame.
00334D  3               anims0:
00334D  3  A0 07        	ldy #7
00334F  3  91 68        	sta (z80_ix),y		; new frame.
003351  3  60           	rts
003352  3               
003352  3               ;--------------------------------------------------------------
003352  3               ; Animate back
003352  3               ;
003352  3               ; Input:
003352  3               ;  IX = sprite address
003352  3               ;  HL = last sprite address
003352  3               ;--------------------------------------------------------------
003352  3               
003352  3               animbk:
003352  3  25 rr        	and frmno
003354  3  F0 01        	beq :+
003356  3  60           	rts
003357  3               :
003357  3  A0 06        	ldy #6
003359  3  B1 68        	lda (z80_ix),y		; sprite image.
00335B  3  20 90 35     	jsr gfrm		; get frame data.
00335E  3               
00335E  3  E6 66        	inc z80_l 		; point to frames.
003360  3  D0 02        	bne :+
003362  3  E6 67        	inc z80_h
003364  3               :
003364  3  A0 07        	ldy #7
003366  3  B1 68        	lda (z80_ix),y 		; sprite frame.
003368  3  F0 03        	beq :+
00336A  3  4C 71 33     	jmp rtanb0 		; yes, start at end.
00336D  3               :
00336D  3  A0 00        	ldy #0
00336F  3  B1 66        	lda (z80_hl),y 		; last sprite.
003371  3               rtanb0:
003371  3  38           	sec
003372  3  E9 01        	sbc #1			; next one along.
003374  3  4C 4D 33     	jmp anims0		; set new frame.
003377  3               
003377  3               ;--------------------------------------------------------------
003377  3               ; Check for collision with other sprite, strict enforcement.
003377  3               ;
003377  3               ; Input:
003377  3               ;  b		= sprite to test for
003377  3               ;  ix		= current sprite pointer
003377  3               ;
003377  3               ; global:	b
003377  3               ; local:	x,y,hl,de,skptr
003377  3               ; calls:	-
003377  3               ;--------------------------------------------------------------
003377  3               
003377  3               sktyp:
003377  3  A9 26        	lda #<sprtab				; sprite table.
003379  3  85 66        	sta z80_l
00337B  3  A9 38        	lda #>sprtab
00337D  3  85 67        	sta z80_h
00337F  3               numsp2:
00337F  3  A9 0C        	lda #NUMSPR				; number of sprites.
003381  3  85 rr        	sta sktptr
003383  3               sktyp0:
003383  3  A5 66        	lda z80_l 				; store pointer to sprite.
003385  3  85 rr        	sta skptr
003387  3  A5 67        	lda z80_h
003389  3  85 rr        	sta skptr+1
00338B  3               
00338B  3  A0 00        	ldy #0
00338D  3  B1 66        	lda (z80_hl),y 				; get sprite type.
00338F  3  C5 63        	cmp z80_b				; is it the type we seek?
003391  3  F0 1D        	beq coltyp				; yes, we can use this one.
003393  3               sktyp1:
003393  3  18           	clc
003394  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003396  3  69 11        	adc #TABSIZ				; size of each entry.
003398  3  85 66        	sta z80_l
00339A  3  A5 rr        	lda skptr+1
00339C  3  69 00        	adc #0
00339E  3  85 67        	sta z80_h
0033A0  3  C6 rr        	dec sktptr				; one less iteration.
0033A2  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0033A4  3  A9 00        	lda #0					; default to ROM address - no sprite.
0033A6  3  85 66        	sta z80_l
0033A8  3  85 67        	sta z80_h
0033AA  3  85 rr        	sta skptr				; store pointer to sprite.
0033AC  3  85 rr        	sta skptr+1
0033AE  3               
0033AE  3  18           	clc					; don't return with zero flag set.
0033AF  3  60           	rts 					; didn't find one.
0033B0  3               
0033B0  3               coltyp:
0033B0  3  A0 00        	ldy #0
0033B2  3  B1 68        	lda (z80_ix),y				; current sprite type.
0033B4  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0033B6  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0033B8  3               colty0:
0033B8  3  A0 09        	ldy #9					; distance to x position in table.
0033BA  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0033BC  3  85 64        	sta z80_e
0033BE  3  88           	dey
0033BF  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0033C1  3  85 65        	sta z80_d
0033C3  3               
0033C3  3               ; Drop into collision detection.
0033C3  3               
0033C3  3               colc16:
0033C3  3  A0 09        	ldy #9
0033C5  3  B1 68        	lda (z80_ix),y			 	; x coord.
0033C7  3  38           	sec					; subtract x.
0033C8  3  E5 64        	sbc z80_e
0033CA  3  B0 05        	bcs  colc1a 				; result is positive.
0033CC  3  49 FF        	eor #$ff				; make negative positive.
0033CE  3  18           	clc
0033CF  3  69 01        	adc #1
0033D1  3               colc1a:
0033D1  3  C9 08        	cmp #SPR_WID				; within x range?
0033D3  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0033D5  3  85 62        	sta z80_c				; store difference.
0033D7  3               
0033D7  3  A0 08        	ldy #8
0033D9  3  B1 68        	lda (z80_ix),y				; y coord.
0033DB  3  38           	sec
0033DC  3  E5 65        	sbc z80_d				; subtract y.
0033DE  3  B0 05        	bcs colc1b				; result is positive.
0033E0  3  49 FF        	eor #$ff				; make negative positive.
0033E2  3  18           	clc
0033E3  3  69 01        	adc #1
0033E5  3               colc1b:
0033E5  3  C9 09        	cmp #SPR_HGT				; within y range?
0033E7  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0033E9  3  18           	clc					; add x difference.
0033EA  3  65 62        	adc z80_c
0033EC  3  C9 0D        	cmp #SPR_HGT+SPR_WID-4			; only 4 corner pixels touching?
0033EE  3  B0 02        	bcs :+
0033F0  3  38           	sec
0033F1  3  60           	rts 					; carry set if there's a collision.
0033F2  3               :
0033F2  3  4C 93 33     	jmp sktyp1				; try next sprite in table.
0033F5  3               colty1:
0033F5  3  A5 68        	lda z80_x  				; compare the two.
0033F7  3  C5 66        	cmp z80_l
0033F9  3  D0 09        	bne end_col
0033FB  3  A5 69        	lda z80_i
0033FD  3  C5 67        	cmp z80_h
0033FF  3  D0 03        	bne end_col
003401  3  4C 93 33     	jmp sktyp1 				; addresses are identical.
003404  3               end_col:
003404  3  4C B8 33     	jmp colty0
003407  3               
003407  3               ;-----------------------------------------------------------
003407  3               ; Display number, left aligned
003407  3               ;
003407  3               ; Input:
003407  3               ;  a		= number
003407  3               ;
003407  3               ; global:	-
003407  3               ; local:	a,y,bc,hl,displ0
003407  3               ; calls:	num2ch,dmsg3
003407  3               ;-----------------------------------------------------------
003407  3               
003407  3               disply:
003407  3  85 61        	sta z80_a
003409  3  A9 2F        	lda #<displ0				; display workspace.
00340B  3  85 62        	sta z80_c
00340D  3  A9 34        	lda #>displ0
00340F  3  85 63        	sta z80_b
003411  3  A5 61        	lda z80_a
003413  3  20 E3 29     	jsr num2ch				; convert accumulator to string.
003416  3               displ1:
003416  3  C6 62        	dec z80_c				; back one character.
003418  3  D0 02        	bne :+
00341A  3  C6 63        	dec z80_b
00341C  3               :
00341C  3  A0 00        	ldy #0
00341E  3  B1 62        	lda (z80_bc),y				; fetch digit.
003420  3  09 80        	ora #128				; insert end marker.
003422  3  91 62        	sta (z80_bc),y				; new value.
003424  3               
003424  3  A9 2F        	lda #<displ0				; display space.
003426  3  85 66        	sta z80_l
003428  3  A9 34        	lda #>displ0
00342A  3  85 67        	sta z80_h
00342C  3               
00342C  3  4C B7 2F     	jmp dmsg3				; display the string.
00342F  3               
00342F  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003433  3               
003433  3               ;----------------------------------------------------------------
003433  3               ; Initialise screen.
003433  3               ;
003433  3               ; global:	roomtb,scno
003433  3               ; local:	-
003433  3               ; calls:	tstcs
003433  3               ;----------------------------------------------------------------
003433  3               
003433  3               initsc:
003433  3  AD 03 39     	lda roomtb 			; whereabouts in the map are we?
003436  3  20 40 34     	jsr tstsc 			; find displacement.
003439  3  C9 FF        	cmp #255 			; is it valid?
00343B  3  F0 02        	beq init_end 			; no, it's rubbish.
00343D  3  85 rr        	sta scno			; store new room number.
00343F  3               init_end:
00343F  3  60           	rts
003440  3               
003440  3               ;----------------------------------------------------------------
003440  3               ; Test screen.
003440  3               ;
003440  3               ; global:	-
003440  3               ; local:	x
003440  3               ; calls:	-
003440  3               ;----------------------------------------------------------------
003440  3               
003440  3               tstsc:
003440  3  85 rr        	sta tmproom
003442  3  18           	clc
003443  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
003445  3  AA           	tax 				; add displacement to map data.
003446  3  BD 17 39     	lda mapdat-MAPWID,x 		; find room number there.
003449  3  60           	rts
00344A  3               
00344A  3               ;tmproom:	.byte 0
00344A  3               
00344A  3               ;--------------------------
00344A  3               ; Screen left.
00344A  3               ;--------------------------
00344A  3               
00344A  3               scrl:
00344A  3  AD 03 39     	lda roomtb 			; present room table pointer.
00344D  3  38           	sec
00344E  3  E9 01        	sbc #1				; room left.
003450  3               scrl0:
003450  3  20 40 34     	jsr tstsc			; test screen.
003453  3  C9 FF        	cmp #255			; is there a screen this way?
003455  3  D0 01        	bne :+
003457  3  60           	rts				; no, return to loop.
003458  3               :
003458  3  A5 rr        	lda tmproom			; restore room displacement.
00345A  3  8D 03 39     	sta roomtb			; new room table position.
00345D  3               scrl1:
00345D  3  20 33 34     	jsr initsc 			; set new screen.
003460  3  A9 02        	lda #2
003462  3  85 rr        	sta restfl 			; set it.
003464  3  60           	rts
003465  3               scrr:
003465  3  AD 03 39     	lda roomtb 			; room table pointer.
003468  3  18           	clc
003469  3  69 01        	adc #1				; room right.
00346B  3  4C 50 34     	jmp scrl0
00346E  3               scru:
00346E  3  AD 03 39     	lda roomtb 			; room table pointer.
003471  3  38           	sec
003472  3  E9 03        	sbc #MAPWID 			; room up.
003474  3  4C 50 34     	jmp scrl0
003477  3               scrd:
003477  3  AD 03 39     	lda roomtb 			; room table pointer.
00347A  3  18           	clc
00347B  3  69 03        	adc #MAPWID 			; room down.
00347D  3  4C 50 34     	jmp scrl0
003480  3               
003480  3               ;-----------------------------------------
003480  3               ; Jump to new screen.
003480  3               ;-----------------------------------------
003480  3               
003480  3               nwscr:
003480  3  A2 00        	ldx #0				; start of map data.
003482  3               nwscr0:
003482  3  DD 1A 39     	cmp mapdat,x
003485  3  F0 06        	beq nwscr1			; have we found a match for screen?
003487  3  E8           	inx 				; next room.
003488  3  E0 50        	cpx #80				; zero room count, 80 to search.
00348A  3  D0 F6        	bne nwscr0			; keep looking.
00348C  3  60           	rts
00348D  3               nwscr1:
00348D  3  8E 03 39     	stx roomtb			; set the map position.
003490  3  4C 5D 34     	jmp scrl1			; draw new room.
003493  3               
003493  3               
003493  3               ;----------------------------------------------------------
003493  3               ; Gravity processing.
003493  3               ;----------------------------------------------------------
003493  3               
003493  3               grav:
003493  3  A0 0D        	ldy #13
003495  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003497  3  85 66        	sta z80_l
003499  3  A0 0E        	ldy #14
00349B  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00349D  3  85 67        	sta z80_h
00349F  3  05 66        	ora z80_l			; merge in low byte.
0034A1  3  D0 01        	bne :+
0034A3  3  60           	rts				; if neither is set, we're not in the air.
0034A4  3               :
0034A4  3  A0 00        	ldy #0
0034A6  3  B1 66        	lda (z80_hl),y			; pixels to move.
0034A8  3  85 61        	sta z80_a
0034AA  3  C9 63        	cmp #99				; reached the end?
0034AC  3  D0 0C        	bne grav0			; no, continue.
0034AE  3               grav2:
0034AE  3  C6 66        	dec z80_l			; go back to previous value.
0034B0  3  C9 FF        	cmp #$ff
0034B2  3  D0 02        	bne :+
0034B4  3  C6 67        	dec z80_h
0034B6  3               :
0034B6  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0034B8  3  85 61        	sta z80_a
0034BA  3               grav0:
0034BA  3  E6 66        	inc z80_l			; point to next table entry.
0034BC  3  D0 02        	bne :+
0034BE  3  E6 67        	inc z80_h
0034C0  3               :
0034C0  3  A5 66        	lda z80_l
0034C2  3  A0 0D        	ldy #13
0034C4  3  91 68        	sta (z80_ix),y			; store new pointer low.
0034C6  3  A5 67        	lda z80_h
0034C8  3  A0 0E        	ldy #14
0034CA  3  91 68        	sta (z80_ix),y			; store new pointer high.
0034CC  3               grav1:
0034CC  3  A5 61        	lda z80_a
0034CE  3  D0 01        	bne :+				; any movement required?
0034D0  3  60           	rts				; no, not this time.
0034D1  3               :
0034D1  3  A5 61        	lda z80_a
0034D3  3  C9 80        	cmp #128			; is it up or down?
0034D5  3  B0 15        	bcs gravu			; it's up.
0034D7  3               gravd:
0034D7  3  85 63        	sta z80_b			; set pixels to move.
0034D9  3               gravd0:
0034D9  3  20 F2 2D     	jsr cangd			; can we go down?
0034DC  3  D0 28        	bne gravst			; can't move down, so stop.
0034DE  3  A0 08        	ldy #8
0034E0  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
0034E2  3  18           	clc
0034E3  3  69 01        	adc #1
0034E5  3  91 68        	sta (z80_ix),y
0034E7  3  C6 63        	dec z80_b
0034E9  3  D0 EE        	bne gravd0
0034EB  3  60           	rts
0034EC  3               gravu:
0034EC  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0034EE  3  18           	clc
0034EF  3  69 01        	adc #1
0034F1  3  85 63        	sta z80_b			; set pixels to move.
0034F3  3               gravu0:
0034F3  3  20 A5 2D     	jsr cangu			; can we go up?
0034F6  3  D0 6E        	bne ifalls			; can't move up, go down next.
0034F8  3  A0 08        	ldy #8
0034FA  3  B1 68        	lda (z80_ix),y
0034FC  3  38           	sec
0034FD  3  E9 01        	sbc #1
0034FF  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003501  3  C6 63        	dec z80_b
003503  3  D0 EE        	bne gravu0
003505  3  60           	rts
003506  3               gravst:
003506  3  A0 0D        	ldy #13
003508  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00350A  3  85 66        	sta z80_l
00350C  3  A0 0E        	ldy #14
00350E  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003510  3  85 67        	sta z80_h
003512  3               
003512  3  A9 00        	lda #0				; null value in pointer.
003514  3  A0 0D        	ldy #13
003516  3  91 68        	sta (z80_ix),y			; store new pointer low.
003518  3  C8           	iny
003519  3  91 68        	sta (z80_ix),y			; store new pointer high.
00351B  3               
00351B  3  A0 00        	ldy #0
00351D  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00351F  3  C9 63        	cmp #99				; is it the end marker?
003521  3               evftf:
003521  3  F0 01        	beq :+				; yes, fallen too far.
003523  3  60           	rts
003524  3               :
003524  3  4C C7 3A     	jmp evnt15			; EVENT FELLTOOFAR
003527  3               
003527  3               ;------------------------------------------------
003527  3               ; Initiate fall check.
003527  3               ;------------------------------------------------
003527  3               
003527  3               ifall:
003527  3  A0 0D        	ldy #13
003529  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
00352B  3  85 66        	sta z80_l
00352D  3  A0 0E        	ldy #14
00352F  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
003531  3  85 67        	sta z80_h			; high byte in accumulator.
003533  3  05 66        	ora z80_l			; merge in low byte.
003535  3  F0 01        	beq :+
003537  3  60           	rts				; if either is set, we're already in the air.
003538  3               :
003538  3  A0 09        	ldy #9
00353A  3  B1 68        	lda (z80_ix),y			; y coordinate.
00353C  3  85 rr        	sta dispx
00353E  3  A0 08        	ldy #8
003540  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003542  3  18           	clc
003543  3               numsp7:
003543  3  69 09        	adc #SPR_HGT			; add 16 pixels.
003545  3  85 rr        	sta dispy			; set up test coordinates.
003547  3  20 29 2F     	jsr tstbl			; get map address.
00354A  3  20 9D 2E     	jsr plchk			; block, platform check.
00354D  3  F0 01        	beq :+
00354F  3  60           	rts				; it's solid, don't fall.
003550  3               :
003550  3  E6 rr        	inc bufaddr			; look right one cell.
003552  3  20 9D 2E     	jsr plchk			; block, platform check.
003555  3  F0 01        	beq :+
003557  3  60           	rts				; it's solid, don't fall.
003558  3               :
003558  3  A5 rr        	lda dispx			; y coordinate.
00355A  3  29 07        	and #7				; position straddling block cells.
00355C  3  F0 08        	beq ifalls			; no more checks needed.
00355E  3  E6 rr        	inc bufaddr			; look to third cell.
003560  3  20 9D 2E     	jsr plchk			; block, platform check.
003563  3  F0 01        	beq :+
003565  3  60           	rts				; it's solid, don't fall.
003566  3               :
003566  3               ifalls:
003566  3  A9 D6        	lda #<jtab			; jump table start.
003568  3  85 66        	sta z80_l
00356A  3  A9 41        	lda #>jtab
00356C  3  85 67        	sta z80_h
00356E  3               ifal0:
00356E  3  E6 66        	inc z80_l			; point to next value.
003570  3  D0 02        	bne :+
003572  3  E6 67        	inc z80_h
003574  3               :
003574  3  A0 00        	ldy #0
003576  3  B1 66        	lda (z80_hl),y			; fetch value.
003578  3  F0 F4        	beq ifal0			; no, get next value.
00357A  3  C9 63        	cmp #99				; reached end of table?
00357C  3  D0 01        	bne :+
00357E  3  60           	rts				; yes, don't fall.
00357F  3               :
00357F  3  C9 80        	cmp #128			; is it going up?
003581  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003583  3               
003583  3  A0 0D        	ldy #13
003585  3  A5 66        	lda z80_l
003587  3  91 68        	sta (z80_ix),y 			; set jump low.
003589  3  A0 0E        	ldy #14
00358B  3  A5 67        	lda z80_h
00358D  3  91 68        	sta (z80_ix),y 			; set jump high.
00358F  3  60           	rts
003590  3               
003590  3               
003590  3               ;----------------------------------------------------
003590  3               ; Get frame data for a particular sprite.
003590  3               ; Input:
003590  3               ;  a		= framenumer
003590  3               ; Output:
003590  3               ;  hl		= frame address
003590  3               ;
003590  3               ; global:	hl,frmptr
003590  3               ; local:	-
003590  3               ; calls:	-
003590  3               ;----------------------------------------------------
003590  3               
003590  3               gfrm:
003590  3  0A           	asl a	 		 	; multiple of 2.
003591  3  18           	clc
003592  3  6D 17 28     	adc frmptr 			; frames used by game.
003595  3  85 66        	sta z80_l
003597  3  AD 18 28     	lda frmptr+1
00359A  3  69 00        	adc #0
00359C  3  85 67        	sta z80_h 			; point to frame start.
00359E  3  60           	rts
00359F  3               
00359F  3               ;----------------------------------------------------
00359F  3               ; Find sprite list for current room.
00359F  3               ;
00359F  3               ; global:	hl
00359F  3               ; local:	x,y
00359F  3               ; calls:	-
00359F  3               ;----------------------------------------------------
00359F  3               
00359F  3               sprlst:
00359F  3  A9 A7        	lda #<nmedat 			; list of enemy sprites.
0035A1  3  85 66        	sta z80_l
0035A3  3  A9 3E        	lda #>nmedat
0035A5  3  85 67        	sta z80_h
0035A7  3  A6 rr        	ldx scno 			; screen number.
0035A9  3  D0 01        	bne sprls2 			; is it the first screen?
0035AB  3  60           	rts 				; yes, don't need to search data.
0035AC  3               sprls2:
0035AC  3  A0 00        	ldy #0
0035AE  3               sprls1:
0035AE  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0035B0  3  C9 FF        	cmp #255			; is it an end marker?
0035B2  3  F0 0E        	beq sprls0 			; yes, end of this room.
0035B4  3               
0035B4  3  18           	clc 				; point to next sprite in list.
0035B5  3  A5 66        	lda z80_l
0035B7  3  69 04        	adc #NMESIZ
0035B9  3  85 66        	sta z80_l
0035BB  3  90 02        	bcc :+
0035BD  3  E6 67        	inc z80_h
0035BF  3               :
0035BF  3  4C AE 35     	jmp sprls1 			; continue until end of room.
0035C2  3               sprls0:
0035C2  3  E6 66        	inc z80_l 			; point to start of next screen.s
0035C4  3  D0 02        	bne :+
0035C6  3  E6 67        	inc z80_h
0035C8  3               :
0035C8  3  CA           	dex
0035C9  3  D0 E3        	bne sprls1 			; continue until room found.
0035CB  3  60           	rts
0035CC  3               
0035CC  3               
0035CC  3               ;----------------------------------------------------
0035CC  3               ; Clear all but a single player sprite.
0035CC  3               ;
0035CC  3               ; global:	-
0035CC  3               ; local:	x,y,ix
0035CC  3               ; calls:	-
0035CC  3               ;----------------------------------------------------
0035CC  3               
0035CC  3               nspr:
0035CC  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0035CE  3  85 rr        	sta sprcnt
0035D0  3  A9 26        	lda #<sprtab 			; sprite table.
0035D2  3  85 68        	sta z80_x
0035D4  3  A9 38        	lda #>sprtab
0035D6  3  85 69        	sta z80_i
0035D8  3               nspr0:
0035D8  3  A0 00        	ldy #0 				; fetch sprite type.
0035DA  3  B1 68        	lda (z80_ix),y 			; is it a player?
0035DC  3  F0 1A        	beq nspr1 			; yes, keep this one.
0035DE  3               
0035DE  3  A9 FF        	lda #255
0035E0  3  A0 00        	ldy #0 				; fetch sprite type.
0035E2  3  91 68        	sta (z80_ix),y 			; delete sprite.
0035E4  3  A0 05        	ldy #5
0035E6  3  91 68        	sta (z80_ix),y 			; remove next type.
0035E8  3               
0035E8  3  18           	clc	 			; next sprite.
0035E9  3  A5 68        	lda z80_x
0035EB  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0035ED  3  85 68        	sta z80_x
0035EF  3  90 02        	bcc :+
0035F1  3  E6 69        	inc z80_i
0035F3  3               :
0035F3  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0035F5  3  D0 E1        	bne nspr0
0035F7  3  60           	rts
0035F8  3               nspr1:
0035F8  3  A9 FF        	lda #255
0035FA  3  A0 00        	ldy #0
0035FC  3  91 68        	sta (z80_ix),y 			; delete sprite.
0035FE  3               
0035FE  3  18           	clc	 			; point to next sprite.
0035FF  3  A5 68        	lda z80_x
003601  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003603  3  85 68        	sta z80_x
003605  3  90 02        	bcc :+
003607  3  E6 69        	inc z80_i
003609  3               :
003609  3  C6 rr        	dec sprcnt	 			; one less to do.
00360B  3  D0 01        	bne nspr2
00360D  3  60           	rts
00360E  3               nspr2:
00360E  3  A9 FF        	lda #255
003610  3  A0 00        	ldy #0
003612  3  91 68        	sta (z80_ix),y 			; delete sprite.
003614  3  A0 05        	ldy #5
003616  3  91 68        	sta (z80_ix),y 			; remove next type.
003618  3               
003618  3  18           	clc	 			; next sprite.
003619  3  A5 68        	lda z80_x
00361B  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00361D  3  85 68        	sta z80_x
00361F  3  90 02        	bcc :+
003621  3  E6 69        	inc z80_i
003623  3               :
003623  3  C6 rr        	dec sprcnt	 			; one less space in table.
003625  3  D0 E7        	bne nspr2
003627  3  60           	rts
003628  3               
003628  3               ;----------------------------------------------------------
003628  3               ; Two initialisation routines.
003628  3               ; Initialise sprites - copy everything from list to table.
003628  3               ;
003628  3               ; global:	-
003628  3               ; local:	x,y,ix
003628  3               ; calls:	cpsp
003628  3               ;----------------------------------------------------------
003628  3               
003628  3               ispr:
003628  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00362A  3  85 rr        	sta sprcnt
00362C  3  A9 26        	lda #<sprtab			; sprite table.
00362E  3  85 68        	sta z80_x
003630  3  A9 38        	lda #>sprtab
003632  3  85 69        	sta z80_i
003634  3               ispr2:
003634  3  A0 00        	ldy #0
003636  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003638  3  C9 FF        	cmp #255 			; is it an end marker?
00363A  3  D0 01        	bne :+
00363C  3  60           	rts 				; yes, no more to do.
00363D  3               :
00363D  3               ispr1:
00363D  3  A0 00        	ldy #0
00363F  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
003641  3  C9 FF        	cmp #255 			; is it enabled yet?
003643  3  D0 08        	bne ispr4			; yes, try another slot.
003645  3               
003645  3  A0 05        	ldy #5
003647  3  B1 68        	lda (z80_ix),y		 	; next type.
003649  3  C9 FF        	cmp #255 			; is it enabled yet?
00364B  3  F0 10        	beq ispr3 			; no, process this one.
00364D  3               ispr4:
00364D  3  18           	clc 				; next sprite.
00364E  3  A5 68        	lda z80_x
003650  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003652  3  85 68        	sta z80_x
003654  3  90 02        	bcc :+
003656  3  E6 69        	inc z80_i
003658  3               :
003658  3  C6 rr        	dec sprcnt
00365A  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00365C  3  60           	rts  				; no more room in table.
00365D  3               ispr3:
00365D  3  20 B0 36     	jsr cpsp			; initialise a sprite.
003660  3  C6 rr        	dec sprcnt			; one less space in the table.
003662  3  D0 D0        	bne ispr2
003664  3  60           	rts
003665  3               
003665  3               
003665  3               ;-----------------------------------------------------------------------
003665  3               ; Initialise sprites - but not player, we're keeping the old one.
003665  3               ;
003665  3               ; global:	-
003665  3               ; local:	x,y,ix
003665  3               ; calls:	cpsp
003665  3               ;-----------------------------------------------------------------------
003665  3               
003665  3               kspr:
003665  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003667  3  A9 26        	lda #<sprtab 			; sprite table.
003669  3  85 68        	sta z80_x
00366B  3  A9 38        	lda #>sprtab
00366D  3  85 69        	sta z80_i
00366F  3               kspr2:
00366F  3  A0 00        	ldy #0
003671  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003673  3  C9 FF        	cmp #255 			; is it an end marker?
003675  3  D0 01        	bne :+
003677  3  60           	rts 				; yes, no more to do.
003678  3               :
003678  3  C9 00        	cmp #0
00367A  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00367C  3               
00367C  3  18           	clc 				; next sprite.
00367D  3  A5 66        	lda z80_l
00367F  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003681  3  85 66        	sta z80_l
003683  3  90 02        	bcc :+
003685  3  E6 67        	inc z80_h
003687  3               :
003687  3  4C 6F 36     	jmp kspr2
00368A  3               kspr1:
00368A  3  A0 00        	ldy #0 				; fetch sprite type.
00368C  3  B1 68        	lda (z80_ix),y
00368E  3  C9 FF        	cmp #255 			; is it enabled yet?
003690  3  D0 08        	bne kspr4 			; yes, try another slot.
003692  3               
003692  3  A0 05        	ldy #5 				; next type.
003694  3  B1 68        	lda (z80_ix),y
003696  3  C9 FF        	cmp #255 			; is it enabled yet?
003698  3  F0 0F        	beq kspr3 			; no, process this one.
00369A  3               kspr4:
00369A  3  18           	clc 				; next sprite.
00369B  3  A5 68        	lda z80_x
00369D  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00369F  3  85 68        	sta z80_x
0036A1  3  90 02        	bcc :+
0036A3  3  E6 69        	inc z80_i
0036A5  3               :
0036A5  3  CA           	dex	 			; repeat for remaining sprites.
0036A6  3  D0 E2        	bne kspr1
0036A8  3  60           	rts  				; no more room in table.
0036A9  3               kspr3:
0036A9  3  20 B0 36     	jsr cpsp 			; copy sprite to table.
0036AC  3  CA           	dex	 			; one less space in the table.
0036AD  3  D0 C0        	bne kspr2
0036AF  3  60           	rts
0036B0  3               
0036B0  3               ;----------------------------------------------
0036B0  3               ; Copy sprite from list to table.
0036B0  3               ;
0036B0  3               ; global:	hl,ix
0036B0  3               ; local:	y
0036B0  3               ; calls:	evnt09
0036B0  3               ;----------------------------------------------
0036B0  3               
0036B0  3               cpsp:
0036B0  3  A0 00        	ldy #0				; fetch byte from table.
0036B2  3  B1 66        	lda (z80_hl),y
0036B4  3  91 68        	sta (z80_ix),y			; set up type.
0036B6  3  A0 05        	ldy #PAM1ST
0036B8  3  91 68        	sta (z80_ix),y 			; set up type.
0036BA  3               
0036BA  3  E6 66        	inc z80_l 			; move to next byte.
0036BC  3  D0 02        	bne :+
0036BE  3  E6 67        	inc z80_h
0036C0  3               :
0036C0  3  A0 00        	ldy #0 				; fetch byte from table.
0036C2  3  B1 66        	lda (z80_hl),y
0036C4  3  A0 06        	ldy #6
0036C6  3  91 68        	sta (z80_ix),y			; set up image.
0036C8  3               
0036C8  3  E6 66        	inc z80_l 			; move to next byte.
0036CA  3  D0 02        	bne :+
0036CC  3  E6 67        	inc z80_h
0036CE  3               :
0036CE  3  A0 00        	ldy #0
0036D0  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
0036D2  3  A0 08        	ldy #8
0036D4  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0036D6  3               
0036D6  3  A9 C8        	lda #200 			; set initial coordinate off screen.
0036D8  3  A0 03        	ldy #3
0036DA  3  91 68        	sta (z80_ix),y
0036DC  3               
0036DC  3  E6 66        	inc z80_l 			; move to next byte.
0036DE  3  D0 02        	bne :+
0036E0  3  E6 67        	inc z80_h
0036E2  3               :
0036E2  3  A0 00        	ldy #0 				; fetch byte from table.
0036E4  3  B1 66        	lda (z80_hl),y
0036E6  3  A0 09        	ldy #9
0036E8  3  91 68        	sta (z80_ix),y 			; set up coordinate.
0036EA  3               
0036EA  3  E6 66        	inc z80_l 			; move to next byte.
0036EC  3  D0 02        	bne :+
0036EE  3  E6 67        	inc z80_h
0036F0  3               :
0036F0  3  A9 00        	lda #0				; zeroes in accumulator.
0036F2  3  A0 07        	ldy #7 				; reset frame number.
0036F4  3  91 68        	sta (z80_ix),y
0036F6  3  A0 0A        	ldy #10 			; reset direction.
0036F8  3  91 68        	sta (z80_ix),y
0036FA  3  A0 0D        	ldy #13				; reset jump pointer low.
0036FC  3  91 68        	sta (z80_ix),y
0036FE  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003700  3  91 68        	sta (z80_ix),y
003702  3               
003702  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003704  3  A0 10        	ldy #16
003706  3  91 68        	sta (z80_ix),y
003708  3               evis0:
003708  3  A5 69        	lda z80_i
00370A  3  48           	pha
00370B  3  A5 68        	lda z80_x
00370D  3  48           	pha
00370E  3  A5 67        	lda z80_h
003710  3  48           	pha
003711  3  A5 66        	lda z80_l
003713  3  48           	pha
003714  3               
003714  3  20 23 3A     	jsr evnt09 			; perform event.
003717  3               
003717  3  68           	pla
003718  3  85 66        	sta z80_l
00371A  3  68           	pla
00371B  3  85 67        	sta z80_h
00371D  3  68           	pla
00371E  3  85 68        	sta z80_x
003720  3  68           	pla
003721  3  85 69        	sta z80_i
003723  3               
003723  3  18           	clc
003724  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
003726  3  69 11        	adc #TABSIZ		 	; next sprite.
003728  3  85 68        	sta z80_x
00372A  3  90 02        	bcc :+
00372C  3  E6 69        	inc z80_i
00372E  3               :
00372E  3  60           	rts
00372F  3               
00372F  3               
00372F  3               ;-------------------------------------
00372F  3               ; Clear the play area window.
00372F  3               ;-------------------------------------
00372F  3               
00372F  3               clw:
00372F  3  AD 1F 28     	lda wintop			; get coordinates of window.
003732  3  85 rr        	sta dispy			; put into dispx for calculation.
003734  3  AD 20 28     	lda winlft
003737  3  85 rr        	sta dispx
003739  3               
003739  3  AD 21 28     	lda winhgt			; height of window.
00373C  3  85 rr        	sta rrow			; copy to b register.
00373E  3               clw3:
00373E  3  AD 22 28     	lda winwid 			; width of window.
003741  3  85 rr        	sta rcol
003743  3               clw2:
003743  3  20 83 2C     	jsr gprad 			; get print address.
003746  3  A9 00        	lda #0				; zero byte to write.
003748  3  A2 07        	ldx #7				; pixel height of each cell.
00374A  3               clw1:
00374A  3  BC BD 2C     	ldy scrtab,x
00374D  3  91 rr        	sta (scraddr),y 			; copy to screen.
00374F  3  CA           	dex				; next screen row down.
003750  3  10 F8        	bpl clw1
003752  3               
003752  3  E6 rr        	inc dispx			; next column.
003754  3  C6 rr        	dec rcol			; one less to do.
003756  3  D0 EB        	bne clw2			; repeat for remaining columns.
003758  3               
003758  3  AD 20 28     	lda winlft			; get left edge.
00375B  3  85 rr        	sta dispx 			; reset x.
00375D  3  E6 rr        	inc dispy 			; next line down.
00375F  3               
00375F  3  C6 rr        	dec rrow
003761  3  D0 DB        	bne clw3			; repeat down the screen.
003763  3               
003763  3  AD 1F 28     	lda wintop			; get coordinates of window.
003766  3  85 rr        	sta chary			; put into display position.
003768  3  AD 20 28     	lda winlft
00376B  3  85 rr        	sta charx
00376D  3  60           	rts
00376E  3               
00376E  3               
00376E  3               ;----------------------------------------------------------
00376E  3               ; Effects code.
00376E  3               ; Ticker routine is called 25 times per second.
00376E  3               ;
00376E  3               ; HL = txtscr = left text screen address
00376E  3               ; DE = txtscr+txtwid-1 = right text screen address
00376E  3               ; BC = txtpos = text scroller position
00376E  3               ;
00376E  3               ;----------------------------------------------------------
00376E  3               
00376E  3               .if sflag
00376E  3               scrly:
00376E  3               	rts
00376E  3               	.word txtscr         	; get left screen address.
00376E  3               	sta scr_l
00376E  3               	lda txtscr+1
00376E  3               	sta scr_l+1
00376E  3               	sta scr_r+1
00376E  3               
00376E  3               	stx xtmp
00376E  3               
00376E  3               	clc         		; get right screen address.
00376E  3               	lda scr_l
00376E  3               	adc txtwid
00376E  3               	sta scr_r
00376E  3               	dec scr_r
00376E  3               scrly1:
00376E  3               	ldy txtwid		; set txtwide
00376E  3               	dey
00376E  3               	clc
00376E  3               scrly0:
00376E  3               	lda (scr_l),y		; scroll 1 line
00376E  3               	rol a
00376E  3               	sta (scr_l),y
00376E  3               	dey
00376E  3               	bpl scrly0
00376E  3               
00376E  3               	clc			; point to next line
00376E  3               	lda scr_l
00376E  3               	adc #32
00376E  3               	sta scr_l
00376E  3               	bcc scrly1		; repeat 8 times
00376E  3               
00376E  3               	lda txtpos 		; get text pointer.
00376E  3               	sta scr_txt
00376E  3               	lda txtpos+1
00376E  3               	sta scr_txt+1
00376E  3               
00376E  3               	ldy #0
00376E  3               	lda (scr_txt),y 		; find character we're displaying.
00376E  3               	and #127 		; remove end marker bit if applicable.
00376E  3               	cmp #13			; is it newline?
00376E  3               	bne scrly5 		; no, it's okay.
00376E  3               	lda #32			; convert to a space instead.
00376E  3               scrly5:
00376E  3               	sta fntaddr		; calculate char address
00376E  3               	lda #0
00376E  3               	sta fntaddr+1
00376E  3               	asl fntaddr  		; multiply char by 8.
00376E  3               	rol fntaddr+1
00376E  3               	asl fntaddr
00376E  3               	rol fntaddr+1
00376E  3               	asl fntaddr
00376E  3               	rol fntaddr+1
00376E  3               	lda fntaddr
00376E  3               	clc
00376E  3               	adc #<(FONT-256)
00376E  3               	sta scrly3+1		; that's the low byte.
00376E  3               	lda fntaddr+1
00376E  3               	adc #>(FONT-256)
00376E  3               	sta scrly3+2		; add displacement.
00376E  3               
00376E  3               	ldx #0
00376E  3               scrly3:
00376E  3               	lda $3333,x		; get image of char line.
00376E  3               	and txtbit
00376E  3               	beq scrly2		; don't plot pixel
00376E  3               	ldy scrline,x
00376E  3               	lda (scr_r),y
00376E  3               	clc
00376E  3               	ora #1
00376E  3               	sta (scr_r),y		; plot pixel
00376E  3               scrly2:
00376E  3               	inx			; next line of char.
00376E  3               	cpx #8
00376E  3               	bne scrly3
00376E  3               
00376E  3               	lsr txtbit		; bit of text to display.
00376E  3               	bcs :+
00376E  3               	rts
00376E  3               :
00376E  3               	ldy #0
00376E  3               	lda (scr_txt),y 	; what was the character?
00376E  3               	asl a	  		; end of message?
00376E  3               	bcs scrly4
00376E  3               	inc txtpos
00376E  3               	bne :+
00376E  3               	inc txtpos+1
00376E  3               :
00376E  3               	jmp scrly6 		; not yet - continue.
00376E  3               scrly4:
00376E  3               	lda txtini 		; start of scrolling message.
00376E  3               	sta txtpos
00376E  3               	lda txtini+1
00376E  3               	sta txtpos+1
00376E  3               scrly6:
00376E  3               	lda #128
00376E  3               	sta txtbit
00376E  3               	ldx xtmp
00376E  3               	rts
00376E  3               
00376E  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
00376E  3               
00376E  3               ;-------------------------------------------------------
00376E  3               ; Entry TICKER command
00376E  3               ;
00376E  3               ; Entry:
00376E  3               ;  z80_b = message nr
00376E  3               ;  z80_c = width
00376E  3               ;-------------------------------------------------------
00376E  3               
00376E  3               iscrly:
00376E  3               	jsr prescr 		; set up display position.
00376E  3               
00376E  3               	lda #<msgdat 		; text messages.
00376E  3               	sta z80_l
00376E  3               	lda #>msgdat
00376E  3               	sta z80_h
00376E  3               
00376E  3               	lda z80_c 		; width.
00376E  3               	sec
00376E  3               	sbc #1			; subtract one.
00376E  3               	cmp #32 		; is it between 1 and 32?
00376E  3               	bcc :+
00376E  3               	lda #$60
00376E  3               	jmp iscrl0		; no, disable messages.
00376E  3               :
00376E  3               	ldx z80_b		; message number.
00376E  3               	jsr getwrd 		; find message start.
00376E  3               
00376E  3               	lda z80_l		; set initial text position.
00376E  3               	sta txtini
00376E  3               	lda z80_h
00376E  3               	sta txtini+1
00376E  3               
00376E  3               	lda #$ad		; code for lda adrr
00376E  3               iscrl0:
00376E  3               	sta scrly		; enable/disable scrolling routine.
00376E  3               
00376E  3               	jsr prescr 		; set up display position.
00376E  3               	jsr gprad 		; get print address.
00376E  3               
00376E  3               	lda scraddr 		; set text screen address.
00376E  3               	sta txtscr
00376E  3               	lda scraddr+1
00376E  3               	sta txtscr+1
00376E  3               
00376E  3               	lda z80_c		; width.
00376E  3               	sta txtwid		; set width in working storage.
00376E  3               
00376E  3               	lda #128 		; start with leftmost bit.
00376E  3               	sta txtbit
00376E  3               
00376E  3               	jmp scrly4
00376E  3               .endif
00376E  3               
00376E  3               ;------------------------------------------------------------------
00376E  3               ; Dig routine, conditional assembly depending on dflag
00376E  3               ;------------------------------------------------------------------
00376E  3               .if dflag
00376E  3               dig:
00376E  3  29 03        	and #3
003770  3  F0 3B        	beq digr		; dig right
003772  3  C9 01        	cmp #1
003774  3  F0 26        	beq digl		; dig left
003776  3  C9 02        	cmp #2
003778  3  F0 11        	beq digd		; dig down
00377A  3               
00377A  3               ; Dig up.
00377A  3               
00377A  3               digu:				; dig up
00377A  3  A0 08        	ldy #8
00377C  3  B1 68        	lda (z80_ix),y
00377E  3  38           	sec
00377F  3  E9 02        	sbc #2
003781  3  85 rr        	sta dispy		; set y
003783  3               
003783  3  C8           	iny
003784  3  B1 68        	lda (z80_ix),y
003786  3  85 rr        	sta dispx		; set x
003788  3  4C BE 37     	jmp digv
00378B  3               
00378B  3               ; Dig down.
00378B  3               
00378B  3               digd:
00378B  3  A0 09        	ldy #9
00378D  3  B1 68        	lda (z80_ix),y
00378F  3  85 rr        	sta dispx		; set x
003791  3               
003791  3  88           	dey
003792  3  18           	clc
003793  3  B1 68        	lda (z80_ix),y
003795  3  69 09        	adc #SPR_HGT
003797  3  85 rr        	sta dispy		; set y
003799  3  4C BE 37     	jmp digv
00379C  3               
00379C  3               ; Dig left.
00379C  3               
00379C  3               digl:
00379C  3  A0 08        	ldy #8
00379E  3  B1 68        	lda (z80_ix),y
0037A0  3  85 rr        	sta dispy		; set y
0037A2  3               
0037A2  3  C8           	iny
0037A3  3  B1 68        	lda (z80_ix),y
0037A5  3  38           	sec
0037A6  3  E9 02        	sbc #2			; x=x-2
0037A8  3  85 rr        	sta dispx		; set x
0037AA  3  4C F3 37     	jmp digh
0037AD  3               
0037AD  3               ; Dig right.
0037AD  3               
0037AD  3               digr:
0037AD  3  A0 08        	ldy #8
0037AF  3  B1 68        	lda (z80_ix),y
0037B1  3  85 rr        	sta dispy		; set y
0037B3  3               
0037B3  3  C8           	iny
0037B4  3  B1 68        	lda (z80_ix),y
0037B6  3  18           	clc
0037B7  3  69 08        	adc #SPR_WID
0037B9  3  85 rr        	sta dispx		; set x+16
0037BB  3  4C F3 37     	jmp digh
0037BE  3               
0037BE  3               ; Vertical digging
0037BE  3               
0037BE  3               digv:
0037BE  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
0037C1  3  20 8F 28     	jsr fdchk		; remove if FODDER
0037C4  3               
0037C4  3  E6 rr        	inc dispx
0037C6  3  E6 rr        	inc dispx
0037C8  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
0037CB  3  20 8F 28     	jsr fdchk		; remove if FODDER
0037CE  3               
0037CE  3  E6 rr        	inc dispx
0037D0  3  E6 rr        	inc dispx
0037D2  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
0037D5  3  20 8F 28     	jsr fdchk		; remove if FODDER
0037D8  3               
0037D8  3  E6 rr        	inc dispx
0037DA  3  E6 rr        	inc dispx
0037DC  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
0037DF  3  20 8F 28     	jsr fdchk		; remove if FODDER
0037E2  3               
0037E2  3  A5 rr        	lda dispx
0037E4  3  29 01        	and #1
0037E6  3  D0 01        	bne :+
0037E8  3  60           	rts
0037E9  3               :
0037E9  3  E6 rr        	inc dispx
0037EB  3  E6 rr        	inc dispx
0037ED  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
0037F0  3  4C 8F 28     	jmp fdchk		; remove if FODDER
0037F3  3               
0037F3  3               ; Horizontal digging
0037F3  3               
0037F3  3               digh:
0037F3  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
0037F6  3  20 8F 28     	jsr fdchk		; remove if FODDER
0037F9  3               
0037F9  3  E6 rr        	inc dispy		; look 1 cell down
0037FB  3  E6 rr        	inc dispy		; look 1 cell down
0037FD  3  E6 rr        	inc dispy		; look 1 cell down
0037FF  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
003802  3  20 8F 28     	jsr fdchk		; remove if FODDER
003805  3               
003805  3  E6 rr        	inc dispy		; look 1 cell down
003807  3  E6 rr        	inc dispy		; look 1 cell down
003809  3  E6 rr        	inc dispy		; look 1 cell down
00380B  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
00380E  3  20 8F 28     	jsr fdchk		; remove if FODDER
003811  3               
003811  3  A4 rr        	ldy dispy
003813  3  B9 4A DF     	lda V_SPR_PTR,y
003816  3  D0 01        	bne :+
003818  3  60           	rts
003819  3               :
003819  3  E6 rr        	inc dispy		; look 1 cell down
00381B  3  E6 rr        	inc dispy		; look 1 cell down
00381D  3  E6 rr        	inc dispy		; look 1 cell down
00381F  3  20 29 2F     	jsr tstbl		; check blocktype in MAP
003822  3  4C 8F 28     	jmp fdchk		; remove if FODDER
003825  3               
003825  3  00           digcnt:	.byte 0
003826  3               
003826  3               .endif
003826  3               
003826  3               ;------------------------------------------------------------------
003826  3               ; Sprite table
003826  3               ;------------------------------------------------------------------
003826  3               
003826  3               
003826  3               ; ix+0  = type.
003826  3               ; ix+1  = sprite image number.
003826  3               ; ix+2  = frame.
003826  3               ; ix+3  = y coord.
003826  3               ; ix+4  = x coord.
003826  3               
003826  3               ; ix+5  = new type.
003826  3               ; ix+6  = new image number.
003826  3               ; ix+7  = new frame.
003826  3               ; ix+8  = new y coord.
003826  3               ; ix+9  = new x coord.
003826  3               
003826  3               ; ix+10 = direction.
003826  3               ; ix+11 = parameter 1.
003826  3               ; ix+12 = parameter 2.
003826  3               ; ix+13 = jump pointer low.
003826  3               ; ix+14 = jump pointer high.
003826  3               ; ix+15 = data pointer low.
003826  3               ; ix+16 = data pointer high.
003826  3               
003826  3               ; block NUMSPR * TABSIZ,255
003826  3               
003826  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
00382A  3  FF FF FF FF  
00382E  3  FF FF FF FF  
0038F2  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0038F6  3  FF FF FF 00  
0038FA  3  C0 78 00 00  
003903  3  07           roomtb:	.byte 7                      ; start room map offset.
003904  3               
003904  3               ; User routine.  Put your own code in here to be called with USER instruction.
003904  3               ; if USER has an argument it will be passed in the accumulator.
003904  3               
003904  3               user:
003904  3               	.include "user.inc"
003904  4  60           	rts
003905  4               
003905  3               
003905  3               setfgcol:
003905  3  29 07        	and #7
003907  3  8D 14 39     	sta fcolour
00390A  3  60           	rts
00390B  3               
00390B  3               setbgcol:
00390B  3  29 07        	and #7
00390D  3  18           	clc
00390E  3  69 10        	adc #16
003910  3  8D 15 39     	sta bcolour
003913  3  60           	rts
003914  3               
003914  3  07           fcolour:	.byte t_white
003915  3  17           bcolour:	.byte g_white
003916  3               
003916  3               ; Everything below here will be generated by the editors.
003916  3               
003916  3  60                   rts
003917  3               WINDOWTOP = 2
003917  3               WINDOWLFT = 1
003917  3               WINDOWHGT = 22
003917  3               WINDOWWID = 30 ;
003917  3               MAPWID = 3
003917  3  FF FF FF             .byte 255,255,255
00391A  3               mapdat:
00391A  3  FF 00 FF             .byte 255,0,255
00391D  3  FF FF FF             .byte 255,255,255
003920  3  01           stmap:  .byte 1
003921  3               
003921  3               evnt00:
003921  3  A9 00                lda #0
003923  3  85 rr                sta varm
003925  3  A5 rr                lda joyval	; KEY
003927  3  29 08                and #8
003929  3  F0 03                beq :+
00392B  3  4C 54 39             jmp a00109
00392E  3               :
00392E  3  A9 01                lda #1
003930  3  85 rr                sta varm
003932  3  20 A5 2D             jsr cangu	; CANGOUP
003935  3  F0 03                beq :+
003937  3  4C 46 39             jmp a00083
00393A  3               :
00393A  3  A0 08                ldy #8 		; SPRITEUP
00393C  3  B1 68                lda (z80_ix),y
00393E  3  38                   sec
00393F  3  E9 01                sbc #1
003941  3  91 68                sta (z80_ix),y
003943  3  4C 54 39             jmp a00109
003946  3  A9 01        a00083: lda #1
003948  3  C5 rr                cmp vard
00394A  3  F0 03                beq *+5
00394C  3  4C 54 39             jmp a00109
00394F  3  A9 03                lda #3	; DIG
003951  3  20 6E 37             jsr dig
003954  3  A5 rr        a00109: lda joyval	; KEY
003956  3  29 04                and #4
003958  3  F0 03                beq :+
00395A  3  4C 83 39             jmp a00209
00395D  3               :
00395D  3  A9 01                lda #1
00395F  3  85 rr                sta varm
003961  3  20 F2 2D             jsr cangd	; CANGODOWN
003964  3  F0 03                beq :+
003966  3  4C 75 39             jmp a00183
003969  3               :
003969  3  A0 08                ldy #8 		; SPRITEDOWN
00396B  3  B1 68                lda (z80_ix),y
00396D  3  18                   clc
00396E  3  69 01                adc #1
003970  3  91 68                sta (z80_ix),y
003972  3  4C 83 39             jmp a00209
003975  3  A9 01        a00183: lda #1
003977  3  C5 rr                cmp vard
003979  3  F0 03                beq *+5
00397B  3  4C 83 39             jmp a00209
00397E  3  A9 02                lda #2	; DIG
003980  3  20 6E 37             jsr dig
003983  3  A5 rr        a00209: lda joyval	; KEY
003985  3  29 02                and #2
003987  3  F0 03                beq :+
003989  3  4C B2 39             jmp a00309
00398C  3               :
00398C  3  A9 01                lda #1
00398E  3  85 rr                sta varm
003990  3  20 3F 2E             jsr cangl	; CANGOLEFT
003993  3  F0 03                beq :+
003995  3  4C A4 39             jmp a00283
003998  3               :
003998  3  A0 09                ldy #9 		; SPRITELEFT
00399A  3  B1 68                lda (z80_ix),y
00399C  3  38                   sec
00399D  3  E9 01                sbc #1
00399F  3  91 68                sta (z80_ix),y
0039A1  3  4C B2 39             jmp a00309
0039A4  3  A9 01        a00283: lda #1
0039A6  3  C5 rr                cmp vard
0039A8  3  F0 03                beq *+5
0039AA  3  4C B2 39             jmp a00309
0039AD  3  A9 01                lda #1	; DIG
0039AF  3  20 6E 37             jsr dig
0039B2  3  A5 rr        a00309: lda joyval	; KEY
0039B4  3  29 01                and #1
0039B6  3  F0 03                beq :+
0039B8  3  4C E1 39             jmp a00409
0039BB  3               :
0039BB  3  A9 01                lda #1
0039BD  3  85 rr                sta varm
0039BF  3  20 51 2E             jsr cangr	; CANGORIGHT
0039C2  3  F0 03                beq :+
0039C4  3  4C D3 39             jmp a00383
0039C7  3               :
0039C7  3  A0 09                ldy #9 		; SPRITERIGHT
0039C9  3  B1 68                lda (z80_ix),y
0039CB  3  18                   clc
0039CC  3  69 01                adc #1
0039CE  3  91 68                sta (z80_ix),y
0039D0  3  4C E1 39             jmp a00409
0039D3  3  A9 01        a00383: lda #1
0039D5  3  C5 rr                cmp vard
0039D7  3  F0 03                beq *+5
0039D9  3  4C E1 39             jmp a00409
0039DC  3  A9 00                lda #0	; DIG
0039DE  3  20 6E 37             jsr dig
0039E1  3  A9 00        a00409: lda #0
0039E3  3  C5 rr                cmp varm
0039E5  3  90 03                bcc *+5
0039E7  3  4C EF 39             jmp a00437
0039EA  3  A9 00                lda #0		; ANIMATE
0039EC  3  20 2C 33             jsr animsp
0039EF  3               a00437: ; SPRITEINK command
0039EF  3  60                   rts
0039F0  3               evnt01:
0039F0  3  A9 00                lda #0 	; COLLISION
0039F2  3  85 63                sta z80_b
0039F4  3  20 77 33             jsr sktyp
0039F7  3  B0 03                bcs :+
0039F9  3  4C 1B 3A             jmp b00097
0039FC  3               :
0039FC  3  A9 01                lda #1
0039FE  3  85 rr                sta vard
003A00  3  A9 FF                lda #255	; REMOVE
003A02  3  A0 05                ldy #5
003A04  3  91 68                sta (z80_ix),y
003A06  3  A9 0C                lda #12		; AT
003A08  3  85 rr                sta chary
003A0A  3  A9 06                lda #6
003A0C  3  85 rr                sta charx
003A0E  3  A9 01                lda #1		; PRINT
003A10  3  20 AB 2F             jsr dmsg
003A13  3  A9 14                lda #20 	; DELAY
003A15  3  20 28 28             jsr delay
003A18  3  20 4D 28             jsr redraw	; REDRAW
003A1B  3  60           b00097: rts
003A1C  3               evnt02:
003A1C  3  60                   rts
003A1D  3               evnt03:
003A1D  3  60                   rts
003A1E  3               evnt04:
003A1E  3  60                   rts
003A1F  3               evnt05:
003A1F  3  60                   rts
003A20  3               evnt06:
003A20  3  60                   rts
003A21  3               evnt07:
003A21  3  60                   rts
003A22  3               evnt08:
003A22  3  60                   rts
003A23  3               evnt09:
003A23  3  60                   rts
003A24  3               evnt10:
003A24  3  60                   rts
003A25  3               evnt11:
003A25  3  60                   rts
003A26  3               evnt12:
003A26  3  A9 00                lda #0
003A28  3  85 rr                sta vard
003A2A  3  60                   rts
003A2B  3               evnt13:
003A2B  3  60                   rts
003A2C  3               evnt14:
003A2C  3  20 7D 42             jsr cls		; CLS
003A2F  3  A9 05                lda #5 	; PAPER
003A31  3  20 0B 39             jsr setbgcol
003A34  3  A9 00                lda #0		; LINECOL
003A36  3  20 B4 42             jsr linecol
003A39  3  A9 01                lda #1		; LINECOL
003A3B  3  20 B4 42             jsr linecol
003A3E  3  A9 02                lda #2 	; INK
003A40  3  20 05 39             jsr setfgcol
003A43  3  A9 01                lda #1		; PRINTMODE
003A45  3  85 rr                sta prtmod
003A47  3  A9 00                lda #0
003A49  3  85 rr                sta chary
003A4B  3  A9 08                lda #8
003A4D  3  85 rr                sta charx
003A4F  3  A9 02                lda #2		; PRINT
003A51  3  20 AB 2F             jsr dmsg
003A54  3  A9 00                lda #0		; PRINTMODE
003A56  3  85 rr                sta prtmod
003A58  3  A9 02                lda #2 	; PAPER
003A5A  3  20 0B 39             jsr setbgcol
003A5D  3  A9 06                lda #6		; LINECOL
003A5F  3  20 B4 42             jsr linecol
003A62  3  A9 07                lda #7		; LINECOL
003A64  3  20 B4 42             jsr linecol
003A67  3  A9 08                lda #8		; LINECOL
003A69  3  20 B4 42             jsr linecol
003A6C  3  A9 09                lda #9		; LINECOL
003A6E  3  20 B4 42             jsr linecol
003A71  3  A9 03                lda #3 	; PAPER
003A73  3  20 0B 39             jsr setbgcol
003A76  3  A9 0A                lda #10		; LINECOL
003A78  3  20 B4 42             jsr linecol
003A7B  3  A9 0B                lda #11		; LINECOL
003A7D  3  20 B4 42             jsr linecol
003A80  3  A9 0C                lda #12		; LINECOL
003A82  3  20 B4 42             jsr linecol
003A85  3  A9 0D                lda #13		; LINECOL
003A87  3  20 B4 42             jsr linecol
003A8A  3  A9 06                lda #6 	; PAPER
003A8C  3  20 0B 39             jsr setbgcol
003A8F  3  A9 0E                lda #14		; LINECOL
003A91  3  20 B4 42             jsr linecol
003A94  3  A9 0F                lda #15		; LINECOL
003A96  3  20 B4 42             jsr linecol
003A99  3  A9 10                lda #16		; LINECOL
003A9B  3  20 B4 42             jsr linecol
003A9E  3  A9 11                lda #17		; LINECOL
003AA0  3  20 B4 42             jsr linecol
003AA3  3  A9 05                lda #5 	; PAPER
003AA5  3  20 0B 39             jsr setbgcol
003AA8  3  A9 12                lda #18		; LINECOL
003AAA  3  20 B4 42             jsr linecol
003AAD  3  A9 13                lda #19		; LINECOL
003AAF  3  20 B4 42             jsr linecol
003AB2  3  A9 14                lda #20		; LINECOL
003AB4  3  20 B4 42             jsr linecol
003AB7  3  A9 15                lda #21		; LINECOL
003AB9  3  20 B4 42             jsr linecol
003ABC  3  A9 04                lda #4 	; PAPER
003ABE  3  20 0B 39             jsr setbgcol
003AC1  3  A9 12                lda #18		; LINECOL
003AC3  3  20 B4 42             jsr linecol
003AC6  3  60                   rts
003AC7  3               evnt15:
003AC7  3  60                   rts
003AC8  3               evnt16:
003AC8  3  60                   rts
003AC9  3               evnt17:
003AC9  3  60                   rts
003ACA  3               evnt18:
003ACA  3  60                   rts
003ACB  3               evnt19:
003ACB  3  60                   rts
003ACC  3               evnt20:
003ACC  3  60                   rts
003ACD  3  60           ptcusr: rts
003ACE  3               msgdat:
003ACE  3  42 4C 4F 43          .byte "BLOCK DEM",207
003AD2  3  4B 20 44 45  
003AD6  3  4D CF        
003AD8  3  20 44 49 47          .byte " DIGGING ENABLED",160
003ADC  3  47 49 4E 47  
003AE0  3  20 45 4E 41  
003AE9  3  44 49 47 47          .byte "DIGGING DEM",207
003AED  3  49 4E 47 20  
003AF1  3  44 45 4D CF  
003AF5  3               nummsg:
003AF5  3  03                   .byte 3
003AF6  3               chgfx:
003AF6  3  00 01                .byte 0,1
003AF8  3  7F 01                .byte 127,1
003AFA  3  66 01                .byte 102,1
003AFC  3  39 01                .byte 57,1
003AFE  3               bprop:
003AFE  3  00                   .byte 0
003AFF  3  02                   .byte 2
003B00  3  04                   .byte 4
003B01  3  04                   .byte 4
003B02  3               sprgfx:
003B02  3  28 7B 39 20          .byte 40,123,57,32,0,56,126,60,48,0,97,53,117,33,0,0,0,0,0,0
003B06  3  00 38 7E 3C  
003B0A  3  30 00 61 35  
003B16  3  40 4C 44 00          .byte 64,76,68,0,0,64,91,81,0,0,5,23,21,5,0,2,1,3,0,0
003B1A  3  00 40 5B 51  
003B1E  3  00 00 05 17  
003B2A  3  00 50 10 00          .byte 0,80,16,0,0,2,78,6,0,0,22,31,23,20,0,8,5,13,0,0
003B2E  3  00 02 4E 06  
003B32  3  00 00 16 1F  
003B3E  3  00 46 57 04          .byte 0,70,87,4,0,64,76,93,68,0,2,90,74,18,0,0,0,0,0,0
003B42  3  00 40 4C 5D  
003B46  3  44 00 02 5A  
003B52  3  00 18 1C 10          .byte 0,24,28,16,0,0,82,87,16,0,10,74,75,10,0,0,3,2,1,0
003B56  3  00 00 52 57  
003B5A  3  10 00 0A 4A  
003B66  3  00 40 50 00          .byte 0,64,80,0,0,0,9,29,1,0,72,75,79,73,0,0,14,10,4,0
003B6A  3  00 00 09 1D  
003B6E  3  01 00 48 4B  
003B7A  3  28 7B 39 20          .byte 40,123,57,32,0,56,126,60,48,0,97,53,45,33,0,0,0,0,0,0
003B7E  3  00 38 7E 3C  
003B82  3  30 00 61 35  
003B8E  3  40 4C 44 00          .byte 64,76,68,0,0,64,91,81,0,0,5,23,85,5,0,2,1,0,0,0
003B92  3  00 40 5B 51  
003B96  3  00 00 05 17  
003BA2  3  00 50 10 00          .byte 0,80,16,0,0,2,78,6,0,0,22,31,23,20,0,8,5,3,0,0
003BA6  3  00 02 4E 06  
003BAA  3  00 00 16 1F  
003BB6  3  00 46 57 04          .byte 0,70,87,4,0,64,76,93,68,0,2,90,10,6,0,0,0,0,0,0
003BBA  3  00 40 4C 5D  
003BBE  3  44 00 02 5A  
003BCA  3  00 18 1C 10          .byte 0,24,28,16,0,0,82,87,16,0,10,74,75,26,0,0,3,0,0,0
003BCE  3  00 00 52 57  
003BD2  3  10 00 0A 4A  
003BDE  3  00 40 50 00          .byte 0,64,80,0,0,0,9,29,1,0,72,75,79,73,0,0,14,2,1,0
003BE2  3  00 00 09 1D  
003BE6  3  01 00 48 4B  
003BF2  3  28 7B 39 20          .byte 40,123,57,32,0,56,126,60,48,0,97,53,117,33,0,0,0,0,0,0
003BF6  3  00 38 7E 3C  
003BFA  3  30 00 61 35  
003C06  3  40 4C 44 00          .byte 64,76,68,0,0,64,91,81,0,0,5,23,21,5,0,2,1,3,0,0
003C0A  3  00 40 5B 51  
003C0E  3  00 00 05 17  
003C1A  3  00 50 10 00          .byte 0,80,16,0,0,2,78,6,0,0,22,31,23,20,0,8,5,13,0,0
003C1E  3  00 02 4E 06  
003C22  3  00 00 16 1F  
003C2E  3  00 46 57 04          .byte 0,70,87,4,0,64,76,93,68,0,2,90,74,18,0,0,0,0,0,0
003C32  3  00 40 4C 5D  
003C36  3  44 00 02 5A  
003C42  3  00 18 1C 10          .byte 0,24,28,16,0,0,82,87,16,0,10,74,75,10,0,0,3,2,1,0
003C46  3  00 00 52 57  
003C4A  3  10 00 0A 4A  
003C56  3  00 40 50 00          .byte 0,64,80,0,0,0,9,29,1,0,72,75,79,73,0,0,14,10,4,0
003C5A  3  00 00 09 1D  
003C5E  3  01 00 48 4B  
003C6A  3  28 7B 39 20          .byte 40,123,57,32,0,56,126,60,48,0,41,37,117,33,0,0,0,0,0,0
003C6E  3  00 38 7E 3C  
003C72  3  30 00 29 25  
003C7E  3  40 4C 44 00          .byte 64,76,68,0,0,64,91,81,0,0,69,23,21,5,0,0,0,3,0,0
003C82  3  00 40 5B 51  
003C86  3  00 00 45 17  
003C92  3  00 50 10 00          .byte 0,80,16,0,0,2,78,6,0,0,22,31,23,20,0,2,1,13,0,0
003C96  3  00 02 4E 06  
003C9A  3  00 00 16 1F  
003CA6  3  00 46 57 04          .byte 0,70,87,4,0,64,76,93,68,0,2,14,74,18,0,0,0,0,0,0
003CAA  3  00 40 4C 5D  
003CAE  3  44 00 02 0E  
003CBA  3  00 18 1C 10          .byte 0,24,28,16,0,0,82,87,16,0,10,90,75,10,0,0,0,2,1,0
003CBE  3  00 00 52 57  
003CC2  3  10 00 0A 5A  
003CCE  3  00 40 50 00          .byte 0,64,80,0,0,0,9,29,1,0,72,75,79,73,0,0,3,10,4,0
003CD2  3  00 00 09 1D  
003CD6  3  01 00 48 4B  
003CE2  3  6C 24 20 20          .byte 108,36,32,32,0,122,48,32,32,0,111,37,32,32,0,0,0,0,0,0
003CE6  3  00 7A 30 20  
003CEA  3  20 00 6F 25  
003CF6  3  50 10 00 00          .byte 80,16,0,0,0,74,0,0,0,0,95,21,0,0,0,2,0,0,0,0
003CFA  3  00 4A 00 00  
003CFE  3  00 00 5F 15  
003D0A  3  00 00 00 00          .byte 0,0,0,0,0,75,1,0,0,0,94,20,0,0,0,11,1,0,0,0
003D0E  3  00 4B 01 00  
003D12  3  00 00 5E 14  
003D1E  3  08 1C 00 00          .byte 8,28,0,0,0,64,85,0,0,0,10,31,0,0,0,0,0,0,0,0
003D22  3  00 40 55 00  
003D26  3  00 00 0A 1F  
003D32  3  40 50 00 00          .byte 64,80,0,0,0,0,21,0,0,0,74,95,0,0,0,0,1,0,0,0
003D36  3  00 00 15 00  
003D3A  3  00 00 4A 5F  
003D46  3  00 00 00 00          .byte 0,0,0,0,0,2,23,0,0,0,72,93,0,0,0,2,7,0,0,0
003D4A  3  00 02 17 00  
003D4E  3  00 00 48 5D  
003D5A  3               frmlst:
003D5A  3  00 04                .byte 0,4
003D5C  3  04 01 05 00          .byte 4,1,5,0
003D60  3               scdat:
003D60  3  44 01                .word 324
003D62  3  FF 01 1F FF          .byte 255,1,31,255,0,28,1,1,255,0,28,1,1,255,0,28,1,1,255,2,4,255,1,7,255,0,4,255,1,15,255,3,4
003D66  3  00 1C 01 01  
003D6A  3  FF 00 1C 01  
003D83  3  01 FF 03 06          .byte 1,255,3,6,255,0,4,1,255,3,12,1,1,255,2,4,1,255,2,6,255,0,4,1,255,2,12,1,1,255,3,4,1
003D87  3  FF 00 04 01  
003D8B  3  FF 03 0C 01  
003DA4  3  FF 03 06 FF          .byte 255,3,6,255,0,4,1,255,3,12,1,1,255,2,4,1,255,2,4,1,1,255,0,4,1,255,2,4,255,1,4,255,2,4
003DA8  3  00 04 01 FF  
003DAC  3  03 0C 01 01  
003DC6  3  01 01 FF 03          .byte 1,1,255,3,4,1,255,3,4,1,1,255,0,4,255,3,5,1,0,0,1,255,3,4,1,1,255,2,11,255,0,4,255,2,5
003DCA  3  04 01 FF 03  
003DCE  3  04 01 01 FF  
003DE9  3  01 00 00 01          .byte 1,0,0,1,255,2,4,1,1,255,3,11,255,0,4,255,3,5,255,1,4,255,3,4,1,1,255,2,11,255,0,4,255,1,9
003DED  3  FF 02 04 01  
003DF1  3  01 FF 03 0B  
003E0C  3  FF 02 04 01          .byte 255,2,4,1,1,255,3,4,255,1,7,255,0,17,1,1,255,2,4,1,255,0,5,1,255,0,17,1,1,255,3,4,1
003E10  3  01 FF 03 04  
003E14  3  FF 01 07 FF  
003E2D  3  FF 00 05 01          .byte 255,0,5,1,255,0,17,1,1,255,2,4,1,255,0,5,1,255,0,4,255,1,6,255,0,4,255,1,5,255,3,4,1
003E31  3  FF 00 11 01  
003E35  3  01 FF 02 04  
003E4E  3  FF 00 05 01          .byte 255,0,5,1,255,0,4,255,1,6,255,0,4,1,0,0,1,1,255,2,4,1,255,0,5,1,255,0,4,255,2,5,1
003E52  3  FF 00 04 FF  
003E56  3  01 06 FF 00  
003E6F  3  FF 00 04 01          .byte 255,0,4,1,0,0,1,1,255,3,4,1,255,0,5,1,255,0,4,255,3,5,1,255,0,4,1,0,0,1,1,255,2,4
003E73  3  00 00 01 01  
003E77  3  FF 03 04 01  
003E91  3  01 FF 00 05          .byte 1,255,0,5,1,255,0,4,255,2,5,1,255,0,4,1,0,0,255,1,31
003E95  3  01 FF 00 04  
003E99  3  FF 02 05 01  
003EA6  3               numsc:
003EA6  3  01                   .byte 1
003EA7  3               nmedat:
003EA7  3  00 00 09 20          .byte 0,0,9,32,1,1,9,52,255
003EAB  3  01 01 09 34  
003EAF  3  FF           
003EB0  3               NUMOBJ = 1
003EB0  3               objdta:
003EB0  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,40,80,2,40,80
003EB4  3  00 00 00 00  
003EB8  3  00 00 00 00  
003ED6  3               font:
003ED6  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003EDA  3  00 00 00 00  
003EDE  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003EE2  3  30 00 30 00  
003EE6  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003EEA  3  00 00 00 00  
003EEE  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003EF2  3  6C FE 6C 00  
003EF6  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
003EFA  3  7E 1E 7E 18  
003EFE  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003F02  3  30 6E CE 00  
003F06  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
003F0A  3  7E CC 7E 00  
003F0E  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
003F12  3  00 00 00 00  
003F16  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
003F1A  3  18 18 0C 00  
003F1E  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
003F22  3  30 30 60 00  
003F26  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
003F2A  3  7E 18 3C 00  
003F2E  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
003F32  3  7E 18 18 00  
003F36  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
003F3A  3  00 18 18 30  
003F3E  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
003F42  3  7E 00 00 00  
003F46  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003F4A  3  00 38 38 00  
003F4E  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003F52  3  18 30 60 00  
003F56  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003F5A  3  F6 E6 7C 00  
003F5E  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003F62  3  18 18 7E 00  
003F66  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003F6A  3  7C C0 FE 00  
003F6E  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003F72  3  06 C6 7C 00  
003F76  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003F7A  3  D8 FE 18 00  
003F7E  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003F82  3  06 C6 7C 00  
003F86  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003F8A  3  C6 C6 7C 00  
003F8E  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003F92  3  18 30 30 00  
003F96  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003F9A  3  C6 C6 7C 00  
003F9E  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003FA2  3  7E 06 7C 00  
003FA6  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003FAA  3  00 00 30 00  
003FAE  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003FB2  3  00 30 30 60  
003FB6  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003FBA  3  30 18 0C 00  
003FBE  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003FC2  3  00 7E 00 00  
003FC6  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003FCA  3  0C 18 30 00  
003FCE  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003FD2  3  18 00 18 00  
003FD6  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003FDA  3  FE C0 7C 00  
003FDE  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003FE2  3  FE C6 C6 00  
003FE6  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003FEA  3  C6 C6 FC 00  
003FEE  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003FF2  3  C0 C6 7C 00  
003FF6  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
003FFA  3  C6 CC F8 00  
003FFE  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
004002  3  C0 C0 FE 00  
004006  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00400A  3  C0 C0 C0 00  
00400E  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
004012  3  DE C6 7C 00  
004016  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
00401A  3  C6 C6 C6 00  
00401E  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
004022  3  18 18 7E 00  
004026  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
00402A  3  C6 C6 7C 00  
00402E  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
004032  3  D8 CC C6 00  
004036  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
00403A  3  C0 C0 FE 00  
00403E  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
004042  3  C6 C6 C6 00  
004046  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
00404A  3  DE CE C6 00  
00404E  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
004052  3  C6 C6 7C 00  
004056  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
00405A  3  FC C0 C0 00  
00405E  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
004062  3  F6 DE 7C 00  
004066  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
00406A  3  FC CC C6 00  
00406E  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
004072  3  06 C6 7C 00  
004076  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00407A  3  30 30 30 00  
00407E  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
004082  3  C6 C6 7C 00  
004086  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00408A  3  C6 6C 38 00  
00408E  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
004092  3  C6 FE 6C 00  
004096  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00409A  3  38 6C C6 00  
00409E  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
0040A2  3  30 30 30 00  
0040A6  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
0040AA  3  30 60 FE 00  
0040AE  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
0040B2  3  18 18 1E 00  
0040B6  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
0040BA  3  30 18 0C 00  
0040BE  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
0040C2  3  30 30 F0 00  
0040C6  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
0040CA  3  30 30 30 00  
0040CE  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0040D2  3  00 00 00 FF  
0040D6  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0040DA  3  60 60 FE 00  
0040DE  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0040E2  3  7C CC 7C 00  
0040E6  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0040EA  3  66 66 7C 00  
0040EE  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0040F2  3  60 60 3C 00  
0040F6  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0040FA  3  CC CC 7C 00  
0040FE  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
004102  3  F8 C0 7C 00  
004106  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00410A  3  30 30 30 00  
00410E  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
004112  3  CC 7C 0C 78  
004116  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00411A  3  CC CC CC 00  
00411E  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
004122  3  30 30 78 00  
004126  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00412A  3  0C 0C 6C 38  
00412E  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
004132  3  70 78 6C 00  
004136  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00413A  3  30 30 1C 00  
00413E  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
004142  3  FC FC FC 00  
004146  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00414A  3  CC CC CC 00  
00414E  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
004152  3  CC CC 78 00  
004156  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00415A  3  CC F8 C0 C0  
00415E  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
004162  3  CC 7C 0C 0E  
004166  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00416A  3  60 60 60 00  
00416E  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
004172  3  78 0C F8 00  
004176  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00417A  3  30 30 1C 00  
00417E  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
004182  3  CC CC 78 00  
004186  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00418A  3  78 78 30 00  
00418E  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
004192  3  FC FC 78 00  
004196  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00419A  3  30 78 CC 00  
00419E  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
0041A2  3  CC 7C 0C 78  
0041A6  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
0041AA  3  30 60 FC 00  
0041AE  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
0041B2  3  18 18 1E 00  
0041B6  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
0041BA  3  18 18 18 00  
0041BE  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0041C2  3  30 30 F0 00  
0041C6  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0041CA  3  00 00 00 00  
0041CE  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0041D2  3  E3 BB C6 7C  
0041D6  3               jtab:
0041D6  3  63                   .byte 99
0041D7  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
0041DB  3  20 4E 4D 31  
0041DF  3  32 33 34     
0041E2  3               
0041E2  2               
0041E2  1               	.include "lib.inc"
0041E2  2               ;----------------------------------------------------------------------
0041E2  2               ; System 5 depending variables and routines
0041E2  2               ;----------------------------------------------------------------------
0041E2  2               
0041E2  2               ; Flags
0041E2  2               
0041E2  2               	real		= 0		; 0=emulator, 1=real system5
0041E2  2               
0041E2  2               ; Global variables
0041E2  2               
0041E2  2               	t_red		= 1		; Text colour definition filters
0041E2  2               	t_green		= 2
0041E2  2               	t_yellow	= 3
0041E2  2               	t_blue		= 4
0041E2  2               	t_magenta	= 5
0041E2  2               	t_cyan		= 6
0041E2  2               	t_white		= 7
0041E2  2               
0041E2  2               	g_red		= 17		; Graphics colour definition filters
0041E2  2               	g_green		= 18
0041E2  2               	g_yellow	= 19
0041E2  2               	g_blue		= 20
0041E2  2               	g_magenta	= 21
0041E2  2               	g_cyan		= 22
0041E2  2               	g_white		= 23
0041E2  2               
0041E2  2               	ScrWidth	= 40
0041E2  2               	ScrHeight	= 25
0041E2  2               
0041E2  2               .if real=1
0041E2  2               	IRQtime		= 20000		; 50Hz at 1Mhz clock
0041E2  2               .else
0041E2  2               	IRQtime		= 40000		; 50Hz at 2Mhz clock
0041E2  2               .endif
0041E2  2               
0041E2  2               ; System constants
0041E2  2               
0041E2  2               	IRQVEC		= $0204		; Interrupt vector
0041E2  2               	ScreenAddr	= $0400		; Startaddress video RAM
0041E2  2               
0041E2  2               	MC6845_Reg	= $0800		; MC6845 CRT controller register ptr
0041E2  2               	MC6845_Dat	= $0801		; MC6845 CRT controller data
0041E2  2               
0041E2  2               	VIA1		= $0e20
0041E2  2               	PORT_A		= VIA1+$1	; Keyboard
0041E2  2               	Timer1_Low  	= VIA1+$4	; Timer 1 low byte
0041E2  2               	Timer1_High 	= VIA1+$5	; Timer 1 high byte
0041E2  2               	Timer2_Low	= VIA1+$8	; Timer 2 low byte
0041E2  2               	Timer2_High	= VIA1+$9	; Timer 2 high byte
0041E2  2               	ACR		= VIA1+$b	; Auxiliary Control Register
0041E2  2               	PCR		= VIA1+$c	; Peripheral Control Register
0041E2  2               	IFR		= VIA1+$d 	; Interrupt Flag Register
0041E2  2               	IER		= VIA1+$e	; Interupt Enable Register
0041E2  2               
0041E2  2               	MAP 		= $D800		; properties map buffer (4x256 bytes)
0041E2  2               	SCADTB_lb 	= $DC00		; screen address table lo-byte (256 bytes)
0041E2  2               	SCADTB_hb 	= $DD00		; screen address table hi-byte (256 bytes)
0041E2  2               	SHRAPN 		= $DE00		; shrapnel table (55x6 bytes)
0041E2  2               	V_SPR_PTR	= $DF4A		; Vertical spriteframe pointer (75 bytes)
0041E2  2               
0041E2  2               ; System calls
0041E2  2               
0041E2  2               	OS_CLI   = $FFF7
0041E2  2               	OSBYTE   = $FFF4
0041E2  2               	OSWORD   = $FFF1
0041E2  2               	OSWRCH   = $FFEE
0041E2  2               	OSWRCR   = $FFEC
0041E2  2               	OSNEWL   = $FFE7
0041E2  2               	OSASCI   = $FFE3
0041E2  2               	OSRDCH   = $FFE0
0041E2  2               	OSFILE   = $FFDD
0041E2  2               	OSARGS   = $FFDA
0041E2  2               	OSBGET   = $FFD7
0041E2  2               	OSBPUT   = $FFD4
0041E2  2               	OSGBPB   = $FFD1
0041E2  2               	OSFIND   = $FFCE
0041E2  2               
0041E2  2               ; To be removed
0041E2  2               
0041E2  2               	SCRSYNC	= $fff4
0041E2  2               
0041E2  2               ;======================================================================
0041E2  2               ; System depending routines
0041E2  2               ;======================================================================
0041E2  2               
0041E2  2               ;----------------------------------------------------------------------
0041E2  2               ; Init hardware
0041E2  2               ;----------------------------------------------------------------------
0041E2  2               
0041E2  2               init:
0041E2  2               
0041E2  2               ; Set up screen address table.
0041E2  2               
0041E2  2               setsat:
0041E2  2  A9 00        	lda #<ScreenAddr	; start of screen.
0041E4  2  85 rr        	sta scraddr
0041E6  2  A9 04        	lda #>ScreenAddr
0041E8  2  85 rr        	sta scraddr+1
0041EA  2               
0041EA  2  A2 00        	ldx #0
0041EC  2  A0 00        	ldy #0			; vertical lines on screen.
0041EE  2               setsa0:
0041EE  2  A5 rr        	lda scraddr
0041F0  2  99 00 DC     	sta SCADTB_lb,y		; write low byte.
0041F3  2  A5 rr        	lda scraddr+1
0041F5  2  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
0041F7  2  90 02        	bcc :+
0041F9  2  09 F0        	ora #$F0		; plot sprites in rom if of screen
0041FB  2               :
0041FB  2  99 00 DD     	sta SCADTB_hb,y		; write high byte.
0041FE  2  E8           	inx
0041FF  2  E0 03        	cpx #3
004201  2  D0 05        	bne :+
004203  2  20 20 33     	jsr nline		; next line down.
004206  2  A2 00        	ldx #0
004208  2               :
004208  2  C8           	iny			; next position in table.
004209  2  D0 E3        	bne setsa0
00420B  2               
00420B  2               ; Set up vertical sprite pointer table
00420B  2               
00420B  2  A0 00        	ldy #0
00420D  2  A9 00        	lda #0
00420F  2               vspriteloop:
00420F  2  99 4A DF     	sta V_SPR_PTR,y
004212  2  18           	clc
004213  2  69 14        	adc #20
004215  2  C9 3C        	cmp #60
004217  2  D0 02        	bne :+
004219  2  A9 00        	lda #0
00421B  2               :
00421B  2  C8           	iny
00421C  2  C0 4B        	cpy #75
00421E  2  D0 EF        	bne vspriteloop
004220  2               
004220  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004220  2               ; Hack for MAME to use VDU40x25
004220  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
004220  2               
004220  2               ; Init VDU40x25
004220  2               
004220  2  A0 0F        	ldy #$f
004222  2               loops:
004222  2  8C 00 08     	sty MC6845_Reg
004225  2  B9 6D 42     	lda CRTTAB,y
004228  2  8D 01 08     	sta MC6845_Dat
00422B  2  88           	dey
00422C  2  10 F4        	bpl loops
00422E  2               
00422E  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00422E  2               
00422E  2               ; Disable cursor
00422E  2               
00422E  2  A9 0A        	lda #$0a
004230  2  8D 00 08     	sta MC6845_Reg
004233  2  A9 20        	lda #$20
004235  2  8D 01 08     	sta MC6845_Dat
004238  2               
004238  2  20 7D 42     	jsr cls
00423B  2               
00423B  2               ; Set new interrupt routine to sync at 25Hz
00423B  2               
00423B  2  A9 5B        	lda #<irq_handler	; New interrupt handler
00423D  2  8D 04 02     	sta IRQVEC
004240  2  A9 42        	lda #>irq_handler
004242  2  8D 05 02     	sta IRQVEC+1
004245  2               
004245  2  A9 40        	lda #<IRQtime		; Interrupt at 25Hz
004247  2  8D 24 0E     	sta Timer1_Low
00424A  2  A9 9C        	lda #>IRQtime
00424C  2  8D 25 0E     	sta Timer1_High
00424F  2  A9 40        	lda #%01000000
004251  2  8D 2B 0E     	sta ACR
004254  2  A9 C0        	lda #%11000000
004256  2  8D 2E 0E     	sta IER
004259  2  58           	cli
00425A  2               
00425A  2  60           	rts
00425B  2               
00425B  2               irq_handler:
00425B  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
00425E  2               
00425E  2  8A           	txa			; Save x,y
00425F  2  48           	pha
004260  2  98           	tya
004261  2  48           	pha
004262  2               
004262  2  EE 6B 42     	inc frames_passed	; Nr of frames past
004265  2               
004265  2  68           	pla			; Restore x,y,a
004266  2  A8           	tay
004267  2  68           	pla
004268  2  AA           	tax
004269  2  68           	pla
00426A  2  40           	rti
00426B  2               
00426B  2  00           frames_passed:	.byte 0
00426C  2               
00426C  2  60           	rts
00426D  2               
00426D  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
004271  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
004275  2  03 12 72 13  	.byte $03,$12,$72,$13
004279  2  04 00 07 FF  	.byte $04,$00,$07,$ff
00427D  2               
00427D  2               ;======================================================================
00427D  2               ; Screen routines
00427D  2               ;======================================================================
00427D  2               
00427D  2               ;----------------------------------------------------------------------
00427D  2               ; Clear screen routine.
00427D  2               ;
00427D  2               ; Fill screenmem $0400-$07ff with ScrFillByte
00427D  2               ; Set semigraphics at 1st column every line
00427D  2               ;----------------------------------------------------------------------
00427D  2               
00427D  2               cls:
00427D  2               
00427D  2               ; Fill screen with 0
00427D  2               
00427D  2  A9 00        	lda #0
00427F  2  A0 00        	ldy #0
004281  2               clsloop:
004281  2  99 00 04     	sta ScreenAddr,y
004284  2  99 00 05     	sta ScreenAddr+256,y
004287  2  99 00 06     	sta ScreenAddr+512,y
00428A  2  99 00 07     	sta ScreenAddr+768,y
00428D  2  C8           	iny
00428E  2  D0 F1        	bne clsloop
004290  2               
004290  2               ; Init every row as graphics
004290  2               
004290  2  A0 00        	ldy #0
004292  2  A2 19        	ldx #ScrHeight
004294  2  AD 00 DC     	lda SCADTB_lb
004297  2  85 rr        	sta scraddr
004299  2  AD 00 DD     	lda SCADTB_hb
00429C  2  85 rr        	sta scraddr+1
00429E  2  AD 15 39     	lda bcolour
0042A1  2               colloop:
0042A1  2  91 rr        	sta (scraddr),y
0042A3  2  48           	pha
0042A4  2  A5 rr        	lda scraddr
0042A6  2  18           	clc
0042A7  2  69 28        	adc #ScrWidth
0042A9  2  85 rr        	sta scraddr
0042AB  2  90 02        	bcc :+
0042AD  2  E6 rr        	inc scraddr+1
0042AF  2               :
0042AF  2  68           	pla
0042B0  2  CA           	dex
0042B1  2  D0 EE        	bne colloop
0042B3  2               
0042B3  2  60           	rts
0042B4  2               
0042B4  2               ;-------------------------------------------------------------
0042B4  2               ; Colour background line
0042B4  2               ;-------------------------------------------------------------
0042B4  2               
0042B4  2               linecol:
0042B4  2  85 rr        	sta dispy
0042B6  2  A9 00        	lda #0
0042B8  2  85 rr        	sta dispx
0042BA  2  20 83 2C     	jsr gprad
0042BD  2               
0042BD  2               ;	tay
0042BD  2               ;	lda SCADTB_lb,y
0042BD  2               ;	sta scraddr
0042BD  2               ;	lda SCADTB_hb,y
0042BD  2               ;	sta scraddr+1
0042BD  2  A0 00        	ldy #0
0042BF  2  AD 15 39     	lda bcolour		; set background colour
0042C2  2  91 rr        	sta (scraddr),y
0042C4  2  C8           	iny
0042C5  2  A9 1D        	lda #$1d		; set new background colour
0042C7  2  91 rr        	sta (scraddr),y
0042C9  2  60           	rts
0042CA  2               
0042CA  2               
0042CA  2               ;-------------------------------------------------------------
0042CA  2               ; Screen synchronisation.
0042CA  2               ;
0042CA  2               ;  - read joystick/keyboard
0042CA  2               ;  - handle sound
0042CA  2               ;  - sync framerate at 25Hz
0042CA  2               ;  - handle shrapnel every even frame
0042CA  2               ;-------------------------------------------------------------
0042CA  2               
0042CA  2               vsync:
0042CA  2  48           	pha
0042CB  2  98           	tya
0042CC  2  48           	pha
0042CD  2  8A           	txa
0042CE  2  48           	pha
0042CF  2  20 85 2F     	jsr joykey		; read joystick/keyboard.
0042D2  2               
0042D2  2               ; Sync framerate to 25 Hz
0042D2  2               
0042D2  2               vsync1:
0042D2  2  AD 6B 42     	lda frames_passed	; Wait 2 frames at 50Hz
0042D5  2  C9 02        	cmp #2
0042D7  2  90 F9        	bcc vsync1
0042D9  2               
0042D9  2  A9 00        	lda #0			; sync framerate 25 Hz
0042DB  2  8D 6B 42     	sta frames_passed
0042DE  2               
0042DE  2               
0042DE  2  A5 rr        	lda clock
0042E0  2  29 01        	and #1
0042E2  2  D0 03        	bne:+
0042E4  2  20 AC 28     	jsr proshr		; handle shrapnel every even frame
0042E7  2               :
0042E7  2               ;	lda sndtyp
0042E7  2               ;	beq sndskip
0042E7  2               ;sndloop:
0042E7  2               ;	lda SpeakerBit		; handle sound
0042E7  2               ;	ldy sndtyp
0042E7  2               ;sndwait:
0042E7  2               ;	dey
0042E7  2               ;	bne sndwait
0042E7  2               ;	eor #4
0042E7  2               ;	sta SpeakerBit
0042E7  2               ;	dec sndtyp
0042E7  2               ;	bne sndloop
0042E7  2               ;sndskip:
0042E7  2               
0042E7  2  68           	pla
0042E8  2  AA           	tax
0042E9  2  68           	pla
0042EA  2  A8           	tay
0042EB  2  68           	pla
0042EC  2  60           	rts
0042ED  2               
0042ED  2  00           sndtyp:	.byte 0
0042EE  2               
0042EE  2               ;======================================================================
0042EE  2               ; Joystick routines
0042EE  2               ;======================================================================
0042EE  2               
0042EE  2               joyinit:
0042EE  2  60           	rts
0042EF  2               
0042EF  2               joy1:
0042EF  2  AD 2C 0E     	lda PCR			; Switch to joystick, CA2=0
0042F2  2  29 F1        	and #%11110001
0042F4  2  09 0C        	ora #%00001100
0042F6  2               
0042F6  2  AD 21 0E     	lda PORT_A		; Read FUDLR joystick
0042F9  2  29 7F        	and #$7f
0042FB  2  85 rr        	sta joyval
0042FD  2               
0042FD  2  AD 2C 0E     	lda PCR			; Switch to keyboard, CA2=1
004300  2  29 F1        	and #%11110001
004302  2  09 0E        	ora #%00001110
004304  2               
004304  2  AD DC 41     	lda keys+5		; Check FIRE2
004307  2  20 22 43     	jsr ktest
00430A  2  B0 06        	bcs :+
00430C  2  A5 rr        	lda joyval
00430E  2  29 DF        	and #%11011111
004310  2  85 rr        	sta joyval
004312  2               :
004312  2  AD DD 41     	lda keys+6		; Check FIRE3
004315  2  20 22 43     	jsr ktest
004318  2  B0 06        	bcs :+
00431A  2  A5 rr        	lda joyval
00431C  2  29 BF        	and #%10111111
00431E  2  85 rr        	sta joyval
004320  2               :
004320  2  60           	rts
004321  2               
004321  2               joy2:
004321  2  60           	rts
004322  2               
004322  2               ;======================================================================
004322  2               ; Keyboard routines
004322  2               ;======================================================================
004322  2               
004322  2               ;----------------------------------------------------------------------
004322  2               ; KTEST
004322  2               ; Check if key in A is pressed
004322  2               ; 	return clc if pressed
004322  2               ; 	return sec if not pressed
004322  2               ;----------------------------------------------------------------------
004322  2               
004322  2               ktest:
004322  2  85 rr        	sta tmp
004324  2  2C 21 0E     	bit PORT_A
004327  2               ;.if real=1
004327  2               ;	bpl not_pressed
004327  2               ;.else
004327  2  30 07        	bmi not_pressed	; BUG MAME, bit 7 not set ....
004329  2               ;.endif
004329  2  AD 21 0E     	lda PORT_A
00432C  2  C5 rr        	cmp tmp
00432E  2  F0 02        	beq pressed
004330  2               not_pressed:
004330  2  38           	sec
004331  2  60           	rts
004332  2               pressed:
004332  2  18           	clc
004333  2  60           	rts
004334  2               
004334  2               ;======================================================================
004334  2               ; PRSKEY
004334  2               ; Wait for keypress and release
004334  2               ;======================================================================
004334  2               
004334  2               prskey:
004334  2  2C 21 0E     	bit PORT_A
004337  2  10 FB        	bpl prskey
004339  2               relkey:
004339  2  2C 21 0E     	bit PORT_A
00433C  2  30 FB        	bmi relkey
00433E  2  60           	rts
00433F  2               
00433F  2               ;======================================================================
00433F  2               ; Sprite routines
00433F  2               ;======================================================================
00433F  2               
00433F  2               ;-----------------------------------------------------------------
00433F  2               ; These are the sprite routines.
00433F  2               ; sspria = single sprite, old (ix).
00433F  2               ; ssprib = single sprite, new (ix+5).
00433F  2               ; sspric = both sprites, old (ix) and new (ix+5).
00433F  2               ;-----------------------------------------------------------------
00433F  2               
00433F  2               sspria:
00433F  2  20 92 32     	jsr gsprad		; get old sprite address.
004342  2               sspri2:
004342  2  A5 64        	lda z80_e
004344  2  8D 9B 43     	sta dline1+1		; Set spritedata address
004347  2  A5 65        	lda z80_d
004349  2  8D 9C 43     	sta dline1+2
00434C  2               
00434C  2  86 rr        	stx xtmp
00434E  2  A2 00        	ldx #0			; vertical lines.
004350  2               sspri0:
004350  2  20 93 43     	jsr dline		; draw a line.
004353  2               
004353  2               ;.if bflag
004353  2               ;	cpx #16			; Detect end of line 3
004353  2               ;.else
004353  2  E0 14        	cpx #20			; Detect end of line 2
004355  2               ;.endif
004355  2               
004355  2  D0 F9        	bne sspri0		; no, repeat
004357  2  A6 rr        	ldx xtmp
004359  2  60           	rts
00435A  2               
00435A  2               ;-----------------------------------------------------------------
00435A  2               ; ssprib = single sprite, new (ix).
00435A  2               ;-----------------------------------------------------------------
00435A  2               
00435A  2               ssprib:
00435A  2  20 73 32     	jsr gspran 		; get new sprite address.
00435D  2               				; z80_de = new sprite address
00435D  2  4C 42 43     	jmp sspri2
004360  2               
004360  2               ;-----------------------------------------------------------------
004360  2               ; sspric = erase old sprite and plot new sprite line by line
004360  2               ;-----------------------------------------------------------------
004360  2               
004360  2               sspric:
004360  2  20 92 32     	jsr gsprad 		; get old sprite address.
004363  2               				; z80_de = old sprite address
004363  2  A5 64        	lda z80_e
004365  2  8D B4 43     	sta ddline1+1		; Set spritedata address
004368  2  A5 65        	lda z80_d
00436A  2  8D B5 43     	sta ddline1+2
00436D  2  20 D9 43     	jsr exx  		; store addresses.
004370  2               
004370  2  20 73 32     	jsr gspran 		; get new sprite addresses.
004373  2               				; z80_de = old sprite address
004373  2  A5 64        	lda z80_e
004375  2  8D 9B 43     	sta dline1+1		; Set spritedata address
004378  2  A5 65        	lda z80_d
00437A  2  8D 9C 43     	sta dline1+2
00437D  2               
00437D  2  86 rr        	stx xtmp
00437F  2  A2 00        	ldx #0			; vertical lines.
004381  2               lloop:
004381  2  20 93 43     	jsr dline 		; draw a line.
004384  2  CA           	dex
004385  2  CA           	dex
004386  2  CA           	dex
004387  2  CA           	dex
004388  2  CA           	dex
004389  2  20 AC 43     	jsr ddline 		; delete a line.
00438C  2               
00438C  2               ;.if bflag
00438C  2               ;	cpx #16			; Detect end of line 3
00438C  2               ;.else
00438C  2  E0 14        	cpx #20			; Detect end of line 2
00438E  2               ;.endif
00438E  2  D0 F1        	bne lloop		; no, repeat
004390  2  A6 rr        	ldx xtmp
004392  2  60           	rts
004393  2               
004393  2               ;-----------------------------------------------------------------
004393  2               ; Erase sprite line
004393  2               ;-----------------------------------------------------------------
004393  2               
004393  2               dline:
004393  2  BC C5 43     	ldy sprline,x		; point to screenleft
004396  2               
004396  2  A9 05        	lda #5
004398  2  85 rr        	sta rrow
00439A  2               dline1:
00439A  2  BD B0 3E     	lda objdta,x		; fetch spriteleft byte
00439D  2  F0 06        	beq :+
00439F  2  51 rr        	eor (scraddr),y		; merge with screenleft
0043A1  2  09 20        	ora #$20		; Set bit 5
0043A3  2  91 rr        	sta (scraddr),y		; write screenleft
0043A5  2               :
0043A5  2  E8           	inx			; next spritebyte
0043A6  2  C8           	iny			; point to screenmiddle
0043A7  2               
0043A7  2  C6 rr        	dec rrow
0043A9  2  D0 EF        	bne dline1
0043AB  2  60           	rts
0043AC  2               
0043AC  2               ;-----------------------------------------------------------------
0043AC  2               ; Draw sprite line
0043AC  2               ;-----------------------------------------------------------------
0043AC  2               
0043AC  2               ddline:
0043AC  2  BC C5 43     	ldy sprline,x		; point to screenleft
0043AF  2               
0043AF  2  A9 05        	lda #5
0043B1  2  85 rr        	sta rrow
0043B3  2               ddline1:
0043B3  2  BD B0 3E     	lda objdta,x		; fetch spriteleft byte
0043B6  2  F0 06        	beq :+
0043B8  2  51 72        	eor (z80_hlp),y		; merge with screenleft
0043BA  2  09 20        	ora #$20		; Set bit 5
0043BC  2  91 72        	sta (z80_hlp),y		; write spritedata0
0043BE  2               :
0043BE  2  E8           	inx			; next spritebyte
0043BF  2  C8           	iny			; point to screenmiddle
0043C0  2               
0043C0  2  C6 rr        	dec rrow
0043C2  2  D0 EF        	bne ddline1
0043C4  2  60           	rts
0043C5  2               
0043C5  2               ;-----------------------------------------------------------------
0043C5  2               ; Spritebyte location on screen
0043C5  2               ;-----------------------------------------------------------------
0043C5  2               
0043C5  2               sprline:
0043C5  2  00 01 02 03  	.byte $00,$01,$02,$03,$04
0043C9  2  04           
0043CA  2  28 29 2A 2B  	.byte $28,$29,$2a,$2b,$2c
0043CE  2  2C           
0043CF  2  50 51 52 53  	.byte $50,$51,$52,$53,$54
0043D3  2  54           
0043D4  2  78 79 7A 7B  	.byte $78,$79,$7a,$7b,$7c
0043D8  2  7C           
0043D9  2               
0043D9  1               	.include "z80.asm"
0043D9  2               ;------------------------------------------------------
0043D9  2               ; z80.asm
0043D9  2               ; spectrum stuff
0043D9  2               ; adresses
0043D9  2               
0043D9  2               
0043D9  2               ; Contains seperatly 1 bit set
0043D9  2               
0043D9  2               _bitmem0	= $f8
0043D9  2               _bitmem1	= $f9
0043D9  2               _bitmem2	= $fa
0043D9  2               _bitmem3	= $fb
0043D9  2               _bitmem4	= $fc
0043D9  2               _bitmem5	= $fd
0043D9  2               _bitmem6	= $fe
0043D9  2               _bitmem7	= $ff
0043D9  2               
0043D9  2               ; constants
0043D9  2               _bitvalue0	= $01
0043D9  2               _bitvalue1	= $02
0043D9  2               _bitvalue2	= $04
0043D9  2               _bitvalue3	= $08
0043D9  2               _bitvalue4	= $10
0043D9  2               _bitvalue5	= $20
0043D9  2               _bitvalue6	= $40
0043D9  2               _bitvalue7	= $80
0043D9  2               
0043D9  2               _notbitvalue0	= $fe
0043D9  2               _notbitvalue1	= $fd
0043D9  2               _notbitvalue2	= $fb
0043D9  2               _notbitvalue3	= $f7
0043D9  2               _notbitvalue4	= $ef
0043D9  2               _notbitvalue5	= $df
0043D9  2               _notbitvalue6	= $bf
0043D9  2               _notbitvalue7	= $7f
0043D9  2               
0043D9  2               
0043D9  2               exx:
0043D9  2  A5 62        		lda z80_c
0043DB  2  A4 6E        		ldy z80_cp
0043DD  2  84 62        		sty z80_c
0043DF  2  85 6E        		sta z80_cp
0043E1  2  A5 63        		lda z80_b
0043E3  2  A4 6F        		ldy z80_bp
0043E5  2  84 63        		sty z80_b
0043E7  2  85 6F        		sta z80_bp
0043E9  2  A5 64        		lda z80_e
0043EB  2  A4 70        		ldy z80_ep
0043ED  2  84 64        		sty z80_e
0043EF  2  85 70        		sta z80_ep
0043F1  2  A5 65        		lda z80_d
0043F3  2  A4 71        		ldy z80_dp
0043F5  2  84 65        		sty z80_d
0043F7  2  85 71        		sta z80_dp
0043F9  2  A5 rr        		lda scraddr
0043FB  2  A4 72        		ldy z80_lp
0043FD  2  84 rr        		sty scraddr
0043FF  2  85 72        		sta z80_lp
004401  2  A5 rr        		lda scraddr+1
004403  2  A4 73        		ldy z80_hp
004405  2  84 rr        		sty scraddr+1
004407  2  85 73        		sta z80_hp
004409  2  60           		rts
00440A  2               
00440A  2               
00440A  1               eind_asm:
00440A  1               eop:					; End Of Program
00440A  1               
00440A  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
00440A  1               
