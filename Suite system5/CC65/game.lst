ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "kcmunchkin.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 8E 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  11 3D        msgptr:		.word msgdat	; messages
002811  3  60 3D        blkptr:		.word chgfx	; block graphics.
002813  3  64 3D        proptr:		.word bprop	; address of char properties.
002815  3  66 3D        sptptr:		.word sprgfx	; sprite graphics
002817  3  C6 3D        frmptr:		.word frmlst	; sprite frames.
002819  3  CC 3D        scrptr:		.word scdat	; address of screens.
00281B  3  19 3F        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  22 3F        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3  04 03 02 01  txtcol:		.byte green,yellow,blue,red
002823  3               
002823  3               ; Don't change the order of these four.
002823  3               ; Menu routine relies on winlft following wintop.
002823  3               
002823  3  00           wintop:		.byte WINDOWTOP	; top of window.
002824  3  01           winlft:		.byte WINDOWLFT	; left edge.
002825  3  19           winhgt:		.byte WINDOWHGT	; window height.
002826  3  27           winwid:		.byte WINDOWWID	; window width.
002827  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002828  3               
002828  3               ; Variables start here.
002828  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002828  3               
002828  3  00           wntopx:		.byte (3 * WINDOWTOP)
002829  3  02           wnlftx:		.byte (2 * WINDOWLFT)
00282A  3  42           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
00282B  3  46           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
00282C  3               
00282C  3               ; Assorted game routines which can go in contended memory.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for inventory called by the INV command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with objects seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected objectnr of INV menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               .if mflag
00282C  3               minve:
00282C  3               .if gflag
00282C  3               	lda #$ff		; blue frontcolour
00282C  3               	sta andeor
00282C  3               	lda #$aa		; yellow backcoloour
00282C  3               	sta andeor+1
00282C  3               .endif
00282C  3               	lda #<(invdis)		; routine address.
00282C  3               	sta mod0+1		; set up menu routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(invdis)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               	lda #<(fopt)		; find option from available objects.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fopt)
00282C  3               	sta mod1+1+1
00282C  3               	jmp dbox		; do menu routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for menu called by the MENU command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with menu items seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected line nr of MENU menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               mmenu:
00282C  3               	lda #<(always)		; routine address.
00282C  3               	sta mod0+1		; set up routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(always)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               
00282C  3               	lda #<(fstd)		; standard option selection.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fstd)
00282C  3               	sta mod1+2
00282C  3               
00282C  3               ; Drop through into box routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Work out size of box for message or menu.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               dbox:
00282C  3               	lda #<(msgdat)		; pointer to messages.
00282C  3               	sta z80_l
00282C  3               	lda #>(msgdat)
00282C  3               	sta z80_h
00282C  3               
00282C  3               	jsr getwrd		; get message number.
00282C  3               
00282C  3               	lda z80_h		; store pointer to message.
00282C  3               	sta TmpAddr
00282C  3               	lda z80_l
00282C  3               	sta TmpAddr+1
00282C  3               
00282C  3               	lda #1			; height.
00282C  3               	sta z80_d
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               	sta z80_e		; maximum width.
00282C  3               dbox5:
00282C  3               	lda #0			; this line"s width.
00282C  3               	sta z80_b
00282C  3               mod2:
00282C  3               	jsr always		; item in player"s possession?
00282C  3               	cmp #255
00282C  3               	bne dbox6		; not in inventory, skip this line.
00282C  3               	inc z80_d		; add to tally.
00282C  3               dbox6:
00282C  3               	ldy #0			; get character.
00282C  3               	lda (z80_hl),y
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a		; reached end of line?
00282C  3               	cmp #','
00282C  3               	beq dbox3		; yes.
00282C  3               	cmp #13
00282C  3               	beq dbox3		; yes.
00282C  3               	inc z80_b		; add to this line"s width.
00282C  3               	lda z80_a
00282C  3               	bmi dbox4		; end of message? yes, end count.
00282C  3               	jmp dbox6		; repeat until we find the end.
00282C  3               dbox3:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox5		; no, carry on looking.
00282C  3               	lda z80_b		; make this the widest so far.
00282C  3               	sta z80_e
00282C  3               	jmp dbox5		; keep looking.
00282C  3               dbox4:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox8		; no, carry on looking.
00282C  3               	lda z80_b		; final line is the longest so far.
00282C  3               	sta z80_e
00282C  3               dbox8:
00282C  3               	dec z80_d		; decrement items found.
00282C  3               	bne :+			; total was zero.
00282C  3               	lda #255
00282C  3               	sta varopt
00282C  3               	jmp dbox15
00282C  3               :
00282C  3               	lda z80_e		; longest line.
00282C  3               	bne :+			; was it zero?
00282C  3               	jmp dbox15		; total was zero.
00282C  3               :
00282C  3               	sta bwid		; set up size.
00282C  3               	lda z80_d
00282C  3               	sta blen
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; That's set up our box size.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               	lda winhgt		; window height in characters.
00282C  3               	sec
00282C  3               	sbc z80_d		; subtract height of box.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc wintop		; add top edge of window.
00282C  3               	sta btop		; set up box top.
00282C  3               
00282C  3               	lda winwid		; window width in characters.
00282C  3               	sec
00282C  3               	sbc z80_e		; subtract box width.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc winlft		; add left edge of window.
00282C  3               	sta blft		; box left.
00282C  3               
00282C  3               	lda #<(FONT-256)		; font.
00282C  3               	sta grbase		; set up for text display.
00282C  3               	lda #>(FONT-256)
00282C  3               	sta grbase+1
00282C  3               
00282C  3               	lda TmpAddr+1		; restore message pointer.
00282C  3               	sta z80_l
00282C  3               	lda TmpAddr
00282C  3               	sta z80_h
00282C  3               
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set display coordinate.
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               dbox2:
00282C  3               	lda combyt		; get object number.
00282C  3               	sta z80_a
00282C  3               mod0:
00282C  3               	jsr always		; check inventory for display.
00282C  3               	cmp #255
00282C  3               	beq :+
00282C  3               	jmp dbox13		; not in inventory, skip this line.
00282C  3               :
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set left display position.
00282C  3               	lda bwid		; box width.
00282C  3               	sta z80_b		; store width.
00282C  3               dbox0:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	cmp #','		; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               	cmp #13			; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               
00282C  3               	cmp #141			; end of line?
00282C  3               	bne :+
00282C  3               	dec bwid
00282C  3               	jmp dbox7		; yes, next one.
00282C  3               :
00282C  3               	dec z80_b		; one less to display.
00282C  3               	and #127		; remove terminator.
00282C  3               
00282C  3               	jsr pchr		; display on screen.
00282C  3               
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a
00282C  3               	cmp #128		; end of message?
00282C  3               	bmi :+
00282C  3               	jmp dbox7		; yes, job done.
00282C  3               :
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	beq :+			; are any left?
00282C  3               	jmp dbox0		; yes, continue.
00282C  3               :
00282C  3               ;---------------------------------------------------
00282C  3               ; Reached limit of characters per line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dbox9:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #13			; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #128		; end of message?
00282C  3               	bcs :+
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox9
00282C  3               
00282C  3               ;---------------------------------------------------
00282C  3               ; Fill box to end of line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dboxf:
00282C  3               	lda #32			; space character.
00282C  3               	jsr pchr		; display character.
00282C  3               	dec z80_b
00282C  3               	beq :+
00282C  3               	jmp dboxf		; repeat for remaining chars on line.
00282C  3               :
00282C  3               	rts
00282C  3               dbox1:
00282C  3               	inc z80_l		; skip character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	jsr dboxf		; fill box out to right side.
00282C  3               dbox10:
00282C  3               	inc dispy		; y coordinate down a line next position.
00282C  3               	jmp dbox2		; next line.
00282C  3               dbox7:
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	bne :+			; are any left?
00282C  3               	jmp dbox11		; no, nothing to draw.
00282C  3               :
00282C  3               	jsr dboxf		; fill message to line.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Drawn the box menu, now select option.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox11:
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set bar position.
00282C  3               dbox14:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	bne dbox14		; yes, debounce it.
00282C  3               	jsr dbar		; draw bar.
00282C  3               dbox12:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	beq dbox12		; no, nothing.
00282C  3               	and #16			; fire button pressed?
00282C  3               	bne :+
00282C  3               mod1:
00282C  3               	jmp fstd		; yes, job done.
00282C  3               :
00282C  3               	jsr dbar		; delete bar.
00282C  3               
00282C  3               	lda joyval		; joystick reading.
00282C  3               	and #8			; going up?
00282C  3               	beq dboxu		; yes, go up.
00282C  3               
00282C  3               	ldx dispy		; vertical position of bar.
00282C  3               	inx			; look down.
00282C  3               	txa
00282C  3               	sec
00282C  3               	sbc btop		; find distance from top.
00282C  3               	cmp blen		; top of box.
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	inc dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               dboxu:
00282C  3               	lda dispy		; vertical position of bar.
00282C  3               	cmp btop		; are we at the top?
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	dec dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               fstd:
00282C  3               	lda dispy		; bar position.
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta varopt		; store the option.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Option not available.  Skip this line.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox13:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               	cmp #13			; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               
00282C  3               	bpl :+			; end of message?
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox13
00282C  3               dbox15:
00282C  3               	lda TmpAddr		; pop message pointer from the stack.
00282C  3               	sta z80_h
00282C  3               	lda TmpAddr+1
00282C  3               	sta z80_l
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Invert bar
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbar:
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set display coordinate.
00282C  3               	jsr gprad		; get printing address.
00282C  3               
00282C  3               	lda bwid		; box width.
00282C  3               	sta z80_c		; loop counter in c.
00282C  3               	lda z80_h
00282C  3               	sta z80_d		; store screen address high byte.
00282C  3               dbar1:
00282C  3               	ldx #7			; pixel height in b.
00282C  3               dbar0:
00282C  3               	ldy scrtab,x
00282C  3               	lda (scraddr),y		; get screen byte.
00282C  3               	eor #255		; reverse all bits.
00282C  3               	sta (scraddr),y		; write back to screen.
00282C  3               	dex			; next line down.
00282C  3               	bpl dbar0		; draw rest of character.
00282C  3               
00282C  3               	inc scraddr		; one char right.
00282C  3               	dec z80_c		; decrement character counter.
00282C  3               	bne dbar1		; repeat for whole line.
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Point to object
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  combyt
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  A = object number, A=255 if already in possession
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               invdis:
00282C  3               	lda z80_l		; store message text pointer.
00282C  3               	pha
00282C  3               	lda z80_h
00282C  3               	pha
00282C  3               	lda combyt		; object number.
00282C  3               	inc combyt		; ready for next one.
00282C  3               	jsr gotob		; check if we have object.
00282C  3               	tay
00282C  3               	pla
00282C  3               	sta z80_h
00282C  3               	pla
00282C  3               	sta z80_l
00282C  3               	tya
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Find option selected.
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  -
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected object
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               fopt:
00282C  3               	lda dispy
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta tmp+2		; option selected in b register.
00282C  3               	inc tmp+2
00282C  3               
00282C  3               	lda #0			; set to first item.
00282C  3               	sta combyt		; object number.
00282C  3               fopt0:
00282C  3               	jsr fobj		; find next object in inventory.
00282C  3               	dec tmp+2
00282C  3               	bne fopt0		; repeat for relevant steps down the list.
00282C  3               
00282C  3               	lda combyt		; get option.
00282C  3               	sta varopt		; store the option.
00282C  3               	dec varopt		; one less, due to where we increment combyt.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               fobj:
00282C  3               	ldy combyt		; object number.
00282C  3               	inc combyt		; ready for next item.
00282C  3               	tya
00282C  3               	jsr gotob		; do we have this item?
00282C  3               	cmp #255
00282C  3               	bne :+
00282C  3               	rts
00282C  3               :
00282C  3               	jmp fobj		; yes, it's on the list.
00282C  3               
00282C  3               ;bwid:	.byte 0              ; box/menu width.
00282C  3               ;blen:	.byte 0              ; box/menu height.
00282C  3               ;btop:	.byte 0              ; box coordinates.
00282C  3               ;blft:	.byte 0
00282C  3               .endif
00282C  3               
00282C  3               ;----------------------------------------------------
00282C  3               ; Delay routine 1/50 sec
00282C  3               ;
00282C  3               ; Wait 1/60 sec = 16666 usec
00282C  3               ; Wait 208 x 16 =  3328 usec
00282C  3               ;                 19994 usec
00282C  3               ; rts           =     6 usec
00282C  3               ; Total         = 20000 usec
00282C  3               ;----------------------------------------------------
00282C  3               
00282C  3               delay:
00282C  3  85 rr        	sta xtmp
00282E  3               del_loop:
00282E  3  20 F4 FF     	jsr SCRSYNC		; wait for flyback
002831  3               
002831  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002833  3               delay1:
002833  3  61 80        	adc ($80,x)		;	 6 usec
002835  3  61 80        	adc ($80,x)		;	 6 usec
002837  3  88           	dey			;	 2 usec
002838  3  D0 F9        	bne delay1		;	 2 usec
00283A  3  EA           	nop			; 2 usec
00283B  3  EA           	nop			; 2 usec
00283C  3               				; tot: 20000 usec
00283C  3  C6 rr        	dec xtmp
00283E  3  D0 EE        	bne del_loop
002840  3  60           	rts
002841  3               
002841  3               ;----------------------------------------------------
002841  3               ; Clear sprite table.
002841  3               ;
002841  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002841  3               ;----------------------------------------------------
002841  3               
002841  3               xspr:
002841  3  A9 FF        	lda #255		; clear byte.
002843  3  A2 00        	ldx #0			; length of table.
002845  3               xspr0:
002845  3  9D 00 3A     	sta sprtab,x		; sprite table.
002848  3  E8           	inx			; move to next byte.
002849  3  E0 CC        	cpx #SPRBUF
00284B  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284D  3  60           	rts
00284E  3               
00284E  3               ;-------------------------------------------------------------
00284E  3               ; Initialise all objects.
00284E  3               ;
00284E  3               ; Reset current room,y,x to start room,y,x for all objects
00284E  3               ;-------------------------------------------------------------
00284E  3               
00284E  3               .if oflag
00284E  3               iniob:
00284E  3               	lda #<objdta 		; objects table.
00284E  3               	sta z80_x
00284E  3               	lda #>objdta
00284E  3               	sta z80_i
00284E  3               
00284E  3               	ldx numob 		; number of objects in the game.
00284E  3               iniob0:
00284E  3               	ldy #35
00284E  3               	lda (z80_ix),y 		; start screen.
00284E  3               	ldy #32
00284E  3               	sta (z80_ix),y 		; set start screen.
00284E  3               
00284E  3               	ldy #36
00284E  3               	lda (z80_ix),y 		; find start y.
00284E  3               	ldy #33
00284E  3               	sta (z80_ix),y 		; set start y.
00284E  3               
00284E  3               	ldy #37
00284E  3               	lda (z80_ix),y 		; get initial x.
00284E  3               	ldy #34
00284E  3               	sta (z80_ix),y 		; set x coord.
00284E  3               
00284E  3               	clc 			; point to next object.
00284E  3               	lda z80_x
00284E  3               	adc #38			; distance between objects.
00284E  3               	sta z80_x
00284E  3               	bcc :+
00284E  3               	inc z80_i
00284E  3               :
00284E  3               	dex 			; repeat.
00284E  3               	bne iniob0
00284E  3               
00284E  3               	rts
00284E  3               .endif
00284E  3               
00284E  3               ;-----------------------------------------------
00284E  3               ; Redraw the screen.
00284E  3               ;
00284E  3               ; Remove old copy of all sprites for redraw.
00284E  3               ;-----------------------------------------------
00284E  3               
00284E  3               redraw:
00284E  3               .if gflag
00284E  3               	lda #$ff
00284E  3               	sta andeor
00284E  3               	lda #$00
00284E  3               	sta andeor+1
00284E  3               .endif
00284E  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002850  3  48           	pha
002851  3  A5 68        	lda z80_x
002853  3  48           	pha
002854  3               
002854  3  20 61 2D     	jsr droom		; show screen layout.
002857  3               .if oflag
002857  3               	jsr shwob		; draw objects.
002857  3               .endif
002857  3               numsp0:
002857  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002859  3  85 rr        	sta tmp
00285B  3               
00285B  3  A9 00        	lda #<sprtab		; sprite table.
00285D  3  85 68        	sta z80_x
00285F  3  A9 3A        	lda #>sprtab
002861  3  85 69        	sta z80_i
002863  3               redrw0:
002863  3  A0 00        	ldy #0
002865  3  B1 68        	lda (z80_ix),y		; old sprite type.
002867  3  C9 FF        	cmp #255		; is it enabled?
002869  3  F0 0B        	beq redrw1 		; no, find next one.
00286B  3               
00286B  3  A0 03        	ldy #3
00286D  3  B1 68        	lda (z80_ix),y 		; sprite y.
00286F  3  C9 B1        	cmp #177		; beyond maximum?
002871  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002873  3               
002873  3  20 97 34     	jsr sspria		; show single sprite.
002876  3               redrw1:
002876  3  18           	clc			; next sprite.
002877  3  A5 68        	lda z80_x
002879  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00287B  3  85 68        	sta z80_x
00287D  3  90 02        	bcc :+
00287F  3  E6 69        	inc z80_i
002881  3               :
002881  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002883  3  D0 DE        	bne redrw0
002885  3               rpblc1:
002885  3               ;	jsr dshrp		; redraw shrapnel.
002885  3               
002885  3               .if aflag
002885  3               	jsr rbloc		; draw blocks for this screen
002885  3               .endif
002885  3  68           	pla			; retrieve sprite pointer.
002886  3  85 68        	sta z80_x
002888  3  68           	pla
002889  3  85 69        	sta z80_i
00288B  3               
00288B  3  60           	rts
00288C  3               
00288C  3               ;----------------------------------------------------------------------
00288C  3               ; Atomic palette is static
00288C  3               ;----------------------------------------------------------------------
00288C  3               
00288C  3               setpal:
00288C  3  60           	rts
00288D  3               
00288D  3               ;----------------------------------------------------------------------
00288D  3               ; FODDER check
00288D  3               ;----------------------------------------------------------------------
00288D  3               
00288D  3               .if pflag .or dflag
00288D  3               fdchk:
00288D  3               	cmp #FODDER 		; is it fodder?
00288D  3               	beq :+
00288D  3               	rts 			; no.
00288D  3               :
00288D  3               	lda #0			; wipe fodder in MAP
00288D  3               	ldy #0
00288D  3               	sta (bufaddr),y 	; rewrite block type.
00288D  3               
00288D  3               	lda dispx		; x=x/8
00288D  3               	pha
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	sta dispx
00288D  3               
00288D  3               	lda dispy		; y=y/8
00288D  3               	pha
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	lsr a
00288D  3               	sta dispy
00288D  3               
00288D  3               	lda #0 			; block to write.
00288D  3               	jsr pattr 		; write block.
00288D  3               
00288D  3               	pla
00288D  3               	sta dispy
00288D  3               	pla
00288D  3               	sta dispx
00288D  3               	rts
00288D  3               .endif
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Scrolly text and puzzle variables.
00288D  3               ;----------------------------------------------------
00288D  3               
00288D  3               .if sflag
00288D  3               txtbit:	.byte 128		; bit to write.
00288D  3               txtwid:	.byte 16		; width of ticker message.
00288D  3               txtpos:	.word msgdat
00288D  3               txtini:	.word msgdat
00288D  3               txtscr:	.word ScreenAddr
00288D  3               .endif
00288D  3               
00288D  3               ;----------------------------------------------------
00288D  3               ; Specialist routines.
00288D  3               ; Process shrapnel.
00288D  3               ;----------------------------------------------------
00288D  3               proshr:
00288D  3               .if pflag
00288D  3               	lda #<SHRAPN		; table.
00288D  3               	sta z80_x
00288D  3               	lda #>SHRAPN
00288D  3               	sta z80_i
00288D  3               
00288D  3               	lda #NUMSHR		; shrapnel pieces to process.
00288D  3               	sta shrctr
00288D  3               prosh0:
00288D  3               	ldy #0
00288D  3               	lda (z80_ix),y		; on/off marker.
00288D  3               	asl a
00288D  3               proshx:
00288D  3               	bcs :+
00288D  3               	jsr prosh1 		; on, so process it.
00288D  3               :
00288D  3               	clc
00288D  3               	lda z80_x
00288D  3               	adc #SHRSIZ
00288D  3               	sta z80_x
00288D  3               	bcc :+
00288D  3               	inc z80_i
00288D  3               :
00288D  3               	dec shrctr		; round again.
00288D  3               	bne prosh0
00288D  3               .endif
00288D  3               .if sflag
00288D  3               	jsr scrly
00288D  3               .endif
00288D  3  60           	rts
00288E  3               
00288E  3               .if pflag
00288E  3               ;shrctr:	.byte 0
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Proces shrapnel piece
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               prosh1:
00288E  3               	jsr plot 		; delete the pixel.
00288E  3               
00288E  3               	lda #<shrptr		; shrapnel routine pointers.
00288E  3               	sta z80_l
00288E  3               	lda #>shrptr
00288E  3               	sta z80_h
00288E  3               
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y		; restore shrapnel type.
00288E  3               	jsr prosh2 		; run the routine.
00288E  3               	jsr chkxy		; check x and y are good before we redisplay.
00288E  3               
00288E  3               	lda #<SHRSIZ 		; distance to next.
00288E  3               	sta z80_e
00288E  3               	lda #>SHRSIZ
00288E  3               	sta z80_d
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Run the routine
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               prosh2:
00288E  3               	asl a 			; 2 bytes per address.
00288E  3               	tay
00288E  3               	lda shrptr,y
00288E  3               	sta z80_l
00288E  3               	lda shrptr+1,y 		; fetch high byte from table.
00288E  3               	sta z80_h
00288E  3               	jmp (z80_hl) 		; jump to routine.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Paricle routine table
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shrptr:	.word laser		; laser.
00288E  3               	.word trail		; vapour trail.
00288E  3               	.word shrap		; shrapnel from explosion.
00288E  3               	.word dotl		; horizontal starfield left.
00288E  3               	.word dotr		; horizontal starfield right.
00288E  3               	.word dotu		; vertical starfield up.
00288E  3               	.word dotd		; vertical starfield down.
00288E  3               	.word ptcusr		; user particle.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Explosion shrapnel.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shrap:
00288E  3               	ldy #1
00288E  3               	lda (z80_ix),y 		; get the angle.
00288E  3               	clc
00288E  3               	adc #<shrsin		; shrapnel sine table.
00288E  3               	sta z80_l
00288E  3               	lda #>shrsin
00288E  3               	adc #0
00288E  3               	sta z80_h
00288E  3               
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; fetch value from table.
00288E  3               	sta z80_e
00288E  3               	inc z80_l 		; next byte of table.
00288E  3               	bne :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y		; fetch value from table.
00288E  3               	sta z80_d
00288E  3               	inc z80_l		; next byte of table.
00288E  3               	bne :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; fetch value from table.
00288E  3               	sta z80_c
00288E  3               	inc z80_l 		; next byte of table.
00288E  3               	bne :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; fetch value from table.
00288E  3               	sta z80_b
00288E  3               
00288E  3               	ldy #2
00288E  3               	lda (z80_ix),y 		; x coordinate in hl.
00288E  3               	clc
00288E  3               	adc z80_e		; add sine lb
00288E  3               	sta (z80_ix),y		; store new coordinate lb.
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	adc z80_d		; add sine hb
00288E  3               	sta (z80_ix),y		; store new coordinate hb.
00288E  3               
00288E  3               	ldy #4
00288E  3               	lda (z80_ix),y	 	; y coordinate in hl.
00288E  3               	clc
00288E  3               	adc z80_c		; add cosine lb
00288E  3               	sta (z80_ix),y		; store new coordinate lb.
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	adc z80_b		; add cosine lb
00288E  3               	sta (z80_ix),y		; store new coordinate hb.
00288E  3               
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Move dots
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               dotl:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1		 	; move left.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               dotr:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1		 	; move left.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               dotu:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1		 	; move up.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               dotd:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1			; move down.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Check if coordinates are ok before redrawing at new position.
00288E  3               ;
00288E  3               ; left:   X>L		X=L	Ok
00288E  3               ; right:  R+15>X	X=R	Ok
00288E  3               ; top:    Y>T		Y=T	Ok
00288E  3               ; bottom: B+15>Y	Y=B	Ok
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               chkxy:
00288E  3               
00288E  3               ; top:    Y>T		Y=T	Ok
00288E  3               
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	cmp wntopx		; window top.
00288E  3               	bcs :+			; compare with top window limit.
00288E  3               	jmp kilshr		; out of window, kill shrapnel.
00288E  3               :
00288E  3               ; left:   X>L		X=L	Ok
00288E  3               
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	cmp wnlftx		; left edge.
00288E  3               	bcs :+			; compare with left window limit.
00288E  3               	jmp kilshr		; out of window, kill shrapnel.
00288E  3               :
00288E  3               ; bottom: B+15>Y	Y=B	Ok
00288E  3               
00288E  3               	lda wnbotx		; point to bottom.
00288E  3               	clc
00288E  3               	adc #15
00288E  3               	ldy #3
00288E  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	bcs :+			; compare with shrapnel x coordinate.
00288E  3               	jmp kilshr		; off screen, kill shrapnel..
00288E  3               :
00288E  3               ; right:  R+15>X	X=R	Ok
00288E  3               
00288E  3               	lda wnrgtx		; point to right edge.
00288E  3               	clc
00288E  3               	adc #15
00288E  3               	ldy #5
00288E  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00288E  3               	bcs :+			; compare with window limit.
00288E  3               	jmp kilshr		; off screen, kill shrapnel.
00288E  3               :
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Drop through.
00288E  3               ; Display shrapnel.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               plot:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y		; y integer.
00288E  3               	sta dispy	 	; workspace coordinates.
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y	 	; x integer.
00288E  3               	sta dispx 		; workspace coordinates.
00288E  3               
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y 		; type.
00288E  3               	bne :+			; is it a laser?
00288E  3               	jmp plot1 		; yes, draw laser instead.
00288E  3               :
00288E  3               plot0:
00288E  3               	lda dispx		; which pixel within byte do we
00288E  3               	and #7			; want to set first?
00288E  3               	tay
00288E  3               	lda dots,y 		; table of small pixel positions.
00288E  3               	sta z80_e 		; get value.
00288E  3               
00288E  3               	jsr scadd 		; screen address.
00288E  3               	ldy #0
00288E  3               	lda (scraddr),y		; see what's already there.
00288E  3               	eor z80_e
00288E  3               	sta (scraddr),y 	; put back on screen.
00288E  3               	rts
00288E  3               
00288E  3               plot1:
00288E  3               	jsr scadd 		; screen address.
00288E  3               	ldy #0
00288E  3               	lda (scraddr),y 	; fetch byte there.
00288E  3               	eor #255 		; toggle all bits.
00288E  3               	sta (scraddr),y 	; new byte.
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Switch off shrapnel
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               kilshr:
00288E  3               	lda #128
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y	; switch off shrapnel.
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Sine/cosine table
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shrsin:	.word 0,1024,391,946,724,724,946,391
00288E  3               	.word 1024,0,946,65144,724,64811,391,64589
00288E  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
00288E  3               	.word 64512,0,64589,391,64811,724,65144,946
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create trail
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               trail:
00288E  3               	ldy #1
00288E  3               	lda (z80_ix),y 	; time remaining.
00288E  3               	sec
00288E  3               	sbc #1
00288E  3               	sta (z80_ix),y
00288E  3               	bne :+
00288E  3               	jmp trailk		; time to switch it off.
00288E  3               :
00288E  3               	jsr qrand		; get a random number.
00288E  3               	lsr a 			; x or y axis?
00288E  3               	bcc :+
00288E  3               	jmp trailv		; use y.
00288E  3               :
00288E  3               ; Trail horizontal
00288E  3               
00288E  3               	lsr a 			; which direction?
00288E  3               	bcc :+
00288E  3               	jmp traill		; go left.
00288E  3               :
00288E  3               ; Trail right
00288E  3               
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1	 		; go right.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Trail left
00288E  3               
00288E  3               traill:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1 			; go left.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Trail vertical
00288E  3               
00288E  3               trailv:
00288E  3               	lsr a		 	; which direction?
00288E  3               	bcc :+
00288E  3               	jmp trailu		; go up.
00288E  3               :
00288E  3               ; Trail down
00288E  3               
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	clc
00288E  3               	adc #1 			; go down.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Trail up
00288E  3               
00288E  3               trailu:
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y
00288E  3               	sec
00288E  3               	sbc #1 			; go up.
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ; Kill trail
00288E  3               
00288E  3               trailk:
00288E  3               	lda #200		; set off-screen to kill vapour trail.
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create laser beam
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               laser:
00288E  3               	ldy #1
00288E  3               	lda (z80_ix),y 		; direction.
00288E  3               	ror a 			; left or right?
00288E  3               	bcs :+
00288E  3               	jmp laserl		; move left.
00288E  3               :
00288E  3               ; Laser right
00288E  3               
00288E  3               	lda #8			; distance to travel.
00288E  3               	sta z80_b
00288E  3               	jmp laserm		; move laser.
00288E  3               
00288E  3               ; Laser left
00288E  3               
00288E  3               laserl:
00288E  3               	lda #248		; distance to travel.
00288E  3               	sta z80_b
00288E  3               laserm:
00288E  3               	ldy #5
00288E  3               	lda (z80_ix),y		; x position.
00288E  3               	clc
00288E  3               	adc z80_b		; add distance.
00288E  3               	sta (z80_ix),y		; set new x coordinate.
00288E  3               
00288E  3               ; Test new block.
00288E  3               
00288E  3               	sta dispx 		; set x for block collision detection purposes.
00288E  3               	ldy #3
00288E  3               	lda (z80_ix),y 		; get y.
00288E  3               	sta dispy		; set coordinate for collision test.
00288E  3               	jsr tstbl 		; get block type there.
00288E  3               	cmp #WALL		; is it solid?
00288E  3               	bne :+
00288E  3               	jmp trailk		; yes, it cannot pass.
00288E  3               :
00288E  3               .if pflag .or dflag
00288E  3                       cmp #FODDER             ; is it fodder?
00288E  3                       bne :+
00288E  3                       jsr fdchk               ; remove fodder block.
00288E  3                       jmp trailk              ; destroy laser.
00288E  3               :
00288E  3               .endif
00288E  3                       rts                     ; no, ignore it.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Dots mask
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               dots:	.byte 128,64,32,16,8,4,2,1
00288E  3               
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Plot, preserving de.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               plotde:
00288E  3               	lda z80_d 		; put de on stack.
00288E  3               	pha
00288E  3               	lda z80_e
00288E  3               	pha
00288E  3               
00288E  3               	jsr plot 		; plot pixel.
00288E  3               
00288E  3               	pla			; restore de from stack.
00288E  3               	sta z80_e
00288E  3               	pla
00288E  3               	sta z80_d
00288E  3               
00288E  3               	rts
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Shoot a laser.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               shoot:
00288E  3               	sta z80_c		; store direction in c register.
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	clc
00288E  3               shoot1:
00288E  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
00288E  3               	sta z80_l 		; puty y coordinate in l.
00288E  3               
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y 		; x coordinate in h.
00288E  3               	sta z80_h
00288E  3               
00288E  3               	lda z80_i		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcs :+
00288E  3               	jmp vapou2		; failed, restore ix.
00288E  3               :
00288E  3               	lda #0
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y 		; set up a laser.
00288E  3               
00288E  3               	lda z80_c
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y 		; set the direction.
00288E  3               
00288E  3               	lda z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; set y coordinate.
00288E  3               
00288E  3               	ror z80_c		; check direction we want.
00288E  3               	bcc :+
00288E  3               	jmp shootr		; shoot right.
00288E  3               :
00288E  3               	lda z80_h		; X position.
00288E  3               shoot0:
00288E  3               	and #248		; align on character boundary.
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; set x coordinate.
00288E  3               	jmp vapou0 		; draw first image.
00288E  3               shootr:
00288E  3               	lda z80_h		; x position.
00288E  3               	clc
00288E  3               	adc #15			; look right.
00288E  3               	jmp shoot0		; align and continue.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create a bit of vapour trail.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               vapour:
00288E  3               	lda z80_i		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	clc
00288E  3               vapou3:
00288E  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00288E  3               	sta z80_l
00288E  3               
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y 		; x coordinate.
00288E  3               	adc #7
00288E  3               	sta z80_h
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcc :+
00288E  3               	jmp vapou1		; no, we can use it.
00288E  3               :
00288E  3               vapou2:
00288E  3               	pla
00288E  3               	sta z80_x
00288E  3               	pla
00288E  3               	sta z80_i
00288E  3               	rts
00288E  3               vapou1:
00288E  3               	lda z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; set up y.
00288E  3               
00288E  3               	lda z80_h
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y 		; set up x coordinate.
00288E  3               
00288E  3               	jsr qrand		; get quick random number.
00288E  3               	and #15			; random time.
00288E  3               	clc
00288E  3               	adc #15			; minimum time on screen.
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y		; set time on screen.
00288E  3               
00288E  3               	lda #1
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; define particle as vapour trail.
00288E  3               vapou0:
00288E  3               	jsr chkxy		; plot first position.
00288E  3               	jmp vapou2
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create a user particle.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               ptusr:
00288E  3               	sta z80_f		; store timer.
00288E  3               
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	clc
00288E  3               	adc #7			; mid-point of sprite.
00288E  3               	sta z80_l
00288E  3               
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y 		; x coordinate.
00288E  3               	clc
00288E  3               	adc #7			; mid-point of sprite.
00288E  3               	sta z80_h
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcs ptusr1
00288E  3               	rts 			; out of slots, can't generate anything.
00288E  3               ptusr1:
00288E  3               	lda z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y 		; set up y.
00288E  3               
00288E  3               	lda z80_h
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; set up x coordinate.
00288E  3               
00288E  3               	lda z80_f 		; restore timer.
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y		; set time on screen.
00288E  3               
00288E  3               	lda #7
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; define particle as user particle.
00288E  3               
00288E  3               	jmp chkxy		; plot first position.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create a vertical or horizontal star.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               star:
00288E  3               	lda z80_i		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	jsr fpslot 		; find particle slot.
00288E  3               	bcs star7		; found one we can use.
00288E  3               star0:
00288E  3               	pla 			; restore sprite pointer.
00288E  3               	sta z80_x
00288E  3               	pla
00288E  3               	sta z80_i
00288E  3               	rts 			; out of slots, can't generate anything.
00288E  3               star7:
00288E  3               	lda z80_c		; direction.
00288E  3               	and #3 			; is it left?
00288E  3               	bne :+
00288E  3               	jmp star1 		; yes, it's left.
00288E  3               :
00288E  3               	cmp #1 			; is it right?
00288E  3               	bne :+
00288E  3               	jmp star2 		; yes, it's right.
00288E  3               :
00288E  3               	cmp #2 			; is it up?
00288E  3               	bne :+
00288E  3               	jmp star3 		; yes, it's up.
00288E  3               :
00288E  3               	ldy wntopx 		; get edge of screen.
00288E  3               	iny			; down one pixel.
00288E  3               	tya
00288E  3               star8:
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y 		; set y coord.
00288E  3               	jsr qrand 		; get quick random number.
00288E  3               star9:
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; set x position.
00288E  3               
00288E  3               	lda z80_c		; direction.
00288E  3               	and #3			; zero to three.
00288E  3               	clc
00288E  3               	adc #3			; 3 to 6 for starfield.
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; define particle as star.
00288E  3               	jsr chkxy		; plot first position.
00288E  3               	jmp star0
00288E  3               star1:
00288E  3               	jsr qrand		; get quick random number.
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y 		; set y coord.
00288E  3               
00288E  3               	lda wnrgtx 		; get edge of screen.
00288E  3               	clc
00288E  3               	adc #15			; add width of sprite minus 1.
00288E  3               	jmp star9
00288E  3               star2:
00288E  3               	jsr qrand 		; get quick random number.
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; set y coord.
00288E  3               
00288E  3               	lda wnlftx		; get edge of screen.
00288E  3               	jmp star9
00288E  3               star3:
00288E  3               	lda wnbotx 		; get edge of screen.
00288E  3               	clc
00288E  3               	adc #15 		; height of sprite minus one pixel.
00288E  3               	jmp star8
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Find particle slot for lasers or vapour trail.
00288E  3               ; can't use alternate accumulator.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               fpslot:
00288E  3               	lda #<SHRAPN 		; shrapnel table.
00288E  3               	sta z80_x
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_i
00288E  3               
00288E  3               	lda #NUMSHR		; number of pieces in table.
00288E  3               	sta z80_b
00288E  3               fpslt0:
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y		; get type.
00288E  3               	asl a  			; is this slot in use?
00288E  3               	bcc :+
00288E  3               	rts			; no, we can use it.
00288E  3               :
00288E  3               	clc			; point to more shrapnel.
00288E  3               	lda z80_x
00288E  3               	adc #SHRSIZ
00288E  3               	sta z80_x
00288E  3               	bcc :+
00288E  3               	inc z80_i
00288E  3               :
00288E  3               	dec z80_b		; repeat for all shrapnel.
00288E  3               	bne fpslt0
00288E  3               
00288E  3               	clc
00288E  3               	rts 			; out of slots, can't generate anything.
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Create an explosion at sprite position.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               explod:
00288E  3               	sta z80_c 		; particles to create.
00288E  3               
00288E  3               	lda z80_i 		; store pointer to sprite.
00288E  3               	pha
00288E  3               	lda z80_x
00288E  3               	pha
00288E  3               
00288E  3               	ldy #8
00288E  3               	lda (z80_ix),y 		; y coordinate.
00288E  3               	sta z80_l
00288E  3               	ldy #9
00288E  3               	lda (z80_ix),y		; x coordinate.
00288E  3               	sta z80_h
00288E  3               
00288E  3               	lda #<SHRAPN		; shrapnel table.
00288E  3               	sta z80_x
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_i
00288E  3               
00288E  3               	lda #NUMSHR		; number of pieces in table.
00288E  3               	sta explcnt
00288E  3               expld0:
00288E  3               	ldy #0
00288E  3               	lda (z80_ix),y		; get type.
00288E  3               	asl a 			; is this slot in use?
00288E  3               	bcs expld1		; no, we can use it.
00288E  3               expld2:
00288E  3               	clc
00288E  3               	lda z80_x
00288E  3               	adc #SHRSIZ
00288E  3               	sta z80_x
00288E  3               	bcc :+
00288E  3               	inc z80_i
00288E  3               :
00288E  3               	dec explcnt		; repeat for all shrapnel.
00288E  3               	bne expld0
00288E  3               expld3:
00288E  3               	pla			; restore sprite pointer.
00288E  3               	sta z80_x
00288E  3               	pla
00288E  3               	sta z80_i
00288E  3               	rts 			; out of slots, can't generate any more.
00288E  3               
00288E  3               expld1:
00288E  3               	lda z80_c		; shrapnel counter.
00288E  3               	and #15			; 0 to 15.
00288E  3               	clc			; add to x.
00288E  3               	adc z80_l
00288E  3               	ldy #3
00288E  3               	sta (z80_ix),y		; y coord.
00288E  3               
00288E  3               	lda seed3 		; crap random number.
00288E  3               	and #15			; 0 to 15.
00288E  3               	clc 			; add to y.
00288E  3               	adc z80_h
00288E  3               	ldy #5
00288E  3               	sta (z80_ix),y		; x coord.
00288E  3               
00288E  3               	lda #2
00288E  3               	ldy #0
00288E  3               	sta (z80_ix),y		; switch it on.
00288E  3               
00288E  3               	jsr chkxy		; plot first position.
00288E  3               	jsr qrand		; quick random angle.
00288E  3               	and #60 		; keep within range.
00288E  3               	ldy #1
00288E  3               	sta (z80_ix),y		; angle.
00288E  3               
00288E  3               	dec z80_c		; one less piece of shrapnel to generate.
00288E  3               	bne expld2 		; back to main explosion loop.
00288E  3               	jmp expld3 		; restore sprite pointer and exit.
00288E  3               
00288E  3               ;explcnt:	.byte 0
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Quick random
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               qrand:
00288E  3               	jsr random		; r register.
00288E  3               	eor seed3		; combine with seed.
00288E  3               	sta seed3 		; new seed.
00288E  3               	rts
00288E  3               
00288E  3               ;seed3:	.byte 0
00288E  3               
00288E  3               ;----------------------------------------------------
00288E  3               ; Display all shrapnel.
00288E  3               ;----------------------------------------------------
00288E  3               
00288E  3               dshrp:
00288E  3               	lda #<plotde		; display routine.
00288E  3               	sta proshx+1
00288E  3               	lda #>plotde
00288E  3               	sta proshx+2
00288E  3               	jsr proshr		; process shrapnel.
00288E  3               
00288E  3               	lda #<prosh1		; processing routine.
00288E  3               	sta proshx+1
00288E  3               	lda #>prosh1
00288E  3               	sta proshx+2
00288E  3               	rts
00288E  3               
00288E  3               ;------------------------------------------------------
00288E  3               ; Particle engine.
00288E  3               ;
00288E  3               ; Init particle data for 55 particles in SHRAPN table.
00288E  3               ; Every particle has 6 bytes.
00288E  3               ;
00288E  3               ; global:	-
00288E  3               ; local:	x,y,hl
00288E  3               ; calls:	-
00288E  3               ;------------------------------------------------------
00288E  3               
00288E  3               inishr:
00288E  3               	lda #<SHRAPN 		; table.
00288E  3               	sta z80_l
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_h
00288E  3               
00288E  3               	ldy #0
00288E  3               	ldx #NUMSHR		; shrapnel pieces to process.
00288E  3               inish0:
00288E  3               	lda #255 		; kill the shrapnel.
00288E  3               	sta (z80_hl),y
00288E  3               
00288E  3               	clc 			; point there.
00288E  3               	lda z80_l
00288E  3               	adc #SHRSIZ		; distance to next.
00288E  3               	sta z80_l
00288E  3               	bcc :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	dex
00288E  3               	bne inish0 		; round again.
00288E  3               	rts
00288E  3               
00288E  3               ;------------------------------------------------------
00288E  3               ; Check for collision between laser and sprite.
00288E  3               ;------------------------------------------------------
00288E  3               
00288E  3               lcol:
00288E  3               	lda #<SHRAPN		; shrapnel table.
00288E  3               	sta z80_l
00288E  3               	lda #>SHRAPN
00288E  3               	sta z80_h
00288E  3               
00288E  3               	lda #NUMSHR		; number of pieces in table.
00288E  3               	sta z80_b
00288E  3               lcol0:
00288E  3               	ldy #0
00288E  3               	lda (z80_hl),y 		; get type.
00288E  3               	beq lcol1		; yes, check collision.
00288E  3               lcol3:
00288E  3               	clc			; point to more shrapnel.
00288E  3               	lda z80_l
00288E  3               	adc #SHRSIZ
00288E  3               	sta z80_l
00288E  3               	bcc :+
00288E  3               	inc z80_h
00288E  3               :
00288E  3               	dec z80_b		; repeat for all shrapnel.
00288E  3               	bne lcol0
00288E  3               	rts 			; no collision, carry not set.
00288E  3               lcol1:
00288E  3               	ldy #3
00288E  3               	lda (z80_hl),y		; get y.
00288E  3               	sec
00288E  3               	ldy #8
00288E  3               	sbc (z80_ix),y		; subtract sprite y.
00288E  3               lcolh:
00288E  3               	cmp #SPR_HGT 		; within range?
00288E  3               	bcc :+
00288E  3               	jmp lcol2		; no, missed.
00288E  3               :
00288E  3               	ldy #5
00288E  3               	lda (z80_hl),y 		; get x.
00288E  3               	sec
00288E  3               	ldy #9
00288E  3               	sbc (z80_ix),y 		; subtract sprite y.
00288E  3               	cmp #16			; within range?
00288E  3               	bcs :+
00288E  3               	jmp lcol4 		; yes, collision occurred.
00288E  3               :
00288E  3               lcol2:
00288E  3               	jmp lcol3
00288E  3               lcol4:
00288E  3               	sec
00288E  3               	rts 			; return with carry set for collision.
00288E  3               .endif
00288E  3               
00288E  3               ;------------------------------------------------------
00288E  3               ; Main game engine code starts here.
00288E  3               ; After initialisation, mloop is the main loop
00288E  3               ;------------------------------------------------------
00288E  3               
00288E  3               game:
00288E  3               
00288E  3               ; Set up screen address table.
00288E  3               
00288E  3               setsat:
00288E  3  A9 00        	lda #<ScreenAddr	; start of screen.
002890  3  85 rr        	sta scraddr
002892  3  A9 04        	lda #>ScreenAddr
002894  3  85 rr        	sta scraddr+1
002896  3               
002896  3  A2 00        	ldx #0
002898  3  A0 00        	ldy #0			; vertical lines on screen.
00289A  3               setsa0:
00289A  3  A5 rr        	lda scraddr
00289C  3  99 00 DC     	sta SCADTB_lb,y		; write low byte.
00289F  3  A5 rr        	lda scraddr+1
0028A1  3  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
0028A3  3  90 02        	bcc :+
0028A5  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0028A7  3               :
0028A7  3  99 00 DD     	sta SCADTB_hb,y		; write high byte.
0028AA  3  E8           	inx
0028AB  3  E0 03        	cpx #3
0028AD  3  D0 05        	bne :+
0028AF  3  20 B2 35     	jsr nline		; next line down.
0028B2  3  A2 00        	ldx #0
0028B4  3               :
0028B4  3  C8           	iny			; next position in table.
0028B5  3  D0 E3        	bne setsa0
0028B7  3               
0028B7  3               ; Init hardware and graphics mode
0028B7  3               
0028B7  3  20 55 42     	jsr init 		; Init hardware
0028BA  3               
0028BA  3               ; Init joystick
0028BA  3               
0028BA  3  20 CA 42     	jsr joyinit		; Init joystick
0028BD  3               
0028BD  3               rpblc2:
0028BD  3               .if pflag
0028BD  3               	jsr inishr 		; initialise particle engine.
0028BD  3               .endif
0028BD  3               evintr:
0028BD  3  20 A1 3C     	jsr evnt12 		; call intro/menu event.
0028C0  3               
0028C0  3  A9 02        	lda #WALL 		; write default property.
0028C2  3  A2 00        	ldx #0
0028C4  3               clrmap:
0028C4  3  9D 00 D8     	sta MAP,x 		; block properties.
0028C7  3  9D 00 D9     	sta MAP+256,x
0028CA  3  9D 00 DA     	sta MAP+512,x
0028CD  3  9D 00 DB     	sta MAP+768,x
0028D0  3  E8           	inx			; next byte.
0028D1  3  D0 F1        	bne clrmap
0028D3  3               
0028D3  3               .if oflag
0028D3  3               	jsr iniob 		; initialise objects.
0028D3  3               .endif
0028D3  3  A9 00        	lda #0			; put zero in accumulator.
0028D5  3  85 rr        	sta gamwon		; reset game won flag.
0028D7  3               
0028D7  3  20 42 2A     	jsr inisc 		; init the score.
0028DA  3               mapst:
0028DA  3  AD FA 3A     	lda stmap 		; start position on map.
0028DD  3  8D DD 3A     	sta roomtb		; set up position in table, if there is one.
0028E0  3               
0028E0  3               inipbl:
0028E0  3               .if aflag
0028E0  3               	lda #<eop		; reset blockpointer
0028E0  3               	sta pbptr
0028E0  3               	lda #>eop
0028E0  3               	sta pbptr+1
0028E0  3               .endif
0028E0  3               
0028E0  3  20 C5 36     	jsr initsc 		; set up first screen.
0028E3  3               
0028E3  3  A9 CC        	lda #<ssprit 		; default to spare sprite in table.
0028E5  3  85 68        	sta z80_x
0028E7  3  A9 3A        	lda #>ssprit
0028E9  3  85 69        	sta z80_i
0028EB  3               evini:
0028EB  3  20 AA 3C     	jsr evnt13 		; initialisation.
0028EE  3               
0028EE  3               ; Two restarts.
0028EE  3               ; First restart - clear all sprites and initialise everything.
0028EE  3               
0028EE  3               rstrt:
0028EE  3  20 E2 29     	jsr rsevt 		; restart events.
0028F1  3  20 41 28     	jsr xspr 		; clear sprite table.
0028F4  3  20 31 38     	jsr sprlst 		; fetch pointer to screen sprites.
0028F7  3  20 BA 38     	jsr ispr 		; initialise sprite table.
0028FA  3               
0028FA  3  4C 09 29     	jmp rstrt0
0028FD  3               
0028FD  3               ; Second restart - clear all but player, and don't initialise him.
0028FD  3               
0028FD  3               rstrtn:
0028FD  3  20 E2 29     	jsr rsevt		; restart events.
002900  3  20 5E 38     	jsr nspr 		; clear all non-player sprites.
002903  3  20 31 38     	jsr sprlst 		; fetch pointer to screen sprites.
002906  3  20 F7 38     	jsr kspr 		; initialise sprite table, no more players.
002909  3               
002909  3               ; Set up the player and/or enemy sprites.
002909  3               
002909  3               rstrt0:
002909  3  A9 00        	lda #0 			; zero in accumulator.
00290B  3  85 rr        	sta nexlev 		; reset next level flag.
00290D  3  85 rr        	sta restfl 		; reset restart flag.
00290F  3  85 rr        	sta deadf 		; reset dead flag.
002911  3               
002911  3  20 61 2D     	jsr droom 		; show screen layout.
002914  3               
002914  3               rpblc0:
002914  3               .if pflag
002914  3               	jsr inishr 		; initialise particle engine.
002914  3               .endif
002914  3               .if aflag
002914  3               	jsr rbloc		; draw blocks for this screen
002914  3               .endif
002914  3               .if oflag
002914  3               	jsr shwob		; draw objects.
002914  3               .endif
002914  3               
002914  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
002916  3  85 68        	sta z80_x
002918  3  A9 3A        	lda #>sprtab
00291A  3  85 69        	sta z80_i
00291C  3  20 50 33     	jsr dspr 		; display sprites.
00291F  3               
00291F  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002921  3  85 68        	sta z80_x
002923  3  A9 3A        	lda #>(sprtab+TABSIZ)
002925  3  85 69        	sta z80_i
002927  3  20 50 33     	jsr dspr 		; display sprites.
00292A  3               
00292A  3               
00292A  3               mloop:
00292A  3  20 9A 42     	jsr vsync 		; synchronise with display.
00292D  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
00292F  3  85 68        	sta z80_x
002931  3  A9 3A        	lda #>sprtab
002933  3  85 69        	sta z80_i
002935  3  20 50 33     	jsr dspr 		; display even sprites.
002938  3               
002938  3               ;	jsr plsnd 		; play sounds.
002938  3               
002938  3  20 8D 28     	jsr proshr
00293B  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00293D  3  85 68        	sta z80_x
00293F  3  A9 3A        	lda #>(sprtab+TABSIZ)
002941  3  85 69        	sta z80_i
002943  3  20 50 33     	jsr dspr 		; display odd sprites.
002946  3               
002946  3  A9 CC        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002948  3  85 68        	sta z80_x
00294A  3  A9 3A        	lda #>(ssprit)
00294C  3  85 69        	sta z80_i
00294E  3               evlp1:
00294E  3  20 9F 3C     	jsr evnt10 		; called once per main loop.
002951  3               
002951  3  20 CE 32     	jsr pspr 		; process sprites.
002954  3               
002954  3               ; Main loop events.
002954  3               
002954  3  A9 CC        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002956  3  85 68        	sta z80_x
002958  3  A9 3A        	lda #>ssprit
00295A  3  85 69        	sta z80_i
00295C  3               evlp2:
00295C  3  20 A0 3C     	jsr evnt11 		; called once per main loop.
00295F  3               bsortx:
00295F  3  20 44 32     	jsr bsort 		; sort sprites.
002962  3               
002962  3  A5 rr        	lda nexlev		; finished level flag.
002964  3  F0 03        	beq :+
002966  3  4C 8E 29     	jmp newlev		; is set, go to next level.
002969  3               :
002969  3  A5 rr        	lda gamwon		; finished game flag.
00296B  3  F0 03        	beq :+
00296D  3  4C 9D 29     	jmp evwon		; is set, finish the game.
002970  3               :
002970  3  A5 rr        	lda restfl 		; finished level flag.
002972  3  C9 01        	cmp #1			; has it been set?
002974  3  D0 03        	bne :+
002976  3  4C EE 28     	jmp rstrt		; yes, go to next level.
002979  3               :
002979  3  C9 02        	cmp #2			; has it been set?
00297B  3  D0 03        	bne :+
00297D  3  4C FD 28     	jmp rstrtn		; yes, go to next level.
002980  3               :
002980  3  A5 rr        	lda deadf 		; dead flag.
002982  3  F0 03        	beq :+
002984  3  4C A3 29     	jmp pdead		; yes, player dead.
002987  3               :
002987  3               ; back to start of main loop.
002987  3               
002987  3  E6 rr        	inc frmno
002989  3  E6 rr        	inc clock
00298B  3  4C 2A 29     	jmp mloop		; switched to a jmp mloop during test mode.
00298E  3               
00298E  3               ;----------------------------------------------------------
00298E  3               ; Read blocks from list and update screen accordingly.
00298E  3               ;----------------------------------------------------------
00298E  3               
00298E  3               .if aflag
00298E  3               rbloc:
00298E  3               	lda #<eop		; reset temp blockpointer
00298E  3               	sta pbbuf
00298E  3               	lda #>eop
00298E  3               	sta pbbuf+1
00298E  3               
00298E  3               rbloc2:
00298E  3               	lda pbbuf			; check for last block
00298E  3               	cmp pbptr
00298E  3               	bne rbloc1
00298E  3               	lda pbbuf+1
00298E  3               	cmp pbptr+1
00298E  3               	bne rbloc1
00298E  3               	rts
00298E  3               rbloc1:
00298E  3               	ldy #0
00298E  3               	lda (pbbuf),y		; check if block for this scno
00298E  3               	cmp scno
00298E  3               	bne rbloc0		; if not, skip
00298E  3               	iny
00298E  3               	lda (pbbuf),y		; get y
00298E  3               	sta dispy
00298E  3               	iny
00298E  3               	lda (pbbuf),y		; get x
00298E  3               	sta dispx
00298E  3               	iny
00298E  3               	lda (pbbuf),y		; get blocknr
00298E  3               	jsr pattr2		; draw block
00298E  3               rbloc0:
00298E  3               	clc			; point to next block
00298E  3               	lda pbbuf
00298E  3               	adc #4
00298E  3               	sta pbbuf
00298E  3               	bcc rbloc2
00298E  3               	inc pbbuf+1
00298E  3               	jmp rbloc2
00298E  3               .endif
00298E  3               
00298E  3               ;----------------------------------------------------------
00298E  3               ; New level
00298E  3               ;----------------------------------------------------------
00298E  3               
00298E  3               ;.repeat 270
00298E  3               ;  .byte 0
00298E  3               ;.endrep
00298E  3               
00298E  3               newlev:
00298E  3  A5 rr        	lda scno 			; current screen.
002990  3  18           	clc
002991  3  69 01        	adc #1				; next screen.
002993  3  CD 18 3F     	cmp numsc			; total number of screens.
002996  3  B0 05        	bcs evwon			; yes, game finished.
002998  3  85 rr        	sta scno			; set new level number.
00299A  3  4C EE 28     	jmp rstrt			; restart, clearing all aliens.
00299D  3               
00299D  3               evwon:
00299D  3  20 00 3D     	jsr evnt18		 	; game completed.
0029A0  3  4C B7 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0029A3  3               
0029A3  3               ;----------------------------------------------------------
0029A3  3               ; Player dead.
0029A3  3               ;----------------------------------------------------------
0029A3  3               
0029A3  3               ;.repeat 258
0029A3  3               ;  .byte 0
0029A3  3               ;.endrep
0029A3  3               
0029A3  3               pdead:
0029A3  3  A9 00        	lda #0				; zeroise accumulator.
0029A5  3  85 rr        	sta deadf			; reset dead flag.
0029A7  3               evdie:
0029A7  3  20 D6 3C     	jsr evnt16 			; death subroutine.
0029AA  3  A5 rr        	lda numlif			; number of lives.
0029AC  3  F0 03        	beq :+
0029AE  3  4C EE 28     	jmp rstrt 			; restart game.
0029B1  3               :
0029B1  3               evfail:
0029B1  3  20 D7 3C     	jsr evnt17 			; failure event.
0029B4  3  4C 8E 28     	jmp game			; restart game
0029B7  3               
0029B7  3               ;----------------------------------------------------------
0029B7  3               ; Tidy things up
0029B7  3               ;----------------------------------------------------------
0029B7  3               
0029B7  3               ;.repeat 291
0029B7  3               ;  .byte 0
0029B7  3               ;.endrep
0029B7  3               
0029B7  3               tidyup:
0029B7  3  A0 00        	ldy #0				; digits to check.
0029B9  3               tidyu2:
0029B9  3  B9 2B 2B     	lda score,y 			; get score digit.
0029BC  3  CD 31 2B     	cmp hiscor 			; are we larger than high score digit?
0029BF  3  90 07        	bcc tidyu0			; high score is bigger.
0029C1  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0029C3  3  C8           	iny				; next digit of high score.
0029C4  3  C0 06        	cpy #6
0029C6  3  D0 F1        	bne tidyu2			; repeat for all digits
0029C8  3               tidyu0:
0029C8  3  A9 2B        	lda #<score			; return pointing to score.
0029CA  3  85 62        	sta z80_c
0029CC  3  A9 2B        	lda #>score
0029CE  3  85 63        	sta z80_b
0029D0  3  60           	rts
0029D1  3               tidyu1:
0029D1  3  A0 05        	ldy #5
0029D3  3               tidyu3:
0029D3  3  B9 2B 2B     	lda score,y			; score.
0029D6  3  99 31 2B     	sta hiscor,y			; high score.
0029D9  3  88           	dey
0029DA  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029DC  3               evnewh:
0029DC  3  20 01 3D     	jsr evnt19			; new high score event.
0029DF  3  4C C8 29     	jmp tidyu0			; tidy up.
0029E2  3               
0029E2  3               ;--------------------------------------------------
0029E2  3               ; Restart event.
0029E2  3               ;--------------------------------------------------
0029E2  3               
0029E2  3               rsevt:
0029E2  3  A9 CC        	lda #<ssprit 			; default to spare element in table.
0029E4  3  85 68        	sta z80_x
0029E6  3  A9 3A        	lda #>ssprit
0029E8  3  85 69        	sta z80_i
0029EA  3               evrs:
0029EA  3  4C AB 3C     	jmp evnt14	 		; call restart event.
0029ED  3               
0029ED  3               ;------------------------------------------------------------------
0029ED  3               ; Copy number passed in a to string position bc, right-justified.
0029ED  3               ;
0029ED  3               ; Input:
0029ED  3               ;  A  = number
0029ED  3               ;  BC = string address
0029ED  3               ;
0029ED  3               ; Output:
0029ED  3               ;  BC = string with number
0029ED  3               ;-----------------------------------------------------------------
0029ED  3               
0029ED  3               num2ch:
0029ED  3  85 65        	sta z80_d		; Save number
0029EF  3               
0029EF  3  A9 00        	lda #0
0029F1  3  85 rr        	sta flag
0029F3  3               numdg3:
0029F3  3  A2 64        	ldx #100		; hundreds column.
0029F5  3  86 64        	stx z80_e
0029F7  3  20 07 2A     	jsr numdg		; show digit.
0029FA  3               numdg2:
0029FA  3  A2 0A        	ldx #10			; tens column.
0029FC  3  86 64        	stx z80_e
0029FE  3  20 07 2A     	jsr numdg		; show digit.
002A01  3               
002A01  3  E6 rr        	inc flag
002A03  3  A2 01        	ldx #1			; units column.
002A05  3  86 64        	stx z80_e
002A07  3               numdg:
002A07  3  A9 30        	lda #48			; clear digit.
002A09  3  85 61        	sta z80_a
002A0B  3               numdg1:
002A0B  3  A5 65        	lda z80_d
002A0D  3  C5 64        	cmp z80_e
002A0F  3  90 0E        	bcc numdg0		; nothing to show.
002A11  3  38           	sec
002A12  3  A5 65        	lda z80_d
002A14  3  E5 64        	sbc z80_e		; subtract from column.
002A16  3  85 65        	sta z80_d
002A18  3  E6 61        	inc z80_a		; increment digit.
002A1A  3  E6 rr        	inc flag
002A1C  3  4C 0B 2A     	jmp numdg1		; repeat until column is zero.
002A1F  3               numdg0:
002A1F  3  A0 00        	ldy #0
002A21  3  A5 61        	lda z80_a
002A23  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002A25  3  A5 rr        	lda flag
002A27  3  F0 06        	beq :+
002A29  3  E6 62        	inc z80_c		; next buffer position.
002A2B  3  D0 02        	bne :+
002A2D  3  E6 63        	inc z80_b
002A2F  3               :
002A2F  3  60           	rts
002A30  3               num2dd:
002A30  3  85 65        	sta z80_d		; Save number
002A32  3               
002A32  3  A9 01        	lda #1
002A34  3  85 rr        	sta flag
002A36  3               
002A36  3  4C FA 29     	jmp numdg2
002A39  3               num2td:
002A39  3  85 65        	sta z80_d		; Save number
002A3B  3               
002A3B  3  A9 01        	lda #1
002A3D  3  85 rr        	sta flag
002A3F  3  4C F3 29     	jmp numdg3
002A42  3               
002A42  3               ;flag:	.byte 0
002A42  3               
002A42  3               ;---------------------------------------------------------
002A42  3               ; Reset score to "000000"
002A42  3               ;---------------------------------------------------------
002A42  3               
002A42  3               inisc:
002A42  3  A9 30        	lda #'0'
002A44  3  A2 05        	ldx #5			; digits to initialise.
002A46  3               inisc0:
002A46  3  9D 2B 2B     	sta score,x 		; write zero digit.
002A49  3  CA           	dex			; next column.
002A4A  3  10 FA        	bpl inisc0		; repeat for all digits.
002A4C  3               
002A4C  3  60           	rts
002A4D  3               
002A4D  3               ;-----------------------------------------------------
002A4D  3               ; Multiply h by d and return in hl.
002A4D  3               ;
002A4D  3               ; Input:
002A4D  3               ;  H = first number
002A4D  3               ;  D = second number
002A4D  3               ;
002A4D  3               ; Output:
002A4D  3               ;  HL = result H x D
002A4D  3               ;-----------------------------------------------------
002A4D  3               
002A4D  3               imul:
002A4D  3  A5 65        	lda z80_d		; HL = H * D
002A4F  3  85 64        	sta z80_e
002A51  3  A5 67        	lda z80_h
002A53  3  85 62        	sta z80_c		; make c first multiplier.
002A55  3               imul0:
002A55  3  A9 00        	lda #0			; zeroise total.
002A57  3  85 66        	sta z80_l
002A59  3  85 67        	sta z80_h
002A5B  3               
002A5B  3  A5 67        	lda z80_h
002A5D  3  85 65        	sta z80_d		; zeroise high byte.
002A5F  3               
002A5F  3  A9 08        	lda #8			; repeat 8 times.
002A61  3  85 63        	sta z80_b
002A63  3               imul1:
002A63  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A65  3  90 0E        	bcc imul2		; wasn't set.
002A67  3  18           	clc			; bit was set, so add de.
002A68  3  A5 66        	lda z80_l
002A6A  3  65 64        	adc z80_e
002A6C  3  85 66        	sta z80_l
002A6E  3  A5 67        	lda z80_h
002A70  3  65 65        	adc z80_d
002A72  3  85 67        	sta z80_h
002A74  3  18           	clc 			; reset carry.
002A75  3               imul2:
002A75  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A77  3  26 65        	rol z80_d
002A79  3  C6 63        	dec z80_b
002A7B  3  D0 E6        	bne imul1		; repeat 8 times.
002A7D  3               
002A7D  3  60           	rts
002A7E  3               
002A7E  3               ;-----------------------------------------------
002A7E  3               ; Divide d by e and return in d, remainder in a.
002A7E  3               ;
002A7E  3               ; Input:
002A7E  3               ;  D = first number
002A7E  3               ;  E = second number
002A7E  3               ;
002A7E  3               ; Output:
002A7E  3               ;  D = result D/E
002A7E  3               ;  A = remainder
002A7E  3               ;-----------------------------------------------
002A7E  3               
002A7E  3               idiv:
002A7E  3  A9 00        	lda #0
002A80  3  A0 08        	ldy #8		 	; bits to shift.
002A82  3  06 65        	asl z80_d
002A84  3               idiv0:
002A84  3  2A           	rol a 			; multiply d by 2.
002A85  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A87  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A89  3  E5 64        	sbc z80_e		; subtract it.
002A8B  3               idiv1:
002A8B  3  26 65        	rol z80_d		; rotate into d.
002A8D  3  88           	dey
002A8E  3  D0 F4        	bne idiv0		; repeat
002A90  3  60           	rts
002A91  3               
002A91  3               ;---------------------------------------------------
002A91  3               ; Play AY sound effect
002A91  3               ;---------------------------------------------------
002A91  3               
002A91  3               plsnd:
002A91  3  60           	rts
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Objects handling.
002A92  3               ; 32 bytes for image
002A92  3               ; 3 for room, y and x
002A92  3               ; 3 for starting room, y and x.
002A92  3               ; 254 = disabled.
002A92  3               ; 255 = object in player"s pockets.
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Show items present.
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               .if oflag
002A92  3               shwob:
002A92  3               	lda #<objdta 			; objects table.
002A92  3               	sta z80_l
002A92  3               	lda #>objdta
002A92  3               	sta z80_h
002A92  3               
002A92  3               	lda numob 			; number of objects in the game.
002A92  3               	sta sprcnt
002A92  3               shwob0:
002A92  3               	ldy #32 			; distance to room number.
002A92  3               	lda (z80_hl),y 			; same as an item?
002A92  3               	cmp scno 			; current location.
002A92  3               	bne :+
002A92  3               	jsr dobj 			; yes, display object.
002A92  3               :
002A92  3               	clc
002A92  3               	lda z80_l
002A92  3               	adc #38 			; distance to next item.
002A92  3               	sta z80_l
002A92  3               	lda z80_h
002A92  3               	adc #0
002A92  3               	sta z80_h	 		; point to it.
002A92  3               	dec sprcnt
002A92  3               	bne shwob0 			; repeat for others.
002A92  3               	rts
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Display object.
002A92  3               ; hl must point to object's start address.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  HL = object address
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               dobj:
002A92  3               	ldy #33
002A92  3               	lda (z80_hl),y 			; point to y.
002A92  3               	sta dispy
002A92  3               	iny
002A92  3               	lda (z80_hl),y 			; point to x.
002A92  3               	sta dispx
002A92  3               dobj1:
002A92  3               	jmp sprite 			; draw this sprite.
002A92  3               
002A92  3               ;--------------------------------------
002A92  3               ; Remove an object.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;--------------------------------------
002A92  3               
002A92  3               remob:
002A92  3               	cmp numob			; number of objects in game.
002A92  3               	bcc :+				; are we checking past the end?
002A92  3               	rts				; yes, can't get non-existent item.
002A92  3               :
002A92  3               	pha				; remember object.
002A92  3               	jsr getob			; pick it up if we haven't already got it.
002A92  3               	pla				; retrieve object number.
002A92  3               	jsr gotob			; get its address.
002A92  3               	lda #254
002A92  3               	ldy #32
002A92  3               	sta (z80_hl),y			; remove it.
002A92  3               	rts
002A92  3               
002A92  3               ;---------------------------------------------------
002A92  3               ; Pick up object number held in the accumulator.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;---------------------------------------------------
002A92  3               
002A92  3               getob:
002A92  3               	cmp numob 		; number of objects in game.
002A92  3               	bcc :+			; are we checking past the end?
002A92  3               	rts			; yes, can't get non-existent item.
002A92  3               :
002A92  3               	jsr gotob 		; check if we already have it.
002A92  3               	cmp #255
002A92  3               	bne :+
002A92  3               	rts			; we already do.
002A92  3               :
002A92  3               	ldy #32
002A92  3               	lda (z80_hl),y		; is it on this screen?
002A92  3               	cmp scno 		; current screen.
002A92  3               	bne getob0		; not on screen, so nothing to delete.
002A92  3               
002A92  3               	lda #255
002A92  3               	sta (z80_hl),y		; pick it up.
002A92  3               	iny 			; point to y coord.
002A92  3               getob1:
002A92  3               	ldy #33
002A92  3               	lda (z80_hl),y		; y coord.
002A92  3               	sta dispy
002A92  3               	ldy #34
002A92  3               	lda (z80_hl),y 		; x coord.
002A92  3               	sta dispx
002A92  3               	jmp dobj1 		; delete object sprite.
002A92  3               getob0:
002A92  3               	lda #255
002A92  3               	sta (z80_hl),y 		; pick it up.
002A92  3               	rts
002A92  3               .endif
002A92  3               
002A92  3               ;-----------------------------------------------------------------
002A92  3               ; Got object check.
002A92  3               ; Call with object in accumulator, returns zero set if in pockets.
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;-----------------------------------------------------------------
002A92  3               .if oflag .or mflag
002A92  3               gotob:
002A92  3               	cmp numob 		; number of objects in game.
002A92  3               	bcc :+ 			; are we checking past the end?
002A92  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A92  3               :
002A92  3               	jsr findob		; find the object.
002A92  3               gotob1:
002A92  3               	rts
002A92  3               
002A92  3               gotob0:
002A92  3               	lda #254 		; missing.
002A92  3               	jmp gotob1
002A92  3               
002A92  3               findob:
002A92  3               	pha			; save object number
002A92  3               	lda #<objdta 		; objects.
002A92  3               	sta z80_l
002A92  3               	lda #>objdta
002A92  3               	sta z80_h
002A92  3               	pla			; retreive object number
002A92  3               	beq fndob1 		; is it zero? yes, skip loop.
002A92  3               	tax 			; loop counter
002A92  3               fndob2:
002A92  3               	clc
002A92  3               	lda z80_l
002A92  3               	adc #38 		; size of each object.
002A92  3               	sta z80_l
002A92  3               	bcc :+
002A92  3               	inc z80_h
002A92  3               :
002A92  3               	dex 			; repeat until we find address.
002A92  3               	bne fndob2
002A92  3               fndob1:
002A92  3               	ldy #32			; distance to room it's in.
002A92  3               	lda (z80_hl),y		; fetch status.
002A92  3               	rts
002A92  3               .endif
002A92  3               
002A92  3               ;---------------------------------------------
002A92  3               ; Drop object number at (dispx, dispy).
002A92  3               ;
002A92  3               ; Input:
002A92  3               ;  A = object number
002A92  3               ;---------------------------------------------
002A92  3               
002A92  3               .if oflag
002A92  3               drpob:
002A92  3               	cmp numob 		; are we checking past the end?
002A92  3               	bcc :+
002A92  3               	rts			; yes, can't drop non-existent item.
002A92  3               :
002A92  3               	jsr gotob		; make sure object is in inventory.
002A92  3               	cmp scno		; already on this screen?
002A92  3               	bne :+
002A92  3               	rts			; yes, nothing to do.
002A92  3               :
002A92  3               	ldy #32
002A92  3               	lda scno
002A92  3               	sta (z80_hl),y		; bring onto screen.
002A92  3               	lda dispy		; sprite y coordinate.
002A92  3               	iny
002A92  3               	sta (z80_hl),y		; point to object y.
002A92  3               	lda dispx 		; sprite x coordinate.
002A92  3               	iny
002A92  3               	sta (z80_hl),y 		; point to object x
002A92  3               	jmp dobj		; draw the object sprite.
002A92  3               
002A92  3               ;-----------------------------------------------
002A92  3               ; Seek objects at sprite position.
002A92  3               ;
002A92  3               ; Output:
002A92  3               ;  A = object number, if not found A=255
002A92  3               ;-----------------------------------------------
002A92  3               
002A92  3               skobj:
002A92  3               	lda #<objdta 		; pointer to objects.
002A92  3               	sta z80_l
002A92  3               	lda #>objdta
002A92  3               	sta z80_h
002A92  3               
002A92  3               	lda numob 		; number of objects in game.
002A92  3               	sta z80_b 		; set up the loop counter.
002A92  3               skobj0:
002A92  3               	lda scno		; current room number.
002A92  3               	ldy #32
002A92  3               	cmp (z80_hl),y		; is object in here?
002A92  3               	bne :+
002A92  3               	jsr skobj1		; yes, check coordinates.
002A92  3               :
002A92  3               	clc			; point to next object in table.
002A92  3               	lda z80_l
002A92  3               	adc #38			; size of each object.
002A92  3               	sta z80_l
002A92  3               	bcc :+
002A92  3               	inc z80_h
002A92  3               :
002A92  3               	dec z80_b
002A92  3               	bne skobj0		; repeat for all objects.
002A92  3               
002A92  3               	lda #255		; end of list and nothing found, return 255.
002A92  3               	rts
002A92  3               
002A92  3               skobj1:
002A92  3               	ldy #33			; point to y coordinate.
002A92  3               	lda (z80_hl),y		; point to y coordinate.
002A92  3               	sec
002A92  3               	ldy #8
002A92  3               	sbc (z80_ix),y 		; subtract sprite y.
002A92  3               	clc
002A92  3               	adc #15			; add sprite height minus one.
002A92  3               	cmp #31			; within range?
002A92  3               	bcs skobj2		; no, ignore object.
002A92  3               
002A92  3               	ldy #34			; point to x coordinate now.
002A92  3               	lda (z80_hl),y 		; get coordinate.
002A92  3               	sec
002A92  3               	ldy #9
002A92  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A92  3               	clc			; add sprite width minus one.
002A92  3               	adc #15
002A92  3               	cmp #31			; within range?
002A92  3               	bcs skobj2		; no, ignore object.
002A92  3               
002A92  3               	pla			; remove return address from stack.
002A92  3               	pla
002A92  3               
002A92  3               	lda numob 		; objects in game.
002A92  3               	sec
002A92  3               	sbc z80_b		; subtract loop counter.
002A92  3               skobj2:
002A92  3               	rts			; accumulator now points to object.
002A92  3               .endif
002A92  3               
002A92  3               ;---------------------------------------------------------------------
002A92  3               ; Spawn a new sprite.
002A92  3               ;---------------------------------------------------------------------
002A92  3               
002A92  3               .if gflag
002A92  3                 offset = 0
002A92  3               .else
002A92  3                 offset = 20
002A92  3               .endif
002A92  3               
002A92  3               ;.repeat 343
002A92  3               ;  .byte 0
002A92  3               ;.endrep
002A92  3               
002A92  3               spawn:
002A92  3  A9 00        	lda #<sprtab		; sprite table.
002A94  3  85 66        	sta z80_l
002A96  3  A9 3A        	lda #>sprtab
002A98  3  85 67        	sta z80_h
002A9A  3               numsp1:
002A9A  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A9C  3  85 rr        	sta spcnt
002A9E  3               spaw0:
002A9E  3  A0 00        	ldy #0
002AA0  3  B1 66        	lda (z80_hl),y		; get sprite type.
002AA2  3  C9 FF        	cmp #255		; is it an unused slot?
002AA4  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002AA6  3               
002AA6  3  18           	clc 			; point to next sprite in table.
002AA7  3  A5 66        	lda z80_l
002AA9  3  69 11        	adc #TABSIZ		; size of each entry.
002AAB  3  85 66        	sta z80_l
002AAD  3  90 02        	bcc :+
002AAF  3  E6 67        	inc z80_h
002AB1  3               :
002AB1  3  C6 rr        	dec spcnt		; one less iteration.
002AB3  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002AB5  3               
002AB5  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002AB5  3               
002AB5  3               spaw1:
002AB5  3  A5 69        	lda z80_i		; address of original sprite.
002AB7  3  48           	pha
002AB8  3  A5 68        	lda z80_x
002ABA  3  48           	pha
002ABB  3               
002ABB  3  A5 66        	lda z80_l		; store spawned sprite address.
002ABD  3  85 rr        	sta spptr
002ABF  3  A5 67        	lda z80_h
002AC1  3  85 rr        	sta spptr+1
002AC3  3               
002AC3  3  A5 62        	lda z80_c
002AC5  3  A0 00        	ldy #0
002AC7  3  91 66        	sta (z80_hl),y 		; set the type.
002AC9  3  A0 05        	ldy #5
002ACB  3  91 66        	sta (z80_hl),y		; copy
002ACD  3               
002ACD  3  A5 63        	lda z80_b
002ACF  3  A0 01        	ldy #1
002AD1  3  91 66        	sta (z80_hl),y		; set the image.
002AD3  3  A0 06        	ldy #6
002AD5  3  91 66        	sta (z80_hl),y		; copy
002AD7  3               
002AD7  3  A9 00        	lda #0 			; frame zero.
002AD9  3  A0 02        	ldy #2
002ADB  3  91 66        	sta (z80_hl),y		; set frame.
002ADD  3  A0 07        	ldy #7
002ADF  3  91 66        	sta (z80_hl),y		; copy
002AE1  3               
002AE1  3  A0 08        	ldy #8
002AE3  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002AE5  3  A0 03        	ldy #3
002AE7  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AE9  3  A0 08        	ldy #8
002AEB  3  91 66        	sta (z80_hl),y		; copy
002AED  3               
002AED  3  A0 09        	ldy #9
002AEF  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AF1  3  A0 04        	ldy #4
002AF3  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AF5  3  A0 09        	ldy #9
002AF7  3  91 66        	sta (z80_hl),y		; copy
002AF9  3               
002AF9  3  A0 0A        	ldy #10			; direction of original.
002AFB  3  B1 68        	lda (z80_ix),y
002AFD  3  91 66        	sta (z80_hl),y		; direction
002AFF  3               
002AFF  3  A9 00        	lda #0
002B01  3  A0 0B        	ldy #11
002B03  3  91 66        	sta (z80_hl),y		; reset parameter.
002B05  3  C8           	iny
002B06  3  91 66        	sta (z80_hl),y		; reset parameter.
002B08  3  C8           	iny
002B09  3  91 66        	sta (z80_hl),y		; reset parameter.
002B0B  3  C8           	iny
002B0C  3  91 66        	sta (z80_hl),y		; reset parameter.
002B0E  3               rtssp:
002B0E  3  A5 rr        	lda spptr		; address of new sprite.
002B10  3  85 68        	sta z80_x
002B12  3  A5 rr        	lda spptr+1
002B14  3  85 69        	sta z80_i
002B16  3               evis1:
002B16  3  20 7C 3C     	jsr evnt09 		; call sprite initialisation event.
002B19  3               
002B19  3  A5 rr        	lda spptr 		; address of new sprite.
002B1B  3  85 68        	sta z80_x
002B1D  3  A5 rr        	lda spptr+1
002B1F  3  85 69        	sta z80_i
002B21  3  20 97 34     	jsr sspria 		; display the new sprite.
002B24  3               
002B24  3  68           	pla			; address of original sprite.
002B25  3  85 68        	sta z80_x
002B27  3  68           	pla
002B28  3  85 69        	sta z80_i
002B2A  3               
002B2A  3  60           	rts
002B2B  3               
002B2B  3               ;spcnt:	.byte 0
002B2B  3               ;spptr:	.word 0			; spawned sprite pointer.
002B2B  3               ;seed:	.byte 0			; seed for random numbers.
002B2B  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B2F  3  30 30        
002B31  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B35  3  30 30        
002B37  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B3B  3  30 30        
002B3D  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B3F  3               
002B3F  3               ;----------------------------------------------------
002B3F  3               ; Check y-pos
002B3F  3               ;----------------------------------------------------
002B3F  3               
002B3F  3               checkx:
002B3F  3  A5 rr        	lda dispy		; y position.
002B41  3  C9 19        	cmp #ScrHeight			; off screen?
002B43  3  B0 01        	bcs :+
002B45  3  60           	rts			; no, it's okay.
002B46  3               :
002B46  3  68           	pla			; remove return address from stack.
002B47  3  85 66        	sta z80_l
002B49  3  68           	pla
002B4A  3  85 67        	sta z80_h
002B4C  3  60           	rts
002B4D  3               
002B4D  3               ;-----------------------------------------------
002B4D  3               ; Displays the current high score.
002B4D  3               ;-----------------------------------------------
002B4D  3               
002B4D  3               dhisc:
002B4D  3  A9 31        	lda #<hiscor 		; high score text.
002B4F  3  8D 84 2B     	sta dscor3+1
002B52  3  8D A8 2B     	sta bscor3+1
002B55  3  A9 2B        	lda #>hiscor
002B57  3  8D 85 2B     	sta dscor3+2
002B5A  3  8D A9 2B     	sta bscor3+2
002B5D  3  4C 70 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B60  3               
002B60  3               ;------------------------------------------------------
002B60  3               ; Displays the current score.
002B60  3               ;------------------------------------------------------
002B60  3               
002B60  3               ;.repeat 322
002B60  3               ;  .byte 0
002B60  3               ;.endrep
002B60  3               
002B60  3               dscor:
002B60  3  A9 2B        	lda #<score		; score text.
002B62  3  8D 84 2B     	sta dscor3+1
002B65  3  8D A8 2B     	sta bscor3+1
002B68  3  A9 2B        	lda #>score
002B6A  3  8D 85 2B     	sta dscor3+2
002B6D  3  8D A9 2B     	sta bscor3+2
002B70  3               dscor1:
002B70  3  8C A4 2B     	sty tmpscr
002B73  3  20 22 32     	jsr preprt		; set up font and print position.
002B76  3  20 3F 2B     	jsr checkx		; make sure we're in a printable range.
002B79  3               
002B79  3               ;	lda #6			; digits to display.
002B79  3               ;	sta z80_b
002B79  3  A5 rr        	lda prtmod		; get print mode.
002B7B  3  F0 03        	beq :+			; standard size text?
002B7D  3  4C A5 2B     	jmp bscor0		; no, show double-height.
002B80  3               :
002B80  3               dscor0:
002B80  3               ;	ldy #0
002B80  3               ;	lda (z80_hl),y 		; fetch character.
002B80  3  AC A4 2B     	ldy tmpscr
002B83  3               dscor3:
002B83  3  B9 2B 2B     	lda score,y
002B86  3  20 D2 2C     	jsr pchar 		; display character.
002B89  3  E6 rr        	inc dispx		; move along x coordinate
002B8B  3               
002B8B  3               ;	inc z80_l		; next score column.
002B8B  3               ;	bne :+
002B8B  3               ;	inc z80_h
002B8B  3               ;:
002B8B  3  EE A4 2B     	inc tmpscr
002B8E  3  C6 63        	dec z80_b
002B90  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B92  3               dscor2:
002B92  3  AD EF 3A     	lda bcolour
002B95  3  20 D2 2C     	jsr pchar
002B98  3  20 0F 32     	jsr nexpos
002B9B  3               
002B9B  3  A5 rr        	lda dispx 		; set up display coordinates.
002B9D  3  85 rr        	sta charx
002B9F  3  A5 rr        	lda dispy
002BA1  3  85 rr        	sta chary
002BA3  3  60           	rts
002BA4  3               
002BA4  3  00           tmpscr:	.byte 0
002BA5  3               ;------------------------------------------------------
002BA5  3               ; Displays the current score in double-height characters.
002BA5  3               ;
002BA5  3               ; Input:
002BA5  3               ;  B  = digit number
002BA5  3               ;  HL = score string
002BA5  3               ;------------------------------------------------------
002BA5  3               
002BA5  3               bscor0:
002BA5  3               ;	ldy #0
002BA5  3               
002BA5  3               ;	lda (z80_hl),y 		; fetch character.
002BA5  3  A4 rr        	ldy tmp
002BA7  3               bscor3:
002BA7  3  B9 2B 2B     	lda score,y
002BAA  3  20 E0 31     	jsr bchar 		; display big char.
002BAD  3               
002BAD  3               ;	inc z80_l 		; next score column.
002BAD  3               ;	bne :+
002BAD  3               ;	inc z80_h
002BAD  3               ;:
002BAD  3  E6 rr        	inc tmp
002BAF  3  C6 63        	dec z80_b
002BB1  3  F0 03        	beq :+
002BB3  3  4C A5 2B     	jmp bscor0 		; repeat for all digits.
002BB6  3               :
002BB6  3  4C 92 2B     	jmp dscor2 		; tidy up line and column variables.
002BB9  3               
002BB9  3               ;-----------------------------------------------------
002BB9  3               ; Adds number in the hl pair to the score.
002BB9  3               ;-----------------------------------------------------
002BB9  3               
002BB9  3               addsc:
002BB9  3  A9 2C        	lda #<(score+1) 	; ten thousands column.
002BBB  3  85 64        	sta z80_e
002BBD  3  A9 2B        	lda #>(score+1)
002BBF  3  85 65        	sta z80_d
002BC1  3  A9 10        	lda #<10000		; amount to add each time.
002BC3  3  85 62        	sta z80_c
002BC5  3  A9 27        	lda #>10000
002BC7  3  85 63        	sta z80_b
002BC9  3  20 0D 2C     	jsr incsc		; add to score.
002BCC  3               
002BCC  3  E6 64        	inc z80_e		; thousands column.
002BCE  3  D0 02        	bne :+
002BD0  3  E6 65        	inc z80_d
002BD2  3               :
002BD2  3  A9 E8        	lda #<1000		; amount to add each time.
002BD4  3  85 62        	sta z80_c
002BD6  3  A9 03        	lda #>1000
002BD8  3  85 63        	sta z80_b
002BDA  3  20 0D 2C     	jsr incsc 		; add to score.
002BDD  3               
002BDD  3  E6 64        	inc z80_e		; hundreds column.
002BDF  3  D0 02        	bne :+
002BE1  3  E6 65        	inc z80_d
002BE3  3               :
002BE3  3  A9 64        	lda #<100		; amount to add each time.
002BE5  3  85 62        	sta z80_c
002BE7  3  A9 00        	lda #>100
002BE9  3  85 63        	sta z80_b
002BEB  3  20 0D 2C     	jsr incsc		; add to score.
002BEE  3               
002BEE  3  E6 64        	inc z80_e 		; tens column.
002BF0  3  D0 02        	bne :+
002BF2  3  E6 65        	inc z80_d
002BF4  3               :
002BF4  3  A9 0A        	lda #<10		; amount to add each time.
002BF6  3  85 62        	sta z80_c
002BF8  3  A9 00        	lda #>10
002BFA  3  85 63        	sta z80_b
002BFC  3  20 0D 2C     	jsr incsc 		; add to score.
002BFF  3               
002BFF  3  E6 64        	inc z80_e		; units column.
002C01  3  D0 02        	bne :+
002C03  3  E6 65        	inc z80_d
002C05  3               :
002C05  3  A9 01        	lda #<1			; units.
002C07  3  85 62        	sta z80_c
002C09  3  A9 00        	lda #>1
002C0B  3  85 63        	sta z80_b
002C0D  3               incsc:
002C0D  3  A5 67        	lda z80_h		; store amount to add.
002C0F  3  48           	pha
002C10  3  A5 66        	lda z80_l
002C12  3  48           	pha
002C13  3               
002C13  3  38           	sec			; subtract from amount to add.
002C14  3  A5 66        	lda z80_l
002C16  3  E5 62        	sbc z80_c
002C18  3  85 66        	sta z80_l
002C1A  3  A5 67        	lda z80_h
002C1C  3  E5 63        	sbc z80_b
002C1E  3  85 67        	sta z80_h
002C20  3  90 14        	bcc incsc0		; too much, restore value.
002C22  3               
002C22  3  68           	pla			; delete the previous amount from the stack.
002C23  3  68           	pla
002C24  3               
002C24  3  A5 65        	lda z80_d 		; store column position.
002C26  3  48           	pha
002C27  3  A5 64        	lda z80_e
002C29  3  48           	pha
002C2A  3  20 3D 2C     	jsr incsc2		; do the increment.
002C2D  3               
002C2D  3  68           	pla			; restore column.
002C2E  3  85 64        	sta z80_e
002C30  3  68           	pla
002C31  3  85 65        	sta z80_d
002C33  3  4C 0D 2C     	jmp incsc		; repeat until all added.
002C36  3               
002C36  3               incsc0:
002C36  3  68           	pla			; restore previous value.
002C37  3  85 66        	sta z80_l
002C39  3  68           	pla
002C3A  3  85 67        	sta z80_h
002C3C  3  60           	rts
002C3D  3               incsc2:
002C3D  3  A0 00        	ldy #0
002C3F  3  B1 64        	lda (z80_de),y 		; get amount.
002C41  3  18           	clc
002C42  3  69 01        	adc #1			; add one to column.
002C44  3  91 64        	sta (z80_de),y		; write new column total.
002C46  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C48  3  B0 01        	bcs :+
002C4A  3  60           	rts			; no, carry on.
002C4B  3               :
002C4B  3  A9 30        	lda #'0'		; make it zero.
002C4D  3  91 64        	sta (z80_de),y		; write new column total.
002C4F  3  C6 64        	dec z80_e		; back one column.
002C51  3  D0 02        	bne :+
002C53  3  C6 65        	dec z80_d
002C55  3               :
002C55  3  4C 3D 2C     	jmp incsc2
002C58  3               
002C58  3               ;------------------------------------
002C58  3               ; Add bonus to score and reset bonus
002C58  3               ;------------------------------------
002C58  3               
002C58  3               addbo:
002C58  3  A2 05        	ldx #5			; last digit.
002C5A  3  18           	clc
002C5B  3               addbo0:
002C5B  3  BD 2B 2B     	lda score,x		; get score.
002C5E  3  7D 37 2B     	adc bonus,x		; add bonus.
002C61  3  38           	sec			; 0 to 18.
002C62  3  E9 30        	sbc #48
002C64  3  48           	pha
002C65  3  A9 30        	lda #'0'
002C67  3  9D 37 2B     	sta bonus,x
002C6A  3  68           	pla
002C6B  3  C9 3A        	cmp #58
002C6D  3  90 03        	bcc addbo1
002C6F  3  38           	sec
002C70  3  E9 0A        	sbc #10
002C72  3               addbo1:
002C72  3  9D 2B 2B     	sta score,x		; zeroise bonus.
002C75  3  CA           	dex			; next digit.
002C76  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C78  3  60           	rts
002C79  3               
002C79  3               ;------------------------------------
002C79  3               ; Swap score and bonus.
002C79  3               ;------------------------------------
002C79  3               
002C79  3               swpsb:
002C79  3  A2 05        	ldx #5			; digits to add.
002C7B  3               swpsb0:
002C7B  3  BD 2B 2B     	lda score,x 		; get score digits.
002C7E  3  48           	pha			; save digit
002C7F  3  BD 37 2B     	lda bonus,x 		; get bonus digits.
002C82  3  9D 2B 2B     	sta score,x		; switch score-bonus
002C85  3  68           	pla
002C86  3  9D 37 2B     	sta bonus,x
002C89  3  CA           	dex 			; repeat for all 6 digits.
002C8A  3  10 EF        	bpl swpsb0
002C8C  3  60           	rts
002C8D  3               
002C8D  3               ;----------------------------------------------------
002C8D  3               ; Get print address.
002C8D  3               ;----------------------------------------------------
002C8D  3               
002C8D  3               gprad:
002C8D  3  A5 rr        	lda dispy
002C8F  3  85 rr        	sta tmp
002C91  3  0A           	asl a
002C92  3  18           	clc
002C93  3  65 rr        	adc tmp
002C95  3  A8           	tay
002C96  3  B9 00 DC     	lda SCADTB_lb,y
002C99  3  18           	clc
002C9A  3  65 rr        	adc dispx
002C9C  3  85 rr        	sta scraddr
002C9E  3  B9 00 DD     	lda SCADTB_hb,y
002CA1  3  69 00        	adc #0
002CA3  3  85 rr        	sta scraddr+1
002CA5  3  60           	rts
002CA6  3               
002CA6  3               ;--------------------------------------------------------------
002CA6  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002CA6  3               ;
002CA6  3               ; Output:
002CA6  3               ;  bufaddr = MAP + dispy*32 + dispx
002CA6  3               ;--------------------------------------------------------------
002CA6  3               
002CA6  3               pradd:
002CA6  3  A5 rr        	lda dispy 		; y coordinate.
002CA8  3  85 rr        	sta bufaddr
002CAA  3  A9 00        	lda #0
002CAC  3  85 rr        	sta bufaddr+1
002CAE  3  06 rr        	asl bufaddr  		; multiply char by 32
002CB0  3  26 rr        	rol bufaddr+1
002CB2  3  06 rr        	asl bufaddr
002CB4  3  26 rr        	rol bufaddr+1
002CB6  3  06 rr        	asl bufaddr
002CB8  3  26 rr        	rol bufaddr+1
002CBA  3  06 rr        	asl bufaddr
002CBC  3  26 rr        	rol bufaddr+1
002CBE  3  06 rr        	asl bufaddr
002CC0  3  26 rr        	rol bufaddr+1
002CC2  3  18           	clc			; add address of MAP graphics.
002CC3  3  A5 rr        	lda bufaddr
002CC5  3  65 rr        	adc dispx
002CC7  3  69 00        	adc #<MAP
002CC9  3  85 rr        	sta bufaddr
002CCB  3  A5 rr        	lda bufaddr+1
002CCD  3  69 D8        	adc #>MAP
002CCF  3  85 rr        	sta bufaddr+1
002CD1  3  60           	rts
002CD2  3               
002CD2  3               ;----------------------------------------------------
002CD2  3               ; Display character in A at dispx,dispy.
002CD2  3               ;
002CD2  3               ; Input:
002CD2  3               ;  A 	   = character to print
002CD2  3               ;----------------------------------------------------
002CD2  3               
002CD2  3               pchar:
002CD2  3  48           	pha
002CD3  3  20 8D 2C     	jsr gprad		; get screen address.
002CD6  3               .if gflag
002CD6  3               	and andeor
002CD6  3               	eor andeor+1
002CD6  3               .endif
002CD6  3               .if iflag
002CD6  3               	eor #$ff
002CD6  3               .endif
002CD6  3  68           	pla
002CD7  3  A0 00        	ldy #0
002CD9  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CDB  3  60           	rts
002CDC  3               
002CDC  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002CE0  3  60 40 20 00  
002CE4  3               
002CE4  3               ;----------------------------------------------
002CE4  3               
002CE4  3               ; Print attributes, properties and pixels.
002CE4  3               ;
002CE4  3               ; Input:
002CE4  3               ;  A	= tile number
002CE4  3               ;----------------------------------------------
002CE4  3               
002CE4  3               ;.repeat 294
002CE4  3               ;  .byte 0
002CE4  3               ;.endrep
002CE4  3               
002CE4  3               pbpattr:			; entry PUTBLOCK command
002CE4  3  A4 rr        	ldy charx
002CE6  3  84 rr        	sty dispx
002CE8  3  A4 rr        	ldy chary
002CEA  3  84 rr        	sty dispy
002CEC  3               pattr:
002CEC  3               .if aflag
002CEC  3               	pha
002CEC  3               	jsr wbloc		; save blockinfo
002CEC  3               	pla
002CEC  3               .endif
002CEC  3               
002CEC  3               pattr2:
002CEC  3  85 63        	sta z80_b		; store cell in b register for now.
002CEE  3  AA           	tax
002CEF  3  BD 64 3D     	lda bprop,x 		; block properties.
002CF2  3  85 62        	sta z80_c
002CF4  3  C9 08        	cmp #COLECT
002CF6  3  D0 05        	bne :+
002CF8  3  A5 63        	lda z80_b
002CFA  3  8D 0B 2D     	sta colpatt
002CFD  3               :
002CFD  3  20 A6 2C     	jsr pradd 		; get property buffer address.
002D00  3  A5 62        	lda z80_c
002D02  3  A0 00        	ldy #0
002D04  3  91 rr        	sta (bufaddr),y 	; write property.
002D06  3  A5 63        	lda z80_b 		; restore cell.
002D08  3  4C 0C 2D     	jmp panp
002D0B  3               ; Print attributes, no properties.
002D0B  3               
002D0B  3               ;.repeat 263
002D0B  3               ; .byte 0
002D0B  3               ;.endrep
002D0B  3               
002D0B  3  00           colpatt:	.byte 0
002D0C  3               
002D0C  3               panp:
002D0C  3               ;	sta z80_e		; displacement in e.
002D0C  3               ;	lda #0
002D0C  3               ;	sta z80_d		; no high byte.
002D0C  3               ;	asl z80_e  		; multiply char by 8.
002D0C  3               ;	rol z80_d
002D0C  3               ;	asl z80_e
002D0C  3               ;	rol z80_d
002D0C  3               ;	asl z80_e
002D0C  3               ;	rol z80_d
002D0C  3  0A           	asl a
002D0D  3  18           	clc
002D0E  3               ;	lda z80_e
002D0E  3  69 60        	adc #<chgfx 		; address of graphics.
002D10  3  85 rr        	sta tileaddr
002D12  3  A5 65        	lda z80_d
002D14  3  69 3D        	adc #>chgfx
002D16  3  85 rr        	sta tileaddr+1
002D18  3  20 8D 2C     	jsr gprad 		; get screen address.
002D1B  3               panp0:
002D1B  3  A0 00        	ldy #0
002D1D  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002D1F  3               .if iflag
002D1F  3               	eor #$ff		; Invert
002D1F  3               .endif
002D1F  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D21  3  E6 rr        	inc dispx 		; move along one.
002D23  3  E6 rr        	inc charx
002D25  3  60           	rts
002D26  3               
002D26  3               ;----------------------------------------------
002D26  3               ; Write block
002D26  3               ;----------------------------------------------
002D26  3               
002D26  3               .if aflag
002D26  3               wbloc:
002D26  3               	ldy #3
002D26  3               	sta (pbptr),y		; store block number
002D26  3               	dey
002D26  3               	lda dispx
002D26  3               	sta (pbptr),y		; write x position of block.
002D26  3               	dey
002D26  3               	lda dispy
002D26  3               	sta (pbptr),y		; write y position of block.
002D26  3               	dey
002D26  3               	lda scno
002D26  3               	sta (pbptr),y		; write screen.
002D26  3               	clc			; point to next free location
002D26  3               	lda pbptr
002D26  3               	adc #4
002D26  3               	sta pbptr
002D26  3               	bcc :+
002D26  3               	inc pbptr+1
002D26  3               :
002D26  3               	rts
002D26  3               .endif
002D26  3               
002D26  3               ;----------------------------------------------
002D26  3               ; Print character pixels, no more.
002D26  3               ;
002D26  3               ; Input:
002D26  3               ;  A	= character to print
002D26  3               ;----------------------------------------------
002D26  3               
002D26  3               pchr:
002D26  3  20 D2 2C     	jsr pchar 		; show character in accumulator.
002D29  3  E6 rr        	inc dispx		; move along one.
002D2B  3  60           	rts
002D2C  3               
002D2C  3               ;----------------------------------------------------
002D2C  3               ; Shifter sprite routine for objects.
002D2C  3               ;----------------------------------------------------
002D2C  3               
002D2C  3               .if oflag
002D2C  3               sprit7:
002D2C  3               	lda z80_b
002D2C  3               	beq sprit0
002D2C  3               	sta z80_a
002D2C  3               sprit3:
002D2C  3               	lsr spr			; shift into position.
002D2C  3               	ror spr+1
002D2C  3               	ror spr+2
002D2C  3               	dec z80_a		; one less iteration.
002D2C  3               	bne sprit3
002D2C  3               sprit0:
002D2C  3               	rts 			; now apply to screen.
002D2C  3               
002D2C  3               ;----------------------------------------------------
002D2C  3               ; Draw sprite
002D2C  3               ;----------------------------------------------------
002D2C  3               
002D2C  3               sprite:
002D2C  3               	stx xtmp		; Save X-reg
002D2C  3               	jsr scadd 		; get screen address in scraddr.
002D2C  3               
002D2C  3               	lda dispx 		; x position.
002D2C  3               	and #7 			; position straddling cells.
002D2C  3               	sta z80_b		; store in b register.
002D2C  3               
002D2C  3               	lda z80_l		; store sprite graphic address.
002D2C  3               	sta sprit1+1
002D2C  3               	sta sprit2+1
002D2C  3               	lda z80_h
002D2C  3               	sta sprit1+2
002D2C  3               	sta sprit2+2
002D2C  3               
002D2C  3               	ldx #0			; pixel height.
002D2C  3               	ldy #0
002D2C  3               sprit1:
002D2C  3               	lda objdta,x		; fetch first byte.
002D2C  3               	sta spr
002D2C  3               	inx
002D2C  3               sprit2:
002D2C  3               	lda objdta,x
002D2C  3               	sta spr+1
002D2C  3               
002D2C  3               	lda #0
002D2C  3               	sta spr+2
002D2C  3               	jsr sprit7		; shift sprite
002D2C  3               
002D2C  3               	dex
002D2C  3               	lda spr			; fetch graphic.
002D2C  3               	ldy spritetab,x
002D2C  3               	eor (scraddr),y		; merge with screen image.
002D2C  3               	sta (scraddr),y		; write to screen.
002D2C  3               	inx			; next screen byte.
002D2C  3               
002D2C  3               	lda spr+1		; fetch graphic.
002D2C  3               	ldy spritetab,x
002D2C  3               	eor (scraddr),y		; merge with screen image.
002D2C  3               	sta (scraddr),y		; write to screen.
002D2C  3               	iny
002D2C  3               
002D2C  3               	lda spr+2		; fetch graphic.
002D2C  3               	eor (scraddr),y		; merge with screen image.
002D2C  3               	sta (scraddr),y		; write to screen.
002D2C  3               
002D2C  3               	inx			; next source byte.
002D2C  3               	cpx #16
002D2C  3               	bne :+
002D2C  3               	inc scraddr+1
002D2C  3               :
002D2C  3               	cpx #32
002D2C  3               	bne sprit1		; repeat
002D2C  3               
002D2C  3               	ldx xtmp		; retreive X-reg
002D2C  3               	rts
002D2C  3               
002D2C  3               spritetab:
002D2C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D2C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D2C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D2C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D2C  3               
002D2C  3               spr:	.byte 0,0,0
002D2C  3               
002D2C  3               ;xtmp:	.byte 0
002D2C  3               .endif
002D2C  3               
002D2C  3               ;-----------------------------------------------------------
002D2C  3               ; Get room address.
002D2C  3               ;-----------------------------------------------------------
002D2C  3               
002D2C  3               ;.repeat 273
002D2C  3               ;  .byte 0
002D2C  3               ;.endrep
002D2C  3               
002D2C  3               groom:
002D2C  3  A6 rr        	ldx scno 		; screen number.
002D2E  3  A0 00        	ldy #0
002D30  3               groomx:
002D30  3  A9 CC        	lda #<scdat 		; pointer to screens.
002D32  3  85 66        	sta z80_l
002D34  3  A9 3D        	lda #>scdat
002D36  3  85 67        	sta z80_h
002D38  3               groom1:
002D38  3  E0 00        	cpx #0			; is it the first one?
002D3A  3  F0 15        	beq groom0 		; no more screens to skip.
002D3C  3               
002D3C  3  18           	clc
002D3D  3  A5 66        	lda z80_l
002D3F  3  79 CC 3D     	adc scdat,y 		; low byte of screen size.
002D42  3  85 66        	sta z80_l
002D44  3  C8           	iny			; point to high byte.
002D45  3  A5 67        	lda z80_h
002D47  3  79 CC 3D     	adc scdat,y 		; high byte of screen size.
002D4A  3  85 67        	sta z80_h
002D4C  3  C8           	iny			; next address.
002D4D  3               
002D4D  3  CA           	dex 			; one less iteration.
002D4E  3  4C 38 2D     	jmp groom1 		; loop until we reach the end.
002D51  3               groom0:
002D51  3  AD 18 3F     	lda numsc 		; add displacement.
002D54  3  0A           	asl a
002D55  3  18           	clc			; add double displacement to address.
002D56  3  65 66        	adc z80_l
002D58  3  85 66        	sta z80_l
002D5A  3  A5 67        	lda z80_h
002D5C  3  69 00        	adc #0
002D5E  3  85 67        	sta z80_h
002D60  3  60           	rts
002D61  3               
002D61  3               ;-----------------------------------------------------------
002D61  3               ; Draw present room.
002D61  3               ;-----------------------------------------------------------
002D61  3               
002D61  3               droom:
002D61  3  AD 23 28     	lda wintop 		; window top.
002D64  3  85 rr        	sta dispy		; set cursor y position.
002D66  3               droom2:
002D66  3  20 2C 2D     	jsr groom 		; get address of current room.
002D69  3  A9 00        	lda #0	 		; zero in accumulator.
002D6B  3  85 rr        	sta comcnt 		; reset compression counter.
002D6D  3  AD 25 28     	lda winhgt 		; height of window.
002D70  3  85 rr        	sta rrow		; set row counter
002D72  3               droom0:
002D72  3  AD 24 28     	lda winlft 		; window left edge.
002D75  3  85 rr        	sta dispx 		; set cursor x position.
002D77  3  AD 26 28     	lda winwid 		; width of window.
002D7A  3  85 rr        	sta rcol		; set column counter
002D7C  3               droom1:
002D7C  3  20 8D 2D     	jsr flbyt 		; decompress next byte on the fly.
002D7F  3  20 EC 2C     	jsr pattr2 		; show attributes and block.
002D82  3  C6 rr        	dec rcol		; one less column.
002D84  3  D0 F6        	bne droom1 		; repeat for entire line.
002D86  3  E6 rr        	inc dispy		; move down one line.
002D88  3  C6 rr        	dec rrow 		; one less row.
002D8A  3  D0 E6        	bne droom0 		; repeat for all rows.
002D8C  3  60           	rts
002D8D  3               
002D8D  3               ;rcol:	.byte 0
002D8D  3               ;rrow:	.byte 0
002D8D  3               
002D8D  3               ;----------------------------------------------
002D8D  3               ; Decompress bytes on-the-fly.
002D8D  3               ;----------------------------------------------
002D8D  3               
002D8D  3               flbyt:
002D8D  3  A5 rr        	lda comcnt 		; compression counter.
002D8F  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D91  3               
002D91  3  A0 00        	ldy #0
002D93  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D95  3  E6 66        	inc z80_l 		; point to next cell.
002D97  3  D0 02        	bne :+
002D99  3  E6 67        	inc z80_h
002D9B  3               :
002D9B  3  C9 FF        	cmp #255 		; is this byte a control code?
002D9D  3  F0 01        	beq :+
002D9F  3  60           	rts 			; no, this byte is uncompressed.
002DA0  3               :
002DA0  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002DA2  3  85 rr        	sta combyt 		; set up the type.
002DA4  3  E6 66        	inc z80_l 		; point to quantity.
002DA6  3  D0 02        	bne :+
002DA8  3  E6 67        	inc z80_h
002DAA  3               :
002DAA  3  B1 66        	lda (z80_hl),y 		; get quantity.
002DAC  3  E6 66        	inc z80_l 		; point to next byte.
002DAE  3  D0 02        	bne :+
002DB0  3  E6 67        	inc z80_h
002DB2  3               :
002DB2  3               flbyt1:
002DB2  3  85 rr        	sta comcnt 		; store new quantity.
002DB4  3  C6 rr        	dec comcnt		; one less.
002DB6  3  A5 rr        	lda combyt 		; byte to expand.
002DB8  3  60           	rts
002DB9  3               
002DB9  3               ;combyt:	.byte 0			; byte type compressed.
002DB9  3               ;comcnt:	.byte 0			; compression counter.
002DB9  3               
002DB9  3               ;------------------------------------------
002DB9  3               ; Ladder down check.
002DB9  3               ;
002DB9  3               ; Input:
002DB9  3               ;  IX = sprite pointer
002DB9  3               ;------------------------------------------
002DB9  3               
002DB9  3               .if lflag
002DB9  3               laddd:
002DB9  3               	ldy #9
002DB9  3               	lda (z80_ix),y		; x coordinate.
002DB9  3               	sta dispx
002DB9  3               
002DB9  3               	ldy #8
002DB9  3               	lda (z80_ix),y		; y coordinate.
002DB9  3               	and #254		; make it even.
002DB9  3               	sta (z80_ix),y 		; reset it.
002DB9  3               	clc 			; look down 16 pixels.
002DB9  3               numsp5:
002DB9  3               	adc #SPR_HGT
002DB9  3               	sta dispy		; coords in dispx,dispy.
002DB9  3               	jmp laddv
002DB9  3               
002DB9  3               ;------------------------------------------
002DB9  3               ; Ladder up check.
002DB9  3               ;
002DB9  3               ; Input:
002DB9  3               ;  IX = sprite pointer
002DB9  3               ;
002DB9  3               ; Output:
002DB9  3               ;  A  = 0 is ok, A <>0 is not ok
002DB9  3               ;------------------------------------------
002DB9  3               
002DB9  3               laddu:
002DB9  3               	ldy #9
002DB9  3               	lda (z80_ix),y		; x coordinate.
002DB9  3               	sta dispx
002DB9  3               
002DB9  3               	ldy #8
002DB9  3               	lda (z80_ix),y		; y coordinate.
002DB9  3               	and #254 		; make it even.
002DB9  3               	sta (z80_ix),y		; reset it.
002DB9  3               	clc 			; look 2 pixels above feet.
002DB9  3               numsp6:
002DB9  3               	adc #SPR_HGT-2
002DB9  3               	sta dispy		; coords in dispx,dispy.
002DB9  3               laddv:
002DB9  3               	jsr tstbl 		; get map address.
002DB9  3               	jsr ldchk 		; standard ladder check.
002DB9  3               	beq :+
002DB9  3               	rts 			; no way through.
002DB9  3               :
002DB9  3               	inc bufaddr 		; look right one cell.
002DB9  3               	bne :+
002DB9  3               	inc bufaddr+1
002DB9  3               :
002DB9  3               	jsr ldchk 		; do the check.
002DB9  3               	beq :+
002DB9  3               	rts 			; impassable.
002DB9  3               :
002DB9  3               	lda dispx 		; y coordinate.
002DB9  3               	and #7 			; position straddling block cells.
002DB9  3               	bne :+
002DB9  3               	rts 			; no more checks needed.
002DB9  3               :
002DB9  3               	inc bufaddr 		; look to third cell.
002DB9  3               	bne :+
002DB9  3               	inc bufaddr+1
002DB9  3               :
002DB9  3               	jsr ldchk 		; do the check.
002DB9  3               	rts  			; return with zero flag set accordingly.
002DB9  3               .endif
002DB9  3               
002DB9  3               ;---------------------------------------------------------
002DB9  3               ; Can go up check.
002DB9  3               ;
002DB9  3               ; Input:
002DB9  3               ;  IX = sprite pointer
002DB9  3               ;
002DB9  3               ; Output:
002DB9  3               ;  A  = 0 is ok, A <>0 is not ok
002DB9  3               ;---------------------------------------------------------
002DB9  3               
002DB9  3               cangu:
002DB9  3  A0 09        	ldy #9
002DBB  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DBD  3  85 rr        	sta dispx
002DBF  3  A0 08        	ldy #8
002DC1  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002DC3  3  38           	sec
002DC4  3  E9 02        	sbc #2
002DC6  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DC8  3  20 63 30     	jsr tstbl 		; get map address.
002DCB  3  20 7B 2F     	jsr lrchk 		; standard left/right check.
002DCE  3  F0 01        	beq :+
002DD0  3  60           	rts			; no way through.
002DD1  3               :
002DD1  3  E6 rr        	inc bufaddr		; look right one cell.
002DD3  3  D0 02        	bne :+
002DD5  3  E6 rr        	inc bufaddr+1
002DD7  3               :
002DD7  3  20 7B 2F     	jsr lrchk 		; do the check.
002DDA  3  F0 01        	beq :+
002DDC  3  60           	rts			; impassable.
002DDD  3               :
002DDD  3  A5 rr        	lda dispx		; x coordinate.
002DDF  3  29 07        	and #7			; position straddling block cells.
002DE1  3  D0 01        	bne :+
002DE3  3  60           	rts			; no more checks needed.
002DE4  3               :
002DE4  3  E6 rr        	inc bufaddr		; look to third cell.
002DE6  3  D0 02        	bne :+
002DE8  3  E6 rr        	inc bufaddr+1
002DEA  3               :
002DEA  3  20 7B 2F     	jsr lrchk		; do the check.
002DED  3  60           	rts 			; return with zero flag set accordingly.
002DEE  3               
002DEE  3               ;---------------------------------------------------------
002DEE  3               ; Can go down check.
002DEE  3               ;
002DEE  3               ; Input:
002DEE  3               ;  IX = sprite pointer
002DEE  3               ;
002DEE  3               ; Output:
002DEE  3               ;  A  = 0 is ok, A <>0 is not ok
002DEE  3               ;---------------------------------------------------------
002DEE  3               
002DEE  3               ;.repeat 264
002DEE  3               ;  .byte 0
002DEE  3               ;.endrep
002DEE  3               
002DEE  3               cangd:
002DEE  3  A0 09        	ldy #9
002DF0  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002DF2  3  85 rr        	sta dispx
002DF4  3  A0 08        	ldy #8
002DF6  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DF8  3  18           	clc
002DF9  3               numsp3:
002DF9  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002DFB  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DFD  3  20 63 30     	jsr tstbl 		; get map address.
002E00  3  20 90 2F     	jsr plchk 		; block, platform check.
002E03  3  F0 01        	beq :+
002E05  3  60           	rts			; no way through.
002E06  3               :
002E06  3  E6 rr        	inc bufaddr		; look right one cell.
002E08  3  D0 02        	bne :+
002E0A  3  E6 rr        	inc bufaddr+1
002E0C  3               :
002E0C  3  20 90 2F     	jsr plchk		; block, platform check.
002E0F  3  F0 01        	beq :+
002E11  3  60           	rts			; impassable.
002E12  3               :
002E12  3  A5 rr        	lda dispx		; x coordinate.
002E14  3  29 07        	and #7			; position straddling block cells.
002E16  3  D0 01        	bne :+
002E18  3  60           	rts			; no more checks needed.
002E19  3               :
002E19  3  E6 rr        	inc bufaddr		; look to third cell.
002E1B  3  D0 02        	bne :+
002E1D  3  E6 rr        	inc bufaddr+1
002E1F  3               :
002E1F  3  20 90 2F     	jsr plchk		; block, platform check.
002E22  3  60           	rts			; return with zero flag set accordingly.
002E23  3               
002E23  3               ;---------------------------------------------------------
002E23  3               ; Can go left check.
002E23  3               ;
002E23  3               ; Input:
002E23  3               ;  IX = sprite pointer
002E23  3               ;
002E23  3               ; Output:
002E23  3               ;  A  = 0 is ok, A <>0 is not ok
002E23  3               ;---------------------------------------------------------
002E23  3               
002E23  3               cangl:
002E23  3  A0 08        	ldy #8
002E25  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E27  3  85 rr        	sta dispy
002E29  3  A0 09        	ldy #9
002E2B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E2D  3  38           	sec
002E2E  3  E9 02        	sbc #2			; look left 2 pixels.
002E30  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E32  3  4C 54 2F     	jmp cangh		; test if we can go there.
002E35  3               
002E35  3               ;---------------------------------------------------------
002E35  3               ; Can go right check.
002E35  3               ;
002E35  3               ; Input:
002E35  3               ;  IX = sprite pointer
002E35  3               ;
002E35  3               ; Output:
002E35  3               ;  A  = 0 is ok, A <>0 is not ok
002E35  3               ;---------------------------------------------------------
002E35  3               
002E35  3  00 00 00 00  .repeat 272
002E39  3  00 00 00 00  
002E3D  3  00 00 00 00  
002F45  3                 .byte 0
002F45  3               .endrep
002F45  3               
002F45  3               cangr:
002F45  3  A0 08        	ldy #8
002F47  3  B1 68        	lda (z80_ix),y		; y coordinate.
002F49  3  85 rr        	sta dispy
002F4B  3  A0 09        	ldy #9
002F4D  3  B1 68        	lda (z80_ix),y		; x coordinate.
002F4F  3  18           	clc
002F50  3  69 10        	adc #16			; look right 16 pixels.
002F52  3  85 rr        	sta dispx		; coords in dispx,dispy.
002F54  3               cangh:
002F54  3               cangh2:
002F54  3  A9 02        	lda #(SPR_HGT/8+1)	; default rows to write.
002F56  3  85 63        	sta z80_b
002F58  3  A5 rr        	lda dispy		; y position.
002F5A  3  29 07        	and #7			; does x straddle cells?
002F5C  3  D0 02        	bne cangh0		; yes, loop counter is good.
002F5E  3  C6 63        	dec z80_b		; one less row to write.
002F60  3               cangh0:
002F60  3  20 63 30     	jsr tstbl		; get map address.
002F63  3               cangh1:
002F63  3  20 7B 2F     	jsr lrchk		; standard left/right check.
002F66  3  F0 01        	beq :+
002F68  3  60           	rts			; no way through.
002F69  3               :
002F69  3  48           	pha
002F6A  3  18           	clc
002F6B  3  A5 rr        	lda bufaddr
002F6D  3  69 20        	adc #32			; look down.
002F6F  3  85 rr        	sta bufaddr
002F71  3  90 02        	bcc :+
002F73  3  E6 rr        	inc bufaddr+1
002F75  3               :
002F75  3  68           	pla
002F76  3               
002F76  3  C6 63        	dec z80_b
002F78  3  D0 E9        	bne cangh1
002F7A  3  60           	rts
002F7B  3               
002F7B  3               ;-------------------------------------
002F7B  3               ; Check left/right movement is okay.
002F7B  3               ;
002F7B  3               ; Input:
002F7B  3               ;  bufaddr = MAP + x/8 + y/8*32
002F7B  3               ;
002F7B  3               ; Output:
002F7B  3               ;  A  = 0 is ok, A <>0 is not ok
002F7B  3               ;-------------------------------------
002F7B  3               
002F7B  3               lrchk:
002F7B  3  A0 00        	ldy #0
002F7D  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002F7F  3  C9 02        	cmp #WALL 		; is it passable?
002F81  3  F0 0A        	beq lrchkx		; no.
002F83  3               
002F83  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002F85  3  F0 06        	beq lrchkx		; not passable.
002F87  3  A9 00        	lda #0
002F89  3  60           	rts
002F8A  3               
002F8A  3               ;--------------------------------------------------------------
002F8A  3               ; Called by mmenu
002F8A  3               ;--------------------------------------------------------------
002F8A  3               
002F8A  3               always:
002F8A  3  A9 FF        	lda #255		; report it as okay.
002F8C  3  60           	rts
002F8D  3               
002F8D  3               lrchkx:
002F8D  3  A9 01        	lda #1 			; reset all bits.
002F8F  3  60           	rts
002F90  3               
002F90  3               
002F90  3               ;--------------------------------------------------------------
002F90  3               ; Check platform or solid item is not in way.
002F90  3               ;
002F90  3               ; Input:
002F90  3               ;  bufaddr = MAP + x/8 + y/8*32
002F90  3               ;
002F90  3               ; Output:
002F90  3               ;  A  = 0 is ok, A <>0 is not ok
002F90  3               ;--------------------------------------------------------------
002F90  3               
002F90  3               plchk:
002F90  3  A0 00        	ldy #0
002F92  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002F94  3  C9 02        	cmp #WALL 		; is it passable?
002F96  3  F0 F5        	beq lrchkx		; no.
002F98  3               .if pflag .or dflag
002F98  3               	cmp #FODDER		; fodder has to be dug.
002F98  3               	beq lrchkx		; not passable.
002F98  3               .endif
002F98  3  C9 01        	cmp #PLATFM		; platform is solid.
002F9A  3  F0 03        	beq plchkx		; not passable.
002F9C  3               .if lflag
002F9C  3               	cmp #LADDER		; is it a ladder?
002F9C  3               	beq lrchkx		; on ladder, deny movement.
002F9C  3               .endif
002F9C  3               plchk0:
002F9C  3  A9 00        	lda #0			; report as ok
002F9E  3  60           	rts
002F9F  3               plchkx:
002F9F  3  A5 rr        	lda dispy		; x coordinate.
002FA1  3  29 07        	and #7			; position straddling blocks.
002FA3  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002FA5  3  4C 9C 2F     	jmp plchk0
002FA8  3               
002FA8  3               ;--------------------------------------------------------------
002FA8  3               ; Check ladder is available.
002FA8  3               ;
002FA8  3               ; Input:
002FA8  3               ;  bufaddr = MAP + x/8 + y/8*32
002FA8  3               ;
002FA8  3               ; Output:
002FA8  3               ;  A  = 0 is ok, A <>0 is not ok
002FA8  3               ;--------------------------------------------------------------
002FA8  3               
002FA8  3               .if lflag
002FA8  3               ldchk:
002FA8  3               	ldy #0
002FA8  3               	lda (bufaddr),y 	; fetch cell.
002FA8  3               	cmp #LADDER 		; is it a ladder?
002FA8  3               	beq :+
002FA8  3               	lda #1
002FA8  3               	rts  			; return with zero flag set accordingly.
002FA8  3               :
002FA8  3               	lda #0
002FA8  3               	rts
002FA8  3               .endif
002FA8  3               
002FA8  3               ;--------------------------------------------------------------
002FA8  3               ; Get collectables.
002FA8  3               ;--------------------------------------------------------------
002FA8  3               
002FA8  3               .if cflag
002FA8  3               getcol:
002FA8  3                       lda #COLECT             ; collectable blocks.
002FA8  3                       sta z80_b
002FA8  3                       jsr tded                ; test for collectable blocks.
002FA8  3                       cmp z80_b               ; did we find one?
002FA8  3                       beq :+
002FA8  3                       rts                     ; none were found, job done.
002FA8  3               :
002FA8  3                       jsr gtblk               ; get block.
002FA8  3                       jsr evnt20              ; collected block event.
002FA8  3                       jmp getcol              ; repeat until none left.
002FA8  3               
002FA8  3               ; Get collectable block.
002FA8  3               
002FA8  3               gtblk:
002FA8  3               	ldy #0
002FA8  3               	lda (bufaddr),y
002FA8  3               	sta z80_a
002FA8  3                       lda #0
002FA8  3                       sta (bufaddr),y		; make it empty now.
002FA8  3               
002FA8  3               	lda bufaddr		; set dispx
002FA8  3               	and #31
002FA8  3               	sta dispx
002FA8  3               
002FA8  3               	lda bufaddr+1		; Set dispy
002FA8  3               	sec
002FA8  3               	sbc #>MAP
002FA8  3               	sta bufaddr+1
002FA8  3               	asl bufaddr
002FA8  3               	rol bufaddr+1
002FA8  3               	asl bufaddr
002FA8  3               	rol bufaddr+1
002FA8  3               	asl bufaddr
002FA8  3               	rol bufaddr+1
002FA8  3               	lda bufaddr+1
002FA8  3               	sta dispy
002FA8  3               
002FA8  3               	lda colpatt		; get blocknr
002FA8  3               	sta z80_e		; displacement in e.
002FA8  3               	lda #0
002FA8  3               	sta z80_d		; no high byte.
002FA8  3               	asl z80_e  		; multiply char by 8.
002FA8  3               	rol z80_d
002FA8  3               	asl z80_e
002FA8  3               	rol z80_d
002FA8  3               	asl z80_e
002FA8  3               	rol z80_d
002FA8  3               	clc
002FA8  3               	lda z80_e
002FA8  3               	adc #<chgfx 		; address of graphics.
002FA8  3               	sta tileaddr
002FA8  3               	lda z80_d
002FA8  3               	adc #>chgfx
002FA8  3               	sta tileaddr+1
002FA8  3               	jsr gprad 		; get screen address.
002FA8  3               	ldx #7			; number of pixel rows to write.
002FA8  3               gtblk0:
002FA8  3               	ldy #0
002FA8  3               	lda (tileaddr),y 	; get image byte.
002FA8  3               	ldy scrtab,x
002FA8  3               	eor (scraddr),y 	; XOR tile on screen
002FA8  3               	sta (scraddr),y 	; copy to screen.
002FA8  3               	inc tileaddr 		; next image byte.
002FA8  3               	bne :+
002FA8  3               	inc tileaddr+1
002FA8  3               :
002FA8  3               	dex	 		; repeat for 8 pixel rows.
002FA8  3               	bpl gtblk0
002FA8  3               	rts
002FA8  3               .endif
002FA8  3               
002FA8  3               ;--------------------------------------------------------------
002FA8  3               ; Touched deadly block check.
002FA8  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002FA8  3               ;
002FA8  3               ; Input:
002FA8  3               ;  IX = sprite address
002FA8  3               ;
002FA8  3               ; Output:
002FA8  3               ;  A  = 0 is ok, A=5 is not ok
002FA8  3               ;--------------------------------------------------------------
002FA8  3               
002FA8  3               tded:
002FA8  3  A0 08        	ldy #8
002FAA  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002FAC  3  85 rr        	sta dispy
002FAE  3  C8           	iny
002FAF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002FB1  3  85 rr        	sta dispx		; coords in dispx,dispy.
002FB3  3  20 63 30     	jsr tstbl		; get map address.
002FB6  3  48           	pha
002FB7  3  A9 1F        	lda #31			; default distance to next line down.
002FB9  3  85 64        	sta z80_e
002FBB  3  68           	pla
002FBC  3  C5 63        	cmp z80_b		; is this the required block?
002FBE  3  D0 01        	bne :+
002FC0  3  60           	rts			; yes.
002FC1  3               :
002FC1  3  E6 rr        	inc bufaddr 		; next cell.
002FC3  3  D0 02        	bne :+
002FC5  3  E6 rr        	inc bufaddr+1
002FC7  3               :
002FC7  3  A0 00        	ldy #0
002FC9  3  B1 rr        	lda (bufaddr),y		; fetch type.
002FCB  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002FCD  3  D0 01        	bne :+
002FCF  3  60           	rts			; yes.
002FD0  3               :
002FD0  3  A5 rr        	lda dispx		; horizontal position.
002FD2  3  85 62        	sta z80_c 		; store column in c register.
002FD4  3  29 07        	and #7			; is it straddling cells?
002FD6  3  D0 03        	bne :+
002FD8  3  4C EC 2F     	jmp tded0		; no.
002FDB  3               :
002FDB  3  E6 rr        	inc bufaddr 		; last cell.
002FDD  3  D0 02        	bne :+
002FDF  3  E6 rr        	inc bufaddr+1
002FE1  3               :
002FE1  3  A0 00        	ldy #0
002FE3  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002FE5  3  C5 63        	cmp z80_b		; is this the block?
002FE7  3  D0 01        	bne :+
002FE9  3  60           	rts			; yes.
002FEA  3               :
002FEA  3  C6 64        	dec z80_e		; one less cell to next row down.
002FEC  3               tded0:
002FEC  3  18           	clc 			; point to next row.
002FED  3  A5 rr        	lda bufaddr
002FEF  3  65 64        	adc z80_e
002FF1  3  85 rr        	sta bufaddr
002FF3  3  90 02        	bcc :+
002FF5  3  E6 rr        	inc bufaddr+1
002FF7  3               :
002FF7  3  A0 00        	ldy #0
002FF9  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002FFB  3  C5 63        	cmp z80_b		; is this fatal?
002FFD  3  D0 01        	bne :+
002FFF  3  60           	rts			; yes.
003000  3               :
003000  3  E6 rr        	inc bufaddr 		; next cell.
003002  3  D0 02        	bne :+
003004  3  E6 rr        	inc bufaddr+1
003006  3               :
003006  3  A0 00        	ldy #0
003008  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00300A  3  C5 63        	cmp z80_b		; is this fatal?
00300C  3  D0 01        	bne :+
00300E  3  60           	rts			; yes.
00300F  3               :
00300F  3  A5 62        	lda z80_c		; horizontal position.
003011  3  29 07        	and #7			; is it straddling cells?
003013  3  D0 03        	bne :+
003015  3  4C 27 30     	jmp tded1 		; no.
003018  3               :
003018  3  E6 rr        	inc bufaddr		; last cell.
00301A  3  D0 02        	bne :+
00301C  3  E6 rr        	inc bufaddr+1
00301E  3               :
00301E  3  A0 00        	ldy #0
003020  3  B1 rr        	lda (bufaddr),y		; fetch type.
003022  3  C5 63        	cmp z80_b		; is this fatal?
003024  3  D0 01        	bne :+
003026  3  60           	rts			; yes.
003027  3               :
003027  3               tded1:
003027  3  A5 rr        	lda dispy		; vertical position.
003029  3  29 07        	and #7 			; is it straddling cells?
00302B  3  D0 01        	bne :+
00302D  3  60           	rts			; no, job done.
00302E  3               :
00302E  3  18           	clc			; point to next row.
00302F  3  A5 rr        	lda bufaddr
003031  3  65 64        	adc z80_e
003033  3  85 rr        	sta bufaddr
003035  3  90 02        	bcc :+
003037  3  E6 rr        	inc bufaddr+1
003039  3               :
003039  3  A0 00        	ldy #0
00303B  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
00303D  3  C5 63        	cmp z80_b		; is this fatal?
00303F  3  D0 01        	bne :+
003041  3  60           	rts			; yes.
003042  3               :
003042  3  E6 rr        	inc bufaddr		; next cell.
003044  3  D0 02        	bne :+
003046  3  E6 rr        	inc bufaddr+1
003048  3               :
003048  3  A0 00        	ldy #0
00304A  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00304C  3  C5 63        	cmp z80_b		; is this fatal?
00304E  3  D0 01        	bne :+
003050  3  60           	rts			; yes.
003051  3               :
003051  3  A5 62        	lda z80_c		; horizontal position.
003053  3  29 07        	and #7			; is it straddling cells?
003055  3  D0 01        	bne :+
003057  3  60           	rts			; no.
003058  3               :
003058  3  E6 rr        	inc bufaddr		; last cell.
00305A  3  D0 02        	bne :+
00305C  3  E6 rr        	inc bufaddr+1
00305E  3               :
00305E  3  A0 00        	ldy #0
003060  3  B1 rr        	lda (bufaddr),y		; fetch final type.
003062  3  60           	rts 			; return with final type in accumulator.
003063  3               
003063  3               ;---------------------------------------------------
003063  3               ; Fetch block type at (dispx, dispy).
003063  3               ;
003063  3               ; Output:
003063  3               ;  A = block type
003063  3               ;---------------------------------------------------
003063  3               
003063  3               tstbl:
003063  3  A5 rr        	lda dispy 		; fetch y coord.
003065  3  4A           	lsr a			; bufaddr = y/8
003066  3  4A           	lsr a
003067  3  4A           	lsr a
003068  3  85 rr        	sta chary
00306A  3               
00306A  3  85 rr        	sta bufaddr
00306C  3  A9 00        	lda #0
00306E  3  85 rr        	sta bufaddr+1
003070  3               
003070  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
003072  3  26 rr        	rol bufaddr+1
003074  3  06 rr        	asl bufaddr
003076  3  26 rr        	rol bufaddr+1
003078  3  06 rr        	asl bufaddr
00307A  3  26 rr        	rol bufaddr+1
00307C  3  06 rr        	asl bufaddr
00307E  3  26 rr        	rol bufaddr+1
003080  3  06 rr        	asl bufaddr
003082  3  26 rr        	rol bufaddr+1
003084  3               
003084  3  A5 rr        	lda dispx		; x/8
003086  3  4A           	lsr a
003087  3  4A           	lsr a
003088  3  4A           	lsr a
003089  3  85 rr        	sta charx
00308B  3               
00308B  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00308C  3  65 rr        	adc bufaddr
00308E  3  69 00        	adc #<MAP
003090  3  85 rr        	sta bufaddr
003092  3  A5 rr        	lda bufaddr+1
003094  3  69 D8        	adc #>MAP
003096  3  85 rr        	sta bufaddr+1
003098  3               
003098  3  A0 00        	ldy #0
00309A  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
00309C  3  60           	rts
00309D  3               
00309D  3               
00309D  3               ;-------------------------------------------------------------------
00309D  3               ; Jump - if we can.
00309D  3               ; Requires initial speed to be set up in accumulator prior to call.
00309D  3               ;
00309D  3               ; Input:
00309D  3               ;  IX = sprite address
00309D  3               ;-------------------------------------------------------------------
00309D  3               
00309D  3               jump:
00309D  3  A0 0D        	ldy #13
00309F  3  B1 68        	lda (z80_ix),y		; jump table low.
0030A1  3  A0 0E        	ldy #14
0030A3  3  11 68        	ora (z80_ix),y		; jump table high.
0030A5  3  F0 01        	beq :+
0030A7  3  60           	rts			; already in the air.
0030A8  3               :
0030A8  3  A9 42        	lda #>jtab
0030AA  3  A0 0E        	ldy #14
0030AC  3  91 68        	sta (z80_ix),y		; set jump high.
0030AE  3  A9 48        	lda #<jtab		; jump table start.
0030B0  3  A0 0D        	ldy #13
0030B2  3  91 68        	sta (z80_ix),y		; set jump low.
0030B4  3  60           	rts
0030B5  3               
0030B5  3               ; Jump table.
0030B5  3               
0030B5  3               ;jtab:
0030B5  3               ;	.byte 248,250,252
0030B5  3               ;	.byte 254,254,255
0030B5  3               ;	.byte 255,255,0,0
0030B5  3               ;	.byte 0,1,1,1,2,2
0030B5  3               ;	.byte 4,6,8,8,8,99
0030B5  3               
0030B5  3               ;------------------------------------------------
0030B5  3               ; Random numbers code.
0030B5  3               ; Pseudo-random number generator, 8-bit.
0030B5  3               ;
0030B5  3               ; Output:
0030B5  3               ;  RND = random number
0030B5  3               ;------------------------------------------------
0030B5  3               
0030B5  3               random:
0030B5  3  A5 rr        	lda seed
0030B7  3  F0 05        	beq doEor
0030B9  3  0A           	asl a
0030BA  3  F0 04        	beq noEor
0030BC  3  90 02        	bcc noEor
0030BE  3  49 1D        doEor:	eor #$1d
0030C0  3  85 rr        noEor:	sta seed
0030C2  3  60           	rts
0030C3  3               
0030C3  3  A5 rr        	lda seed		; get last random number.
0030C5  3  0A           	asl a
0030C6  3  0A           	asl a
0030C7  3  18           	clc
0030C8  3  65 rr        	adc seed
0030CA  3  18           	clc
0030CB  3  69 45        	adc #$45
0030CD  3  85 rr        	sta seed		; store new seed.
0030CF  3  85 rr        	sta varrnd		; return number in variable.
0030D1  3  60           	rts
0030D2  3               
0030D2  3               ;--------------------------------------------------------
0030D2  3               ; Keys
0030D2  3               ;
0030D2  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0030D2  3               ;             ||||||||
0030D2  3               ;             |||||||+> Right    KEY 0  - X
0030D2  3               ;             ||||||+-> Left     KEY 1  - Z
0030D2  3               ;             |||||+--> Down     KEY 2  - .
0030D2  3               ;             ||||+---> Up       KEY 3  - ;
0030D2  3               ;             |||+----> Fire1    KEY 4  - SPC
0030D2  3               ;             ||+-----> Fire2    KEY 5  - Q
0030D2  3               ;             |+------> Fire3    KEY 6  - P
0030D2  3               ;             +-------> Not used
0030D2  3               ;
0030D2  3               ;                       Option1  KEY 7  - 1
0030D2  3               ;                       Option2  KEY 8  - 2
0030D2  3               ;                       Option3  KEY 9  - 3
0030D2  3               ;                       Option4  KEY 10 - 4
0030D2  3               ;--------------------------------------------------------
0030D2  3               
0030D2  3               ;              X   Z   .   ;  SPC  Q   P
0030D2  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
0030D2  3               ;        .byte $21,$11,$01,$92                   ; menu options.
0030D2  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
0030D6  3  00 04 14     
0030D9  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
0030DD  3               
0030DD  3               ;-------------------------------------------------------
0030DD  3               ; Joystick and keyboard reading routines.
0030DD  3               ;
0030DD  3               ; contrl = 0, Keyboard
0030DD  3               ;          1, JoyKeyb
0030DD  3               ;          2, JoyMMC
0030DD  3               ;-------------------------------------------------------
0030DD  3               
0030DD  3               joykey:
0030DD  3  A5 rr        	lda contrl 		; control flag.
0030DF  3  C9 01        	cmp #1
0030E1  3  D0 03        	bne :+
0030E3  3  4C CB 42     	jmp joy1 		; read keyboard joystick
0030E6  3               :
0030E6  3  C9 02        	cmp #2
0030E8  3  D0 03        	bne :+
0030EA  3  4C CC 42     	jmp joy2 		; read MMC joystick.
0030ED  3               :
0030ED  3               ; Keyboard controls.
0030ED  3               
0030ED  3  A9 00        	lda #0		 	; zero reading.
0030EF  3  85 64        	sta z80_e
0030F1  3               
0030F1  3  A0 06        	ldy #6	 		; address of last key.
0030F3  3               joyke0:
0030F3  3  B9 49 42     	lda keys,y 		; get key from table.
0030F6  3  20 CD 42     	jsr ktest		; being pressed?
0030F9  3  26 64        	rol z80_e 		; rotate into reading.
0030FB  3               
0030FB  3  88           	dey		 	; next key.
0030FC  3  10 F5        	bpl joyke0 		; repeat for all keys.
0030FE  3  A5 64        	lda z80_e 		; copy e register to accumulator.
003100  3  85 rr        	sta joyval		; remember value.
003102  3  60           	rts
003103  3               
003103  3               ;---------------------------------------------------------------
003103  3               ; Getkey in column,row format
003103  3               ;
003103  3               ; Output:
003103  3               ;  A = high nibble=row and low nibble=column key in matrix
003103  3               ;---------------------------------------------------------------
003103  3               
003103  3               kget:
003103  3  A9 F0        	lda #ScrMode		; high-mono mode.
003105  3  8D 00 B0     	sta ScrSelAddr		; screen select port
003108  3  86 rr        	stx xtmp
00310A  3               kget4:
00310A  3  20 F4 FF     	jsr READKEY		; read key until pressed
00310D  3  C0 FF        	cpy #255
00310F  3  F0 F9        	beq kget4
003111  3  85 rr        	sta rcol		; save column
003113  3  86 rr        	stx rrow		; determine row
003115  3               kget3:
003115  3  20 F4 FF     	jsr READKEY		; wait until key released
003118  3  C0 FF        	cpy #255
00311A  3  D0 F9        	bne kget3
00311C  3               
00311C  3  38           	sec			; calculate matrix row
00311D  3  A9 0A        	lda #10
00311F  3  E5 rr        	sbc rrow
003121  3  0A           	asl a
003122  3  0A           	asl a
003123  3  0A           	asl a
003124  3  0A           	asl a
003125  3  85 rr        	sta rrow
003127  3               
003127  3  A0 FF        	ldy #255		; find column mask
003129  3               kget1:
003129  3  C8           	iny
00312A  3  B9 54 42     	lda keymask,y
00312D  3  C5 rr        	cmp rcol
00312F  3  F0 03        	beq kget2
003131  3  4C 29 31     	jmp kget1
003134  3               kget2:
003134  3  98           	tya			; determine column
003135  3  18           	clc
003136  3  65 rr        	adc rrow
003138  3  A6 rr        	ldx xtmp
00313A  3  60           	rts
00313B  3               
00313B  3               ;---------------------------------------------------------------
00313B  3               ; Display message.
00313B  3               ;
00313B  3               ; Input:
00313B  3               ;  A = message number
00313B  3               ;---------------------------------------------------------------
00313B  3               
00313B  3               dmsg:
00313B  3  AA           	tax
00313C  3  A9 11        	lda #<msgdat		; pointer to messages.
00313E  3  85 66        	sta z80_l
003140  3  A9 3D        	lda #>msgdat
003142  3  85 67        	sta z80_h
003144  3  20 2B 32     	jsr getwrd		; get message number.
003147  3               dmsg3:
003147  3  20 22 32     	jsr preprt		; pre-printing stuff.
00314A  3  20 3F 2B     	jsr checkx		; make sure we"re in a printable range.
00314D  3  A5 rr        	lda prtmod		; print mode.
00314F  3  D0 50        	bne bmsg1		; no, double-height text.
003151  3               
003151  3  AD EE 3A     	lda fcolour		; Set textcolour
003154  3  20 D2 2C     	jsr pchar
003157  3  20 0F 32     	jsr nexpos
00315A  3               dmsg0:
00315A  3  A5 67        	lda z80_h		; store string pointer.
00315C  3  48           	pha
00315D  3  A5 66        	lda z80_l
00315F  3  48           	pha
003160  3               
003160  3  A0 00        	ldy #0
003162  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
003164  3  29 7F        	and #127		; remove any end marker.
003166  3  C9 0D        	cmp #13
003168  3  F0 24        	beq dmsg1
00316A  3  20 D2 2C     	jsr pchar		; display character.
00316D  3  20 0F 32     	jsr nexpos 		; display position.
003170  3  D0 03        	bne dmsg2		; not on a new line.
003172  3  20 14 32     	jsr nexlin		; next line down.
003175  3               dmsg2:
003175  3  68           	pla			; retrieve string pointer
003176  3  85 66        	sta z80_l
003178  3  68           	pla
003179  3  85 67        	sta z80_h
00317B  3               
00317B  3  A0 00        	ldy #0
00317D  3  B1 66        	lda (z80_hl),y		; fetch last character.
00317F  3  0A           	asl a  			; was it the end?
003180  3  90 03        	bcc :+
003182  3  4C 92 2B     	jmp dscor2		; yes, job done.
003185  3               :
003185  3  E6 66        	inc z80_l		; next character to display.
003187  3  D0 02        	bne :+
003189  3  E6 67        	inc z80_h
00318B  3               :
00318B  3  4C 5A 31     	jmp dmsg0
00318E  3               dmsg1:
00318E  3  E6 rr        	inc dispy
003190  3  A5 rr        	lda dispy
003192  3  C9 19        	cmp #ScrHeight
003194  3  90 04        	bcc dmsg4
003196  3  A9 00        	lda #0
003198  3  85 rr        	sta dispy
00319A  3               dmsg4:
00319A  3  A9 00        	lda #0
00319C  3  85 rr        	sta dispx
00319E  3  4C 75 31     	jmp dmsg2
0031A1  3               
0031A1  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0031A1  3               
0031A1  3               ;----------------------------------------------------------
0031A1  3               ; Display message in big text.
0031A1  3               ;
0031A1  3               ; Input:
0031A1  3               ;  HL = string pointer
0031A1  3               ;----------------------------------------------------------
0031A1  3               
0031A1  3               bmsg1:
0031A1  3  AD EE 3A     	lda fcolour		; Set textcolour
0031A4  3  20 E0 31     	jsr bchar
0031A7  3  A9 0D        	lda #13			; Set double height
0031A9  3  20 E0 31     	jsr bchar
0031AC  3               bmsg4:
0031AC  3  A0 00        	ldy #0
0031AE  3  B1 66        	lda (z80_hl),y 		; get character to display.
0031B0  3  29 7F        	and #127		; only want 7 bits.
0031B2  3  C9 0D        	cmp #13
0031B4  3  F0 15        	beq bmsg2
0031B6  3  20 E0 31     	jsr bchar 		; display big char.
0031B9  3               bmsg3:
0031B9  3  A0 00        	ldy #0
0031BB  3  B1 66        	lda (z80_hl),y 		; look at last character.
0031BD  3  48           	pha
0031BE  3  E6 66        	inc z80_l 		; next character in list.
0031C0  3  D0 02        	bne :+
0031C2  3  E6 67        	inc z80_h
0031C4  3               :
0031C4  3  68           	pla
0031C5  3  0A           	asl a  			; was terminator flag set?
0031C6  3  90 E4        	bcc bmsg4		; no, keep going.
0031C8  3  4C 92 2B     	jmp dscor2
0031CB  3               bmsg2:
0031CB  3  A9 00        	lda #0
0031CD  3  85 rr        	sta dispx
0031CF  3  E6 rr        	inc dispy
0031D1  3  E6 rr        	inc dispy
0031D3  3  A5 rr        	lda dispy
0031D5  3  C9 18        	cmp #ScrHeight-1
0031D7  3  90 E0        	bcc bmsg3
0031D9  3  A9 00        	lda #0
0031DB  3  85 rr        	sta dispy
0031DD  3  4C B9 31     	jmp bmsg3
0031E0  3               
0031E0  3               ;----------------------------------------------------------
0031E0  3               ; Big character display.
0031E0  3               ;
0031E0  3               ; Input:
0031E0  3               ;  A = character
0031E0  3               ;----------------------------------------------------------
0031E0  3               
0031E0  3               bchar:
0031E0  3  20 D2 2C     	jsr pchar 		; display big char.
0031E3  3  E6 rr        	inc dispy
0031E5  3  20 D2 2C     	jsr pchar
0031E8  3  C6 rr        	dec dispy
0031EA  3  20 0F 32     	jsr nexpos		; display position.
0031ED  3  60           	rts
0031EE  3               
0031EE  3               bchar3:
0031EE  3  E6 rr        	inc dispy
0031F0  3  20 14 32     	jsr nexlin 		; next line check.
0031F3  3               bchar2:
0031F3  3  4C 92 2B     	jmp dscor2		; tidy up line and column variables.
0031F6  3               
0031F6  3               
0031F6  3               ;-------------------------------------------------
0031F6  3               ; Display a character.
0031F6  3               ;
0031F6  3               ; Input:
0031F6  3               ;  A = character
0031F6  3               ;-------------------------------------------------
0031F6  3               
0031F6  3               achar:
0031F6  3  85 63        	sta z80_b 		; copy to b.
0031F8  3  20 22 32     	jsr preprt 		; get ready to print.
0031FB  3  A5 63        	lda z80_b		; character in accumulator.
0031FD  3  A6 rr        	ldx prtmod 		; print mode.
0031FF  3  F0 03        	beq :+
003201  3  4C E0 31     	jmp bchar 		; no, double-height text.
003204  3               :
003204  3  20 D2 2C     	jsr pchar 		; display character.
003207  3  20 0F 32     	jsr nexpos 		; display position.
00320A  3  F0 E2        	beq bchar3		; next line down.
00320C  3  4C F3 31     	jmp bchar2 		; tidy up.
00320F  3               
00320F  3               
00320F  3               ;-------------------------------------------------
00320F  3               ; Get next print column position.
00320F  3               ;-------------------------------------------------
00320F  3               
00320F  3               nexpos:
00320F  3  E6 rr        	inc dispx		; move along one position.
003211  3  A5 rr        	lda dispx 		; get coordinate.
003213  3               ;	and #31
003213  3  60           	rts 			; return with status in zero flag.
003214  3               
003214  3               ;-------------------------------------------------
003214  3               ; Get next print line position.
003214  3               ;-------------------------------------------------
003214  3               
003214  3               nexlin:
003214  3  E6 rr        	inc dispy 		; newline.
003216  3  A5 rr        	lda dispy		; vertical position.
003218  3  C9 19        	cmp #ScrHeight			; past screen edge?
00321A  3  B0 01        	bcs :+
00321C  3  60           	rts			; no, still okay.
00321D  3               :
00321D  3  A9 00        	lda #0			; restart at top.
00321F  3  85 rr        	sta dispy
003221  3  60           	rts
003222  3               
003222  3               ;--------------------------------------------------------
003222  3               ; Pre-print preliminaries.
003222  3               ;--------------------------------------------------------
003222  3               
003222  3               preprt:
003222  3               ;	lda #<(FONT-256)		; font pointer.
003222  3               ;	sta grbase		; set up graphics base.
003222  3               ;	lda #>(FONT-256)
003222  3               ;	sta grbase+1
003222  3               prescr:
003222  3  A5 rr        	lda charx 		; display coordinates.
003224  3  85 rr        	sta dispx		; set up general coordinates.
003226  3  A5 rr        	lda chary
003228  3  85 rr        	sta dispy
00322A  3  60           	rts
00322B  3               
00322B  3               ;--------------------------------------------------------------
00322B  3               ; Get messagenr x in hl
00322B  3               ;
00322B  3               ; Input:
00322B  3               ;  HL = pointer to message list
00322B  3               ;  X  = message number.
00322B  3               ;--------------------------------------------------------------
00322B  3               
00322B  3               getwrd:
00322B  3  E0 00        	cpx #0
00322D  3  D0 01        	bne:+ 			; first word in list?
00322F  3  60           	rts 			; yep, don't search.
003230  3               :
003230  3  A0 00        	ldy #0
003232  3               getwd0:
003232  3  B1 66        	lda (z80_hl),y
003234  3  48           	pha
003235  3  E6 66        	inc z80_l
003237  3  D0 02        	bne :+
003239  3  E6 67        	inc z80_h
00323B  3               :
00323B  3  68           	pla
00323C  3  C9 80        	cmp #128		; found end?
00323E  3  30 F2        	bmi getwd0		; no, carry on.
003240  3  CA           	dex			; until we have right number.
003241  3  D0 EF        	bne getwd0
003243  3  60           	rts
003244  3               
003244  3               ;-----------------------------------------------------------
003244  3               ; Bubble sort.
003244  3               ;-----------------------------------------------------------
003244  3               
003244  3               bsort:
003244  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
003246  3  85 rr        	sta qscnt
003248  3               
003248  3  A9 00        	lda #<sprtab 		; sprite table.
00324A  3  85 68        	sta z80_x
00324C  3  A9 3A        	lda #>sprtab
00324E  3  85 69        	sta z80_i
003250  3               bsort0:
003250  3  A0 00        	ldy #0
003252  3  B1 68        	lda (z80_ix),y 		; first sprite type.
003254  3  C9 FF        	cmp #255 		; is it switched off?
003256  3  F0 30        	beq swemp		; yes, may need to switch another in here.
003258  3               
003258  3  A0 11        	ldy #TABSIZ
00325A  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00325C  3  C9 FF        	cmp #255 		; is it enabled?
00325E  3  F0 0A        	beq bsort2 		; no, nothing to swap.
003260  3               
003260  3  A0 14        	ldy #TABSIZ+3
003262  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
003264  3  A0 03        	ldy #3
003266  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
003268  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
00326A  3               bsort2:
00326A  3  18           	clc
00326B  3  A5 68        	lda z80_x
00326D  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00326F  3  85 68        	sta z80_x
003271  3  90 02        	bcc :+
003273  3  E6 69        	inc z80_i
003275  3               :
003275  3  C6 rr        	dec qscnt
003277  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
003279  3  60           	rts
00327A  3               
00327A  3               ;qscnt:	.byte 0
00327A  3               
00327A  3               bsort1:
00327A  3  A0 11        	ldy #TABSIZ
00327C  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
00327E  3  C9 FF        	cmp #255		; is it enabled?
003280  3  F0 E8        	beq bsort2		; no, nothing to swap.
003282  3  20 96 32     	jsr swspr		; swap positions.
003285  3  4C 6A 32     	jmp bsort2
003288  3               swemp:
003288  3  A0 11        	ldy #TABSIZ
00328A  3  B1 68        	lda (z80_ix),y		; next table entry.
00328C  3  C9 FF        	cmp #255		; is that one on?
00328E  3  F0 DA        	beq bsort2		; no, nothing to swap.
003290  3  20 96 32     	jsr swspr		; swap positions.
003293  3  4C 6A 32     	jmp bsort2
003296  3               
003296  3               ; Swap sprites.
003296  3               
003296  3               swspr:
003296  3  A5 68        	lda z80_x		; table address
003298  3  85 64        	sta z80_e		; copy to de pair.
00329A  3  85 66        	sta z80_l		; copy to hl pair.
00329C  3  A5 69        	lda z80_i
00329E  3  85 67        	sta z80_h
0032A0  3  85 65        	sta z80_d
0032A2  3               
0032A2  3  18           	clc
0032A3  3  A5 66        	lda z80_l
0032A5  3  69 11        	adc #TABSIZ		; distance to second entry.
0032A7  3  85 66        	sta z80_l
0032A9  3  90 02        	bcc :+
0032AB  3  E6 67        	inc z80_h
0032AD  3               :
0032AD  3  A9 11        	lda #TABSIZ		; bytes to swap.
0032AF  3  85 63        	sta z80_b
0032B1  3  A0 00        	ldy #0
0032B3  3               swspr0:
0032B3  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0032B5  3  48           	pha
0032B6  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0032B8  3  91 66        	sta (z80_hl),y 		; copy to second.
0032BA  3  68           	pla
0032BB  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0032BD  3               
0032BD  3  E6 64        	inc z80_e 		; next byte.
0032BF  3  D0 02        	bne :+
0032C1  3  E6 65        	inc z80_d
0032C3  3               :
0032C3  3  E6 66        	inc z80_l 		; next byte.
0032C5  3  D0 02        	bne :+
0032C7  3  E6 67        	inc z80_h
0032C9  3               :
0032C9  3  C6 63        	dec z80_b
0032CB  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0032CD  3  60           	rts
0032CE  3               
0032CE  3               ;----------------------------------------------------
0032CE  3               ; Process sprites.
0032CE  3               ;----------------------------------------------------
0032CE  3               
0032CE  3               pspr:
0032CE  3  A9 0C        	lda #NUMSPR		; sprites to process.
0032D0  3  85 rr        	sta sprptr
0032D2  3               
0032D2  3  A9 00        	lda #<sprtab 		; sprite table.
0032D4  3  85 68        	sta z80_x
0032D6  3  A9 3A        	lda #>sprtab
0032D8  3  85 69        	sta z80_i
0032DA  3               pspr1:
0032DA  3  A0 00        	ldy #0
0032DC  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
0032DE  3  C9 09        	cmp #9 			; within range of sprite types?
0032E0  3  B0 03        	bcs :+
0032E2  3  20 F5 32     	jsr pspr2 		; yes, process this one.
0032E5  3               :
0032E5  3  18           	clc
0032E6  3  A5 68        	lda z80_x
0032E8  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0032EA  3  85 68        	sta z80_x
0032EC  3  90 02        	bcc :+
0032EE  3  E6 69        	inc z80_i		; next sprite.
0032F0  3               :
0032F0  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
0032F2  3  D0 E6        	bne pspr1
0032F4  3  60           	rts
0032F5  3               
0032F5  3               ;sprptr:	.byte 0
0032F5  3               
0032F5  3               pspr2:
0032F5  3  A5 68        	lda z80_x 		; store original sprite pointer.
0032F7  3  85 rr        	sta ogptr
0032F9  3  A5 69        	lda z80_i
0032FB  3  85 rr        	sta ogptr+1
0032FD  3  20 09 33     	jsr pspr3		; do the routine.
003300  3               rtorg:
003300  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
003302  3  85 68        	sta z80_x
003304  3  A5 rr        	lda ogptr+1
003306  3  85 69        	sta z80_i
003308  3               rtorg0:
003308  3  60           	rts
003309  3               
003309  3               pspr3:
003309  3  A9 3E        	lda #<evtyp0		; sprite type events list.
00330B  3  85 66        	sta z80_l
00330D  3  A9 33        	lda #>evtyp0
00330F  3  85 67        	sta z80_h
003311  3               pspr4:
003311  3  B1 68        	lda (z80_ix),y
003313  3  0A           	asl a			; double accumulator.
003314  3  18           	clc
003315  3  65 66        	adc z80_l
003317  3  85 66        	sta z80_l
003319  3  90 02        	bcc :+
00331B  3  E6 67        	inc z80_h
00331D  3               :
00331D  3  B1 66        	lda (z80_hl),y
00331F  3  85 64        	sta z80_e 		; copy to de.
003321  3  48           	pha
003322  3               
003322  3  E6 66        	inc z80_l 		; next byte of address.
003324  3  D0 02        	bne :+
003326  3  E6 67        	inc z80_h
003328  3               :
003328  3  B1 66        	lda (z80_hl),y 		; address high.
00332A  3  85 65        	sta z80_d
00332C  3               
00332C  3  48           	pha	 		; swap address into hl.
00332D  3  A5 67        	lda z80_h
00332F  3  85 65        	sta z80_d
003331  3  68           	pla
003332  3  85 67        	sta z80_h
003334  3  68           	pla
003335  3  85 66        	sta z80_l
003337  3  A5 66        	lda z80_l
003339  3  85 64        	sta z80_e
00333B  3               
00333B  3  6C 66 00     	jmp (z80_hl) 		; go there.
00333E  3               
00333E  3               ;ogptr:	.word 0			; original sprite pointer.
00333E  3               
00333E  3               ; Address of each sprite type's routine.
00333E  3               
00333E  3  FB 3A        evtyp0:	.word evnt00
003340  3  53 3C        evtyp1:	.word evnt01
003342  3  75 3C        evtyp2:	.word evnt02
003344  3  76 3C        evtyp3:	.word evnt03
003346  3  77 3C        evtyp4:	.word evnt04
003348  3  78 3C        evtyp5:	.word evnt05
00334A  3  79 3C        evtyp6:	.word evnt06
00334C  3  7A 3C        evtyp7:	.word evnt07
00334E  3  7B 3C        evtyp8:	.word evnt08
003350  3               
003350  3               ;--------------------------------------------------------------
003350  3               ; Display sprites.
003350  3               ;
003350  3               ; Input:
003350  3               ;  IX = sprite table
003350  3               ;--------------------------------------------------------------
003350  3               
003350  3               dspr:
003350  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003352  3  85 rr        	sta sprcnt
003354  3               dspr0:
003354  3  A0 00        	ldy #0
003356  3  B1 68        	lda (z80_ix),y 		; get sprite type.
003358  3  C9 FF        	cmp #255 		; is it enabled?
00335A  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00335C  3               dspr5:
00335C  3  A0 05        	ldy #5
00335E  3  B1 68        	lda (z80_ix),y 		; new type.
003360  3  C9 FF        	cmp #255		; is it enabled?
003362  3  D0 76        	bne dspr3 		; yes, it needs drawing.
003364  3               dspr2:
003364  3  A0 05        	ldy #5
003366  3  B1 68        	lda (z80_ix),y 		; copy new type.
003368  3  A0 00        	ldy #0
00336A  3  91 68        	sta (z80_ix),y
00336C  3  A0 06        	ldy #6
00336E  3  B1 68        	lda (z80_ix),y 		; copy new image number.
003370  3  A0 01        	ldy #1
003372  3  91 68        	sta (z80_ix),y
003374  3  A0 07        	ldy #7
003376  3  B1 68        	lda (z80_ix),y 		; copy new frame.
003378  3  A0 02        	ldy #2
00337A  3  91 68        	sta (z80_ix),y
00337C  3  A0 08        	ldy #8
00337E  3  B1 68        	lda (z80_ix),y 		; copy new y.
003380  3  A0 03        	ldy #3
003382  3  91 68        	sta (z80_ix),y
003384  3  A0 09        	ldy #9
003386  3  B1 68        	lda (z80_ix),y 		; copy new x.
003388  3  A0 04        	ldy #4
00338A  3  91 68        	sta (z80_ix),y
00338C  3               
00338C  3  18           	clc
00338D  3  A5 68        	lda z80_x
00338F  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
003391  3  85 68        	sta z80_x
003393  3  A5 69        	lda z80_i
003395  3  69 00        	adc #0
003397  3  85 69        	sta z80_i 		; next sprite.
003399  3  C6 rr        	dec sprcnt
00339B  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
00339D  3  60           	rts
00339E  3               dspr1:
00339E  3  A0 05        	ldy #5
0033A0  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0033A2  3  C9 FF        	cmp #255		; is this enabled?
0033A4  3  D0 06        	bne dspr4 		; yes, display both.
0033A6  3               dspr6:
0033A6  3  20 97 34     	jsr sspria 		; show single sprite.
0033A9  3  4C 64 33     	jmp dspr2
0033AC  3               
0033AC  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0033AC  3               
0033AC  3               dspr4:
0033AC  3  A0 04        	ldy #4
0033AE  3  B1 68        	lda (z80_ix),y		; old x.
0033B0  3  A0 09        	ldy #9
0033B2  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0033B4  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
0033B6  3               
0033B6  3  A0 03        	ldy #3
0033B8  3  B1 68        	lda (z80_ix),y		; old y.
0033BA  3  A0 08        	ldy #8
0033BC  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0033BE  3  D0 14        	bne dspr7		; they differ, need to redraw.
0033C0  3               
0033C0  3  A0 02        	ldy #2
0033C2  3  B1 68        	lda (z80_ix),y 		; old frame.
0033C4  3  A0 07        	ldy #7
0033C6  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0033C8  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
0033CA  3               
0033CA  3  A0 01        	ldy #1
0033CC  3  B1 68        	lda (z80_ix),y 		; old image.
0033CE  3  A0 06        	ldy #6
0033D0  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0033D2  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
0033D4  3               dspr7:
0033D4  3  20 CA 34     	jsr sspric 		; delete old sprite, draw new one simultaneously.
0033D7  3  4C 64 33     	jmp dspr2
0033DA  3               dspr3:
0033DA  3  20 C4 34     	jsr ssprib 		; show single sprite.
0033DD  3  4C 64 33     	jmp dspr2
0033E0  3               
0033E0  3               ;sprcnt:	.byte 0
0033E0  3               
0033E0  3               ;-----------------------------------------
0033E0  3               ; Get sprite address calculations.
0033E0  3               ; gspran = new sprite, gsprad = old sprite.
0033E0  3               ;
0033E0  3               ; Input:
0033E0  3               ;  IX = sprite address
0033E0  3               ;-----------------------------------------
0033E0  3               
0033E0  3               gspran:
0033E0  3  A0 08        	ldy #8
0033E2  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
0033E4  3  85 rr        	sta dispy
0033E6  3  A0 09        	ldy #9
0033E8  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
0033EA  3  85 rr        	sta dispx
0033EC  3  A0 06        	ldy #6
0033EE  3  B1 68        	lda (z80_ix),y 		; new sprite image.
0033F0  3  20 22 38     	jsr gfrm		; fetch start frame for this sprite.
0033F3  3               
0033F3  3  A0 00        	ldy #0
0033F5  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0033F7  3  A0 07        	ldy #7
0033F9  3  18           	clc
0033FA  3  71 68        	adc (z80_ix),y 		; new add frame number.
0033FC  3  4C 1B 34     	jmp gspra0
0033FF  3               
0033FF  3               ;-----------------------------------------
0033FF  3               ; Calculate old sprite address
0033FF  3               ;
0033FF  3               ; Input:
0033FF  3               ;  IX = sprite address
0033FF  3               ;
0033FF  3               ; Output:
0033FF  3               ;  B  = right byte mask
0033FF  3               ;  C  = left byte mask
0033FF  3               ;  DE = spriteframe address
0033FF  3               ;  scraddr = screenaddress(dispx,dispy)
0033FF  3               ;-----------------------------------------
0033FF  3               
0033FF  3               gsprad:
0033FF  3  A0 03        	ldy #3
003401  3  B1 68        	lda (z80_ix),y		; y coordinate.
003403  3  85 rr        	sta dispy
003405  3  A0 04        	ldy #4
003407  3  B1 68        	lda (z80_ix),y		; x coordinate.
003409  3  85 rr        	sta dispx
00340B  3  A0 01        	ldy #1
00340D  3  B1 68        	lda (z80_ix),y 		; sprite image.
00340F  3  20 22 38     	jsr gfrm 		; fetch start frame for this sprite.
003412  3               
003412  3               ; z80_hl = sprite framenr
003412  3               
003412  3  A0 00        	ldy #0
003414  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003416  3               
003416  3               ; z80_ix+2 = current framenr
003416  3               
003416  3  A0 02        	ldy #2
003418  3  18           	clc
003419  3  71 68        	adc (z80_ix),y 		; add frame number.
00341B  3               
00341B  3               ; A = sprite framenr + current framenr
00341B  3               ;
00341B  3               ; framestartaddress = 24 * A (Normal 4 x 32 = 128)
00341B  3               ; frameoffset =  + 6 * (x and 2)   (Normal steps of 32)
00341B  3               ; framedataptr = framestartaddress + frameoffset + sprgfx
00341B  3               
00341B  3               gspra0:
00341B  3               
00341B  3               ; framestartaddress = 24 * sprite image (Normal 4 x 32 = 128)
00341B  3               
00341B  3  85 64        	sta z80_e
00341D  3  A9 00        	lda #0
00341F  3  85 65        	sta z80_d
003421  3               
003421  3  06 64        	asl z80_e		; a x 8
003423  3  26 65        	rol z80_d
003425  3  06 64        	asl z80_e
003427  3  26 65        	rol z80_d
003429  3  06 64        	asl z80_e
00342B  3  26 65        	rol z80_d
00342D  3               
00342D  3  A5 64        	lda z80_e		; save a x 8
00342F  3  8D 95 34     	sta tmp1
003432  3  A5 65        	lda z80_d
003434  3  8D 96 34     	sta tmp2
003437  3               
003437  3  06 64        	asl z80_e		; a x 16
003439  3  26 65        	rol z80_d
00343B  3               
00343B  3  18           	clc			; z80_de = ax8 + ax16 = ax24
00343C  3  A5 64        	lda z80_e
00343E  3  6D 95 34     	adc tmp1
003441  3  85 64        	sta z80_e
003443  3  A5 65        	lda z80_d
003445  3  6D 96 34     	adc tmp2
003448  3  85 65        	sta z80_d
00344A  3               
00344A  3               ;.if bflag
00344A  3               ;	lsr tmp1
00344A  3               ;	ror tmp2
00344A  3               ;	clc
00344A  3               ;	lda tmp2
00344A  3               ;	adc z80_e
00344A  3               ;	sta z80_e
00344A  3               ;	lda tmp1
00344A  3               ;	adc z80_d
00344A  3               ;	sta z80_d
00344A  3               ;.endif
00344A  3               
00344A  3  18           	clc 			; address of play sprites.
00344B  3  A5 64        	lda z80_e
00344D  3  69 66        	adc #<sprgfx
00344F  3  85 64        	sta z80_e
003451  3  A5 65        	lda z80_d
003453  3  69 3D        	adc #>sprgfx
003455  3  85 65        	sta z80_d
003457  3               
003457  3               ; frameoffset =  + 12 * (x and 1) (steps of 32)
003457  3               
003457  3  A5 rr        	lda dispx 		; x coordinate.
003459  3  29 01        	and #1
00345B  3  F0 0B        	beq no_shift
00345D  3  18           	clc			; Point to odd frame
00345E  3  A5 64        	lda z80_e
003460  3  69 0C        	adc #12
003462  3  85 64        	sta z80_e
003464  3  90 02        	bcc :+
003466  3  E6 65        	inc z80_d
003468  3               :
003468  3               ; Spritemask is z80_c = mask_left and z80_b = mask_right
003468  3               
003468  3               no_shift:
003468  3  A5 rr        	lda dispx
00346A  3  29 01        	and #1
00346C  3  0A           	asl a
00346D  3  AA           	tax
00346E  3  BD 91 34     	lda spmask,x		 ; pointer to mask table.
003471  3  85 62        	sta z80_c 		; left mask.
003473  3  BD 92 34     	lda spmask+1,x
003476  3  85 63        	sta z80_b 		; right mask.
003478  3               
003478  3               ;------------------------------------------------------------------
003478  3               ; Drop into screen address routine.
003478  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003478  3               ;------------------------------------------------------------------
003478  3               
003478  3               ; Check for bottom of screen
003478  3               
003478  3               scadd:
003478  3  A6 rr        	ldx dispy
00347A  3  E0 4C        	cpx #76
00347C  3  90 02        	bcc :+
00347E  3  A2 4C        	ldx #76
003480  3               :
003480  3               
003480  3  A5 rr        	lda dispx
003482  3  4A           	lsr a
003483  3  18           	clc
003484  3  7D 00 DC     	adc SCADTB_lb,x
003487  3  85 rr        	sta scraddr
003489  3  BD 00 DD     	lda SCADTB_hb,x
00348C  3  69 00        	adc #0
00348E  3  85 rr        	sta scraddr+1
003490  3  60           	rts
003491  3               
003491  3               spmask:
003491  3  FF 00        	.byte $ff,$00
003493  3  6A 35        	.byte $6a,$35
003495  3               
003495  3  00           tmp1:	.byte 0
003496  3  00           tmp2:	.byte 0
003497  3               
003497  3               ;-----------------------------------------------------------------
003497  3               ; These are the sprite routines.
003497  3               ; sspria = single sprite, old (ix).
003497  3               ; ssprib = single sprite, new (ix+5).
003497  3               ; sspric = both sprites, old (ix) and new (ix+5).
003497  3               ;-----------------------------------------------------------------
003497  3               
003497  3               sspria:
003497  3  20 FF 33     	jsr gsprad		; get old sprite address.
00349A  3               sspri2:
00349A  3  A5 64        	lda z80_e
00349C  3  8D 24 35     	sta dline1+1		; Set spritedata address
00349F  3  8D 35 35     	sta dline2a+1
0034A2  3  8D 40 35     	sta dline2b+1
0034A5  3  8D 4B 35     	sta dline2c+1
0034A8  3  A5 65        	lda z80_d
0034AA  3  8D 25 35     	sta dline1+2
0034AD  3  8D 36 35     	sta dline2a+2
0034B0  3  8D 41 35     	sta dline2b+2
0034B3  3  8D 4C 35     	sta dline2c+2
0034B6  3  86 rr        	stx xtmp
0034B8  3  A2 00        	ldx #0			; vertical lines.
0034BA  3               sspri0:
0034BA  3  20 20 35     	jsr dline		; draw a line.
0034BD  3               
0034BD  3               .if bflag
0034BD  3               	cpx #16			; Detect end of line 3
0034BD  3               .else
0034BD  3  E0 0C        	cpx #12			; Detect end of line 2
0034BF  3               .endif
0034BF  3               
0034BF  3  D0 F9        	bne sspri0		; no, repeat
0034C1  3  A6 rr        	ldx xtmp
0034C3  3  60           	rts
0034C4  3               
0034C4  3               ;-----------------------------------------------------------------
0034C4  3               ; ssprib = single sprite, new (ix).
0034C4  3               ;-----------------------------------------------------------------
0034C4  3               
0034C4  3               ssprib:
0034C4  3  20 E0 33     	jsr gspran 		; get new sprite address.
0034C7  3               				; z80_de = new sprite address
0034C7  3  4C 9A 34     	jmp sspri2
0034CA  3               
0034CA  3               ;-----------------------------------------------------------------
0034CA  3               ; sspric = erase old sprite and plot new sprite line by line
0034CA  3               ;-----------------------------------------------------------------
0034CA  3               
0034CA  3               sspric:
0034CA  3  20 FF 33     	jsr gsprad 		; get old sprite address.
0034CD  3               				; z80_de = old sprite address
0034CD  3  A5 64        	lda z80_e
0034CF  3  8D 64 35     	sta ddline1+1		; Set spritedata address
0034D2  3  8D 77 35     	sta ddline2a+1
0034D5  3  8D 82 35     	sta ddline2b+1
0034D8  3  8D 8D 35     	sta ddline2c+1
0034DB  3  A5 65        	lda z80_d
0034DD  3  8D 65 35     	sta ddline1+2
0034E0  3  8D 78 35     	sta ddline2a+2
0034E3  3  8D 83 35     	sta ddline2b+2
0034E6  3  8D 8E 35     	sta ddline2c+2
0034E9  3  20 EA 42     	jsr exx  		; store addresses.
0034EC  3               
0034EC  3  20 E0 33     	jsr gspran 		; get new sprite addresses.
0034EF  3               				; z80_de = old sprite address
0034EF  3  A5 64        	lda z80_e
0034F1  3  8D 24 35     	sta dline1+1		; Set spritedata address
0034F4  3  8D 35 35     	sta dline2a+1
0034F7  3  8D 40 35     	sta dline2b+1
0034FA  3  8D 4B 35     	sta dline2c+1
0034FD  3  A5 65        	lda z80_d
0034FF  3  8D 25 35     	sta dline1+2
003502  3  8D 36 35     	sta dline2a+2
003505  3  8D 41 35     	sta dline2b+2
003508  3  8D 4C 35     	sta dline2c+2
00350B  3               
00350B  3  86 rr        	stx xtmp
00350D  3  A2 00        	ldx #0			; vertical lines.
00350F  3               lloop:
00350F  3  20 20 35     	jsr dline 		; draw a line.
003512  3  CA           	dex
003513  3  CA           	dex
003514  3  CA           	dex
003515  3  CA           	dex
003516  3  20 60 35     	jsr ddline 		; delete a line.
003519  3               
003519  3               .if bflag
003519  3               	cpx #16			; Detect end of line 3
003519  3               .else
003519  3  E0 0C        	cpx #12			; Detect end of line 2
00351B  3               .endif
00351B  3  D0 F2        	bne lloop		; no, repeat
00351D  3  A6 rr        	ldx xtmp
00351F  3  60           	rts
003520  3               
003520  3               
003520  3               ;-----------------------------------------------------------------
003520  3               
003520  3               dline:
003520  3  BC A2 35     	ldy sprline,x		; point to screenleft
003523  3               dline1:
003523  3  BD 22 3F     	lda objdta,x		; fetch spriteleft byte
003526  3  85 61        	sta z80_a		; save spriteright byte
003528  3  A5 61        	lda z80_a
00352A  3  25 62        	and z80_c		; mask left
00352C  3  51 rr        	eor (scraddr),y		; merge with screenleft
00352E  3  09 20        	ora #$20		; Set bit 5
003530  3  91 rr        	sta (scraddr),y		; write screenleft
003532  3  E8           	inx			; next spritebyte
003533  3  C8           	iny			; point to screenmiddle
003534  3               dline2a:
003534  3  BD 22 3F     	lda objdta,x		; fetch spritemiddle byte
003537  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
003539  3  09 20        	ora #$20		; Set bit 5
00353B  3  91 rr        	sta (scraddr),y		; write screenmiddle
00353D  3  E8           	inx			; next spritebyte
00353E  3  C8           	iny			; point to screenmiddle
00353F  3               dline2b:
00353F  3  BD 22 3F     	lda objdta,x		; fetch spritemiddle byte
003542  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
003544  3  09 20        	ora #$20		; Set bit 5
003546  3  91 rr        	sta (scraddr),y		; write screenmiddle
003548  3  E8           	inx			; next spritebyte
003549  3  C8           	iny			; point to screenmiddle
00354A  3               dline2c:
00354A  3  BD 22 3F     	lda objdta,x		; fetch spritemiddle byte
00354D  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
00354F  3  09 20        	ora #$20		; Set bit 5
003551  3  91 rr        	sta (scraddr),y		; write screenmiddle
003553  3  E8           	inx			; next spritebyte
003554  3  C8           	iny			; point to screenmiddle
003555  3               
003555  3  A5 61        	lda z80_a		; fetch spriteright byte
003557  3  25 63        	and z80_b		; mask right
003559  3  51 rr        	eor (scraddr),y		; merge with screenright
00355B  3  09 20        	ora #$20		; Set bit 5
00355D  3  91 rr        	sta (scraddr),y		; write screenright
00355F  3               
00355F  3  60           	rts
003560  3               
003560  3               ;-----------------------------------------------------------------
003560  3               
003560  3               ddline:
003560  3  BC A2 35     	ldy sprline,x		; point to screenleft
003563  3               ddline1:
003563  3  BD 22 3F     	lda objdta,x		; fetch spriteleft byte
003566  3  85 61        	sta z80_a		; save spriteright byte
003568  3               
003568  3  A5 61        	lda z80_a
00356A  3  25 6E        	and z80_cp		; mask left
00356C  3  09 20        	ora #$20		; Set bit 5
00356E  3  51 72        	eor (z80_hlp),y		; merge with screenleft
003570  3  09 20        	ora #$20		; Set bit 5
003572  3  91 72        	sta (z80_hlp),y		; write spritedata0
003574  3  E8           	inx			; next spritebyte
003575  3  C8           	iny			; point to screenmiddle
003576  3               ddline2a:
003576  3  BD 22 3F     	lda objdta,x		; fetch spritemiddle byte
003579  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
00357B  3  09 20        	ora #$20		; Set bit 5
00357D  3  91 72        	sta (z80_hlp),y		; write spritedata1
00357F  3  E8           	inx			; next spritebyte
003580  3  C8           	iny			; point to screenmiddle
003581  3               ddline2b:
003581  3  BD 22 3F     	lda objdta,x		; fetch spritemiddle byte
003584  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003586  3  09 20        	ora #$20		; Set bit 5
003588  3  91 72        	sta (z80_hlp),y		; write spritedata2
00358A  3  E8           	inx			; next spritebyte
00358B  3  C8           	iny			; point to screenmiddle
00358C  3               ddline2c:
00358C  3  BD 22 3F     	lda objdta,x		; fetch spritemiddle byte
00358F  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003591  3  09 20        	ora #$20		; Set bit 5
003593  3  91 72        	sta (z80_hlp),y		; write spritedata3
003595  3  E8           	inx			; next spritebyte
003596  3  C8           	iny			; point to screenright
003597  3               
003597  3  A5 61        	lda z80_a		; fetch spriteright byte
003599  3  25 6F        	and z80_bp		; mask right
00359B  3  51 72        	eor (z80_hlp),y		; merge with screenright
00359D  3  09 20        	ora #$20		; Set bit 5
00359F  3  91 72        	sta (z80_hlp),y		; write spritedata5
0035A1  3               
0035A1  3  60           	rts
0035A2  3               
0035A2  3               sprline:
0035A2  3  00 01 02 03  	.byte $00,$01,$02,$03
0035A6  3  28 29 2A 2B  	.byte $28,$29,$2a,$2b
0035AA  3  50 51 52 53  	.byte $50,$51,$52,$53
0035AE  3  78 79 7A 7B  	.byte $78,$79,$7a,$7b
0035B2  3               
0035B2  3               ;----------------------------------------------------------------------
0035B2  3               ; Line drawn, now work out next target address.
0035B2  3               ;----------------------------------------------------------------------
0035B2  3               
0035B2  3               nline:
0035B2  3  18           	clc
0035B3  3  A5 rr        	lda scraddr 		; get low byte of address.
0035B5  3  69 28        	adc #ScrWidth
0035B7  3  85 rr        	sta scraddr 		; new low byte of address.
0035B9  3  90 02        	bcc :+
0035BB  3  E6 rr        	inc scraddr+1 		; new high byte of address.
0035BD  3               :
0035BD  3  60           	rts
0035BE  3               
0035BE  3               ;-------------------------------------------------------------
0035BE  3               ; Line drawn, now work out next target address.
0035BE  3               ;
0035BE  3               ; Input:
0035BE  3               ;  BP  = right mask
0035BE  3               ;  CP  = left mask
0035BE  3               ;  DEP = spriteaddress
0035BE  3               ;  z80_hlp = screen address
0035BE  3               ;-------------------------------------------------------------
0035BE  3               
0035BE  3               
0035BE  3               ;-----------------------------------------------------------
0035BE  3               ; Animates a sprite.
0035BE  3               ;
0035BE  3               ; Input:
0035BE  3               ;  IX = sprite address
0035BE  3               ;  HL = last sprite address
0035BE  3               ;-----------------------------------------------------------
0035BE  3               
0035BE  3               animsp:
0035BE  3  25 rr        	and frmno
0035C0  3  F0 01        	beq :+
0035C2  3  60           	rts
0035C3  3               :
0035C3  3  A0 06        	ldy #6
0035C5  3  B1 68        	lda (z80_ix),y		; sprite image
0035C7  3  20 22 38     	jsr gfrm		; get frame data.
0035CA  3               
0035CA  3  E6 66        	inc z80_l		; point to frames.
0035CC  3  D0 02        	bne :+
0035CE  3  E6 67        	inc z80_h
0035D0  3               :
0035D0  3  A0 07        	ldy #7
0035D2  3  B1 68        	lda (z80_ix),y		; sprite frame.
0035D4  3  18           	clc
0035D5  3  69 01        	adc #1			; next one along.
0035D7  3  A0 00        	ldy #0
0035D9  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
0035DB  3  90 02        	bcc anims0		; no, not yet.
0035DD  3  A9 00        	lda #0			; start at first frame.
0035DF  3               anims0:
0035DF  3  A0 07        	ldy #7
0035E1  3  91 68        	sta (z80_ix),y		; new frame.
0035E3  3  60           	rts
0035E4  3               
0035E4  3               ;--------------------------------------------------------------
0035E4  3               ; Animate back
0035E4  3               ;
0035E4  3               ; Input:
0035E4  3               ;  IX = sprite address
0035E4  3               ;  HL = last sprite address
0035E4  3               ;--------------------------------------------------------------
0035E4  3               
0035E4  3               animbk:
0035E4  3  25 rr        	and frmno
0035E6  3  F0 01        	beq :+
0035E8  3  60           	rts
0035E9  3               :
0035E9  3  A0 06        	ldy #6
0035EB  3  B1 68        	lda (z80_ix),y		; sprite image.
0035ED  3  20 22 38     	jsr gfrm		; get frame data.
0035F0  3               
0035F0  3  E6 66        	inc z80_l 		; point to frames.
0035F2  3  D0 02        	bne :+
0035F4  3  E6 67        	inc z80_h
0035F6  3               :
0035F6  3  A0 07        	ldy #7
0035F8  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0035FA  3  F0 03        	beq :+
0035FC  3  4C 03 36     	jmp rtanb0 		; yes, start at end.
0035FF  3               :
0035FF  3  A0 00        	ldy #0
003601  3  B1 66        	lda (z80_hl),y 		; last sprite.
003603  3               rtanb0:
003603  3  38           	sec
003604  3  E9 01        	sbc #1			; next one along.
003606  3  4C DF 35     	jmp anims0		; set new frame.
003609  3               
003609  3               ;--------------------------------------------------------------
003609  3               ; Check for collision with other sprite, strict enforcement.
003609  3               ;
003609  3               ; Input:
003609  3               ;  b		= sprite to test for
003609  3               ;  ix		= current sprite pointer
003609  3               ;
003609  3               ; global:	b
003609  3               ; local:	x,y,hl,de,skptr
003609  3               ; calls:	-
003609  3               ;--------------------------------------------------------------
003609  3               
003609  3               sktyp:
003609  3  A9 00        	lda #<sprtab				; sprite table.
00360B  3  85 66        	sta z80_l
00360D  3  A9 3A        	lda #>sprtab
00360F  3  85 67        	sta z80_h
003611  3               numsp2:
003611  3  A9 0C        	lda #NUMSPR				; number of sprites.
003613  3  85 rr        	sta sktptr
003615  3               sktyp0:
003615  3  A5 66        	lda z80_l 				; store pointer to sprite.
003617  3  85 rr        	sta skptr
003619  3  A5 67        	lda z80_h
00361B  3  85 rr        	sta skptr+1
00361D  3               
00361D  3  A0 00        	ldy #0
00361F  3  B1 66        	lda (z80_hl),y 				; get sprite type.
003621  3  C5 63        	cmp z80_b				; is it the type we seek?
003623  3  F0 1D        	beq coltyp				; yes, we can use this one.
003625  3               sktyp1:
003625  3  18           	clc
003626  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003628  3  69 11        	adc #TABSIZ				; size of each entry.
00362A  3  85 66        	sta z80_l
00362C  3  A5 rr        	lda skptr+1
00362E  3  69 00        	adc #0
003630  3  85 67        	sta z80_h
003632  3  C6 rr        	dec sktptr					; one less iteration.
003634  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
003636  3  A9 00        	lda #0					; default to ROM address - no sprite.
003638  3  85 66        	sta z80_l
00363A  3  85 67        	sta z80_h
00363C  3  85 rr        	sta skptr				; store pointer to sprite.
00363E  3  85 rr        	sta skptr+1
003640  3               
003640  3  18           	clc					; don't return with zero flag set.
003641  3  60           	rts 					; didn't find one.
003642  3               
003642  3               ;skptr:	.word 0					; search pointer.
003642  3               ;sktptr:	.byte 0
003642  3               
003642  3               coltyp:
003642  3  A0 00        	ldy #0
003644  3  B1 68        	lda (z80_ix),y				; current sprite type.
003646  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003648  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
00364A  3               colty0:
00364A  3  A0 09        	ldy #9					; distance to x position in table.
00364C  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00364E  3  85 64        	sta z80_e
003650  3  88           	dey
003651  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
003653  3  85 65        	sta z80_d
003655  3               
003655  3               ; Drop into collision detection.
003655  3               
003655  3               colc16:
003655  3  A0 09        	ldy #9
003657  3  B1 68        	lda (z80_ix),y			 	; x coord.
003659  3  38           	sec					; subtract x.
00365A  3  E5 64        	sbc z80_e
00365C  3  B0 05        	bcs  colc1a 				; result is positive.
00365E  3  49 FF        	eor #$ff				; make negative positive.
003660  3  18           	clc
003661  3  69 01        	adc #1
003663  3               colc1a:
003663  3  C9 08        	cmp #SPR_WID				; within x range?
003665  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003667  3  85 62        	sta z80_c				; store difference.
003669  3               
003669  3  A0 08        	ldy #8
00366B  3  B1 68        	lda (z80_ix),y				; y coord.
00366D  3  38           	sec
00366E  3  E5 65        	sbc z80_d				; subtract y.
003670  3  B0 05        	bcs colc1b				; result is positive.
003672  3  49 FF        	eor #$ff				; make negative positive.
003674  3  18           	clc
003675  3  69 01        	adc #1
003677  3               colc1b:
003677  3  C9 09        	cmp #SPR_HGT					; within y range?
003679  3  B0 AA        	bcs sktyp1 				; no - they've missed.
00367B  3  18           	clc					; add x difference.
00367C  3  65 62        	adc z80_c
00367E  3  C9 0C        	cmp #12					; only 5 corner pixels touching?
003680  3  B0 02        	bcs :+
003682  3  38           	sec
003683  3  60           	rts 					; carry set if there's a collision.
003684  3               :
003684  3  4C 25 36     	jmp sktyp1				; try next sprite in table.
003687  3               colty1:
003687  3  A5 68        	lda z80_x  				; compare the two.
003689  3  C5 66        	cmp z80_l
00368B  3  D0 09        	bne end_col
00368D  3  A5 69        	lda z80_i
00368F  3  C5 67        	cmp z80_h
003691  3  D0 03        	bne end_col
003693  3  4C 25 36     	jmp sktyp1 				; addresses are identical.
003696  3               end_col:
003696  3  4C 4A 36     	jmp colty0
003699  3               
003699  3               ;-----------------------------------------------------------
003699  3               ; Display number, left aligned
003699  3               ;
003699  3               ; Input:
003699  3               ;  a		= number
003699  3               ;
003699  3               ; global:	-
003699  3               ; local:	a,y,bc,hl,displ0
003699  3               ; calls:	num2ch,dmsg3
003699  3               ;-----------------------------------------------------------
003699  3               
003699  3               disply:
003699  3  85 61        	sta z80_a
00369B  3  A9 C1        	lda #<displ0				; display workspace.
00369D  3  85 62        	sta z80_c
00369F  3  A9 36        	lda #>displ0
0036A1  3  85 63        	sta z80_b
0036A3  3  A5 61        	lda z80_a
0036A5  3  20 ED 29     	jsr num2ch				; convert accumulator to string.
0036A8  3               displ1:
0036A8  3  C6 62        	dec z80_c				; back one character.
0036AA  3  D0 02        	bne :+
0036AC  3  C6 63        	dec z80_b
0036AE  3               :
0036AE  3  A0 00        	ldy #0
0036B0  3  B1 62        	lda (z80_bc),y				; fetch digit.
0036B2  3  09 80        	ora #128				; insert end marker.
0036B4  3  91 62        	sta (z80_bc),y				; new value.
0036B6  3               
0036B6  3  A9 C1        	lda #<displ0				; display space.
0036B8  3  85 66        	sta z80_l
0036BA  3  A9 36        	lda #>displ0
0036BC  3  85 67        	sta z80_h
0036BE  3               
0036BE  3  4C 47 31     	jmp dmsg3				; display the string.
0036C1  3               
0036C1  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0036C5  3               
0036C5  3               ;----------------------------------------------------------------
0036C5  3               ; Initialise screen.
0036C5  3               ;
0036C5  3               ; global:	roomtb,scno
0036C5  3               ; local:	-
0036C5  3               ; calls:	tstcs
0036C5  3               ;----------------------------------------------------------------
0036C5  3               
0036C5  3               initsc:
0036C5  3  AD DD 3A     	lda roomtb 			; whereabouts in the map are we?
0036C8  3  20 D2 36     	jsr tstsc 			; find displacement.
0036CB  3  C9 FF        	cmp #255 			; is it valid?
0036CD  3  F0 02        	beq init_end 			; no, it's rubbish.
0036CF  3  85 rr        	sta scno			; store new room number.
0036D1  3               init_end:
0036D1  3  60           	rts
0036D2  3               
0036D2  3               ;----------------------------------------------------------------
0036D2  3               ; Test screen.
0036D2  3               ;
0036D2  3               ; global:	-
0036D2  3               ; local:	x
0036D2  3               ; calls:	-
0036D2  3               ;----------------------------------------------------------------
0036D2  3               
0036D2  3               tstsc:
0036D2  3  85 rr        	sta tmproom
0036D4  3  18           	clc
0036D5  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
0036D7  3  AA           	tax 				; add displacement to map data.
0036D8  3  BD F1 3A     	lda mapdat-MAPWID,x 		; find room number there.
0036DB  3  60           	rts
0036DC  3               
0036DC  3               ;tmproom:	.byte 0
0036DC  3               
0036DC  3               ;--------------------------
0036DC  3               ; Screen left.
0036DC  3               ;--------------------------
0036DC  3               
0036DC  3               scrl:
0036DC  3  AD DD 3A     	lda roomtb 			; present room table pointer.
0036DF  3  38           	sec
0036E0  3  E9 01        	sbc #1				; room left.
0036E2  3               scrl0:
0036E2  3  20 D2 36     	jsr tstsc			; test screen.
0036E5  3  C9 FF        	cmp #255			; is there a screen this way?
0036E7  3  D0 01        	bne :+
0036E9  3  60           	rts				; no, return to loop.
0036EA  3               :
0036EA  3  A5 rr        	lda tmproom			; restore room displacement.
0036EC  3  8D DD 3A     	sta roomtb			; new room table position.
0036EF  3               scrl1:
0036EF  3  20 C5 36     	jsr initsc 			; set new screen.
0036F2  3  A9 02        	lda #2
0036F4  3  85 rr        	sta restfl 			; set it.
0036F6  3  60           	rts
0036F7  3               scrr:
0036F7  3  AD DD 3A     	lda roomtb 			; room table pointer.
0036FA  3  18           	clc
0036FB  3  69 01        	adc #1				; room right.
0036FD  3  4C E2 36     	jmp scrl0
003700  3               scru:
003700  3  AD DD 3A     	lda roomtb 			; room table pointer.
003703  3  38           	sec
003704  3  E9 03        	sbc #MAPWID 			; room up.
003706  3  4C E2 36     	jmp scrl0
003709  3               scrd:
003709  3  AD DD 3A     	lda roomtb 			; room table pointer.
00370C  3  18           	clc
00370D  3  69 03        	adc #MAPWID 			; room down.
00370F  3  4C E2 36     	jmp scrl0
003712  3               
003712  3               ;-----------------------------------------
003712  3               ; Jump to new screen.
003712  3               ;-----------------------------------------
003712  3               
003712  3               nwscr:
003712  3  A2 00        	ldx #0				; start of map data.
003714  3               nwscr0:
003714  3  DD F4 3A     	cmp mapdat,x
003717  3  F0 06        	beq nwscr1			; have we found a match for screen?
003719  3  E8           	inx 				; next room.
00371A  3  E0 50        	cpx #80				; zero room count, 80 to search.
00371C  3  D0 F6        	bne nwscr0			; keep looking.
00371E  3  60           	rts
00371F  3               nwscr1:
00371F  3  8E DD 3A     	stx roomtb			; set the map position.
003722  3  4C EF 36     	jmp scrl1			; draw new room.
003725  3               
003725  3               
003725  3               ;----------------------------------------------------------
003725  3               ; Gravity processing.
003725  3               ;----------------------------------------------------------
003725  3               
003725  3               grav:
003725  3  A0 0D        	ldy #13
003727  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003729  3  85 66        	sta z80_l
00372B  3  A0 0E        	ldy #14
00372D  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00372F  3  85 67        	sta z80_h
003731  3  05 66        	ora z80_l			; merge in low byte.
003733  3  D0 01        	bne :+
003735  3  60           	rts				; if neither is set, we're not in the air.
003736  3               :
003736  3  A0 00        	ldy #0
003738  3  B1 66        	lda (z80_hl),y			; pixels to move.
00373A  3  85 61        	sta z80_a
00373C  3  C9 63        	cmp #99				; reached the end?
00373E  3  D0 0C        	bne grav0			; no, continue.
003740  3               grav2:
003740  3  C6 66        	dec z80_l			; go back to previous value.
003742  3  C9 FF        	cmp #$ff
003744  3  D0 02        	bne :+
003746  3  C6 67        	dec z80_h
003748  3               :
003748  3  B1 66        	lda (z80_hl),y			; fetch that from table.
00374A  3  85 61        	sta z80_a
00374C  3               grav0:
00374C  3  E6 66        	inc z80_l			; point to next table entry.
00374E  3  D0 02        	bne :+
003750  3  E6 67        	inc z80_h
003752  3               :
003752  3  A5 66        	lda z80_l
003754  3  A0 0D        	ldy #13
003756  3  91 68        	sta (z80_ix),y			; store new pointer low.
003758  3  A5 67        	lda z80_h
00375A  3  A0 0E        	ldy #14
00375C  3  91 68        	sta (z80_ix),y			; store new pointer high.
00375E  3               grav1:
00375E  3  A5 61        	lda z80_a
003760  3  D0 01        	bne :+				; any movement required?
003762  3  60           	rts				; no, not this time.
003763  3               :
003763  3  A5 61        	lda z80_a
003765  3  C9 80        	cmp #128			; is it up or down?
003767  3  B0 15        	bcs gravu			; it's up.
003769  3               gravd:
003769  3  85 63        	sta z80_b			; set pixels to move.
00376B  3               gravd0:
00376B  3  20 EE 2D     	jsr cangd			; can we go down?
00376E  3  D0 28        	bne gravst			; can't move down, so stop.
003770  3  A0 08        	ldy #8
003772  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003774  3  18           	clc
003775  3  69 01        	adc #1
003777  3  91 68        	sta (z80_ix),y
003779  3  C6 63        	dec z80_b
00377B  3  D0 EE        	bne gravd0
00377D  3  60           	rts
00377E  3               gravu:
00377E  3  49 FF        	eor #$ff			; flip the sign so it's positive.
003780  3  18           	clc
003781  3  69 01        	adc #1
003783  3  85 63        	sta z80_b			; set pixels to move.
003785  3               gravu0:
003785  3  20 B9 2D     	jsr cangu			; can we go up?
003788  3  D0 6E        	bne ifalls			; can't move up, go down next.
00378A  3  A0 08        	ldy #8
00378C  3  B1 68        	lda (z80_ix),y
00378E  3  38           	sec
00378F  3  E9 01        	sbc #1
003791  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003793  3  C6 63        	dec z80_b
003795  3  D0 EE        	bne gravu0
003797  3  60           	rts
003798  3               gravst:
003798  3  A0 0D        	ldy #13
00379A  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00379C  3  85 66        	sta z80_l
00379E  3  A0 0E        	ldy #14
0037A0  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0037A2  3  85 67        	sta z80_h
0037A4  3               
0037A4  3  A9 00        	lda #0				; null value in pointer.
0037A6  3  A0 0D        	ldy #13
0037A8  3  91 68        	sta (z80_ix),y			; store new pointer low.
0037AA  3  C8           	iny
0037AB  3  91 68        	sta (z80_ix),y			; store new pointer high.
0037AD  3               
0037AD  3  A0 00        	ldy #0
0037AF  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
0037B1  3  C9 63        	cmp #99				; is it the end marker?
0037B3  3               evftf:
0037B3  3  F0 01        	beq :+				; yes, fallen too far.
0037B5  3  60           	rts
0037B6  3               :
0037B6  3  4C D5 3C     	jmp evnt15			; EVENT FELLTOOFAR
0037B9  3               
0037B9  3               ;------------------------------------------------
0037B9  3               ; Initiate fall check.
0037B9  3               ;------------------------------------------------
0037B9  3               
0037B9  3               ifall:
0037B9  3  A0 0D        	ldy #13
0037BB  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
0037BD  3  85 66        	sta z80_l
0037BF  3  A0 0E        	ldy #14
0037C1  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0037C3  3  85 67        	sta z80_h			; high byte in accumulator.
0037C5  3  05 66        	ora z80_l			; merge in low byte.
0037C7  3  F0 01        	beq :+
0037C9  3  60           	rts				; if either is set, we're already in the air.
0037CA  3               :
0037CA  3  A0 09        	ldy #9
0037CC  3  B1 68        	lda (z80_ix),y			; y coordinate.
0037CE  3  85 rr        	sta dispx
0037D0  3  A0 08        	ldy #8
0037D2  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0037D4  3  18           	clc
0037D5  3               numsp7:
0037D5  3  69 09        	adc #SPR_HGT			; add 16 pixels.
0037D7  3  85 rr        	sta dispy			; set up test coordinates.
0037D9  3  20 63 30     	jsr tstbl			; get map address.
0037DC  3  20 90 2F     	jsr plchk			; block, platform check.
0037DF  3  F0 01        	beq :+
0037E1  3  60           	rts				; it's solid, don't fall.
0037E2  3               :
0037E2  3  E6 rr        	inc bufaddr			; look right one cell.
0037E4  3  20 90 2F     	jsr plchk			; block, platform check.
0037E7  3  F0 01        	beq :+
0037E9  3  60           	rts				; it's solid, don't fall.
0037EA  3               :
0037EA  3  A5 rr        	lda dispx			; y coordinate.
0037EC  3  29 07        	and #7				; position straddling block cells.
0037EE  3  F0 08        	beq ifalls			; no more checks needed.
0037F0  3  E6 rr        	inc bufaddr			; look to third cell.
0037F2  3  20 90 2F     	jsr plchk			; block, platform check.
0037F5  3  F0 01        	beq :+
0037F7  3  60           	rts				; it's solid, don't fall.
0037F8  3               :
0037F8  3               ifalls:
0037F8  3  A9 48        	lda #<jtab			; jump table start.
0037FA  3  85 66        	sta z80_l
0037FC  3  A9 42        	lda #>jtab
0037FE  3  85 67        	sta z80_h
003800  3               ifal0:
003800  3  E6 66        	inc z80_l			; point to next value.
003802  3  D0 02        	bne :+
003804  3  E6 67        	inc z80_h
003806  3               :
003806  3  A0 00        	ldy #0
003808  3  B1 66        	lda (z80_hl),y			; fetch value.
00380A  3  F0 F4        	beq ifal0			; no, get next value.
00380C  3  C9 63        	cmp #99				; reached end of table?
00380E  3  D0 01        	bne :+
003810  3  60           	rts				; yes, don't fall.
003811  3               :
003811  3  C9 80        	cmp #128			; is it going up?
003813  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003815  3               
003815  3  A0 0D        	ldy #13
003817  3  A5 66        	lda z80_l
003819  3  91 68        	sta (z80_ix),y 			; set jump low.
00381B  3  A0 0E        	ldy #14
00381D  3  A5 67        	lda z80_h
00381F  3  91 68        	sta (z80_ix),y 			; set jump high.
003821  3  60           	rts
003822  3               
003822  3               
003822  3               ;----------------------------------------------------
003822  3               ; Get frame data for a particular sprite.
003822  3               ; Input:
003822  3               ;  a		= framenumer
003822  3               ; Output:
003822  3               ;  hl		= frame address
003822  3               ;
003822  3               ; global:	hl,frmptr
003822  3               ; local:	-
003822  3               ; calls:	-
003822  3               ;----------------------------------------------------
003822  3               
003822  3               gfrm:
003822  3  0A           	asl a	 		 	; multiple of 2.
003823  3  18           	clc
003824  3  6D 17 28     	adc frmptr 			; frames used by game.
003827  3  85 66        	sta z80_l
003829  3  AD 18 28     	lda frmptr+1
00382C  3  69 00        	adc #0
00382E  3  85 67        	sta z80_h 			; point to frame start.
003830  3  60           	rts
003831  3               
003831  3               ;----------------------------------------------------
003831  3               ; Find sprite list for current room.
003831  3               ;
003831  3               ; global:	hl
003831  3               ; local:	x,y
003831  3               ; calls:	-
003831  3               ;----------------------------------------------------
003831  3               
003831  3               sprlst:
003831  3  A9 19        	lda #<nmedat 			; list of enemy sprites.
003833  3  85 66        	sta z80_l
003835  3  A9 3F        	lda #>nmedat
003837  3  85 67        	sta z80_h
003839  3  A6 rr        	ldx scno 			; screen number.
00383B  3  D0 01        	bne sprls2 			; is it the first screen?
00383D  3  60           	rts 				; yes, don't need to search data.
00383E  3               sprls2:
00383E  3  A0 00        	ldy #0
003840  3               sprls1:
003840  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003842  3  C9 FF        	cmp #255			; is it an end marker?
003844  3  F0 0E        	beq sprls0 			; yes, end of this room.
003846  3               
003846  3  18           	clc 				; point to next sprite in list.
003847  3  A5 66        	lda z80_l
003849  3  69 04        	adc #NMESIZ
00384B  3  85 66        	sta z80_l
00384D  3  90 02        	bcc :+
00384F  3  E6 67        	inc z80_h
003851  3               :
003851  3  4C 40 38     	jmp sprls1 			; continue until end of room.
003854  3               sprls0:
003854  3  E6 66        	inc z80_l 			; point to start of next screen.s
003856  3  D0 02        	bne :+
003858  3  E6 67        	inc z80_h
00385A  3               :
00385A  3  CA           	dex
00385B  3  D0 E3        	bne sprls1 			; continue until room found.
00385D  3  60           	rts
00385E  3               
00385E  3               
00385E  3               ;----------------------------------------------------
00385E  3               ; Clear all but a single player sprite.
00385E  3               ;
00385E  3               ; global:	-
00385E  3               ; local:	x,y,ix
00385E  3               ; calls:	-
00385E  3               ;----------------------------------------------------
00385E  3               
00385E  3               nspr:
00385E  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003860  3  85 rr        	sta sprcnt
003862  3  A9 00        	lda #<sprtab 			; sprite table.
003864  3  85 68        	sta z80_x
003866  3  A9 3A        	lda #>sprtab
003868  3  85 69        	sta z80_i
00386A  3               nspr0:
00386A  3  A0 00        	ldy #0 				; fetch sprite type.
00386C  3  B1 68        	lda (z80_ix),y 			; is it a player?
00386E  3  F0 1A        	beq nspr1 			; yes, keep this one.
003870  3               
003870  3  A9 FF        	lda #255
003872  3  A0 00        	ldy #0 				; fetch sprite type.
003874  3  91 68        	sta (z80_ix),y 			; delete sprite.
003876  3  A0 05        	ldy #5
003878  3  91 68        	sta (z80_ix),y 			; remove next type.
00387A  3               
00387A  3  18           	clc	 			; next sprite.
00387B  3  A5 68        	lda z80_x
00387D  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00387F  3  85 68        	sta z80_x
003881  3  90 02        	bcc :+
003883  3  E6 69        	inc z80_i
003885  3               :
003885  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003887  3  D0 E1        	bne nspr0
003889  3  60           	rts
00388A  3               nspr1:
00388A  3  A9 FF        	lda #255
00388C  3  A0 00        	ldy #0
00388E  3  91 68        	sta (z80_ix),y 			; delete sprite.
003890  3               
003890  3  18           	clc	 			; point to next sprite.
003891  3  A5 68        	lda z80_x
003893  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003895  3  85 68        	sta z80_x
003897  3  90 02        	bcc :+
003899  3  E6 69        	inc z80_i
00389B  3               :
00389B  3  C6 rr        	dec sprcnt	 			; one less to do.
00389D  3  D0 01        	bne nspr2
00389F  3  60           	rts
0038A0  3               nspr2:
0038A0  3  A9 FF        	lda #255
0038A2  3  A0 00        	ldy #0
0038A4  3  91 68        	sta (z80_ix),y 			; delete sprite.
0038A6  3  A0 05        	ldy #5
0038A8  3  91 68        	sta (z80_ix),y 			; remove next type.
0038AA  3               
0038AA  3  18           	clc	 			; next sprite.
0038AB  3  A5 68        	lda z80_x
0038AD  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0038AF  3  85 68        	sta z80_x
0038B1  3  90 02        	bcc :+
0038B3  3  E6 69        	inc z80_i
0038B5  3               :
0038B5  3  C6 rr        	dec sprcnt	 			; one less space in table.
0038B7  3  D0 E7        	bne nspr2
0038B9  3  60           	rts
0038BA  3               
0038BA  3               ;----------------------------------------------------------
0038BA  3               ; Two initialisation routines.
0038BA  3               ; Initialise sprites - copy everything from list to table.
0038BA  3               ;
0038BA  3               ; global:	-
0038BA  3               ; local:	x,y,ix
0038BA  3               ; calls:	cpsp
0038BA  3               ;----------------------------------------------------------
0038BA  3               
0038BA  3               ispr:
0038BA  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0038BC  3  85 rr        	sta sprcnt
0038BE  3  A9 00        	lda #<sprtab			; sprite table.
0038C0  3  85 68        	sta z80_x
0038C2  3  A9 3A        	lda #>sprtab
0038C4  3  85 69        	sta z80_i
0038C6  3               ispr2:
0038C6  3  A0 00        	ldy #0
0038C8  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0038CA  3  C9 FF        	cmp #255 			; is it an end marker?
0038CC  3  D0 01        	bne :+
0038CE  3  60           	rts 				; yes, no more to do.
0038CF  3               :
0038CF  3               ispr1:
0038CF  3  A0 00        	ldy #0
0038D1  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0038D3  3  C9 FF        	cmp #255 			; is it enabled yet?
0038D5  3  D0 08        	bne ispr4			; yes, try another slot.
0038D7  3               
0038D7  3  A0 05        	ldy #5
0038D9  3  B1 68        	lda (z80_ix),y		 	; next type.
0038DB  3  C9 FF        	cmp #255 			; is it enabled yet?
0038DD  3  F0 10        	beq ispr3 			; no, process this one.
0038DF  3               ispr4:
0038DF  3  18           	clc 				; next sprite.
0038E0  3  A5 68        	lda z80_x
0038E2  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0038E4  3  85 68        	sta z80_x
0038E6  3  90 02        	bcc :+
0038E8  3  E6 69        	inc z80_i
0038EA  3               :
0038EA  3  C6 rr        	dec sprcnt
0038EC  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0038EE  3  60           	rts  				; no more room in table.
0038EF  3               ispr3:
0038EF  3  20 42 39     	jsr cpsp			; initialise a sprite.
0038F2  3  C6 rr        	dec sprcnt			; one less space in the table.
0038F4  3  D0 D0        	bne ispr2
0038F6  3  60           	rts
0038F7  3               
0038F7  3               
0038F7  3               ;-----------------------------------------------------------------------
0038F7  3               ; Initialise sprites - but not player, we're keeping the old one.
0038F7  3               ;
0038F7  3               ; global:	-
0038F7  3               ; local:	x,y,ix
0038F7  3               ; calls:	cpsp
0038F7  3               ;-----------------------------------------------------------------------
0038F7  3               
0038F7  3               kspr:
0038F7  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0038F9  3  A9 00        	lda #<sprtab 			; sprite table.
0038FB  3  85 68        	sta z80_x
0038FD  3  A9 3A        	lda #>sprtab
0038FF  3  85 69        	sta z80_i
003901  3               kspr2:
003901  3  A0 00        	ldy #0
003903  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003905  3  C9 FF        	cmp #255 			; is it an end marker?
003907  3  D0 01        	bne :+
003909  3  60           	rts 				; yes, no more to do.
00390A  3               :
00390A  3  C9 00        	cmp #0
00390C  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00390E  3               
00390E  3  18           	clc 				; next sprite.
00390F  3  A5 66        	lda z80_l
003911  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003913  3  85 66        	sta z80_l
003915  3  90 02        	bcc :+
003917  3  E6 67        	inc z80_h
003919  3               :
003919  3  4C 01 39     	jmp kspr2
00391C  3               kspr1:
00391C  3  A0 00        	ldy #0 				; fetch sprite type.
00391E  3  B1 68        	lda (z80_ix),y
003920  3  C9 FF        	cmp #255 			; is it enabled yet?
003922  3  D0 08        	bne kspr4 			; yes, try another slot.
003924  3               
003924  3  A0 05        	ldy #5 				; next type.
003926  3  B1 68        	lda (z80_ix),y
003928  3  C9 FF        	cmp #255 			; is it enabled yet?
00392A  3  F0 0F        	beq kspr3 			; no, process this one.
00392C  3               kspr4:
00392C  3  18           	clc 				; next sprite.
00392D  3  A5 68        	lda z80_x
00392F  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003931  3  85 68        	sta z80_x
003933  3  90 02        	bcc :+
003935  3  E6 69        	inc z80_i
003937  3               :
003937  3  CA           	dex	 			; repeat for remaining sprites.
003938  3  D0 E2        	bne kspr1
00393A  3  60           	rts  				; no more room in table.
00393B  3               kspr3:
00393B  3  20 42 39     	jsr cpsp 			; copy sprite to table.
00393E  3  CA           	dex	 			; one less space in the table.
00393F  3  D0 C0        	bne kspr2
003941  3  60           	rts
003942  3               
003942  3               ;----------------------------------------------
003942  3               ; Copy sprite from list to table.
003942  3               ;
003942  3               ; global:	hl,ix
003942  3               ; local:	y
003942  3               ; calls:	evnt09
003942  3               ;----------------------------------------------
003942  3               
003942  3               cpsp:
003942  3  A0 00        	ldy #0				; fetch byte from table.
003944  3  B1 66        	lda (z80_hl),y
003946  3  91 68        	sta (z80_ix),y			; set up type.
003948  3  A0 05        	ldy #PAM1ST
00394A  3  91 68        	sta (z80_ix),y 			; set up type.
00394C  3               
00394C  3  E6 66        	inc z80_l 			; move to next byte.
00394E  3  D0 02        	bne :+
003950  3  E6 67        	inc z80_h
003952  3               :
003952  3  A0 00        	ldy #0 				; fetch byte from table.
003954  3  B1 66        	lda (z80_hl),y
003956  3  A0 06        	ldy #6
003958  3  91 68        	sta (z80_ix),y			; set up image.
00395A  3               
00395A  3  E6 66        	inc z80_l 			; move to next byte.
00395C  3  D0 02        	bne :+
00395E  3  E6 67        	inc z80_h
003960  3               :
003960  3  A0 00        	ldy #0
003962  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003964  3  A0 08        	ldy #8
003966  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003968  3               
003968  3  A9 C8        	lda #200 			; set initial coordinate off screen.
00396A  3  A0 03        	ldy #3
00396C  3  91 68        	sta (z80_ix),y
00396E  3               
00396E  3  E6 66        	inc z80_l 			; move to next byte.
003970  3  D0 02        	bne :+
003972  3  E6 67        	inc z80_h
003974  3               :
003974  3  A0 00        	ldy #0 				; fetch byte from table.
003976  3  B1 66        	lda (z80_hl),y
003978  3  A0 09        	ldy #9
00397A  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00397C  3               
00397C  3  E6 66        	inc z80_l 			; move to next byte.
00397E  3  D0 02        	bne :+
003980  3  E6 67        	inc z80_h
003982  3               :
003982  3  A9 00        	lda #0				; zeroes in accumulator.
003984  3  A0 07        	ldy #7 				; reset frame number.
003986  3  91 68        	sta (z80_ix),y
003988  3  A0 0A        	ldy #10 			; reset direction.
00398A  3  91 68        	sta (z80_ix),y
00398C  3  A0 0D        	ldy #13				; reset jump pointer low.
00398E  3  91 68        	sta (z80_ix),y
003990  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003992  3  91 68        	sta (z80_ix),y
003994  3               
003994  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003996  3  A0 10        	ldy #16
003998  3  91 68        	sta (z80_ix),y
00399A  3               evis0:
00399A  3  A5 69        	lda z80_i
00399C  3  48           	pha
00399D  3  A5 68        	lda z80_x
00399F  3  48           	pha
0039A0  3  A5 67        	lda z80_h
0039A2  3  48           	pha
0039A3  3  A5 66        	lda z80_l
0039A5  3  48           	pha
0039A6  3               
0039A6  3  20 7C 3C     	jsr evnt09 			; perform event.
0039A9  3               
0039A9  3  68           	pla
0039AA  3  85 66        	sta z80_l
0039AC  3  68           	pla
0039AD  3  85 67        	sta z80_h
0039AF  3  68           	pla
0039B0  3  85 68        	sta z80_x
0039B2  3  68           	pla
0039B3  3  85 69        	sta z80_i
0039B5  3               
0039B5  3  18           	clc
0039B6  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
0039B8  3  69 11        	adc #TABSIZ		 	; next sprite.
0039BA  3  85 68        	sta z80_x
0039BC  3  90 02        	bcc :+
0039BE  3  E6 69        	inc z80_i
0039C0  3               :
0039C0  3  60           	rts
0039C1  3               
0039C1  3               
0039C1  3               ;-------------------------------------
0039C1  3               ; Clear the play area window.
0039C1  3               ;-------------------------------------
0039C1  3               
0039C1  3               clw:
0039C1  3  AD 23 28     	lda wintop			; get coordinates of window.
0039C4  3  85 rr        	sta dispy			; put into dispx for calculation.
0039C6  3  AD 24 28     	lda winlft
0039C9  3  85 rr        	sta dispx
0039CB  3               
0039CB  3  AD 25 28     	lda winhgt			; height of window.
0039CE  3  85 rr        	sta rrow			; copy to b register.
0039D0  3               clw3:
0039D0  3  AD 26 28     	lda winwid 			; width of window.
0039D3  3  85 rr        	sta rcol
0039D5  3               clw2:
0039D5  3  20 8D 2C     	jsr gprad 			; get print address.
0039D8  3  A9 00        	lda #0				; zero byte to write.
0039DA  3  A2 07        	ldx #7				; pixel height of each cell.
0039DC  3               clw1:
0039DC  3  BC DC 2C     	ldy scrtab,x
0039DF  3  91 rr        	sta (scraddr),y 			; copy to screen.
0039E1  3  CA           	dex				; next screen row down.
0039E2  3  10 F8        	bpl clw1
0039E4  3               
0039E4  3  E6 rr        	inc dispx			; next column.
0039E6  3  C6 rr        	dec rcol			; one less to do.
0039E8  3  D0 EB        	bne clw2			; repeat for remaining columns.
0039EA  3               
0039EA  3  AD 24 28     	lda winlft			; get left edge.
0039ED  3  85 rr        	sta dispx 			; reset x.
0039EF  3  E6 rr        	inc dispy 			; next line down.
0039F1  3               
0039F1  3  C6 rr        	dec rrow
0039F3  3  D0 DB        	bne clw3			; repeat down the screen.
0039F5  3               
0039F5  3  AD 23 28     	lda wintop			; get coordinates of window.
0039F8  3  85 rr        	sta chary			; put into display position.
0039FA  3  AD 24 28     	lda winlft
0039FD  3  85 rr        	sta charx
0039FF  3  60           	rts
003A00  3               
003A00  3               
003A00  3               ;----------------------------------------------------------
003A00  3               ; Effects code.
003A00  3               ; Ticker routine is called 25 times per second.
003A00  3               ;
003A00  3               ; HL = txtscr = left text screen address
003A00  3               ; DE = txtscr+txtwid-1 = right text screen address
003A00  3               ; BC = txtpos = text scroller position
003A00  3               ;
003A00  3               ;----------------------------------------------------------
003A00  3               
003A00  3               .if sflag
003A00  3               scrly:
003A00  3               	rts
003A00  3               	.word txtscr         	; get left screen address.
003A00  3               	sta scr_l
003A00  3               	lda txtscr+1
003A00  3               	sta scr_l+1
003A00  3               	sta scr_r+1
003A00  3               
003A00  3               	stx xtmp
003A00  3               
003A00  3               	clc         		; get right screen address.
003A00  3               	lda scr_l
003A00  3               	adc txtwid
003A00  3               	sta scr_r
003A00  3               	dec scr_r
003A00  3               scrly1:
003A00  3               	ldy txtwid		; set txtwide
003A00  3               	dey
003A00  3               	clc
003A00  3               scrly0:
003A00  3               	lda (scr_l),y		; scroll 1 line
003A00  3               	rol a
003A00  3               	sta (scr_l),y
003A00  3               	dey
003A00  3               	bpl scrly0
003A00  3               
003A00  3               	clc			; point to next line
003A00  3               	lda scr_l
003A00  3               	adc #32
003A00  3               	sta scr_l
003A00  3               	bcc scrly1		; repeat 8 times
003A00  3               
003A00  3               	lda txtpos 		; get text pointer.
003A00  3               	sta scr_txt
003A00  3               	lda txtpos+1
003A00  3               	sta scr_txt+1
003A00  3               
003A00  3               	ldy #0
003A00  3               	lda (scr_txt),y 		; find character we're displaying.
003A00  3               	and #127 		; remove end marker bit if applicable.
003A00  3               	cmp #13			; is it newline?
003A00  3               	bne scrly5 		; no, it's okay.
003A00  3               	lda #32			; convert to a space instead.
003A00  3               scrly5:
003A00  3               	sta fntaddr		; calculate char address
003A00  3               	lda #0
003A00  3               	sta fntaddr+1
003A00  3               	asl fntaddr  		; multiply char by 8.
003A00  3               	rol fntaddr+1
003A00  3               	asl fntaddr
003A00  3               	rol fntaddr+1
003A00  3               	asl fntaddr
003A00  3               	rol fntaddr+1
003A00  3               	lda fntaddr
003A00  3               	clc
003A00  3               	adc #<(FONT-256)
003A00  3               	sta scrly3+1		; that's the low byte.
003A00  3               	lda fntaddr+1
003A00  3               	adc #>(FONT-256)
003A00  3               	sta scrly3+2		; add displacement.
003A00  3               
003A00  3               	ldx #0
003A00  3               scrly3:
003A00  3               	lda $3333,x		; get image of char line.
003A00  3               	and txtbit
003A00  3               	beq scrly2		; don't plot pixel
003A00  3               	ldy scrline,x
003A00  3               	lda (scr_r),y
003A00  3               	clc
003A00  3               	ora #1
003A00  3               	sta (scr_r),y		; plot pixel
003A00  3               scrly2:
003A00  3               	inx			; next line of char.
003A00  3               	cpx #8
003A00  3               	bne scrly3
003A00  3               
003A00  3               	lsr txtbit		; bit of text to display.
003A00  3               	bcs :+
003A00  3               	rts
003A00  3               :
003A00  3               	ldy #0
003A00  3               	lda (scr_txt),y 	; what was the character?
003A00  3               	asl a	  		; end of message?
003A00  3               	bcs scrly4
003A00  3               	inc txtpos
003A00  3               	bne :+
003A00  3               	inc txtpos+1
003A00  3               :
003A00  3               	jmp scrly6 		; not yet - continue.
003A00  3               scrly4:
003A00  3               	lda txtini 		; start of scrolling message.
003A00  3               	sta txtpos
003A00  3               	lda txtini+1
003A00  3               	sta txtpos+1
003A00  3               scrly6:
003A00  3               	lda #128
003A00  3               	sta txtbit
003A00  3               	ldx xtmp
003A00  3               	rts
003A00  3               
003A00  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003A00  3               
003A00  3               ;-------------------------------------------------------
003A00  3               ; Entry TICKER command
003A00  3               ;
003A00  3               ; Entry:
003A00  3               ;  z80_b = message nr
003A00  3               ;  z80_c = width
003A00  3               ;-------------------------------------------------------
003A00  3               
003A00  3               iscrly:
003A00  3               	jsr prescr 		; set up display position.
003A00  3               
003A00  3               	lda #<msgdat 		; text messages.
003A00  3               	sta z80_l
003A00  3               	lda #>msgdat
003A00  3               	sta z80_h
003A00  3               
003A00  3               	lda z80_c 		; width.
003A00  3               	sec
003A00  3               	sbc #1			; subtract one.
003A00  3               	cmp #32 		; is it between 1 and 32?
003A00  3               	bcc :+
003A00  3               	lda #$60
003A00  3               	jmp iscrl0		; no, disable messages.
003A00  3               :
003A00  3               	ldx z80_b		; message number.
003A00  3               	jsr getwrd 		; find message start.
003A00  3               
003A00  3               	lda z80_l		; set initial text position.
003A00  3               	sta txtini
003A00  3               	lda z80_h
003A00  3               	sta txtini+1
003A00  3               
003A00  3               	lda #$ad		; code for lda adrr
003A00  3               iscrl0:
003A00  3               	sta scrly		; enable/disable scrolling routine.
003A00  3               
003A00  3               	jsr prescr 		; set up display position.
003A00  3               	jsr gprad 		; get print address.
003A00  3               
003A00  3               	lda scraddr 		; set text screen address.
003A00  3               	sta txtscr
003A00  3               	lda scraddr+1
003A00  3               	sta txtscr+1
003A00  3               
003A00  3               	lda z80_c		; width.
003A00  3               	sta txtwid		; set width in working storage.
003A00  3               
003A00  3               	lda #128 		; start with leftmost bit.
003A00  3               	sta txtbit
003A00  3               
003A00  3               	jmp scrly4
003A00  3               .endif
003A00  3               
003A00  3               ;------------------------------------------------------------------
003A00  3               ; Dig routine, conditional assembly depending on dflag
003A00  3               ;------------------------------------------------------------------
003A00  3               .if dflag
003A00  3               dig:
003A00  3               	and #3
003A00  3               	beq digr		; dig right
003A00  3               	cmp #1
003A00  3               	beq digl		; dig left
003A00  3               	cmp #2
003A00  3               	beq digd		; dig down
003A00  3               
003A00  3               ; Dig up.
003A00  3               
003A00  3               digu:				; dig up
003A00  3               	ldy #8
003A00  3               	lda (z80_ix),y
003A00  3               	sec
003A00  3               	sbc #2
003A00  3               	sta dispy		; set y
003A00  3               
003A00  3               	iny
003A00  3               	lda (z80_ix),y
003A00  3               	sta dispx		; set x
003A00  3               	jmp digv
003A00  3               
003A00  3               ; Dig down.
003A00  3               
003A00  3               digd:
003A00  3               	ldy #9
003A00  3               	lda (z80_ix),y
003A00  3               	sta dispx		; set y
003A00  3               
003A00  3               	dey
003A00  3               	clc
003A00  3               	lda (z80_ix),y
003A00  3               	adc #16
003A00  3               	sta dispy		; set y
003A00  3               	jmp digv
003A00  3               
003A00  3               ; Dig left.
003A00  3               
003A00  3               digl:
003A00  3               	ldy #8
003A00  3               	lda (z80_ix),y
003A00  3               	sta dispy		; set y
003A00  3               
003A00  3               	iny
003A00  3               	lda (z80_ix),y
003A00  3               	sec
003A00  3               	sbc #2			; x=x-2
003A00  3               	sta dispx		; set x
003A00  3               	jmp digh
003A00  3               
003A00  3               ; Dig right.
003A00  3               
003A00  3               digr:
003A00  3               	ldy #8
003A00  3               	lda (z80_ix),y
003A00  3               	sta dispy		; set y
003A00  3               
003A00  3               	iny
003A00  3               	lda (z80_ix),y
003A00  3               	clc
003A00  3               	adc #16
003A00  3               	sta dispx		; set x+16
003A00  3               	jmp digh
003A00  3               
003A00  3               ; Vertical digging
003A00  3               
003A00  3               digv:
003A00  3               	jsr tstbl		; check blocktype in MAP
003A00  3               	jsr fdchk		; test if FODDER
003A00  3               
003A00  3               	clc
003A00  3               	lda dispx		; look 1 cell down
003A00  3               	adc #8
003A00  3               	sta dispx
003A00  3               	jsr tstbl		; check blocktype in MAP
003A00  3               	jsr fdchk
003A00  3               	lda dispx
003A00  3               	and #7
003A00  3               	bne :+
003A00  3               	rts
003A00  3               :
003A00  3               	clc
003A00  3               	lda dispx		; look 1 cell down
003A00  3               	adc #8
003A00  3               	sta dispx
003A00  3               	jsr tstbl		; check blocktype in MAP
003A00  3               	jmp fdchk
003A00  3               
003A00  3               ; Horizontal digging
003A00  3               
003A00  3               digh:
003A00  3               	jsr tstbl		; check blocktype in MAP
003A00  3               	jsr fdchk		; test if FODDER
003A00  3               
003A00  3               	clc
003A00  3               	lda dispy		; look 1 cell down
003A00  3               	adc #8
003A00  3               	sta dispy
003A00  3               	jsr tstbl		; check blocktype in MAP
003A00  3               	jsr fdchk
003A00  3               	lda dispy
003A00  3               	and #7
003A00  3               	bne :+
003A00  3               	rts
003A00  3               :
003A00  3               	clc
003A00  3               	lda dispy		; look 1 cell down
003A00  3               	adc #8
003A00  3               	sta dispy
003A00  3               	jsr tstbl		; check blocktype in MAP
003A00  3               	jmp fdchk
003A00  3               
003A00  3               digcnt:	.byte 0
003A00  3               
003A00  3               .endif
003A00  3               
003A00  3               ;------------------------------------------------------------------
003A00  3               ; Sprite table
003A00  3               ;------------------------------------------------------------------
003A00  3               
003A00  3               
003A00  3               ; ix+0  = type.
003A00  3               ; ix+1  = sprite image number.
003A00  3               ; ix+2  = frame.
003A00  3               ; ix+3  = y coord.
003A00  3               ; ix+4  = x coord.
003A00  3               
003A00  3               ; ix+5  = new type.
003A00  3               ; ix+6  = new image number.
003A00  3               ; ix+7  = new frame.
003A00  3               ; ix+8  = new y coord.
003A00  3               ; ix+9  = new x coord.
003A00  3               
003A00  3               ; ix+10 = direction.
003A00  3               ; ix+11 = parameter 1.
003A00  3               ; ix+12 = parameter 2.
003A00  3               ; ix+13 = jump pointer low.
003A00  3               ; ix+14 = jump pointer high.
003A00  3               ; ix+15 = data pointer low.
003A00  3               ; ix+16 = data pointer high.
003A00  3               
003A00  3               ; block NUMSPR * TABSIZ,255
003A00  3               
003A00  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
003A04  3  FF FF FF FF  
003A08  3  FF FF FF FF  
003ACC  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003AD0  3  FF FF FF 00  
003AD4  3  C0 78 00 00  
003ADD  3  07           roomtb:	.byte 7                      ; start room map offset.
003ADE  3               
003ADE  3               ; User routine.  Put your own code in here to be called with USER instruction.
003ADE  3               ; if USER has an argument it will be passed in the accumulator.
003ADE  3               
003ADE  3               user:
003ADE  3               	.include "user.inc"
003ADE  4  60           	rts
003ADF  4               
003ADF  3               
003ADF  3               setfgcol:
003ADF  3  29 07        	and #7
003AE1  3  8D EE 3A     	sta fcolour
003AE4  3  60           	rts
003AE5  3               
003AE5  3               setbgcol:
003AE5  3  29 07        	and #7
003AE7  3  18           	clc
003AE8  3  69 10        	adc #16
003AEA  3  8D EF 3A     	sta bcolour
003AED  3  60           	rts
003AEE  3               
003AEE  3  07           fcolour:	.byte t_white
003AEF  3  17           bcolour:	.byte g_white
003AF0  3               
003AF0  3               ; Everything below here will be generated by the editors.
003AF0  3               
003AF0  3  60                   rts
003AF1  3               WINDOWTOP = 0
003AF1  3               WINDOWLFT = 1
003AF1  3               WINDOWHGT = 25
003AF1  3               WINDOWWID = 39 ;
003AF1  3               MAPWID = 3
003AF1  3  FF FF FF             .byte 255,255,255
003AF4  3               mapdat:
003AF4  3  FF 00 FF             .byte 255,0,255
003AF7  3  FF FF FF             .byte 255,255,255
003AFA  3  01           stmap:  .byte 1
003AFB  3               
003AFB  3               evnt00:
003AFB  3  A0 0B                ldy #11
003AFD  3  B1 68                lda (z80_ix),y
003AFF  3  18                   clc
003B00  3  69 01                adc #1
003B02  3  A0 0B                ldy #11
003B04  3  91 68                sta (z80_ix),y
003B06  3  A9 1E                lda #30
003B08  3  A0 0B                ldy #11
003B0A  3  D1 68                cmp (z80_ix),y
003B0C  3  D0 03                bne *+5
003B0E  3  4C 12 3B             jmp a00055
003B11  3  60                   rts		; EXIT
003B12  3  A9 00        a00055: lda #0
003B14  3  A0 0B                ldy #11
003B16  3  91 68                sta (z80_ix),y
003B18  3  A9 00                lda #0
003B1A  3  85 rr                sta varm
003B1C  3  A5 rr                lda joyval	; KEY
003B1E  3  29 08                and #8
003B20  3  F0 03                beq :+
003B22  3  4C 3D 3B             jmp a00151
003B25  3               :
003B25  3  A9 01                lda #1
003B27  3  85 rr                sta varm
003B29  3  A9 09                lda #9
003B2B  3  A0 08                ldy #8
003B2D  3  D1 68                cmp (z80_ix),y
003B2F  3  90 03                bcc *+5
003B31  3  4C 3D 3B             jmp a00151
003B34  3  A0 08                ldy #8 		; SPRITEUP
003B36  3  B1 68                lda (z80_ix),y
003B38  3  38                   sec
003B39  3  E9 01                sbc #1
003B3B  3  91 68                sta (z80_ix),y
003B3D  3  A5 rr        a00151: lda joyval	; KEY
003B3F  3  29 04                and #4
003B41  3  F0 03                beq :+
003B43  3  4C 60 3B             jmp a00230
003B46  3               :
003B46  3  A9 01                lda #1
003B48  3  85 rr                sta varm
003B4A  3  A9 39                lda #57
003B4C  3  A0 08                ldy #8
003B4E  3  D1 68                cmp (z80_ix),y
003B50  3  90 02                bcc *+4
003B52  3  D0 03                bne *+5
003B54  3  4C 60 3B             jmp a00230
003B57  3  A0 08                ldy #8 		; SPRITEDOWN
003B59  3  B1 68                lda (z80_ix),y
003B5B  3  18                   clc
003B5C  3  69 01                adc #1
003B5E  3  91 68                sta (z80_ix),y
003B60  3  A5 rr        a00230: lda joyval	; KEY
003B62  3  29 02                and #2
003B64  3  F0 03                beq :+
003B66  3  4C 81 3B             jmp a00305
003B69  3               :
003B69  3  A9 01                lda #1
003B6B  3  85 rr                sta varm
003B6D  3  A9 04                lda #4
003B6F  3  A0 09                ldy #9
003B71  3  D1 68                cmp (z80_ix),y
003B73  3  90 03                bcc *+5
003B75  3  4C 81 3B             jmp a00305
003B78  3  A0 09                ldy #9 		; SPRITELEFT
003B7A  3  B1 68                lda (z80_ix),y
003B7C  3  38                   sec
003B7D  3  E9 01                sbc #1
003B7F  3  91 68                sta (z80_ix),y
003B81  3  A5 rr        a00305: lda joyval	; KEY
003B83  3  29 01                and #1
003B85  3  F0 03                beq :+
003B87  3  4C A4 3B             jmp a00384
003B8A  3               :
003B8A  3  A9 01                lda #1
003B8C  3  85 rr                sta varm
003B8E  3  A9 46                lda #70
003B90  3  A0 09                ldy #9
003B92  3  D1 68                cmp (z80_ix),y
003B94  3  90 02                bcc *+4
003B96  3  D0 03                bne *+5
003B98  3  4C A4 3B             jmp a00384
003B9B  3  A0 09                ldy #9 		; SPRITERIGHT
003B9D  3  B1 68                lda (z80_ix),y
003B9F  3  18                   clc
003BA0  3  69 01                adc #1
003BA2  3  91 68                sta (z80_ix),y
003BA4  3  A9 00        a00384: lda #0
003BA6  3  C5 rr                cmp varm
003BA8  3  90 03                bcc *+5
003BAA  3  4C B2 3B             jmp a00412
003BAD  3  A9 01                lda #1		; ANIMATE
003BAF  3  20 BE 35             jsr animsp
003BB2  3               a00412: ; SPRITEINK command
003BB2  3  A9 17                lda #23		; AT
003BB4  3  85 rr                sta chary
003BB6  3  A9 16                lda #22
003BB8  3  85 rr                sta charx
003BBA  3  A9 01                lda #1 	; COLLISION
003BBC  3  85 63                sta z80_b
003BBE  3  20 09 36             jsr sktyp
003BC1  3  B0 03                bcs :+
003BC3  3  4C E0 3B             jmp a00526
003BC6  3               :
003BC6  3  A5 rr                lda skptr	; OTHER
003BC8  3  85 68                sta z80_x
003BCA  3  A5 rr                lda skptr+1
003BCC  3  85 69                sta z80_i
003BCE  3  A0 05                ldy #5
003BD0  3  B1 68                lda (z80_ix),y	; DISPLAY
003BD2  3  20 99 36             jsr disply
003BD5  3  A5 rr                lda ogptr	; ENDSPRITE
003BD7  3  85 68                sta z80_x
003BD9  3  A5 rr                lda ogptr+1
003BDB  3  85 69                sta z80_i
003BDD  3  4C 0B 3C             jmp a00625
003BE0  3  A9 02        a00526: lda #2 	; COLLISION
003BE2  3  85 63                sta z80_b
003BE4  3  20 09 36             jsr sktyp
003BE7  3  B0 03                bcs :+
003BE9  3  4C 06 3C             jmp a00615
003BEC  3               :
003BEC  3  A5 rr                lda skptr	; OTHER
003BEE  3  85 68                sta z80_x
003BF0  3  A5 rr                lda skptr+1
003BF2  3  85 69                sta z80_i
003BF4  3  A0 05                ldy #5
003BF6  3  B1 68                lda (z80_ix),y	; DISPLAY
003BF8  3  20 99 36             jsr disply
003BFB  3  A5 rr                lda ogptr	; ENDSPRITE
003BFD  3  85 68                sta z80_x
003BFF  3  A5 rr                lda ogptr+1
003C01  3  85 69                sta z80_i
003C03  3  4C 0B 3C             jmp a00625
003C06  3  A9 06        a00615: lda #6		; PRINT
003C08  3  20 3B 31             jsr dmsg
003C0B  3  A0 07        a00625: ldy #7 	; KEY
003C0D  3  B9 49 42             lda keys,y
003C10  3  20 CD 42             jsr ktest
003C13  3  90 03                bcc :+
003C15  3  4C 1E 3C             jmp a00665
003C18  3               :
003C18  3  A9 FF                lda #255	; REMOVE
003C1A  3  A0 05                ldy #5
003C1C  3  91 68                sta (z80_ix),y
003C1E  3  A0 08        a00665: ldy #8 	; KEY
003C20  3  B9 49 42             lda keys,y
003C23  3  20 CD 42             jsr ktest
003C26  3  90 03                bcc :+
003C28  3  4C 52 3C             jmp a00781
003C2B  3               :
003C2B  3  A9 01                lda #1	; SPAWN
003C2D  3  85 62                sta z80_c
003C2F  3  A9 01                lda #1
003C31  3  85 63                sta z80_b
003C33  3  20 92 2A             jsr spawn
003C36  3  A5 rr                lda spptr	; SPAWNED
003C38  3  85 68                sta z80_x
003C3A  3  A5 rr                lda spptr+1
003C3C  3  85 69                sta z80_i
003C3E  3  A9 2C                lda #44
003C40  3  A0 09                ldy #9
003C42  3  91 68                sta (z80_ix),y
003C44  3  A9 2C                lda #44
003C46  3  A0 08                ldy #8
003C48  3  91 68                sta (z80_ix),y
003C4A  3  A5 rr                lda ogptr	; ENDSPRITE
003C4C  3  85 68                sta z80_x
003C4E  3  A5 rr                lda ogptr+1
003C50  3  85 69                sta z80_i
003C52  3  60           a00781: rts
003C53  3               evnt01:
003C53  3  A0 0B                ldy #11
003C55  3  B1 68                lda (z80_ix),y
003C57  3  18                   clc
003C58  3  69 01                adc #1
003C5A  3  A0 0B                ldy #11
003C5C  3  91 68                sta (z80_ix),y
003C5E  3  A9 1E                lda #30
003C60  3  A0 0B                ldy #11
003C62  3  D1 68                cmp (z80_ix),y
003C64  3  F0 03                beq *+5
003C66  3  4C 74 3C             jmp b00075
003C69  3  A9 00                lda #0		; ANIMATE
003C6B  3  20 BE 35             jsr animsp
003C6E  3  A9 00                lda #0
003C70  3  A0 0B                ldy #11
003C72  3  91 68                sta (z80_ix),y
003C74  3  60           b00075: rts
003C75  3               evnt02:
003C75  3  60                   rts
003C76  3               evnt03:
003C76  3  60                   rts
003C77  3               evnt04:
003C77  3  60                   rts
003C78  3               evnt05:
003C78  3  60                   rts
003C79  3               evnt06:
003C79  3  60                   rts
003C7A  3               evnt07:
003C7A  3  60                   rts
003C7B  3               evnt08:
003C7B  3  60                   rts
003C7C  3               evnt09:
003C7C  3  A9 01                lda #1
003C7E  3  A0 05                ldy #5
003C80  3  D1 68                cmp (z80_ix),y
003C82  3  F0 03                beq *+5
003C84  3  4C 8D 3C             jmp j00037
003C87  3  A9 00                lda #0
003C89  3  A0 0A                ldy #10
003C8B  3  91 68                sta (z80_ix),y
003C8D  3  A9 02        j00037: lda #2
003C8F  3  A0 05                ldy #5
003C91  3  D1 68                cmp (z80_ix),y
003C93  3  F0 03                beq *+5
003C95  3  4C 9E 3C             jmp j00073
003C98  3  A9 02                lda #2
003C9A  3  A0 0A                ldy #10
003C9C  3  91 68                sta (z80_ix),y
003C9E  3  60           j00073: rts
003C9F  3               evnt10:
003C9F  3  60                   rts
003CA0  3               evnt11:
003CA0  3  60                   rts
003CA1  3               evnt12:
003CA1  3  A9 05                lda #5 	; PAPER
003CA3  3  20 E5 3A             jsr setbgcol
003CA6  3  20 63 42             jsr cls		; CLS
003CA9  3  60                   rts
003CAA  3               evnt13:
003CAA  3  60                   rts
003CAB  3               evnt14:
003CAB  3  20 63 42             jsr cls		; CLS
003CAE  3  A9 00                lda #0		; PRINTMODE
003CB0  3  85 rr                sta prtmod
003CB2  3  A9 00                lda #0
003CB4  3  85 rr                sta chary
003CB6  3  A9 0E                lda #14
003CB8  3  85 rr                sta charx
003CBA  3  A9 02                lda #2 	; INK
003CBC  3  20 DF 3A             jsr setfgcol
003CBF  3  A9 01                lda #1		; PRINTMODE
003CC1  3  85 rr                sta prtmod
003CC3  3  A9 00                lda #0		; PRINTMODE
003CC5  3  85 rr                sta prtmod
003CC7  3  A9 18                lda #24		; AT
003CC9  3  85 rr                sta chary
003CCB  3  A9 07                lda #7
003CCD  3  85 rr                sta charx
003CCF  3  A9 04                lda #4 	; INK
003CD1  3  20 DF 3A             jsr setfgcol
003CD4  3  60                   rts
003CD5  3               evnt15:
003CD5  3  60                   rts
003CD6  3               evnt16:
003CD6  3  60                   rts
003CD7  3               evnt17:
003CD7  3  A9 01                lda #1		; PRINTMODE
003CD9  3  85 rr                sta prtmod
003CDB  3  A9 08                lda #8
003CDD  3  85 rr                sta chary
003CDF  3  A9 0D                lda #13
003CE1  3  85 rr                sta charx
003CE3  3                       ; COLOUR command
003CE3  3  A9 07                lda #7		; PRINT
003CE5  3  20 3B 31             jsr dmsg
003CE8  3  A9 02                lda #2
003CEA  3  85 62                sta z80_c
003CEC  3  A5 rr                lda chary
003CEE  3  18                   clc
003CEF  3  65 62                adc z80_c
003CF1  3  85 rr                sta chary
003CF3  3  A9 0D                lda #13
003CF5  3  85 rr                sta charx
003CF7  3                       ; COLOUR command
003CF7  3  A9 08                lda #8		; PRINT
003CF9  3  20 3B 31             jsr dmsg
003CFC  3  20 DF 42             jsr prskey	; WAITKEY
003CFF  3  60                   rts
003D00  3               evnt18:
003D00  3  60                   rts
003D01  3               evnt19:
003D01  3                       ; COLOUR command
003D01  3  A9 0E                lda #14
003D03  3  85 rr                sta chary
003D05  3  A9 08                lda #8
003D07  3  85 rr                sta charx
003D09  3  A9 09                lda #9		; PRINT
003D0B  3  20 3B 31             jsr dmsg
003D0E  3  60                   rts
003D0F  3               evnt20:
003D0F  3  60                   rts
003D10  3  60           ptcusr: rts
003D11  3               msgdat:
003D11  3  53 43 4F 52          .byte "SCOR",197
003D15  3  C5           
003D16  3  20 20 48 49          .byte "  HIG",200
003D1A  3  47 C8        
003D1C  3  4B 43 20 4D          .byte "KC MUNHCKI",206
003D20  3  55 4E 48 43  
003D24  3  4B 49 CE     
003D27  3  20 47 41 4D          .byte " GAM",197
003D2B  3  C5           
003D2C  3  20 4F 56 45          .byte " OVE",210
003D30  3  D2           
003D31  3  20 4E 45 57          .byte " NEW HIGH SCOR",197
003D35  3  20 48 49 47  
003D39  3  48 20 53 43  
003D40  3  20 20 A0             .byte "  ",160
003D43  3  20 47 41 4D          .byte " GAME",160
003D47  3  45 A0        
003D49  3  20 4F 56 45          .byte " OVER",160
003D4D  3  52 A0        
003D4F  3  20 4E 45 57          .byte " NEW HIGH SCORE",160
003D53  3  20 48 49 47  
003D57  3  48 20 53 43  
003D5F  3               nummsg:
003D5F  3  0A                   .byte 10
003D60  3               chgfx:
003D60  3  00 01                .byte 0,1
003D62  3  7F 01                .byte 127,1
003D64  3               bprop:
003D64  3  00                   .byte 0
003D65  3  02                   .byte 2
003D66  3               sprgfx:
003D66  3  64 60 30 38          .byte 100,96,48,56,120,123,119,116,41,115,115,38
003D6A  3  78 7B 77 74  
003D6E  3  29 73 73 26  
003D72  3  2C 30 70 60          .byte 44,48,112,96,112,118,127,121,35,102,115,57
003D76  3  70 76 7F 79  
003D7A  3  23 66 73 39  
003D7E  3  64 60 30 38          .byte 100,96,48,56,120,123,119,116,43,127,127,39
003D82  3  78 7B 77 74  
003D86  3  2B 7F 7F 27  
003D8A  3  2C 30 70 60          .byte 44,48,112,96,112,118,127,121,35,111,127,63
003D8E  3  70 76 7F 79  
003D92  3  23 6F 7F 3F  
003D96  3  64 7C 7C 38          .byte 100,124,124,56,117,127,122,127,110,43,55,61
003D9A  3  75 7F 7A 7F  
003D9E  3  6E 2B 37 3D  
003DA2  3  2C 78 7C 74          .byte 44,120,124,116,127,122,117,127,44,55,111,107
003DA6  3  7F 7A 75 7F  
003DAA  3  2C 37 6F 6B  
003DAE  3  64 7C 7C 38          .byte 100,124,124,56,117,127,122,127,62,107,39,109
003DB2  3  75 7F 7A 7F  
003DB6  3  3E 6B 27 6D  
003DBA  3  2C 78 7C 74          .byte 44,120,124,116,127,122,117,127,124,39,63,43
003DBE  3  7F 7A 75 7F  
003DC2  3  7C 27 3F 2B  
003DC6  3               frmlst:
003DC6  3  00 02                .byte 0,2
003DC8  3  02 02 04 00          .byte 2,2,4,0
003DCC  3               scdat:
003DCC  3  4A 01                .word 330
003DCE  3  FF 01 28 FF          .byte 255,1,40,255,0,9,1,255,0,4,1,0,0,0,1,255,0,8,1,255,0,9,1,1,255,0,9,1,255,0,4,1,0,0,0
003DD2  3  00 09 01 FF  
003DD6  3  00 04 01 00  
003DF1  3  01 FF 00 08          .byte 1,255,0,8,1,255,0,9,1,1,255,0,9,1,255,0,4,1,0,0,0,1,255,0,8,1,255,0,9,1,1,255,0,4
003DF5  3  01 FF 00 09  
003DF9  3  01 01 FF 00  
003E13  3  FF 01 06 FF          .byte 255,1,6,255,0,4,1,0,0,0,1,255,0,4,255,1,5,255,0,4,255,1,7,255,0,37,1,1,255,0,37,1,1
003E17  3  00 04 01 00  
003E1B  3  00 00 01 FF  
003E34  3  FF 00 25 01          .byte 255,0,37,1,1,255,0,4,255,1,6,255,0,4,255,1,9,255,0,4,255,1,6,255,0,4,1,1,255,0,9,1,255,0,17
003E38  3  01 FF 00 04  
003E3C  3  FF 01 06 FF  
003E57  3  01 FF 00 09          .byte 1,255,0,9,1,1,255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17,1,255,0,9,255,1,7
003E5B  3  01 01 FF 00  
003E5F  3  09 01 FF 00  
003E78  3  FF 00 04 FF          .byte 255,0,4,255,1,19,255,0,4,255,1,6,255,0,117,255,1,6,255,0,4,255,1,19,255,0,4,255,1,7,255,0,4
003E7C  3  01 13 FF 00  
003E80  3  04 FF 01 06  
003E99  3  01 FF 00 09          .byte 1,255,0,9,1,255,0,7,1,255,0,9,1,255,0,4,1,1,255,0,4,1,255,0,9,1,255,0,7,1,255,0,9
003E9D  3  01 FF 00 07  
003EA1  3  01 FF 00 09  
003EBA  3  01 FF 00 04          .byte 1,255,0,4,1,1,255,0,4,1,255,0,9,1,255,0,7,1,255,0,9,1,255,0,4,1,1,255,0,4,1,255,0,4
003EBE  3  01 01 FF 00  
003EC2  3  04 01 FF 00  
003EDC  3  01 FF 00 04          .byte 1,255,0,4,255,1,9,255,0,4,1,255,0,4,1,255,0,4,1,1,255,0,9,1,255,0,17,1,255,0,9,1,1
003EE0  3  FF 01 09 FF  
003EE4  3  00 04 01 FF  
003EFD  3  FF 00 09 01          .byte 255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17,1,255,0,9,255,1,40
003F01  3  FF 00 11 01  
003F05  3  FF 00 09 01  
003F18  3               numsc:
003F18  3  01                   .byte 1
003F19  3               nmedat:
003F19  3  00 00 28 14          .byte 0,0,40,20,1,1,40,10,255
003F1D  3  01 01 28 0A  
003F21  3  FF           
003F22  3               NUMOBJ = 1
003F22  3               objdta:
003F22  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
003F26  3  00 00 00 00  
003F2A  3  00 00 00 00  
003F48  3               font:
003F48  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003F4C  3  00 00 00 00  
003F50  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003F54  3  30 00 30 00  
003F58  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003F5C  3  00 00 00 00  
003F60  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003F64  3  6C FE 6C 00  
003F68  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
003F6C  3  7E 1E 7E 18  
003F70  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
003F74  3  30 6E CE 00  
003F78  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
003F7C  3  7E CC 7E 00  
003F80  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
003F84  3  00 00 00 00  
003F88  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
003F8C  3  18 18 0C 00  
003F90  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
003F94  3  30 30 60 00  
003F98  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
003F9C  3  7E 18 3C 00  
003FA0  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
003FA4  3  7E 18 18 00  
003FA8  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
003FAC  3  00 18 18 30  
003FB0  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
003FB4  3  7E 00 00 00  
003FB8  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
003FBC  3  00 38 38 00  
003FC0  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
003FC4  3  18 30 60 00  
003FC8  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
003FCC  3  F6 E6 7C 00  
003FD0  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003FD4  3  18 18 7E 00  
003FD8  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003FDC  3  7C C0 FE 00  
003FE0  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003FE4  3  06 C6 7C 00  
003FE8  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003FEC  3  D8 FE 18 00  
003FF0  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003FF4  3  06 C6 7C 00  
003FF8  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003FFC  3  C6 C6 7C 00  
004000  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
004004  3  18 30 30 00  
004008  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00400C  3  C6 C6 7C 00  
004010  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
004014  3  7E 06 7C 00  
004018  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00401C  3  00 00 30 00  
004020  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
004024  3  00 30 30 60  
004028  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00402C  3  30 18 0C 00  
004030  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
004034  3  00 7E 00 00  
004038  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00403C  3  0C 18 30 00  
004040  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
004044  3  18 00 18 00  
004048  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00404C  3  FE C0 7C 00  
004050  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
004054  3  FE C6 C6 00  
004058  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
00405C  3  C6 C6 FC 00  
004060  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
004064  3  C0 C6 7C 00  
004068  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
00406C  3  C6 CC F8 00  
004070  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
004074  3  C0 C0 FE 00  
004078  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00407C  3  C0 C0 C0 00  
004080  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
004084  3  DE C6 7C 00  
004088  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
00408C  3  C6 C6 C6 00  
004090  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
004094  3  18 18 7E 00  
004098  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
00409C  3  C6 C6 7C 00  
0040A0  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0040A4  3  D8 CC C6 00  
0040A8  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0040AC  3  C0 C0 FE 00  
0040B0  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0040B4  3  C6 C6 C6 00  
0040B8  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0040BC  3  DE CE C6 00  
0040C0  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0040C4  3  C6 C6 7C 00  
0040C8  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0040CC  3  FC C0 C0 00  
0040D0  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0040D4  3  F6 DE 7C 00  
0040D8  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0040DC  3  FC CC C6 00  
0040E0  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0040E4  3  06 C6 7C 00  
0040E8  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
0040EC  3  30 30 30 00  
0040F0  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
0040F4  3  C6 C6 7C 00  
0040F8  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
0040FC  3  C6 6C 38 00  
004100  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
004104  3  C6 FE 6C 00  
004108  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00410C  3  38 6C C6 00  
004110  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
004114  3  30 30 30 00  
004118  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00411C  3  30 60 FE 00  
004120  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
004124  3  18 18 1E 00  
004128  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00412C  3  30 18 0C 00  
004130  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
004134  3  30 30 F0 00  
004138  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00413C  3  30 30 30 00  
004140  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
004144  3  00 00 00 FF  
004148  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00414C  3  60 60 FE 00  
004150  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
004154  3  7C CC 7C 00  
004158  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
00415C  3  66 66 7C 00  
004160  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
004164  3  60 60 3C 00  
004168  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
00416C  3  CC CC 7C 00  
004170  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
004174  3  F8 C0 7C 00  
004178  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
00417C  3  30 30 30 00  
004180  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
004184  3  CC 7C 0C 78  
004188  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00418C  3  CC CC CC 00  
004190  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
004194  3  30 30 78 00  
004198  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00419C  3  0C 0C 6C 38  
0041A0  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0041A4  3  70 78 6C 00  
0041A8  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0041AC  3  30 30 1C 00  
0041B0  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0041B4  3  FC FC FC 00  
0041B8  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0041BC  3  CC CC CC 00  
0041C0  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0041C4  3  CC CC 78 00  
0041C8  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0041CC  3  CC F8 C0 C0  
0041D0  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0041D4  3  CC 7C 0C 0E  
0041D8  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0041DC  3  60 60 60 00  
0041E0  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0041E4  3  78 0C F8 00  
0041E8  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0041EC  3  30 30 1C 00  
0041F0  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0041F4  3  CC CC 78 00  
0041F8  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0041FC  3  78 78 30 00  
004200  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
004204  3  FC FC 78 00  
004208  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00420C  3  30 78 CC 00  
004210  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
004214  3  CC 7C 0C 78  
004218  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00421C  3  30 60 FC 00  
004220  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
004224  3  18 18 1E 00  
004228  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00422C  3  18 18 18 00  
004230  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
004234  3  30 30 F0 00  
004238  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00423C  3  00 00 00 00  
004240  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
004244  3  E3 BB C6 7C  
004248  3               jtab:
004248  3  63                   .byte 99
004249  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
00424D  3  20 4E 4D 31  
004251  3  32 33 34     
004254  3               
004254  2               
004254  1               	.include "lib.inc"
004254  2               ;----------------------------------------------------------------------
004254  2               ; System 5 depending variables and routines
004254  2               ;----------------------------------------------------------------------
004254  2               
004254  2               ; Global variables
004254  2               
004254  2               	t_red		= 1	; Text colour definition filters
004254  2               	t_green		= 2
004254  2               	t_yellow	= 3
004254  2               	t_blue		= 4
004254  2               	t_magenta	= 5
004254  2               	t_cyan		= 6
004254  2               	t_white		= 7
004254  2               
004254  2               	g_red		= 17	; Graphics colour definition filters
004254  2               	g_green		= 18
004254  2               	g_yellow	= 19
004254  2               	g_blue		= 20
004254  2               	g_magenta	= 21
004254  2               	g_cyan		= 22
004254  2               	g_white		= 23
004254  2               
004254  2               	ScrWidth	= 40
004254  2               	ScrHeight	= 25
004254  2               
004254  2               ; System constants
004254  2               
004254  2               	ScreenAddr	= $0400	; Startaddress video RAM
004254  2               	MAP 		= $D800	; properties map buffer (4x256 bytes)
004254  2               	SCADTB_lb 	= $DC00	; screen address table lo-byte (256 bytes)
004254  2               	SCADTB_hb 	= $DD00	; screen address table hi-byte (256 bytes)
004254  2               	SHRAPN 		= $DE00	; shrapnel table (55x6 bytes)
004254  2               	PORT_A		= $0E21	; Keyboard
004254  2               
004254  2               	ScrSelAddr	= $b000	; Screen selection address
004254  2               	KeyRowAddr	= $b000	; PIA key matrix row
004254  2               	KeyColAddr	= $b001	; PIA key matrix column
004254  2               	SpeakerBit	= $b002	; Speaker bit
004254  2               	CmdReg		= $b400	; Command register AtoMMC
004254  2               	DatReg		= $b401	; Data register AtoMMC
004254  2               	Timer1_Low  	= $0e24	; Timer 1 low byte
004254  2               	Timer1_High 	= $0e25	; Timer 1 high byte
004254  2               	Timer2_Low	= $0e28	; Timer 2 low byte
004254  2               	Timer2_High	= $0e29	; Timer 2 high byte
004254  2               	IFR		= $0e2d ; Interrupt Flag Register
004254  2               
004254  2               ; System calls
004254  2               
004254  2               	OS_CLI   = $FFF7
004254  2               	OSBYTE   = $FFF4
004254  2               	OSWORD   = $FFF1
004254  2               	OSWRCH   = $FFEE
004254  2               	OSWRCR   = $FFEC
004254  2               	OSNEWL   = $FFE7
004254  2               	OSASCI   = $FFE3
004254  2               	OSRDCH   = $FFE0
004254  2               	OSFILE   = $FFDD
004254  2               	OSARGS   = $FFDA
004254  2               	OSBGET   = $FFD7
004254  2               	OSBPUT   = $FFD4
004254  2               	OSGBPB   = $FFD1
004254  2               	OSFIND   = $FFCE
004254  2               
004254  2               ; To be removed
004254  2               
004254  2               	SCRSYNC	= $fff4
004254  2               	READKEY	= $fff4
004254  2               	red    = 1
004254  2               	blue   = 2
004254  2               	yellow = 3
004254  2               	green  = 4
004254  2               keymask:
004254  2  00           	.byte 0
004255  2               
004255  2               ;======================================================================
004255  2               ; System depending routines
004255  2               ;======================================================================
004255  2               
004255  2               ;----------------------------------------------------------------------
004255  2               ; Init hardware
004255  2               ;----------------------------------------------------------------------
004255  2               
004255  2               init:
004255  2               
004255  2               ; Set timer at 50 Hz
004255  2               ;	lda #$e0		; T1 continuous
004255  2               ;	sta $0e2b
004255  2               ;	lda #$7f		; No int
004255  2               ;	sta $0e2e
004255  2               ;	lda #0
004255  2               ;	sta $0e2d		; Clear interrupt flags
004255  2               ;	lda #<50000
004255  2               ;	sta Timer1_Low
004255  2               ;	lda #>50000
004255  2               ;	sta Timer1_High
004255  2               
004255  2               ; Disable cursor
004255  2  A9 0A        	lda #$0a
004257  2  8D 00 08     	sta $0800
00425A  2  A9 20        	lda #$20
00425C  2  8D 01 08     	sta $801
00425F  2               
00425F  2  20 63 42     	jsr cls
004262  2  60           	rts
004263  2               
004263  2               ;======================================================================
004263  2               ; Screen routines
004263  2               ;======================================================================
004263  2               
004263  2               ;----------------------------------------------------------------------
004263  2               ; Clear screen routine.
004263  2               ;
004263  2               ; Fill screenmem $0400-$07ff with ScrFillByte
004263  2               ; Set semigraphics at 1st column every line
004263  2               ;----------------------------------------------------------------------
004263  2               
004263  2               cls:
004263  2  A9 00        	lda #0
004265  2  A0 00        	ldy #0
004267  2               clsloop:
004267  2  99 00 04     	sta ScreenAddr,y
00426A  2  99 00 05     	sta ScreenAddr+256,y
00426D  2  99 00 06     	sta ScreenAddr+512,y
004270  2  99 00 07     	sta ScreenAddr+768,y
004273  2  C8           	iny
004274  2  D0 F1        	bne clsloop
004276  2               
004276  2  A0 00        	ldy #0
004278  2  A2 19        	ldx #ScrHeight
00427A  2  AD 00 DC     	lda SCADTB_lb
00427D  2  85 rr        	sta scraddr
00427F  2  AD 00 DD     	lda SCADTB_hb
004282  2  85 rr        	sta scraddr+1
004284  2  AD EF 3A     	lda bcolour
004287  2               colloop:
004287  2  91 rr        	sta (scraddr),y
004289  2  48           	pha
00428A  2  A5 rr        	lda scraddr
00428C  2  18           	clc
00428D  2  69 28        	adc #ScrWidth
00428F  2  85 rr        	sta scraddr
004291  2  90 02        	bcc :+
004293  2  E6 rr        	inc scraddr+1
004295  2               :
004295  2  68           	pla
004296  2  CA           	dex
004297  2  D0 EE        	bne colloop
004299  2  60           	rts
00429A  2               
00429A  2               ;-------------------------------------------------------------
00429A  2               ; Screen synchronisation.
00429A  2               ;
00429A  2               ;  - read joystick/keyboard
00429A  2               ;  - handle sound
00429A  2               ;  - sync framerate with clock
00429A  2               ;  - handle shrapnel every even frame
00429A  2               ;-------------------------------------------------------------
00429A  2               
00429A  2               vsync:
00429A  2  48           	pha
00429B  2  98           	tya
00429C  2  48           	pha
00429D  2  8A           	txa
00429E  2  48           	pha
00429F  2  20 DD 30     	jsr joykey		; read joystick/keyboard.
0042A2  2               vsync1:
0042A2  2               ;	bit IFR			; Check Interrupt Flag Register
0042A2  2               ;	beq vsync1
0042A2  2               ;	lda Timer1_Low		; Clear Timer interrupt
0042A2  2               
0042A2  2  A5 rr        	lda clock
0042A4  2  29 01        	and #1
0042A6  2  D0 03        	bne:+
0042A8  2  20 8D 28     	jsr proshr		; handle shrapnel every even frame
0042AB  2               :
0042AB  2  AD C9 42     	lda sndtyp
0042AE  2  F0 13        	beq sndskip
0042B0  2               sndloop:
0042B0  2  AD 02 B0     	lda SpeakerBit		; handle sound
0042B3  2  AC C9 42     	ldy sndtyp
0042B6  2               sndwait:
0042B6  2  88           	dey
0042B7  2  D0 FD        	bne sndwait
0042B9  2  49 04        	eor #4
0042BB  2  8D 02 B0     	sta SpeakerBit
0042BE  2  CE C9 42     	dec sndtyp
0042C1  2  D0 ED        	bne sndloop
0042C3  2               sndskip:
0042C3  2  68           	pla
0042C4  2  AA           	tax
0042C5  2  68           	pla
0042C6  2  A8           	tay
0042C7  2  68           	pla
0042C8  2  60           	rts
0042C9  2               
0042C9  2  00           sndtyp:	.byte 0
0042CA  2               
0042CA  2               ;======================================================================
0042CA  2               ; Joystick routines
0042CA  2               ;======================================================================
0042CA  2               
0042CA  2               joyinit:
0042CA  2  60           	rts
0042CB  2               joy1:
0042CB  2  60           	rts
0042CC  2               joy2:
0042CC  2  60           	rts
0042CD  2               
0042CD  2               ;======================================================================
0042CD  2               ; Keyboard routines
0042CD  2               ;======================================================================
0042CD  2               
0042CD  2               ;----------------------------------------------------------------------
0042CD  2               ; KTEST
0042CD  2               ; Check if key in A is pressed
0042CD  2               ; 	return clc if pressed
0042CD  2               ; 	return sec if not pressed
0042CD  2               ;----------------------------------------------------------------------
0042CD  2               
0042CD  2               ktest:
0042CD  2  85 rr        	sta tmp
0042CF  2  2C 21 0E     	bit PORT_A
0042D2  2  30 09        	bmi not_pressed
0042D4  2  AD 21 0E     	lda PORT_A
0042D7  2  C5 rr        	cmp tmp
0042D9  2  D0 02        	bne not_pressed
0042DB  2               pressed:
0042DB  2  18           	clc
0042DC  2  60           	rts
0042DD  2               not_pressed:
0042DD  2  38           	sec
0042DE  2  60           	rts
0042DF  2               
0042DF  2               ;======================================================================
0042DF  2               ; PRSKEY
0042DF  2               ; Wait for keypress and release
0042DF  2               ;======================================================================
0042DF  2               
0042DF  2               prskey:
0042DF  2  2C 21 0E     	bit PORT_A
0042E2  2  30 FB        	bmi prskey
0042E4  2               relkey:
0042E4  2  2C 21 0E     	bit PORT_A
0042E7  2  10 FB        	bpl relkey
0042E9  2  60           	rts
0042EA  2               
0042EA  2               
0042EA  1               	.include "z80.asm"
0042EA  2               ;------------------------------------------------------
0042EA  2               ; z80.asm
0042EA  2               ; spectrum stuff
0042EA  2               ; adresses
0042EA  2               
0042EA  2               
0042EA  2               ; Contains seperatly 1 bit set
0042EA  2               
0042EA  2               _bitmem0	= $f8
0042EA  2               _bitmem1	= $f9
0042EA  2               _bitmem2	= $fa
0042EA  2               _bitmem3	= $fb
0042EA  2               _bitmem4	= $fc
0042EA  2               _bitmem5	= $fd
0042EA  2               _bitmem6	= $fe
0042EA  2               _bitmem7	= $ff
0042EA  2               
0042EA  2               ; constants
0042EA  2               _bitvalue0	= $01
0042EA  2               _bitvalue1	= $02
0042EA  2               _bitvalue2	= $04
0042EA  2               _bitvalue3	= $08
0042EA  2               _bitvalue4	= $10
0042EA  2               _bitvalue5	= $20
0042EA  2               _bitvalue6	= $40
0042EA  2               _bitvalue7	= $80
0042EA  2               
0042EA  2               _notbitvalue0	= $fe
0042EA  2               _notbitvalue1	= $fd
0042EA  2               _notbitvalue2	= $fb
0042EA  2               _notbitvalue3	= $f7
0042EA  2               _notbitvalue4	= $ef
0042EA  2               _notbitvalue5	= $df
0042EA  2               _notbitvalue6	= $bf
0042EA  2               _notbitvalue7	= $7f
0042EA  2               
0042EA  2               
0042EA  2               exx:
0042EA  2  A5 62        		lda z80_c
0042EC  2  A4 6E        		ldy z80_cp
0042EE  2  84 62        		sty z80_c
0042F0  2  85 6E        		sta z80_cp
0042F2  2  A5 63        		lda z80_b
0042F4  2  A4 6F        		ldy z80_bp
0042F6  2  84 63        		sty z80_b
0042F8  2  85 6F        		sta z80_bp
0042FA  2  A5 64        		lda z80_e
0042FC  2  A4 70        		ldy z80_ep
0042FE  2  84 64        		sty z80_e
004300  2  85 70        		sta z80_ep
004302  2  A5 65        		lda z80_d
004304  2  A4 71        		ldy z80_dp
004306  2  84 65        		sty z80_d
004308  2  85 71        		sta z80_dp
00430A  2  A5 rr        		lda scraddr
00430C  2  A4 72        		ldy z80_lp
00430E  2  84 rr        		sty scraddr
004310  2  85 72        		sta z80_lp
004312  2  A5 rr        		lda scraddr+1
004314  2  A4 73        		ldy z80_hp
004316  2  84 rr        		sty scraddr+1
004318  2  85 73        		sta z80_hp
00431A  2  60           		rts
00431B  2               
00431B  2               
00431B  1               eind_asm:
00431B  1               eop:					; End Of Program
00431B  1               
00431B  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
00431B  1               
