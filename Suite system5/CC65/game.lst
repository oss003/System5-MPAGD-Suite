ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "kcmunchkin.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (8x12) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 83 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  68 3C        msgptr:		.word msgdat	; messages
002811  3  D8 3C        blkptr:		.word chgfx	; block graphics.
002813  3  DE 3C        proptr:		.word bprop	; address of char properties.
002815  3  E1 3C        sptptr:		.word sprgfx	; sprite graphics
002817  3  F9 42        frmptr:		.word frmlst	; sprite frames.
002819  3  07 43        scrptr:		.word scdat	; address of screens.
00281B  3  7E 44        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  87 44        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3               ;txtcol:		.byte green,yellow,blue,red
00281F  3               
00281F  3               ; Don't change the order of these four.
00281F  3               ; Menu routine relies on winlft following wintop.
00281F  3               
00281F  3  00           wintop:		.byte WINDOWTOP	; top of window.
002820  3  01           winlft:		.byte WINDOWLFT	; left edge.
002821  3  19           winhgt:		.byte WINDOWHGT	; window height.
002822  3  27           winwid:		.byte WINDOWWID	; window width.
002823  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002824  3               
002824  3               ; Variables start here.
002824  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002824  3               
002824  3  00           wntopx:		.byte (3 * WINDOWTOP)
002825  3  02           wnlftx:		.byte (2 * WINDOWLFT)
002826  3  42           wnbotx:		.byte ((WINDOWTOP * 3) + (WINDOWHGT * 3) - 9)
002827  3  46           wnrgtx:		.byte ((WINDOWLFT * 2) + (WINDOWWID * 2) - 8)-2
002828  3               
002828  3               ; Assorted game routines which can go in contended memory.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for inventory called by the INV command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with objects seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected objectnr of INV menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               .if mflag
002828  3               minve:
002828  3               .if gflag
002828  3               	lda #$ff		; blue frontcolour
002828  3               	sta andeor
002828  3               	lda #$aa		; yellow backcoloour
002828  3               	sta andeor+1
002828  3               .endif
002828  3               	lda #<(invdis)		; routine address.
002828  3               	sta mod0+1		; set up menu routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(invdis)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               	lda #<(fopt)		; find option from available objects.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fopt)
002828  3               	sta mod1+1+1
002828  3               	jmp dbox		; do menu routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Entry for menu called by the MENU command
002828  3               ;
002828  3               ; Input:
002828  3               ;  X   = message nr with menu items seperated with ,
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected line nr of MENU menu
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               mmenu:
002828  3               	lda #<(always)		; routine address.
002828  3               	sta mod0+1		; set up routine.
002828  3               	sta mod2+1		; set up count routine.
002828  3               	lda #>(always)
002828  3               	sta mod0+2
002828  3               	sta mod2+2
002828  3               
002828  3               	lda #<(fstd)		; standard option selection.
002828  3               	sta mod1+1		; set up routine.
002828  3               	lda #>(fstd)
002828  3               	sta mod1+2
002828  3               
002828  3               ; Drop through into box routine.
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; Work out size of box for message or menu.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               dbox:
002828  3               	lda #<(msgdat)		; pointer to messages.
002828  3               	sta z80_l
002828  3               	lda #>(msgdat)
002828  3               	sta z80_h
002828  3               
002828  3               	jsr getwrd		; get message number.
002828  3               
002828  3               	lda z80_h		; store pointer to message.
002828  3               	sta TmpAddr
002828  3               	lda z80_l
002828  3               	sta TmpAddr+1
002828  3               
002828  3               	lda #1			; height.
002828  3               	sta z80_d
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               	sta z80_e		; maximum width.
002828  3               dbox5:
002828  3               	lda #0			; this line"s width.
002828  3               	sta z80_b
002828  3               mod2:
002828  3               	jsr always		; item in player"s possession?
002828  3               	cmp #255
002828  3               	bne dbox6		; not in inventory, skip this line.
002828  3               	inc z80_d		; add to tally.
002828  3               dbox6:
002828  3               	ldy #0			; get character.
002828  3               	lda (z80_hl),y
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a		; reached end of line?
002828  3               	cmp #','
002828  3               	beq dbox3		; yes.
002828  3               	cmp #13
002828  3               	beq dbox3		; yes.
002828  3               	inc z80_b		; add to this line"s width.
002828  3               	lda z80_a
002828  3               	bmi dbox4		; end of message? yes, end count.
002828  3               	jmp dbox6		; repeat until we find the end.
002828  3               dbox3:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox5		; no, carry on looking.
002828  3               	lda z80_b		; make this the widest so far.
002828  3               	sta z80_e
002828  3               	jmp dbox5		; keep looking.
002828  3               dbox4:
002828  3               	lda z80_e		; maximum line width.
002828  3               	cmp z80_b		; have we exceeded longest so far?
002828  3               	bpl dbox8		; no, carry on looking.
002828  3               	lda z80_b		; final line is the longest so far.
002828  3               	sta z80_e
002828  3               dbox8:
002828  3               	dec z80_d		; decrement items found.
002828  3               	bne :+			; total was zero.
002828  3               	lda #255
002828  3               	sta varopt
002828  3               	jmp dbox15
002828  3               :
002828  3               	lda z80_e		; longest line.
002828  3               	bne :+			; was it zero?
002828  3               	jmp dbox15		; total was zero.
002828  3               :
002828  3               	sta bwid		; set up size.
002828  3               	lda z80_d
002828  3               	sta blen
002828  3               
002828  3               ;--------------------------------------------------------------
002828  3               ; That's set up our box size.
002828  3               ;--------------------------------------------------------------
002828  3               
002828  3               	lda winhgt		; window height in characters.
002828  3               	sec
002828  3               	sbc z80_d		; subtract height of box.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc wintop		; add top edge of window.
002828  3               	sta btop		; set up box top.
002828  3               
002828  3               	lda winwid		; window width in characters.
002828  3               	sec
002828  3               	sbc z80_e		; subtract box width.
002828  3               	lsr a			; divide by 2.
002828  3               	clc
002828  3               	adc winlft		; add left edge of window.
002828  3               	sta blft		; box left.
002828  3               
002828  3               	lda #<(FONT-256)		; font.
002828  3               	sta grbase		; set up for text display.
002828  3               	lda #>(FONT-256)
002828  3               	sta grbase+1
002828  3               
002828  3               	lda TmpAddr+1		; restore message pointer.
002828  3               	sta z80_l
002828  3               	lda TmpAddr
002828  3               	sta z80_h
002828  3               
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set display coordinate.
002828  3               	lda #0			; start at object zero.
002828  3               	sta combyt		; store number of object in combyt.
002828  3               dbox2:
002828  3               	lda combyt		; get object number.
002828  3               	sta z80_a
002828  3               mod0:
002828  3               	jsr always		; check inventory for display.
002828  3               	cmp #255
002828  3               	beq :+
002828  3               	jmp dbox13		; not in inventory, skip this line.
002828  3               :
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set left display position.
002828  3               	lda bwid		; box width.
002828  3               	sta z80_b		; store width.
002828  3               
002828  3               	lda fcolour		; Set textcolour
002828  3               	jsr pchar
002828  3               	jsr nexpos
002828  3               dbox0:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	cmp #','		; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               	cmp #13			; end of line?
002828  3               	beq dbox1		; yes, next one.
002828  3               
002828  3               	cmp #141			; end of line?
002828  3               	bne :+
002828  3               	dec bwid
002828  3               	jmp dbox7		; yes, next one.
002828  3               :
002828  3               	dec z80_b		; one less to display.
002828  3               	and #127		; remove terminator.
002828  3               
002828  3               	jsr pchr		; display on screen.
002828  3               
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	sta z80_a
002828  3               	inc z80_l		; next character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	lda z80_a
002828  3               	cmp #128		; end of message?
002828  3               	bmi :+
002828  3               	jsr dscor2
002828  3               	jmp dbox7		; yes, job done.
002828  3               :
002828  3               	lda z80_b		; chars remaining.
002828  3               	beq :+			; are any left?
002828  3               	jmp dbox0		; yes, continue.
002828  3               :
002828  3               ;---------------------------------------------------
002828  3               ; Reached limit of characters per line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dbox9:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #13			; another line?
002828  3               	beq dbox10		; yes, do next line.
002828  3               	cmp #128		; end of message?
002828  3               	bcs :+
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox9
002828  3               
002828  3               ;---------------------------------------------------
002828  3               ; Fill box to end of line.
002828  3               ;---------------------------------------------------
002828  3               
002828  3               dboxf:
002828  3               	lda #32			; space character.
002828  3               	jsr pchr		; display character.
002828  3               	dec z80_b
002828  3               	beq :+
002828  3               	jmp dboxf		; repeat for remaining chars on line.
002828  3               :
002828  3               	rts
002828  3               dbox1:
002828  3               	inc z80_l		; skip character.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	jsr dboxf		; fill box out to right side.
002828  3               dbox10:
002828  3               	inc dispy		; y coordinate down a line next position.
002828  3               	jmp dbox2		; next line.
002828  3               dbox7:
002828  3               	lda z80_b		; chars remaining.
002828  3               	bne :+			; are any left?
002828  3               	jmp dbox11		; no, nothing to draw.
002828  3               :
002828  3               	jsr dboxf		; fill message to line.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Drawn the box menu, now select option.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox11:
002828  3               	lda btop		; box top.
002828  3               	sta dispy		; set bar position.
002828  3               dbox14:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	bne dbox14		; yes, debounce it.
002828  3               	jsr dbar		; draw bar.
002828  3               dbox12:
002828  3               	jsr joykey		; get controls.
002828  3               	cmp #$7f		; anything pressed?
002828  3               	beq dbox12		; no, nothing.
002828  3               	and #16			; fire button pressed?
002828  3               	bne :+
002828  3               mod1:
002828  3               	jmp fstd		; yes, job done.
002828  3               :
002828  3               	jsr dbar		; delete bar.
002828  3               
002828  3               	lda joyval		; joystick reading.
002828  3               	and #8			; going up?
002828  3               	beq dboxu		; yes, go up.
002828  3               
002828  3               	ldx dispy		; vertical position of bar.
002828  3               	inx			; look down.
002828  3               	txa
002828  3               	sec
002828  3               	sbc btop		; find distance from top.
002828  3               	cmp blen		; top of box.
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	inc dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               dboxu:
002828  3               	lda dispy		; vertical position of bar.
002828  3               	cmp btop		; are we at the top?
002828  3               	bne :+
002828  3               	jmp dbox14		; yes, go no further.
002828  3               :
002828  3               	dec dispy		; move bar.
002828  3               	jmp dbox14		; continue.
002828  3               fstd:
002828  3               	lda dispy		; bar position.
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta varopt		; store the option.
002828  3               	jmp redraw		; redraw the screen.
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Option not available.  Skip this line.
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbox13:
002828  3               	ldy #0
002828  3               	lda (z80_hl),y		; get character.
002828  3               	inc z80_l		; next one.
002828  3               	bne :+
002828  3               	inc z80_h
002828  3               :
002828  3               	cmp #','		; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               	cmp #13			; another line?
002828  3               	bne :+
002828  3               	jmp dbox2		; yes, do next line.
002828  3               :
002828  3               
002828  3               	bpl :+			; end of message?
002828  3               	jmp dbox11		; yes, finish message.
002828  3               :
002828  3               	jmp dbox13
002828  3               dbox15:
002828  3               	lda TmpAddr		; pop message pointer from the stack.
002828  3               	sta z80_h
002828  3               	lda TmpAddr+1
002828  3               	sta z80_l
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Invert bar
002828  3               ;------------------------------------------------------
002828  3               
002828  3               dbar:
002828  3               	lda blft		; box left.
002828  3               	sta dispx		; set display coordinate.
002828  3               	jsr gprad		; get printing address.
002828  3               
002828  3               ;	lda bwid		; box width.
002828  3               ;	sta z80_c		; loop counter in c.
002828  3               ;	lda z80_h
002828  3               ;	sta z80_d		; store screen address high byte.
002828  3               ;dbar1:
002828  3               ;	ldx #7			; pixel height in b.
002828  3               ;dbar0:
002828  3               ;	ldy scrtab,x
002828  3               ;	lda (scraddr),y		; get screen byte.
002828  3               ;	eor #255		; reverse all bits.
002828  3               ;	sta (scraddr),y		; write back to screen.
002828  3               ;	dex			; next line down.
002828  3               ;	bpl dbar0		; draw rest of character.
002828  3               
002828  3               ;	inc scraddr		; one char right.
002828  3               ;	dec z80_c		; decrement character counter.
002828  3               ;	bne dbar1		; repeat for whole line.
002828  3               
002828  3               	ldy #0
002828  3               	lda (scraddr),y
002828  3               	eor #7
002828  3               	sta (scraddr),y
002828  3               
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Point to object
002828  3               ;
002828  3               ; Input:
002828  3               ;  combyt
002828  3               ;
002828  3               ; Output:
002828  3               ;  A = object number, A=255 if already in possession
002828  3               ;------------------------------------------------------
002828  3               
002828  3               invdis:
002828  3               	lda z80_l		; store message text pointer.
002828  3               	pha
002828  3               	lda z80_h
002828  3               	pha
002828  3               	lda combyt		; object number.
002828  3               	inc combyt		; ready for next one.
002828  3               	jsr gotob		; check if we have object.
002828  3               	tay
002828  3               	pla
002828  3               	sta z80_h
002828  3               	pla
002828  3               	sta z80_l
002828  3               	tya
002828  3               	rts
002828  3               
002828  3               ;------------------------------------------------------
002828  3               ; Find option selected.
002828  3               ;
002828  3               ; Input:
002828  3               ;  -
002828  3               ;
002828  3               ; Output:
002828  3               ;  OPT = selected object
002828  3               ;------------------------------------------------------
002828  3               
002828  3               fopt:
002828  3               	lda dispy
002828  3               	sec
002828  3               	sbc btop		; find selected option.
002828  3               	sta tmp+2		; option selected in b register.
002828  3               	inc tmp+2
002828  3               
002828  3               	lda #0			; set to first item.
002828  3               	sta combyt		; object number.
002828  3               fopt0:
002828  3               	jsr fobj		; find next object in inventory.
002828  3               	dec tmp+2
002828  3               	bne fopt0		; repeat for relevant steps down the list.
002828  3               
002828  3               	lda combyt		; get option.
002828  3               	sta varopt		; store the option.
002828  3               	dec varopt		; one less, due to where we increment combyt.
002828  3               	jmp redraw		; redraw the screen.
002828  3               fobj:
002828  3               	ldy combyt		; object number.
002828  3               	inc combyt		; ready for next item.
002828  3               	tya
002828  3               	jsr gotob		; do we have this item?
002828  3               	cmp #255
002828  3               	bne :+
002828  3               	rts
002828  3               :
002828  3               	jmp fobj		; yes, it's on the list.
002828  3               .endif
002828  3               
002828  3               ;----------------------------------------------------
002828  3               ; Delay routine 1/50 sec
002828  3               ;
002828  3               ; Wait 1/60 sec = 16666 usec
002828  3               ; Wait 208 x 16 =  3328 usec
002828  3               ;                 19994 usec
002828  3               ; rts           =     6 usec
002828  3               ; Total         = 20000 usec
002828  3               ;----------------------------------------------------
002828  3               
002828  3               delay:
002828  3  85 rr        	sta xtmp
00282A  3               del_loop:
00282A  3  AD 19 48     	lda frames_passed	; Wait if not at 25Hz
00282D  3  C9 02        	cmp #2
00282F  3  90 F9        	bcc del_loop
002831  3  C6 rr        	dec xtmp
002833  3  D0 F5        	bne del_loop
002835  3  60           	rts
002836  3               
002836  3               ;----------------------------------------------------
002836  3               ; Clear sprite table.
002836  3               ;
002836  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002836  3               ;----------------------------------------------------
002836  3               
002836  3               xspr:
002836  3  A9 FF        	lda #255		; clear byte.
002838  3  A2 00        	ldx #0			; length of table.
00283A  3               xspr0:
00283A  3  9D AC 38     	sta sprtab,x		; sprite table.
00283D  3  E8           	inx			; move to next byte.
00283E  3  E0 CC        	cpx #SPRBUF
002840  3  D0 F8        	bne xspr0		; repeat for rest of table.
002842  3  60           	rts
002843  3               
002843  3               ;-------------------------------------------------------------
002843  3               ; Initialise all objects.
002843  3               ;
002843  3               ; Reset current room,y,x to start room,y,x for all objects
002843  3               ;-------------------------------------------------------------
002843  3               
002843  3               .if oflag
002843  3               iniob:
002843  3               	lda #<objdta 		; objects table.
002843  3               	sta z80_x
002843  3               	lda #>objdta
002843  3               	sta z80_i
002843  3               
002843  3               	ldx numob 		; number of objects in the game.
002843  3               iniob0:
002843  3               	ldy #35
002843  3               	lda (z80_ix),y 		; start screen.
002843  3               	ldy #32
002843  3               	sta (z80_ix),y 		; set start screen.
002843  3               
002843  3               	ldy #36
002843  3               	lda (z80_ix),y 		; find start y.
002843  3               	ldy #33
002843  3               	sta (z80_ix),y 		; set start y.
002843  3               
002843  3               	ldy #37
002843  3               	lda (z80_ix),y 		; get initial x.
002843  3               	ldy #34
002843  3               	sta (z80_ix),y 		; set x coord.
002843  3               
002843  3               	clc 			; point to next object.
002843  3               	lda z80_x
002843  3               	adc #38			; distance between objects.
002843  3               	sta z80_x
002843  3               	bcc :+
002843  3               	inc z80_i
002843  3               :
002843  3               	dex 			; repeat.
002843  3               	bne iniob0
002843  3               
002843  3               	rts
002843  3               .endif
002843  3               
002843  3               ;-----------------------------------------------
002843  3               ; Redraw the screen.
002843  3               ;
002843  3               ; Remove old copy of all sprites for redraw.
002843  3               ;-----------------------------------------------
002843  3               
002843  3               redraw:
002843  3               .if gflag
002843  3               	lda #$ff
002843  3               	sta andeor
002843  3               	lda #$00
002843  3               	sta andeor+1
002843  3               .endif
002843  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002845  3  48           	pha
002846  3  A5 68        	lda z80_x
002848  3  48           	pha
002849  3               
002849  3  20 41 2D     	jsr droom		; show screen layout.
00284C  3               .if oflag
00284C  3               	jsr shwob		; draw objects.
00284C  3               .endif
00284C  3               numsp0:
00284C  3  A9 0C        	lda #NUMSPR		; sprites to draw.
00284E  3  85 rr        	sta tmp
002850  3               
002850  3  A9 AC        	lda #<sprtab		; sprite table.
002852  3  85 68        	sta z80_x
002854  3  A9 38        	lda #>sprtab
002856  3  85 69        	sta z80_i
002858  3               redrw0:
002858  3  A0 00        	ldy #0
00285A  3  B1 68        	lda (z80_ix),y		; old sprite type.
00285C  3  C9 FF        	cmp #255		; is it enabled?
00285E  3  F0 0B        	beq redrw1 		; no, find next one.
002860  3               
002860  3  A0 03        	ldy #3
002862  3  B1 68        	lda (z80_ix),y 		; sprite y.
002864  3  C9 B1        	cmp #177		; beyond maximum?
002866  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002868  3               
002868  3  20 38 33     	jsr sspria		; show single sprite.
00286B  3               redrw1:
00286B  3  18           	clc			; next sprite.
00286C  3  A5 68        	lda z80_x
00286E  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
002870  3  85 68        	sta z80_x
002872  3  90 02        	bcc :+
002874  3  E6 69        	inc z80_i
002876  3               :
002876  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002878  3  D0 DE        	bne redrw0
00287A  3               rpblc1:
00287A  3               ;	jsr dshrp		; redraw shrapnel.
00287A  3               
00287A  3               .if aflag
00287A  3               	jsr rbloc		; draw blocks for this screen
00287A  3               .endif
00287A  3  68           	pla			; retrieve sprite pointer.
00287B  3  85 68        	sta z80_x
00287D  3  68           	pla
00287E  3  85 69        	sta z80_i
002880  3               
002880  3  60           	rts
002881  3               
002881  3               ;----------------------------------------------------------------------
002881  3               ; Atomic palette is static
002881  3               ;----------------------------------------------------------------------
002881  3               
002881  3               setpal:
002881  3  60           	rts
002882  3               
002882  3               ;----------------------------------------------------------------------
002882  3               ; FODDER check
002882  3               ;----------------------------------------------------------------------
002882  3               
002882  3               .if pflag .or dflag
002882  3               fdchk:
002882  3               	cmp #FODDER 		; is it fodder?
002882  3               	beq :+
002882  3               	rts 			; no.
002882  3               :
002882  3               	lda #0			; wipe fodder in MAP
002882  3               	ldy #0
002882  3               	sta (bufaddr),y 	; rewrite block type.
002882  3               
002882  3               	lda dispx		; x=x/8
002882  3               	pha
002882  3               	lsr a
002882  3               	lsr a
002882  3               	lsr a
002882  3               	sta dispx
002882  3               
002882  3               	lda dispy		; y=y/8
002882  3               	pha
002882  3               	lsr a
002882  3               	lsr a
002882  3               	lsr a
002882  3               	sta dispy
002882  3               
002882  3               	lda #0 			; block to write.
002882  3               	jsr pattr 		; write block.
002882  3               
002882  3               	pla
002882  3               	sta dispy
002882  3               	pla
002882  3               	sta dispx
002882  3               	rts
002882  3               .endif
002882  3               
002882  3               ;----------------------------------------------------
002882  3               ; Scrolly text and puzzle variables.
002882  3               ;----------------------------------------------------
002882  3               
002882  3               .if sflag
002882  3               txtbit:	.byte 128		; bit to write.
002882  3               txtwid:	.byte 16		; width of ticker message.
002882  3               txtpos:	.word msgdat
002882  3               txtini:	.word msgdat
002882  3               txtscr:	.word ScreenAddr
002882  3               .endif
002882  3               
002882  3               ;----------------------------------------------------
002882  3               ; Specialist routines.
002882  3               ; Process shrapnel.
002882  3               ;----------------------------------------------------
002882  3               proshr:
002882  3               .if pflag
002882  3               	lda #<SHRAPN		; table.
002882  3               	sta z80_x
002882  3               	lda #>SHRAPN
002882  3               	sta z80_i
002882  3               
002882  3               	lda #NUMSHR		; shrapnel pieces to process.
002882  3               	sta shrctr
002882  3               prosh0:
002882  3               	ldy #0
002882  3               	lda (z80_ix),y		; on/off marker.
002882  3               	asl a
002882  3               proshx:
002882  3               	bcs :+
002882  3               	jsr prosh1 		; on, so process it.
002882  3               :
002882  3               	clc
002882  3               	lda z80_x
002882  3               	adc #SHRSIZ
002882  3               	sta z80_x
002882  3               	bcc :+
002882  3               	inc z80_i
002882  3               :
002882  3               	dec shrctr		; round again.
002882  3               	bne prosh0
002882  3               .endif
002882  3               .if sflag
002882  3               	jsr scrly
002882  3               .endif
002882  3  60           	rts
002883  3               
002883  3               .if pflag
002883  3               ;shrctr:	.byte 0
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Proces shrapnel piece
002883  3               ;----------------------------------------------------
002883  3               
002883  3               prosh1:
002883  3               	jsr plot 		; delete the pixel.
002883  3               
002883  3               	lda #<shrptr		; shrapnel routine pointers.
002883  3               	sta z80_l
002883  3               	lda #>shrptr
002883  3               	sta z80_h
002883  3               
002883  3               	ldy #0
002883  3               	lda (z80_ix),y		; restore shrapnel type.
002883  3               	jsr prosh2 		; run the routine.
002883  3               	jsr chkxy		; check x and y are good before we redisplay.
002883  3               
002883  3               	lda #<SHRSIZ 		; distance to next.
002883  3               	sta z80_e
002883  3               	lda #>SHRSIZ
002883  3               	sta z80_d
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Run the routine
002883  3               ;----------------------------------------------------
002883  3               
002883  3               prosh2:
002883  3               	asl a 			; 2 bytes per address.
002883  3               	tay
002883  3               	lda shrptr,y
002883  3               	sta z80_l
002883  3               	lda shrptr+1,y 		; fetch high byte from table.
002883  3               	sta z80_h
002883  3               	jmp (z80_hl) 		; jump to routine.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Paricle routine table
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shrptr:	.word laser		; laser.
002883  3               	.word trail		; vapour trail.
002883  3               	.word shrap		; shrapnel from explosion.
002883  3               	.word dotl		; horizontal starfield left.
002883  3               	.word dotr		; horizontal starfield right.
002883  3               	.word dotu		; vertical starfield up.
002883  3               	.word dotd		; vertical starfield down.
002883  3               	.word ptcusr		; user particle.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Explosion shrapnel.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shrap:
002883  3               	ldy #1
002883  3               	lda (z80_ix),y 		; get the angle.
002883  3               	clc
002883  3               	adc #<shrsin		; shrapnel sine table.
002883  3               	sta z80_l
002883  3               	lda #>shrsin
002883  3               	adc #0
002883  3               	sta z80_h
002883  3               
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; fetch value from table.
002883  3               	sta z80_e
002883  3               	inc z80_l 		; next byte of table.
002883  3               	bne :+
002883  3               	inc z80_h
002883  3               :
002883  3               	ldy #0
002883  3               	lda (z80_hl),y		; fetch value from table.
002883  3               	sta z80_d
002883  3               	inc z80_l		; next byte of table.
002883  3               	bne :+
002883  3               	inc z80_h
002883  3               :
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; fetch value from table.
002883  3               	sta z80_c
002883  3               	inc z80_l 		; next byte of table.
002883  3               	bne :+
002883  3               	inc z80_h
002883  3               :
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; fetch value from table.
002883  3               	sta z80_b
002883  3               
002883  3               	ldy #2
002883  3               	lda (z80_ix),y 		; x coordinate in hl.
002883  3               	clc
002883  3               	adc z80_e		; add sine lb
002883  3               	sta (z80_ix),y		; store new coordinate lb.
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	adc z80_d		; add sine hb
002883  3               	sta (z80_ix),y		; store new coordinate hb.
002883  3               
002883  3               	ldy #4
002883  3               	lda (z80_ix),y	 	; y coordinate in hl.
002883  3               	clc
002883  3               	adc z80_c		; add cosine lb
002883  3               	sta (z80_ix),y		; store new coordinate lb.
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	adc z80_b		; add cosine lb
002883  3               	sta (z80_ix),y		; store new coordinate hb.
002883  3               
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Move dots
002883  3               ;----------------------------------------------------
002883  3               
002883  3               dotl:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1		 	; move left.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               dotr:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1		 	; move left.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               dotu:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1		 	; move up.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               dotd:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1			; move down.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Check if coordinates are ok before redrawing at new position.
002883  3               ;
002883  3               ; left:   X>L		X=L	Ok
002883  3               ; right:  R+15>X	X=R	Ok
002883  3               ; top:    Y>T		Y=T	Ok
002883  3               ; bottom: B+15>Y	Y=B	Ok
002883  3               ;----------------------------------------------------
002883  3               
002883  3               chkxy:
002883  3               
002883  3               ; top:    Y>T		Y=T	Ok
002883  3               
002883  3               	ldy #3
002883  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	cmp wntopx		; window top.
002883  3               	bcs :+			; compare with top window limit.
002883  3               	jmp kilshr		; out of window, kill shrapnel.
002883  3               :
002883  3               ; left:   X>L		X=L	Ok
002883  3               
002883  3               	ldy #5
002883  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	cmp wnlftx		; left edge.
002883  3               	bcs :+			; compare with left window limit.
002883  3               	jmp kilshr		; out of window, kill shrapnel.
002883  3               :
002883  3               ; bottom: B+15>Y	Y=B	Ok
002883  3               
002883  3               	lda wnbotx		; point to bottom.
002883  3               	clc
002883  3               	adc #15
002883  3               	ldy #3
002883  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	bcs :+			; compare with shrapnel x coordinate.
002883  3               	jmp kilshr		; off screen, kill shrapnel..
002883  3               :
002883  3               ; right:  R+15>X	X=R	Ok
002883  3               
002883  3               	lda wnrgtx		; point to right edge.
002883  3               	clc
002883  3               	adc #15
002883  3               	ldy #5
002883  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
002883  3               	bcs :+			; compare with window limit.
002883  3               	jmp kilshr		; off screen, kill shrapnel.
002883  3               :
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Drop through.
002883  3               ; Display shrapnel.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               plot:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y		; y integer.
002883  3               	sta dispy	 	; workspace coordinates.
002883  3               	ldy #5
002883  3               	lda (z80_ix),y	 	; x integer.
002883  3               	sta dispx 		; workspace coordinates.
002883  3               
002883  3               	ldy #0
002883  3               	lda (z80_ix),y 		; type.
002883  3               	bne :+			; is it a laser?
002883  3               	jmp plot1 		; yes, draw laser instead.
002883  3               :
002883  3               plot0:
002883  3               	lda dispx		; which pixel within byte do we
002883  3               	and #7			; want to set first?
002883  3               	tay
002883  3               	lda dots,y 		; table of small pixel positions.
002883  3               	sta z80_e 		; get value.
002883  3               
002883  3               	jsr scadd 		; screen address.
002883  3               	ldy #0
002883  3               	lda (scraddr),y		; see what's already there.
002883  3               	eor z80_e
002883  3               	sta (scraddr),y 	; put back on screen.
002883  3               	rts
002883  3               
002883  3               plot1:
002883  3               	jsr scadd 		; screen address.
002883  3               	ldy #0
002883  3               	lda (scraddr),y 	; fetch byte there.
002883  3               	eor #255 		; toggle all bits.
002883  3               	sta (scraddr),y 	; new byte.
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Switch off shrapnel
002883  3               ;----------------------------------------------------
002883  3               
002883  3               kilshr:
002883  3               	lda #128
002883  3               	ldy #0
002883  3               	sta (z80_ix),y	; switch off shrapnel.
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Sine/cosine table
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shrsin:	.word 0,1024,391,946,724,724,946,391
002883  3               	.word 1024,0,946,65144,724,64811,391,64589
002883  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
002883  3               	.word 64512,0,64589,391,64811,724,65144,946
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create trail
002883  3               ;----------------------------------------------------
002883  3               
002883  3               trail:
002883  3               	ldy #1
002883  3               	lda (z80_ix),y 	; time remaining.
002883  3               	sec
002883  3               	sbc #1
002883  3               	sta (z80_ix),y
002883  3               	bne :+
002883  3               	jmp trailk		; time to switch it off.
002883  3               :
002883  3               	jsr qrand		; get a random number.
002883  3               	lsr a 			; x or y axis?
002883  3               	bcc :+
002883  3               	jmp trailv		; use y.
002883  3               :
002883  3               ; Trail horizontal
002883  3               
002883  3               	lsr a 			; which direction?
002883  3               	bcc :+
002883  3               	jmp traill		; go left.
002883  3               :
002883  3               ; Trail right
002883  3               
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1	 		; go right.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Trail left
002883  3               
002883  3               traill:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1 			; go left.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Trail vertical
002883  3               
002883  3               trailv:
002883  3               	lsr a		 	; which direction?
002883  3               	bcc :+
002883  3               	jmp trailu		; go up.
002883  3               :
002883  3               ; Trail down
002883  3               
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	clc
002883  3               	adc #1 			; go down.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Trail up
002883  3               
002883  3               trailu:
002883  3               	ldy #3
002883  3               	lda (z80_ix),y
002883  3               	sec
002883  3               	sbc #1 			; go up.
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ; Kill trail
002883  3               
002883  3               trailk:
002883  3               	lda #200		; set off-screen to kill vapour trail.
002883  3               	ldy #3
002883  3               	sta (z80_ix),y
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create laser beam
002883  3               ;----------------------------------------------------
002883  3               
002883  3               laser:
002883  3               	ldy #1
002883  3               	lda (z80_ix),y 		; direction.
002883  3               	ror a 			; left or right?
002883  3               	bcs :+
002883  3               	jmp laserl		; move left.
002883  3               :
002883  3               ; Laser right
002883  3               
002883  3               	lda #8			; distance to travel.
002883  3               	sta z80_b
002883  3               	jmp laserm		; move laser.
002883  3               
002883  3               ; Laser left
002883  3               
002883  3               laserl:
002883  3               	lda #248		; distance to travel.
002883  3               	sta z80_b
002883  3               laserm:
002883  3               	ldy #5
002883  3               	lda (z80_ix),y		; x position.
002883  3               	clc
002883  3               	adc z80_b		; add distance.
002883  3               	sta (z80_ix),y		; set new x coordinate.
002883  3               
002883  3               ; Test new block.
002883  3               
002883  3               	sta dispx 		; set x for block collision detection purposes.
002883  3               	ldy #3
002883  3               	lda (z80_ix),y 		; get y.
002883  3               	sta dispy		; set coordinate for collision test.
002883  3               	jsr tstbl 		; get block type there.
002883  3               	cmp #WALL		; is it solid?
002883  3               	bne :+
002883  3               	jmp trailk		; yes, it cannot pass.
002883  3               :
002883  3               .if pflag .or dflag
002883  3                       cmp #FODDER             ; is it fodder?
002883  3                       bne :+
002883  3                       jsr fdchk               ; remove fodder block.
002883  3                       jmp trailk              ; destroy laser.
002883  3               :
002883  3               .endif
002883  3                       rts                     ; no, ignore it.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Dots mask
002883  3               ;----------------------------------------------------
002883  3               
002883  3               dots:	.byte 128,64,32,16,8,4,2,1
002883  3               
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Plot, preserving de.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               plotde:
002883  3               	lda z80_d 		; put de on stack.
002883  3               	pha
002883  3               	lda z80_e
002883  3               	pha
002883  3               
002883  3               	jsr plot 		; plot pixel.
002883  3               
002883  3               	pla			; restore de from stack.
002883  3               	sta z80_e
002883  3               	pla
002883  3               	sta z80_d
002883  3               
002883  3               	rts
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Shoot a laser.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               shoot:
002883  3               	sta z80_c		; store direction in c register.
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	clc
002883  3               shoot1:
002883  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
002883  3               	sta z80_l 		; puty y coordinate in l.
002883  3               
002883  3               	ldy #9
002883  3               	lda (z80_ix),y 		; x coordinate in h.
002883  3               	sta z80_h
002883  3               
002883  3               	lda z80_i		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcs :+
002883  3               	jmp vapou2		; failed, restore ix.
002883  3               :
002883  3               	lda #0
002883  3               	ldy #0
002883  3               	sta (z80_ix),y 		; set up a laser.
002883  3               
002883  3               	lda z80_c
002883  3               	ldy #1
002883  3               	sta (z80_ix),y 		; set the direction.
002883  3               
002883  3               	lda z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; set y coordinate.
002883  3               
002883  3               	ror z80_c		; check direction we want.
002883  3               	bcc :+
002883  3               	jmp shootr		; shoot right.
002883  3               :
002883  3               	lda z80_h		; X position.
002883  3               shoot0:
002883  3               	and #248		; align on character boundary.
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; set x coordinate.
002883  3               	jmp vapou0 		; draw first image.
002883  3               shootr:
002883  3               	lda z80_h		; x position.
002883  3               	clc
002883  3               	adc #15			; look right.
002883  3               	jmp shoot0		; align and continue.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create a bit of vapour trail.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               vapour:
002883  3               	lda z80_i		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	clc
002883  3               vapou3:
002883  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
002883  3               	sta z80_l
002883  3               
002883  3               	ldy #9
002883  3               	lda (z80_ix),y 		; x coordinate.
002883  3               	adc #7
002883  3               	sta z80_h
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcc :+
002883  3               	jmp vapou1		; no, we can use it.
002883  3               :
002883  3               vapou2:
002883  3               	pla
002883  3               	sta z80_x
002883  3               	pla
002883  3               	sta z80_i
002883  3               	rts
002883  3               vapou1:
002883  3               	lda z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; set up y.
002883  3               
002883  3               	lda z80_h
002883  3               	ldy #5
002883  3               	sta (z80_ix),y 		; set up x coordinate.
002883  3               
002883  3               	jsr qrand		; get quick random number.
002883  3               	and #15			; random time.
002883  3               	clc
002883  3               	adc #15			; minimum time on screen.
002883  3               	ldy #1
002883  3               	sta (z80_ix),y		; set time on screen.
002883  3               
002883  3               	lda #1
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; define particle as vapour trail.
002883  3               vapou0:
002883  3               	jsr chkxy		; plot first position.
002883  3               	jmp vapou2
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create a user particle.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               ptusr:
002883  3               	sta z80_f		; store timer.
002883  3               
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	clc
002883  3               	adc #7			; mid-point of sprite.
002883  3               	sta z80_l
002883  3               
002883  3               	ldy #9
002883  3               	lda (z80_ix),y 		; x coordinate.
002883  3               	clc
002883  3               	adc #7			; mid-point of sprite.
002883  3               	sta z80_h
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcs ptusr1
002883  3               	rts 			; out of slots, can't generate anything.
002883  3               ptusr1:
002883  3               	lda z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y 		; set up y.
002883  3               
002883  3               	lda z80_h
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; set up x coordinate.
002883  3               
002883  3               	lda z80_f 		; restore timer.
002883  3               	ldy #1
002883  3               	sta (z80_ix),y		; set time on screen.
002883  3               
002883  3               	lda #7
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; define particle as user particle.
002883  3               
002883  3               	jmp chkxy		; plot first position.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create a vertical or horizontal star.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               star:
002883  3               	lda z80_i		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	jsr fpslot 		; find particle slot.
002883  3               	bcs star7		; found one we can use.
002883  3               star0:
002883  3               	pla 			; restore sprite pointer.
002883  3               	sta z80_x
002883  3               	pla
002883  3               	sta z80_i
002883  3               	rts 			; out of slots, can't generate anything.
002883  3               star7:
002883  3               	lda z80_c		; direction.
002883  3               	and #3 			; is it left?
002883  3               	bne :+
002883  3               	jmp star1 		; yes, it's left.
002883  3               :
002883  3               	cmp #1 			; is it right?
002883  3               	bne :+
002883  3               	jmp star2 		; yes, it's right.
002883  3               :
002883  3               	cmp #2 			; is it up?
002883  3               	bne :+
002883  3               	jmp star3 		; yes, it's up.
002883  3               :
002883  3               	ldy wntopx 		; get edge of screen.
002883  3               	iny			; down one pixel.
002883  3               	tya
002883  3               star8:
002883  3               	ldy #3
002883  3               	sta (z80_ix),y 		; set y coord.
002883  3               	jsr qrand 		; get quick random number.
002883  3               star9:
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; set x position.
002883  3               
002883  3               	lda z80_c		; direction.
002883  3               	and #3			; zero to three.
002883  3               	clc
002883  3               	adc #3			; 3 to 6 for starfield.
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; define particle as star.
002883  3               	jsr chkxy		; plot first position.
002883  3               	jmp star0
002883  3               star1:
002883  3               	jsr qrand		; get quick random number.
002883  3               	ldy #3
002883  3               	sta (z80_ix),y 		; set y coord.
002883  3               
002883  3               	lda wnrgtx 		; get edge of screen.
002883  3               	clc
002883  3               	adc #15			; add width of sprite minus 1.
002883  3               	jmp star9
002883  3               star2:
002883  3               	jsr qrand 		; get quick random number.
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; set y coord.
002883  3               
002883  3               	lda wnlftx		; get edge of screen.
002883  3               	jmp star9
002883  3               star3:
002883  3               	lda wnbotx 		; get edge of screen.
002883  3               	clc
002883  3               	adc #15 		; height of sprite minus one pixel.
002883  3               	jmp star8
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Find particle slot for lasers or vapour trail.
002883  3               ; can't use alternate accumulator.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               fpslot:
002883  3               	lda #<SHRAPN 		; shrapnel table.
002883  3               	sta z80_x
002883  3               	lda #>SHRAPN
002883  3               	sta z80_i
002883  3               
002883  3               	lda #NUMSHR		; number of pieces in table.
002883  3               	sta z80_b
002883  3               fpslt0:
002883  3               	ldy #0
002883  3               	lda (z80_ix),y		; get type.
002883  3               	asl a  			; is this slot in use?
002883  3               	bcc :+
002883  3               	rts			; no, we can use it.
002883  3               :
002883  3               	clc			; point to more shrapnel.
002883  3               	lda z80_x
002883  3               	adc #SHRSIZ
002883  3               	sta z80_x
002883  3               	bcc :+
002883  3               	inc z80_i
002883  3               :
002883  3               	dec z80_b		; repeat for all shrapnel.
002883  3               	bne fpslt0
002883  3               
002883  3               	clc
002883  3               	rts 			; out of slots, can't generate anything.
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Create an explosion at sprite position.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               explod:
002883  3               	sta z80_c 		; particles to create.
002883  3               
002883  3               	lda z80_i 		; store pointer to sprite.
002883  3               	pha
002883  3               	lda z80_x
002883  3               	pha
002883  3               
002883  3               	ldy #8
002883  3               	lda (z80_ix),y 		; y coordinate.
002883  3               	sta z80_l
002883  3               	ldy #9
002883  3               	lda (z80_ix),y		; x coordinate.
002883  3               	sta z80_h
002883  3               
002883  3               	lda #<SHRAPN		; shrapnel table.
002883  3               	sta z80_x
002883  3               	lda #>SHRAPN
002883  3               	sta z80_i
002883  3               
002883  3               	lda #NUMSHR		; number of pieces in table.
002883  3               	sta explcnt
002883  3               expld0:
002883  3               	ldy #0
002883  3               	lda (z80_ix),y		; get type.
002883  3               	asl a 			; is this slot in use?
002883  3               	bcs expld1		; no, we can use it.
002883  3               expld2:
002883  3               	clc
002883  3               	lda z80_x
002883  3               	adc #SHRSIZ
002883  3               	sta z80_x
002883  3               	bcc :+
002883  3               	inc z80_i
002883  3               :
002883  3               	dec explcnt		; repeat for all shrapnel.
002883  3               	bne expld0
002883  3               expld3:
002883  3               	pla			; restore sprite pointer.
002883  3               	sta z80_x
002883  3               	pla
002883  3               	sta z80_i
002883  3               	rts 			; out of slots, can't generate any more.
002883  3               
002883  3               expld1:
002883  3               	lda z80_c		; shrapnel counter.
002883  3               	and #15			; 0 to 15.
002883  3               	clc			; add to x.
002883  3               	adc z80_l
002883  3               	ldy #3
002883  3               	sta (z80_ix),y		; y coord.
002883  3               
002883  3               	lda seed3 		; crap random number.
002883  3               	and #15			; 0 to 15.
002883  3               	clc 			; add to y.
002883  3               	adc z80_h
002883  3               	ldy #5
002883  3               	sta (z80_ix),y		; x coord.
002883  3               
002883  3               	lda #2
002883  3               	ldy #0
002883  3               	sta (z80_ix),y		; switch it on.
002883  3               
002883  3               	jsr chkxy		; plot first position.
002883  3               	jsr qrand		; quick random angle.
002883  3               	and #60 		; keep within range.
002883  3               	ldy #1
002883  3               	sta (z80_ix),y		; angle.
002883  3               
002883  3               	dec z80_c		; one less piece of shrapnel to generate.
002883  3               	bne expld2 		; back to main explosion loop.
002883  3               	jmp expld3 		; restore sprite pointer and exit.
002883  3               
002883  3               ;explcnt:	.byte 0
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Quick random
002883  3               ;----------------------------------------------------
002883  3               
002883  3               qrand:
002883  3               	jsr random		; r register.
002883  3               	eor seed3		; combine with seed.
002883  3               	sta seed3 		; new seed.
002883  3               	rts
002883  3               
002883  3               ;seed3:	.byte 0
002883  3               
002883  3               ;----------------------------------------------------
002883  3               ; Display all shrapnel.
002883  3               ;----------------------------------------------------
002883  3               
002883  3               dshrp:
002883  3               	lda #<plotde		; display routine.
002883  3               	sta proshx+1
002883  3               	lda #>plotde
002883  3               	sta proshx+2
002883  3               	jsr proshr		; process shrapnel.
002883  3               
002883  3               	lda #<prosh1		; processing routine.
002883  3               	sta proshx+1
002883  3               	lda #>prosh1
002883  3               	sta proshx+2
002883  3               	rts
002883  3               
002883  3               ;------------------------------------------------------
002883  3               ; Particle engine.
002883  3               ;
002883  3               ; Init particle data for 55 particles in SHRAPN table.
002883  3               ; Every particle has 6 bytes.
002883  3               ;
002883  3               ; global:	-
002883  3               ; local:	x,y,hl
002883  3               ; calls:	-
002883  3               ;------------------------------------------------------
002883  3               
002883  3               inishr:
002883  3               	lda #<SHRAPN 		; table.
002883  3               	sta z80_l
002883  3               	lda #>SHRAPN
002883  3               	sta z80_h
002883  3               
002883  3               	ldy #0
002883  3               	ldx #NUMSHR		; shrapnel pieces to process.
002883  3               inish0:
002883  3               	lda #255 		; kill the shrapnel.
002883  3               	sta (z80_hl),y
002883  3               
002883  3               	clc 			; point there.
002883  3               	lda z80_l
002883  3               	adc #SHRSIZ		; distance to next.
002883  3               	sta z80_l
002883  3               	bcc :+
002883  3               	inc z80_h
002883  3               :
002883  3               	dex
002883  3               	bne inish0 		; round again.
002883  3               	rts
002883  3               
002883  3               ;------------------------------------------------------
002883  3               ; Check for collision between laser and sprite.
002883  3               ;------------------------------------------------------
002883  3               
002883  3               lcol:
002883  3               	lda #<SHRAPN		; shrapnel table.
002883  3               	sta z80_l
002883  3               	lda #>SHRAPN
002883  3               	sta z80_h
002883  3               
002883  3               	lda #NUMSHR		; number of pieces in table.
002883  3               	sta z80_b
002883  3               lcol0:
002883  3               	ldy #0
002883  3               	lda (z80_hl),y 		; get type.
002883  3               	beq lcol1		; yes, check collision.
002883  3               lcol3:
002883  3               	clc			; point to more shrapnel.
002883  3               	lda z80_l
002883  3               	adc #SHRSIZ
002883  3               	sta z80_l
002883  3               	bcc :+
002883  3               	inc z80_h
002883  3               :
002883  3               	dec z80_b		; repeat for all shrapnel.
002883  3               	bne lcol0
002883  3               	rts 			; no collision, carry not set.
002883  3               lcol1:
002883  3               	ldy #3
002883  3               	lda (z80_hl),y		; get y.
002883  3               	sec
002883  3               	ldy #8
002883  3               	sbc (z80_ix),y		; subtract sprite y.
002883  3               lcolh:
002883  3               	cmp #SPR_HGT 		; within range?
002883  3               	bcc :+
002883  3               	jmp lcol2		; no, missed.
002883  3               :
002883  3               	ldy #5
002883  3               	lda (z80_hl),y 		; get x.
002883  3               	sec
002883  3               	ldy #9
002883  3               	sbc (z80_ix),y 		; subtract sprite y.
002883  3               	cmp #16			; within range?
002883  3               	bcs :+
002883  3               	jmp lcol4 		; yes, collision occurred.
002883  3               :
002883  3               lcol2:
002883  3               	jmp lcol3
002883  3               lcol4:
002883  3               	sec
002883  3               	rts 			; return with carry set for collision.
002883  3               .endif
002883  3               
002883  3               ;------------------------------------------------------
002883  3               ; Main game engine code starts here.
002883  3               ; After initialisation, mloop is the main loop
002883  3               ;------------------------------------------------------
002883  3               
002883  3               game:
002883  3               
002883  3               ; Set up screen address table.
002883  3               
002883  3               setsat:
002883  3  A9 00        	lda #<ScreenAddr	; start of screen.
002885  3  85 rr        	sta scraddr
002887  3  A9 04        	lda #>ScreenAddr
002889  3  85 rr        	sta scraddr+1
00288B  3               
00288B  3  A2 00        	ldx #0
00288D  3  A0 00        	ldy #0			; vertical lines on screen.
00288F  3               setsa0:
00288F  3  A5 rr        	lda scraddr
002891  3  99 00 DC     	sta SCADTB_lb,y		; write low byte.
002894  3  A5 rr        	lda scraddr+1
002896  3  C0 4B        	cpy #ScrHeight*3		; vertical lines on screen.
002898  3  90 02        	bcc :+
00289A  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
00289C  3               :
00289C  3  99 00 DD     	sta SCADTB_hb,y		; write high byte.
00289F  3  E8           	inx
0028A0  3  E0 03        	cpx #3
0028A2  3  D0 05        	bne :+
0028A4  3  20 5E 34     	jsr nline		; next line down.
0028A7  3  A2 00        	ldx #0
0028A9  3               :
0028A9  3  C8           	iny			; next position in table.
0028AA  3  D0 E3        	bne setsa0
0028AC  3               
0028AC  3               ; Set up vertical sprite ptr per line
0028AC  3               
0028AC  3               setvsptr:
0028AC  3               
0028AC  3               
0028AC  3               ; Init hardware and graphics mode
0028AC  3               
0028AC  3  20 B9 47     	jsr init 		; Init hardware
0028AF  3               
0028AF  3               
0028AF  3               ; Init joystick
0028AF  3               
0028AF  3  20 86 48     	jsr joyinit		; Init joystick
0028B2  3               
0028B2  3               rpblc2:
0028B2  3               .if pflag
0028B2  3               	jsr inishr 		; initialise particle engine.
0028B2  3               .endif
0028B2  3               evintr:
0028B2  3  20 0C 3C     	jsr evnt12 		; call intro/menu event.
0028B5  3               
0028B5  3  A9 02        	lda #WALL 		; write default property.
0028B7  3  A2 00        	ldx #0
0028B9  3               clrmap:
0028B9  3  9D 00 D8     	sta MAP,x 		; block properties.
0028BC  3  9D 00 D9     	sta MAP+256,x
0028BF  3  9D 00 DA     	sta MAP+512,x
0028C2  3  9D 00 DB     	sta MAP+768,x
0028C5  3  E8           	inx			; next byte.
0028C6  3  D0 F1        	bne clrmap
0028C8  3               
0028C8  3               .if oflag
0028C8  3               	jsr iniob 		; initialise objects.
0028C8  3               .endif
0028C8  3  A9 00        	lda #0			; put zero in accumulator.
0028CA  3  85 rr        	sta gamwon		; reset game won flag.
0028CC  3               
0028CC  3  20 37 2A     	jsr inisc 		; init the score.
0028CF  3               mapst:
0028CF  3  AD A6 39     	lda stmap 		; start position on map.
0028D2  3  8D 89 39     	sta roomtb		; set up position in table, if there is one.
0028D5  3               
0028D5  3               inipbl:
0028D5  3               .if aflag
0028D5  3               	lda #<eop		; reset blockpointer
0028D5  3               	sta pbptr
0028D5  3               	lda #>eop
0028D5  3               	sta pbptr+1
0028D5  3               .endif
0028D5  3               
0028D5  3  20 71 35     	jsr initsc 		; set up first screen.
0028D8  3               
0028D8  3  A9 78        	lda #<ssprit 		; default to spare sprite in table.
0028DA  3  85 68        	sta z80_x
0028DC  3  A9 39        	lda #>ssprit
0028DE  3  85 69        	sta z80_i
0028E0  3               evini:
0028E0  3  20 27 3C     	jsr evnt13 		; initialisation.
0028E3  3               
0028E3  3               ; Two restarts.
0028E3  3               ; First restart - clear all sprites and initialise everything.
0028E3  3               
0028E3  3               rstrt:
0028E3  3  20 D7 29     	jsr rsevt 		; restart events.
0028E6  3  20 36 28     	jsr xspr 		; clear sprite table.
0028E9  3  20 DD 36     	jsr sprlst 		; fetch pointer to screen sprites.
0028EC  3  20 66 37     	jsr ispr 		; initialise sprite table.
0028EF  3               
0028EF  3  4C FE 28     	jmp rstrt0
0028F2  3               
0028F2  3               ; Second restart - clear all but player, and don't initialise him.
0028F2  3               
0028F2  3               rstrtn:
0028F2  3  20 D7 29     	jsr rsevt		; restart events.
0028F5  3  20 0A 37     	jsr nspr 		; clear all non-player sprites.
0028F8  3  20 DD 36     	jsr sprlst 		; fetch pointer to screen sprites.
0028FB  3  20 A3 37     	jsr kspr 		; initialise sprite table, no more players.
0028FE  3               
0028FE  3               ; Set up the player and/or enemy sprites.
0028FE  3               
0028FE  3               rstrt0:
0028FE  3  A9 00        	lda #0 			; zero in accumulator.
002900  3  85 rr        	sta nexlev 		; reset next level flag.
002902  3  85 rr        	sta restfl 		; reset restart flag.
002904  3  85 rr        	sta deadf 		; reset dead flag.
002906  3               
002906  3  20 41 2D     	jsr droom 		; show screen layout.
002909  3               
002909  3               rpblc0:
002909  3               .if pflag
002909  3               	jsr inishr 		; initialise particle engine.
002909  3               .endif
002909  3               .if aflag
002909  3               	jsr rbloc		; draw blocks for this screen
002909  3               .endif
002909  3               .if oflag
002909  3               	jsr shwob		; draw objects.
002909  3               .endif
002909  3               
002909  3  A9 AC        	lda #<sprtab 		; address of sprite table, even sprites.
00290B  3  85 68        	sta z80_x
00290D  3  A9 38        	lda #>sprtab
00290F  3  85 69        	sta z80_i
002911  3  20 FB 31     	jsr dspr 		; display sprites.
002914  3               
002914  3  A9 BD        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002916  3  85 68        	sta z80_x
002918  3  A9 38        	lda #>(sprtab+TABSIZ)
00291A  3  85 69        	sta z80_i
00291C  3  20 FB 31     	jsr dspr 		; display sprites.
00291F  3               
00291F  3               
00291F  3               mloop:
00291F  3  20 62 48     	jsr vsync 		; synchronise with display.
002922  3  A9 AC        	lda #<sprtab 		; address of sprite table, even sprites.
002924  3  85 68        	sta z80_x
002926  3  A9 38        	lda #>sprtab
002928  3  85 69        	sta z80_i
00292A  3  20 FB 31     	jsr dspr 		; display even sprites.
00292D  3               
00292D  3               ;	jsr plsnd 		; play sounds.
00292D  3               
00292D  3  20 82 28     	jsr proshr
002930  3  A9 BD        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002932  3  85 68        	sta z80_x
002934  3  A9 38        	lda #>(sprtab+TABSIZ)
002936  3  85 69        	sta z80_i
002938  3  20 FB 31     	jsr dspr 		; display odd sprites.
00293B  3               
00293B  3  A9 78        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00293D  3  85 68        	sta z80_x
00293F  3  A9 39        	lda #>(ssprit)
002941  3  85 69        	sta z80_i
002943  3               evlp1:
002943  3  20 05 3C     	jsr evnt10 		; called once per main loop.
002946  3               
002946  3  20 79 31     	jsr pspr 		; process sprites.
002949  3               
002949  3               ; Main loop events.
002949  3               
002949  3  A9 78        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00294B  3  85 68        	sta z80_x
00294D  3  A9 39        	lda #>ssprit
00294F  3  85 69        	sta z80_i
002951  3               evlp2:
002951  3  20 0B 3C     	jsr evnt11 		; called once per main loop.
002954  3               bsortx:
002954  3  20 EF 30     	jsr bsort 		; sort sprites.
002957  3               
002957  3  A5 rr        	lda nexlev		; finished level flag.
002959  3  F0 03        	beq :+
00295B  3  4C 83 29     	jmp newlev		; is set, go to next level.
00295E  3               :
00295E  3  A5 rr        	lda gamwon		; finished game flag.
002960  3  F0 03        	beq :+
002962  3  4C 92 29     	jmp evwon		; is set, finish the game.
002965  3               :
002965  3  A5 rr        	lda restfl 		; finished level flag.
002967  3  C9 01        	cmp #1			; has it been set?
002969  3  D0 03        	bne :+
00296B  3  4C E3 28     	jmp rstrt		; yes, go to next level.
00296E  3               :
00296E  3  C9 02        	cmp #2			; has it been set?
002970  3  D0 03        	bne :+
002972  3  4C F2 28     	jmp rstrtn		; yes, go to next level.
002975  3               :
002975  3  A5 rr        	lda deadf 		; dead flag.
002977  3  F0 03        	beq :+
002979  3  4C 98 29     	jmp pdead		; yes, player dead.
00297C  3               :
00297C  3               ; back to start of main loop.
00297C  3               
00297C  3  E6 rr        	inc frmno
00297E  3  E6 rr        	inc clock
002980  3  4C 1F 29     	jmp mloop		; switched to a jmp mloop during test mode.
002983  3               
002983  3               ;----------------------------------------------------------
002983  3               ; Read blocks from list and update screen accordingly.
002983  3               ;----------------------------------------------------------
002983  3               
002983  3               .if aflag
002983  3               rbloc:
002983  3               	lda #<eop		; reset temp blockpointer
002983  3               	sta pbbuf
002983  3               	lda #>eop
002983  3               	sta pbbuf+1
002983  3               
002983  3               rbloc2:
002983  3               	lda pbbuf			; check for last block
002983  3               	cmp pbptr
002983  3               	bne rbloc1
002983  3               	lda pbbuf+1
002983  3               	cmp pbptr+1
002983  3               	bne rbloc1
002983  3               	rts
002983  3               rbloc1:
002983  3               	ldy #0
002983  3               	lda (pbbuf),y		; check if block for this scno
002983  3               	cmp scno
002983  3               	bne rbloc0		; if not, skip
002983  3               	iny
002983  3               	lda (pbbuf),y		; get y
002983  3               	sta dispy
002983  3               	iny
002983  3               	lda (pbbuf),y		; get x
002983  3               	sta dispx
002983  3               	iny
002983  3               	lda (pbbuf),y		; get blocknr
002983  3               	jsr pattr2		; draw block
002983  3               rbloc0:
002983  3               	clc			; point to next block
002983  3               	lda pbbuf
002983  3               	adc #4
002983  3               	sta pbbuf
002983  3               	bcc rbloc2
002983  3               	inc pbbuf+1
002983  3               	jmp rbloc2
002983  3               .endif
002983  3               
002983  3               ;----------------------------------------------------------
002983  3               ; New level
002983  3               ;----------------------------------------------------------
002983  3               
002983  3               newlev:
002983  3  A5 rr        	lda scno 			; current screen.
002985  3  18           	clc
002986  3  69 01        	adc #1				; next screen.
002988  3  CD 7D 44     	cmp numsc			; total number of screens.
00298B  3  B0 05        	bcs evwon			; yes, game finished.
00298D  3  85 rr        	sta scno			; set new level number.
00298F  3  4C E3 28     	jmp rstrt			; restart, clearing all aliens.
002992  3               
002992  3               evwon:
002992  3  20 57 3C     	jsr evnt18		 	; game completed.
002995  3  4C AC 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002998  3               
002998  3               ;----------------------------------------------------------
002998  3               ; Player dead.
002998  3               ;----------------------------------------------------------
002998  3               
002998  3               pdead:
002998  3  A9 00        	lda #0				; zeroise accumulator.
00299A  3  85 rr        	sta deadf			; reset dead flag.
00299C  3               evdie:
00299C  3  20 2D 3C     	jsr evnt16 			; death subroutine.
00299F  3  A5 rr        	lda numlif			; number of lives.
0029A1  3  F0 03        	beq :+
0029A3  3  4C E3 28     	jmp rstrt 			; restart game.
0029A6  3               :
0029A6  3               evfail:
0029A6  3  20 2E 3C     	jsr evnt17 			; failure event.
0029A9  3  4C 83 28     	jmp game			; restart game
0029AC  3               
0029AC  3               ;----------------------------------------------------------
0029AC  3               ; Tidy things up
0029AC  3               ;----------------------------------------------------------
0029AC  3               
0029AC  3               tidyup:
0029AC  3  A0 00        	ldy #0				; digits to check.
0029AE  3               tidyu2:
0029AE  3  B9 20 2B     	lda score,y 			; get score digit.
0029B1  3  CD 26 2B     	cmp hiscor 			; are we larger than high score digit?
0029B4  3  90 07        	bcc tidyu0			; high score is bigger.
0029B6  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0029B8  3  C8           	iny				; next digit of high score.
0029B9  3  C0 06        	cpy #6
0029BB  3  D0 F1        	bne tidyu2			; repeat for all digits
0029BD  3               tidyu0:
0029BD  3  A9 20        	lda #<score			; return pointing to score.
0029BF  3  85 62        	sta z80_c
0029C1  3  A9 2B        	lda #>score
0029C3  3  85 63        	sta z80_b
0029C5  3  60           	rts
0029C6  3               tidyu1:
0029C6  3  A0 05        	ldy #5
0029C8  3               tidyu3:
0029C8  3  B9 20 2B     	lda score,y			; score.
0029CB  3  99 26 2B     	sta hiscor,y			; high score.
0029CE  3  88           	dey
0029CF  3  10 F7        	bpl tidyu3 			; copy score to high score.
0029D1  3               evnewh:
0029D1  3  20 58 3C     	jsr evnt19			; new high score event.
0029D4  3  4C BD 29     	jmp tidyu0			; tidy up.
0029D7  3               
0029D7  3               ;--------------------------------------------------
0029D7  3               ; Restart event.
0029D7  3               ;--------------------------------------------------
0029D7  3               
0029D7  3               rsevt:
0029D7  3  A9 78        	lda #<ssprit 			; default to spare element in table.
0029D9  3  85 68        	sta z80_x
0029DB  3  A9 39        	lda #>ssprit
0029DD  3  85 69        	sta z80_i
0029DF  3               evrs:
0029DF  3  4C 28 3C     	jmp evnt14	 		; call restart event.
0029E2  3               
0029E2  3               ;------------------------------------------------------------------
0029E2  3               ; Copy number passed in a to string position bc, right-justified.
0029E2  3               ;
0029E2  3               ; Input:
0029E2  3               ;  A  = number
0029E2  3               ;  BC = string address
0029E2  3               ;
0029E2  3               ; Output:
0029E2  3               ;  BC = string with number
0029E2  3               ;-----------------------------------------------------------------
0029E2  3               
0029E2  3               num2ch:
0029E2  3  85 65        	sta z80_d		; Save number
0029E4  3               
0029E4  3  A9 00        	lda #0
0029E6  3  85 rr        	sta flag
0029E8  3               numdg3:
0029E8  3  A2 64        	ldx #100		; hundreds column.
0029EA  3  86 64        	stx z80_e
0029EC  3  20 FC 29     	jsr numdg		; show digit.
0029EF  3               numdg2:
0029EF  3  A2 0A        	ldx #10			; tens column.
0029F1  3  86 64        	stx z80_e
0029F3  3  20 FC 29     	jsr numdg		; show digit.
0029F6  3               
0029F6  3  E6 rr        	inc flag
0029F8  3  A2 01        	ldx #1			; units column.
0029FA  3  86 64        	stx z80_e
0029FC  3               numdg:
0029FC  3  A9 30        	lda #48			; clear digit.
0029FE  3  85 61        	sta z80_a
002A00  3               numdg1:
002A00  3  A5 65        	lda z80_d
002A02  3  C5 64        	cmp z80_e
002A04  3  90 0E        	bcc numdg0		; nothing to show.
002A06  3  38           	sec
002A07  3  A5 65        	lda z80_d
002A09  3  E5 64        	sbc z80_e		; subtract from column.
002A0B  3  85 65        	sta z80_d
002A0D  3  E6 61        	inc z80_a		; increment digit.
002A0F  3  E6 rr        	inc flag
002A11  3  4C 00 2A     	jmp numdg1		; repeat until column is zero.
002A14  3               numdg0:
002A14  3  A0 00        	ldy #0
002A16  3  A5 61        	lda z80_a
002A18  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002A1A  3  A5 rr        	lda flag
002A1C  3  F0 06        	beq :+
002A1E  3  E6 62        	inc z80_c		; next buffer position.
002A20  3  D0 02        	bne :+
002A22  3  E6 63        	inc z80_b
002A24  3               :
002A24  3  60           	rts
002A25  3               num2dd:
002A25  3  85 65        	sta z80_d		; Save number
002A27  3               
002A27  3  A9 01        	lda #1
002A29  3  85 rr        	sta flag
002A2B  3               
002A2B  3  4C EF 29     	jmp numdg2
002A2E  3               num2td:
002A2E  3  85 65        	sta z80_d		; Save number
002A30  3               
002A30  3  A9 01        	lda #1
002A32  3  85 rr        	sta flag
002A34  3  4C E8 29     	jmp numdg3
002A37  3               
002A37  3               ;flag:	.byte 0
002A37  3               
002A37  3               ;---------------------------------------------------------
002A37  3               ; Reset score to "000000"
002A37  3               ;---------------------------------------------------------
002A37  3               
002A37  3               inisc:
002A37  3  A9 30        	lda #'0'
002A39  3  A2 05        	ldx #5			; digits to initialise.
002A3B  3               inisc0:
002A3B  3  9D 20 2B     	sta score,x 		; write zero digit.
002A3E  3  CA           	dex			; next column.
002A3F  3  10 FA        	bpl inisc0		; repeat for all digits.
002A41  3               
002A41  3  60           	rts
002A42  3               
002A42  3               ;-----------------------------------------------------
002A42  3               ; Multiply h by d and return in hl.
002A42  3               ;
002A42  3               ; Input:
002A42  3               ;  H = first number
002A42  3               ;  D = second number
002A42  3               ;
002A42  3               ; Output:
002A42  3               ;  HL = result H x D
002A42  3               ;-----------------------------------------------------
002A42  3               
002A42  3               imul:
002A42  3  A5 65        	lda z80_d		; HL = H * D
002A44  3  85 64        	sta z80_e
002A46  3  A5 67        	lda z80_h
002A48  3  85 62        	sta z80_c		; make c first multiplier.
002A4A  3               imul0:
002A4A  3  A9 00        	lda #0			; zeroise total.
002A4C  3  85 66        	sta z80_l
002A4E  3  85 67        	sta z80_h
002A50  3               
002A50  3  A5 67        	lda z80_h
002A52  3  85 65        	sta z80_d		; zeroise high byte.
002A54  3               
002A54  3  A9 08        	lda #8			; repeat 8 times.
002A56  3  85 63        	sta z80_b
002A58  3               imul1:
002A58  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A5A  3  90 0E        	bcc imul2		; wasn't set.
002A5C  3  18           	clc			; bit was set, so add de.
002A5D  3  A5 66        	lda z80_l
002A5F  3  65 64        	adc z80_e
002A61  3  85 66        	sta z80_l
002A63  3  A5 67        	lda z80_h
002A65  3  65 65        	adc z80_d
002A67  3  85 67        	sta z80_h
002A69  3  18           	clc 			; reset carry.
002A6A  3               imul2:
002A6A  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A6C  3  26 65        	rol z80_d
002A6E  3  C6 63        	dec z80_b
002A70  3  D0 E6        	bne imul1		; repeat 8 times.
002A72  3               
002A72  3  60           	rts
002A73  3               
002A73  3               ;-----------------------------------------------
002A73  3               ; Divide d by e and return in d, remainder in a.
002A73  3               ;
002A73  3               ; Input:
002A73  3               ;  D = first number
002A73  3               ;  E = second number
002A73  3               ;
002A73  3               ; Output:
002A73  3               ;  D = result D/E
002A73  3               ;  A = remainder
002A73  3               ;-----------------------------------------------
002A73  3               
002A73  3               idiv:
002A73  3  A9 00        	lda #0
002A75  3  A0 08        	ldy #8		 	; bits to shift.
002A77  3  06 65        	asl z80_d
002A79  3               idiv0:
002A79  3  2A           	rol a 			; multiply d by 2.
002A7A  3  C5 64        	cmp z80_e 		; test if e is smaller.
002A7C  3  90 02        	bcc idiv1		; e is greater, no division this time.
002A7E  3  E5 64        	sbc z80_e		; subtract it.
002A80  3               idiv1:
002A80  3  26 65        	rol z80_d		; rotate into d.
002A82  3  88           	dey
002A83  3  D0 F4        	bne idiv0		; repeat
002A85  3  60           	rts
002A86  3               
002A86  3               ;---------------------------------------------------
002A86  3               ; Play AY sound effect
002A86  3               ;---------------------------------------------------
002A86  3               
002A86  3               plsnd:
002A86  3  60           	rts
002A87  3               
002A87  3               ;---------------------------------------------------
002A87  3               ; Objects handling.
002A87  3               ; 32 bytes for image
002A87  3               ; 3 for room, y and x
002A87  3               ; 3 for starting room, y and x.
002A87  3               ; 254 = disabled.
002A87  3               ; 255 = object in player"s pockets.
002A87  3               ;---------------------------------------------------
002A87  3               
002A87  3               ;---------------------------------------------------
002A87  3               ; Show items present.
002A87  3               ;---------------------------------------------------
002A87  3               
002A87  3               .if oflag
002A87  3               shwob:
002A87  3               	lda #<objdta 			; objects table.
002A87  3               	sta z80_l
002A87  3               	lda #>objdta
002A87  3               	sta z80_h
002A87  3               
002A87  3               	lda numob 			; number of objects in the game.
002A87  3               	sta sprcnt
002A87  3               shwob0:
002A87  3               	ldy #32 			; distance to room number.
002A87  3               	lda (z80_hl),y 			; same as an item?
002A87  3               	cmp scno 			; current location.
002A87  3               	bne :+
002A87  3               	jsr dobj 			; yes, display object.
002A87  3               :
002A87  3               	clc
002A87  3               	lda z80_l
002A87  3               	adc #38 			; distance to next item.
002A87  3               	sta z80_l
002A87  3               	lda z80_h
002A87  3               	adc #0
002A87  3               	sta z80_h	 		; point to it.
002A87  3               	dec sprcnt
002A87  3               	bne shwob0 			; repeat for others.
002A87  3               	rts
002A87  3               
002A87  3               ;---------------------------------------------------
002A87  3               ; Display object.
002A87  3               ; hl must point to object's start address.
002A87  3               ;
002A87  3               ; Input:
002A87  3               ;  HL = object address
002A87  3               ;---------------------------------------------------
002A87  3               
002A87  3               dobj:
002A87  3               	ldy #33
002A87  3               	lda (z80_hl),y 			; point to y.
002A87  3               	sta dispy
002A87  3               	iny
002A87  3               	lda (z80_hl),y 			; point to x.
002A87  3               	sta dispx
002A87  3               dobj1:
002A87  3               	jmp sprite 			; draw this sprite.
002A87  3               
002A87  3               ;--------------------------------------
002A87  3               ; Remove an object.
002A87  3               ;
002A87  3               ; Input:
002A87  3               ;  A = object number
002A87  3               ;--------------------------------------
002A87  3               
002A87  3               remob:
002A87  3               	cmp numob			; number of objects in game.
002A87  3               	bcc :+				; are we checking past the end?
002A87  3               	rts				; yes, can't get non-existent item.
002A87  3               :
002A87  3               	pha				; remember object.
002A87  3               	jsr getob			; pick it up if we haven't already got it.
002A87  3               	pla				; retrieve object number.
002A87  3               	jsr gotob			; get its address.
002A87  3               	lda #254
002A87  3               	ldy #32
002A87  3               	sta (z80_hl),y			; remove it.
002A87  3               	rts
002A87  3               
002A87  3               ;---------------------------------------------------
002A87  3               ; Pick up object number held in the accumulator.
002A87  3               ;
002A87  3               ; Input:
002A87  3               ;  A = object number
002A87  3               ;---------------------------------------------------
002A87  3               
002A87  3               getob:
002A87  3               	cmp numob 		; number of objects in game.
002A87  3               	bcc :+			; are we checking past the end?
002A87  3               	rts			; yes, can't get non-existent item.
002A87  3               :
002A87  3               	jsr gotob 		; check if we already have it.
002A87  3               	cmp #255
002A87  3               	bne :+
002A87  3               	rts			; we already do.
002A87  3               :
002A87  3               	ldy #32
002A87  3               	lda (z80_hl),y		; is it on this screen?
002A87  3               	cmp scno 		; current screen.
002A87  3               	bne getob0		; not on screen, so nothing to delete.
002A87  3               
002A87  3               	lda #255
002A87  3               	sta (z80_hl),y		; pick it up.
002A87  3               	iny 			; point to y coord.
002A87  3               getob1:
002A87  3               	ldy #33
002A87  3               	lda (z80_hl),y		; y coord.
002A87  3               	sta dispy
002A87  3               	ldy #34
002A87  3               	lda (z80_hl),y 		; x coord.
002A87  3               	sta dispx
002A87  3               	jmp dobj1 		; delete object sprite.
002A87  3               getob0:
002A87  3               	lda #255
002A87  3               	sta (z80_hl),y 		; pick it up.
002A87  3               	rts
002A87  3               .endif
002A87  3               
002A87  3               ;-----------------------------------------------------------------
002A87  3               ; Got object check.
002A87  3               ; Call with object in accumulator, returns zero set if in pockets.
002A87  3               ;
002A87  3               ; Input:
002A87  3               ;  A = object number
002A87  3               ;-----------------------------------------------------------------
002A87  3               .if oflag .or mflag
002A87  3               gotob:
002A87  3               	cmp numob 		; number of objects in game.
002A87  3               	bcc :+ 			; are we checking past the end?
002A87  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002A87  3               :
002A87  3               	jsr findob		; find the object.
002A87  3               gotob1:
002A87  3               	rts
002A87  3               
002A87  3               gotob0:
002A87  3               	lda #254 		; missing.
002A87  3               	jmp gotob1
002A87  3               
002A87  3               findob:
002A87  3               	pha			; save object number
002A87  3               	lda #<objdta 		; objects.
002A87  3               	sta z80_l
002A87  3               	lda #>objdta
002A87  3               	sta z80_h
002A87  3               	pla			; retreive object number
002A87  3               	beq fndob1 		; is it zero? yes, skip loop.
002A87  3               	tax 			; loop counter
002A87  3               fndob2:
002A87  3               	clc
002A87  3               	lda z80_l
002A87  3               	adc #38 		; size of each object.
002A87  3               	sta z80_l
002A87  3               	bcc :+
002A87  3               	inc z80_h
002A87  3               :
002A87  3               	dex 			; repeat until we find address.
002A87  3               	bne fndob2
002A87  3               fndob1:
002A87  3               	ldy #32			; distance to room it's in.
002A87  3               	lda (z80_hl),y		; fetch status.
002A87  3               	rts
002A87  3               .endif
002A87  3               
002A87  3               ;---------------------------------------------
002A87  3               ; Drop object number at (dispx, dispy).
002A87  3               ;
002A87  3               ; Input:
002A87  3               ;  A = object number
002A87  3               ;---------------------------------------------
002A87  3               
002A87  3               .if oflag
002A87  3               drpob:
002A87  3               	cmp numob 		; are we checking past the end?
002A87  3               	bcc :+
002A87  3               	rts			; yes, can't drop non-existent item.
002A87  3               :
002A87  3               	jsr gotob		; make sure object is in inventory.
002A87  3               	cmp scno		; already on this screen?
002A87  3               	bne :+
002A87  3               	rts			; yes, nothing to do.
002A87  3               :
002A87  3               	ldy #32
002A87  3               	lda scno
002A87  3               	sta (z80_hl),y		; bring onto screen.
002A87  3               	lda dispy		; sprite y coordinate.
002A87  3               	iny
002A87  3               	sta (z80_hl),y		; point to object y.
002A87  3               	lda dispx 		; sprite x coordinate.
002A87  3               	iny
002A87  3               	sta (z80_hl),y 		; point to object x
002A87  3               	jmp dobj		; draw the object sprite.
002A87  3               
002A87  3               ;-----------------------------------------------
002A87  3               ; Seek objects at sprite position.
002A87  3               ;
002A87  3               ; Output:
002A87  3               ;  A = object number, if not found A=255
002A87  3               ;-----------------------------------------------
002A87  3               
002A87  3               skobj:
002A87  3               	lda #<objdta 		; pointer to objects.
002A87  3               	sta z80_l
002A87  3               	lda #>objdta
002A87  3               	sta z80_h
002A87  3               
002A87  3               	lda numob 		; number of objects in game.
002A87  3               	sta z80_b 		; set up the loop counter.
002A87  3               skobj0:
002A87  3               	lda scno		; current room number.
002A87  3               	ldy #32
002A87  3               	cmp (z80_hl),y		; is object in here?
002A87  3               	bne :+
002A87  3               	jsr skobj1		; yes, check coordinates.
002A87  3               :
002A87  3               	clc			; point to next object in table.
002A87  3               	lda z80_l
002A87  3               	adc #38			; size of each object.
002A87  3               	sta z80_l
002A87  3               	bcc :+
002A87  3               	inc z80_h
002A87  3               :
002A87  3               	dec z80_b
002A87  3               	bne skobj0		; repeat for all objects.
002A87  3               
002A87  3               	lda #255		; end of list and nothing found, return 255.
002A87  3               	rts
002A87  3               
002A87  3               skobj1:
002A87  3               	ldy #33			; point to y coordinate.
002A87  3               	lda (z80_hl),y		; point to y coordinate.
002A87  3               	sec
002A87  3               	ldy #8
002A87  3               	sbc (z80_ix),y 		; subtract sprite y.
002A87  3               	clc
002A87  3               	adc #15			; add sprite height minus one.
002A87  3               	cmp #31			; within range?
002A87  3               	bcs skobj2		; no, ignore object.
002A87  3               
002A87  3               	ldy #34			; point to x coordinate now.
002A87  3               	lda (z80_hl),y 		; get coordinate.
002A87  3               	sec
002A87  3               	ldy #9
002A87  3               	sbc (z80_ix),y 		; subtract the sprite x.
002A87  3               	clc			; add sprite width minus one.
002A87  3               	adc #15
002A87  3               	cmp #31			; within range?
002A87  3               	bcs skobj2		; no, ignore object.
002A87  3               
002A87  3               	pla			; remove return address from stack.
002A87  3               	pla
002A87  3               
002A87  3               	lda numob 		; objects in game.
002A87  3               	sec
002A87  3               	sbc z80_b		; subtract loop counter.
002A87  3               skobj2:
002A87  3               	rts			; accumulator now points to object.
002A87  3               .endif
002A87  3               
002A87  3               ;---------------------------------------------------------------------
002A87  3               ; Spawn a new sprite.
002A87  3               ;---------------------------------------------------------------------
002A87  3               
002A87  3               .if gflag
002A87  3                 offset = 0
002A87  3               .else
002A87  3                 offset = 20
002A87  3               .endif
002A87  3               
002A87  3               spawn:
002A87  3  A9 AC        	lda #<sprtab		; sprite table.
002A89  3  85 66        	sta z80_l
002A8B  3  A9 38        	lda #>sprtab
002A8D  3  85 67        	sta z80_h
002A8F  3               numsp1:
002A8F  3  A9 0C        	lda #NUMSPR		; number of sprites.
002A91  3  85 rr        	sta spcnt
002A93  3               spaw0:
002A93  3  A0 00        	ldy #0
002A95  3  B1 66        	lda (z80_hl),y		; get sprite type.
002A97  3  C9 FF        	cmp #255		; is it an unused slot?
002A99  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002A9B  3               
002A9B  3  18           	clc 			; point to next sprite in table.
002A9C  3  A5 66        	lda z80_l
002A9E  3  69 11        	adc #TABSIZ		; size of each entry.
002AA0  3  85 66        	sta z80_l
002AA2  3  90 02        	bcc :+
002AA4  3  E6 67        	inc z80_h
002AA6  3               :
002AA6  3  C6 rr        	dec spcnt		; one less iteration.
002AA8  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002AAA  3               
002AAA  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002AAA  3               
002AAA  3               spaw1:
002AAA  3  A5 69        	lda z80_i		; address of original sprite.
002AAC  3  48           	pha
002AAD  3  A5 68        	lda z80_x
002AAF  3  48           	pha
002AB0  3               
002AB0  3  A5 66        	lda z80_l		; store spawned sprite address.
002AB2  3  85 rr        	sta spptr
002AB4  3  A5 67        	lda z80_h
002AB6  3  85 rr        	sta spptr+1
002AB8  3               
002AB8  3  A5 62        	lda z80_c
002ABA  3  A0 00        	ldy #0
002ABC  3  91 66        	sta (z80_hl),y 		; set the type.
002ABE  3  A0 05        	ldy #5
002AC0  3  91 66        	sta (z80_hl),y		; copy
002AC2  3               
002AC2  3  A5 63        	lda z80_b
002AC4  3  A0 01        	ldy #1
002AC6  3  91 66        	sta (z80_hl),y		; set the image.
002AC8  3  A0 06        	ldy #6
002ACA  3  91 66        	sta (z80_hl),y		; copy
002ACC  3               
002ACC  3  A9 00        	lda #0 			; frame zero.
002ACE  3  A0 02        	ldy #2
002AD0  3  91 66        	sta (z80_hl),y		; set frame.
002AD2  3  A0 07        	ldy #7
002AD4  3  91 66        	sta (z80_hl),y		; copy
002AD6  3               
002AD6  3  A0 08        	ldy #8
002AD8  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002ADA  3  A0 03        	ldy #3
002ADC  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002ADE  3  A0 08        	ldy #8
002AE0  3  91 66        	sta (z80_hl),y		; copy
002AE2  3               
002AE2  3  A0 09        	ldy #9
002AE4  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002AE6  3  A0 04        	ldy #4
002AE8  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002AEA  3  A0 09        	ldy #9
002AEC  3  91 66        	sta (z80_hl),y		; copy
002AEE  3               
002AEE  3  A0 0A        	ldy #10			; direction of original.
002AF0  3  B1 68        	lda (z80_ix),y
002AF2  3  91 66        	sta (z80_hl),y		; direction
002AF4  3               
002AF4  3  A9 00        	lda #0
002AF6  3  A0 0B        	ldy #11
002AF8  3  91 66        	sta (z80_hl),y		; reset parameter.
002AFA  3  C8           	iny
002AFB  3  91 66        	sta (z80_hl),y		; reset parameter.
002AFD  3  C8           	iny
002AFE  3  91 66        	sta (z80_hl),y		; reset parameter.
002B00  3  C8           	iny
002B01  3  91 66        	sta (z80_hl),y		; reset parameter.
002B03  3               rtssp:
002B03  3  A5 rr        	lda spptr		; address of new sprite.
002B05  3  85 68        	sta z80_x
002B07  3  A5 rr        	lda spptr+1
002B09  3  85 69        	sta z80_i
002B0B  3               evis1:
002B0B  3  20 E2 3B     	jsr evnt09 		; call sprite initialisation event.
002B0E  3               
002B0E  3  A5 rr        	lda spptr 		; address of new sprite.
002B10  3  85 68        	sta z80_x
002B12  3  A5 rr        	lda spptr+1
002B14  3  85 69        	sta z80_i
002B16  3  20 38 33     	jsr sspria 		; display the new sprite.
002B19  3               
002B19  3  68           	pla			; address of original sprite.
002B1A  3  85 68        	sta z80_x
002B1C  3  68           	pla
002B1D  3  85 69        	sta z80_i
002B1F  3               
002B1F  3  60           	rts
002B20  3               
002B20  3               ;spcnt:	.byte 0
002B20  3               ;spptr:	.word 0			; spawned sprite pointer.
002B20  3               ;seed:	.byte 0			; seed for random numbers.
002B20  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B24  3  30 30        
002B26  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B2A  3  30 30        
002B2C  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B30  3  30 30        
002B32  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B34  3               
002B34  3               ;----------------------------------------------------
002B34  3               ; Check y-pos
002B34  3               ;----------------------------------------------------
002B34  3               
002B34  3               checkx:
002B34  3  A5 rr        	lda dispy		; y position.
002B36  3  C9 19        	cmp #ScrHeight			; off screen?
002B38  3  B0 01        	bcs :+
002B3A  3  60           	rts			; no, it's okay.
002B3B  3               :
002B3B  3  68           	pla			; remove return address from stack.
002B3C  3  85 66        	sta z80_l
002B3E  3  68           	pla
002B3F  3  85 67        	sta z80_h
002B41  3  60           	rts
002B42  3               
002B42  3               ;-----------------------------------------------
002B42  3               ; Displays the current high score.
002B42  3               ;-----------------------------------------------
002B42  3               
002B42  3               dhisc:
002B42  3  A9 26        	lda #<hiscor 		; high score text.
002B44  3  8D 79 2B     	sta dscor3+1
002B47  3  8D 9D 2B     	sta bscor3+1
002B4A  3  A9 2B        	lda #>hiscor
002B4C  3  8D 7A 2B     	sta dscor3+2
002B4F  3  8D 9E 2B     	sta bscor3+2
002B52  3  4C 65 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B55  3               
002B55  3               ;------------------------------------------------------
002B55  3               ; Displays the current score.
002B55  3               ;------------------------------------------------------
002B55  3               
002B55  3               dscor:
002B55  3  A9 20        	lda #<score		; score text.
002B57  3  8D 79 2B     	sta dscor3+1
002B5A  3  8D 9D 2B     	sta bscor3+1
002B5D  3  A9 2B        	lda #>score
002B5F  3  8D 7A 2B     	sta dscor3+2
002B62  3  8D 9E 2B     	sta bscor3+2
002B65  3               dscor1:
002B65  3  8C 99 2B     	sty tmpscr
002B68  3  20 CD 30     	jsr preprt		; set up font and print position.
002B6B  3  20 34 2B     	jsr checkx		; make sure we're in a printable range.
002B6E  3               
002B6E  3               ;	lda #6			; digits to display.
002B6E  3               ;	sta z80_b
002B6E  3  A5 rr        	lda prtmod		; get print mode.
002B70  3  F0 03        	beq :+			; standard size text?
002B72  3  4C 9A 2B     	jmp bscor0		; no, show double-height.
002B75  3               :
002B75  3               dscor0:
002B75  3               ;	ldy #0
002B75  3               ;	lda (z80_hl),y 		; fetch character.
002B75  3  AC 99 2B     	ldy tmpscr
002B78  3               dscor3:
002B78  3  B9 20 2B     	lda score,y
002B7B  3  20 B2 2C     	jsr pchar 		; display character.
002B7E  3  E6 rr        	inc dispx		; move along x coordinate
002B80  3               
002B80  3               ;	inc z80_l		; next score column.
002B80  3               ;	bne :+
002B80  3               ;	inc z80_h
002B80  3               ;:
002B80  3  EE 99 2B     	inc tmpscr
002B83  3  C6 63        	dec z80_b
002B85  3  D0 EE        	bne dscor0 		; repeat for all digits.
002B87  3               dscor2:
002B87  3  AD 9B 39     	lda bcolour
002B8A  3  20 B2 2C     	jsr pchar
002B8D  3  20 BA 30     	jsr nexpos
002B90  3               
002B90  3  A5 rr        	lda dispx 		; set up display coordinates.
002B92  3  85 rr        	sta charx
002B94  3  A5 rr        	lda dispy
002B96  3  85 rr        	sta chary
002B98  3  60           	rts
002B99  3               
002B99  3  00           tmpscr:	.byte 0
002B9A  3               ;------------------------------------------------------
002B9A  3               ; Displays the current score in double-height characters.
002B9A  3               ;
002B9A  3               ; Input:
002B9A  3               ;  B  = digit number
002B9A  3               ;  HL = score string
002B9A  3               ;------------------------------------------------------
002B9A  3               
002B9A  3               bscor0:
002B9A  3               ;	ldy #0
002B9A  3               
002B9A  3               ;	lda (z80_hl),y 		; fetch character.
002B9A  3  A4 rr        	ldy tmp
002B9C  3               bscor3:
002B9C  3  B9 20 2B     	lda score,y
002B9F  3  20 8B 30     	jsr bchar 		; display big char.
002BA2  3               
002BA2  3               ;	inc z80_l 		; next score column.
002BA2  3               ;	bne :+
002BA2  3               ;	inc z80_h
002BA2  3               ;:
002BA2  3  E6 rr        	inc tmp
002BA4  3  C6 63        	dec z80_b
002BA6  3  F0 03        	beq :+
002BA8  3  4C 9A 2B     	jmp bscor0 		; repeat for all digits.
002BAB  3               :
002BAB  3  4C 87 2B     	jmp dscor2 		; tidy up line and column variables.
002BAE  3               
002BAE  3               ;-----------------------------------------------------
002BAE  3               ; Adds number in the hl pair to the score.
002BAE  3               ;-----------------------------------------------------
002BAE  3               
002BAE  3               addsc:
002BAE  3  A9 21        	lda #<(score+1) 	; ten thousands column.
002BB0  3  85 64        	sta z80_e
002BB2  3  A9 2B        	lda #>(score+1)
002BB4  3  85 65        	sta z80_d
002BB6  3  A9 10        	lda #<10000		; amount to add each time.
002BB8  3  85 62        	sta z80_c
002BBA  3  A9 27        	lda #>10000
002BBC  3  85 63        	sta z80_b
002BBE  3  20 02 2C     	jsr incsc		; add to score.
002BC1  3               
002BC1  3  E6 64        	inc z80_e		; thousands column.
002BC3  3  D0 02        	bne :+
002BC5  3  E6 65        	inc z80_d
002BC7  3               :
002BC7  3  A9 E8        	lda #<1000		; amount to add each time.
002BC9  3  85 62        	sta z80_c
002BCB  3  A9 03        	lda #>1000
002BCD  3  85 63        	sta z80_b
002BCF  3  20 02 2C     	jsr incsc 		; add to score.
002BD2  3               
002BD2  3  E6 64        	inc z80_e		; hundreds column.
002BD4  3  D0 02        	bne :+
002BD6  3  E6 65        	inc z80_d
002BD8  3               :
002BD8  3  A9 64        	lda #<100		; amount to add each time.
002BDA  3  85 62        	sta z80_c
002BDC  3  A9 00        	lda #>100
002BDE  3  85 63        	sta z80_b
002BE0  3  20 02 2C     	jsr incsc		; add to score.
002BE3  3               
002BE3  3  E6 64        	inc z80_e 		; tens column.
002BE5  3  D0 02        	bne :+
002BE7  3  E6 65        	inc z80_d
002BE9  3               :
002BE9  3  A9 0A        	lda #<10		; amount to add each time.
002BEB  3  85 62        	sta z80_c
002BED  3  A9 00        	lda #>10
002BEF  3  85 63        	sta z80_b
002BF1  3  20 02 2C     	jsr incsc 		; add to score.
002BF4  3               
002BF4  3  E6 64        	inc z80_e		; units column.
002BF6  3  D0 02        	bne :+
002BF8  3  E6 65        	inc z80_d
002BFA  3               :
002BFA  3  A9 01        	lda #<1			; units.
002BFC  3  85 62        	sta z80_c
002BFE  3  A9 00        	lda #>1
002C00  3  85 63        	sta z80_b
002C02  3               incsc:
002C02  3  A5 67        	lda z80_h		; store amount to add.
002C04  3  48           	pha
002C05  3  A5 66        	lda z80_l
002C07  3  48           	pha
002C08  3               
002C08  3  38           	sec			; subtract from amount to add.
002C09  3  A5 66        	lda z80_l
002C0B  3  E5 62        	sbc z80_c
002C0D  3  85 66        	sta z80_l
002C0F  3  A5 67        	lda z80_h
002C11  3  E5 63        	sbc z80_b
002C13  3  85 67        	sta z80_h
002C15  3  90 14        	bcc incsc0		; too much, restore value.
002C17  3               
002C17  3  68           	pla			; delete the previous amount from the stack.
002C18  3  68           	pla
002C19  3               
002C19  3  A5 65        	lda z80_d 		; store column position.
002C1B  3  48           	pha
002C1C  3  A5 64        	lda z80_e
002C1E  3  48           	pha
002C1F  3  20 32 2C     	jsr incsc2		; do the increment.
002C22  3               
002C22  3  68           	pla			; restore column.
002C23  3  85 64        	sta z80_e
002C25  3  68           	pla
002C26  3  85 65        	sta z80_d
002C28  3  4C 02 2C     	jmp incsc		; repeat until all added.
002C2B  3               
002C2B  3               incsc0:
002C2B  3  68           	pla			; restore previous value.
002C2C  3  85 66        	sta z80_l
002C2E  3  68           	pla
002C2F  3  85 67        	sta z80_h
002C31  3  60           	rts
002C32  3               incsc2:
002C32  3  A0 00        	ldy #0
002C34  3  B1 64        	lda (z80_de),y 		; get amount.
002C36  3  18           	clc
002C37  3  69 01        	adc #1			; add one to column.
002C39  3  91 64        	sta (z80_de),y		; write new column total.
002C3B  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C3D  3  B0 01        	bcs :+
002C3F  3  60           	rts			; no, carry on.
002C40  3               :
002C40  3  A9 30        	lda #'0'		; make it zero.
002C42  3  91 64        	sta (z80_de),y		; write new column total.
002C44  3  C6 64        	dec z80_e		; back one column.
002C46  3  D0 02        	bne :+
002C48  3  C6 65        	dec z80_d
002C4A  3               :
002C4A  3  4C 32 2C     	jmp incsc2
002C4D  3               
002C4D  3               ;------------------------------------
002C4D  3               ; Add bonus to score and reset bonus
002C4D  3               ;------------------------------------
002C4D  3               
002C4D  3               addbo:
002C4D  3  A2 05        	ldx #5			; last digit.
002C4F  3  18           	clc
002C50  3               addbo0:
002C50  3  BD 20 2B     	lda score,x		; get score.
002C53  3  7D 2C 2B     	adc bonus,x		; add bonus.
002C56  3  38           	sec			; 0 to 18.
002C57  3  E9 30        	sbc #48
002C59  3  48           	pha
002C5A  3  A9 30        	lda #'0'
002C5C  3  9D 2C 2B     	sta bonus,x
002C5F  3  68           	pla
002C60  3  C9 3A        	cmp #58
002C62  3  90 03        	bcc addbo1
002C64  3  38           	sec
002C65  3  E9 0A        	sbc #10
002C67  3               addbo1:
002C67  3  9D 20 2B     	sta score,x		; zeroise bonus.
002C6A  3  CA           	dex			; next digit.
002C6B  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C6D  3  60           	rts
002C6E  3               
002C6E  3               ;------------------------------------
002C6E  3               ; Swap score and bonus.
002C6E  3               ;------------------------------------
002C6E  3               
002C6E  3               swpsb:
002C6E  3  A2 05        	ldx #5			; digits to add.
002C70  3               swpsb0:
002C70  3  BD 20 2B     	lda score,x 		; get score digits.
002C73  3  48           	pha			; save digit
002C74  3  BD 2C 2B     	lda bonus,x 		; get bonus digits.
002C77  3  9D 20 2B     	sta score,x		; switch score-bonus
002C7A  3  68           	pla
002C7B  3  9D 2C 2B     	sta bonus,x
002C7E  3  CA           	dex 			; repeat for all 6 digits.
002C7F  3  10 EF        	bpl swpsb0
002C81  3  60           	rts
002C82  3               
002C82  3               ;----------------------------------------------------
002C82  3               ; Get print address.
002C82  3               ;----------------------------------------------------
002C82  3               
002C82  3               gprad:
002C82  3  A5 rr        	lda dispy
002C84  3  85 rr        	sta tmp
002C86  3  0A           	asl a
002C87  3  18           	clc
002C88  3  65 rr        	adc tmp
002C8A  3  A8           	tay
002C8B  3  B9 00 DC     	lda SCADTB_lb,y
002C8E  3  18           	clc
002C8F  3  65 rr        	adc dispx
002C91  3  85 rr        	sta scraddr
002C93  3  B9 00 DD     	lda SCADTB_hb,y
002C96  3  69 00        	adc #0
002C98  3  85 rr        	sta scraddr+1
002C9A  3  60           	rts
002C9B  3               
002C9B  3               ;--------------------------------------------------------------
002C9B  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002C9B  3               ;
002C9B  3               ; Output:
002C9B  3               ;  bufaddr = MAP + dispy*40 + dispx
002C9B  3               ;--------------------------------------------------------------
002C9B  3               
002C9B  3               pradd:
002C9B  3  A5 rr        	lda dispy 		; y coordinate.
002C9D  3  0A           	asl a
002C9E  3  18           	clc
002C9F  3  65 rr        	adc dispy
002CA1  3  AA           	tax
002CA2  3               
002CA2  3  18           	clc
002CA3  3  BD 00 DC     	lda SCADTB_lb,x
002CA6  3  65 rr        	adc dispx
002CA8  3  85 rr        	sta bufaddr
002CAA  3               
002CAA  3  BD 00 DD     	lda SCADTB_hb,x
002CAD  3  69 D4        	adc #(>MAP->ScreenAddr)
002CAF  3  85 rr        	sta bufaddr+1
002CB1  3  60           	rts
002CB2  3               
002CB2  3               ;----------------------------------------------------
002CB2  3               ; Display character in A at dispx,dispy.
002CB2  3               ;
002CB2  3               ; Input:
002CB2  3               ;  A 	   = character to print
002CB2  3               ;----------------------------------------------------
002CB2  3               
002CB2  3               pchar:
002CB2  3  48           	pha
002CB3  3  20 82 2C     	jsr gprad		; get screen address.
002CB6  3               .if gflag
002CB6  3               	and andeor
002CB6  3               	eor andeor+1
002CB6  3               .endif
002CB6  3               .if iflag
002CB6  3               	eor #$ff
002CB6  3               .endif
002CB6  3  68           	pla
002CB7  3  A0 00        	ldy #0
002CB9  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CBB  3  60           	rts
002CBC  3               
002CBC  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002CC0  3  60 40 20 00  
002CC4  3               
002CC4  3               ;----------------------------------------------
002CC4  3               
002CC4  3               ; Print attributes, properties and pixels.
002CC4  3               ;
002CC4  3               ; Input:
002CC4  3               ;  A	= tile number
002CC4  3               ;----------------------------------------------
002CC4  3               
002CC4  3               pbpattr:			; entry PUTBLOCK command
002CC4  3  A4 rr        	ldy charx
002CC6  3  84 rr        	sty dispx
002CC8  3  A4 rr        	ldy chary
002CCA  3  84 rr        	sty dispy
002CCC  3               pattr:
002CCC  3               .if aflag
002CCC  3               	pha
002CCC  3               	jsr wbloc		; save blockinfo
002CCC  3               	pla
002CCC  3               .endif
002CCC  3               
002CCC  3               pattr2:
002CCC  3  85 63        	sta z80_b		; store cell in b register for now.
002CCE  3  AA           	tax
002CCF  3  BD DE 3C     	lda bprop,x 		; block properties.
002CD2  3  85 62        	sta z80_c
002CD4  3  C9 08        	cmp #COLECT
002CD6  3  D0 05        	bne :+
002CD8  3  A5 63        	lda z80_b
002CDA  3  8D EB 2C     	sta colpatt
002CDD  3               :
002CDD  3  20 9B 2C     	jsr pradd 		; get property buffer address.
002CE0  3  A5 62        	lda z80_c
002CE2  3  A0 00        	ldy #0
002CE4  3  91 rr        	sta (bufaddr),y 	; write property.
002CE6  3  A5 63        	lda z80_b 		; restore cell.
002CE8  3  4C EC 2C     	jmp panp
002CEB  3               ; Print attributes, no properties.
002CEB  3               
002CEB  3  00           colpatt:	.byte 0
002CEC  3               
002CEC  3               panp:
002CEC  3               ;	sta z80_e		; displacement in e.
002CEC  3               ;	lda #0
002CEC  3               ;	sta z80_d		; no high byte.
002CEC  3               ;	asl z80_e  		; multiply char by 8.
002CEC  3               ;	rol z80_d
002CEC  3               ;	asl z80_e
002CEC  3               ;	rol z80_d
002CEC  3               ;	asl z80_e
002CEC  3               ;	rol z80_d
002CEC  3  0A           	asl a
002CED  3  18           	clc
002CEE  3               ;	lda z80_e
002CEE  3  69 D8        	adc #<chgfx 		; address of graphics.
002CF0  3  85 rr        	sta tileaddr
002CF2  3  A5 65        	lda z80_d
002CF4  3  69 3C        	adc #>chgfx
002CF6  3  85 rr        	sta tileaddr+1
002CF8  3  20 82 2C     	jsr gprad 		; get screen address.
002CFB  3               panp0:
002CFB  3  A0 00        	ldy #0
002CFD  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002CFF  3               .if iflag
002CFF  3               	eor #$ff		; Invert
002CFF  3               .endif
002CFF  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D01  3  E6 rr        	inc dispx 		; move along one.
002D03  3  E6 rr        	inc charx
002D05  3  60           	rts
002D06  3               
002D06  3               ;----------------------------------------------
002D06  3               ; Write block
002D06  3               ;----------------------------------------------
002D06  3               
002D06  3               .if aflag
002D06  3               wbloc:
002D06  3               	ldy #3
002D06  3               	sta (pbptr),y		; store block number
002D06  3               	dey
002D06  3               	lda dispx
002D06  3               	sta (pbptr),y		; write x position of block.
002D06  3               	dey
002D06  3               	lda dispy
002D06  3               	sta (pbptr),y		; write y position of block.
002D06  3               	dey
002D06  3               	lda scno
002D06  3               	sta (pbptr),y		; write screen.
002D06  3               	clc			; point to next free location
002D06  3               	lda pbptr
002D06  3               	adc #4
002D06  3               	sta pbptr
002D06  3               	bcc :+
002D06  3               	inc pbptr+1
002D06  3               :
002D06  3               	rts
002D06  3               .endif
002D06  3               
002D06  3               ;----------------------------------------------
002D06  3               ; Print character pixels, no more.
002D06  3               ;
002D06  3               ; Input:
002D06  3               ;  A	= character to print
002D06  3               ;----------------------------------------------
002D06  3               
002D06  3               pchr:
002D06  3  20 B2 2C     	jsr pchar 		; show character in accumulator.
002D09  3  E6 rr        	inc dispx		; move along one.
002D0B  3  60           	rts
002D0C  3               
002D0C  3               ;----------------------------------------------------
002D0C  3               ; Shifter sprite routine for objects.
002D0C  3               ;----------------------------------------------------
002D0C  3               
002D0C  3               .if oflag
002D0C  3               sprit7:
002D0C  3               	lda z80_b
002D0C  3               	beq sprit0
002D0C  3               	sta z80_a
002D0C  3               sprit3:
002D0C  3               	lsr spr			; shift into position.
002D0C  3               	ror spr+1
002D0C  3               	ror spr+2
002D0C  3               	dec z80_a		; one less iteration.
002D0C  3               	bne sprit3
002D0C  3               sprit0:
002D0C  3               	rts 			; now apply to screen.
002D0C  3               
002D0C  3               ;----------------------------------------------------
002D0C  3               ; Draw sprite
002D0C  3               ;----------------------------------------------------
002D0C  3               
002D0C  3               sprite:
002D0C  3               	stx xtmp		; Save X-reg
002D0C  3               	jsr scadd 		; get screen address in scraddr.
002D0C  3               
002D0C  3               	lda dispx 		; x position.
002D0C  3               	and #7 			; position straddling cells.
002D0C  3               	sta z80_b		; store in b register.
002D0C  3               
002D0C  3               	lda z80_l		; store sprite graphic address.
002D0C  3               	sta sprit1+1
002D0C  3               	sta sprit2+1
002D0C  3               	lda z80_h
002D0C  3               	sta sprit1+2
002D0C  3               	sta sprit2+2
002D0C  3               
002D0C  3               	ldx #0			; pixel height.
002D0C  3               	ldy #0
002D0C  3               sprit1:
002D0C  3               	lda objdta,x		; fetch first byte.
002D0C  3               	sta spr
002D0C  3               	inx
002D0C  3               sprit2:
002D0C  3               	lda objdta,x
002D0C  3               	sta spr+1
002D0C  3               
002D0C  3               	lda #0
002D0C  3               	sta spr+2
002D0C  3               	jsr sprit7		; shift sprite
002D0C  3               
002D0C  3               	dex
002D0C  3               	lda spr			; fetch graphic.
002D0C  3               	ldy spritetab,x
002D0C  3               	eor (scraddr),y		; merge with screen image.
002D0C  3               	sta (scraddr),y		; write to screen.
002D0C  3               	inx			; next screen byte.
002D0C  3               
002D0C  3               	lda spr+1		; fetch graphic.
002D0C  3               	ldy spritetab,x
002D0C  3               	eor (scraddr),y		; merge with screen image.
002D0C  3               	sta (scraddr),y		; write to screen.
002D0C  3               	iny
002D0C  3               
002D0C  3               	lda spr+2		; fetch graphic.
002D0C  3               	eor (scraddr),y		; merge with screen image.
002D0C  3               	sta (scraddr),y		; write to screen.
002D0C  3               
002D0C  3               	inx			; next source byte.
002D0C  3               	cpx #16
002D0C  3               	bne :+
002D0C  3               	inc scraddr+1
002D0C  3               :
002D0C  3               	cpx #32
002D0C  3               	bne sprit1		; repeat
002D0C  3               
002D0C  3               	ldx xtmp		; retreive X-reg
002D0C  3               	rts
002D0C  3               
002D0C  3               spritetab:
002D0C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D0C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D0C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D0C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D0C  3               
002D0C  3               spr:	.byte 0,0,0
002D0C  3               
002D0C  3               ;xtmp:	.byte 0
002D0C  3               .endif
002D0C  3               
002D0C  3               ;-----------------------------------------------------------
002D0C  3               ; Get room address.
002D0C  3               ;-----------------------------------------------------------
002D0C  3               
002D0C  3               groom:
002D0C  3  A6 rr        	ldx scno 		; screen number.
002D0E  3  A0 00        	ldy #0
002D10  3               groomx:
002D10  3  A9 07        	lda #<scdat 		; pointer to screens.
002D12  3  85 66        	sta z80_l
002D14  3  A9 43        	lda #>scdat
002D16  3  85 67        	sta z80_h
002D18  3               groom1:
002D18  3  E0 00        	cpx #0			; is it the first one?
002D1A  3  F0 15        	beq groom0 		; no more screens to skip.
002D1C  3               
002D1C  3  18           	clc
002D1D  3  A5 66        	lda z80_l
002D1F  3  79 07 43     	adc scdat,y 		; low byte of screen size.
002D22  3  85 66        	sta z80_l
002D24  3  C8           	iny			; point to high byte.
002D25  3  A5 67        	lda z80_h
002D27  3  79 07 43     	adc scdat,y 		; high byte of screen size.
002D2A  3  85 67        	sta z80_h
002D2C  3  C8           	iny			; next address.
002D2D  3               
002D2D  3  CA           	dex 			; one less iteration.
002D2E  3  4C 18 2D     	jmp groom1 		; loop until we reach the end.
002D31  3               groom0:
002D31  3  AD 7D 44     	lda numsc 		; add displacement.
002D34  3  0A           	asl a
002D35  3  18           	clc			; add double displacement to address.
002D36  3  65 66        	adc z80_l
002D38  3  85 66        	sta z80_l
002D3A  3  A5 67        	lda z80_h
002D3C  3  69 00        	adc #0
002D3E  3  85 67        	sta z80_h
002D40  3  60           	rts
002D41  3               
002D41  3               ;-----------------------------------------------------------
002D41  3               ; Draw present room.
002D41  3               ;-----------------------------------------------------------
002D41  3               
002D41  3               droom:
002D41  3  AD 1F 28     	lda wintop 		; window top.
002D44  3  85 rr        	sta dispy		; set cursor y position.
002D46  3               droom2:
002D46  3  20 0C 2D     	jsr groom 		; get address of current room.
002D49  3  A9 00        	lda #0	 		; zero in accumulator.
002D4B  3  85 rr        	sta comcnt 		; reset compression counter.
002D4D  3  AD 21 28     	lda winhgt 		; height of window.
002D50  3  85 rr        	sta rrow		; set row counter
002D52  3               droom0:
002D52  3  AD 20 28     	lda winlft 		; window left edge.
002D55  3  85 rr        	sta dispx 		; set cursor x position.
002D57  3  AD 22 28     	lda winwid 		; width of window.
002D5A  3  85 rr        	sta rcol		; set column counter
002D5C  3               droom1:
002D5C  3  20 6D 2D     	jsr flbyt 		; decompress next byte on the fly.
002D5F  3  20 CC 2C     	jsr pattr2 		; show attributes and block.
002D62  3  C6 rr        	dec rcol		; one less column.
002D64  3  D0 F6        	bne droom1 		; repeat for entire line.
002D66  3  E6 rr        	inc dispy		; move down one line.
002D68  3  C6 rr        	dec rrow 		; one less row.
002D6A  3  D0 E6        	bne droom0 		; repeat for all rows.
002D6C  3  60           	rts
002D6D  3               
002D6D  3               ;rcol:	.byte 0
002D6D  3               ;rrow:	.byte 0
002D6D  3               
002D6D  3               ;----------------------------------------------
002D6D  3               ; Decompress bytes on-the-fly.
002D6D  3               ;----------------------------------------------
002D6D  3               
002D6D  3               flbyt:
002D6D  3  A5 rr        	lda comcnt 		; compression counter.
002D6F  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002D71  3               
002D71  3  A0 00        	ldy #0
002D73  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002D75  3  E6 66        	inc z80_l 		; point to next cell.
002D77  3  D0 02        	bne :+
002D79  3  E6 67        	inc z80_h
002D7B  3               :
002D7B  3  C9 FF        	cmp #255 		; is this byte a control code?
002D7D  3  F0 01        	beq :+
002D7F  3  60           	rts 			; no, this byte is uncompressed.
002D80  3               :
002D80  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002D82  3  85 rr        	sta combyt 		; set up the type.
002D84  3  E6 66        	inc z80_l 		; point to quantity.
002D86  3  D0 02        	bne :+
002D88  3  E6 67        	inc z80_h
002D8A  3               :
002D8A  3  B1 66        	lda (z80_hl),y 		; get quantity.
002D8C  3  E6 66        	inc z80_l 		; point to next byte.
002D8E  3  D0 02        	bne :+
002D90  3  E6 67        	inc z80_h
002D92  3               :
002D92  3               flbyt1:
002D92  3  85 rr        	sta comcnt 		; store new quantity.
002D94  3  C6 rr        	dec comcnt		; one less.
002D96  3  A5 rr        	lda combyt 		; byte to expand.
002D98  3  60           	rts
002D99  3               
002D99  3               ;combyt:	.byte 0			; byte type compressed.
002D99  3               ;comcnt:	.byte 0			; compression counter.
002D99  3               
002D99  3               ;------------------------------------------
002D99  3               ; Ladder down check.
002D99  3               ;
002D99  3               ; Input:
002D99  3               ;  IX = sprite pointer
002D99  3               ;------------------------------------------
002D99  3               
002D99  3               .if lflag
002D99  3               laddd:
002D99  3               	ldy #9
002D99  3               	lda (z80_ix),y		; x coordinate.
002D99  3               	sta dispx
002D99  3               
002D99  3               	ldy #8
002D99  3               	lda (z80_ix),y		; y coordinate.
002D99  3               	and #254		; make it even.
002D99  3               	sta (z80_ix),y 		; reset it.
002D99  3               	clc 			; look down 16 pixels.
002D99  3               numsp5:
002D99  3               	adc #SPR_HGT
002D99  3               	sta dispy		; coords in dispx,dispy.
002D99  3               	jmp laddv
002D99  3               
002D99  3               ;------------------------------------------
002D99  3               ; Ladder up check.
002D99  3               ;
002D99  3               ; Input:
002D99  3               ;  IX = sprite pointer
002D99  3               ;
002D99  3               ; Output:
002D99  3               ;  A  = 0 is ok, A <>0 is not ok
002D99  3               ;------------------------------------------
002D99  3               
002D99  3               laddu:
002D99  3               	ldy #9
002D99  3               	lda (z80_ix),y		; x coordinate.
002D99  3               	sta dispx
002D99  3               
002D99  3               	ldy #8
002D99  3               	lda (z80_ix),y		; y coordinate.
002D99  3               	and #254 		; make it even.
002D99  3               	sta (z80_ix),y		; reset it.
002D99  3               	clc 			; look 2 pixels above feet.
002D99  3               numsp6:
002D99  3               	adc #SPR_HGT-2
002D99  3               	sta dispy		; coords in dispx,dispy.
002D99  3               laddv:
002D99  3               	jsr tstbl 		; get map address.
002D99  3               	jsr ldchk 		; standard ladder check.
002D99  3               	beq :+
002D99  3               	rts 			; no way through.
002D99  3               :
002D99  3               	inc bufaddr 		; look right one cell.
002D99  3               	bne :+
002D99  3               	inc bufaddr+1
002D99  3               :
002D99  3               	jsr ldchk 		; do the check.
002D99  3               	beq :+
002D99  3               	rts 			; impassable.
002D99  3               :
002D99  3               	lda dispx 		; y coordinate.
002D99  3               	and #7 			; position straddling block cells.
002D99  3               	bne :+
002D99  3               	rts 			; no more checks needed.
002D99  3               :
002D99  3               	inc bufaddr 		; look to third cell.
002D99  3               	bne :+
002D99  3               	inc bufaddr+1
002D99  3               :
002D99  3               	jsr ldchk 		; do the check.
002D99  3               	rts  			; return with zero flag set accordingly.
002D99  3               .endif
002D99  3               
002D99  3               ;---------------------------------------------------------
002D99  3               ; Can go up check.
002D99  3               ;
002D99  3               ; Input:
002D99  3               ;  IX = sprite pointer
002D99  3               ;
002D99  3               ; Output:
002D99  3               ;  A  = 0 is ok, A <>0 is not ok
002D99  3               ;---------------------------------------------------------
002D99  3               
002D99  3               cangu:
002D99  3  A0 09        	ldy #9
002D9B  3  B1 68        	lda (z80_ix),y		; x coordinate.
002D9D  3  85 rr        	sta dispx
002D9F  3  A0 08        	ldy #8
002DA1  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002DA3  3  38           	sec
002DA4  3  E9 01        	sbc #1
002DA6  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DA8  3  20 64 2F     	jsr tstbl 		; get map address.
002DAB  3  20 7C 2E     	jsr lrchk 		; standard left/right check.
002DAE  3  F0 01        	beq :+
002DB0  3  60           	rts			; no way through.
002DB1  3               :
002DB1  3  E6 rr        	inc bufaddr		; look right one cell.
002DB3  3  D0 02        	bne :+
002DB5  3  E6 rr        	inc bufaddr+1
002DB7  3               :
002DB7  3  20 7C 2E     	jsr lrchk 		; do the check.
002DBA  3  F0 01        	beq :+
002DBC  3  60           	rts			; impassable.
002DBD  3               :
002DBD  3  E6 rr        	inc bufaddr		; look right one cell.
002DBF  3  D0 02        	bne :+
002DC1  3  E6 rr        	inc bufaddr+1
002DC3  3               :
002DC3  3  20 7C 2E     	jsr lrchk 		; do the check.
002DC6  3  F0 01        	beq :+
002DC8  3  60           	rts			; impassable.
002DC9  3               :
002DC9  3  E6 rr        	inc bufaddr		; look right one cell.
002DCB  3  D0 02        	bne :+
002DCD  3  E6 rr        	inc bufaddr+1
002DCF  3               :
002DCF  3  20 7C 2E     	jsr lrchk 		; do the check.
002DD2  3  F0 01        	beq :+
002DD4  3  60           	rts			; impassable.
002DD5  3               :
002DD5  3  A5 rr        	lda dispx		; x coordinate.
002DD7  3  29 01        	and #1			; position straddling block cells.
002DD9  3  D0 01        	bne :+
002DDB  3  60           	rts			; no more checks needed.
002DDC  3               :
002DDC  3  E6 rr        	inc bufaddr		; look to third cell.
002DDE  3  D0 02        	bne :+
002DE0  3  E6 rr        	inc bufaddr+1
002DE2  3               :
002DE2  3  20 7C 2E     	jsr lrchk		; do the check.
002DE5  3  60           	rts 			; return with zero flag set accordingly.
002DE6  3               
002DE6  3               ;---------------------------------------------------------
002DE6  3               ; Can go down check.
002DE6  3               ;
002DE6  3               ; Input:
002DE6  3               ;  IX = sprite pointer
002DE6  3               ;
002DE6  3               ; Output:
002DE6  3               ;  A  = 0 is ok, A <>0 is not ok
002DE6  3               ;---------------------------------------------------------
002DE6  3               
002DE6  3               cangd:
002DE6  3  A0 09        	ldy #9
002DE8  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002DEA  3  85 rr        	sta dispx
002DEC  3  A0 08        	ldy #8
002DEE  3  B1 68        	lda (z80_ix),y		; y coordinate.
002DF0  3  18           	clc
002DF1  3               numsp3:
002DF1  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002DF3  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DF5  3  20 64 2F     	jsr tstbl 		; get map address.
002DF8  3  20 91 2E     	jsr plchk 		; block, platform check.
002DFB  3  F0 01        	beq :+
002DFD  3  60           	rts			; no way through.
002DFE  3               :
002DFE  3  E6 rr        	inc bufaddr		; look right one cell.
002E00  3  D0 02        	bne :+
002E02  3  E6 rr        	inc bufaddr+1
002E04  3               :
002E04  3  20 91 2E     	jsr plchk		; block, platform check.
002E07  3  F0 01        	beq :+
002E09  3  60           	rts			; impassable.
002E0A  3               :
002E0A  3  E6 rr        	inc bufaddr		; look right one cell.
002E0C  3  D0 02        	bne :+
002E0E  3  E6 rr        	inc bufaddr+1
002E10  3               :
002E10  3  20 91 2E     	jsr plchk		; block, platform check.
002E13  3  F0 01        	beq :+
002E15  3  60           	rts			; impassable.
002E16  3               :
002E16  3  E6 rr        	inc bufaddr		; look right one cell.
002E18  3  D0 02        	bne :+
002E1A  3  E6 rr        	inc bufaddr+1
002E1C  3               :
002E1C  3  20 91 2E     	jsr plchk		; block, platform check.
002E1F  3  F0 01        	beq :+
002E21  3  60           	rts			; impassable.
002E22  3               :
002E22  3  A5 rr        	lda dispx		; x coordinate.
002E24  3  29 01        	and #1			; position straddling block cells.
002E26  3  D0 01        	bne :+
002E28  3  60           	rts			; no more checks needed.
002E29  3               :
002E29  3  E6 rr        	inc bufaddr		; look to third cell.
002E2B  3  D0 02        	bne :+
002E2D  3  E6 rr        	inc bufaddr+1
002E2F  3               :
002E2F  3  20 91 2E     	jsr plchk		; block, platform check.
002E32  3  60           	rts			; return with zero flag set accordingly.
002E33  3               
002E33  3               ;---------------------------------------------------------
002E33  3               ; Can go left check.
002E33  3               ;
002E33  3               ; Input:
002E33  3               ;  IX = sprite pointer
002E33  3               ;
002E33  3               ; Output:
002E33  3               ;  A  = 0 is ok, A <>0 is not ok
002E33  3               ;---------------------------------------------------------
002E33  3               
002E33  3               cangl:
002E33  3  A0 08        	ldy #8
002E35  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E37  3  85 rr        	sta dispy
002E39  3  A0 09        	ldy #9
002E3B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E3D  3  38           	sec
002E3E  3  E9 01        	sbc #1			; look left 2 pixels.
002E40  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E42  3  4C 54 2E     	jmp cangh		; test if we can go there.
002E45  3               
002E45  3               ;---------------------------------------------------------
002E45  3               ; Can go right check.
002E45  3               ;
002E45  3               ; Input:
002E45  3               ;  IX = sprite pointer
002E45  3               ;
002E45  3               ; Output:
002E45  3               ;  A  = 0 is ok, A <>0 is not ok
002E45  3               ;---------------------------------------------------------
002E45  3               
002E45  3               cangr:
002E45  3  A0 08        	ldy #8
002E47  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E49  3  85 rr        	sta dispy
002E4B  3  A0 09        	ldy #9
002E4D  3  B1 68        	lda (z80_ix),y		; x coordinate.
002E4F  3  18           	clc
002E50  3  69 08        	adc #SPR_WID		; look right 8 pixels.
002E52  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E54  3               cangh:
002E54  3               cangh2:
002E54  3  A9 04        	lda #(SPR_HGT/3+1)	; default rows to write.
002E56  3  85 63        	sta z80_b
002E58  3  A4 rr        	ldy dispy		; y position.
002E5A  3  B9 4A DF     	lda V_SPR_PTR,y		; does x straddle cells?
002E5D  3  D0 02        	bne cangh0		; yes, loop counter is good.
002E5F  3  C6 63        	dec z80_b		; one less row to write.
002E61  3               cangh0:
002E61  3  20 64 2F     	jsr tstbl		; get map address.
002E64  3               cangh1:
002E64  3  20 7C 2E     	jsr lrchk		; standard left/right check.
002E67  3  F0 01        	beq :+
002E69  3  60           	rts			; no way through.
002E6A  3               :
002E6A  3  48           	pha
002E6B  3  18           	clc
002E6C  3  A5 rr        	lda bufaddr
002E6E  3  69 28        	adc #ScrWidth		; look down.
002E70  3  85 rr        	sta bufaddr
002E72  3  90 02        	bcc :+
002E74  3  E6 rr        	inc bufaddr+1
002E76  3               :
002E76  3  68           	pla
002E77  3               
002E77  3  C6 63        	dec z80_b
002E79  3  D0 E9        	bne cangh1
002E7B  3  60           	rts
002E7C  3               
002E7C  3               ;-------------------------------------
002E7C  3               ; Check left/right movement is okay.
002E7C  3               ;
002E7C  3               ; Input:
002E7C  3               ;  bufaddr = MAP + x/8 + y/8*32
002E7C  3               ;
002E7C  3               ; Output:
002E7C  3               ;  A  = 0 is ok, A <>0 is not ok
002E7C  3               ;-------------------------------------
002E7C  3               
002E7C  3               lrchk:
002E7C  3  A0 00        	ldy #0
002E7E  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002E80  3  C9 02        	cmp #WALL 		; is it passable?
002E82  3  F0 0A        	beq lrchkx		; no.
002E84  3               
002E84  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002E86  3  F0 06        	beq lrchkx		; not passable.
002E88  3  A9 00        	lda #0
002E8A  3  60           	rts
002E8B  3               
002E8B  3               ;--------------------------------------------------------------
002E8B  3               ; Called by mmenu
002E8B  3               ;--------------------------------------------------------------
002E8B  3               
002E8B  3               always:
002E8B  3  A9 FF        	lda #255		; report it as okay.
002E8D  3  60           	rts
002E8E  3               
002E8E  3               lrchkx:
002E8E  3  A9 01        	lda #1 			; reset all bits.
002E90  3  60           	rts
002E91  3               
002E91  3               
002E91  3               ;--------------------------------------------------------------
002E91  3               ; Check platform or solid item is not in way.
002E91  3               ;
002E91  3               ; Input:
002E91  3               ;  bufaddr = MAP + x/2 + y/3*40
002E91  3               ;
002E91  3               ; Output:
002E91  3               ;  A  = 0 is ok, A <>0 is not ok
002E91  3               ;--------------------------------------------------------------
002E91  3               
002E91  3               plchk:
002E91  3  A0 00        	ldy #0
002E93  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002E95  3  C9 02        	cmp #WALL 		; is it passable?
002E97  3  F0 F5        	beq lrchkx		; no.
002E99  3               .if pflag .or dflag
002E99  3               	cmp #FODDER		; fodder has to be dug.
002E99  3               	beq lrchkx		; not passable.
002E99  3               .endif
002E99  3  C9 01        	cmp #PLATFM		; platform is solid.
002E9B  3  F0 03        	beq plchkx		; not passable.
002E9D  3               .if lflag
002E9D  3               	cmp #LADDER		; is it a ladder?
002E9D  3               	beq lrchkx		; on ladder, deny movement.
002E9D  3               .endif
002E9D  3               plchk0:
002E9D  3  A9 00        	lda #0			; report as ok
002E9F  3  60           	rts
002EA0  3               plchkx:
002EA0  3  A5 rr        	lda dispy		; y coordinate.
002EA2  3  29 03        	and #3			; position straddling blocks.
002EA4  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002EA6  3  4C 9D 2E     	jmp plchk0
002EA9  3               
002EA9  3               ;--------------------------------------------------------------
002EA9  3               ; Check ladder is available.
002EA9  3               ;
002EA9  3               ; Input:
002EA9  3               ;  bufaddr = MAP + x/8 + y/8*32
002EA9  3               ;
002EA9  3               ; Output:
002EA9  3               ;  A  = 0 is ok, A <>0 is not ok
002EA9  3               ;--------------------------------------------------------------
002EA9  3               
002EA9  3               .if lflag
002EA9  3               ldchk:
002EA9  3               	ldy #0
002EA9  3               	lda (bufaddr),y 	; fetch cell.
002EA9  3               	cmp #LADDER 		; is it a ladder?
002EA9  3               	beq :+
002EA9  3               	lda #1
002EA9  3               	rts  			; return with zero flag set accordingly.
002EA9  3               :
002EA9  3               	lda #0
002EA9  3               	rts
002EA9  3               .endif
002EA9  3               
002EA9  3               ;--------------------------------------------------------------
002EA9  3               ; Get collectables.
002EA9  3               ;--------------------------------------------------------------
002EA9  3               
002EA9  3               .if cflag
002EA9  3               getcol:
002EA9  3                       lda #COLECT             ; collectable blocks.
002EA9  3                       sta z80_b
002EA9  3                       jsr tded                ; test for collectable blocks.
002EA9  3                       cmp z80_b               ; did we find one?
002EA9  3                       beq :+
002EA9  3                       rts                     ; none were found, job done.
002EA9  3               :
002EA9  3                       jsr gtblk               ; get block.
002EA9  3                       jsr evnt20              ; collected block event.
002EA9  3                       jmp getcol              ; repeat until none left.
002EA9  3               
002EA9  3               ; Get collectable block.
002EA9  3               
002EA9  3               gtblk:
002EA9  3               	ldy #0
002EA9  3               	lda (bufaddr),y
002EA9  3               	sta z80_a
002EA9  3                       lda #0
002EA9  3                       sta (bufaddr),y		; make it empty now.
002EA9  3               
002EA9  3               	lda bufaddr		; set dispx
002EA9  3               	and #31
002EA9  3               	sta dispx
002EA9  3               
002EA9  3               	lda bufaddr+1		; Set dispy
002EA9  3               	sec
002EA9  3               	sbc #>MAP
002EA9  3               	sta bufaddr+1
002EA9  3               	asl bufaddr
002EA9  3               	rol bufaddr+1
002EA9  3               	asl bufaddr
002EA9  3               	rol bufaddr+1
002EA9  3               	asl bufaddr
002EA9  3               	rol bufaddr+1
002EA9  3               	lda bufaddr+1
002EA9  3               	sta dispy
002EA9  3               
002EA9  3               	lda colpatt		; get blocknr
002EA9  3               	sta z80_e		; displacement in e.
002EA9  3               	lda #0
002EA9  3               	sta z80_d		; no high byte.
002EA9  3               	asl z80_e  		; multiply char by 8.
002EA9  3               	rol z80_d
002EA9  3               	asl z80_e
002EA9  3               	rol z80_d
002EA9  3               	asl z80_e
002EA9  3               	rol z80_d
002EA9  3               	clc
002EA9  3               	lda z80_e
002EA9  3               	adc #<chgfx 		; address of graphics.
002EA9  3               	sta tileaddr
002EA9  3               	lda z80_d
002EA9  3               	adc #>chgfx
002EA9  3               	sta tileaddr+1
002EA9  3               	jsr gprad 		; get screen address.
002EA9  3               	ldx #7			; number of pixel rows to write.
002EA9  3               gtblk0:
002EA9  3               	ldy #0
002EA9  3               	lda (tileaddr),y 	; get image byte.
002EA9  3               	ldy scrtab,x
002EA9  3               	eor (scraddr),y 	; XOR tile on screen
002EA9  3               	sta (scraddr),y 	; copy to screen.
002EA9  3               	inc tileaddr 		; next image byte.
002EA9  3               	bne :+
002EA9  3               	inc tileaddr+1
002EA9  3               :
002EA9  3               	dex	 		; repeat for 8 pixel rows.
002EA9  3               	bpl gtblk0
002EA9  3               	rts
002EA9  3               .endif
002EA9  3               
002EA9  3               ;--------------------------------------------------------------
002EA9  3               ; Touched deadly block check.
002EA9  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002EA9  3               ;
002EA9  3               ; Input:
002EA9  3               ;  IX = sprite address
002EA9  3               ;
002EA9  3               ; Output:
002EA9  3               ;  A  = 0 is ok, A=5 is not ok
002EA9  3               ;--------------------------------------------------------------
002EA9  3               
002EA9  3               tded:
002EA9  3  A0 08        	ldy #8
002EAB  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002EAD  3  85 rr        	sta dispy
002EAF  3  C8           	iny
002EB0  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002EB2  3  85 rr        	sta dispx		; coords in dispx,dispy.
002EB4  3  20 64 2F     	jsr tstbl		; get map address.
002EB7  3  48           	pha
002EB8  3  A9 27        	lda #ScrWidth-1		; default distance to next line down.
002EBA  3  85 64        	sta z80_e
002EBC  3  68           	pla
002EBD  3  C5 63        	cmp z80_b		; is this the required block?
002EBF  3  D0 01        	bne :+
002EC1  3  60           	rts			; yes.
002EC2  3               :
002EC2  3  E6 rr        	inc bufaddr 		; next cell.
002EC4  3  D0 02        	bne :+
002EC6  3  E6 rr        	inc bufaddr+1
002EC8  3               :
002EC8  3  A0 00        	ldy #0
002ECA  3  B1 rr        	lda (bufaddr),y		; fetch type.
002ECC  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002ECE  3  D0 01        	bne :+
002ED0  3  60           	rts			; yes.
002ED1  3               :
002ED1  3  A5 rr        	lda dispx		; horizontal position.
002ED3  3  85 62        	sta z80_c 		; store column in c register.
002ED5  3  29 01        	and #1			; is it straddling cells?
002ED7  3  D0 03        	bne :+
002ED9  3  4C ED 2E     	jmp tded0		; no.
002EDC  3               :
002EDC  3  E6 rr        	inc bufaddr 		; last cell.
002EDE  3  D0 02        	bne :+
002EE0  3  E6 rr        	inc bufaddr+1
002EE2  3               :
002EE2  3  A0 00        	ldy #0
002EE4  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002EE6  3  C5 63        	cmp z80_b		; is this the block?
002EE8  3  D0 01        	bne :+
002EEA  3  60           	rts			; yes.
002EEB  3               :
002EEB  3  C6 64        	dec z80_e		; one less cell to next row down.
002EED  3               tded0:
002EED  3  18           	clc 			; point to next row.
002EEE  3  A5 rr        	lda bufaddr
002EF0  3  65 64        	adc z80_e
002EF2  3  85 rr        	sta bufaddr
002EF4  3  90 02        	bcc :+
002EF6  3  E6 rr        	inc bufaddr+1
002EF8  3               :
002EF8  3  A0 00        	ldy #0
002EFA  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
002EFC  3  C5 63        	cmp z80_b		; is this fatal?
002EFE  3  D0 01        	bne :+
002F00  3  60           	rts			; yes.
002F01  3               :
002F01  3  E6 rr        	inc bufaddr 		; next cell.
002F03  3  D0 02        	bne :+
002F05  3  E6 rr        	inc bufaddr+1
002F07  3               :
002F07  3  A0 00        	ldy #0
002F09  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F0B  3  C5 63        	cmp z80_b		; is this fatal?
002F0D  3  D0 01        	bne :+
002F0F  3  60           	rts			; yes.
002F10  3               :
002F10  3  A5 62        	lda z80_c		; horizontal position.
002F12  3  29 01        	and #1			; is it straddling cells?
002F14  3  D0 03        	bne :+
002F16  3  4C 28 2F     	jmp tded1 		; no.
002F19  3               :
002F19  3  E6 rr        	inc bufaddr		; last cell.
002F1B  3  D0 02        	bne :+
002F1D  3  E6 rr        	inc bufaddr+1
002F1F  3               :
002F1F  3  A0 00        	ldy #0
002F21  3  B1 rr        	lda (bufaddr),y		; fetch type.
002F23  3  C5 63        	cmp z80_b		; is this fatal?
002F25  3  D0 01        	bne :+
002F27  3  60           	rts			; yes.
002F28  3               :
002F28  3               tded1:
002F28  3  A5 rr        	lda dispy		; vertical position.
002F2A  3  29 03        	and #3 			; is it straddling cells?
002F2C  3  D0 01        	bne :+
002F2E  3  60           	rts			; no, job done.
002F2F  3               :
002F2F  3  18           	clc			; point to next row.
002F30  3  A5 rr        	lda bufaddr
002F32  3  65 64        	adc z80_e
002F34  3  85 rr        	sta bufaddr
002F36  3  90 02        	bcc :+
002F38  3  E6 rr        	inc bufaddr+1
002F3A  3               :
002F3A  3  A0 00        	ldy #0
002F3C  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
002F3E  3  C5 63        	cmp z80_b		; is this fatal?
002F40  3  D0 01        	bne :+
002F42  3  60           	rts			; yes.
002F43  3               :
002F43  3  E6 rr        	inc bufaddr		; next cell.
002F45  3  D0 02        	bne :+
002F47  3  E6 rr        	inc bufaddr+1
002F49  3               :
002F49  3  A0 00        	ldy #0
002F4B  3  B1 rr        	lda (bufaddr),y 	; fetch type.
002F4D  3  C5 63        	cmp z80_b		; is this fatal?
002F4F  3  D0 01        	bne :+
002F51  3  60           	rts			; yes.
002F52  3               :
002F52  3  A5 62        	lda z80_c		; horizontal position.
002F54  3  29 01        	and #1			; is it straddling cells?
002F56  3  D0 01        	bne :+
002F58  3  60           	rts			; no.
002F59  3               :
002F59  3  E6 rr        	inc bufaddr		; last cell.
002F5B  3  D0 02        	bne :+
002F5D  3  E6 rr        	inc bufaddr+1
002F5F  3               :
002F5F  3  A0 00        	ldy #0
002F61  3  B1 rr        	lda (bufaddr),y		; fetch final type.
002F63  3  60           	rts 			; return with final type in accumulator.
002F64  3               
002F64  3               ;---------------------------------------------------
002F64  3               ; Fetch block type at (dispx, dispy).
002F64  3               ;
002F64  3               ; Output:
002F64  3               ;  A = block type
002F64  3               ;---------------------------------------------------
002F64  3               
002F64  3               tstbl:
002F64  3  A5 rr        	lda dispy 		; fetch y coord.
002F66  3  AA           	tax
002F67  3               
002F67  3  A5 rr        	lda dispx		; x/8
002F69  3  4A           	lsr a
002F6A  3  85 rr        	sta charx
002F6C  3               
002F6C  3  18           	clc
002F6D  3  BD 00 DC     	lda SCADTB_lb,x
002F70  3  65 rr        	adc charx
002F72  3  85 rr        	sta bufaddr
002F74  3               
002F74  3  BD 00 DD     	lda SCADTB_hb,x
002F77  3  69 D4        	adc #(>MAP->ScreenAddr)
002F79  3  85 rr        	sta bufaddr+1
002F7B  3               
002F7B  3  A0 00        	ldy #0
002F7D  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
002F7F  3  60           	rts
002F80  3               
002F80  3               ;-------------------------------------------------------------------
002F80  3               ; Jump - if we can.
002F80  3               ; Requires initial speed to be set up in accumulator prior to call.
002F80  3               ;
002F80  3               ; Input:
002F80  3               ;  IX = sprite address
002F80  3               ;-------------------------------------------------------------------
002F80  3               
002F80  3               jump:
002F80  3  A0 0D        	ldy #13
002F82  3  B1 68        	lda (z80_ix),y		; jump table low.
002F84  3  A0 0E        	ldy #14
002F86  3  11 68        	ora (z80_ix),y		; jump table high.
002F88  3  F0 01        	beq :+
002F8A  3  60           	rts			; already in the air.
002F8B  3               :
002F8B  3  A9 47        	lda #>jtab
002F8D  3  A0 0E        	ldy #14
002F8F  3  91 68        	sta (z80_ix),y		; set jump high.
002F91  3  A9 AD        	lda #<jtab		; jump table start.
002F93  3  A0 0D        	ldy #13
002F95  3  91 68        	sta (z80_ix),y		; set jump low.
002F97  3  60           	rts
002F98  3               
002F98  3               ; Jump table.
002F98  3               
002F98  3               ;jtab:
002F98  3               ;	.byte 248,250,252
002F98  3               ;	.byte 254,254,255
002F98  3               ;	.byte 255,255,0,0
002F98  3               ;	.byte 0,1,1,1,2,2
002F98  3               ;	.byte 4,6,8,8,8,99
002F98  3               
002F98  3               ;------------------------------------------------
002F98  3               ; Random numbers code.
002F98  3               ; Pseudo-random number generator, 8-bit.
002F98  3               ;
002F98  3               ; Output:
002F98  3               ;  RND = random number
002F98  3               ;------------------------------------------------
002F98  3               
002F98  3               random:
002F98  3  A5 rr        	lda seed
002F9A  3  F0 05        	beq doEor
002F9C  3  0A           	asl a
002F9D  3  F0 04        	beq noEor
002F9F  3  90 02        	bcc noEor
002FA1  3  49 1D        doEor:	eor #$1d
002FA3  3  85 rr        noEor:	sta seed
002FA5  3  60           	rts
002FA6  3               
002FA6  3  A5 rr        	lda seed		; get last random number.
002FA8  3  0A           	asl a
002FA9  3  0A           	asl a
002FAA  3  18           	clc
002FAB  3  65 rr        	adc seed
002FAD  3  18           	clc
002FAE  3  69 45        	adc #$45
002FB0  3  85 rr        	sta seed		; store new seed.
002FB2  3  85 rr        	sta varrnd		; return number in variable.
002FB4  3  60           	rts
002FB5  3               
002FB5  3               ;--------------------------------------------------------
002FB5  3               ; Keys
002FB5  3               ;
002FB5  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002FB5  3               ;             ||||||||
002FB5  3               ;             |||||||+> Right    KEY 0  - X
002FB5  3               ;             ||||||+-> Left     KEY 1  - Z
002FB5  3               ;             |||||+--> Down     KEY 2  - .
002FB5  3               ;             ||||+---> Up       KEY 3  - ;
002FB5  3               ;             |||+----> Fire1    KEY 4  - SPC
002FB5  3               ;             ||+-----> Fire2    KEY 5  - Q
002FB5  3               ;             |+------> Fire3    KEY 6  - P
002FB5  3               ;             +-------> Not used
002FB5  3               ;
002FB5  3               ;                       Option1  KEY 7  - 1
002FB5  3               ;                       Option2  KEY 8  - 2
002FB5  3               ;                       Option3  KEY 9  - 3
002FB5  3               ;                       Option4  KEY 10 - 4
002FB5  3               ;--------------------------------------------------------
002FB5  3               
002FB5  3               ;              X   Z   .   ;  SPC  Q   P
002FB5  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
002FB5  3               ;        .byte $21,$11,$01,$92                   ; menu options.
002FB5  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
002FB9  3  00 04 14     
002FBC  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
002FC0  3               
002FC0  3               ;-------------------------------------------------------
002FC0  3               ; Joystick and keyboard reading routines.
002FC0  3               ;
002FC0  3               ; contrl = 0, Keyboard
002FC0  3               ;          1, JoyKeyb
002FC0  3               ;          2, JoyMMC
002FC0  3               ;-------------------------------------------------------
002FC0  3               
002FC0  3               joykey:
002FC0  3  A5 rr        	lda contrl 		; control flag.
002FC2  3  C9 01        	cmp #1
002FC4  3  D0 03        	bne :+
002FC6  3  4C 87 48     	jmp joy1 		; read keyboard joystick
002FC9  3               :
002FC9  3  C9 02        	cmp #2
002FCB  3  D0 03        	bne :+
002FCD  3  4C 88 48     	jmp joy2 		; read MMC joystick.
002FD0  3               :
002FD0  3               ; Keyboard controls.
002FD0  3               
002FD0  3  A9 00        	lda #0		 	; zero reading.
002FD2  3  85 64        	sta z80_e
002FD4  3               
002FD4  3  A0 06        	ldy #6	 		; address of last key.
002FD6  3               joyke0:
002FD6  3  B9 AE 47     	lda keys,y 		; get key from table.
002FD9  3  20 89 48     	jsr ktest		; being pressed?
002FDC  3  26 64        	rol z80_e 		; rotate into reading.
002FDE  3               
002FDE  3  88           	dey		 	; next key.
002FDF  3  10 F5        	bpl joyke0 		; repeat for all keys.
002FE1  3  A5 64        	lda z80_e 		; copy e register to accumulator.
002FE3  3  85 rr        	sta joyval		; remember value.
002FE5  3  60           	rts
002FE6  3               
002FE6  3               ;---------------------------------------------------------------
002FE6  3               ; Getkey in column,row format
002FE6  3               ;
002FE6  3               ; Output:
002FE6  3               ;  A = high nibble=row and low nibble=column key in matrix
002FE6  3               ;---------------------------------------------------------------
002FE6  3               
002FE6  3               ;kget:
002FE6  3               ;	lda #ScrMode		; high-mono mode.
002FE6  3               ;	sta ScrSelAddr		; screen select port
002FE6  3               ;	stx xtmp
002FE6  3               ;kget4:
002FE6  3               ;	jsr READKEY		; read key until pressed
002FE6  3               ;	cpy #255
002FE6  3               ;	beq kget4
002FE6  3               ;	sta rcol		; save column
002FE6  3               ;	stx rrow		; determine row
002FE6  3               ;kget3:
002FE6  3               ;	jsr READKEY		; wait until key released
002FE6  3               ;	cpy #255
002FE6  3               ;	bne kget3
002FE6  3               ;
002FE6  3               ;	sec			; calculate matrix row
002FE6  3               ;	lda #10
002FE6  3               ;	sbc rrow
002FE6  3               ;	asl a
002FE6  3               ;	asl a
002FE6  3               ;	asl a
002FE6  3               ;	asl a
002FE6  3               ;	sta rrow
002FE6  3               ;
002FE6  3               ;	ldy #255		; find column mask
002FE6  3               ;kget1:
002FE6  3               ;	iny
002FE6  3               ;	lda keymask,y
002FE6  3               ;	cmp rcol
002FE6  3               ;	beq kget2
002FE6  3               ;	jmp kget1
002FE6  3               ;kget2:
002FE6  3               ;	tya			; determine column
002FE6  3               ;	clc
002FE6  3               ;	adc rrow
002FE6  3               ;	ldx xtmp
002FE6  3               ;	rts
002FE6  3               
002FE6  3               ;---------------------------------------------------------------
002FE6  3               ; Display message.
002FE6  3               ;
002FE6  3               ; Input:
002FE6  3               ;  A = message number
002FE6  3               ;---------------------------------------------------------------
002FE6  3               
002FE6  3               dmsg:
002FE6  3  AA           	tax
002FE7  3  A9 68        	lda #<msgdat		; pointer to messages.
002FE9  3  85 66        	sta z80_l
002FEB  3  A9 3C        	lda #>msgdat
002FED  3  85 67        	sta z80_h
002FEF  3  20 D6 30     	jsr getwrd		; get message number.
002FF2  3               dmsg3:
002FF2  3  20 CD 30     	jsr preprt		; pre-printing stuff.
002FF5  3  20 34 2B     	jsr checkx		; make sure we"re in a printable range.
002FF8  3  A5 rr        	lda prtmod		; print mode.
002FFA  3  D0 50        	bne bmsg1		; no, double-height text.
002FFC  3               
002FFC  3  AD 9A 39     	lda fcolour		; Set textcolour
002FFF  3  20 B2 2C     	jsr pchar
003002  3  20 BA 30     	jsr nexpos
003005  3               dmsg0:
003005  3  A5 67        	lda z80_h		; store string pointer.
003007  3  48           	pha
003008  3  A5 66        	lda z80_l
00300A  3  48           	pha
00300B  3               
00300B  3  A0 00        	ldy #0
00300D  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
00300F  3  29 7F        	and #127		; remove any end marker.
003011  3  C9 0D        	cmp #13
003013  3  F0 24        	beq dmsg1
003015  3  20 B2 2C     	jsr pchar		; display character.
003018  3  20 BA 30     	jsr nexpos 		; display position.
00301B  3  D0 03        	bne dmsg2		; not on a new line.
00301D  3  20 BF 30     	jsr nexlin		; next line down.
003020  3               dmsg2:
003020  3  68           	pla			; retrieve string pointer
003021  3  85 66        	sta z80_l
003023  3  68           	pla
003024  3  85 67        	sta z80_h
003026  3               
003026  3  A0 00        	ldy #0
003028  3  B1 66        	lda (z80_hl),y		; fetch last character.
00302A  3  0A           	asl a  			; was it the end?
00302B  3  90 03        	bcc :+
00302D  3  4C 87 2B     	jmp dscor2		; yes, job done.
003030  3               :
003030  3  E6 66        	inc z80_l		; next character to display.
003032  3  D0 02        	bne :+
003034  3  E6 67        	inc z80_h
003036  3               :
003036  3  4C 05 30     	jmp dmsg0
003039  3               dmsg1:
003039  3  E6 rr        	inc dispy
00303B  3  A5 rr        	lda dispy
00303D  3  C9 19        	cmp #ScrHeight
00303F  3  90 04        	bcc dmsg4
003041  3  A9 00        	lda #0
003043  3  85 rr        	sta dispy
003045  3               dmsg4:
003045  3  A9 00        	lda #0
003047  3  85 rr        	sta dispx
003049  3  4C 20 30     	jmp dmsg2
00304C  3               
00304C  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
00304C  3               
00304C  3               ;----------------------------------------------------------
00304C  3               ; Display message in big text.
00304C  3               ;
00304C  3               ; Input:
00304C  3               ;  HL = string pointer
00304C  3               ;----------------------------------------------------------
00304C  3               
00304C  3               bmsg1:
00304C  3  AD 9A 39     	lda fcolour		; Set textcolour
00304F  3  20 8B 30     	jsr bchar
003052  3  A9 0D        	lda #13			; Set double height
003054  3  20 8B 30     	jsr bchar
003057  3               bmsg4:
003057  3  A0 00        	ldy #0
003059  3  B1 66        	lda (z80_hl),y 		; get character to display.
00305B  3  29 7F        	and #127		; only want 7 bits.
00305D  3  C9 0D        	cmp #13
00305F  3  F0 15        	beq bmsg2
003061  3  20 8B 30     	jsr bchar 		; display big char.
003064  3               bmsg3:
003064  3  A0 00        	ldy #0
003066  3  B1 66        	lda (z80_hl),y 		; look at last character.
003068  3  48           	pha
003069  3  E6 66        	inc z80_l 		; next character in list.
00306B  3  D0 02        	bne :+
00306D  3  E6 67        	inc z80_h
00306F  3               :
00306F  3  68           	pla
003070  3  0A           	asl a  			; was terminator flag set?
003071  3  90 E4        	bcc bmsg4		; no, keep going.
003073  3  4C 87 2B     	jmp dscor2
003076  3               bmsg2:
003076  3  A9 00        	lda #0
003078  3  85 rr        	sta dispx
00307A  3  E6 rr        	inc dispy
00307C  3  E6 rr        	inc dispy
00307E  3  A5 rr        	lda dispy
003080  3  C9 18        	cmp #ScrHeight-1
003082  3  90 E0        	bcc bmsg3
003084  3  A9 00        	lda #0
003086  3  85 rr        	sta dispy
003088  3  4C 64 30     	jmp bmsg3
00308B  3               
00308B  3               ;----------------------------------------------------------
00308B  3               ; Big character display.
00308B  3               ;
00308B  3               ; Input:
00308B  3               ;  A = character
00308B  3               ;----------------------------------------------------------
00308B  3               
00308B  3               bchar:
00308B  3  20 B2 2C     	jsr pchar 		; display big char.
00308E  3  E6 rr        	inc dispy
003090  3  20 B2 2C     	jsr pchar
003093  3  C6 rr        	dec dispy
003095  3  20 BA 30     	jsr nexpos		; display position.
003098  3  60           	rts
003099  3               
003099  3               bchar3:
003099  3  E6 rr        	inc dispy
00309B  3  20 BF 30     	jsr nexlin 		; next line check.
00309E  3               bchar2:
00309E  3  4C 87 2B     	jmp dscor2		; tidy up line and column variables.
0030A1  3               
0030A1  3               
0030A1  3               ;-------------------------------------------------
0030A1  3               ; Display a character.
0030A1  3               ;
0030A1  3               ; Input:
0030A1  3               ;  A = character
0030A1  3               ;-------------------------------------------------
0030A1  3               
0030A1  3               achar:
0030A1  3  85 63        	sta z80_b 		; copy to b.
0030A3  3  20 CD 30     	jsr preprt 		; get ready to print.
0030A6  3  A5 63        	lda z80_b		; character in accumulator.
0030A8  3  A6 rr        	ldx prtmod 		; print mode.
0030AA  3  F0 03        	beq :+
0030AC  3  4C 8B 30     	jmp bchar 		; no, double-height text.
0030AF  3               :
0030AF  3  20 B2 2C     	jsr pchar 		; display character.
0030B2  3  20 BA 30     	jsr nexpos 		; display position.
0030B5  3  F0 E2        	beq bchar3		; next line down.
0030B7  3  4C 9E 30     	jmp bchar2 		; tidy up.
0030BA  3               
0030BA  3               
0030BA  3               ;-------------------------------------------------
0030BA  3               ; Get next print column position.
0030BA  3               ;-------------------------------------------------
0030BA  3               
0030BA  3               nexpos:
0030BA  3  E6 rr        	inc dispx		; move along one position.
0030BC  3  A5 rr        	lda dispx 		; get coordinate.
0030BE  3               ;	and #31
0030BE  3  60           	rts 			; return with status in zero flag.
0030BF  3               
0030BF  3               ;-------------------------------------------------
0030BF  3               ; Get next print line position.
0030BF  3               ;-------------------------------------------------
0030BF  3               
0030BF  3               nexlin:
0030BF  3  E6 rr        	inc dispy 		; newline.
0030C1  3  A5 rr        	lda dispy		; vertical position.
0030C3  3  C9 19        	cmp #ScrHeight			; past screen edge?
0030C5  3  B0 01        	bcs :+
0030C7  3  60           	rts			; no, still okay.
0030C8  3               :
0030C8  3  A9 00        	lda #0			; restart at top.
0030CA  3  85 rr        	sta dispy
0030CC  3  60           	rts
0030CD  3               
0030CD  3               ;--------------------------------------------------------
0030CD  3               ; Pre-print preliminaries.
0030CD  3               ;--------------------------------------------------------
0030CD  3               
0030CD  3               preprt:
0030CD  3               ;	lda #<(FONT-256)		; font pointer.
0030CD  3               ;	sta grbase		; set up graphics base.
0030CD  3               ;	lda #>(FONT-256)
0030CD  3               ;	sta grbase+1
0030CD  3               prescr:
0030CD  3  A5 rr        	lda charx 		; display coordinates.
0030CF  3  85 rr        	sta dispx		; set up general coordinates.
0030D1  3  A5 rr        	lda chary
0030D3  3  85 rr        	sta dispy
0030D5  3  60           	rts
0030D6  3               
0030D6  3               ;--------------------------------------------------------------
0030D6  3               ; Get messagenr x in hl
0030D6  3               ;
0030D6  3               ; Input:
0030D6  3               ;  HL = pointer to message list
0030D6  3               ;  X  = message number.
0030D6  3               ;--------------------------------------------------------------
0030D6  3               
0030D6  3               getwrd:
0030D6  3  E0 00        	cpx #0
0030D8  3  D0 01        	bne:+ 			; first word in list?
0030DA  3  60           	rts 			; yep, don't search.
0030DB  3               :
0030DB  3  A0 00        	ldy #0
0030DD  3               getwd0:
0030DD  3  B1 66        	lda (z80_hl),y
0030DF  3  48           	pha
0030E0  3  E6 66        	inc z80_l
0030E2  3  D0 02        	bne :+
0030E4  3  E6 67        	inc z80_h
0030E6  3               :
0030E6  3  68           	pla
0030E7  3  C9 80        	cmp #128		; found end?
0030E9  3  30 F2        	bmi getwd0		; no, carry on.
0030EB  3  CA           	dex			; until we have right number.
0030EC  3  D0 EF        	bne getwd0
0030EE  3  60           	rts
0030EF  3               
0030EF  3               ;-----------------------------------------------------------
0030EF  3               ; Bubble sort.
0030EF  3               ;-----------------------------------------------------------
0030EF  3               
0030EF  3               bsort:
0030EF  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0030F1  3  85 rr        	sta qscnt
0030F3  3               
0030F3  3  A9 AC        	lda #<sprtab 		; sprite table.
0030F5  3  85 68        	sta z80_x
0030F7  3  A9 38        	lda #>sprtab
0030F9  3  85 69        	sta z80_i
0030FB  3               bsort0:
0030FB  3  A0 00        	ldy #0
0030FD  3  B1 68        	lda (z80_ix),y 		; first sprite type.
0030FF  3  C9 FF        	cmp #255 		; is it switched off?
003101  3  F0 30        	beq swemp		; yes, may need to switch another in here.
003103  3               
003103  3  A0 11        	ldy #TABSIZ
003105  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
003107  3  C9 FF        	cmp #255 		; is it enabled?
003109  3  F0 0A        	beq bsort2 		; no, nothing to swap.
00310B  3               
00310B  3  A0 14        	ldy #TABSIZ+3
00310D  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
00310F  3  A0 03        	ldy #3
003111  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
003113  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
003115  3               bsort2:
003115  3  18           	clc
003116  3  A5 68        	lda z80_x
003118  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00311A  3  85 68        	sta z80_x
00311C  3  90 02        	bcc :+
00311E  3  E6 69        	inc z80_i
003120  3               :
003120  3  C6 rr        	dec qscnt
003122  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
003124  3  60           	rts
003125  3               
003125  3               ;qscnt:	.byte 0
003125  3               
003125  3               bsort1:
003125  3  A0 11        	ldy #TABSIZ
003127  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
003129  3  C9 FF        	cmp #255		; is it enabled?
00312B  3  F0 E8        	beq bsort2		; no, nothing to swap.
00312D  3  20 41 31     	jsr swspr		; swap positions.
003130  3  4C 15 31     	jmp bsort2
003133  3               swemp:
003133  3  A0 11        	ldy #TABSIZ
003135  3  B1 68        	lda (z80_ix),y		; next table entry.
003137  3  C9 FF        	cmp #255		; is that one on?
003139  3  F0 DA        	beq bsort2		; no, nothing to swap.
00313B  3  20 41 31     	jsr swspr		; swap positions.
00313E  3  4C 15 31     	jmp bsort2
003141  3               
003141  3               ; Swap sprites.
003141  3               
003141  3               swspr:
003141  3  A5 68        	lda z80_x		; table address
003143  3  85 64        	sta z80_e		; copy to de pair.
003145  3  85 66        	sta z80_l		; copy to hl pair.
003147  3  A5 69        	lda z80_i
003149  3  85 67        	sta z80_h
00314B  3  85 65        	sta z80_d
00314D  3               
00314D  3  18           	clc
00314E  3  A5 66        	lda z80_l
003150  3  69 11        	adc #TABSIZ		; distance to second entry.
003152  3  85 66        	sta z80_l
003154  3  90 02        	bcc :+
003156  3  E6 67        	inc z80_h
003158  3               :
003158  3  A9 11        	lda #TABSIZ		; bytes to swap.
00315A  3  85 63        	sta z80_b
00315C  3  A0 00        	ldy #0
00315E  3               swspr0:
00315E  3  B1 66        	lda (z80_hl),y		; fetch second byte.
003160  3  48           	pha
003161  3  B1 64        	lda (z80_de),y 		; fetch first byte.
003163  3  91 66        	sta (z80_hl),y 		; copy to second.
003165  3  68           	pla
003166  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
003168  3               
003168  3  E6 64        	inc z80_e 		; next byte.
00316A  3  D0 02        	bne :+
00316C  3  E6 65        	inc z80_d
00316E  3               :
00316E  3  E6 66        	inc z80_l 		; next byte.
003170  3  D0 02        	bne :+
003172  3  E6 67        	inc z80_h
003174  3               :
003174  3  C6 63        	dec z80_b
003176  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
003178  3  60           	rts
003179  3               
003179  3               ;----------------------------------------------------
003179  3               ; Process sprites.
003179  3               ;----------------------------------------------------
003179  3               
003179  3               pspr:
003179  3  A9 0C        	lda #NUMSPR		; sprites to process.
00317B  3  85 rr        	sta sprptr
00317D  3               
00317D  3  A9 AC        	lda #<sprtab 		; sprite table.
00317F  3  85 68        	sta z80_x
003181  3  A9 38        	lda #>sprtab
003183  3  85 69        	sta z80_i
003185  3               pspr1:
003185  3  A0 00        	ldy #0
003187  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
003189  3  C9 09        	cmp #9 			; within range of sprite types?
00318B  3  B0 03        	bcs :+
00318D  3  20 A0 31     	jsr pspr2 		; yes, process this one.
003190  3               :
003190  3  18           	clc
003191  3  A5 68        	lda z80_x
003193  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003195  3  85 68        	sta z80_x
003197  3  90 02        	bcc :+
003199  3  E6 69        	inc z80_i		; next sprite.
00319B  3               :
00319B  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
00319D  3  D0 E6        	bne pspr1
00319F  3  60           	rts
0031A0  3               
0031A0  3               ;sprptr:	.byte 0
0031A0  3               
0031A0  3               pspr2:
0031A0  3  A5 68        	lda z80_x 		; store original sprite pointer.
0031A2  3  85 rr        	sta ogptr
0031A4  3  A5 69        	lda z80_i
0031A6  3  85 rr        	sta ogptr+1
0031A8  3  20 B4 31     	jsr pspr3		; do the routine.
0031AB  3               rtorg:
0031AB  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0031AD  3  85 68        	sta z80_x
0031AF  3  A5 rr        	lda ogptr+1
0031B1  3  85 69        	sta z80_i
0031B3  3               rtorg0:
0031B3  3  60           	rts
0031B4  3               
0031B4  3               pspr3:
0031B4  3  A9 E9        	lda #<evtyp0		; sprite type events list.
0031B6  3  85 66        	sta z80_l
0031B8  3  A9 31        	lda #>evtyp0
0031BA  3  85 67        	sta z80_h
0031BC  3               pspr4:
0031BC  3  B1 68        	lda (z80_ix),y
0031BE  3  0A           	asl a			; double accumulator.
0031BF  3  18           	clc
0031C0  3  65 66        	adc z80_l
0031C2  3  85 66        	sta z80_l
0031C4  3  90 02        	bcc :+
0031C6  3  E6 67        	inc z80_h
0031C8  3               :
0031C8  3  B1 66        	lda (z80_hl),y
0031CA  3  85 64        	sta z80_e 		; copy to de.
0031CC  3  48           	pha
0031CD  3               
0031CD  3  E6 66        	inc z80_l 		; next byte of address.
0031CF  3  D0 02        	bne :+
0031D1  3  E6 67        	inc z80_h
0031D3  3               :
0031D3  3  B1 66        	lda (z80_hl),y 		; address high.
0031D5  3  85 65        	sta z80_d
0031D7  3               
0031D7  3  48           	pha	 		; swap address into hl.
0031D8  3  A5 67        	lda z80_h
0031DA  3  85 65        	sta z80_d
0031DC  3  68           	pla
0031DD  3  85 67        	sta z80_h
0031DF  3  68           	pla
0031E0  3  85 66        	sta z80_l
0031E2  3  A5 66        	lda z80_l
0031E4  3  85 64        	sta z80_e
0031E6  3               
0031E6  3  6C 66 00     	jmp (z80_hl) 		; go there.
0031E9  3               
0031E9  3               ;ogptr:	.word 0			; original sprite pointer.
0031E9  3               
0031E9  3               ; Address of each sprite type's routine.
0031E9  3               
0031E9  3  A7 39        evtyp0:	.word evnt00
0031EB  3  96 3A        evtyp1:	.word evnt01
0031ED  3  DB 3B        evtyp2:	.word evnt02
0031EF  3  DC 3B        evtyp3:	.word evnt03
0031F1  3  DD 3B        evtyp4:	.word evnt04
0031F3  3  DE 3B        evtyp5:	.word evnt05
0031F5  3  DF 3B        evtyp6:	.word evnt06
0031F7  3  E0 3B        evtyp7:	.word evnt07
0031F9  3  E1 3B        evtyp8:	.word evnt08
0031FB  3               
0031FB  3               ;--------------------------------------------------------------
0031FB  3               ; Display sprites.
0031FB  3               ;
0031FB  3               ; Input:
0031FB  3               ;  IX = sprite table
0031FB  3               ;--------------------------------------------------------------
0031FB  3               
0031FB  3               dspr:
0031FB  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0031FD  3  85 rr        	sta sprcnt
0031FF  3               dspr0:
0031FF  3  A0 00        	ldy #0
003201  3  B1 68        	lda (z80_ix),y 		; get sprite type.
003203  3  C9 FF        	cmp #255 		; is it enabled?
003205  3  D0 42        	bne dspr1 		; yes, it needs deleting.
003207  3               dspr5:
003207  3  A0 05        	ldy #5
003209  3  B1 68        	lda (z80_ix),y 		; new type.
00320B  3  C9 FF        	cmp #255		; is it enabled?
00320D  3  D0 76        	bne dspr3 		; yes, it needs drawing.
00320F  3               dspr2:
00320F  3  A0 05        	ldy #5
003211  3  B1 68        	lda (z80_ix),y 		; copy new type.
003213  3  A0 00        	ldy #0
003215  3  91 68        	sta (z80_ix),y
003217  3  A0 06        	ldy #6
003219  3  B1 68        	lda (z80_ix),y 		; copy new image number.
00321B  3  A0 01        	ldy #1
00321D  3  91 68        	sta (z80_ix),y
00321F  3  A0 07        	ldy #7
003221  3  B1 68        	lda (z80_ix),y 		; copy new frame.
003223  3  A0 02        	ldy #2
003225  3  91 68        	sta (z80_ix),y
003227  3  A0 08        	ldy #8
003229  3  B1 68        	lda (z80_ix),y 		; copy new y.
00322B  3  A0 03        	ldy #3
00322D  3  91 68        	sta (z80_ix),y
00322F  3  A0 09        	ldy #9
003231  3  B1 68        	lda (z80_ix),y 		; copy new x.
003233  3  A0 04        	ldy #4
003235  3  91 68        	sta (z80_ix),y
003237  3               
003237  3  18           	clc
003238  3  A5 68        	lda z80_x
00323A  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
00323C  3  85 68        	sta z80_x
00323E  3  A5 69        	lda z80_i
003240  3  69 00        	adc #0
003242  3  85 69        	sta z80_i 		; next sprite.
003244  3  C6 rr        	dec sprcnt
003246  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
003248  3  60           	rts
003249  3               dspr1:
003249  3  A0 05        	ldy #5
00324B  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
00324D  3  C9 FF        	cmp #255		; is this enabled?
00324F  3  D0 06        	bne dspr4 		; yes, display both.
003251  3               dspr6:
003251  3  20 38 33     	jsr sspria 		; show single sprite.
003254  3  4C 0F 32     	jmp dspr2
003257  3               
003257  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
003257  3               
003257  3               dspr4:
003257  3  A0 04        	ldy #4
003259  3  B1 68        	lda (z80_ix),y		; old x.
00325B  3  A0 09        	ldy #9
00325D  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
00325F  3  D0 1E        	bne dspr7 		; they differ, need to redraw.
003261  3               
003261  3  A0 03        	ldy #3
003263  3  B1 68        	lda (z80_ix),y		; old y.
003265  3  A0 08        	ldy #8
003267  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003269  3  D0 14        	bne dspr7		; they differ, need to redraw.
00326B  3               
00326B  3  A0 02        	ldy #2
00326D  3  B1 68        	lda (z80_ix),y 		; old frame.
00326F  3  A0 07        	ldy #7
003271  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003273  3  D0 0A        	bne dspr7 		; they differ, need to redraw.
003275  3               
003275  3  A0 01        	ldy #1
003277  3  B1 68        	lda (z80_ix),y 		; old image.
003279  3  A0 06        	ldy #6
00327B  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
00327D  3  F0 90        	beq dspr2		; everything is the same, don't redraw.
00327F  3               dspr7:
00327F  3  20 71 33     	jsr sspric 		; delete old sprite, draw new one simultaneously.
003282  3  4C 0F 32     	jmp dspr2
003285  3               dspr3:
003285  3  20 6B 33     	jsr ssprib 		; show single sprite.
003288  3  4C 0F 32     	jmp dspr2
00328B  3               
00328B  3               ;sprcnt:	.byte 0
00328B  3               
00328B  3               ;-----------------------------------------
00328B  3               ; Get sprite address calculations.
00328B  3               ; gspran = new sprite, gsprad = old sprite.
00328B  3               ;
00328B  3               ; Input:
00328B  3               ;  IX = sprite address
00328B  3               ;-----------------------------------------
00328B  3               
00328B  3               gspran:
00328B  3  A0 08        	ldy #8
00328D  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
00328F  3  85 rr        	sta dispy
003291  3  A0 09        	ldy #9
003293  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
003295  3  85 rr        	sta dispx
003297  3  A0 06        	ldy #6
003299  3  B1 68        	lda (z80_ix),y 		; new sprite image.
00329B  3  20 CE 36     	jsr gfrm		; fetch start frame for this sprite.
00329E  3               
00329E  3  A0 00        	ldy #0
0032A0  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032A2  3  A0 07        	ldy #7
0032A4  3  18           	clc
0032A5  3  71 68        	adc (z80_ix),y 		; new add frame number.
0032A7  3  4C C6 32     	jmp gspra0
0032AA  3               
0032AA  3               ;-----------------------------------------
0032AA  3               ; Calculate old sprite address
0032AA  3               ;
0032AA  3               ; Input:
0032AA  3               ;  IX = sprite address
0032AA  3               ;
0032AA  3               ; Output:
0032AA  3               ;  B  = right byte mask
0032AA  3               ;  C  = left byte mask
0032AA  3               ;  DE = spriteframe address
0032AA  3               ;  scraddr = screenaddress(dispx,dispy)
0032AA  3               ;-----------------------------------------
0032AA  3               
0032AA  3               gsprad:
0032AA  3  A0 03        	ldy #3
0032AC  3  B1 68        	lda (z80_ix),y		; y coordinate.
0032AE  3  85 rr        	sta dispy
0032B0  3  A0 04        	ldy #4
0032B2  3  B1 68        	lda (z80_ix),y		; x coordinate.
0032B4  3  85 rr        	sta dispx
0032B6  3  A0 01        	ldy #1
0032B8  3  B1 68        	lda (z80_ix),y 		; sprite image.
0032BA  3  20 CE 36     	jsr gfrm 		; fetch start frame for this sprite.
0032BD  3               
0032BD  3               ; z80_hl = sprite framenr
0032BD  3               
0032BD  3  A0 00        	ldy #0
0032BF  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
0032C1  3               
0032C1  3               ; z80_ix+2 = current framenr
0032C1  3               
0032C1  3  A0 02        	ldy #2
0032C3  3  18           	clc
0032C4  3  71 68        	adc (z80_ix),y 		; add frame number.
0032C6  3               
0032C6  3               ; A = sprite framenr + current framenr
0032C6  3               ;
0032C6  3               ; framestart = z80_d/e = 120 * A (Normal 4 x 32 = 128)
0032C6  3               ; framestart = framestart + (x AND 1) * 60
0032C6  3               ; framestart = framestart + (reftable(dispy) * 20)
0032C6  3               
0032C6  3               gspra0:
0032C6  3               
0032C6  3               ; Calculate framestart = 120 * sprite image
0032C6  3               
0032C6  3  85 65        	sta z80_d
0032C8  3  85 rr        	sta tmp
0032CA  3  A9 00        	lda #0
0032CC  3  85 64        	sta z80_e
0032CE  3  85 rr        	sta tmp+1
0032D0  3               
0032D0  3  46 65        	lsr z80_d	; a * 128
0032D2  3  66 64        	ror z80_e
0032D4  3               
0032D4  3  06 rr        	asl tmp		; a x 8
0032D6  3  26 rr        	rol tmp+1
0032D8  3  06 rr        	asl tmp
0032DA  3  26 rr        	rol tmp+1
0032DC  3  06 rr        	asl tmp
0032DE  3  26 rr        	rol tmp+1
0032E0  3               
0032E0  3  38           	sec		; a*128 - a*8
0032E1  3  A5 64        	lda z80_e
0032E3  3  E5 rr        	sbc tmp
0032E5  3  85 64        	sta z80_e
0032E7  3  A5 65        	lda z80_d
0032E9  3  E5 rr        	sbc tmp+1
0032EB  3  85 65        	sta z80_d
0032ED  3               
0032ED  3               ;.if bflag
0032ED  3               ;	lsr tmp1
0032ED  3               ;	ror tmp2
0032ED  3               ;	clc
0032ED  3               ;	lda tmp2
0032ED  3               ;	adc z80_e
0032ED  3               ;	sta z80_e
0032ED  3               ;	lda tmp1
0032ED  3               ;	adc z80_d
0032ED  3               ;	sta z80_d
0032ED  3               ;.endif
0032ED  3               
0032ED  3               ; Add spritedata address
0032ED  3               
0032ED  3  18           	clc 			; address of play sprites.
0032EE  3  A5 64        	lda z80_e
0032F0  3  69 E1        	adc #<sprgfx
0032F2  3  85 64        	sta z80_e
0032F4  3  A5 65        	lda z80_d
0032F6  3  69 3C        	adc #>sprgfx
0032F8  3  85 65        	sta z80_d
0032FA  3               
0032FA  3               ; Check for x-shift
0032FA  3               
0032FA  3  A5 rr        	lda dispx 		; x coordinate.
0032FC  3  29 01        	and #1
0032FE  3  F0 0B        	beq chk_y_shift
003300  3  18           	clc			; Point to odd frame
003301  3  A5 64        	lda z80_e
003303  3  69 3C        	adc #60
003305  3  85 64        	sta z80_e
003307  3  90 02        	bcc :+
003309  3  E6 65        	inc z80_d
00330B  3               :
00330B  3               ; SCheck for y-shift
00330B  3               
00330B  3               chk_y_shift:
00330B  3  A6 rr        	ldx dispy
00330D  3  BD 4A DF     	lda V_SPR_PTR,x
003310  3  18           	clc
003311  3  65 64        	adc z80_e
003313  3  85 64        	sta z80_e
003315  3  90 02        	bcc :+
003317  3  E6 65        	inc z80_d
003319  3               :
003319  3               
003319  3               ;------------------------------------------------------------------
003319  3               ; Drop into screen address routine.
003319  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003319  3               ;------------------------------------------------------------------
003319  3               
003319  3               ; Check for bottom of screen
003319  3               
003319  3               scadd:
003319  3  A6 rr        	ldx dispy
00331B  3  E0 4C        	cpx #76
00331D  3  90 02        	bcc :+
00331F  3  A2 4C        	ldx #76
003321  3               :
003321  3               
003321  3  A5 rr        	lda dispx
003323  3  4A           	lsr a
003324  3  18           	clc
003325  3  7D 00 DC     	adc SCADTB_lb,x
003328  3  85 rr        	sta scraddr
00332A  3  BD 00 DD     	lda SCADTB_hb,x
00332D  3  69 00        	adc #0
00332F  3  85 rr        	sta scraddr+1
003331  3  60           	rts
003332  3               
003332  3               spmask:
003332  3  FF 00        	.byte $ff,$00
003334  3  6A 35        	.byte $6a,$35
003336  3               
003336  3  00           tmp1:	.byte 0
003337  3  00           tmp2:	.byte 0
003338  3               
003338  3               ;-----------------------------------------------------------------
003338  3               ; These are the sprite routines.
003338  3               ; sspria = single sprite, old (ix).
003338  3               ; ssprib = single sprite, new (ix+5).
003338  3               ; sspric = both sprites, old (ix) and new (ix+5).
003338  3               ;-----------------------------------------------------------------
003338  3               
003338  3               sspria:
003338  3  20 AA 32     	jsr gsprad		; get old sprite address.
00333B  3               sspri2:
00333B  3  A5 64        	lda z80_e
00333D  3  8D D8 33     	sta dline1+1		; Set spritedata address
003340  3  8D E3 33     	sta dline2a+1
003343  3  8D EE 33     	sta dline2b+1
003346  3  8D F9 33     	sta dline2c+1
003349  3  8D 04 34     	sta dline2d+1
00334C  3  A5 65        	lda z80_d
00334E  3  8D D9 33     	sta dline1+2
003351  3  8D E4 33     	sta dline2a+2
003354  3  8D EF 33     	sta dline2b+2
003357  3  8D FA 33     	sta dline2c+2
00335A  3  8D 05 34     	sta dline2d+2
00335D  3  86 rr        	stx xtmp
00335F  3  A2 00        	ldx #0			; vertical lines.
003361  3               sspri0:
003361  3  20 D4 33     	jsr dline		; draw a line.
003364  3               
003364  3               ;.if bflag
003364  3               ;	cpx #16			; Detect end of line 3
003364  3               ;.else
003364  3  E0 14        	cpx #20			; Detect end of line 2
003366  3               ;.endif
003366  3               
003366  3  D0 F9        	bne sspri0		; no, repeat
003368  3  A6 rr        	ldx xtmp
00336A  3  60           	rts
00336B  3               
00336B  3               ;-----------------------------------------------------------------
00336B  3               ; ssprib = single sprite, new (ix).
00336B  3               ;-----------------------------------------------------------------
00336B  3               
00336B  3               ssprib:
00336B  3  20 8B 32     	jsr gspran 		; get new sprite address.
00336E  3               				; z80_de = new sprite address
00336E  3  4C 3B 33     	jmp sspri2
003371  3               
003371  3               ;-----------------------------------------------------------------
003371  3               ; sspric = erase old sprite and plot new sprite line by line
003371  3               ;-----------------------------------------------------------------
003371  3               
003371  3               sspric:
003371  3  20 AA 32     	jsr gsprad 		; get old sprite address.
003374  3               				; z80_de = old sprite address
003374  3  A5 64        	lda z80_e
003376  3  8D 13 34     	sta ddline1+1		; Set spritedata address
003379  3  8D 1E 34     	sta ddline2a+1
00337C  3  8D 29 34     	sta ddline2b+1
00337F  3  8D 34 34     	sta ddline2c+1
003382  3  8D 3F 34     	sta ddline2d+1
003385  3  A5 65        	lda z80_d
003387  3  8D 14 34     	sta ddline1+2
00338A  3  8D 1F 34     	sta ddline2a+2
00338D  3  8D 2A 34     	sta ddline2b+2
003390  3  8D 35 34     	sta ddline2c+2
003393  3  8D 40 34     	sta ddline2d+2
003396  3  20 A6 48     	jsr exx  		; store addresses.
003399  3               
003399  3  20 8B 32     	jsr gspran 		; get new sprite addresses.
00339C  3               				; z80_de = old sprite address
00339C  3  A5 64        	lda z80_e
00339E  3  8D D8 33     	sta dline1+1		; Set spritedata address
0033A1  3  8D E3 33     	sta dline2a+1
0033A4  3  8D EE 33     	sta dline2b+1
0033A7  3  8D F9 33     	sta dline2c+1
0033AA  3  8D 04 34     	sta dline2d+1
0033AD  3  A5 65        	lda z80_d
0033AF  3  8D D9 33     	sta dline1+2
0033B2  3  8D E4 33     	sta dline2a+2
0033B5  3  8D EF 33     	sta dline2b+2
0033B8  3  8D FA 33     	sta dline2c+2
0033BB  3  8D 05 34     	sta dline2d+2
0033BE  3               
0033BE  3  86 rr        	stx xtmp
0033C0  3  A2 00        	ldx #0			; vertical lines.
0033C2  3               lloop:
0033C2  3  20 D4 33     	jsr dline 		; draw a line.
0033C5  3  CA           	dex
0033C6  3  CA           	dex
0033C7  3  CA           	dex
0033C8  3  CA           	dex
0033C9  3  CA           	dex
0033CA  3  20 0F 34     	jsr ddline 		; delete a line.
0033CD  3               
0033CD  3               ;.if bflag
0033CD  3               ;	cpx #16			; Detect end of line 3
0033CD  3               ;.else
0033CD  3  E0 14        	cpx #20			; Detect end of line 2
0033CF  3               ;.endif
0033CF  3  D0 F1        	bne lloop		; no, repeat
0033D1  3  A6 rr        	ldx xtmp
0033D3  3  60           	rts
0033D4  3               
0033D4  3               
0033D4  3               ;-----------------------------------------------------------------
0033D4  3               
0033D4  3               dline:
0033D4  3  BC 4A 34     	ldy sprline,x		; point to screenleft
0033D7  3               dline1:
0033D7  3  BD 87 44     	lda objdta,x		; fetch spriteleft byte
0033DA  3  51 rr        	eor (scraddr),y		; merge with screenleft
0033DC  3  09 20        	ora #$20		; Set bit 5
0033DE  3  91 rr        	sta (scraddr),y		; write screenleft
0033E0  3  E8           	inx			; next spritebyte
0033E1  3  C8           	iny			; point to screenmiddle
0033E2  3               dline2a:
0033E2  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
0033E5  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0033E7  3  09 20        	ora #$20		; Set bit 5
0033E9  3  91 rr        	sta (scraddr),y		; write screenmiddle
0033EB  3  E8           	inx			; next spritebyte
0033EC  3  C8           	iny			; point to screenmiddle
0033ED  3               dline2b:
0033ED  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
0033F0  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0033F2  3  09 20        	ora #$20		; Set bit 5
0033F4  3  91 rr        	sta (scraddr),y		; write screenmiddle
0033F6  3  E8           	inx			; next spritebyte
0033F7  3  C8           	iny			; point to screenmiddle
0033F8  3               dline2c:
0033F8  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
0033FB  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
0033FD  3  09 20        	ora #$20		; Set bit 5
0033FF  3  91 rr        	sta (scraddr),y		; write screenmiddle
003401  3  E8           	inx			; next spritebyte
003402  3  C8           	iny			; point to screenmiddle
003403  3               dline2d:
003403  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
003406  3  51 rr        	eor (scraddr),y		; merge with screenright
003408  3  09 20        	ora #$20		; Set bit 5
00340A  3  91 rr        	sta (scraddr),y		; write screenright
00340C  3  E8           	inx			; next spritebyte
00340D  3  C8           	iny			; point to screenmiddle
00340E  3               
00340E  3  60           	rts
00340F  3               
00340F  3               ;-----------------------------------------------------------------
00340F  3               
00340F  3               ddline:
00340F  3  BC 4A 34     	ldy sprline,x		; point to screenleft
003412  3               ddline1:
003412  3  BD 87 44     	lda objdta,x		; fetch spriteleft byte
003415  3  51 72        	eor (z80_hlp),y		; merge with screenleft
003417  3  09 20        	ora #$20		; Set bit 5
003419  3  91 72        	sta (z80_hlp),y		; write spritedata0
00341B  3  E8           	inx			; next spritebyte
00341C  3  C8           	iny			; point to screenmiddle
00341D  3               ddline2a:
00341D  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
003420  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003422  3  09 20        	ora #$20		; Set bit 5
003424  3  91 72        	sta (z80_hlp),y		; write spritedata1
003426  3  E8           	inx			; next spritebyte
003427  3  C8           	iny			; point to screenmiddle
003428  3               ddline2b:
003428  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
00342B  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
00342D  3  09 20        	ora #$20		; Set bit 5
00342F  3  91 72        	sta (z80_hlp),y		; write spritedata2
003431  3  E8           	inx			; next spritebyte
003432  3  C8           	iny			; point to screenmiddle
003433  3               ddline2c:
003433  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
003436  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003438  3  09 20        	ora #$20		; Set bit 5
00343A  3  91 72        	sta (z80_hlp),y		; write spritedata3
00343C  3  E8           	inx			; next spritebyte
00343D  3  C8           	iny			; point to screenright
00343E  3               ddline2d:
00343E  3  BD 87 44     	lda objdta,x		; fetch spritemiddle byte
003441  3  51 72        	eor (z80_hlp),y		; merge with screenright
003443  3  09 20        	ora #$20		; Set bit 5
003445  3  91 72        	sta (z80_hlp),y		; write spritedata5
003447  3  E8           	inx			; next spritebyte
003448  3  C8           	iny			; point to screenmiddle
003449  3               
003449  3  60           	rts
00344A  3               
00344A  3               sprline:
00344A  3  00 01 02 03  	.byte $00,$01,$02,$03,$04
00344E  3  04           
00344F  3  28 29 2A 2B  	.byte $28,$29,$2a,$2b,$2c
003453  3  2C           
003454  3  50 51 52 53  	.byte $50,$51,$52,$53,$54
003458  3  54           
003459  3  78 79 7A 7B  	.byte $78,$79,$7a,$7b,$7c
00345D  3  7C           
00345E  3               
00345E  3               ;----------------------------------------------------------------------
00345E  3               ; Line drawn, now work out next target address.
00345E  3               ;----------------------------------------------------------------------
00345E  3               
00345E  3               nline:
00345E  3  18           	clc
00345F  3  A5 rr        	lda scraddr 		; get low byte of address.
003461  3  69 28        	adc #ScrWidth
003463  3  85 rr        	sta scraddr 		; new low byte of address.
003465  3  90 02        	bcc :+
003467  3  E6 rr        	inc scraddr+1 		; new high byte of address.
003469  3               :
003469  3  60           	rts
00346A  3               
00346A  3               ;-----------------------------------------------------------
00346A  3               ; Animates a sprite.
00346A  3               ;
00346A  3               ; Input:
00346A  3               ;  IX = sprite address
00346A  3               ;  HL = last sprite address
00346A  3               ;-----------------------------------------------------------
00346A  3               
00346A  3               animsp:
00346A  3  25 rr        	and frmno
00346C  3  F0 01        	beq :+
00346E  3  60           	rts
00346F  3               :
00346F  3  A0 06        	ldy #6
003471  3  B1 68        	lda (z80_ix),y		; sprite image
003473  3  20 CE 36     	jsr gfrm		; get frame data.
003476  3               
003476  3  E6 66        	inc z80_l		; point to frames.
003478  3  D0 02        	bne :+
00347A  3  E6 67        	inc z80_h
00347C  3               :
00347C  3  A0 07        	ldy #7
00347E  3  B1 68        	lda (z80_ix),y		; sprite frame.
003480  3  18           	clc
003481  3  69 01        	adc #1			; next one along.
003483  3  A0 00        	ldy #0
003485  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
003487  3  90 02        	bcc anims0		; no, not yet.
003489  3  A9 00        	lda #0			; start at first frame.
00348B  3               anims0:
00348B  3  A0 07        	ldy #7
00348D  3  91 68        	sta (z80_ix),y		; new frame.
00348F  3  60           	rts
003490  3               
003490  3               ;--------------------------------------------------------------
003490  3               ; Animate back
003490  3               ;
003490  3               ; Input:
003490  3               ;  IX = sprite address
003490  3               ;  HL = last sprite address
003490  3               ;--------------------------------------------------------------
003490  3               
003490  3               animbk:
003490  3  25 rr        	and frmno
003492  3  F0 01        	beq :+
003494  3  60           	rts
003495  3               :
003495  3  A0 06        	ldy #6
003497  3  B1 68        	lda (z80_ix),y		; sprite image.
003499  3  20 CE 36     	jsr gfrm		; get frame data.
00349C  3               
00349C  3  E6 66        	inc z80_l 		; point to frames.
00349E  3  D0 02        	bne :+
0034A0  3  E6 67        	inc z80_h
0034A2  3               :
0034A2  3  A0 07        	ldy #7
0034A4  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0034A6  3  F0 03        	beq :+
0034A8  3  4C AF 34     	jmp rtanb0 		; yes, start at end.
0034AB  3               :
0034AB  3  A0 00        	ldy #0
0034AD  3  B1 66        	lda (z80_hl),y 		; last sprite.
0034AF  3               rtanb0:
0034AF  3  38           	sec
0034B0  3  E9 01        	sbc #1			; next one along.
0034B2  3  4C 8B 34     	jmp anims0		; set new frame.
0034B5  3               
0034B5  3               ;--------------------------------------------------------------
0034B5  3               ; Check for collision with other sprite, strict enforcement.
0034B5  3               ;
0034B5  3               ; Input:
0034B5  3               ;  b		= sprite to test for
0034B5  3               ;  ix		= current sprite pointer
0034B5  3               ;
0034B5  3               ; global:	b
0034B5  3               ; local:	x,y,hl,de,skptr
0034B5  3               ; calls:	-
0034B5  3               ;--------------------------------------------------------------
0034B5  3               
0034B5  3               sktyp:
0034B5  3  A9 AC        	lda #<sprtab				; sprite table.
0034B7  3  85 66        	sta z80_l
0034B9  3  A9 38        	lda #>sprtab
0034BB  3  85 67        	sta z80_h
0034BD  3               numsp2:
0034BD  3  A9 0C        	lda #NUMSPR				; number of sprites.
0034BF  3  85 rr        	sta sktptr
0034C1  3               sktyp0:
0034C1  3  A5 66        	lda z80_l 				; store pointer to sprite.
0034C3  3  85 rr        	sta skptr
0034C5  3  A5 67        	lda z80_h
0034C7  3  85 rr        	sta skptr+1
0034C9  3               
0034C9  3  A0 00        	ldy #0
0034CB  3  B1 66        	lda (z80_hl),y 				; get sprite type.
0034CD  3  C5 63        	cmp z80_b				; is it the type we seek?
0034CF  3  F0 1D        	beq coltyp				; yes, we can use this one.
0034D1  3               sktyp1:
0034D1  3  18           	clc
0034D2  3  A5 rr        	lda skptr				; retrieve sprite pointer.
0034D4  3  69 11        	adc #TABSIZ				; size of each entry.
0034D6  3  85 66        	sta z80_l
0034D8  3  A5 rr        	lda skptr+1
0034DA  3  69 00        	adc #0
0034DC  3  85 67        	sta z80_h
0034DE  3  C6 rr        	dec sktptr					; one less iteration.
0034E0  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0034E2  3  A9 00        	lda #0					; default to ROM address - no sprite.
0034E4  3  85 66        	sta z80_l
0034E6  3  85 67        	sta z80_h
0034E8  3  85 rr        	sta skptr				; store pointer to sprite.
0034EA  3  85 rr        	sta skptr+1
0034EC  3               
0034EC  3  18           	clc					; don't return with zero flag set.
0034ED  3  60           	rts 					; didn't find one.
0034EE  3               
0034EE  3               ;skptr:	.word 0					; search pointer.
0034EE  3               ;sktptr:	.byte 0
0034EE  3               
0034EE  3               coltyp:
0034EE  3  A0 00        	ldy #0
0034F0  3  B1 68        	lda (z80_ix),y				; current sprite type.
0034F2  3  C5 63        	cmp z80_b				; seeking sprite of same type?
0034F4  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0034F6  3               colty0:
0034F6  3  A0 09        	ldy #9					; distance to x position in table.
0034F8  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
0034FA  3  85 64        	sta z80_e
0034FC  3  88           	dey
0034FD  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
0034FF  3  85 65        	sta z80_d
003501  3               
003501  3               ; Drop into collision detection.
003501  3               
003501  3               colc16:
003501  3  A0 09        	ldy #9
003503  3  B1 68        	lda (z80_ix),y			 	; x coord.
003505  3  38           	sec					; subtract x.
003506  3  E5 64        	sbc z80_e
003508  3  B0 05        	bcs  colc1a 				; result is positive.
00350A  3  49 FF        	eor #$ff				; make negative positive.
00350C  3  18           	clc
00350D  3  69 01        	adc #1
00350F  3               colc1a:
00350F  3  C9 08        	cmp #SPR_WID				; within x range?
003511  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003513  3  85 62        	sta z80_c				; store difference.
003515  3               
003515  3  A0 08        	ldy #8
003517  3  B1 68        	lda (z80_ix),y				; y coord.
003519  3  38           	sec
00351A  3  E5 65        	sbc z80_d				; subtract y.
00351C  3  B0 05        	bcs colc1b				; result is positive.
00351E  3  49 FF        	eor #$ff				; make negative positive.
003520  3  18           	clc
003521  3  69 01        	adc #1
003523  3               colc1b:
003523  3  C9 09        	cmp #SPR_HGT					; within y range?
003525  3  B0 AA        	bcs sktyp1 				; no - they've missed.
003527  3  18           	clc					; add x difference.
003528  3  65 62        	adc z80_c
00352A  3  C9 0C        	cmp #12					; only 5 corner pixels touching?
00352C  3  B0 02        	bcs :+
00352E  3  38           	sec
00352F  3  60           	rts 					; carry set if there's a collision.
003530  3               :
003530  3  4C D1 34     	jmp sktyp1				; try next sprite in table.
003533  3               colty1:
003533  3  A5 68        	lda z80_x  				; compare the two.
003535  3  C5 66        	cmp z80_l
003537  3  D0 09        	bne end_col
003539  3  A5 69        	lda z80_i
00353B  3  C5 67        	cmp z80_h
00353D  3  D0 03        	bne end_col
00353F  3  4C D1 34     	jmp sktyp1 				; addresses are identical.
003542  3               end_col:
003542  3  4C F6 34     	jmp colty0
003545  3               
003545  3               ;-----------------------------------------------------------
003545  3               ; Display number, left aligned
003545  3               ;
003545  3               ; Input:
003545  3               ;  a		= number
003545  3               ;
003545  3               ; global:	-
003545  3               ; local:	a,y,bc,hl,displ0
003545  3               ; calls:	num2ch,dmsg3
003545  3               ;-----------------------------------------------------------
003545  3               
003545  3               disply:
003545  3  85 61        	sta z80_a
003547  3  A9 6D        	lda #<displ0				; display workspace.
003549  3  85 62        	sta z80_c
00354B  3  A9 35        	lda #>displ0
00354D  3  85 63        	sta z80_b
00354F  3  A5 61        	lda z80_a
003551  3  20 E2 29     	jsr num2ch				; convert accumulator to string.
003554  3               displ1:
003554  3  C6 62        	dec z80_c				; back one character.
003556  3  D0 02        	bne :+
003558  3  C6 63        	dec z80_b
00355A  3               :
00355A  3  A0 00        	ldy #0
00355C  3  B1 62        	lda (z80_bc),y				; fetch digit.
00355E  3  09 80        	ora #128				; insert end marker.
003560  3  91 62        	sta (z80_bc),y				; new value.
003562  3               
003562  3  A9 6D        	lda #<displ0				; display space.
003564  3  85 66        	sta z80_l
003566  3  A9 35        	lda #>displ0
003568  3  85 67        	sta z80_h
00356A  3               
00356A  3  4C F2 2F     	jmp dmsg3				; display the string.
00356D  3               
00356D  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003571  3               
003571  3               ;----------------------------------------------------------------
003571  3               ; Initialise screen.
003571  3               ;
003571  3               ; global:	roomtb,scno
003571  3               ; local:	-
003571  3               ; calls:	tstcs
003571  3               ;----------------------------------------------------------------
003571  3               
003571  3               initsc:
003571  3  AD 89 39     	lda roomtb 			; whereabouts in the map are we?
003574  3  20 7E 35     	jsr tstsc 			; find displacement.
003577  3  C9 FF        	cmp #255 			; is it valid?
003579  3  F0 02        	beq init_end 			; no, it's rubbish.
00357B  3  85 rr        	sta scno			; store new room number.
00357D  3               init_end:
00357D  3  60           	rts
00357E  3               
00357E  3               ;----------------------------------------------------------------
00357E  3               ; Test screen.
00357E  3               ;
00357E  3               ; global:	-
00357E  3               ; local:	x
00357E  3               ; calls:	-
00357E  3               ;----------------------------------------------------------------
00357E  3               
00357E  3               tstsc:
00357E  3  85 rr        	sta tmproom
003580  3  18           	clc
003581  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
003583  3  AA           	tax 				; add displacement to map data.
003584  3  BD 9D 39     	lda mapdat-MAPWID,x 		; find room number there.
003587  3  60           	rts
003588  3               
003588  3               ;tmproom:	.byte 0
003588  3               
003588  3               ;--------------------------
003588  3               ; Screen left.
003588  3               ;--------------------------
003588  3               
003588  3               scrl:
003588  3  AD 89 39     	lda roomtb 			; present room table pointer.
00358B  3  38           	sec
00358C  3  E9 01        	sbc #1				; room left.
00358E  3               scrl0:
00358E  3  20 7E 35     	jsr tstsc			; test screen.
003591  3  C9 FF        	cmp #255			; is there a screen this way?
003593  3  D0 01        	bne :+
003595  3  60           	rts				; no, return to loop.
003596  3               :
003596  3  A5 rr        	lda tmproom			; restore room displacement.
003598  3  8D 89 39     	sta roomtb			; new room table position.
00359B  3               scrl1:
00359B  3  20 71 35     	jsr initsc 			; set new screen.
00359E  3  A9 02        	lda #2
0035A0  3  85 rr        	sta restfl 			; set it.
0035A2  3  60           	rts
0035A3  3               scrr:
0035A3  3  AD 89 39     	lda roomtb 			; room table pointer.
0035A6  3  18           	clc
0035A7  3  69 01        	adc #1				; room right.
0035A9  3  4C 8E 35     	jmp scrl0
0035AC  3               scru:
0035AC  3  AD 89 39     	lda roomtb 			; room table pointer.
0035AF  3  38           	sec
0035B0  3  E9 03        	sbc #MAPWID 			; room up.
0035B2  3  4C 8E 35     	jmp scrl0
0035B5  3               scrd:
0035B5  3  AD 89 39     	lda roomtb 			; room table pointer.
0035B8  3  18           	clc
0035B9  3  69 03        	adc #MAPWID 			; room down.
0035BB  3  4C 8E 35     	jmp scrl0
0035BE  3               
0035BE  3               ;-----------------------------------------
0035BE  3               ; Jump to new screen.
0035BE  3               ;-----------------------------------------
0035BE  3               
0035BE  3               nwscr:
0035BE  3  A2 00        	ldx #0				; start of map data.
0035C0  3               nwscr0:
0035C0  3  DD A0 39     	cmp mapdat,x
0035C3  3  F0 06        	beq nwscr1			; have we found a match for screen?
0035C5  3  E8           	inx 				; next room.
0035C6  3  E0 50        	cpx #80				; zero room count, 80 to search.
0035C8  3  D0 F6        	bne nwscr0			; keep looking.
0035CA  3  60           	rts
0035CB  3               nwscr1:
0035CB  3  8E 89 39     	stx roomtb			; set the map position.
0035CE  3  4C 9B 35     	jmp scrl1			; draw new room.
0035D1  3               
0035D1  3               
0035D1  3               ;----------------------------------------------------------
0035D1  3               ; Gravity processing.
0035D1  3               ;----------------------------------------------------------
0035D1  3               
0035D1  3               grav:
0035D1  3  A0 0D        	ldy #13
0035D3  3  B1 68        	lda (z80_ix),y			; jump pointer low.
0035D5  3  85 66        	sta z80_l
0035D7  3  A0 0E        	ldy #14
0035D9  3  B1 68        	lda (z80_ix),y			; jump pointer high.
0035DB  3  85 67        	sta z80_h
0035DD  3  05 66        	ora z80_l			; merge in low byte.
0035DF  3  D0 01        	bne :+
0035E1  3  60           	rts				; if neither is set, we're not in the air.
0035E2  3               :
0035E2  3  A0 00        	ldy #0
0035E4  3  B1 66        	lda (z80_hl),y			; pixels to move.
0035E6  3  85 61        	sta z80_a
0035E8  3  C9 63        	cmp #99				; reached the end?
0035EA  3  D0 0C        	bne grav0			; no, continue.
0035EC  3               grav2:
0035EC  3  C6 66        	dec z80_l			; go back to previous value.
0035EE  3  C9 FF        	cmp #$ff
0035F0  3  D0 02        	bne :+
0035F2  3  C6 67        	dec z80_h
0035F4  3               :
0035F4  3  B1 66        	lda (z80_hl),y			; fetch that from table.
0035F6  3  85 61        	sta z80_a
0035F8  3               grav0:
0035F8  3  E6 66        	inc z80_l			; point to next table entry.
0035FA  3  D0 02        	bne :+
0035FC  3  E6 67        	inc z80_h
0035FE  3               :
0035FE  3  A5 66        	lda z80_l
003600  3  A0 0D        	ldy #13
003602  3  91 68        	sta (z80_ix),y			; store new pointer low.
003604  3  A5 67        	lda z80_h
003606  3  A0 0E        	ldy #14
003608  3  91 68        	sta (z80_ix),y			; store new pointer high.
00360A  3               grav1:
00360A  3  A5 61        	lda z80_a
00360C  3  D0 01        	bne :+				; any movement required?
00360E  3  60           	rts				; no, not this time.
00360F  3               :
00360F  3  A5 61        	lda z80_a
003611  3  C9 80        	cmp #128			; is it up or down?
003613  3  B0 15        	bcs gravu			; it's up.
003615  3               gravd:
003615  3  85 63        	sta z80_b			; set pixels to move.
003617  3               gravd0:
003617  3  20 E6 2D     	jsr cangd			; can we go down?
00361A  3  D0 28        	bne gravst			; can't move down, so stop.
00361C  3  A0 08        	ldy #8
00361E  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003620  3  18           	clc
003621  3  69 01        	adc #1
003623  3  91 68        	sta (z80_ix),y
003625  3  C6 63        	dec z80_b
003627  3  D0 EE        	bne gravd0
003629  3  60           	rts
00362A  3               gravu:
00362A  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00362C  3  18           	clc
00362D  3  69 01        	adc #1
00362F  3  85 63        	sta z80_b			; set pixels to move.
003631  3               gravu0:
003631  3  20 99 2D     	jsr cangu			; can we go up?
003634  3  D0 6E        	bne ifalls			; can't move up, go down next.
003636  3  A0 08        	ldy #8
003638  3  B1 68        	lda (z80_ix),y
00363A  3  38           	sec
00363B  3  E9 01        	sbc #1
00363D  3  91 68        	sta (z80_ix),y			; adjust new x coord.
00363F  3  C6 63        	dec z80_b
003641  3  D0 EE        	bne gravu0
003643  3  60           	rts
003644  3               gravst:
003644  3  A0 0D        	ldy #13
003646  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003648  3  85 66        	sta z80_l
00364A  3  A0 0E        	ldy #14
00364C  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00364E  3  85 67        	sta z80_h
003650  3               
003650  3  A9 00        	lda #0				; null value in pointer.
003652  3  A0 0D        	ldy #13
003654  3  91 68        	sta (z80_ix),y			; store new pointer low.
003656  3  C8           	iny
003657  3  91 68        	sta (z80_ix),y			; store new pointer high.
003659  3               
003659  3  A0 00        	ldy #0
00365B  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
00365D  3  C9 63        	cmp #99				; is it the end marker?
00365F  3               evftf:
00365F  3  F0 01        	beq :+				; yes, fallen too far.
003661  3  60           	rts
003662  3               :
003662  3  4C 2C 3C     	jmp evnt15			; EVENT FELLTOOFAR
003665  3               
003665  3               ;------------------------------------------------
003665  3               ; Initiate fall check.
003665  3               ;------------------------------------------------
003665  3               
003665  3               ifall:
003665  3  A0 0D        	ldy #13
003667  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
003669  3  85 66        	sta z80_l
00366B  3  A0 0E        	ldy #14
00366D  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
00366F  3  85 67        	sta z80_h			; high byte in accumulator.
003671  3  05 66        	ora z80_l			; merge in low byte.
003673  3  F0 01        	beq :+
003675  3  60           	rts				; if either is set, we're already in the air.
003676  3               :
003676  3  A0 09        	ldy #9
003678  3  B1 68        	lda (z80_ix),y			; y coordinate.
00367A  3  85 rr        	sta dispx
00367C  3  A0 08        	ldy #8
00367E  3  B1 68        	lda (z80_ix),y			; look x coordinate.
003680  3  18           	clc
003681  3               numsp7:
003681  3  69 09        	adc #SPR_HGT			; add 16 pixels.
003683  3  85 rr        	sta dispy			; set up test coordinates.
003685  3  20 64 2F     	jsr tstbl			; get map address.
003688  3  20 91 2E     	jsr plchk			; block, platform check.
00368B  3  F0 01        	beq :+
00368D  3  60           	rts				; it's solid, don't fall.
00368E  3               :
00368E  3  E6 rr        	inc bufaddr			; look right one cell.
003690  3  20 91 2E     	jsr plchk			; block, platform check.
003693  3  F0 01        	beq :+
003695  3  60           	rts				; it's solid, don't fall.
003696  3               :
003696  3  A5 rr        	lda dispx			; y coordinate.
003698  3  29 07        	and #7				; position straddling block cells.
00369A  3  F0 08        	beq ifalls			; no more checks needed.
00369C  3  E6 rr        	inc bufaddr			; look to third cell.
00369E  3  20 91 2E     	jsr plchk			; block, platform check.
0036A1  3  F0 01        	beq :+
0036A3  3  60           	rts				; it's solid, don't fall.
0036A4  3               :
0036A4  3               ifalls:
0036A4  3  A9 AD        	lda #<jtab			; jump table start.
0036A6  3  85 66        	sta z80_l
0036A8  3  A9 47        	lda #>jtab
0036AA  3  85 67        	sta z80_h
0036AC  3               ifal0:
0036AC  3  E6 66        	inc z80_l			; point to next value.
0036AE  3  D0 02        	bne :+
0036B0  3  E6 67        	inc z80_h
0036B2  3               :
0036B2  3  A0 00        	ldy #0
0036B4  3  B1 66        	lda (z80_hl),y			; fetch value.
0036B6  3  F0 F4        	beq ifal0			; no, get next value.
0036B8  3  C9 63        	cmp #99				; reached end of table?
0036BA  3  D0 01        	bne :+
0036BC  3  60           	rts				; yes, don't fall.
0036BD  3               :
0036BD  3  C9 80        	cmp #128			; is it going up?
0036BF  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0036C1  3               
0036C1  3  A0 0D        	ldy #13
0036C3  3  A5 66        	lda z80_l
0036C5  3  91 68        	sta (z80_ix),y 			; set jump low.
0036C7  3  A0 0E        	ldy #14
0036C9  3  A5 67        	lda z80_h
0036CB  3  91 68        	sta (z80_ix),y 			; set jump high.
0036CD  3  60           	rts
0036CE  3               
0036CE  3               
0036CE  3               ;----------------------------------------------------
0036CE  3               ; Get frame data for a particular sprite.
0036CE  3               ; Input:
0036CE  3               ;  a		= framenumer
0036CE  3               ; Output:
0036CE  3               ;  hl		= frame address
0036CE  3               ;
0036CE  3               ; global:	hl,frmptr
0036CE  3               ; local:	-
0036CE  3               ; calls:	-
0036CE  3               ;----------------------------------------------------
0036CE  3               
0036CE  3               gfrm:
0036CE  3  0A           	asl a	 		 	; multiple of 2.
0036CF  3  18           	clc
0036D0  3  6D 17 28     	adc frmptr 			; frames used by game.
0036D3  3  85 66        	sta z80_l
0036D5  3  AD 18 28     	lda frmptr+1
0036D8  3  69 00        	adc #0
0036DA  3  85 67        	sta z80_h 			; point to frame start.
0036DC  3  60           	rts
0036DD  3               
0036DD  3               ;----------------------------------------------------
0036DD  3               ; Find sprite list for current room.
0036DD  3               ;
0036DD  3               ; global:	hl
0036DD  3               ; local:	x,y
0036DD  3               ; calls:	-
0036DD  3               ;----------------------------------------------------
0036DD  3               
0036DD  3               sprlst:
0036DD  3  A9 7E        	lda #<nmedat 			; list of enemy sprites.
0036DF  3  85 66        	sta z80_l
0036E1  3  A9 44        	lda #>nmedat
0036E3  3  85 67        	sta z80_h
0036E5  3  A6 rr        	ldx scno 			; screen number.
0036E7  3  D0 01        	bne sprls2 			; is it the first screen?
0036E9  3  60           	rts 				; yes, don't need to search data.
0036EA  3               sprls2:
0036EA  3  A0 00        	ldy #0
0036EC  3               sprls1:
0036EC  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
0036EE  3  C9 FF        	cmp #255			; is it an end marker?
0036F0  3  F0 0E        	beq sprls0 			; yes, end of this room.
0036F2  3               
0036F2  3  18           	clc 				; point to next sprite in list.
0036F3  3  A5 66        	lda z80_l
0036F5  3  69 04        	adc #NMESIZ
0036F7  3  85 66        	sta z80_l
0036F9  3  90 02        	bcc :+
0036FB  3  E6 67        	inc z80_h
0036FD  3               :
0036FD  3  4C EC 36     	jmp sprls1 			; continue until end of room.
003700  3               sprls0:
003700  3  E6 66        	inc z80_l 			; point to start of next screen.s
003702  3  D0 02        	bne :+
003704  3  E6 67        	inc z80_h
003706  3               :
003706  3  CA           	dex
003707  3  D0 E3        	bne sprls1 			; continue until room found.
003709  3  60           	rts
00370A  3               
00370A  3               
00370A  3               ;----------------------------------------------------
00370A  3               ; Clear all but a single player sprite.
00370A  3               ;
00370A  3               ; global:	-
00370A  3               ; local:	x,y,ix
00370A  3               ; calls:	-
00370A  3               ;----------------------------------------------------
00370A  3               
00370A  3               nspr:
00370A  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00370C  3  85 rr        	sta sprcnt
00370E  3  A9 AC        	lda #<sprtab 			; sprite table.
003710  3  85 68        	sta z80_x
003712  3  A9 38        	lda #>sprtab
003714  3  85 69        	sta z80_i
003716  3               nspr0:
003716  3  A0 00        	ldy #0 				; fetch sprite type.
003718  3  B1 68        	lda (z80_ix),y 			; is it a player?
00371A  3  F0 1A        	beq nspr1 			; yes, keep this one.
00371C  3               
00371C  3  A9 FF        	lda #255
00371E  3  A0 00        	ldy #0 				; fetch sprite type.
003720  3  91 68        	sta (z80_ix),y 			; delete sprite.
003722  3  A0 05        	ldy #5
003724  3  91 68        	sta (z80_ix),y 			; remove next type.
003726  3               
003726  3  18           	clc	 			; next sprite.
003727  3  A5 68        	lda z80_x
003729  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00372B  3  85 68        	sta z80_x
00372D  3  90 02        	bcc :+
00372F  3  E6 69        	inc z80_i
003731  3               :
003731  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003733  3  D0 E1        	bne nspr0
003735  3  60           	rts
003736  3               nspr1:
003736  3  A9 FF        	lda #255
003738  3  A0 00        	ldy #0
00373A  3  91 68        	sta (z80_ix),y 			; delete sprite.
00373C  3               
00373C  3  18           	clc	 			; point to next sprite.
00373D  3  A5 68        	lda z80_x
00373F  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003741  3  85 68        	sta z80_x
003743  3  90 02        	bcc :+
003745  3  E6 69        	inc z80_i
003747  3               :
003747  3  C6 rr        	dec sprcnt	 			; one less to do.
003749  3  D0 01        	bne nspr2
00374B  3  60           	rts
00374C  3               nspr2:
00374C  3  A9 FF        	lda #255
00374E  3  A0 00        	ldy #0
003750  3  91 68        	sta (z80_ix),y 			; delete sprite.
003752  3  A0 05        	ldy #5
003754  3  91 68        	sta (z80_ix),y 			; remove next type.
003756  3               
003756  3  18           	clc	 			; next sprite.
003757  3  A5 68        	lda z80_x
003759  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00375B  3  85 68        	sta z80_x
00375D  3  90 02        	bcc :+
00375F  3  E6 69        	inc z80_i
003761  3               :
003761  3  C6 rr        	dec sprcnt	 			; one less space in table.
003763  3  D0 E7        	bne nspr2
003765  3  60           	rts
003766  3               
003766  3               ;----------------------------------------------------------
003766  3               ; Two initialisation routines.
003766  3               ; Initialise sprites - copy everything from list to table.
003766  3               ;
003766  3               ; global:	-
003766  3               ; local:	x,y,ix
003766  3               ; calls:	cpsp
003766  3               ;----------------------------------------------------------
003766  3               
003766  3               ispr:
003766  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003768  3  85 rr        	sta sprcnt
00376A  3  A9 AC        	lda #<sprtab			; sprite table.
00376C  3  85 68        	sta z80_x
00376E  3  A9 38        	lda #>sprtab
003770  3  85 69        	sta z80_i
003772  3               ispr2:
003772  3  A0 00        	ldy #0
003774  3  B1 66        	lda (z80_hl),y 			; fetch byte.
003776  3  C9 FF        	cmp #255 			; is it an end marker?
003778  3  D0 01        	bne :+
00377A  3  60           	rts 				; yes, no more to do.
00377B  3               :
00377B  3               ispr1:
00377B  3  A0 00        	ldy #0
00377D  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
00377F  3  C9 FF        	cmp #255 			; is it enabled yet?
003781  3  D0 08        	bne ispr4			; yes, try another slot.
003783  3               
003783  3  A0 05        	ldy #5
003785  3  B1 68        	lda (z80_ix),y		 	; next type.
003787  3  C9 FF        	cmp #255 			; is it enabled yet?
003789  3  F0 10        	beq ispr3 			; no, process this one.
00378B  3               ispr4:
00378B  3  18           	clc 				; next sprite.
00378C  3  A5 68        	lda z80_x
00378E  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003790  3  85 68        	sta z80_x
003792  3  90 02        	bcc :+
003794  3  E6 69        	inc z80_i
003796  3               :
003796  3  C6 rr        	dec sprcnt
003798  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00379A  3  60           	rts  				; no more room in table.
00379B  3               ispr3:
00379B  3  20 EE 37     	jsr cpsp			; initialise a sprite.
00379E  3  C6 rr        	dec sprcnt			; one less space in the table.
0037A0  3  D0 D0        	bne ispr2
0037A2  3  60           	rts
0037A3  3               
0037A3  3               
0037A3  3               ;-----------------------------------------------------------------------
0037A3  3               ; Initialise sprites - but not player, we're keeping the old one.
0037A3  3               ;
0037A3  3               ; global:	-
0037A3  3               ; local:	x,y,ix
0037A3  3               ; calls:	cpsp
0037A3  3               ;-----------------------------------------------------------------------
0037A3  3               
0037A3  3               kspr:
0037A3  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0037A5  3  A9 AC        	lda #<sprtab 			; sprite table.
0037A7  3  85 68        	sta z80_x
0037A9  3  A9 38        	lda #>sprtab
0037AB  3  85 69        	sta z80_i
0037AD  3               kspr2:
0037AD  3  A0 00        	ldy #0
0037AF  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0037B1  3  C9 FF        	cmp #255 			; is it an end marker?
0037B3  3  D0 01        	bne :+
0037B5  3  60           	rts 				; yes, no more to do.
0037B6  3               :
0037B6  3  C9 00        	cmp #0
0037B8  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0037BA  3               
0037BA  3  18           	clc 				; next sprite.
0037BB  3  A5 66        	lda z80_l
0037BD  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0037BF  3  85 66        	sta z80_l
0037C1  3  90 02        	bcc :+
0037C3  3  E6 67        	inc z80_h
0037C5  3               :
0037C5  3  4C AD 37     	jmp kspr2
0037C8  3               kspr1:
0037C8  3  A0 00        	ldy #0 				; fetch sprite type.
0037CA  3  B1 68        	lda (z80_ix),y
0037CC  3  C9 FF        	cmp #255 			; is it enabled yet?
0037CE  3  D0 08        	bne kspr4 			; yes, try another slot.
0037D0  3               
0037D0  3  A0 05        	ldy #5 				; next type.
0037D2  3  B1 68        	lda (z80_ix),y
0037D4  3  C9 FF        	cmp #255 			; is it enabled yet?
0037D6  3  F0 0F        	beq kspr3 			; no, process this one.
0037D8  3               kspr4:
0037D8  3  18           	clc 				; next sprite.
0037D9  3  A5 68        	lda z80_x
0037DB  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0037DD  3  85 68        	sta z80_x
0037DF  3  90 02        	bcc :+
0037E1  3  E6 69        	inc z80_i
0037E3  3               :
0037E3  3  CA           	dex	 			; repeat for remaining sprites.
0037E4  3  D0 E2        	bne kspr1
0037E6  3  60           	rts  				; no more room in table.
0037E7  3               kspr3:
0037E7  3  20 EE 37     	jsr cpsp 			; copy sprite to table.
0037EA  3  CA           	dex	 			; one less space in the table.
0037EB  3  D0 C0        	bne kspr2
0037ED  3  60           	rts
0037EE  3               
0037EE  3               ;----------------------------------------------
0037EE  3               ; Copy sprite from list to table.
0037EE  3               ;
0037EE  3               ; global:	hl,ix
0037EE  3               ; local:	y
0037EE  3               ; calls:	evnt09
0037EE  3               ;----------------------------------------------
0037EE  3               
0037EE  3               cpsp:
0037EE  3  A0 00        	ldy #0				; fetch byte from table.
0037F0  3  B1 66        	lda (z80_hl),y
0037F2  3  91 68        	sta (z80_ix),y			; set up type.
0037F4  3  A0 05        	ldy #PAM1ST
0037F6  3  91 68        	sta (z80_ix),y 			; set up type.
0037F8  3               
0037F8  3  E6 66        	inc z80_l 			; move to next byte.
0037FA  3  D0 02        	bne :+
0037FC  3  E6 67        	inc z80_h
0037FE  3               :
0037FE  3  A0 00        	ldy #0 				; fetch byte from table.
003800  3  B1 66        	lda (z80_hl),y
003802  3  A0 06        	ldy #6
003804  3  91 68        	sta (z80_ix),y			; set up image.
003806  3               
003806  3  E6 66        	inc z80_l 			; move to next byte.
003808  3  D0 02        	bne :+
00380A  3  E6 67        	inc z80_h
00380C  3               :
00380C  3  A0 00        	ldy #0
00380E  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003810  3  A0 08        	ldy #8
003812  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003814  3               
003814  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003816  3  A0 03        	ldy #3
003818  3  91 68        	sta (z80_ix),y
00381A  3               
00381A  3  E6 66        	inc z80_l 			; move to next byte.
00381C  3  D0 02        	bne :+
00381E  3  E6 67        	inc z80_h
003820  3               :
003820  3  A0 00        	ldy #0 				; fetch byte from table.
003822  3  B1 66        	lda (z80_hl),y
003824  3  A0 09        	ldy #9
003826  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003828  3               
003828  3  E6 66        	inc z80_l 			; move to next byte.
00382A  3  D0 02        	bne :+
00382C  3  E6 67        	inc z80_h
00382E  3               :
00382E  3  A9 00        	lda #0				; zeroes in accumulator.
003830  3  A0 07        	ldy #7 				; reset frame number.
003832  3  91 68        	sta (z80_ix),y
003834  3  A0 0A        	ldy #10 			; reset direction.
003836  3  91 68        	sta (z80_ix),y
003838  3  A0 0D        	ldy #13				; reset jump pointer low.
00383A  3  91 68        	sta (z80_ix),y
00383C  3  A0 0E        	ldy #14	 			; reset jump pointer high.
00383E  3  91 68        	sta (z80_ix),y
003840  3               
003840  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003842  3  A0 10        	ldy #16
003844  3  91 68        	sta (z80_ix),y
003846  3               evis0:
003846  3  A5 69        	lda z80_i
003848  3  48           	pha
003849  3  A5 68        	lda z80_x
00384B  3  48           	pha
00384C  3  A5 67        	lda z80_h
00384E  3  48           	pha
00384F  3  A5 66        	lda z80_l
003851  3  48           	pha
003852  3               
003852  3  20 E2 3B     	jsr evnt09 			; perform event.
003855  3               
003855  3  68           	pla
003856  3  85 66        	sta z80_l
003858  3  68           	pla
003859  3  85 67        	sta z80_h
00385B  3  68           	pla
00385C  3  85 68        	sta z80_x
00385E  3  68           	pla
00385F  3  85 69        	sta z80_i
003861  3               
003861  3  18           	clc
003862  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
003864  3  69 11        	adc #TABSIZ		 	; next sprite.
003866  3  85 68        	sta z80_x
003868  3  90 02        	bcc :+
00386A  3  E6 69        	inc z80_i
00386C  3               :
00386C  3  60           	rts
00386D  3               
00386D  3               
00386D  3               ;-------------------------------------
00386D  3               ; Clear the play area window.
00386D  3               ;-------------------------------------
00386D  3               
00386D  3               clw:
00386D  3  AD 1F 28     	lda wintop			; get coordinates of window.
003870  3  85 rr        	sta dispy			; put into dispx for calculation.
003872  3  AD 20 28     	lda winlft
003875  3  85 rr        	sta dispx
003877  3               
003877  3  AD 21 28     	lda winhgt			; height of window.
00387A  3  85 rr        	sta rrow			; copy to b register.
00387C  3               clw3:
00387C  3  AD 22 28     	lda winwid 			; width of window.
00387F  3  85 rr        	sta rcol
003881  3               clw2:
003881  3  20 82 2C     	jsr gprad 			; get print address.
003884  3  A9 00        	lda #0				; zero byte to write.
003886  3  A2 07        	ldx #7				; pixel height of each cell.
003888  3               clw1:
003888  3  BC BC 2C     	ldy scrtab,x
00388B  3  91 rr        	sta (scraddr),y 			; copy to screen.
00388D  3  CA           	dex				; next screen row down.
00388E  3  10 F8        	bpl clw1
003890  3               
003890  3  E6 rr        	inc dispx			; next column.
003892  3  C6 rr        	dec rcol			; one less to do.
003894  3  D0 EB        	bne clw2			; repeat for remaining columns.
003896  3               
003896  3  AD 20 28     	lda winlft			; get left edge.
003899  3  85 rr        	sta dispx 			; reset x.
00389B  3  E6 rr        	inc dispy 			; next line down.
00389D  3               
00389D  3  C6 rr        	dec rrow
00389F  3  D0 DB        	bne clw3			; repeat down the screen.
0038A1  3               
0038A1  3  AD 1F 28     	lda wintop			; get coordinates of window.
0038A4  3  85 rr        	sta chary			; put into display position.
0038A6  3  AD 20 28     	lda winlft
0038A9  3  85 rr        	sta charx
0038AB  3  60           	rts
0038AC  3               
0038AC  3               
0038AC  3               ;----------------------------------------------------------
0038AC  3               ; Effects code.
0038AC  3               ; Ticker routine is called 25 times per second.
0038AC  3               ;
0038AC  3               ; HL = txtscr = left text screen address
0038AC  3               ; DE = txtscr+txtwid-1 = right text screen address
0038AC  3               ; BC = txtpos = text scroller position
0038AC  3               ;
0038AC  3               ;----------------------------------------------------------
0038AC  3               
0038AC  3               .if sflag
0038AC  3               scrly:
0038AC  3               	rts
0038AC  3               	.word txtscr         	; get left screen address.
0038AC  3               	sta scr_l
0038AC  3               	lda txtscr+1
0038AC  3               	sta scr_l+1
0038AC  3               	sta scr_r+1
0038AC  3               
0038AC  3               	stx xtmp
0038AC  3               
0038AC  3               	clc         		; get right screen address.
0038AC  3               	lda scr_l
0038AC  3               	adc txtwid
0038AC  3               	sta scr_r
0038AC  3               	dec scr_r
0038AC  3               scrly1:
0038AC  3               	ldy txtwid		; set txtwide
0038AC  3               	dey
0038AC  3               	clc
0038AC  3               scrly0:
0038AC  3               	lda (scr_l),y		; scroll 1 line
0038AC  3               	rol a
0038AC  3               	sta (scr_l),y
0038AC  3               	dey
0038AC  3               	bpl scrly0
0038AC  3               
0038AC  3               	clc			; point to next line
0038AC  3               	lda scr_l
0038AC  3               	adc #32
0038AC  3               	sta scr_l
0038AC  3               	bcc scrly1		; repeat 8 times
0038AC  3               
0038AC  3               	lda txtpos 		; get text pointer.
0038AC  3               	sta scr_txt
0038AC  3               	lda txtpos+1
0038AC  3               	sta scr_txt+1
0038AC  3               
0038AC  3               	ldy #0
0038AC  3               	lda (scr_txt),y 		; find character we're displaying.
0038AC  3               	and #127 		; remove end marker bit if applicable.
0038AC  3               	cmp #13			; is it newline?
0038AC  3               	bne scrly5 		; no, it's okay.
0038AC  3               	lda #32			; convert to a space instead.
0038AC  3               scrly5:
0038AC  3               	sta fntaddr		; calculate char address
0038AC  3               	lda #0
0038AC  3               	sta fntaddr+1
0038AC  3               	asl fntaddr  		; multiply char by 8.
0038AC  3               	rol fntaddr+1
0038AC  3               	asl fntaddr
0038AC  3               	rol fntaddr+1
0038AC  3               	asl fntaddr
0038AC  3               	rol fntaddr+1
0038AC  3               	lda fntaddr
0038AC  3               	clc
0038AC  3               	adc #<(FONT-256)
0038AC  3               	sta scrly3+1		; that's the low byte.
0038AC  3               	lda fntaddr+1
0038AC  3               	adc #>(FONT-256)
0038AC  3               	sta scrly3+2		; add displacement.
0038AC  3               
0038AC  3               	ldx #0
0038AC  3               scrly3:
0038AC  3               	lda $3333,x		; get image of char line.
0038AC  3               	and txtbit
0038AC  3               	beq scrly2		; don't plot pixel
0038AC  3               	ldy scrline,x
0038AC  3               	lda (scr_r),y
0038AC  3               	clc
0038AC  3               	ora #1
0038AC  3               	sta (scr_r),y		; plot pixel
0038AC  3               scrly2:
0038AC  3               	inx			; next line of char.
0038AC  3               	cpx #8
0038AC  3               	bne scrly3
0038AC  3               
0038AC  3               	lsr txtbit		; bit of text to display.
0038AC  3               	bcs :+
0038AC  3               	rts
0038AC  3               :
0038AC  3               	ldy #0
0038AC  3               	lda (scr_txt),y 	; what was the character?
0038AC  3               	asl a	  		; end of message?
0038AC  3               	bcs scrly4
0038AC  3               	inc txtpos
0038AC  3               	bne :+
0038AC  3               	inc txtpos+1
0038AC  3               :
0038AC  3               	jmp scrly6 		; not yet - continue.
0038AC  3               scrly4:
0038AC  3               	lda txtini 		; start of scrolling message.
0038AC  3               	sta txtpos
0038AC  3               	lda txtini+1
0038AC  3               	sta txtpos+1
0038AC  3               scrly6:
0038AC  3               	lda #128
0038AC  3               	sta txtbit
0038AC  3               	ldx xtmp
0038AC  3               	rts
0038AC  3               
0038AC  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0038AC  3               
0038AC  3               ;-------------------------------------------------------
0038AC  3               ; Entry TICKER command
0038AC  3               ;
0038AC  3               ; Entry:
0038AC  3               ;  z80_b = message nr
0038AC  3               ;  z80_c = width
0038AC  3               ;-------------------------------------------------------
0038AC  3               
0038AC  3               iscrly:
0038AC  3               	jsr prescr 		; set up display position.
0038AC  3               
0038AC  3               	lda #<msgdat 		; text messages.
0038AC  3               	sta z80_l
0038AC  3               	lda #>msgdat
0038AC  3               	sta z80_h
0038AC  3               
0038AC  3               	lda z80_c 		; width.
0038AC  3               	sec
0038AC  3               	sbc #1			; subtract one.
0038AC  3               	cmp #32 		; is it between 1 and 32?
0038AC  3               	bcc :+
0038AC  3               	lda #$60
0038AC  3               	jmp iscrl0		; no, disable messages.
0038AC  3               :
0038AC  3               	ldx z80_b		; message number.
0038AC  3               	jsr getwrd 		; find message start.
0038AC  3               
0038AC  3               	lda z80_l		; set initial text position.
0038AC  3               	sta txtini
0038AC  3               	lda z80_h
0038AC  3               	sta txtini+1
0038AC  3               
0038AC  3               	lda #$ad		; code for lda adrr
0038AC  3               iscrl0:
0038AC  3               	sta scrly		; enable/disable scrolling routine.
0038AC  3               
0038AC  3               	jsr prescr 		; set up display position.
0038AC  3               	jsr gprad 		; get print address.
0038AC  3               
0038AC  3               	lda scraddr 		; set text screen address.
0038AC  3               	sta txtscr
0038AC  3               	lda scraddr+1
0038AC  3               	sta txtscr+1
0038AC  3               
0038AC  3               	lda z80_c		; width.
0038AC  3               	sta txtwid		; set width in working storage.
0038AC  3               
0038AC  3               	lda #128 		; start with leftmost bit.
0038AC  3               	sta txtbit
0038AC  3               
0038AC  3               	jmp scrly4
0038AC  3               .endif
0038AC  3               
0038AC  3               ;------------------------------------------------------------------
0038AC  3               ; Dig routine, conditional assembly depending on dflag
0038AC  3               ;------------------------------------------------------------------
0038AC  3               .if dflag
0038AC  3               dig:
0038AC  3               	and #3
0038AC  3               	beq digr		; dig right
0038AC  3               	cmp #1
0038AC  3               	beq digl		; dig left
0038AC  3               	cmp #2
0038AC  3               	beq digd		; dig down
0038AC  3               
0038AC  3               ; Dig up.
0038AC  3               
0038AC  3               digu:				; dig up
0038AC  3               	ldy #8
0038AC  3               	lda (z80_ix),y
0038AC  3               	sec
0038AC  3               	sbc #2
0038AC  3               	sta dispy		; set y
0038AC  3               
0038AC  3               	iny
0038AC  3               	lda (z80_ix),y
0038AC  3               	sta dispx		; set x
0038AC  3               	jmp digv
0038AC  3               
0038AC  3               ; Dig down.
0038AC  3               
0038AC  3               digd:
0038AC  3               	ldy #9
0038AC  3               	lda (z80_ix),y
0038AC  3               	sta dispx		; set y
0038AC  3               
0038AC  3               	dey
0038AC  3               	clc
0038AC  3               	lda (z80_ix),y
0038AC  3               	adc #16
0038AC  3               	sta dispy		; set y
0038AC  3               	jmp digv
0038AC  3               
0038AC  3               ; Dig left.
0038AC  3               
0038AC  3               digl:
0038AC  3               	ldy #8
0038AC  3               	lda (z80_ix),y
0038AC  3               	sta dispy		; set y
0038AC  3               
0038AC  3               	iny
0038AC  3               	lda (z80_ix),y
0038AC  3               	sec
0038AC  3               	sbc #2			; x=x-2
0038AC  3               	sta dispx		; set x
0038AC  3               	jmp digh
0038AC  3               
0038AC  3               ; Dig right.
0038AC  3               
0038AC  3               digr:
0038AC  3               	ldy #8
0038AC  3               	lda (z80_ix),y
0038AC  3               	sta dispy		; set y
0038AC  3               
0038AC  3               	iny
0038AC  3               	lda (z80_ix),y
0038AC  3               	clc
0038AC  3               	adc #16
0038AC  3               	sta dispx		; set x+16
0038AC  3               	jmp digh
0038AC  3               
0038AC  3               ; Vertical digging
0038AC  3               
0038AC  3               digv:
0038AC  3               	jsr tstbl		; check blocktype in MAP
0038AC  3               	jsr fdchk		; test if FODDER
0038AC  3               
0038AC  3               	clc
0038AC  3               	lda dispx		; look 1 cell down
0038AC  3               	adc #8
0038AC  3               	sta dispx
0038AC  3               	jsr tstbl		; check blocktype in MAP
0038AC  3               	jsr fdchk
0038AC  3               	lda dispx
0038AC  3               	and #7
0038AC  3               	bne :+
0038AC  3               	rts
0038AC  3               :
0038AC  3               	clc
0038AC  3               	lda dispx		; look 1 cell down
0038AC  3               	adc #8
0038AC  3               	sta dispx
0038AC  3               	jsr tstbl		; check blocktype in MAP
0038AC  3               	jmp fdchk
0038AC  3               
0038AC  3               ; Horizontal digging
0038AC  3               
0038AC  3               digh:
0038AC  3               	jsr tstbl		; check blocktype in MAP
0038AC  3               	jsr fdchk		; test if FODDER
0038AC  3               
0038AC  3               	clc
0038AC  3               	lda dispy		; look 1 cell down
0038AC  3               	adc #8
0038AC  3               	sta dispy
0038AC  3               	jsr tstbl		; check blocktype in MAP
0038AC  3               	jsr fdchk
0038AC  3               	lda dispy
0038AC  3               	and #7
0038AC  3               	bne :+
0038AC  3               	rts
0038AC  3               :
0038AC  3               	clc
0038AC  3               	lda dispy		; look 1 cell down
0038AC  3               	adc #8
0038AC  3               	sta dispy
0038AC  3               	jsr tstbl		; check blocktype in MAP
0038AC  3               	jmp fdchk
0038AC  3               
0038AC  3               digcnt:	.byte 0
0038AC  3               
0038AC  3               .endif
0038AC  3               
0038AC  3               ;------------------------------------------------------------------
0038AC  3               ; Sprite table
0038AC  3               ;------------------------------------------------------------------
0038AC  3               
0038AC  3               
0038AC  3               ; ix+0  = type.
0038AC  3               ; ix+1  = sprite image number.
0038AC  3               ; ix+2  = frame.
0038AC  3               ; ix+3  = y coord.
0038AC  3               ; ix+4  = x coord.
0038AC  3               
0038AC  3               ; ix+5  = new type.
0038AC  3               ; ix+6  = new image number.
0038AC  3               ; ix+7  = new frame.
0038AC  3               ; ix+8  = new y coord.
0038AC  3               ; ix+9  = new x coord.
0038AC  3               
0038AC  3               ; ix+10 = direction.
0038AC  3               ; ix+11 = parameter 1.
0038AC  3               ; ix+12 = parameter 2.
0038AC  3               ; ix+13 = jump pointer low.
0038AC  3               ; ix+14 = jump pointer high.
0038AC  3               ; ix+15 = data pointer low.
0038AC  3               ; ix+16 = data pointer high.
0038AC  3               
0038AC  3               ; block NUMSPR * TABSIZ,255
0038AC  3               
0038AC  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0038B0  3  FF FF FF FF  
0038B4  3  FF FF FF FF  
003978  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00397C  3  FF FF FF 00  
003980  3  C0 78 00 00  
003989  3  07           roomtb:	.byte 7                      ; start room map offset.
00398A  3               
00398A  3               ; User routine.  Put your own code in here to be called with USER instruction.
00398A  3               ; if USER has an argument it will be passed in the accumulator.
00398A  3               
00398A  3               user:
00398A  3               	.include "user.inc"
00398A  4  60           	rts
00398B  4               
00398B  3               
00398B  3               setfgcol:
00398B  3  29 07        	and #7
00398D  3  8D 9A 39     	sta fcolour
003990  3  60           	rts
003991  3               
003991  3               setbgcol:
003991  3  29 07        	and #7
003993  3  18           	clc
003994  3  69 10        	adc #16
003996  3  8D 9B 39     	sta bcolour
003999  3  60           	rts
00399A  3               
00399A  3  07           fcolour:	.byte t_white
00399B  3  17           bcolour:	.byte g_white
00399C  3               
00399C  3               ; Everything below here will be generated by the editors.
00399C  3               
00399C  3  60                   rts
00399D  3               WINDOWTOP = 0
00399D  3               WINDOWLFT = 1
00399D  3               WINDOWHGT = 25
00399D  3               WINDOWWID = 39 ;
00399D  3               MAPWID = 3
00399D  3  FF FF FF             .byte 255,255,255
0039A0  3               mapdat:
0039A0  3  FF 00 FF             .byte 255,0,255
0039A3  3  FF FF FF             .byte 255,255,255
0039A6  3  01           stmap:  .byte 1
0039A7  3               
0039A7  3               evnt00:
0039A7  3  A0 0B                ldy #11
0039A9  3  B1 68                lda (z80_ix),y
0039AB  3  18                   clc
0039AC  3  69 01                adc #1
0039AE  3  A0 0B                ldy #11
0039B0  3  91 68                sta (z80_ix),y
0039B2  3  A9 00                lda #0
0039B4  3  85 rr                sta varm
0039B6  3  A5 rr                lda joyval	; KEY
0039B8  3  29 08                and #8
0039BA  3  F0 03                beq :+
0039BC  3  4C DA 39             jmp a00117
0039BF  3               :
0039BF  3  A9 04                lda #4
0039C1  3  A0 06                ldy #6
0039C3  3  91 68                sta (z80_ix),y
0039C5  3  A9 01                lda #1
0039C7  3  85 rr                sta varm
0039C9  3  20 99 2D             jsr cangu	; CANGOUP
0039CC  3  F0 03                beq :+
0039CE  3  4C DA 39             jmp a00117
0039D1  3               :
0039D1  3  A0 08                ldy #8 		; SPRITEUP
0039D3  3  B1 68                lda (z80_ix),y
0039D5  3  38                   sec
0039D6  3  E9 01                sbc #1
0039D8  3  91 68                sta (z80_ix),y
0039DA  3  A5 rr        a00117: lda joyval	; KEY
0039DC  3  29 04                and #4
0039DE  3  F0 03                beq :+
0039E0  3  4C FE 39             jmp a00200
0039E3  3               :
0039E3  3  A9 05                lda #5
0039E5  3  A0 06                ldy #6
0039E7  3  91 68                sta (z80_ix),y
0039E9  3  A9 01                lda #1
0039EB  3  85 rr                sta varm
0039ED  3  20 E6 2D             jsr cangd	; CANGODOWN
0039F0  3  F0 03                beq :+
0039F2  3  4C FE 39             jmp a00200
0039F5  3               :
0039F5  3  A0 08                ldy #8 		; SPRITEDOWN
0039F7  3  B1 68                lda (z80_ix),y
0039F9  3  18                   clc
0039FA  3  69 01                adc #1
0039FC  3  91 68                sta (z80_ix),y
0039FE  3  A5 rr        a00200: lda joyval	; KEY
003A00  3  29 02                and #2
003A02  3  F0 03                beq :+
003A04  3  4C 2D 3A             jmp a00304
003A07  3               :
003A07  3  A9 03                lda #3
003A09  3  A0 06                ldy #6
003A0B  3  91 68                sta (z80_ix),y
003A0D  3  A9 01                lda #1
003A0F  3  85 rr                sta varm
003A11  3  20 33 2E             jsr cangl	; CANGOLEFT
003A14  3  F0 03                beq :+
003A16  3  4C 2D 3A             jmp a00304
003A19  3               :
003A19  3  A9 04                lda #4
003A1B  3  A0 09                ldy #9
003A1D  3  D1 68                cmp (z80_ix),y
003A1F  3  90 03                bcc *+5
003A21  3  4C 2D 3A             jmp a00304
003A24  3  A0 09                ldy #9 		; SPRITELEFT
003A26  3  B1 68                lda (z80_ix),y
003A28  3  38                   sec
003A29  3  E9 01                sbc #1
003A2B  3  91 68                sta (z80_ix),y
003A2D  3  A5 rr        a00304: lda joyval	; KEY
003A2F  3  29 01                and #1
003A31  3  F0 03                beq :+
003A33  3  4C 5E 3A             jmp a00414
003A36  3               :
003A36  3  A9 02                lda #2
003A38  3  A0 06                ldy #6
003A3A  3  91 68                sta (z80_ix),y
003A3C  3  A9 01                lda #1
003A3E  3  85 rr                sta varm
003A40  3  20 45 2E             jsr cangr	; CANGORIGHT
003A43  3  F0 03                beq :+
003A45  3  4C 5E 3A             jmp a00414
003A48  3               :
003A48  3  A9 46                lda #70
003A4A  3  A0 09                ldy #9
003A4C  3  D1 68                cmp (z80_ix),y
003A4E  3  90 02                bcc *+4
003A50  3  D0 03                bne *+5
003A52  3  4C 5E 3A             jmp a00414
003A55  3  A0 09                ldy #9 		; SPRITERIGHT
003A57  3  B1 68                lda (z80_ix),y
003A59  3  18                   clc
003A5A  3  69 01                adc #1
003A5C  3  91 68                sta (z80_ix),y
003A5E  3  A9 00        a00414: lda #0
003A60  3  C5 rr                cmp varm
003A62  3  90 03                bcc *+5
003A64  3  4C 6C 3A             jmp a00442
003A67  3  A9 00                lda #0		; ANIMATE
003A69  3  20 6A 34             jsr animsp
003A6C  3               a00442: ; SPRITEINK command
003A6C  3  A9 01                lda #1 	; COLLISION
003A6E  3  85 63                sta z80_b
003A70  3  20 B5 34             jsr sktyp
003A73  3  B0 03                bcs :+
003A75  3  4C 88 3A             jmp a00507
003A78  3               :
003A78  3  A9 18                lda #24		; AT
003A7A  3  85 rr                sta chary
003A7C  3  A9 04                lda #4
003A7E  3  85 rr                sta charx
003A80  3  A9 06                lda #6		; PRINT
003A82  3  20 E6 2F             jsr dmsg
003A85  3  4C 95 3A             jmp a00535
003A88  3  A9 18        a00507: lda #24		; AT
003A8A  3  85 rr                sta chary
003A8C  3  A9 04                lda #4
003A8E  3  85 rr                sta charx
003A90  3  A9 07                lda #7		; PRINT
003A92  3  20 E6 2F             jsr dmsg
003A95  3  60           a00535: rts
003A96  3               evnt01:
003A96  3  A9 00                lda #0		; ANIMATE
003A98  3  20 6A 34             jsr animsp
003A9B  3  A9 00                lda #0
003A9D  3  C5 rr                cmp varc
003A9F  3  F0 03                beq *+5
003AA1  3  4C CF 3A             jmp b00120
003AA4  3  A9 06                lda #CUSTOM	; CUSTOM
003AA6  3  85 63                sta z80_b
003AA8  3  20 A9 2E             jsr tded
003AAB  3  C5 63                cmp z80_b
003AAD  3  F0 03                beq :+
003AAF  3  4C C8 3A             jmp b00108
003AB2  3               :
003AB2  3  A9 03                lda #3
003AB4  3  85 65                sta z80_d	; GETRANDOM
003AB6  3  20 98 2F             jsr random
003AB9  3  85 67                sta z80_h
003ABB  3  20 42 2A             jsr imul
003ABE  3  A5 67                lda z80_h
003AC0  3  85 rr                sta varrnd
003AC2  3  A5 rr                lda varrnd
003AC4  3  A0 0A                ldy #10
003AC6  3  91 68                sta (z80_ix),y
003AC8  3  A9 01        b00108: lda #1
003ACA  3  85 rr                sta varc
003ACC  3  4C D3 3A             jmp b00128
003ACF  3  A9 00        b00120: lda #0
003AD1  3  85 rr                sta varc
003AD3  3  A9 00        b00128: lda #0
003AD5  3  A0 0A                ldy #10
003AD7  3  D1 68                cmp (z80_ix),y
003AD9  3  F0 03                beq *+5
003ADB  3  4C 1F 3B             jmp b00291
003ADE  3  20 33 2E             jsr cangl	; CANGOLEFT
003AE1  3  F0 03                beq :+
003AE3  3  4C 06 3B             jmp b00238
003AE6  3               :
003AE6  3  A9 04                lda #4
003AE8  3  A0 09                ldy #9
003AEA  3  D1 68                cmp (z80_ix),y
003AEC  3  90 03                bcc *+5
003AEE  3  4C FD 3A             jmp b00220
003AF1  3  A0 09                ldy #9 		; SPRITELEFT
003AF3  3  B1 68                lda (z80_ix),y
003AF5  3  38                   sec
003AF6  3  E9 01                sbc #1
003AF8  3  91 68                sta (z80_ix),y
003AFA  3  4C 03 3B             jmp b00233
003AFD  3  A9 01        b00220: lda #1
003AFF  3  A0 0A                ldy #10
003B01  3  91 68                sta (z80_ix),y
003B03  3  4C 1C 3B     b00233: jmp b00286
003B06  3  A9 03        b00238: lda #3
003B08  3  85 65                sta z80_d	; GETRANDOM
003B0A  3  20 98 2F             jsr random
003B0D  3  85 67                sta z80_h
003B0F  3  20 42 2A             jsr imul
003B12  3  A5 67                lda z80_h
003B14  3  85 rr                sta varrnd
003B16  3  A5 rr                lda varrnd
003B18  3  A0 0A                ldy #10
003B1A  3  91 68                sta (z80_ix),y
003B1C  3  4C DA 3B     b00286: jmp b00698
003B1F  3  A9 01        b00291: lda #1
003B21  3  A0 0A                ldy #10
003B23  3  D1 68                cmp (z80_ix),y
003B25  3  F0 03                beq *+5
003B27  3  4C 6D 3B             jmp b00459
003B2A  3  20 45 2E             jsr cangr	; CANGORIGHT
003B2D  3  F0 03                beq :+
003B2F  3  4C 54 3B             jmp b00405
003B32  3               :
003B32  3  A9 46                lda #70
003B34  3  A0 09                ldy #9
003B36  3  D1 68                cmp (z80_ix),y
003B38  3  90 02                bcc *+4
003B3A  3  D0 03                bne *+5
003B3C  3  4C 4B 3B             jmp b00387
003B3F  3  A0 09                ldy #9 		; SPRITERIGHT
003B41  3  B1 68                lda (z80_ix),y
003B43  3  18                   clc
003B44  3  69 01                adc #1
003B46  3  91 68                sta (z80_ix),y
003B48  3  4C 51 3B             jmp b00401
003B4B  3  A9 00        b00387: lda #0
003B4D  3  A0 0A                ldy #10
003B4F  3  91 68                sta (z80_ix),y
003B51  3  4C 6A 3B     b00401: jmp b00454
003B54  3  A9 03        b00405: lda #3
003B56  3  85 65                sta z80_d	; GETRANDOM
003B58  3  20 98 2F             jsr random
003B5B  3  85 67                sta z80_h
003B5D  3  20 42 2A             jsr imul
003B60  3  A5 67                lda z80_h
003B62  3  85 rr                sta varrnd
003B64  3  A5 rr                lda varrnd
003B66  3  A0 0A                ldy #10
003B68  3  91 68                sta (z80_ix),y
003B6A  3  4C DA 3B     b00454: jmp b00698
003B6D  3  A9 02        b00459: lda #2
003B6F  3  A0 0A                ldy #10
003B71  3  D1 68                cmp (z80_ix),y
003B73  3  F0 03                beq *+5
003B75  3  4C A5 3B             jmp b00580
003B78  3  20 99 2D             jsr cangu	; CANGOUP
003B7B  3  F0 03                beq :+
003B7D  3  4C 8C 3B             jmp b00527
003B80  3               :
003B80  3  A0 08                ldy #8 		; SPRITEUP
003B82  3  B1 68                lda (z80_ix),y
003B84  3  38                   sec
003B85  3  E9 01                sbc #1
003B87  3  91 68                sta (z80_ix),y
003B89  3  4C A2 3B             jmp b00575
003B8C  3  A9 03        b00527: lda #3
003B8E  3  85 65                sta z80_d	; GETRANDOM
003B90  3  20 98 2F             jsr random
003B93  3  85 67                sta z80_h
003B95  3  20 42 2A             jsr imul
003B98  3  A5 67                lda z80_h
003B9A  3  85 rr                sta varrnd
003B9C  3  A5 rr                lda varrnd
003B9E  3  A0 0A                ldy #10
003BA0  3  91 68                sta (z80_ix),y
003BA2  3  4C DA 3B     b00575: jmp b00698
003BA5  3  A9 03        b00580: lda #3
003BA7  3  A0 0A                ldy #10
003BA9  3  D1 68                cmp (z80_ix),y
003BAB  3  F0 03                beq *+5
003BAD  3  4C DA 3B             jmp b00698
003BB0  3  20 E6 2D             jsr cangd	; CANGODOWN
003BB3  3  F0 03                beq :+
003BB5  3  4C C4 3B             jmp b00649
003BB8  3               :
003BB8  3  A0 08                ldy #8 		; SPRITEDOWN
003BBA  3  B1 68                lda (z80_ix),y
003BBC  3  18                   clc
003BBD  3  69 01                adc #1
003BBF  3  91 68                sta (z80_ix),y
003BC1  3  4C DA 3B             jmp b00698
003BC4  3  A9 03        b00649: lda #3
003BC6  3  85 65                sta z80_d	; GETRANDOM
003BC8  3  20 98 2F             jsr random
003BCB  3  85 67                sta z80_h
003BCD  3  20 42 2A             jsr imul
003BD0  3  A5 67                lda z80_h
003BD2  3  85 rr                sta varrnd
003BD4  3  A5 rr                lda varrnd
003BD6  3  A0 0A                ldy #10
003BD8  3  91 68                sta (z80_ix),y
003BDA  3  60           b00698: rts
003BDB  3               evnt02:
003BDB  3  60                   rts
003BDC  3               evnt03:
003BDC  3  60                   rts
003BDD  3               evnt04:
003BDD  3  60                   rts
003BDE  3               evnt05:
003BDE  3  60                   rts
003BDF  3               evnt06:
003BDF  3  60                   rts
003BE0  3               evnt07:
003BE0  3  60                   rts
003BE1  3               evnt08:
003BE1  3  60                   rts
003BE2  3               evnt09:
003BE2  3  A9 01                lda #1
003BE4  3  A0 05                ldy #5
003BE6  3  D1 68                cmp (z80_ix),y
003BE8  3  F0 03                beq *+5
003BEA  3  4C F3 3B             jmp j00037
003BED  3  A9 00                lda #0
003BEF  3  A0 0A                ldy #10
003BF1  3  91 68                sta (z80_ix),y
003BF3  3  A9 02        j00037: lda #2
003BF5  3  A0 05                ldy #5
003BF7  3  D1 68                cmp (z80_ix),y
003BF9  3  F0 03                beq *+5
003BFB  3  4C 04 3C             jmp j00073
003BFE  3  A9 02                lda #2
003C00  3  A0 0A                ldy #10
003C02  3  91 68                sta (z80_ix),y
003C04  3  60           j00073: rts
003C05  3               evnt10:
003C05  3  A9 19                lda #25 	; DELAY
003C07  3  20 28 28             jsr delay
003C0A  3  60                   rts
003C0B  3               evnt11:
003C0B  3  60                   rts
003C0C  3               evnt12:
003C0C  3  A9 05                lda #5 	; PAPER
003C0E  3  20 91 39             jsr setbgcol
003C11  3  20 2B 48             jsr cls		; CLS
003C14  3  A9 0C                lda #12		; AT
003C16  3  85 rr                sta chary
003C18  3  A9 08                lda #8
003C1A  3  85 rr                sta charx
003C1C  3  A9 08                lda #8		; PRINT
003C1E  3  20 E6 2F             jsr dmsg
003C21  3  A9 C8                lda #200 	; DELAY
003C23  3  20 28 28             jsr delay
003C26  3  60                   rts
003C27  3               evnt13:
003C27  3  60                   rts
003C28  3               evnt14:
003C28  3  20 2B 48             jsr cls		; CLS
003C2B  3  60                   rts
003C2C  3               evnt15:
003C2C  3  60                   rts
003C2D  3               evnt16:
003C2D  3  60                   rts
003C2E  3               evnt17:
003C2E  3  A9 01                lda #1		; PRINTMODE
003C30  3  85 rr                sta prtmod
003C32  3  A9 08                lda #8
003C34  3  85 rr                sta chary
003C36  3  A9 0D                lda #13
003C38  3  85 rr                sta charx
003C3A  3                       ; COLOUR command
003C3A  3  A9 09                lda #9		; PRINT
003C3C  3  20 E6 2F             jsr dmsg
003C3F  3  A9 02                lda #2
003C41  3  85 62                sta z80_c
003C43  3  A5 rr                lda chary
003C45  3  18                   clc
003C46  3  65 62                adc z80_c
003C48  3  85 rr                sta chary
003C4A  3  A9 0D                lda #13
003C4C  3  85 rr                sta charx
003C4E  3                       ; COLOUR command
003C4E  3  A9 0A                lda #10		; PRINT
003C50  3  20 E6 2F             jsr dmsg
003C53  3  20 9B 48             jsr prskey	; WAITKEY
003C56  3  60                   rts
003C57  3               evnt18:
003C57  3  60                   rts
003C58  3               evnt19:
003C58  3                       ; COLOUR command
003C58  3  A9 0E                lda #14
003C5A  3  85 rr                sta chary
003C5C  3  A9 08                lda #8
003C5E  3  85 rr                sta charx
003C60  3  A9 0B                lda #11		; PRINT
003C62  3  20 E6 2F             jsr dmsg
003C65  3  60                   rts
003C66  3               evnt20:
003C66  3  60                   rts
003C67  3  60           ptcusr: rts
003C68  3               msgdat:
003C68  3  53 43 4F 52          .byte "SCOR",197
003C6C  3  C5           
003C6D  3  20 20 48 49          .byte "  HIG",200
003C71  3  47 C8        
003C73  3  4B 43 20 4D          .byte "KC MUNHCKI",206
003C77  3  55 4E 48 43  
003C7B  3  4B 49 CE     
003C7E  3  20 47 41 4D          .byte " GAM",197
003C82  3  C5           
003C83  3  20 4F 56 45          .byte " OVE",210
003C87  3  D2           
003C88  3  20 4E 45 57          .byte " NEW HIGH SCOR",197
003C8C  3  20 48 49 47  
003C90  3  48 20 53 43  
003C97  3  48 49 54 54          .byte "HITTING SPRITE:",177
003C9B  3  49 4E 47 20  
003C9F  3  53 50 52 49  
003CA7  3  48 49 54 54          .byte "HITTING SPRITE:",160
003CAB  3  49 4E 47 20  
003CAF  3  53 50 52 49  
003CB7  3  54 45 53 D4          .byte "TES",212
003CBB  3  20 47 41 4D          .byte " GAME",160
003CBF  3  45 A0        
003CC1  3  20 4F 56 45          .byte " OVER",160
003CC5  3  52 A0        
003CC7  3  20 4E 45 57          .byte " NEW HIGH SCORE",160
003CCB  3  20 48 49 47  
003CCF  3  48 20 53 43  
003CD7  3               nummsg:
003CD7  3  0C                   .byte 12
003CD8  3               chgfx:
003CD8  3  00 01                .byte 0,1
003CDA  3  7F 01                .byte 127,1
003CDC  3  00 01                .byte 0,1
003CDE  3               bprop:
003CDE  3  00                   .byte 0
003CDF  3  02                   .byte 2
003CE0  3  06                   .byte 6
003CE1  3               sprgfx:
003CE1  3  64 60 30 38          .byte 100,96,48,56,32,120,123,119,116,32,41,115,115,38,32,32,32,32,32,32
003CE5  3  20 78 7B 77  
003CE9  3  74 20 29 73  
003CF5  3  30 20 20 60          .byte 48,32,32,96,32,98,110,61,49,32,103,47,47,59,32,32,35,35,32,32
003CF9  3  20 62 6E 3D  
003CFD  3  31 20 67 2F  
003D09  3  20 20 20 20          .byte 32,32,32,32,32,41,120,116,38,32,62,126,125,109,32,34,44,44,33,32
003D0D  3  20 29 78 74  
003D11  3  26 20 3E 7E  
003D1D  3  28 30 70 60          .byte 40,48,112,96,36,96,118,127,121,48,34,102,115,57,33,32,32,32,32,32
003D21  3  24 60 76 7F  
003D25  3  79 30 22 66  
003D31  3  60 20 20 20          .byte 96,32,32,32,48,32,57,127,102,32,42,59,47,103,37,32,34,35,33,32
003D35  3  30 20 39 7F  
003D39  3  66 20 2A 3B  
003D45  3  20 20 20 20          .byte 32,32,32,32,32,34,100,124,56,33,104,109,127,62,52,32,41,44,38,32
003D49  3  20 22 64 7C  
003D4D  3  38 21 68 6D  
003D59  3  64 60 30 38          .byte 100,96,48,56,32,120,123,119,116,32,41,112,112,38,32,32,32,32,32,32
003D5D  3  20 78 7B 77  
003D61  3  74 20 29 70  
003D6D  3  30 20 20 60          .byte 48,32,32,96,32,98,110,61,49,32,103,35,35,59,32,32,35,35,32,32
003D71  3  20 62 6E 3D  
003D75  3  31 20 67 23  
003D81  3  20 20 20 20          .byte 32,32,32,32,32,41,120,116,38,32,62,46,45,109,32,34,44,44,33,32
003D85  3  20 29 78 74  
003D89  3  26 20 3E 2E  
003D95  3  28 30 70 60          .byte 40,48,112,96,36,96,118,127,121,48,34,100,112,56,33,32,32,32,32,32
003D99  3  24 60 76 7F  
003D9D  3  79 30 22 64  
003DA9  3  60 20 20 20          .byte 96,32,32,32,48,32,57,127,102,32,42,51,35,99,37,32,34,35,33,32
003DAD  3  30 20 39 7F  
003DB1  3  66 20 2A 33  
003DBD  3  20 20 20 20          .byte 32,32,32,32,32,34,100,124,56,33,104,45,47,46,52,32,41,44,38,32
003DC1  3  20 22 64 7C  
003DC5  3  38 21 68 2D  
003DD1  3  64 60 30 38          .byte 100,96,48,56,32,120,123,119,116,32,43,127,127,39,32,32,32,32,32,32
003DD5  3  20 78 7B 77  
003DD9  3  74 20 2B 7F  
003DE5  3  30 20 20 60          .byte 48,32,32,96,32,98,110,61,49,32,111,127,127,63,32,32,35,35,32,32
003DE9  3  20 62 6E 3D  
003DED  3  31 20 6F 7F  
003DF9  3  20 20 20 20          .byte 32,32,32,32,32,41,120,116,38,32,126,126,125,125,32,34,47,47,33,32
003DFD  3  20 29 78 74  
003E01  3  26 20 7E 7E  
003E0D  3  28 30 70 60          .byte 40,48,112,96,36,96,118,127,121,48,34,111,127,63,33,32,32,32,32,32
003E11  3  24 60 76 7F  
003E15  3  79 30 22 6F  
003E21  3  60 20 20 20          .byte 96,32,32,32,48,32,57,127,102,32,42,127,127,127,37,32,34,35,33,32
003E25  3  30 20 39 7F  
003E29  3  66 20 2A 7F  
003E35  3  20 20 20 20          .byte 32,32,32,32,32,34,100,124,56,33,104,125,127,126,52,32,43,47,39,32
003E39  3  20 22 64 7C  
003E3D  3  38 21 68 7D  
003E49  3  64 7C 7C 38          .byte 100,124,124,56,32,117,127,122,127,32,110,43,55,61,32,32,32,32,32,32
003E4D  3  20 75 7F 7A  
003E51  3  7F 20 6E 2B  
003E5D  3  30 70 70 60          .byte 48,112,112,96,32,54,127,107,125,32,123,111,63,119,32,34,32,33,33,32
003E61  3  20 36 7F 6B  
003E65  3  7D 20 7B 6F  
003E71  3  20 20 20 20          .byte 32,32,32,32,32,57,127,111,118,32,109,127,126,63,32,43,34,37,39,32
003E75  3  20 39 7F 6F  
003E79  3  76 20 6D 7F  
003E85  3  28 78 7C 74          .byte 40,120,124,116,36,106,122,117,127,53,40,55,111,107,36,32,32,32,32,32
003E89  3  24 6A 7A 75  
003E8D  3  7F 35 28 37  
003E99  3  60 60 70 30          .byte 96,96,112,48,48,104,107,55,127,52,98,63,127,111,49,32,33,34,34,32
003E9D  3  30 68 6B 37  
003EA1  3  7F 34 62 3F  
003EAD  3  20 20 20 20          .byte 32,32,32,32,32,98,110,63,125,49,42,126,125,127,37,34,37,43,42,33
003EB1  3  20 62 6E 3F  
003EB5  3  7D 31 2A 7E  
003EC1  3  64 7C 7C 38          .byte 100,124,124,56,32,117,127,122,127,32,62,107,39,109,32,32,32,32,32,32
003EC5  3  20 75 7F 7A  
003EC9  3  7F 20 3E 6B  
003ED5  3  30 70 70 60          .byte 48,112,112,96,32,54,127,107,125,32,123,111,63,119,32,33,34,32,34,32
003ED9  3  20 36 7F 6B  
003EDD  3  7D 20 7B 6F  
003EE9  3  20 20 20 20          .byte 32,32,32,32,32,57,127,111,118,32,109,127,126,63,32,39,42,33,43,32
003EED  3  20 39 7F 6F  
003EF1  3  76 20 6D 7F  
003EFD  3  28 78 7C 74          .byte 40,120,124,116,36,106,122,117,127,53,104,39,63,43,52,32,32,32,32,32
003F01  3  24 6A 7A 75  
003F05  3  7F 35 68 27  
003F11  3  60 60 70 30          .byte 96,96,112,48,48,104,107,55,127,52,98,63,127,111,49,34,32,33,32,33
003F15  3  30 68 6B 37  
003F19  3  7F 34 62 3F  
003F25  3  20 20 20 20          .byte 32,32,32,32,32,98,110,63,125,49,42,126,125,127,37,42,33,39,34,37
003F29  3  20 62 6E 3F  
003F2D  3  7D 31 2A 7E  
003F39  3  64 3C 7C 24          .byte 100,60,124,36,32,110,119,33,32,32,32,43,47,36,32,32,32,32,32,32
003F3D  3  20 6E 77 21  
003F41  3  20 20 20 2B  
003F4D  3  30 70 70 30          .byte 48,112,112,48,32,122,61,39,32,32,34,111,124,48,32,32,32,32,32,32
003F51  3  20 7A 3D 27  
003F55  3  20 20 22 6F  
003F61  3  20 20 20 20          .byte 32,32,32,32,32,105,119,63,33,32,43,125,112,32,32,32,34,35,33,32
003F65  3  20 69 77 3F  
003F69  3  21 20 2B 7D  
003F75  3  28 78 6C 3C          .byte 40,120,108,60,32,40,127,51,32,32,32,34,47,45,32,32,32,32,32,32
003F79  3  20 28 7F 33  
003F7D  3  20 20 20 22  
003F89  3  60 60 70 70          .byte 96,96,112,112,32,96,127,46,33,32,32,43,125,116,32,32,32,32,32,32
003F8D  3  20 60 7F 2E  
003F91  3  21 20 20 2B  
003F9D  3  20 20 20 20          .byte 32,32,32,32,32,34,126,123,39,32,34,111,116,48,32,32,32,35,35,32
003FA1  3  20 22 7E 7B  
003FA5  3  27 20 22 6F  
003FB1  3  20 78 74 20          .byte 32,120,116,32,32,110,127,127,61,32,32,43,39,32,32,32,32,32,32,32
003FB5  3  20 6E 7F 7F  
003FB9  3  3D 20 20 2B  
003FC5  3  20 60 30 20          .byte 32,96,48,32,32,120,127,127,116,32,34,111,63,33,32,32,32,32,32,32
003FC9  3  20 78 7F 7F  
003FCD  3  74 20 22 6F  
003FD9  3  20 20 20 20          .byte 32,32,32,32,32,96,126,125,48,32,43,127,127,39,32,32,34,33,32,32
003FDD  3  20 60 7E 7D  
003FE1  3  30 20 2B 7F  
003FED  3  20 60 7C 30          .byte 32,96,124,48,32,40,127,127,127,36,32,34,47,33,32,32,32,32,32,32
003FF1  3  20 28 7F 7F  
003FF5  3  7F 24 20 22  
004001  3  20 20 70 20          .byte 32,32,112,32,32,96,126,127,125,48,32,43,127,39,32,32,32,32,32,32
004005  3  20 60 7E 7F  
004009  3  7D 30 20 2B  
004015  3  20 20 20 20          .byte 32,32,32,32,32,32,120,127,116,32,34,111,127,63,33,32,32,35,32,32
004019  3  20 20 78 7F  
00401D  3  74 20 22 6F  
004029  3  28 7C 6C 38          .byte 40,124,108,56,32,32,34,123,61,32,40,47,39,32,32,32,32,32,32,32
00402D  3  20 20 22 7B  
004031  3  3D 20 28 2F  
00403D  3  60 70 70 60          .byte 96,112,112,96,32,32,43,110,117,32,96,124,63,33,32,32,32,32,32,32
004041  3  20 20 2B 6E  
004045  3  75 20 60 7C  
004051  3  20 20 20 20          .byte 32,32,32,32,32,34,111,123,54,32,32,112,126,39,32,34,35,33,32,32
004055  3  20 22 6F 7B  
004059  3  36 20 20 70  
004065  3  20 6C 3C 74          .byte 32,108,60,116,36,32,32,99,127,36,32,46,47,33,32,32,32,32,32,32
004069  3  24 20 20 63  
00406D  3  7F 24 20 2E  
004079  3  20 70 70 30          .byte 32,112,112,48,48,32,34,45,127,48,32,120,126,39,32,32,32,32,32,32
00407D  3  30 20 22 2D  
004081  3  7F 30 20 78  
00408D  3  20 20 20 20          .byte 32,32,32,32,32,32,43,119,125,33,32,96,120,63,33,32,35,35,32,32
004091  3  20 20 2B 77  
004095  3  7D 21 20 60  
0040A1  3  20 78 74 20          .byte 32,120,116,32,32,110,127,127,61,32,32,43,39,32,32,32,32,32,32,32
0040A5  3  20 6E 7F 7F  
0040A9  3  3D 20 20 2B  
0040B5  3  20 60 30 20          .byte 32,96,48,32,32,120,127,127,116,32,34,111,63,33,32,32,32,32,32,32
0040B9  3  20 78 7F 7F  
0040BD  3  74 20 22 6F  
0040C9  3  20 20 20 20          .byte 32,32,32,32,32,96,126,125,48,32,43,127,127,39,32,32,34,33,32,32
0040CD  3  20 60 7E 7D  
0040D1  3  30 20 2B 7F  
0040DD  3  20 60 7C 30          .byte 32,96,124,48,32,40,127,127,127,36,32,34,47,33,32,32,32,32,32,32
0040E1  3  20 28 7F 7F  
0040E5  3  7F 24 20 22  
0040F1  3  20 20 70 20          .byte 32,32,112,32,32,96,126,127,125,48,32,43,127,39,32,32,32,32,32,32
0040F5  3  20 60 7E 7F  
0040F9  3  7D 30 20 2B  
004105  3  20 20 20 20          .byte 32,32,32,32,32,32,120,127,116,32,34,111,127,63,33,32,32,35,32,32
004109  3  20 20 78 7F  
00410D  3  74 20 22 6F  
004119  3  74 20 20 78          .byte 116,32,32,120,32,119,125,122,63,32,38,43,35,32,32,32,32,32,32,32
00411D  3  20 77 7D 7A  
004121  3  3F 20 26 2B  
00412D  3  30 20 20 60          .byte 48,32,32,96,32,63,116,104,127,32,59,111,47,33,32,32,32,32,32,32
004131  3  20 3F 74 68  
004135  3  7F 20 3B 6F  
004141  3  20 20 20 20          .byte 32,32,32,32,32,125,48,96,126,32,109,127,126,39,32,33,34,32,32,32
004145  3  20 7D 30 60  
004149  3  7E 20 6D 7F  
004155  3  68 30 20 60          .byte 104,48,32,96,52,106,123,116,127,37,40,35,39,33,32,32,32,32,32,32
004159  3  34 6A 7B 74  
00415D  3  7F 25 28 23  
004169  3  60 20 20 20          .byte 96,32,32,32,48,106,109,48,126,53,98,47,63,39,32,32,32,32,32,32
00416D  3  30 6A 6D 30  
004171  3  7E 35 62 2F  
00417D  3  20 20 20 20          .byte 32,32,32,32,32,106,116,32,120,53,42,126,125,63,33,34,32,33,32,32
004181  3  20 6A 74 20  
004185  3  78 35 2A 7E  
004191  3  20 78 74 20          .byte 32,120,116,32,32,110,127,127,61,32,32,43,39,32,32,32,32,32,32,32
004195  3  20 6E 7F 7F  
004199  3  3D 20 20 2B  
0041A5  3  20 60 30 20          .byte 32,96,48,32,32,120,127,127,116,32,34,111,63,33,32,32,32,32,32,32
0041A9  3  20 78 7F 7F  
0041AD  3  74 20 22 6F  
0041B9  3  20 20 20 20          .byte 32,32,32,32,32,96,126,125,48,32,43,127,127,39,32,32,34,33,32,32
0041BD  3  20 60 7E 7D  
0041C1  3  30 20 2B 7F  
0041CD  3  20 60 7C 30          .byte 32,96,124,48,32,40,127,127,127,36,32,34,47,33,32,32,32,32,32,32
0041D1  3  20 28 7F 7F  
0041D5  3  7F 24 20 22  
0041E1  3  20 20 70 20          .byte 32,32,112,32,32,96,126,127,125,48,32,43,127,39,32,32,32,32,32,32
0041E5  3  20 60 7E 7F  
0041E9  3  7D 30 20 2B  
0041F5  3  20 20 20 20          .byte 32,32,32,32,32,32,120,127,116,32,34,111,127,63,33,32,32,35,32,32
0041F9  3  20 20 78 7F  
0041FD  3  74 20 22 6F  
004209  3  64 78 70 20          .byte 100,120,112,32,32,119,63,107,125,32,39,32,32,43,32,32,32,32,32,32
00420D  3  20 77 3F 6B  
004211  3  7D 20 27 20  
00421D  3  30 60 20 20          .byte 48,96,32,32,32,62,127,111,116,32,63,33,34,111,32,32,32,32,32,32
004221  3  20 3E 7F 6F  
004225  3  74 20 3F 21  
004231  3  20 20 20 20          .byte 32,32,32,32,32,121,126,124,48,32,125,39,42,127,32,33,32,32,34,32
004235  3  20 79 7E 7C  
004239  3  30 20 7D 27  
004245  3  28 70 74 30          .byte 40,112,116,48,32,106,123,39,127,52,42,33,32,34,37,32,32,32,32,32
004249  3  20 6A 7B 27  
00424D  3  7F 34 2A 21  
004259  3  60 20 30 20          .byte 96,32,48,32,32,104,111,63,125,48,106,39,32,43,53,32,32,32,32,32
00425D  3  20 68 6F 3F  
004261  3  7D 30 6A 27  
00426D  3  20 20 20 20          .byte 32,32,32,32,32,98,124,125,116,32,106,62,33,111,53,34,32,32,32,33
004271  3  20 62 7C 7D  
004275  3  74 20 6A 3E  
004281  3  20 78 74 20          .byte 32,120,116,32,32,110,127,127,61,32,32,43,39,32,32,32,32,32,32,32
004285  3  20 6E 7F 7F  
004289  3  3D 20 20 2B  
004295  3  20 60 30 20          .byte 32,96,48,32,32,120,127,127,116,32,34,111,63,33,32,32,32,32,32,32
004299  3  20 78 7F 7F  
00429D  3  74 20 22 6F  
0042A9  3  20 20 20 20          .byte 32,32,32,32,32,96,126,125,48,32,43,127,127,39,32,32,34,33,32,32
0042AD  3  20 60 7E 7D  
0042B1  3  30 20 2B 7F  
0042BD  3  20 60 7C 30          .byte 32,96,124,48,32,40,127,127,127,36,32,34,47,33,32,32,32,32,32,32
0042C1  3  20 28 7F 7F  
0042C5  3  7F 24 20 22  
0042D1  3  20 20 70 20          .byte 32,32,112,32,32,96,126,127,125,48,32,43,127,39,32,32,32,32,32,32
0042D5  3  20 60 7E 7F  
0042D9  3  7D 30 20 2B  
0042E5  3  20 20 20 20          .byte 32,32,32,32,32,32,120,127,116,32,34,111,127,63,33,32,32,35,32,32
0042E9  3  20 20 78 7F  
0042ED  3  74 20 22 6F  
0042F9  3               frmlst:
0042F9  3  00 03                .byte 0,3
0042FB  3  03 02                .byte 3,2
0042FD  3  05 02                .byte 5,2
0042FF  3  07 02                .byte 7,2
004301  3  09 02                .byte 9,2
004303  3  0B 02 0D 00          .byte 11,2,13,0
004307  3               scdat:
004307  3  74 01                .word 372
004309  3  FF 01 28 02          .byte 255,1,40,2,2,255,0,7,1,255,0,4,1,0,0,0,1,255,0,8,1,255,0,9,1,1,255,0,9,1,255,0,4
00430D  3  02 FF 00 07  
004311  3  01 FF 00 04  
00432A  3  01 00 00 00          .byte 1,0,0,0,1,255,0,8,1,255,0,9,1,1,255,0,9,1,255,0,4,1,0,0,0,1,255,0,8,1,255,0,9
00432E  3  01 FF 00 08  
004332  3  01 FF 00 09  
00434B  3  01 01 FF 00          .byte 1,1,255,0,4,255,1,6,255,0,4,1,0,0,0,1,255,0,4,255,1,5,255,0,4,255,1,7,2,2,255,0,9
00434F  3  04 FF 01 06  
004353  3  FF 00 04 01  
00436C  3  02 02 FF 00          .byte 2,2,255,0,7,2,2,255,0,7,2,2,0,0,0,2,2,0,1,1,255,0,37,1,1,255,0,37,1,1,255,0,4
004370  3  07 02 02 FF  
004374  3  00 07 02 02  
00438D  3  FF 01 06 FF          .byte 255,1,6,255,0,4,255,1,9,255,0,4,255,1,6,255,0,4,1,1,2,2,255,0,5,2,2,1,255,0,17,1,0
004391  3  00 04 FF 01  
004395  3  09 FF 00 04  
0043AE  3  02 02 00 00          .byte 2,2,0,0,0,2,2,0,1,1,255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17,1,255,0,9
0043B2  3  00 02 02 00  
0043B6  3  01 01 FF 00  
0043D0  3  FF 01 07 FF          .byte 255,1,7,255,0,4,255,1,19,255,0,4,255,1,6,255,0,7,2,2,255,0,21,2,2,255,0,85,255,1,6,255,0,4
0043D4  3  00 04 FF 01  
0043D8  3  13 FF 00 04  
0043F2  3  FF 01 13 FF          .byte 255,1,19,255,0,4,255,1,7,255,0,4,1,255,0,9,1,255,0,7,1,255,0,9,1,255,0,4,1,1,255,0,4
0043F6  3  00 04 FF 01  
0043FA  3  07 FF 00 04  
004413  3  01 FF 00 09          .byte 1,255,0,9,1,255,0,7,1,255,0,9,1,255,0,4,1,1,255,0,4,1,255,0,9,1,255,0,7,1,255,0,9
004417  3  01 FF 00 07  
00441B  3  01 FF 00 09  
004434  3  01 FF 00 04          .byte 1,255,0,4,1,1,255,0,4,1,255,0,4,1,255,0,4,255,1,9,255,0,4,1,255,0,4,1,255,0,4,1,1
004438  3  01 01 FF 00  
00443C  3  04 01 FF 00  
004455  3  FF 00 09 01          .byte 255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17,1,255,0,9,1,1,255,0,9,1,255,0,17
004459  3  FF 00 11 01  
00445D  3  FF 00 09 01  
004476  3  01 FF 00 09          .byte 1,255,0,9,255,1,40
00447A  3  FF 01 28     
00447D  3               numsc:
00447D  3  01                   .byte 1
00447E  3               nmedat:
00447E  3  00 00 27 14          .byte 0,0,39,20,1,1,39,10,255
004482  3  01 01 27 0A  
004486  3  FF           
004487  3               NUMOBJ = 1
004487  3               objdta:
004487  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
00448B  3  00 00 00 00  
00448F  3  00 00 00 00  
0044AD  3               font:
0044AD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0044B1  3  00 00 00 00  
0044B5  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0044B9  3  30 00 30 00  
0044BD  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0044C1  3  00 00 00 00  
0044C5  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0044C9  3  6C FE 6C 00  
0044CD  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0044D1  3  7E 1E 7E 18  
0044D5  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0044D9  3  30 6E CE 00  
0044DD  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0044E1  3  7E CC 7E 00  
0044E5  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0044E9  3  00 00 00 00  
0044ED  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0044F1  3  18 18 0C 00  
0044F5  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0044F9  3  30 30 60 00  
0044FD  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
004501  3  7E 18 3C 00  
004505  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
004509  3  7E 18 18 00  
00450D  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
004511  3  00 18 18 30  
004515  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
004519  3  7E 00 00 00  
00451D  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
004521  3  00 38 38 00  
004525  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
004529  3  18 30 60 00  
00452D  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
004531  3  F6 E6 7C 00  
004535  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
004539  3  18 18 7E 00  
00453D  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
004541  3  7C C0 FE 00  
004545  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
004549  3  06 C6 7C 00  
00454D  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
004551  3  D8 FE 18 00  
004555  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
004559  3  06 C6 7C 00  
00455D  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
004561  3  C6 C6 7C 00  
004565  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
004569  3  18 30 30 00  
00456D  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
004571  3  C6 C6 7C 00  
004575  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
004579  3  7E 06 7C 00  
00457D  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
004581  3  00 00 30 00  
004585  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
004589  3  00 30 30 60  
00458D  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
004591  3  30 18 0C 00  
004595  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
004599  3  00 7E 00 00  
00459D  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
0045A1  3  0C 18 30 00  
0045A5  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
0045A9  3  18 00 18 00  
0045AD  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
0045B1  3  FE C0 7C 00  
0045B5  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
0045B9  3  FE C6 C6 00  
0045BD  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0045C1  3  C6 C6 FC 00  
0045C5  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0045C9  3  C0 C6 7C 00  
0045CD  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0045D1  3  C6 CC F8 00  
0045D5  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0045D9  3  C0 C0 FE 00  
0045DD  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0045E1  3  C0 C0 C0 00  
0045E5  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0045E9  3  DE C6 7C 00  
0045ED  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0045F1  3  C6 C6 C6 00  
0045F5  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0045F9  3  18 18 7E 00  
0045FD  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
004601  3  C6 C6 7C 00  
004605  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
004609  3  D8 CC C6 00  
00460D  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
004611  3  C0 C0 FE 00  
004615  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
004619  3  C6 C6 C6 00  
00461D  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
004621  3  DE CE C6 00  
004625  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
004629  3  C6 C6 7C 00  
00462D  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
004631  3  FC C0 C0 00  
004635  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
004639  3  F6 DE 7C 00  
00463D  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
004641  3  FC CC C6 00  
004645  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
004649  3  06 C6 7C 00  
00464D  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
004651  3  30 30 30 00  
004655  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
004659  3  C6 C6 7C 00  
00465D  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
004661  3  C6 6C 38 00  
004665  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
004669  3  C6 FE 6C 00  
00466D  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
004671  3  38 6C C6 00  
004675  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
004679  3  30 30 30 00  
00467D  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
004681  3  30 60 FE 00  
004685  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
004689  3  18 18 1E 00  
00468D  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
004691  3  30 18 0C 00  
004695  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
004699  3  30 30 F0 00  
00469D  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
0046A1  3  30 30 30 00  
0046A5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0046A9  3  00 00 00 FF  
0046AD  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0046B1  3  60 60 FE 00  
0046B5  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0046B9  3  7C CC 7C 00  
0046BD  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0046C1  3  66 66 7C 00  
0046C5  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0046C9  3  60 60 3C 00  
0046CD  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0046D1  3  CC CC 7C 00  
0046D5  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0046D9  3  F8 C0 7C 00  
0046DD  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0046E1  3  30 30 30 00  
0046E5  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0046E9  3  CC 7C 0C 78  
0046ED  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0046F1  3  CC CC CC 00  
0046F5  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0046F9  3  30 30 78 00  
0046FD  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
004701  3  0C 0C 6C 38  
004705  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
004709  3  70 78 6C 00  
00470D  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
004711  3  30 30 1C 00  
004715  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
004719  3  FC FC FC 00  
00471D  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
004721  3  CC CC CC 00  
004725  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
004729  3  CC CC 78 00  
00472D  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
004731  3  CC F8 C0 C0  
004735  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
004739  3  CC 7C 0C 0E  
00473D  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
004741  3  60 60 60 00  
004745  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
004749  3  78 0C F8 00  
00474D  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
004751  3  30 30 1C 00  
004755  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
004759  3  CC CC 78 00  
00475D  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
004761  3  78 78 30 00  
004765  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
004769  3  FC FC 78 00  
00476D  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
004771  3  30 78 CC 00  
004775  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
004779  3  CC 7C 0C 78  
00477D  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
004781  3  30 60 FC 00  
004785  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
004789  3  18 18 1E 00  
00478D  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
004791  3  18 18 18 00  
004795  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
004799  3  30 30 F0 00  
00479D  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0047A1  3  00 00 00 00  
0047A5  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0047A9  3  E3 BB C6 7C  
0047AD  3               jtab:
0047AD  3  63                   .byte 99
0047AE  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
0047B2  3  20 4E 4D 31  
0047B6  3  32 33 34     
0047B9  3               
0047B9  2               
0047B9  1               	.include "lib.inc"
0047B9  2               ;----------------------------------------------------------------------
0047B9  2               ; System 5 depending variables and routines
0047B9  2               ;----------------------------------------------------------------------
0047B9  2               
0047B9  2               ; Global variables
0047B9  2               
0047B9  2               	t_red		= 1	; Text colour definition filters
0047B9  2               	t_green		= 2
0047B9  2               	t_yellow	= 3
0047B9  2               	t_blue		= 4
0047B9  2               	t_magenta	= 5
0047B9  2               	t_cyan		= 6
0047B9  2               	t_white		= 7
0047B9  2               
0047B9  2               	g_red		= 17	; Graphics colour definition filters
0047B9  2               	g_green		= 18
0047B9  2               	g_yellow	= 19
0047B9  2               	g_blue		= 20
0047B9  2               	g_magenta	= 21
0047B9  2               	g_cyan		= 22
0047B9  2               	g_white		= 23
0047B9  2               
0047B9  2               	ScrWidth	= 40
0047B9  2               	ScrHeight	= 25
0047B9  2               
0047B9  2               ; System constants
0047B9  2               
0047B9  2               	IRQVEC		= $0204		; Interrupt vector
0047B9  2               	ScreenAddr	= $0400		; Startaddress video RAM
0047B9  2               
0047B9  2               	MC6845_Reg	= $0800		; MC6845 CRT controller register ptr
0047B9  2               	MC6845_Dat	= $0801		; MC6845 CRT controller data
0047B9  2               
0047B9  2               	VIA1		= $0e20
0047B9  2               	PORT_A		= VIA1+$1	; Keyboard
0047B9  2               	Timer1_Low  	= VIA1+$4	; Timer 1 low byte
0047B9  2               	Timer1_High 	= VIA1+$5	; Timer 1 high byte
0047B9  2               	Timer2_Low	= VIA1+$8	; Timer 2 low byte
0047B9  2               	Timer2_High	= VIA1+$9	; Timer 2 high byte
0047B9  2               	ACR		= VIA1+$b	; Auxiliary Control Register
0047B9  2               	IFR		= VIA1+$d 	; Interrupt Flag Register
0047B9  2               	IER		= VIA1+$e	; Interupt Enable Register
0047B9  2               
0047B9  2               	MAP 		= $D800		; properties map buffer (4x256 bytes)
0047B9  2               	SCADTB_lb 	= $DC00		; screen address table lo-byte (256 bytes)
0047B9  2               	SCADTB_hb 	= $DD00		; screen address table hi-byte (256 bytes)
0047B9  2               	SHRAPN 		= $DE00		; shrapnel table (55x6 bytes)
0047B9  2               	V_SPR_PTR	= $DF4A		; Vertical spriteframe pointer (75 bytes)
0047B9  2               
0047B9  2               ; System calls
0047B9  2               
0047B9  2               	OS_CLI   = $FFF7
0047B9  2               	OSBYTE   = $FFF4
0047B9  2               	OSWORD   = $FFF1
0047B9  2               	OSWRCH   = $FFEE
0047B9  2               	OSWRCR   = $FFEC
0047B9  2               	OSNEWL   = $FFE7
0047B9  2               	OSASCI   = $FFE3
0047B9  2               	OSRDCH   = $FFE0
0047B9  2               	OSFILE   = $FFDD
0047B9  2               	OSARGS   = $FFDA
0047B9  2               	OSBGET   = $FFD7
0047B9  2               	OSBPUT   = $FFD4
0047B9  2               	OSGBPB   = $FFD1
0047B9  2               	OSFIND   = $FFCE
0047B9  2               
0047B9  2               ; To be removed
0047B9  2               
0047B9  2               	SCRSYNC	= $fff4
0047B9  2               
0047B9  2               ;======================================================================
0047B9  2               ; System depending routines
0047B9  2               ;======================================================================
0047B9  2               
0047B9  2               ;----------------------------------------------------------------------
0047B9  2               ; Init hardware
0047B9  2               ;----------------------------------------------------------------------
0047B9  2               
0047B9  2               init:
0047B9  2               
0047B9  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0047B9  2               ; Hack for MAME to use VDU40x25
0047B9  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0047B9  2               
0047B9  2               ; Init VDU40x25
0047B9  2               
0047B9  2  A0 0F        	ldy #$f
0047BB  2               loops:
0047BB  2  8C 00 08     	sty MC6845_Reg
0047BE  2  B9 1B 48     	lda CRTTAB,y
0047C1  2  8D 01 08     	sta MC6845_Dat
0047C4  2  88           	dey
0047C5  2  10 F4        	bpl loops
0047C7  2               
0047C7  2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0047C7  2               
0047C7  2               ; Disable cursor
0047C7  2               
0047C7  2  A9 0A        	lda #$0a
0047C9  2  8D 00 08     	sta MC6845_Reg
0047CC  2  A9 20        	lda #$20
0047CE  2  8D 01 08     	sta MC6845_Dat
0047D1  2               
0047D1  2  20 2B 48     	jsr cls
0047D4  2               
0047D4  2               ; Set new interrupt routine to sync at 25Hz
0047D4  2               
0047D4  2  A9 09        	lda #<irq_handler	; New interrupt handler
0047D6  2  8D 04 02     	sta IRQVEC
0047D9  2  A9 48        	lda #>irq_handler
0047DB  2  8D 05 02     	sta IRQVEC+1
0047DE  2               
0047DE  2  A9 30        	lda #<30000		; Interrupt at 50Hz
0047E0  2  8D 24 0E     	sta Timer1_Low
0047E3  2  A9 75        	lda #>30000
0047E5  2  8D 25 0E     	sta Timer1_High
0047E8  2  A9 40        	lda #%01000000
0047EA  2  8D 2B 0E     	sta ACR
0047ED  2  A9 C0        	lda #%11000000
0047EF  2  8D 2E 0E     	sta IER
0047F2  2  58           	cli
0047F3  2               
0047F3  2               ; Set up vertical sprite pointer table
0047F3  2               
0047F3  2  A0 00        	ldy #0
0047F5  2  A9 00        	lda #0
0047F7  2               vspriteloop:
0047F7  2  99 4A DF     	sta V_SPR_PTR,y
0047FA  2  18           	clc
0047FB  2  69 14        	adc #20
0047FD  2  C9 3C        	cmp #60
0047FF  2  D0 02        	bne :+
004801  2  A9 00        	lda #0
004803  2               :
004803  2  C8           	iny
004804  2  C0 4B        	cpy #75
004806  2  D0 EF        	bne vspriteloop
004808  2               
004808  2  60           	rts
004809  2               
004809  2               irq_handler:
004809  2  AD 24 0E     	lda Timer1_Low		; Reset irqflag
00480C  2               
00480C  2  8A           	txa			; Save x,y
00480D  2  48           	pha
00480E  2  98           	tya
00480F  2  48           	pha
004810  2               
004810  2  EE 19 48     	inc frames_passed	; Nr of frames past
004813  2               
004813  2  68           	pla			; Restore x,y,a
004814  2  A8           	tay
004815  2  68           	pla
004816  2  AA           	tax
004817  2  68           	pla
004818  2  40           	rti
004819  2               
004819  2  00           frames_passed:	.byte 0
00481A  2               
00481A  2  60           	rts
00481B  2               
00481B  2  3F 28 33 44  CRTTAB:	.byte $3f,$28,$33,$44
00481F  2  1E 02 19 1B  	.byte $1e,$02,$19,$1b
004823  2  03 12 72 13  	.byte $03,$12,$72,$13
004827  2  04 00 07 FF  	.byte $04,$00,$07,$ff
00482B  2               
00482B  2               ;======================================================================
00482B  2               ; Screen routines
00482B  2               ;======================================================================
00482B  2               
00482B  2               ;----------------------------------------------------------------------
00482B  2               ; Clear screen routine.
00482B  2               ;
00482B  2               ; Fill screenmem $0400-$07ff with ScrFillByte
00482B  2               ; Set semigraphics at 1st column every line
00482B  2               ;----------------------------------------------------------------------
00482B  2               
00482B  2               cls:
00482B  2               
00482B  2               ; Fill screen with 0
00482B  2               
00482B  2  A9 00        	lda #0
00482D  2  A0 00        	ldy #0
00482F  2               clsloop:
00482F  2  99 00 04     	sta ScreenAddr,y
004832  2  99 00 05     	sta ScreenAddr+256,y
004835  2  99 00 06     	sta ScreenAddr+512,y
004838  2  99 00 07     	sta ScreenAddr+768,y
00483B  2  C8           	iny
00483C  2  D0 F1        	bne clsloop
00483E  2               
00483E  2               ; Init every row as graphics
00483E  2               
00483E  2  A0 00        	ldy #0
004840  2  A2 19        	ldx #ScrHeight
004842  2  AD 00 DC     	lda SCADTB_lb
004845  2  85 rr        	sta scraddr
004847  2  AD 00 DD     	lda SCADTB_hb
00484A  2  85 rr        	sta scraddr+1
00484C  2  AD 9B 39     	lda bcolour
00484F  2               colloop:
00484F  2  91 rr        	sta (scraddr),y
004851  2  48           	pha
004852  2  A5 rr        	lda scraddr
004854  2  18           	clc
004855  2  69 28        	adc #ScrWidth
004857  2  85 rr        	sta scraddr
004859  2  90 02        	bcc :+
00485B  2  E6 rr        	inc scraddr+1
00485D  2               :
00485D  2  68           	pla
00485E  2  CA           	dex
00485F  2  D0 EE        	bne colloop
004861  2               
004861  2  60           	rts
004862  2               
004862  2               ;-------------------------------------------------------------
004862  2               ; Screen synchronisation.
004862  2               ;
004862  2               ;  - read joystick/keyboard
004862  2               ;  - handle sound
004862  2               ;  - sync framerate with clock
004862  2               ;  - handle shrapnel every even frame
004862  2               ;-------------------------------------------------------------
004862  2               
004862  2               vsync:
004862  2  48           	pha
004863  2  98           	tya
004864  2  48           	pha
004865  2  8A           	txa
004866  2  48           	pha
004867  2  20 C0 2F     	jsr joykey		; read joystick/keyboard.
00486A  2               
00486A  2               ; Sync framerate to 25 Hz
00486A  2               
00486A  2               vsync1:
00486A  2  AD 19 48     	lda frames_passed	; Wait if not at 25Hz
00486D  2  C9 02        	cmp #2
00486F  2  90 F9        	bcc vsync1
004871  2               
004871  2  A9 00        	lda #0			; sync framerate 25 Hz
004873  2  8D 19 48     	sta frames_passed
004876  2               
004876  2               
004876  2  A5 rr        	lda clock
004878  2  29 01        	and #1
00487A  2  D0 03        	bne:+
00487C  2  20 82 28     	jsr proshr		; handle shrapnel every even frame
00487F  2               :
00487F  2               ;	lda sndtyp
00487F  2               ;	beq sndskip
00487F  2               ;sndloop:
00487F  2               ;	lda SpeakerBit		; handle sound
00487F  2               ;	ldy sndtyp
00487F  2               ;sndwait:
00487F  2               ;	dey
00487F  2               ;	bne sndwait
00487F  2               ;	eor #4
00487F  2               ;	sta SpeakerBit
00487F  2               ;	dec sndtyp
00487F  2               ;	bne sndloop
00487F  2               ;sndskip:
00487F  2               
00487F  2  68           	pla
004880  2  AA           	tax
004881  2  68           	pla
004882  2  A8           	tay
004883  2  68           	pla
004884  2  60           	rts
004885  2               
004885  2  00           sndtyp:	.byte 0
004886  2               
004886  2               ;======================================================================
004886  2               ; Joystick routines
004886  2               ;======================================================================
004886  2               
004886  2               joyinit:
004886  2  60           	rts
004887  2               joy1:
004887  2  60           	rts
004888  2               joy2:
004888  2  60           	rts
004889  2               
004889  2               ;======================================================================
004889  2               ; Keyboard routines
004889  2               ;======================================================================
004889  2               
004889  2               ;----------------------------------------------------------------------
004889  2               ; KTEST
004889  2               ; Check if key in A is pressed
004889  2               ; 	return clc if pressed
004889  2               ; 	return sec if not pressed
004889  2               ;----------------------------------------------------------------------
004889  2               
004889  2               ktest:
004889  2  85 rr        	sta tmp
00488B  2  AD 21 0E     	lda PORT_A
00488E  2               ;	bit PORT_A
00488E  2  30 07        	bmi not_pressed	; BUG MAME, bit 7 not set ....
004890  2  AD 21 0E     	lda PORT_A
004893  2  C5 rr        	cmp tmp
004895  2  F0 02        	beq pressed
004897  2               not_pressed:
004897  2  38           	sec
004898  2  60           	rts
004899  2               pressed:
004899  2  18           	clc
00489A  2  60           	rts
00489B  2               
00489B  2               ;======================================================================
00489B  2               ; PRSKEY
00489B  2               ; Wait for keypress and release
00489B  2               ;======================================================================
00489B  2               
00489B  2               prskey:
00489B  2  2C 21 0E     	bit PORT_A
00489E  2  10 FB        	bpl prskey
0048A0  2               relkey:
0048A0  2  2C 21 0E     	bit PORT_A
0048A3  2  30 FB        	bmi relkey
0048A5  2  60           	rts
0048A6  2               
0048A6  2               
0048A6  1               	.include "z80.asm"
0048A6  2               ;------------------------------------------------------
0048A6  2               ; z80.asm
0048A6  2               ; spectrum stuff
0048A6  2               ; adresses
0048A6  2               
0048A6  2               
0048A6  2               ; Contains seperatly 1 bit set
0048A6  2               
0048A6  2               _bitmem0	= $f8
0048A6  2               _bitmem1	= $f9
0048A6  2               _bitmem2	= $fa
0048A6  2               _bitmem3	= $fb
0048A6  2               _bitmem4	= $fc
0048A6  2               _bitmem5	= $fd
0048A6  2               _bitmem6	= $fe
0048A6  2               _bitmem7	= $ff
0048A6  2               
0048A6  2               ; constants
0048A6  2               _bitvalue0	= $01
0048A6  2               _bitvalue1	= $02
0048A6  2               _bitvalue2	= $04
0048A6  2               _bitvalue3	= $08
0048A6  2               _bitvalue4	= $10
0048A6  2               _bitvalue5	= $20
0048A6  2               _bitvalue6	= $40
0048A6  2               _bitvalue7	= $80
0048A6  2               
0048A6  2               _notbitvalue0	= $fe
0048A6  2               _notbitvalue1	= $fd
0048A6  2               _notbitvalue2	= $fb
0048A6  2               _notbitvalue3	= $f7
0048A6  2               _notbitvalue4	= $ef
0048A6  2               _notbitvalue5	= $df
0048A6  2               _notbitvalue6	= $bf
0048A6  2               _notbitvalue7	= $7f
0048A6  2               
0048A6  2               
0048A6  2               exx:
0048A6  2  A5 62        		lda z80_c
0048A8  2  A4 6E        		ldy z80_cp
0048AA  2  84 62        		sty z80_c
0048AC  2  85 6E        		sta z80_cp
0048AE  2  A5 63        		lda z80_b
0048B0  2  A4 6F        		ldy z80_bp
0048B2  2  84 63        		sty z80_b
0048B4  2  85 6F        		sta z80_bp
0048B6  2  A5 64        		lda z80_e
0048B8  2  A4 70        		ldy z80_ep
0048BA  2  84 64        		sty z80_e
0048BC  2  85 70        		sta z80_ep
0048BE  2  A5 65        		lda z80_d
0048C0  2  A4 71        		ldy z80_dp
0048C2  2  84 65        		sty z80_d
0048C4  2  85 71        		sta z80_dp
0048C6  2  A5 rr        		lda scraddr
0048C8  2  A4 72        		ldy z80_lp
0048CA  2  84 rr        		sty scraddr
0048CC  2  85 72        		sta z80_lp
0048CE  2  A5 rr        		lda scraddr+1
0048D0  2  A4 73        		ldy z80_hp
0048D2  2  84 rr        		sty scraddr+1
0048D4  2  85 73        		sta z80_hp
0048D6  2  60           		rts
0048D7  2               
0048D7  2               
0048D7  1               eind_asm:
0048D7  1               eop:					; End Of Program
0048D7  1               
0048D7  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
0048D7  1               
