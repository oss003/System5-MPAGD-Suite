ca65 V2.17 - Git d13d068
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; Z80 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               	.DEFINE asm_code $2800
000000r 1               
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               cflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               mflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               clwflag = 0 ;
000000r 2               bigflag = 1 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "z80-zp.inc"
000000r 2               ;.segment "ZEROPAGE"
000000r 2               
000000r 2               ws	 = $60
000000r 2               
000000r 2               z80_f	 = ws+$00
000000r 2               z80_a	 = ws+$01
000000r 2               z80_af	 = z80_f
000000r 2               
000000r 2               z80_c	 = ws+$02
000000r 2               z80_b	 = ws+$03
000000r 2               z80_bc	 = z80_c
000000r 2               
000000r 2               z80_e	 = ws+$04
000000r 2               z80_d	 = ws+$05
000000r 2               z80_de	 = z80_e
000000r 2               
000000r 2               z80_l	 = ws+$06
000000r 2               z80_h	 = ws+$07
000000r 2               z80_hl	 = z80_l
000000r 2               
000000r 2               z80_x    = ws+$08
000000r 2               z80_i    = ws+$09
000000r 2               z80_ix	 = z80_x
000000r 2               
000000r 2               z80_iy	 = ws+$0a
000000r 2               
000000r 2               z80_fp	 = ws+$0c
000000r 2               z80_ap	 = ws+$0d
000000r 2               
000000r 2               z80_cp	 = ws+$0e
000000r 2               z80_bp	 = ws+$0f
000000r 2               z80_bcp	 = z80_cp
000000r 2               
000000r 2               z80_ep	 = ws+$10
000000r 2               z80_dp	 = ws+$11
000000r 2               z80_dep	 = z80_ep
000000r 2               
000000r 2               z80_lp	 = ws+$12
000000r 2               z80_hp	 = ws+$13
000000r 2               z80_hlp	 = z80_lp
000000r 2               
000000r 2               z80_sp   = ws+$14
000000r 2               
000000r 2               z80_reg0 = ws+$16
000000r 2               z80_reg1 = ws+$17
000000r 2               z80_reg2 = ws+$18
000000r 2               z80_reg3 = ws+$19
000000r 2               
000000r 2               z80_r	 = ws+$1a
000000r 2               
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        	; last random number.
00001Er 2  xx           varobj:	.res 1  	   	; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2  xx xx        advbuff:    .res 2
000039r 2               
000039r 2  xx xx        tmp:        .res 2
00003Br 2  xx xx        scr_l:      .res 2
00003Dr 2  xx xx        scr_r:      .res 2
00003Fr 2  xx xx        scr_txt:    .res 2
000041r 2               
000041r 2  xx           xtmp:	    .res 1
000042r 2  xx           ytmp:	    .res 1
000043r 2  xx           spcnt:	    .res 1
000044r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000046r 2  xx           seed:	    .res 1		; seed for random numbers.
000047r 2               
000047r 2  xx           ccnt:       .res 1
000048r 2  xx           flag:	    .res 1
000049r 2  xx           rcol:	    .res 1
00004Ar 2  xx           rrow:	    .res 1
00004Br 2               
00004Br 2  xx           combyt:	    .res 1		; byte type compressed.
00004Cr 2  xx           comcnt:	    .res 1		; compression counter.
00004Dr 2  xx           prtmod:	    .res 1      	; print mode, 0 = standard, 1 = double-height.
00004Er 2  xx           qscnt:	    .res 1
00004Fr 2               
00004Fr 2  xx           sprptr:	    .res 1      	; not a ptr
000050r 2  xx           sprcnt:	    .res 1
000051r 2               
000051r 2  xx xx        skptr:	    .res 2		; search pointer.
000053r 2  xx           sktptr:	    .res 1      	; not a ptr
000054r 2  xx           tmproom:    .res 1
000055r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000057r 2               
000057r 2               .if mflag
000057r 2               TmpAddr:    .res 2
000057r 2               bwid:	    .res 1     		; box/menu width.
000057r 2               blen:	    .res 1     		; box/menu height.
000057r 2               btop:	    .res 1    	 	; box coordinates.
000057r 2               blft:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if sflag .or pflag
000057r 2               shrctr:	    .res 1
000057r 2               .endif
000057r 2               .if pflag
000057r 2               explcnt:    .res 1
000057r 2               seed3:	    .res 1
000057r 2               .endif
000057r 2               
000057r 2               .if aflag
000057r 2               pbptr:       .res 2
000057r 2               pbbuf:	     .res 2
000057r 2               .endif
000057r 2               
000057r 2               ;sndtyp:     .res 1
000057r 2               
000057r 2               ;.if rflag
000057r 2               ;sprshft:     .res 1
000057r 2               ;.endif
000057r 2               
000057r 1               
000057r 1               .segment "CODE"
000000r 1               
000000r 1               .org asm_code
002800  1               
002800  1               exec:
002800  1               start_asm:
002800  1               	.include "game.inc"
002800  2               .include "testdiv.inc"
002800  3               ;--------------------------------------------------------------
002800  3               ; Arcade Game Designer.
002800  3               ; (C) 2008 Jonathan Cauldwell.
002800  3               ; ZX Spectrum Engine v0.7.
002800  3               ; System 5 port by K.v.Oss 2024
002800  3               ;--------------------------------------------------------------
002800  3               
002800  3               ; Conditional compilation flags
002800  3               ; Code is installed if flag is set
002800  3               ; Flags are set in commandline assembly or by the compiler
002800  3               
002800  3               ; Flags set by AGD compiler
002800  3               ;	mflag  			; MENU + INV
002800  3               ;	pflag 			; particle engine
002800  3               ;	sflag 			; scrollytext
002800  3               ;	dflag 			; digging mode
002800  3               ;	cflag			; collectable blocks
002800  3               ;	oflag			; objects
002800  3               ;	lflag			; ladders
002800  3               ;
002800  3               ; Flags set manually
002800  3               ;	aflag			; adventure mode
002800  3               ;	bflag			; big sprites (16x24)
002800  3               ;	fflag			; floppy version (skip #0axx)
002800  3               ;	gflag			; graphic colour mode
002800  3               ;	hflag			; hidden sprite mode
002800  3               ;	iflag			; invert mode
002800  3               
002800  3               .if mflag
002800  3               	.out "- MEN/INV enabled"
002800  3               .endif
002800  3               .if pflag
002800  3               	.out "- Particles enabled"
002800  3               .endif
002800  3               .if sflag
002800  3               	.out "- Scrolling enabled"
002800  3               .endif
002800  3               .if dflag
002800  3               	.out "- Digging enabled"
002800  3               .endif
002800  3               .if cflag
002800  3               	.out "- Collectable blocks enabled"
002800  3               .endif
002800  3               .if oflag
002800  3               	.out "- Objects enabled"
002800  3               .endif
002800  3               .if lflag
002800  3               	.out "- Ladders enabled"
002800  3               .endif
002800  3               .if aflag
002800  3               	.out "- Adventure mode enabled"
002800  3               .endif
002800  3               .if bflag
002800  3               	.out "- Big Sprites (16x24) enabled"
002800  3               .endif
002800  3               .if gflag
002800  3               	.out "- Colourmode enabled"
002800  3               .endif
002800  3               .if hflag
002800  3               	.out "- Hidden sprites/foregroundblocks enabled"
002800  3               .endif
002800  3               .if iflag
002800  3               	.out "- Invert mode enabled"
002800  3               .endif
002800  3               
002800  3               ; Global definitions
002800  3               
002800  3               	FONT 		= font	; Font address
002800  3               
002800  3               ; Block characteristics.
002800  3               
002800  3               	PLATFM	= 1		; platform.
002800  3               	WALL	= PLATFM + 1	; solid wall.
002800  3               	LADDER	= WALL + 1	; ladder.
002800  3               	FODDER	= LADDER + 1	; fodder block.
002800  3               	DEADLY	= FODDER + 1	; deadly block.
002800  3               	CUSTOM	= DEADLY + 1	; custom block.
002800  3               	WATER	= CUSTOM + 1	; water block.
002800  3                       COLECT	= WATER + 1	; collectable block.
002800  3                       NUMTYP	= COLECT + 1	; number of types.
002800  3               
002800  3               ; Sprites.
002800  3               
002800  3               .if bflag
002800  3               	SPR_HGT	= 12		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .else				; 16x16 sprites
002800  3               	SPR_HGT = 9		; Sprite height
002800  3               	SPR_WID = 8		; Sprite width
002800  3               	NUMSPR	= 12		; number of sprites.
002800  3               .endif
002800  3               
002800  3               	TABSIZ = 17		; size of each entry.
002800  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
002800  3               	NMESIZ = 4		; bytes stored in nmetab for each sprite.
002800  3               	var_X  = 8		; new x coordinate of sprite.
002800  3               	var_Y  = var_X + 1	; new y coordinate of sprite.
002800  3               	PAM1ST = 5		; first sprite parameter, old x (ix+5).
002800  3               
002800  3               ; Particle engine.
002800  3               
002800  3               	NUMSHR = 55		; pieces of shrapnel.
002800  3               	SHRSIZ = 6		; bytes per particle.
002800  3               
002800  3               .if iflag
002800  3               	TxtInvert   = $ff	; Invert byte for character printing
002800  3               	ScrFillByte = $ff	; Screen fill byte for CLS
002800  3               .else
002800  3               	TxtInvert   = $00	; Invert byte for character printing
002800  3               	ScrFillByte = $00	; Screen fill byte for CLS
002800  3               .endif
002800  3               
002800  3               .if gflag
002800  3               	ScrMode     = $d0	;  $d0 = CLEAR4a colour
002800  3               .else
002800  3               	ScrMode     = $f0	;  $f0 = CLEAR4  mono
002800  3               .endif
002800  3               
002800  3               ;===============================================================
002800  3               ; Game starts here
002800  3               ;===============================================================
002800  3               
002800  3               .segment "CODE"
002800  3               
002800  3               ; Clear zp variables
002800  3               
002800  3  A9 00        	lda #0
002802  3  A2 00        	ldx #0
002804  3               clrloop:
002804  3  95 00        	sta 0,x
002806  3  E8           	inx
002807  3  D0 FB        	bne clrloop
002809  3               
002809  3               gameloop:
002809  3  20 BE 28     	jsr game	 	; start the game.
00280C  3  4C 09 28     	jmp gameloop
00280F  3               
00280F  3               ; Definition of variables
00280F  3               ; Make sure pointers are arranged in the same order as the data itself.
00280F  3               
00280F  3  8D 3F        msgptr:		.word msgdat	; messages
002811  3  FF 40        blkptr:		.word chgfx	; block graphics.
002813  3  01 41        proptr:		.word bprop	; address of char properties.
002815  3  02 41        sptptr:		.word sprgfx	; sprite graphics
002817  3  82 41        frmptr:		.word frmlst	; sprite frames.
002819  3  86 41        scrptr:		.word scdat	; address of screens.
00281B  3  92 41        nmeptr:		.word nmedat	; enemy start positions.
00281D  3  97 41        objptr:		.word objdta	; object graphics
00281F  3               
00281F  3               ;TxtFilter:	.byte $ff
00281F  3  04 03 02 01  txtcol:		.byte green,yellow,blue,red
002823  3               
002823  3               ; Don't change the order of these four.
002823  3               ; Menu routine relies on winlft following wintop.
002823  3               
002823  3  01           wintop:		.byte WINDOWTOP	; top of window.
002824  3  01           winlft:		.byte WINDOWLFT	; left edge.
002825  3  16           winhgt:		.byte WINDOWHGT	; window height.
002826  3  1E           winwid:		.byte WINDOWWID	; window width.
002827  3  01           numob:		.byte NUMOBJ	; number of objects in game.
002828  3               
002828  3               ; Variables start here.
002828  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002828  3               
002828  3  08           wntopx:		.byte (8 * WINDOWTOP)
002829  3  08           wnlftx:		.byte (8 * WINDOWLFT)
00282A  3  A8           wnbotx:		.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00282B  3  E6           wnrgtx:		.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00282C  3               
00282C  3               ; Assorted game routines which can go in contended memory.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for inventory called by the INV command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with objects seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected objectnr of INV menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               .if mflag
00282C  3               minve:
00282C  3               .if gflag
00282C  3               	lda #$ff		; blue frontcolour
00282C  3               	sta andeor
00282C  3               	lda #$aa		; yellow backcoloour
00282C  3               	sta andeor+1
00282C  3               .endif
00282C  3               	lda #<(invdis)		; routine address.
00282C  3               	sta mod0+1		; set up menu routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(invdis)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               	lda #<(fopt)		; find option from available objects.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fopt)
00282C  3               	sta mod1+1+1
00282C  3               	jmp dbox		; do menu routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Entry for menu called by the MENU command
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  X   = message nr with menu items seperated with ,
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected line nr of MENU menu
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               mmenu:
00282C  3               	lda #<(always)		; routine address.
00282C  3               	sta mod0+1		; set up routine.
00282C  3               	sta mod2+1		; set up count routine.
00282C  3               	lda #>(always)
00282C  3               	sta mod0+2
00282C  3               	sta mod2+2
00282C  3               
00282C  3               	lda #<(fstd)		; standard option selection.
00282C  3               	sta mod1+1		; set up routine.
00282C  3               	lda #>(fstd)
00282C  3               	sta mod1+2
00282C  3               
00282C  3               ; Drop through into box routine.
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; Work out size of box for message or menu.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               dbox:
00282C  3               	lda #<(msgdat)		; pointer to messages.
00282C  3               	sta z80_l
00282C  3               	lda #>(msgdat)
00282C  3               	sta z80_h
00282C  3               
00282C  3               	jsr getwrd		; get message number.
00282C  3               
00282C  3               	lda z80_h		; store pointer to message.
00282C  3               	sta TmpAddr
00282C  3               	lda z80_l
00282C  3               	sta TmpAddr+1
00282C  3               
00282C  3               	lda #1			; height.
00282C  3               	sta z80_d
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               	sta z80_e		; maximum width.
00282C  3               dbox5:
00282C  3               	lda #0			; this line"s width.
00282C  3               	sta z80_b
00282C  3               mod2:
00282C  3               	jsr always		; item in player"s possession?
00282C  3               	cmp #255
00282C  3               	bne dbox6		; not in inventory, skip this line.
00282C  3               	inc z80_d		; add to tally.
00282C  3               dbox6:
00282C  3               	ldy #0			; get character.
00282C  3               	lda (z80_hl),y
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a		; reached end of line?
00282C  3               	cmp #','
00282C  3               	beq dbox3		; yes.
00282C  3               	cmp #13
00282C  3               	beq dbox3		; yes.
00282C  3               	inc z80_b		; add to this line"s width.
00282C  3               	lda z80_a
00282C  3               	bmi dbox4		; end of message? yes, end count.
00282C  3               	jmp dbox6		; repeat until we find the end.
00282C  3               dbox3:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox5		; no, carry on looking.
00282C  3               	lda z80_b		; make this the widest so far.
00282C  3               	sta z80_e
00282C  3               	jmp dbox5		; keep looking.
00282C  3               dbox4:
00282C  3               	lda z80_e		; maximum line width.
00282C  3               	cmp z80_b		; have we exceeded longest so far?
00282C  3               	bpl dbox8		; no, carry on looking.
00282C  3               	lda z80_b		; final line is the longest so far.
00282C  3               	sta z80_e
00282C  3               dbox8:
00282C  3               	dec z80_d		; decrement items found.
00282C  3               	bne :+			; total was zero.
00282C  3               	lda #255
00282C  3               	sta varopt
00282C  3               	jmp dbox15
00282C  3               :
00282C  3               	lda z80_e		; longest line.
00282C  3               	bne :+			; was it zero?
00282C  3               	jmp dbox15		; total was zero.
00282C  3               :
00282C  3               	sta bwid		; set up size.
00282C  3               	lda z80_d
00282C  3               	sta blen
00282C  3               
00282C  3               ;--------------------------------------------------------------
00282C  3               ; That's set up our box size.
00282C  3               ;--------------------------------------------------------------
00282C  3               
00282C  3               	lda winhgt		; window height in characters.
00282C  3               	sec
00282C  3               	sbc z80_d		; subtract height of box.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc wintop		; add top edge of window.
00282C  3               	sta btop		; set up box top.
00282C  3               
00282C  3               	lda winwid		; window width in characters.
00282C  3               	sec
00282C  3               	sbc z80_e		; subtract box width.
00282C  3               	lsr a			; divide by 2.
00282C  3               	clc
00282C  3               	adc winlft		; add left edge of window.
00282C  3               	sta blft		; box left.
00282C  3               
00282C  3               	lda #<(FONT-256)		; font.
00282C  3               	sta grbase		; set up for text display.
00282C  3               	lda #>(FONT-256)
00282C  3               	sta grbase+1
00282C  3               
00282C  3               	lda TmpAddr+1		; restore message pointer.
00282C  3               	sta z80_l
00282C  3               	lda TmpAddr
00282C  3               	sta z80_h
00282C  3               
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set display coordinate.
00282C  3               	lda #0			; start at object zero.
00282C  3               	sta combyt		; store number of object in combyt.
00282C  3               dbox2:
00282C  3               	lda combyt		; get object number.
00282C  3               	sta z80_a
00282C  3               mod0:
00282C  3               	jsr always		; check inventory for display.
00282C  3               	cmp #255
00282C  3               	beq :+
00282C  3               	jmp dbox13		; not in inventory, skip this line.
00282C  3               :
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set left display position.
00282C  3               	lda bwid		; box width.
00282C  3               	sta z80_b		; store width.
00282C  3               dbox0:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	cmp #','		; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               	cmp #13			; end of line?
00282C  3               	beq dbox1		; yes, next one.
00282C  3               
00282C  3               	cmp #141			; end of line?
00282C  3               	bne :+
00282C  3               	dec bwid
00282C  3               	jmp dbox7		; yes, next one.
00282C  3               :
00282C  3               	dec z80_b		; one less to display.
00282C  3               	and #127		; remove terminator.
00282C  3               
00282C  3               	jsr pchr		; display on screen.
00282C  3               
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	sta z80_a
00282C  3               	inc z80_l		; next character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	lda z80_a
00282C  3               	cmp #128		; end of message?
00282C  3               	bmi :+
00282C  3               	jmp dbox7		; yes, job done.
00282C  3               :
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	beq :+			; are any left?
00282C  3               	jmp dbox0		; yes, continue.
00282C  3               :
00282C  3               ;---------------------------------------------------
00282C  3               ; Reached limit of characters per line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dbox9:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #13			; another line?
00282C  3               	beq dbox10		; yes, do next line.
00282C  3               	cmp #128		; end of message?
00282C  3               	bcs :+
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox9
00282C  3               
00282C  3               ;---------------------------------------------------
00282C  3               ; Fill box to end of line.
00282C  3               ;---------------------------------------------------
00282C  3               
00282C  3               dboxf:
00282C  3               	lda #32			; space character.
00282C  3               	jsr pchr		; display character.
00282C  3               	dec z80_b
00282C  3               	beq :+
00282C  3               	jmp dboxf		; repeat for remaining chars on line.
00282C  3               :
00282C  3               	rts
00282C  3               dbox1:
00282C  3               	inc z80_l		; skip character.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	jsr dboxf		; fill box out to right side.
00282C  3               dbox10:
00282C  3               	inc dispy		; y coordinate down a line next position.
00282C  3               	jmp dbox2		; next line.
00282C  3               dbox7:
00282C  3               	lda z80_b		; chars remaining.
00282C  3               	bne :+			; are any left?
00282C  3               	jmp dbox11		; no, nothing to draw.
00282C  3               :
00282C  3               	jsr dboxf		; fill message to line.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Drawn the box menu, now select option.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox11:
00282C  3               	lda btop		; box top.
00282C  3               	sta dispy		; set bar position.
00282C  3               dbox14:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	bne dbox14		; yes, debounce it.
00282C  3               	jsr dbar		; draw bar.
00282C  3               dbox12:
00282C  3               	jsr joykey		; get controls.
00282C  3               	cmp #$7f		; anything pressed?
00282C  3               	beq dbox12		; no, nothing.
00282C  3               	and #16			; fire button pressed?
00282C  3               	bne :+
00282C  3               mod1:
00282C  3               	jmp fstd		; yes, job done.
00282C  3               :
00282C  3               	jsr dbar		; delete bar.
00282C  3               
00282C  3               	lda joyval		; joystick reading.
00282C  3               	and #8			; going up?
00282C  3               	beq dboxu		; yes, go up.
00282C  3               
00282C  3               	ldx dispy		; vertical position of bar.
00282C  3               	inx			; look down.
00282C  3               	txa
00282C  3               	sec
00282C  3               	sbc btop		; find distance from top.
00282C  3               	cmp blen		; top of box.
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	inc dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               dboxu:
00282C  3               	lda dispy		; vertical position of bar.
00282C  3               	cmp btop		; are we at the top?
00282C  3               	bne :+
00282C  3               	jmp dbox14		; yes, go no further.
00282C  3               :
00282C  3               	dec dispy		; move bar.
00282C  3               	jmp dbox14		; continue.
00282C  3               fstd:
00282C  3               	lda dispy		; bar position.
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta varopt		; store the option.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Option not available.  Skip this line.
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbox13:
00282C  3               	ldy #0
00282C  3               	lda (z80_hl),y		; get character.
00282C  3               	inc z80_l		; next one.
00282C  3               	bne :+
00282C  3               	inc z80_h
00282C  3               :
00282C  3               	cmp #','		; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               	cmp #13			; another line?
00282C  3               	bne :+
00282C  3               	jmp dbox2		; yes, do next line.
00282C  3               :
00282C  3               
00282C  3               	bpl :+			; end of message?
00282C  3               	jmp dbox11		; yes, finish message.
00282C  3               :
00282C  3               	jmp dbox13
00282C  3               dbox15:
00282C  3               	lda TmpAddr		; pop message pointer from the stack.
00282C  3               	sta z80_h
00282C  3               	lda TmpAddr+1
00282C  3               	sta z80_l
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Invert bar
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               dbar:
00282C  3               	lda blft		; box left.
00282C  3               	sta dispx		; set display coordinate.
00282C  3               	jsr gprad		; get printing address.
00282C  3               
00282C  3               	lda bwid		; box width.
00282C  3               	sta z80_c		; loop counter in c.
00282C  3               	lda z80_h
00282C  3               	sta z80_d		; store screen address high byte.
00282C  3               dbar1:
00282C  3               	ldx #7			; pixel height in b.
00282C  3               dbar0:
00282C  3               	ldy scrtab,x
00282C  3               	lda (scraddr),y		; get screen byte.
00282C  3               	eor #255		; reverse all bits.
00282C  3               	sta (scraddr),y		; write back to screen.
00282C  3               	dex			; next line down.
00282C  3               	bpl dbar0		; draw rest of character.
00282C  3               
00282C  3               	inc scraddr		; one char right.
00282C  3               	dec z80_c		; decrement character counter.
00282C  3               	bne dbar1		; repeat for whole line.
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Point to object
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  combyt
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  A = object number, A=255 if already in possession
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               invdis:
00282C  3               	lda z80_l		; store message text pointer.
00282C  3               	pha
00282C  3               	lda z80_h
00282C  3               	pha
00282C  3               	lda combyt		; object number.
00282C  3               	inc combyt		; ready for next one.
00282C  3               	jsr gotob		; check if we have object.
00282C  3               	tay
00282C  3               	pla
00282C  3               	sta z80_h
00282C  3               	pla
00282C  3               	sta z80_l
00282C  3               	tya
00282C  3               	rts
00282C  3               
00282C  3               ;------------------------------------------------------
00282C  3               ; Find option selected.
00282C  3               ;
00282C  3               ; Input:
00282C  3               ;  -
00282C  3               ;
00282C  3               ; Output:
00282C  3               ;  OPT = selected object
00282C  3               ;------------------------------------------------------
00282C  3               
00282C  3               fopt:
00282C  3               	lda dispy
00282C  3               	sec
00282C  3               	sbc btop		; find selected option.
00282C  3               	sta tmp+2		; option selected in b register.
00282C  3               	inc tmp+2
00282C  3               
00282C  3               	lda #0			; set to first item.
00282C  3               	sta combyt		; object number.
00282C  3               fopt0:
00282C  3               	jsr fobj		; find next object in inventory.
00282C  3               	dec tmp+2
00282C  3               	bne fopt0		; repeat for relevant steps down the list.
00282C  3               
00282C  3               	lda combyt		; get option.
00282C  3               	sta varopt		; store the option.
00282C  3               	dec varopt		; one less, due to where we increment combyt.
00282C  3               	jmp redraw		; redraw the screen.
00282C  3               fobj:
00282C  3               	ldy combyt		; object number.
00282C  3               	inc combyt		; ready for next item.
00282C  3               	tya
00282C  3               	jsr gotob		; do we have this item?
00282C  3               	cmp #255
00282C  3               	bne :+
00282C  3               	rts
00282C  3               :
00282C  3               	jmp fobj		; yes, it's on the list.
00282C  3               
00282C  3               ;bwid:	.byte 0              ; box/menu width.
00282C  3               ;blen:	.byte 0              ; box/menu height.
00282C  3               ;btop:	.byte 0              ; box coordinates.
00282C  3               ;blft:	.byte 0
00282C  3               .endif
00282C  3               
00282C  3               ;----------------------------------------------------
00282C  3               ; Delay routine 1/50 sec
00282C  3               ;
00282C  3               ; Wait 1/60 sec = 16666 usec
00282C  3               ; Wait 208 x 16 =  3328 usec
00282C  3               ;                 19994 usec
00282C  3               ; rts           =     6 usec
00282C  3               ; Total         = 20000 usec
00282C  3               ;----------------------------------------------------
00282C  3               
00282C  3               delay:
00282C  3  85 rr        	sta xtmp
00282E  3               del_loop:
00282E  3  20 F4 FF     	jsr SCRSYNC		; wait for flyback
002831  3               
002831  3  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002833  3               delay1:
002833  3  61 80        	adc ($80,x)		;	 6 usec
002835  3  61 80        	adc ($80,x)		;	 6 usec
002837  3  88           	dey			;	 2 usec
002838  3  D0 F9        	bne delay1		;	 2 usec
00283A  3  EA           	nop			; 2 usec
00283B  3  EA           	nop			; 2 usec
00283C  3               				; tot: 20000 usec
00283C  3  C6 rr        	dec xtmp
00283E  3  D0 EE        	bne del_loop
002840  3  60           	rts
002841  3               
002841  3               ;----------------------------------------------------
002841  3               ; Clear sprite table.
002841  3               ;
002841  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
002841  3               ;----------------------------------------------------
002841  3               
002841  3               xspr:
002841  3  A9 FF        	lda #255		; clear byte.
002843  3  A2 00        	ldx #0			; length of table.
002845  3               xspr0:
002845  3  9D DF 39     	sta sprtab,x		; sprite table.
002848  3  E8           	inx			; move to next byte.
002849  3  E0 CC        	cpx #SPRBUF
00284B  3  D0 F8        	bne xspr0		; repeat for rest of table.
00284D  3  60           	rts
00284E  3               
00284E  3               ;-------------------------------------------------------------
00284E  3               ; Initialise all objects.
00284E  3               ;
00284E  3               ; Reset current room,y,x to start room,y,x for all objects
00284E  3               ;-------------------------------------------------------------
00284E  3               
00284E  3               .if oflag
00284E  3               iniob:
00284E  3               	lda #<objdta 		; objects table.
00284E  3               	sta z80_x
00284E  3               	lda #>objdta
00284E  3               	sta z80_i
00284E  3               
00284E  3               	ldx numob 		; number of objects in the game.
00284E  3               iniob0:
00284E  3               	ldy #35
00284E  3               	lda (z80_ix),y 		; start screen.
00284E  3               	ldy #32
00284E  3               	sta (z80_ix),y 		; set start screen.
00284E  3               
00284E  3               	ldy #36
00284E  3               	lda (z80_ix),y 		; find start y.
00284E  3               	ldy #33
00284E  3               	sta (z80_ix),y 		; set start y.
00284E  3               
00284E  3               	ldy #37
00284E  3               	lda (z80_ix),y 		; get initial x.
00284E  3               	ldy #34
00284E  3               	sta (z80_ix),y 		; set x coord.
00284E  3               
00284E  3               	clc 			; point to next object.
00284E  3               	lda z80_x
00284E  3               	adc #38			; distance between objects.
00284E  3               	sta z80_x
00284E  3               	bcc :+
00284E  3               	inc z80_i
00284E  3               :
00284E  3               	dex 			; repeat.
00284E  3               	bne iniob0
00284E  3               
00284E  3               	rts
00284E  3               .endif
00284E  3               
00284E  3               ;-------------------------------------------------------------
00284E  3               ; Screen synchronisation.
00284E  3               ;
00284E  3               ;  - read joystick/keyboard
00284E  3               ;  - handle sound
00284E  3               ;  - sync framerate with clock
00284E  3               ;  - handle shrapnel every even frame
00284E  3               ;-------------------------------------------------------------
00284E  3               
00284E  3               vsync:
00284E  3  48           	pha
00284F  3  98           	tya
002850  3  48           	pha
002851  3  8A           	txa
002852  3  48           	pha
002853  3  20 FD 30     	jsr joykey		; read joystick/keyboard.
002856  3               vsync1:
002856  3               ;	lda Timer2_High		; sync framerate with clock
002856  3               ;	cmp #$ff
002856  3               ;	bne vsync1
002856  3               ;	lda #>50000
002856  3               ;	sta Timer2_High
002856  3               ;	lda #<50000
002856  3               ;	sta Timer2_Low
002856  3               
002856  3  A5 rr        	lda clock
002858  3  29 01        	and #1
00285A  3  D0 03        	bne:+
00285C  3  20 BD 28     	jsr proshr		; handle shrapnel every even frame
00285F  3               :
00285F  3  AD 7D 28     	lda sndtyp
002862  3  F0 13        	beq sndskip
002864  3               sndloop:
002864  3  AD 02 B0     	lda SpeakerBit		; handle sound
002867  3  AC 7D 28     	ldy sndtyp
00286A  3               sndwait:
00286A  3  88           	dey
00286B  3  D0 FD        	bne sndwait
00286D  3  49 04        	eor #4
00286F  3  8D 02 B0     	sta SpeakerBit
002872  3  CE 7D 28     	dec sndtyp
002875  3  D0 ED        	bne sndloop
002877  3               sndskip:
002877  3  68           	pla
002878  3  AA           	tax
002879  3  68           	pla
00287A  3  A8           	tay
00287B  3  68           	pla
00287C  3  60           	rts
00287D  3               
00287D  3  00           sndtyp:	.byte 0
00287E  3               
00287E  3               ;-----------------------------------------------
00287E  3               ; Redraw the screen.
00287E  3               ;
00287E  3               ; Remove old copy of all sprites for redraw.
00287E  3               ;-----------------------------------------------
00287E  3               
00287E  3               redraw:
00287E  3               .if gflag
00287E  3               	lda #$ff
00287E  3               	sta andeor
00287E  3               	lda #$00
00287E  3               	sta andeor+1
00287E  3               .endif
00287E  3  A5 69        	lda z80_i 		; place sprite pointer on stack.
002880  3  48           	pha
002881  3  A5 68        	lda z80_x
002883  3  48           	pha
002884  3               
002884  3  20 81 2D     	jsr droom		; show screen layout.
002887  3               .if oflag
002887  3               	jsr shwob		; draw objects.
002887  3               .endif
002887  3               numsp0:
002887  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002889  3  85 rr        	sta tmp
00288B  3               
00288B  3  A9 DF        	lda #<sprtab		; sprite table.
00288D  3  85 68        	sta z80_x
00288F  3  A9 39        	lda #>sprtab
002891  3  85 69        	sta z80_i
002893  3               redrw0:
002893  3  A0 00        	ldy #0
002895  3  B1 68        	lda (z80_ix),y		; old sprite type.
002897  3  C9 FF        	cmp #255		; is it enabled?
002899  3  F0 0B        	beq redrw1 		; no, find next one.
00289B  3               
00289B  3  A0 03        	ldy #3
00289D  3  B1 68        	lda (z80_ix),y 		; sprite y.
00289F  3  C9 B1        	cmp #177		; beyond maximum?
0028A1  3  B0 03        	bcs redrw1		; yes, nothing to draw.
0028A3  3               
0028A3  3  20 A8 34     	jsr sspria		; show single sprite.
0028A6  3               redrw1:
0028A6  3  18           	clc			; next sprite.
0028A7  3  A5 68        	lda z80_x
0028A9  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
0028AB  3  85 68        	sta z80_x
0028AD  3  90 02        	bcc :+
0028AF  3  E6 69        	inc z80_i
0028B1  3               :
0028B1  3  C6 rr        	dec tmp			; repeat for remaining sprites.
0028B3  3  D0 DE        	bne redrw0
0028B5  3               rpblc1:
0028B5  3               ;	jsr dshrp		; redraw shrapnel.
0028B5  3               
0028B5  3               .if aflag
0028B5  3               	jsr rbloc		; draw blocks for this screen
0028B5  3               .endif
0028B5  3  68           	pla			; retrieve sprite pointer.
0028B6  3  85 68        	sta z80_x
0028B8  3  68           	pla
0028B9  3  85 69        	sta z80_i
0028BB  3               
0028BB  3  60           	rts
0028BC  3               
0028BC  3               ;----------------------------------------------------------------------
0028BC  3               ; Atomic palette is static
0028BC  3               ;----------------------------------------------------------------------
0028BC  3               
0028BC  3               setpal:
0028BC  3  60           	rts
0028BD  3               
0028BD  3               ;----------------------------------------------------------------------
0028BD  3               ; FODDER check
0028BD  3               ;----------------------------------------------------------------------
0028BD  3               
0028BD  3               .if pflag .or dflag
0028BD  3               fdchk:
0028BD  3               	cmp #FODDER 		; is it fodder?
0028BD  3               	beq :+
0028BD  3               	rts 			; no.
0028BD  3               :
0028BD  3               	lda #0			; wipe fodder in MAP
0028BD  3               	ldy #0
0028BD  3               	sta (bufaddr),y 	; rewrite block type.
0028BD  3               
0028BD  3               	lda dispx		; x=x/8
0028BD  3               	pha
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	sta dispx
0028BD  3               
0028BD  3               	lda dispy		; y=y/8
0028BD  3               	pha
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	lsr a
0028BD  3               	sta dispy
0028BD  3               
0028BD  3               	lda #0 			; block to write.
0028BD  3               	jsr pattr 		; write block.
0028BD  3               
0028BD  3               	pla
0028BD  3               	sta dispy
0028BD  3               	pla
0028BD  3               	sta dispx
0028BD  3               	rts
0028BD  3               .endif
0028BD  3               
0028BD  3               ;----------------------------------------------------
0028BD  3               ; Scrolly text and puzzle variables.
0028BD  3               ;----------------------------------------------------
0028BD  3               
0028BD  3               .if sflag
0028BD  3               txtbit:	.byte 128		; bit to write.
0028BD  3               txtwid:	.byte 16		; width of ticker message.
0028BD  3               txtpos:	.word msgdat
0028BD  3               txtini:	.word msgdat
0028BD  3               txtscr:	.word ScreenAddr
0028BD  3               .endif
0028BD  3               
0028BD  3               ;----------------------------------------------------
0028BD  3               ; Specialist routines.
0028BD  3               ; Process shrapnel.
0028BD  3               ;----------------------------------------------------
0028BD  3               proshr:
0028BD  3               .if pflag
0028BD  3               	lda #<SHRAPN		; table.
0028BD  3               	sta z80_x
0028BD  3               	lda #>SHRAPN
0028BD  3               	sta z80_i
0028BD  3               
0028BD  3               	lda #NUMSHR		; shrapnel pieces to process.
0028BD  3               	sta shrctr
0028BD  3               prosh0:
0028BD  3               	ldy #0
0028BD  3               	lda (z80_ix),y		; on/off marker.
0028BD  3               	asl a
0028BD  3               proshx:
0028BD  3               	bcs :+
0028BD  3               	jsr prosh1 		; on, so process it.
0028BD  3               :
0028BD  3               	clc
0028BD  3               	lda z80_x
0028BD  3               	adc #SHRSIZ
0028BD  3               	sta z80_x
0028BD  3               	bcc :+
0028BD  3               	inc z80_i
0028BD  3               :
0028BD  3               	dec shrctr		; round again.
0028BD  3               	bne prosh0
0028BD  3               .endif
0028BD  3               .if sflag
0028BD  3               	jsr scrly
0028BD  3               .endif
0028BD  3  60           	rts
0028BE  3               
0028BE  3               .if pflag
0028BE  3               ;shrctr:	.byte 0
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Proces shrapnel piece
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               prosh1:
0028BE  3               	jsr plot 		; delete the pixel.
0028BE  3               
0028BE  3               	lda #<shrptr		; shrapnel routine pointers.
0028BE  3               	sta z80_l
0028BE  3               	lda #>shrptr
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y		; restore shrapnel type.
0028BE  3               	jsr prosh2 		; run the routine.
0028BE  3               	jsr chkxy		; check x and y are good before we redisplay.
0028BE  3               
0028BE  3               	lda #<SHRSIZ 		; distance to next.
0028BE  3               	sta z80_e
0028BE  3               	lda #>SHRSIZ
0028BE  3               	sta z80_d
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Run the routine
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               prosh2:
0028BE  3               	asl a 			; 2 bytes per address.
0028BE  3               	tay
0028BE  3               	lda shrptr,y
0028BE  3               	sta z80_l
0028BE  3               	lda shrptr+1,y 		; fetch high byte from table.
0028BE  3               	sta z80_h
0028BE  3               	jmp (z80_hl) 		; jump to routine.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Paricle routine table
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shrptr:	.word laser		; laser.
0028BE  3               	.word trail		; vapour trail.
0028BE  3               	.word shrap		; shrapnel from explosion.
0028BE  3               	.word dotl		; horizontal starfield left.
0028BE  3               	.word dotr		; horizontal starfield right.
0028BE  3               	.word dotu		; vertical starfield up.
0028BE  3               	.word dotd		; vertical starfield down.
0028BE  3               	.word ptcusr		; user particle.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Explosion shrapnel.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shrap:
0028BE  3               	ldy #1
0028BE  3               	lda (z80_ix),y 		; get the angle.
0028BE  3               	clc
0028BE  3               	adc #<shrsin		; shrapnel sine table.
0028BE  3               	sta z80_l
0028BE  3               	lda #>shrsin
0028BE  3               	adc #0
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; fetch value from table.
0028BE  3               	sta z80_e
0028BE  3               	inc z80_l 		; next byte of table.
0028BE  3               	bne :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y		; fetch value from table.
0028BE  3               	sta z80_d
0028BE  3               	inc z80_l		; next byte of table.
0028BE  3               	bne :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; fetch value from table.
0028BE  3               	sta z80_c
0028BE  3               	inc z80_l 		; next byte of table.
0028BE  3               	bne :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; fetch value from table.
0028BE  3               	sta z80_b
0028BE  3               
0028BE  3               	ldy #2
0028BE  3               	lda (z80_ix),y 		; x coordinate in hl.
0028BE  3               	clc
0028BE  3               	adc z80_e		; add sine lb
0028BE  3               	sta (z80_ix),y		; store new coordinate lb.
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	adc z80_d		; add sine hb
0028BE  3               	sta (z80_ix),y		; store new coordinate hb.
0028BE  3               
0028BE  3               	ldy #4
0028BE  3               	lda (z80_ix),y	 	; y coordinate in hl.
0028BE  3               	clc
0028BE  3               	adc z80_c		; add cosine lb
0028BE  3               	sta (z80_ix),y		; store new coordinate lb.
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	adc z80_b		; add cosine lb
0028BE  3               	sta (z80_ix),y		; store new coordinate hb.
0028BE  3               
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Move dots
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               dotl:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1		 	; move left.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               dotr:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1		 	; move left.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               dotu:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1		 	; move up.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               dotd:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1			; move down.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Check if coordinates are ok before redrawing at new position.
0028BE  3               ;
0028BE  3               ; left:   X>L		X=L	Ok
0028BE  3               ; right:  R+15>X	X=R	Ok
0028BE  3               ; top:    Y>T		Y=T	Ok
0028BE  3               ; bottom: B+15>Y	Y=B	Ok
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               chkxy:
0028BE  3               
0028BE  3               ; top:    Y>T		Y=T	Ok
0028BE  3               
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	cmp wntopx		; window top.
0028BE  3               	bcs :+			; compare with top window limit.
0028BE  3               	jmp kilshr		; out of window, kill shrapnel.
0028BE  3               :
0028BE  3               ; left:   X>L		X=L	Ok
0028BE  3               
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	cmp wnlftx		; left edge.
0028BE  3               	bcs :+			; compare with left window limit.
0028BE  3               	jmp kilshr		; out of window, kill shrapnel.
0028BE  3               :
0028BE  3               ; bottom: B+15>Y	Y=B	Ok
0028BE  3               
0028BE  3               	lda wnbotx		; point to bottom.
0028BE  3               	clc
0028BE  3               	adc #15
0028BE  3               	ldy #3
0028BE  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	bcs :+			; compare with shrapnel x coordinate.
0028BE  3               	jmp kilshr		; off screen, kill shrapnel..
0028BE  3               :
0028BE  3               ; right:  R+15>X	X=R	Ok
0028BE  3               
0028BE  3               	lda wnrgtx		; point to right edge.
0028BE  3               	clc
0028BE  3               	adc #15
0028BE  3               	ldy #5
0028BE  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0028BE  3               	bcs :+			; compare with window limit.
0028BE  3               	jmp kilshr		; off screen, kill shrapnel.
0028BE  3               :
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Drop through.
0028BE  3               ; Display shrapnel.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               plot:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y		; y integer.
0028BE  3               	sta dispy	 	; workspace coordinates.
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y	 	; x integer.
0028BE  3               	sta dispx 		; workspace coordinates.
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y 		; type.
0028BE  3               	bne :+			; is it a laser?
0028BE  3               	jmp plot1 		; yes, draw laser instead.
0028BE  3               :
0028BE  3               plot0:
0028BE  3               	lda dispx		; which pixel within byte do we
0028BE  3               	and #7			; want to set first?
0028BE  3               	tay
0028BE  3               	lda dots,y 		; table of small pixel positions.
0028BE  3               	sta z80_e 		; get value.
0028BE  3               
0028BE  3               	jsr scadd 		; screen address.
0028BE  3               	ldy #0
0028BE  3               	lda (scraddr),y		; see what's already there.
0028BE  3               	eor z80_e
0028BE  3               	sta (scraddr),y 	; put back on screen.
0028BE  3               	rts
0028BE  3               
0028BE  3               plot1:
0028BE  3               	jsr scadd 		; screen address.
0028BE  3               	ldy #0
0028BE  3               	lda (scraddr),y 	; fetch byte there.
0028BE  3               	eor #255 		; toggle all bits.
0028BE  3               	sta (scraddr),y 	; new byte.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Switch off shrapnel
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               kilshr:
0028BE  3               	lda #128
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y	; switch off shrapnel.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Sine/cosine table
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0028BE  3               	.word 1024,0,946,65144,724,64811,391,64589
0028BE  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0028BE  3               	.word 64512,0,64589,391,64811,724,65144,946
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create trail
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               trail:
0028BE  3               	ldy #1
0028BE  3               	lda (z80_ix),y 	; time remaining.
0028BE  3               	sec
0028BE  3               	sbc #1
0028BE  3               	sta (z80_ix),y
0028BE  3               	bne :+
0028BE  3               	jmp trailk		; time to switch it off.
0028BE  3               :
0028BE  3               	jsr qrand		; get a random number.
0028BE  3               	lsr a 			; x or y axis?
0028BE  3               	bcc :+
0028BE  3               	jmp trailv		; use y.
0028BE  3               :
0028BE  3               ; Trail horizontal
0028BE  3               
0028BE  3               	lsr a 			; which direction?
0028BE  3               	bcc :+
0028BE  3               	jmp traill		; go left.
0028BE  3               :
0028BE  3               ; Trail right
0028BE  3               
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1	 		; go right.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Trail left
0028BE  3               
0028BE  3               traill:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1 			; go left.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Trail vertical
0028BE  3               
0028BE  3               trailv:
0028BE  3               	lsr a		 	; which direction?
0028BE  3               	bcc :+
0028BE  3               	jmp trailu		; go up.
0028BE  3               :
0028BE  3               ; Trail down
0028BE  3               
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	clc
0028BE  3               	adc #1 			; go down.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Trail up
0028BE  3               
0028BE  3               trailu:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y
0028BE  3               	sec
0028BE  3               	sbc #1 			; go up.
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ; Kill trail
0028BE  3               
0028BE  3               trailk:
0028BE  3               	lda #200		; set off-screen to kill vapour trail.
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create laser beam
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               laser:
0028BE  3               	ldy #1
0028BE  3               	lda (z80_ix),y 		; direction.
0028BE  3               	ror a 			; left or right?
0028BE  3               	bcs :+
0028BE  3               	jmp laserl		; move left.
0028BE  3               :
0028BE  3               ; Laser right
0028BE  3               
0028BE  3               	lda #8			; distance to travel.
0028BE  3               	sta z80_b
0028BE  3               	jmp laserm		; move laser.
0028BE  3               
0028BE  3               ; Laser left
0028BE  3               
0028BE  3               laserl:
0028BE  3               	lda #248		; distance to travel.
0028BE  3               	sta z80_b
0028BE  3               laserm:
0028BE  3               	ldy #5
0028BE  3               	lda (z80_ix),y		; x position.
0028BE  3               	clc
0028BE  3               	adc z80_b		; add distance.
0028BE  3               	sta (z80_ix),y		; set new x coordinate.
0028BE  3               
0028BE  3               ; Test new block.
0028BE  3               
0028BE  3               	sta dispx 		; set x for block collision detection purposes.
0028BE  3               	ldy #3
0028BE  3               	lda (z80_ix),y 		; get y.
0028BE  3               	sta dispy		; set coordinate for collision test.
0028BE  3               	jsr tstbl 		; get block type there.
0028BE  3               	cmp #WALL		; is it solid?
0028BE  3               	bne :+
0028BE  3               	jmp trailk		; yes, it cannot pass.
0028BE  3               :
0028BE  3               .if pflag .or dflag
0028BE  3                       cmp #FODDER             ; is it fodder?
0028BE  3                       bne :+
0028BE  3                       jsr fdchk               ; remove fodder block.
0028BE  3                       jmp trailk              ; destroy laser.
0028BE  3               :
0028BE  3               .endif
0028BE  3                       rts                     ; no, ignore it.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Dots mask
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               dots:	.byte 128,64,32,16,8,4,2,1
0028BE  3               
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Plot, preserving de.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               plotde:
0028BE  3               	lda z80_d 		; put de on stack.
0028BE  3               	pha
0028BE  3               	lda z80_e
0028BE  3               	pha
0028BE  3               
0028BE  3               	jsr plot 		; plot pixel.
0028BE  3               
0028BE  3               	pla			; restore de from stack.
0028BE  3               	sta z80_e
0028BE  3               	pla
0028BE  3               	sta z80_d
0028BE  3               
0028BE  3               	rts
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Shoot a laser.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               shoot:
0028BE  3               	sta z80_c		; store direction in c register.
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	clc
0028BE  3               shoot1:
0028BE  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0028BE  3               	sta z80_l 		; puty y coordinate in l.
0028BE  3               
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y 		; x coordinate in h.
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	lda z80_i		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcs :+
0028BE  3               	jmp vapou2		; failed, restore ix.
0028BE  3               :
0028BE  3               	lda #0
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y 		; set up a laser.
0028BE  3               
0028BE  3               	lda z80_c
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y 		; set the direction.
0028BE  3               
0028BE  3               	lda z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; set y coordinate.
0028BE  3               
0028BE  3               	ror z80_c		; check direction we want.
0028BE  3               	bcc :+
0028BE  3               	jmp shootr		; shoot right.
0028BE  3               :
0028BE  3               	lda z80_h		; X position.
0028BE  3               shoot0:
0028BE  3               	and #248		; align on character boundary.
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; set x coordinate.
0028BE  3               	jmp vapou0 		; draw first image.
0028BE  3               shootr:
0028BE  3               	lda z80_h		; x position.
0028BE  3               	clc
0028BE  3               	adc #15			; look right.
0028BE  3               	jmp shoot0		; align and continue.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create a bit of vapour trail.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               vapour:
0028BE  3               	lda z80_i		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	clc
0028BE  3               vapou3:
0028BE  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0028BE  3               	sta z80_l
0028BE  3               
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y 		; x coordinate.
0028BE  3               	adc #7
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcc :+
0028BE  3               	jmp vapou1		; no, we can use it.
0028BE  3               :
0028BE  3               vapou2:
0028BE  3               	pla
0028BE  3               	sta z80_x
0028BE  3               	pla
0028BE  3               	sta z80_i
0028BE  3               	rts
0028BE  3               vapou1:
0028BE  3               	lda z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; set up y.
0028BE  3               
0028BE  3               	lda z80_h
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y 		; set up x coordinate.
0028BE  3               
0028BE  3               	jsr qrand		; get quick random number.
0028BE  3               	and #15			; random time.
0028BE  3               	clc
0028BE  3               	adc #15			; minimum time on screen.
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y		; set time on screen.
0028BE  3               
0028BE  3               	lda #1
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; define particle as vapour trail.
0028BE  3               vapou0:
0028BE  3               	jsr chkxy		; plot first position.
0028BE  3               	jmp vapou2
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create a user particle.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               ptusr:
0028BE  3               	sta z80_f		; store timer.
0028BE  3               
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	clc
0028BE  3               	adc #7			; mid-point of sprite.
0028BE  3               	sta z80_l
0028BE  3               
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y 		; x coordinate.
0028BE  3               	clc
0028BE  3               	adc #7			; mid-point of sprite.
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcs ptusr1
0028BE  3               	rts 			; out of slots, can't generate anything.
0028BE  3               ptusr1:
0028BE  3               	lda z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y 		; set up y.
0028BE  3               
0028BE  3               	lda z80_h
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; set up x coordinate.
0028BE  3               
0028BE  3               	lda z80_f 		; restore timer.
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y		; set time on screen.
0028BE  3               
0028BE  3               	lda #7
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; define particle as user particle.
0028BE  3               
0028BE  3               	jmp chkxy		; plot first position.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create a vertical or horizontal star.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               star:
0028BE  3               	lda z80_i		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	jsr fpslot 		; find particle slot.
0028BE  3               	bcs star7		; found one we can use.
0028BE  3               star0:
0028BE  3               	pla 			; restore sprite pointer.
0028BE  3               	sta z80_x
0028BE  3               	pla
0028BE  3               	sta z80_i
0028BE  3               	rts 			; out of slots, can't generate anything.
0028BE  3               star7:
0028BE  3               	lda z80_c		; direction.
0028BE  3               	and #3 			; is it left?
0028BE  3               	bne :+
0028BE  3               	jmp star1 		; yes, it's left.
0028BE  3               :
0028BE  3               	cmp #1 			; is it right?
0028BE  3               	bne :+
0028BE  3               	jmp star2 		; yes, it's right.
0028BE  3               :
0028BE  3               	cmp #2 			; is it up?
0028BE  3               	bne :+
0028BE  3               	jmp star3 		; yes, it's up.
0028BE  3               :
0028BE  3               	ldy wntopx 		; get edge of screen.
0028BE  3               	iny			; down one pixel.
0028BE  3               	tya
0028BE  3               star8:
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y 		; set y coord.
0028BE  3               	jsr qrand 		; get quick random number.
0028BE  3               star9:
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; set x position.
0028BE  3               
0028BE  3               	lda z80_c		; direction.
0028BE  3               	and #3			; zero to three.
0028BE  3               	clc
0028BE  3               	adc #3			; 3 to 6 for starfield.
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; define particle as star.
0028BE  3               	jsr chkxy		; plot first position.
0028BE  3               	jmp star0
0028BE  3               star1:
0028BE  3               	jsr qrand		; get quick random number.
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y 		; set y coord.
0028BE  3               
0028BE  3               	lda wnrgtx 		; get edge of screen.
0028BE  3               	clc
0028BE  3               	adc #15			; add width of sprite minus 1.
0028BE  3               	jmp star9
0028BE  3               star2:
0028BE  3               	jsr qrand 		; get quick random number.
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; set y coord.
0028BE  3               
0028BE  3               	lda wnlftx		; get edge of screen.
0028BE  3               	jmp star9
0028BE  3               star3:
0028BE  3               	lda wnbotx 		; get edge of screen.
0028BE  3               	clc
0028BE  3               	adc #15 		; height of sprite minus one pixel.
0028BE  3               	jmp star8
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Find particle slot for lasers or vapour trail.
0028BE  3               ; can't use alternate accumulator.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               fpslot:
0028BE  3               	lda #<SHRAPN 		; shrapnel table.
0028BE  3               	sta z80_x
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_i
0028BE  3               
0028BE  3               	lda #NUMSHR		; number of pieces in table.
0028BE  3               	sta z80_b
0028BE  3               fpslt0:
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y		; get type.
0028BE  3               	asl a  			; is this slot in use?
0028BE  3               	bcc :+
0028BE  3               	rts			; no, we can use it.
0028BE  3               :
0028BE  3               	clc			; point to more shrapnel.
0028BE  3               	lda z80_x
0028BE  3               	adc #SHRSIZ
0028BE  3               	sta z80_x
0028BE  3               	bcc :+
0028BE  3               	inc z80_i
0028BE  3               :
0028BE  3               	dec z80_b		; repeat for all shrapnel.
0028BE  3               	bne fpslt0
0028BE  3               
0028BE  3               	clc
0028BE  3               	rts 			; out of slots, can't generate anything.
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Create an explosion at sprite position.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               explod:
0028BE  3               	sta z80_c 		; particles to create.
0028BE  3               
0028BE  3               	lda z80_i 		; store pointer to sprite.
0028BE  3               	pha
0028BE  3               	lda z80_x
0028BE  3               	pha
0028BE  3               
0028BE  3               	ldy #8
0028BE  3               	lda (z80_ix),y 		; y coordinate.
0028BE  3               	sta z80_l
0028BE  3               	ldy #9
0028BE  3               	lda (z80_ix),y		; x coordinate.
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	lda #<SHRAPN		; shrapnel table.
0028BE  3               	sta z80_x
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_i
0028BE  3               
0028BE  3               	lda #NUMSHR		; number of pieces in table.
0028BE  3               	sta explcnt
0028BE  3               expld0:
0028BE  3               	ldy #0
0028BE  3               	lda (z80_ix),y		; get type.
0028BE  3               	asl a 			; is this slot in use?
0028BE  3               	bcs expld1		; no, we can use it.
0028BE  3               expld2:
0028BE  3               	clc
0028BE  3               	lda z80_x
0028BE  3               	adc #SHRSIZ
0028BE  3               	sta z80_x
0028BE  3               	bcc :+
0028BE  3               	inc z80_i
0028BE  3               :
0028BE  3               	dec explcnt		; repeat for all shrapnel.
0028BE  3               	bne expld0
0028BE  3               expld3:
0028BE  3               	pla			; restore sprite pointer.
0028BE  3               	sta z80_x
0028BE  3               	pla
0028BE  3               	sta z80_i
0028BE  3               	rts 			; out of slots, can't generate any more.
0028BE  3               
0028BE  3               expld1:
0028BE  3               	lda z80_c		; shrapnel counter.
0028BE  3               	and #15			; 0 to 15.
0028BE  3               	clc			; add to x.
0028BE  3               	adc z80_l
0028BE  3               	ldy #3
0028BE  3               	sta (z80_ix),y		; y coord.
0028BE  3               
0028BE  3               	lda seed3 		; crap random number.
0028BE  3               	and #15			; 0 to 15.
0028BE  3               	clc 			; add to y.
0028BE  3               	adc z80_h
0028BE  3               	ldy #5
0028BE  3               	sta (z80_ix),y		; x coord.
0028BE  3               
0028BE  3               	lda #2
0028BE  3               	ldy #0
0028BE  3               	sta (z80_ix),y		; switch it on.
0028BE  3               
0028BE  3               	jsr chkxy		; plot first position.
0028BE  3               	jsr qrand		; quick random angle.
0028BE  3               	and #60 		; keep within range.
0028BE  3               	ldy #1
0028BE  3               	sta (z80_ix),y		; angle.
0028BE  3               
0028BE  3               	dec z80_c		; one less piece of shrapnel to generate.
0028BE  3               	bne expld2 		; back to main explosion loop.
0028BE  3               	jmp expld3 		; restore sprite pointer and exit.
0028BE  3               
0028BE  3               ;explcnt:	.byte 0
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Quick random
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               qrand:
0028BE  3               	jsr random		; r register.
0028BE  3               	eor seed3		; combine with seed.
0028BE  3               	sta seed3 		; new seed.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;seed3:	.byte 0
0028BE  3               
0028BE  3               ;----------------------------------------------------
0028BE  3               ; Display all shrapnel.
0028BE  3               ;----------------------------------------------------
0028BE  3               
0028BE  3               dshrp:
0028BE  3               	lda #<plotde		; display routine.
0028BE  3               	sta proshx+1
0028BE  3               	lda #>plotde
0028BE  3               	sta proshx+2
0028BE  3               	jsr proshr		; process shrapnel.
0028BE  3               
0028BE  3               	lda #<prosh1		; processing routine.
0028BE  3               	sta proshx+1
0028BE  3               	lda #>prosh1
0028BE  3               	sta proshx+2
0028BE  3               	rts
0028BE  3               
0028BE  3               ;------------------------------------------------------
0028BE  3               ; Particle engine.
0028BE  3               ;
0028BE  3               ; Init particle data for 55 particles in SHRAPN table.
0028BE  3               ; Every particle has 6 bytes.
0028BE  3               ;
0028BE  3               ; global:	-
0028BE  3               ; local:	x,y,hl
0028BE  3               ; calls:	-
0028BE  3               ;------------------------------------------------------
0028BE  3               
0028BE  3               inishr:
0028BE  3               	lda #<SHRAPN 		; table.
0028BE  3               	sta z80_l
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	ldy #0
0028BE  3               	ldx #NUMSHR		; shrapnel pieces to process.
0028BE  3               inish0:
0028BE  3               	lda #255 		; kill the shrapnel.
0028BE  3               	sta (z80_hl),y
0028BE  3               
0028BE  3               	clc 			; point there.
0028BE  3               	lda z80_l
0028BE  3               	adc #SHRSIZ		; distance to next.
0028BE  3               	sta z80_l
0028BE  3               	bcc :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	dex
0028BE  3               	bne inish0 		; round again.
0028BE  3               	rts
0028BE  3               
0028BE  3               ;------------------------------------------------------
0028BE  3               ; Check for collision between laser and sprite.
0028BE  3               ;------------------------------------------------------
0028BE  3               
0028BE  3               lcol:
0028BE  3               	lda #<SHRAPN		; shrapnel table.
0028BE  3               	sta z80_l
0028BE  3               	lda #>SHRAPN
0028BE  3               	sta z80_h
0028BE  3               
0028BE  3               	lda #NUMSHR		; number of pieces in table.
0028BE  3               	sta z80_b
0028BE  3               lcol0:
0028BE  3               	ldy #0
0028BE  3               	lda (z80_hl),y 		; get type.
0028BE  3               	beq lcol1		; yes, check collision.
0028BE  3               lcol3:
0028BE  3               	clc			; point to more shrapnel.
0028BE  3               	lda z80_l
0028BE  3               	adc #SHRSIZ
0028BE  3               	sta z80_l
0028BE  3               	bcc :+
0028BE  3               	inc z80_h
0028BE  3               :
0028BE  3               	dec z80_b		; repeat for all shrapnel.
0028BE  3               	bne lcol0
0028BE  3               	rts 			; no collision, carry not set.
0028BE  3               lcol1:
0028BE  3               	ldy #3
0028BE  3               	lda (z80_hl),y		; get y.
0028BE  3               	sec
0028BE  3               	ldy #8
0028BE  3               	sbc (z80_ix),y		; subtract sprite y.
0028BE  3               lcolh:
0028BE  3               	cmp #SPR_HGT 		; within range?
0028BE  3               	bcc :+
0028BE  3               	jmp lcol2		; no, missed.
0028BE  3               :
0028BE  3               	ldy #5
0028BE  3               	lda (z80_hl),y 		; get x.
0028BE  3               	sec
0028BE  3               	ldy #9
0028BE  3               	sbc (z80_ix),y 		; subtract sprite y.
0028BE  3               	cmp #16			; within range?
0028BE  3               	bcs :+
0028BE  3               	jmp lcol4 		; yes, collision occurred.
0028BE  3               :
0028BE  3               lcol2:
0028BE  3               	jmp lcol3
0028BE  3               lcol4:
0028BE  3               	sec
0028BE  3               	rts 			; return with carry set for collision.
0028BE  3               .endif
0028BE  3               
0028BE  3               ;------------------------------------------------------
0028BE  3               ; Main game engine code starts here.
0028BE  3               ; After initialisation, mloop is the main loop
0028BE  3               ;------------------------------------------------------
0028BE  3               
0028BE  3               game:
0028BE  3               
0028BE  3               ; Set up screen address table.
0028BE  3               
0028BE  3               setsat:
0028BE  3  A9 00        	lda #<ScreenAddr	; start of screen.
0028C0  3  85 rr        	sta scraddr
0028C2  3  A9 04        	lda #>ScreenAddr
0028C4  3  85 rr        	sta scraddr+1
0028C6  3               
0028C6  3  A0 00        	ldy #0			; vertical lines on screen.
0028C8  3               setsa0:
0028C8  3  A5 rr        	lda scraddr
0028CA  3  99 00 DC     	sta SCADTB_lb,y		; write low byte.
0028CD  3  A5 rr        	lda scraddr+1
0028CF  3  C0 19        	cpy #ScrHeight		; vertical lines on screen.
0028D1  3  90 02        	bcc :+
0028D3  3  09 F0        	ora #$F0		; plot sprites in rom if of screen
0028D5  3               :
0028D5  3  99 00 DD     	sta SCADTB_hb,y		; write high byte.
0028D8  3  20 91 35     	jsr nline		; next line down.
0028DB  3  C8           	iny			; next position in table.
0028DC  3  D0 EA        	bne setsa0
0028DE  3               
0028DE  3               ; Init hardware and graphics mode
0028DE  3               
0028DE  3  20 CA 44     	jsr init 		; Init hardware
0028E1  3               
0028E1  3               ; Init joystick
0028E1  3               
0028E1  3  20 05 45     	jsr joyinit		; Init joystick
0028E4  3               
0028E4  3               rpblc2:
0028E4  3               .if pflag
0028E4  3               	jsr inishr 		; initialise particle engine.
0028E4  3               .endif
0028E4  3               evintr:
0028E4  3  20 80 3F     	jsr evnt12 		; call intro/menu event.
0028E7  3               
0028E7  3  A9 02        	lda #WALL 		; write default property.
0028E9  3  A2 00        	ldx #0
0028EB  3               clrmap:
0028EB  3  9D 00 D8     	sta MAP,x 		; block properties.
0028EE  3  9D 00 D9     	sta MAP+256,x
0028F1  3  9D 00 DA     	sta MAP+512,x
0028F4  3  9D 00 DB     	sta MAP+768,x
0028F7  3  E8           	inx			; next byte.
0028F8  3  D0 F1        	bne clrmap
0028FA  3               
0028FA  3               .if oflag
0028FA  3               	jsr iniob 		; initialise objects.
0028FA  3               .endif
0028FA  3  A9 00        	lda #0			; put zero in accumulator.
0028FC  3  85 rr        	sta gamwon		; reset game won flag.
0028FE  3               
0028FE  3  20 69 2A     	jsr inisc 		; init the score.
002901  3               mapst:
002901  3  AD D9 3A     	lda stmap 		; start position on map.
002904  3  8D BC 3A     	sta roomtb		; set up position in table, if there is one.
002907  3               
002907  3               inipbl:
002907  3               .if aflag
002907  3               	lda #<eop		; reset blockpointer
002907  3               	sta pbptr
002907  3               	lda #>eop
002907  3               	sta pbptr+1
002907  3               .endif
002907  3               
002907  3  20 A4 36     	jsr initsc 		; set up first screen.
00290A  3               
00290A  3  A9 AB        	lda #<ssprit 		; default to spare sprite in table.
00290C  3  85 68        	sta z80_x
00290E  3  A9 3A        	lda #>ssprit
002910  3  85 69        	sta z80_i
002912  3               evini:
002912  3  20 84 3F     	jsr evnt13 		; initialisation.
002915  3               
002915  3               ; Two restarts.
002915  3               ; First restart - clear all sprites and initialise everything.
002915  3               
002915  3               rstrt:
002915  3  20 09 2A     	jsr rsevt 		; restart events.
002918  3  20 41 28     	jsr xspr 		; clear sprite table.
00291B  3  20 10 38     	jsr sprlst 		; fetch pointer to screen sprites.
00291E  3  20 99 38     	jsr ispr 		; initialise sprite table.
002921  3               
002921  3  4C 30 29     	jmp rstrt0
002924  3               
002924  3               ; Second restart - clear all but player, and don't initialise him.
002924  3               
002924  3               rstrtn:
002924  3  20 09 2A     	jsr rsevt		; restart events.
002927  3  20 3D 38     	jsr nspr 		; clear all non-player sprites.
00292A  3  20 10 38     	jsr sprlst 		; fetch pointer to screen sprites.
00292D  3  20 D6 38     	jsr kspr 		; initialise sprite table, no more players.
002930  3               
002930  3               ; Set up the player and/or enemy sprites.
002930  3               
002930  3               rstrt0:
002930  3  A9 00        	lda #0 			; zero in accumulator.
002932  3  85 rr        	sta nexlev 		; reset next level flag.
002934  3  85 rr        	sta restfl 		; reset restart flag.
002936  3  85 rr        	sta deadf 		; reset dead flag.
002938  3               
002938  3  20 81 2D     	jsr droom 		; show screen layout.
00293B  3               
00293B  3               rpblc0:
00293B  3               .if pflag
00293B  3               	jsr inishr 		; initialise particle engine.
00293B  3               .endif
00293B  3               .if aflag
00293B  3               	jsr rbloc		; draw blocks for this screen
00293B  3               .endif
00293B  3               .if oflag
00293B  3               	jsr shwob		; draw objects.
00293B  3               .endif
00293B  3               
00293B  3  A9 DF        	lda #<sprtab 		; address of sprite table, even sprites.
00293D  3  85 68        	sta z80_x
00293F  3  A9 39        	lda #>sprtab
002941  3  85 69        	sta z80_i
002943  3  20 82 33     	jsr dspr 		; display sprites.
002946  3               
002946  3  A9 F0        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002948  3  85 68        	sta z80_x
00294A  3  A9 39        	lda #>(sprtab+TABSIZ)
00294C  3  85 69        	sta z80_i
00294E  3  20 82 33     	jsr dspr 		; display sprites.
002951  3               
002951  3               
002951  3               mloop:
002951  3  20 4E 28     	jsr vsync 		; synchronise with display.
002954  3  A9 DF        	lda #<sprtab 		; address of sprite table, even sprites.
002956  3  85 68        	sta z80_x
002958  3  A9 39        	lda #>sprtab
00295A  3  85 69        	sta z80_i
00295C  3  20 82 33     	jsr dspr 		; display even sprites.
00295F  3               
00295F  3               ;	jsr plsnd 		; play sounds.
00295F  3               
00295F  3  20 BD 28     	jsr proshr
002962  3  A9 F0        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002964  3  85 68        	sta z80_x
002966  3  A9 39        	lda #>(sprtab+TABSIZ)
002968  3  85 69        	sta z80_i
00296A  3  20 82 33     	jsr dspr 		; display odd sprites.
00296D  3               
00296D  3  A9 AB        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00296F  3  85 68        	sta z80_x
002971  3  A9 3A        	lda #>(ssprit)
002973  3  85 69        	sta z80_i
002975  3               evlp1:
002975  3  20 E4 3A     	jsr evnt10 		; called once per main loop.
002978  3               
002978  3  20 00 33     	jsr pspr 		; process sprites.
00297B  3               
00297B  3               ; Main loop events.
00297B  3               
00297B  3  A9 AB        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00297D  3  85 68        	sta z80_x
00297F  3  A9 3A        	lda #>ssprit
002981  3  85 69        	sta z80_i
002983  3               evlp2:
002983  3  20 7F 3F     	jsr evnt11 		; called once per main loop.
002986  3               bsortx:
002986  3  20 76 32     	jsr bsort 		; sort sprites.
002989  3               
002989  3  A5 rr        	lda nexlev		; finished level flag.
00298B  3  F0 03        	beq :+
00298D  3  4C B5 29     	jmp newlev		; is set, go to next level.
002990  3               :
002990  3  A5 rr        	lda gamwon		; finished game flag.
002992  3  F0 03        	beq :+
002994  3  4C C4 29     	jmp evwon		; is set, finish the game.
002997  3               :
002997  3  A5 rr        	lda restfl 		; finished level flag.
002999  3  C9 01        	cmp #1			; has it been set?
00299B  3  D0 03        	bne :+
00299D  3  4C 15 29     	jmp rstrt		; yes, go to next level.
0029A0  3               :
0029A0  3  C9 02        	cmp #2			; has it been set?
0029A2  3  D0 03        	bne :+
0029A4  3  4C 24 29     	jmp rstrtn		; yes, go to next level.
0029A7  3               :
0029A7  3  A5 rr        	lda deadf 		; dead flag.
0029A9  3  F0 03        	beq :+
0029AB  3  4C CA 29     	jmp pdead		; yes, player dead.
0029AE  3               :
0029AE  3               ; back to start of main loop.
0029AE  3               
0029AE  3  E6 rr        	inc frmno
0029B0  3  E6 rr        	inc clock
0029B2  3  4C 51 29     	jmp mloop		; switched to a jmp mloop during test mode.
0029B5  3               
0029B5  3               ;----------------------------------------------------------
0029B5  3               ; Read blocks from list and update screen accordingly.
0029B5  3               ;----------------------------------------------------------
0029B5  3               
0029B5  3               .if aflag
0029B5  3               rbloc:
0029B5  3               	lda #<eop		; reset temp blockpointer
0029B5  3               	sta pbbuf
0029B5  3               	lda #>eop
0029B5  3               	sta pbbuf+1
0029B5  3               
0029B5  3               rbloc2:
0029B5  3               	lda pbbuf			; check for last block
0029B5  3               	cmp pbptr
0029B5  3               	bne rbloc1
0029B5  3               	lda pbbuf+1
0029B5  3               	cmp pbptr+1
0029B5  3               	bne rbloc1
0029B5  3               	rts
0029B5  3               rbloc1:
0029B5  3               	ldy #0
0029B5  3               	lda (pbbuf),y		; check if block for this scno
0029B5  3               	cmp scno
0029B5  3               	bne rbloc0		; if not, skip
0029B5  3               	iny
0029B5  3               	lda (pbbuf),y		; get y
0029B5  3               	sta dispy
0029B5  3               	iny
0029B5  3               	lda (pbbuf),y		; get x
0029B5  3               	sta dispx
0029B5  3               	iny
0029B5  3               	lda (pbbuf),y		; get blocknr
0029B5  3               	jsr pattr2		; draw block
0029B5  3               rbloc0:
0029B5  3               	clc			; point to next block
0029B5  3               	lda pbbuf
0029B5  3               	adc #4
0029B5  3               	sta pbbuf
0029B5  3               	bcc rbloc2
0029B5  3               	inc pbbuf+1
0029B5  3               	jmp rbloc2
0029B5  3               .endif
0029B5  3               
0029B5  3               ;----------------------------------------------------------
0029B5  3               ; New level
0029B5  3               ;----------------------------------------------------------
0029B5  3               
0029B5  3               ;.repeat 270
0029B5  3               ;  .byte 0
0029B5  3               ;.endrep
0029B5  3               
0029B5  3               newlev:
0029B5  3  A5 rr        	lda scno 			; current screen.
0029B7  3  18           	clc
0029B8  3  69 01        	adc #1				; next screen.
0029BA  3  CD 91 41     	cmp numsc			; total number of screens.
0029BD  3  B0 05        	bcs evwon			; yes, game finished.
0029BF  3  85 rr        	sta scno			; set new level number.
0029C1  3  4C 15 29     	jmp rstrt			; restart, clearing all aliens.
0029C4  3               
0029C4  3               evwon:
0029C4  3  20 89 3F     	jsr evnt18		 	; game completed.
0029C7  3  4C DE 29     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0029CA  3               
0029CA  3               ;----------------------------------------------------------
0029CA  3               ; Player dead.
0029CA  3               ;----------------------------------------------------------
0029CA  3               
0029CA  3               ;.repeat 258
0029CA  3               ;  .byte 0
0029CA  3               ;.endrep
0029CA  3               
0029CA  3               pdead:
0029CA  3  A9 00        	lda #0				; zeroise accumulator.
0029CC  3  85 rr        	sta deadf			; reset dead flag.
0029CE  3               evdie:
0029CE  3  20 87 3F     	jsr evnt16 			; death subroutine.
0029D1  3  A5 rr        	lda numlif			; number of lives.
0029D3  3  F0 03        	beq :+
0029D5  3  4C 15 29     	jmp rstrt 			; restart game.
0029D8  3               :
0029D8  3               evfail:
0029D8  3  20 88 3F     	jsr evnt17 			; failure event.
0029DB  3  4C BE 28     	jmp game			; restart game
0029DE  3               
0029DE  3               ;----------------------------------------------------------
0029DE  3               ; Tidy things up
0029DE  3               ;----------------------------------------------------------
0029DE  3               
0029DE  3               ;.repeat 291
0029DE  3               ;  .byte 0
0029DE  3               ;.endrep
0029DE  3               
0029DE  3               tidyup:
0029DE  3  A0 00        	ldy #0				; digits to check.
0029E0  3               tidyu2:
0029E0  3  B9 52 2B     	lda score,y 			; get score digit.
0029E3  3  CD 58 2B     	cmp hiscor 			; are we larger than high score digit?
0029E6  3  90 07        	bcc tidyu0			; high score is bigger.
0029E8  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0029EA  3  C8           	iny				; next digit of high score.
0029EB  3  C0 06        	cpy #6
0029ED  3  D0 F1        	bne tidyu2			; repeat for all digits
0029EF  3               tidyu0:
0029EF  3  A9 52        	lda #<score			; return pointing to score.
0029F1  3  85 62        	sta z80_c
0029F3  3  A9 2B        	lda #>score
0029F5  3  85 63        	sta z80_b
0029F7  3  60           	rts
0029F8  3               tidyu1:
0029F8  3  A0 05        	ldy #5
0029FA  3               tidyu3:
0029FA  3  B9 52 2B     	lda score,y			; score.
0029FD  3  99 58 2B     	sta hiscor,y			; high score.
002A00  3  88           	dey
002A01  3  10 F7        	bpl tidyu3 			; copy score to high score.
002A03  3               evnewh:
002A03  3  20 8A 3F     	jsr evnt19			; new high score event.
002A06  3  4C EF 29     	jmp tidyu0			; tidy up.
002A09  3               
002A09  3               ;--------------------------------------------------
002A09  3               ; Restart event.
002A09  3               ;--------------------------------------------------
002A09  3               
002A09  3               rsevt:
002A09  3  A9 AB        	lda #<ssprit 			; default to spare element in table.
002A0B  3  85 68        	sta z80_x
002A0D  3  A9 3A        	lda #>ssprit
002A0F  3  85 69        	sta z80_i
002A11  3               evrs:
002A11  3  4C 85 3F     	jmp evnt14	 		; call restart event.
002A14  3               
002A14  3               ;------------------------------------------------------------------
002A14  3               ; Copy number passed in a to string position bc, right-justified.
002A14  3               ;
002A14  3               ; Input:
002A14  3               ;  A  = number
002A14  3               ;  BC = string address
002A14  3               ;
002A14  3               ; Output:
002A14  3               ;  BC = string with number
002A14  3               ;-----------------------------------------------------------------
002A14  3               
002A14  3               num2ch:
002A14  3  85 65        	sta z80_d		; Save number
002A16  3               
002A16  3  A9 00        	lda #0
002A18  3  85 rr        	sta flag
002A1A  3               numdg3:
002A1A  3  A2 64        	ldx #100		; hundreds column.
002A1C  3  86 64        	stx z80_e
002A1E  3  20 2E 2A     	jsr numdg		; show digit.
002A21  3               numdg2:
002A21  3  A2 0A        	ldx #10			; tens column.
002A23  3  86 64        	stx z80_e
002A25  3  20 2E 2A     	jsr numdg		; show digit.
002A28  3               
002A28  3  E6 rr        	inc flag
002A2A  3  A2 01        	ldx #1			; units column.
002A2C  3  86 64        	stx z80_e
002A2E  3               numdg:
002A2E  3  A9 30        	lda #48			; clear digit.
002A30  3  85 61        	sta z80_a
002A32  3               numdg1:
002A32  3  A5 65        	lda z80_d
002A34  3  C5 64        	cmp z80_e
002A36  3  90 0E        	bcc numdg0		; nothing to show.
002A38  3  38           	sec
002A39  3  A5 65        	lda z80_d
002A3B  3  E5 64        	sbc z80_e		; subtract from column.
002A3D  3  85 65        	sta z80_d
002A3F  3  E6 61        	inc z80_a		; increment digit.
002A41  3  E6 rr        	inc flag
002A43  3  4C 32 2A     	jmp numdg1		; repeat until column is zero.
002A46  3               numdg0:
002A46  3  A0 00        	ldy #0
002A48  3  A5 61        	lda z80_a
002A4A  3  91 62        	sta (z80_bc),y		; write digit to buffer.
002A4C  3  A5 rr        	lda flag
002A4E  3  F0 06        	beq :+
002A50  3  E6 62        	inc z80_c		; next buffer position.
002A52  3  D0 02        	bne :+
002A54  3  E6 63        	inc z80_b
002A56  3               :
002A56  3  60           	rts
002A57  3               num2dd:
002A57  3  85 65        	sta z80_d		; Save number
002A59  3               
002A59  3  A9 01        	lda #1
002A5B  3  85 rr        	sta flag
002A5D  3               
002A5D  3  4C 21 2A     	jmp numdg2
002A60  3               num2td:
002A60  3  85 65        	sta z80_d		; Save number
002A62  3               
002A62  3  A9 01        	lda #1
002A64  3  85 rr        	sta flag
002A66  3  4C 1A 2A     	jmp numdg3
002A69  3               
002A69  3               ;flag:	.byte 0
002A69  3               
002A69  3               ;---------------------------------------------------------
002A69  3               ; Reset score to "000000"
002A69  3               ;---------------------------------------------------------
002A69  3               
002A69  3               inisc:
002A69  3  A9 30        	lda #'0'
002A6B  3  A2 05        	ldx #5			; digits to initialise.
002A6D  3               inisc0:
002A6D  3  9D 52 2B     	sta score,x 		; write zero digit.
002A70  3  CA           	dex			; next column.
002A71  3  10 FA        	bpl inisc0		; repeat for all digits.
002A73  3               
002A73  3  60           	rts
002A74  3               
002A74  3               ;-----------------------------------------------------
002A74  3               ; Multiply h by d and return in hl.
002A74  3               ;
002A74  3               ; Input:
002A74  3               ;  H = first number
002A74  3               ;  D = second number
002A74  3               ;
002A74  3               ; Output:
002A74  3               ;  HL = result H x D
002A74  3               ;-----------------------------------------------------
002A74  3               
002A74  3               imul:
002A74  3  A5 65        	lda z80_d		; HL = H * D
002A76  3  85 64        	sta z80_e
002A78  3  A5 67        	lda z80_h
002A7A  3  85 62        	sta z80_c		; make c first multiplier.
002A7C  3               imul0:
002A7C  3  A9 00        	lda #0			; zeroise total.
002A7E  3  85 66        	sta z80_l
002A80  3  85 67        	sta z80_h
002A82  3               
002A82  3  A5 67        	lda z80_h
002A84  3  85 65        	sta z80_d		; zeroise high byte.
002A86  3               
002A86  3  A9 08        	lda #8			; repeat 8 times.
002A88  3  85 63        	sta z80_b
002A8A  3               imul1:
002A8A  3  46 62        	lsr z80_c		; rotate rightmost bit into carry.
002A8C  3  90 0E        	bcc imul2		; wasn't set.
002A8E  3  18           	clc			; bit was set, so add de.
002A8F  3  A5 66        	lda z80_l
002A91  3  65 64        	adc z80_e
002A93  3  85 66        	sta z80_l
002A95  3  A5 67        	lda z80_h
002A97  3  65 65        	adc z80_d
002A99  3  85 67        	sta z80_h
002A9B  3  18           	clc 			; reset carry.
002A9C  3               imul2:
002A9C  3  06 64        	asl z80_e 		; shift de 1 bit left.
002A9E  3  26 65        	rol z80_d
002AA0  3  C6 63        	dec z80_b
002AA2  3  D0 E6        	bne imul1		; repeat 8 times.
002AA4  3               
002AA4  3  60           	rts
002AA5  3               
002AA5  3               ;-----------------------------------------------
002AA5  3               ; Divide d by e and return in d, remainder in a.
002AA5  3               ;
002AA5  3               ; Input:
002AA5  3               ;  D = first number
002AA5  3               ;  E = second number
002AA5  3               ;
002AA5  3               ; Output:
002AA5  3               ;  D = result D/E
002AA5  3               ;  A = remainder
002AA5  3               ;-----------------------------------------------
002AA5  3               
002AA5  3               idiv:
002AA5  3  A9 00        	lda #0
002AA7  3  A0 08        	ldy #8		 	; bits to shift.
002AA9  3  06 65        	asl z80_d
002AAB  3               idiv0:
002AAB  3  2A           	rol a 			; multiply d by 2.
002AAC  3  C5 64        	cmp z80_e 		; test if e is smaller.
002AAE  3  90 02        	bcc idiv1		; e is greater, no division this time.
002AB0  3  E5 64        	sbc z80_e		; subtract it.
002AB2  3               idiv1:
002AB2  3  26 65        	rol z80_d		; rotate into d.
002AB4  3  88           	dey
002AB5  3  D0 F4        	bne idiv0		; repeat
002AB7  3  60           	rts
002AB8  3               
002AB8  3               ;---------------------------------------------------
002AB8  3               ; Play AY sound effect
002AB8  3               ;---------------------------------------------------
002AB8  3               
002AB8  3               plsnd:
002AB8  3  60           	rts
002AB9  3               
002AB9  3               ;---------------------------------------------------
002AB9  3               ; Objects handling.
002AB9  3               ; 32 bytes for image
002AB9  3               ; 3 for room, y and x
002AB9  3               ; 3 for starting room, y and x.
002AB9  3               ; 254 = disabled.
002AB9  3               ; 255 = object in player"s pockets.
002AB9  3               ;---------------------------------------------------
002AB9  3               
002AB9  3               ;---------------------------------------------------
002AB9  3               ; Show items present.
002AB9  3               ;---------------------------------------------------
002AB9  3               
002AB9  3               .if oflag
002AB9  3               shwob:
002AB9  3               	lda #<objdta 			; objects table.
002AB9  3               	sta z80_l
002AB9  3               	lda #>objdta
002AB9  3               	sta z80_h
002AB9  3               
002AB9  3               	lda numob 			; number of objects in the game.
002AB9  3               	sta sprcnt
002AB9  3               shwob0:
002AB9  3               	ldy #32 			; distance to room number.
002AB9  3               	lda (z80_hl),y 			; same as an item?
002AB9  3               	cmp scno 			; current location.
002AB9  3               	bne :+
002AB9  3               	jsr dobj 			; yes, display object.
002AB9  3               :
002AB9  3               	clc
002AB9  3               	lda z80_l
002AB9  3               	adc #38 			; distance to next item.
002AB9  3               	sta z80_l
002AB9  3               	lda z80_h
002AB9  3               	adc #0
002AB9  3               	sta z80_h	 		; point to it.
002AB9  3               	dec sprcnt
002AB9  3               	bne shwob0 			; repeat for others.
002AB9  3               	rts
002AB9  3               
002AB9  3               ;---------------------------------------------------
002AB9  3               ; Display object.
002AB9  3               ; hl must point to object's start address.
002AB9  3               ;
002AB9  3               ; Input:
002AB9  3               ;  HL = object address
002AB9  3               ;---------------------------------------------------
002AB9  3               
002AB9  3               dobj:
002AB9  3               	ldy #33
002AB9  3               	lda (z80_hl),y 			; point to y.
002AB9  3               	sta dispy
002AB9  3               	iny
002AB9  3               	lda (z80_hl),y 			; point to x.
002AB9  3               	sta dispx
002AB9  3               dobj1:
002AB9  3               	jmp sprite 			; draw this sprite.
002AB9  3               
002AB9  3               ;--------------------------------------
002AB9  3               ; Remove an object.
002AB9  3               ;
002AB9  3               ; Input:
002AB9  3               ;  A = object number
002AB9  3               ;--------------------------------------
002AB9  3               
002AB9  3               remob:
002AB9  3               	cmp numob			; number of objects in game.
002AB9  3               	bcc :+				; are we checking past the end?
002AB9  3               	rts				; yes, can't get non-existent item.
002AB9  3               :
002AB9  3               	pha				; remember object.
002AB9  3               	jsr getob			; pick it up if we haven't already got it.
002AB9  3               	pla				; retrieve object number.
002AB9  3               	jsr gotob			; get its address.
002AB9  3               	lda #254
002AB9  3               	ldy #32
002AB9  3               	sta (z80_hl),y			; remove it.
002AB9  3               	rts
002AB9  3               
002AB9  3               ;---------------------------------------------------
002AB9  3               ; Pick up object number held in the accumulator.
002AB9  3               ;
002AB9  3               ; Input:
002AB9  3               ;  A = object number
002AB9  3               ;---------------------------------------------------
002AB9  3               
002AB9  3               getob:
002AB9  3               	cmp numob 		; number of objects in game.
002AB9  3               	bcc :+			; are we checking past the end?
002AB9  3               	rts			; yes, can't get non-existent item.
002AB9  3               :
002AB9  3               	jsr gotob 		; check if we already have it.
002AB9  3               	cmp #255
002AB9  3               	bne :+
002AB9  3               	rts			; we already do.
002AB9  3               :
002AB9  3               	ldy #32
002AB9  3               	lda (z80_hl),y		; is it on this screen?
002AB9  3               	cmp scno 		; current screen.
002AB9  3               	bne getob0		; not on screen, so nothing to delete.
002AB9  3               
002AB9  3               	lda #255
002AB9  3               	sta (z80_hl),y		; pick it up.
002AB9  3               	iny 			; point to y coord.
002AB9  3               getob1:
002AB9  3               	ldy #33
002AB9  3               	lda (z80_hl),y		; y coord.
002AB9  3               	sta dispy
002AB9  3               	ldy #34
002AB9  3               	lda (z80_hl),y 		; x coord.
002AB9  3               	sta dispx
002AB9  3               	jmp dobj1 		; delete object sprite.
002AB9  3               getob0:
002AB9  3               	lda #255
002AB9  3               	sta (z80_hl),y 		; pick it up.
002AB9  3               	rts
002AB9  3               .endif
002AB9  3               
002AB9  3               ;-----------------------------------------------------------------
002AB9  3               ; Got object check.
002AB9  3               ; Call with object in accumulator, returns zero set if in pockets.
002AB9  3               ;
002AB9  3               ; Input:
002AB9  3               ;  A = object number
002AB9  3               ;-----------------------------------------------------------------
002AB9  3               .if oflag .or mflag
002AB9  3               gotob:
002AB9  3               	cmp numob 		; number of objects in game.
002AB9  3               	bcc :+ 			; are we checking past the end?
002AB9  3               	jmp gotob0 		; yes, we can't have a non-existent object.
002AB9  3               :
002AB9  3               	jsr findob		; find the object.
002AB9  3               gotob1:
002AB9  3               	rts
002AB9  3               
002AB9  3               gotob0:
002AB9  3               	lda #254 		; missing.
002AB9  3               	jmp gotob1
002AB9  3               
002AB9  3               findob:
002AB9  3               	pha			; save object number
002AB9  3               	lda #<objdta 		; objects.
002AB9  3               	sta z80_l
002AB9  3               	lda #>objdta
002AB9  3               	sta z80_h
002AB9  3               	pla			; retreive object number
002AB9  3               	beq fndob1 		; is it zero? yes, skip loop.
002AB9  3               	tax 			; loop counter
002AB9  3               fndob2:
002AB9  3               	clc
002AB9  3               	lda z80_l
002AB9  3               	adc #38 		; size of each object.
002AB9  3               	sta z80_l
002AB9  3               	bcc :+
002AB9  3               	inc z80_h
002AB9  3               :
002AB9  3               	dex 			; repeat until we find address.
002AB9  3               	bne fndob2
002AB9  3               fndob1:
002AB9  3               	ldy #32			; distance to room it's in.
002AB9  3               	lda (z80_hl),y		; fetch status.
002AB9  3               	rts
002AB9  3               .endif
002AB9  3               
002AB9  3               ;---------------------------------------------
002AB9  3               ; Drop object number at (dispx, dispy).
002AB9  3               ;
002AB9  3               ; Input:
002AB9  3               ;  A = object number
002AB9  3               ;---------------------------------------------
002AB9  3               
002AB9  3               .if oflag
002AB9  3               drpob:
002AB9  3               	cmp numob 		; are we checking past the end?
002AB9  3               	bcc :+
002AB9  3               	rts			; yes, can't drop non-existent item.
002AB9  3               :
002AB9  3               	jsr gotob		; make sure object is in inventory.
002AB9  3               	cmp scno		; already on this screen?
002AB9  3               	bne :+
002AB9  3               	rts			; yes, nothing to do.
002AB9  3               :
002AB9  3               	ldy #32
002AB9  3               	lda scno
002AB9  3               	sta (z80_hl),y		; bring onto screen.
002AB9  3               	lda dispy		; sprite y coordinate.
002AB9  3               	iny
002AB9  3               	sta (z80_hl),y		; point to object y.
002AB9  3               	lda dispx 		; sprite x coordinate.
002AB9  3               	iny
002AB9  3               	sta (z80_hl),y 		; point to object x
002AB9  3               	jmp dobj		; draw the object sprite.
002AB9  3               
002AB9  3               ;-----------------------------------------------
002AB9  3               ; Seek objects at sprite position.
002AB9  3               ;
002AB9  3               ; Output:
002AB9  3               ;  A = object number, if not found A=255
002AB9  3               ;-----------------------------------------------
002AB9  3               
002AB9  3               skobj:
002AB9  3               	lda #<objdta 		; pointer to objects.
002AB9  3               	sta z80_l
002AB9  3               	lda #>objdta
002AB9  3               	sta z80_h
002AB9  3               
002AB9  3               	lda numob 		; number of objects in game.
002AB9  3               	sta z80_b 		; set up the loop counter.
002AB9  3               skobj0:
002AB9  3               	lda scno		; current room number.
002AB9  3               	ldy #32
002AB9  3               	cmp (z80_hl),y		; is object in here?
002AB9  3               	bne :+
002AB9  3               	jsr skobj1		; yes, check coordinates.
002AB9  3               :
002AB9  3               	clc			; point to next object in table.
002AB9  3               	lda z80_l
002AB9  3               	adc #38			; size of each object.
002AB9  3               	sta z80_l
002AB9  3               	bcc :+
002AB9  3               	inc z80_h
002AB9  3               :
002AB9  3               	dec z80_b
002AB9  3               	bne skobj0		; repeat for all objects.
002AB9  3               
002AB9  3               	lda #255		; end of list and nothing found, return 255.
002AB9  3               	rts
002AB9  3               
002AB9  3               skobj1:
002AB9  3               	ldy #33			; point to y coordinate.
002AB9  3               	lda (z80_hl),y		; point to y coordinate.
002AB9  3               	sec
002AB9  3               	ldy #8
002AB9  3               	sbc (z80_ix),y 		; subtract sprite y.
002AB9  3               	clc
002AB9  3               	adc #15			; add sprite height minus one.
002AB9  3               	cmp #31			; within range?
002AB9  3               	bcs skobj2		; no, ignore object.
002AB9  3               
002AB9  3               	ldy #34			; point to x coordinate now.
002AB9  3               	lda (z80_hl),y 		; get coordinate.
002AB9  3               	sec
002AB9  3               	ldy #9
002AB9  3               	sbc (z80_ix),y 		; subtract the sprite x.
002AB9  3               	clc			; add sprite width minus one.
002AB9  3               	adc #15
002AB9  3               	cmp #31			; within range?
002AB9  3               	bcs skobj2		; no, ignore object.
002AB9  3               
002AB9  3               	pla			; remove return address from stack.
002AB9  3               	pla
002AB9  3               
002AB9  3               	lda numob 		; objects in game.
002AB9  3               	sec
002AB9  3               	sbc z80_b		; subtract loop counter.
002AB9  3               skobj2:
002AB9  3               	rts			; accumulator now points to object.
002AB9  3               .endif
002AB9  3               
002AB9  3               ;---------------------------------------------------------------------
002AB9  3               ; Spawn a new sprite.
002AB9  3               ;---------------------------------------------------------------------
002AB9  3               
002AB9  3               .if gflag
002AB9  3                 offset = 0
002AB9  3               .else
002AB9  3                 offset = 20
002AB9  3               .endif
002AB9  3               
002AB9  3               ;.repeat 343
002AB9  3               ;  .byte 0
002AB9  3               ;.endrep
002AB9  3               
002AB9  3               spawn:
002AB9  3  A9 DF        	lda #<sprtab		; sprite table.
002ABB  3  85 66        	sta z80_l
002ABD  3  A9 39        	lda #>sprtab
002ABF  3  85 67        	sta z80_h
002AC1  3               numsp1:
002AC1  3  A9 0C        	lda #NUMSPR		; number of sprites.
002AC3  3  85 rr        	sta spcnt
002AC5  3               spaw0:
002AC5  3  A0 00        	ldy #0
002AC7  3  B1 66        	lda (z80_hl),y		; get sprite type.
002AC9  3  C9 FF        	cmp #255		; is it an unused slot?
002ACB  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002ACD  3               
002ACD  3  18           	clc 			; point to next sprite in table.
002ACE  3  A5 66        	lda z80_l
002AD0  3  69 11        	adc #TABSIZ		; size of each entry.
002AD2  3  85 66        	sta z80_l
002AD4  3  90 02        	bcc :+
002AD6  3  E6 67        	inc z80_h
002AD8  3               :
002AD8  3  C6 rr        	dec spcnt		; one less iteration.
002ADA  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002ADC  3               
002ADC  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002ADC  3               
002ADC  3               spaw1:
002ADC  3  A5 69        	lda z80_i		; address of original sprite.
002ADE  3  48           	pha
002ADF  3  A5 68        	lda z80_x
002AE1  3  48           	pha
002AE2  3               
002AE2  3  A5 66        	lda z80_l		; store spawned sprite address.
002AE4  3  85 rr        	sta spptr
002AE6  3  A5 67        	lda z80_h
002AE8  3  85 rr        	sta spptr+1
002AEA  3               
002AEA  3  A5 62        	lda z80_c
002AEC  3  A0 00        	ldy #0
002AEE  3  91 66        	sta (z80_hl),y 		; set the type.
002AF0  3  A0 05        	ldy #5
002AF2  3  91 66        	sta (z80_hl),y		; copy
002AF4  3               
002AF4  3  A5 63        	lda z80_b
002AF6  3  A0 01        	ldy #1
002AF8  3  91 66        	sta (z80_hl),y		; set the image.
002AFA  3  A0 06        	ldy #6
002AFC  3  91 66        	sta (z80_hl),y		; copy
002AFE  3               
002AFE  3  A9 00        	lda #0 			; frame zero.
002B00  3  A0 02        	ldy #2
002B02  3  91 66        	sta (z80_hl),y		; set frame.
002B04  3  A0 07        	ldy #7
002B06  3  91 66        	sta (z80_hl),y		; copy
002B08  3               
002B08  3  A0 08        	ldy #8
002B0A  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002B0C  3  A0 03        	ldy #3
002B0E  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002B10  3  A0 08        	ldy #8
002B12  3  91 66        	sta (z80_hl),y		; copy
002B14  3               
002B14  3  A0 09        	ldy #9
002B16  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002B18  3  A0 04        	ldy #4
002B1A  3  91 66        	sta (z80_hl),y		; set sprite coordinate.
002B1C  3  A0 09        	ldy #9
002B1E  3  91 66        	sta (z80_hl),y		; copy
002B20  3               
002B20  3  A0 0A        	ldy #10			; direction of original.
002B22  3  B1 68        	lda (z80_ix),y
002B24  3  91 66        	sta (z80_hl),y		; direction
002B26  3               
002B26  3  A9 00        	lda #0
002B28  3  A0 0B        	ldy #11
002B2A  3  91 66        	sta (z80_hl),y		; reset parameter.
002B2C  3  C8           	iny
002B2D  3  91 66        	sta (z80_hl),y		; reset parameter.
002B2F  3  C8           	iny
002B30  3  91 66        	sta (z80_hl),y		; reset parameter.
002B32  3  C8           	iny
002B33  3  91 66        	sta (z80_hl),y		; reset parameter.
002B35  3               rtssp:
002B35  3  A5 rr        	lda spptr		; address of new sprite.
002B37  3  85 68        	sta z80_x
002B39  3  A5 rr        	lda spptr+1
002B3B  3  85 69        	sta z80_i
002B3D  3               evis1:
002B3D  3  20 E3 3A     	jsr evnt09 		; call sprite initialisation event.
002B40  3               
002B40  3  A5 rr        	lda spptr 		; address of new sprite.
002B42  3  85 68        	sta z80_x
002B44  3  A5 rr        	lda spptr+1
002B46  3  85 69        	sta z80_i
002B48  3  20 A8 34     	jsr sspria 		; display the new sprite.
002B4B  3               
002B4B  3  68           	pla			; address of original sprite.
002B4C  3  85 68        	sta z80_x
002B4E  3  68           	pla
002B4F  3  85 69        	sta z80_i
002B51  3               
002B51  3  60           	rts
002B52  3               
002B52  3               ;spcnt:	.byte 0
002B52  3               ;spptr:	.word 0			; spawned sprite pointer.
002B52  3               ;seed:	.byte 0			; seed for random numbers.
002B52  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002B56  3  30 30        
002B58  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002B5C  3  30 30        
002B5E  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002B62  3  30 30        
002B64  3  00 04        grbase:	.word ScreenAddr	; graphics base address.
002B66  3               
002B66  3               ;----------------------------------------------------
002B66  3               ; Check y-pos
002B66  3               ;----------------------------------------------------
002B66  3               
002B66  3               checkx:
002B66  3  A5 rr        	lda dispy		; y position.
002B68  3  C9 19        	cmp #ScrHeight			; off screen?
002B6A  3  B0 01        	bcs :+
002B6C  3  60           	rts			; no, it's okay.
002B6D  3               :
002B6D  3  68           	pla			; remove return address from stack.
002B6E  3  85 66        	sta z80_l
002B70  3  68           	pla
002B71  3  85 67        	sta z80_h
002B73  3  60           	rts
002B74  3               
002B74  3               ;-----------------------------------------------
002B74  3               ; Displays the current high score.
002B74  3               ;-----------------------------------------------
002B74  3               
002B74  3               dhisc:
002B74  3  A9 58        	lda #<hiscor 		; high score text.
002B76  3  8D AB 2B     	sta dscor3+1
002B79  3  8D CF 2B     	sta bscor3+1
002B7C  3  A9 2B        	lda #>hiscor
002B7E  3  8D AC 2B     	sta dscor3+2
002B81  3  8D D0 2B     	sta bscor3+2
002B84  3  4C 97 2B     	jmp dscor1		; check in printable range then show 6 digits.
002B87  3               
002B87  3               ;------------------------------------------------------
002B87  3               ; Displays the current score.
002B87  3               ;------------------------------------------------------
002B87  3               
002B87  3               ;.repeat 322
002B87  3               ;  .byte 0
002B87  3               ;.endrep
002B87  3               
002B87  3               dscor:
002B87  3  A9 52        	lda #<score		; score text.
002B89  3  8D AB 2B     	sta dscor3+1
002B8C  3  8D CF 2B     	sta bscor3+1
002B8F  3  A9 2B        	lda #>score
002B91  3  8D AC 2B     	sta dscor3+2
002B94  3  8D D0 2B     	sta bscor3+2
002B97  3               dscor1:
002B97  3  8C CB 2B     	sty tmpscr
002B9A  3  20 4A 32     	jsr preprt		; set up font and print position.
002B9D  3  20 66 2B     	jsr checkx		; make sure we're in a printable range.
002BA0  3               
002BA0  3               ;	lda #6			; digits to display.
002BA0  3               ;	sta z80_b
002BA0  3  A5 rr        	lda prtmod		; get print mode.
002BA2  3  F0 03        	beq :+			; standard size text?
002BA4  3  4C CC 2B     	jmp bscor0		; no, show double-height.
002BA7  3               :
002BA7  3               dscor0:
002BA7  3               ;	ldy #0
002BA7  3               ;	lda (z80_hl),y 		; fetch character.
002BA7  3  AC CB 2B     	ldy tmpscr
002BAA  3               dscor3:
002BAA  3  B9 52 2B     	lda score,y
002BAD  3  20 F2 2C     	jsr pchar 		; display character.
002BB0  3  E6 rr        	inc dispx		; move along x coordinate
002BB2  3               
002BB2  3               ;	inc z80_l		; next score column.
002BB2  3               ;	bne :+
002BB2  3               ;	inc z80_h
002BB2  3               ;:
002BB2  3  EE CB 2B     	inc tmpscr
002BB5  3  C6 63        	dec z80_b
002BB7  3  D0 EE        	bne dscor0 		; repeat for all digits.
002BB9  3               dscor2:
002BB9  3  AD CE 3A     	lda bcolour
002BBC  3  20 F2 2C     	jsr pchar
002BBF  3  20 37 32     	jsr nexpos
002BC2  3               
002BC2  3  A5 rr        	lda dispx 		; set up display coordinates.
002BC4  3  85 rr        	sta charx
002BC6  3  A5 rr        	lda dispy
002BC8  3  85 rr        	sta chary
002BCA  3  60           	rts
002BCB  3               
002BCB  3  00           tmpscr:	.byte 0
002BCC  3               ;------------------------------------------------------
002BCC  3               ; Displays the current score in double-height characters.
002BCC  3               ;
002BCC  3               ; Input:
002BCC  3               ;  B  = digit number
002BCC  3               ;  HL = score string
002BCC  3               ;------------------------------------------------------
002BCC  3               
002BCC  3               bscor0:
002BCC  3               ;	ldy #0
002BCC  3               
002BCC  3               ;	lda (z80_hl),y 		; fetch character.
002BCC  3  A4 rr        	ldy tmp
002BCE  3               bscor3:
002BCE  3  B9 52 2B     	lda score,y
002BD1  3  20 08 32     	jsr bchar 		; display big char.
002BD4  3               
002BD4  3               ;	inc z80_l 		; next score column.
002BD4  3               ;	bne :+
002BD4  3               ;	inc z80_h
002BD4  3               ;:
002BD4  3  E6 rr        	inc tmp
002BD6  3  C6 63        	dec z80_b
002BD8  3  F0 03        	beq :+
002BDA  3  4C CC 2B     	jmp bscor0 		; repeat for all digits.
002BDD  3               :
002BDD  3  4C B9 2B     	jmp dscor2 		; tidy up line and column variables.
002BE0  3               
002BE0  3               ;-----------------------------------------------------
002BE0  3               ; Adds number in the hl pair to the score.
002BE0  3               ;-----------------------------------------------------
002BE0  3               
002BE0  3               addsc:
002BE0  3  A9 53        	lda #<(score+1) 	; ten thousands column.
002BE2  3  85 64        	sta z80_e
002BE4  3  A9 2B        	lda #>(score+1)
002BE6  3  85 65        	sta z80_d
002BE8  3  A9 10        	lda #<10000		; amount to add each time.
002BEA  3  85 62        	sta z80_c
002BEC  3  A9 27        	lda #>10000
002BEE  3  85 63        	sta z80_b
002BF0  3  20 34 2C     	jsr incsc		; add to score.
002BF3  3               
002BF3  3  E6 64        	inc z80_e		; thousands column.
002BF5  3  D0 02        	bne :+
002BF7  3  E6 65        	inc z80_d
002BF9  3               :
002BF9  3  A9 E8        	lda #<1000		; amount to add each time.
002BFB  3  85 62        	sta z80_c
002BFD  3  A9 03        	lda #>1000
002BFF  3  85 63        	sta z80_b
002C01  3  20 34 2C     	jsr incsc 		; add to score.
002C04  3               
002C04  3  E6 64        	inc z80_e		; hundreds column.
002C06  3  D0 02        	bne :+
002C08  3  E6 65        	inc z80_d
002C0A  3               :
002C0A  3  A9 64        	lda #<100		; amount to add each time.
002C0C  3  85 62        	sta z80_c
002C0E  3  A9 00        	lda #>100
002C10  3  85 63        	sta z80_b
002C12  3  20 34 2C     	jsr incsc		; add to score.
002C15  3               
002C15  3  E6 64        	inc z80_e 		; tens column.
002C17  3  D0 02        	bne :+
002C19  3  E6 65        	inc z80_d
002C1B  3               :
002C1B  3  A9 0A        	lda #<10		; amount to add each time.
002C1D  3  85 62        	sta z80_c
002C1F  3  A9 00        	lda #>10
002C21  3  85 63        	sta z80_b
002C23  3  20 34 2C     	jsr incsc 		; add to score.
002C26  3               
002C26  3  E6 64        	inc z80_e		; units column.
002C28  3  D0 02        	bne :+
002C2A  3  E6 65        	inc z80_d
002C2C  3               :
002C2C  3  A9 01        	lda #<1			; units.
002C2E  3  85 62        	sta z80_c
002C30  3  A9 00        	lda #>1
002C32  3  85 63        	sta z80_b
002C34  3               incsc:
002C34  3  A5 67        	lda z80_h		; store amount to add.
002C36  3  48           	pha
002C37  3  A5 66        	lda z80_l
002C39  3  48           	pha
002C3A  3               
002C3A  3  38           	sec			; subtract from amount to add.
002C3B  3  A5 66        	lda z80_l
002C3D  3  E5 62        	sbc z80_c
002C3F  3  85 66        	sta z80_l
002C41  3  A5 67        	lda z80_h
002C43  3  E5 63        	sbc z80_b
002C45  3  85 67        	sta z80_h
002C47  3  90 14        	bcc incsc0		; too much, restore value.
002C49  3               
002C49  3  68           	pla			; delete the previous amount from the stack.
002C4A  3  68           	pla
002C4B  3               
002C4B  3  A5 65        	lda z80_d 		; store column position.
002C4D  3  48           	pha
002C4E  3  A5 64        	lda z80_e
002C50  3  48           	pha
002C51  3  20 64 2C     	jsr incsc2		; do the increment.
002C54  3               
002C54  3  68           	pla			; restore column.
002C55  3  85 64        	sta z80_e
002C57  3  68           	pla
002C58  3  85 65        	sta z80_d
002C5A  3  4C 34 2C     	jmp incsc		; repeat until all added.
002C5D  3               
002C5D  3               incsc0:
002C5D  3  68           	pla			; restore previous value.
002C5E  3  85 66        	sta z80_l
002C60  3  68           	pla
002C61  3  85 67        	sta z80_h
002C63  3  60           	rts
002C64  3               incsc2:
002C64  3  A0 00        	ldy #0
002C66  3  B1 64        	lda (z80_de),y 		; get amount.
002C68  3  18           	clc
002C69  3  69 01        	adc #1			; add one to column.
002C6B  3  91 64        	sta (z80_de),y		; write new column total.
002C6D  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002C6F  3  B0 01        	bcs :+
002C71  3  60           	rts			; no, carry on.
002C72  3               :
002C72  3  A9 30        	lda #'0'		; make it zero.
002C74  3  91 64        	sta (z80_de),y		; write new column total.
002C76  3  C6 64        	dec z80_e		; back one column.
002C78  3  D0 02        	bne :+
002C7A  3  C6 65        	dec z80_d
002C7C  3               :
002C7C  3  4C 64 2C     	jmp incsc2
002C7F  3               
002C7F  3               ;------------------------------------
002C7F  3               ; Add bonus to score and reset bonus
002C7F  3               ;------------------------------------
002C7F  3               
002C7F  3               addbo:
002C7F  3  A2 05        	ldx #5			; last digit.
002C81  3  18           	clc
002C82  3               addbo0:
002C82  3  BD 52 2B     	lda score,x		; get score.
002C85  3  7D 5E 2B     	adc bonus,x		; add bonus.
002C88  3  38           	sec			; 0 to 18.
002C89  3  E9 30        	sbc #48
002C8B  3  48           	pha
002C8C  3  A9 30        	lda #'0'
002C8E  3  9D 5E 2B     	sta bonus,x
002C91  3  68           	pla
002C92  3  C9 3A        	cmp #58
002C94  3  90 03        	bcc addbo1
002C96  3  38           	sec
002C97  3  E9 0A        	sbc #10
002C99  3               addbo1:
002C99  3  9D 52 2B     	sta score,x		; zeroise bonus.
002C9C  3  CA           	dex			; next digit.
002C9D  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002C9F  3  60           	rts
002CA0  3               
002CA0  3               ;------------------------------------
002CA0  3               ; Swap score and bonus.
002CA0  3               ;------------------------------------
002CA0  3               
002CA0  3               swpsb:
002CA0  3  A2 05        	ldx #5			; digits to add.
002CA2  3               swpsb0:
002CA2  3  BD 52 2B     	lda score,x 		; get score digits.
002CA5  3  48           	pha			; save digit
002CA6  3  BD 5E 2B     	lda bonus,x 		; get bonus digits.
002CA9  3  9D 52 2B     	sta score,x		; switch score-bonus
002CAC  3  68           	pla
002CAD  3  9D 5E 2B     	sta bonus,x
002CB0  3  CA           	dex 			; repeat for all 6 digits.
002CB1  3  10 EF        	bpl swpsb0
002CB3  3  60           	rts
002CB4  3               
002CB4  3               ;----------------------------------------------------
002CB4  3               ; Get print address.
002CB4  3               ;----------------------------------------------------
002CB4  3               
002CB4  3               gprad:
002CB4  3  A4 rr        	ldy dispy
002CB6  3  B9 00 DC     	lda SCADTB_lb,y
002CB9  3  18           	clc
002CBA  3  65 rr        	adc dispx
002CBC  3  85 rr        	sta scraddr
002CBE  3  B9 00 DD     	lda SCADTB_hb,y
002CC1  3  69 00        	adc #0
002CC3  3  85 rr        	sta scraddr+1
002CC5  3  60           	rts
002CC6  3               
002CC6  3               ;--------------------------------------------------------------
002CC6  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002CC6  3               ;
002CC6  3               ; Output:
002CC6  3               ;  bufaddr = MAP + dispy*32 + dispx
002CC6  3               ;--------------------------------------------------------------
002CC6  3               
002CC6  3               pradd:
002CC6  3  A5 rr        	lda dispy 		; y coordinate.
002CC8  3  85 rr        	sta bufaddr
002CCA  3  A9 00        	lda #0
002CCC  3  85 rr        	sta bufaddr+1
002CCE  3  06 rr        	asl bufaddr  		; multiply char by 32
002CD0  3  26 rr        	rol bufaddr+1
002CD2  3  06 rr        	asl bufaddr
002CD4  3  26 rr        	rol bufaddr+1
002CD6  3  06 rr        	asl bufaddr
002CD8  3  26 rr        	rol bufaddr+1
002CDA  3  06 rr        	asl bufaddr
002CDC  3  26 rr        	rol bufaddr+1
002CDE  3  06 rr        	asl bufaddr
002CE0  3  26 rr        	rol bufaddr+1
002CE2  3  18           	clc			; add address of MAP graphics.
002CE3  3  A5 rr        	lda bufaddr
002CE5  3  65 rr        	adc dispx
002CE7  3  69 00        	adc #<MAP
002CE9  3  85 rr        	sta bufaddr
002CEB  3  A5 rr        	lda bufaddr+1
002CED  3  69 D8        	adc #>MAP
002CEF  3  85 rr        	sta bufaddr+1
002CF1  3  60           	rts
002CF2  3               
002CF2  3               ;----------------------------------------------------
002CF2  3               ; Display character in A at dispx,dispy.
002CF2  3               ;
002CF2  3               ; Input:
002CF2  3               ;  A 	   = character to print
002CF2  3               ;----------------------------------------------------
002CF2  3               
002CF2  3               pchar:
002CF2  3  48           	pha
002CF3  3  20 B4 2C     	jsr gprad		; get screen address.
002CF6  3               .if gflag
002CF6  3               	and andeor
002CF6  3               	eor andeor+1
002CF6  3               .endif
002CF6  3               .if iflag
002CF6  3               	eor #$ff
002CF6  3               .endif
002CF6  3  68           	pla
002CF7  3  A0 00        	ldy #0
002CF9  3  91 rr        	sta (scraddr),y 	; copy to screen.
002CFB  3  60           	rts
002CFC  3               
002CFC  3  E0 C0 A0 80  scrtab:		.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
002D00  3  60 40 20 00  
002D04  3               
002D04  3               ;----------------------------------------------
002D04  3               
002D04  3               ; Print attributes, properties and pixels.
002D04  3               ;
002D04  3               ; Input:
002D04  3               ;  A	= tile number
002D04  3               ;----------------------------------------------
002D04  3               
002D04  3               ;.repeat 294
002D04  3               ;  .byte 0
002D04  3               ;.endrep
002D04  3               
002D04  3               pbpattr:			; entry PUTBLOCK command
002D04  3  A4 rr        	ldy charx
002D06  3  84 rr        	sty dispx
002D08  3  A4 rr        	ldy chary
002D0A  3  84 rr        	sty dispy
002D0C  3               pattr:
002D0C  3               .if aflag
002D0C  3               	pha
002D0C  3               	jsr wbloc		; save blockinfo
002D0C  3               	pla
002D0C  3               .endif
002D0C  3               
002D0C  3               pattr2:
002D0C  3  85 63        	sta z80_b		; store cell in b register for now.
002D0E  3  AA           	tax
002D0F  3  BD 01 41     	lda bprop,x 		; block properties.
002D12  3  85 62        	sta z80_c
002D14  3  C9 08        	cmp #COLECT
002D16  3  D0 05        	bne :+
002D18  3  A5 63        	lda z80_b
002D1A  3  8D 2B 2D     	sta colpatt
002D1D  3               :
002D1D  3  20 C6 2C     	jsr pradd 		; get property buffer address.
002D20  3  A5 62        	lda z80_c
002D22  3  A0 00        	ldy #0
002D24  3  91 rr        	sta (bufaddr),y 	; write property.
002D26  3  A5 63        	lda z80_b 		; restore cell.
002D28  3  4C 2C 2D     	jmp panp
002D2B  3               ; Print attributes, no properties.
002D2B  3               
002D2B  3               ;.repeat 263
002D2B  3               ; .byte 0
002D2B  3               ;.endrep
002D2B  3               
002D2B  3  00           colpatt:	.byte 0
002D2C  3               
002D2C  3               panp:
002D2C  3               ;	sta z80_e		; displacement in e.
002D2C  3               ;	lda #0
002D2C  3               ;	sta z80_d		; no high byte.
002D2C  3               ;	asl z80_e  		; multiply char by 8.
002D2C  3               ;	rol z80_d
002D2C  3               ;	asl z80_e
002D2C  3               ;	rol z80_d
002D2C  3               ;	asl z80_e
002D2C  3               ;	rol z80_d
002D2C  3  0A           	asl a
002D2D  3  18           	clc
002D2E  3               ;	lda z80_e
002D2E  3  69 FF        	adc #<chgfx 		; address of graphics.
002D30  3  85 rr        	sta tileaddr
002D32  3  A5 65        	lda z80_d
002D34  3  69 40        	adc #>chgfx
002D36  3  85 rr        	sta tileaddr+1
002D38  3  20 B4 2C     	jsr gprad 		; get screen address.
002D3B  3               panp0:
002D3B  3  A0 00        	ldy #0
002D3D  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002D3F  3               .if iflag
002D3F  3               	eor #$ff		; Invert
002D3F  3               .endif
002D3F  3  91 rr        	sta (scraddr),y 	; copy to screen.
002D41  3  E6 rr        	inc dispx 		; move along one.
002D43  3  E6 rr        	inc charx
002D45  3  60           	rts
002D46  3               
002D46  3               ;----------------------------------------------
002D46  3               ; Write block
002D46  3               ;----------------------------------------------
002D46  3               
002D46  3               .if aflag
002D46  3               wbloc:
002D46  3               	ldy #3
002D46  3               	sta (pbptr),y		; store block number
002D46  3               	dey
002D46  3               	lda dispx
002D46  3               	sta (pbptr),y		; write x position of block.
002D46  3               	dey
002D46  3               	lda dispy
002D46  3               	sta (pbptr),y		; write y position of block.
002D46  3               	dey
002D46  3               	lda scno
002D46  3               	sta (pbptr),y		; write screen.
002D46  3               	clc			; point to next free location
002D46  3               	lda pbptr
002D46  3               	adc #4
002D46  3               	sta pbptr
002D46  3               	bcc :+
002D46  3               	inc pbptr+1
002D46  3               :
002D46  3               	rts
002D46  3               .endif
002D46  3               
002D46  3               ;----------------------------------------------
002D46  3               ; Print character pixels, no more.
002D46  3               ;
002D46  3               ; Input:
002D46  3               ;  A	= character to print
002D46  3               ;----------------------------------------------
002D46  3               
002D46  3               pchr:
002D46  3  20 F2 2C     	jsr pchar 		; show character in accumulator.
002D49  3  E6 rr        	inc dispx		; move along one.
002D4B  3  60           	rts
002D4C  3               
002D4C  3               ;----------------------------------------------------
002D4C  3               ; Shifter sprite routine for objects.
002D4C  3               ;----------------------------------------------------
002D4C  3               
002D4C  3               .if oflag
002D4C  3               sprit7:
002D4C  3               	lda z80_b
002D4C  3               	beq sprit0
002D4C  3               	sta z80_a
002D4C  3               sprit3:
002D4C  3               	lsr spr			; shift into position.
002D4C  3               	ror spr+1
002D4C  3               	ror spr+2
002D4C  3               	dec z80_a		; one less iteration.
002D4C  3               	bne sprit3
002D4C  3               sprit0:
002D4C  3               	rts 			; now apply to screen.
002D4C  3               
002D4C  3               ;----------------------------------------------------
002D4C  3               ; Draw sprite
002D4C  3               ;----------------------------------------------------
002D4C  3               
002D4C  3               sprite:
002D4C  3               	stx xtmp		; Save X-reg
002D4C  3               	jsr scadd 		; get screen address in scraddr.
002D4C  3               
002D4C  3               	lda dispx 		; x position.
002D4C  3               	and #7 			; position straddling cells.
002D4C  3               	sta z80_b		; store in b register.
002D4C  3               
002D4C  3               	lda z80_l		; store sprite graphic address.
002D4C  3               	sta sprit1+1
002D4C  3               	sta sprit2+1
002D4C  3               	lda z80_h
002D4C  3               	sta sprit1+2
002D4C  3               	sta sprit2+2
002D4C  3               
002D4C  3               	ldx #0			; pixel height.
002D4C  3               	ldy #0
002D4C  3               sprit1:
002D4C  3               	lda objdta,x		; fetch first byte.
002D4C  3               	sta spr
002D4C  3               	inx
002D4C  3               sprit2:
002D4C  3               	lda objdta,x
002D4C  3               	sta spr+1
002D4C  3               
002D4C  3               	lda #0
002D4C  3               	sta spr+2
002D4C  3               	jsr sprit7		; shift sprite
002D4C  3               
002D4C  3               	dex
002D4C  3               	lda spr			; fetch graphic.
002D4C  3               	ldy spritetab,x
002D4C  3               	eor (scraddr),y		; merge with screen image.
002D4C  3               	sta (scraddr),y		; write to screen.
002D4C  3               	inx			; next screen byte.
002D4C  3               
002D4C  3               	lda spr+1		; fetch graphic.
002D4C  3               	ldy spritetab,x
002D4C  3               	eor (scraddr),y		; merge with screen image.
002D4C  3               	sta (scraddr),y		; write to screen.
002D4C  3               	iny
002D4C  3               
002D4C  3               	lda spr+2		; fetch graphic.
002D4C  3               	eor (scraddr),y		; merge with screen image.
002D4C  3               	sta (scraddr),y		; write to screen.
002D4C  3               
002D4C  3               	inx			; next source byte.
002D4C  3               	cpx #16
002D4C  3               	bne :+
002D4C  3               	inc scraddr+1
002D4C  3               :
002D4C  3               	cpx #32
002D4C  3               	bne sprit1		; repeat
002D4C  3               
002D4C  3               	ldx xtmp		; retreive X-reg
002D4C  3               	rts
002D4C  3               
002D4C  3               spritetab:
002D4C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D4C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D4C  3               	.byte $00,$01,$20,$21,$40,$41,$60,$61
002D4C  3               	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
002D4C  3               
002D4C  3               spr:	.byte 0,0,0
002D4C  3               
002D4C  3               ;xtmp:	.byte 0
002D4C  3               .endif
002D4C  3               
002D4C  3               ;-----------------------------------------------------------
002D4C  3               ; Get room address.
002D4C  3               ;-----------------------------------------------------------
002D4C  3               
002D4C  3               ;.repeat 273
002D4C  3               ;  .byte 0
002D4C  3               ;.endrep
002D4C  3               
002D4C  3               groom:
002D4C  3  A6 rr        	ldx scno 		; screen number.
002D4E  3  A0 00        	ldy #0
002D50  3               groomx:
002D50  3  A9 86        	lda #<scdat 		; pointer to screens.
002D52  3  85 66        	sta z80_l
002D54  3  A9 41        	lda #>scdat
002D56  3  85 67        	sta z80_h
002D58  3               groom1:
002D58  3  E0 00        	cpx #0			; is it the first one?
002D5A  3  F0 15        	beq groom0 		; no more screens to skip.
002D5C  3               
002D5C  3  18           	clc
002D5D  3  A5 66        	lda z80_l
002D5F  3  79 86 41     	adc scdat,y 		; low byte of screen size.
002D62  3  85 66        	sta z80_l
002D64  3  C8           	iny			; point to high byte.
002D65  3  A5 67        	lda z80_h
002D67  3  79 86 41     	adc scdat,y 		; high byte of screen size.
002D6A  3  85 67        	sta z80_h
002D6C  3  C8           	iny			; next address.
002D6D  3               
002D6D  3  CA           	dex 			; one less iteration.
002D6E  3  4C 58 2D     	jmp groom1 		; loop until we reach the end.
002D71  3               groom0:
002D71  3  AD 91 41     	lda numsc 		; add displacement.
002D74  3  0A           	asl a
002D75  3  18           	clc			; add double displacement to address.
002D76  3  65 66        	adc z80_l
002D78  3  85 66        	sta z80_l
002D7A  3  A5 67        	lda z80_h
002D7C  3  69 00        	adc #0
002D7E  3  85 67        	sta z80_h
002D80  3  60           	rts
002D81  3               
002D81  3               ;-----------------------------------------------------------
002D81  3               ; Draw present room.
002D81  3               ;-----------------------------------------------------------
002D81  3               
002D81  3               droom:
002D81  3  AD 23 28     	lda wintop 		; window top.
002D84  3  85 rr        	sta dispy		; set cursor y position.
002D86  3               droom2:
002D86  3  20 4C 2D     	jsr groom 		; get address of current room.
002D89  3  A9 00        	lda #0	 		; zero in accumulator.
002D8B  3  85 rr        	sta comcnt 		; reset compression counter.
002D8D  3  AD 25 28     	lda winhgt 		; height of window.
002D90  3  85 rr        	sta rrow		; set row counter
002D92  3               droom0:
002D92  3  AD 24 28     	lda winlft 		; window left edge.
002D95  3  85 rr        	sta dispx 		; set cursor x position.
002D97  3  AD 26 28     	lda winwid 		; width of window.
002D9A  3  85 rr        	sta rcol		; set column counter
002D9C  3               droom1:
002D9C  3  20 AD 2D     	jsr flbyt 		; decompress next byte on the fly.
002D9F  3  20 0C 2D     	jsr pattr2 		; show attributes and block.
002DA2  3  C6 rr        	dec rcol		; one less column.
002DA4  3  D0 F6        	bne droom1 		; repeat for entire line.
002DA6  3  E6 rr        	inc dispy		; move down one line.
002DA8  3  C6 rr        	dec rrow 		; one less row.
002DAA  3  D0 E6        	bne droom0 		; repeat for all rows.
002DAC  3  60           	rts
002DAD  3               
002DAD  3               ;rcol:	.byte 0
002DAD  3               ;rrow:	.byte 0
002DAD  3               
002DAD  3               ;----------------------------------------------
002DAD  3               ; Decompress bytes on-the-fly.
002DAD  3               ;----------------------------------------------
002DAD  3               
002DAD  3               flbyt:
002DAD  3  A5 rr        	lda comcnt 		; compression counter.
002DAF  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002DB1  3               
002DB1  3  A0 00        	ldy #0
002DB3  3  B1 66        	lda (z80_hl),y 		; fetch next byte.
002DB5  3  E6 66        	inc z80_l 		; point to next cell.
002DB7  3  D0 02        	bne :+
002DB9  3  E6 67        	inc z80_h
002DBB  3               :
002DBB  3  C9 FF        	cmp #255 		; is this byte a control code?
002DBD  3  F0 01        	beq :+
002DBF  3  60           	rts 			; no, this byte is uncompressed.
002DC0  3               :
002DC0  3  B1 66        	lda (z80_hl),y 		; fetch byte type.
002DC2  3  85 rr        	sta combyt 		; set up the type.
002DC4  3  E6 66        	inc z80_l 		; point to quantity.
002DC6  3  D0 02        	bne :+
002DC8  3  E6 67        	inc z80_h
002DCA  3               :
002DCA  3  B1 66        	lda (z80_hl),y 		; get quantity.
002DCC  3  E6 66        	inc z80_l 		; point to next byte.
002DCE  3  D0 02        	bne :+
002DD0  3  E6 67        	inc z80_h
002DD2  3               :
002DD2  3               flbyt1:
002DD2  3  85 rr        	sta comcnt 		; store new quantity.
002DD4  3  C6 rr        	dec comcnt		; one less.
002DD6  3  A5 rr        	lda combyt 		; byte to expand.
002DD8  3  60           	rts
002DD9  3               
002DD9  3               ;combyt:	.byte 0			; byte type compressed.
002DD9  3               ;comcnt:	.byte 0			; compression counter.
002DD9  3               
002DD9  3               ;------------------------------------------
002DD9  3               ; Ladder down check.
002DD9  3               ;
002DD9  3               ; Input:
002DD9  3               ;  IX = sprite pointer
002DD9  3               ;------------------------------------------
002DD9  3               
002DD9  3               .if lflag
002DD9  3               laddd:
002DD9  3               	ldy #9
002DD9  3               	lda (z80_ix),y		; x coordinate.
002DD9  3               	sta dispx
002DD9  3               
002DD9  3               	ldy #8
002DD9  3               	lda (z80_ix),y		; y coordinate.
002DD9  3               	and #254		; make it even.
002DD9  3               	sta (z80_ix),y 		; reset it.
002DD9  3               	clc 			; look down 16 pixels.
002DD9  3               numsp5:
002DD9  3               	adc #SPR_HGT
002DD9  3               	sta dispy		; coords in dispx,dispy.
002DD9  3               	jmp laddv
002DD9  3               
002DD9  3               ;------------------------------------------
002DD9  3               ; Ladder up check.
002DD9  3               ;
002DD9  3               ; Input:
002DD9  3               ;  IX = sprite pointer
002DD9  3               ;
002DD9  3               ; Output:
002DD9  3               ;  A  = 0 is ok, A <>0 is not ok
002DD9  3               ;------------------------------------------
002DD9  3               
002DD9  3               laddu:
002DD9  3               	ldy #9
002DD9  3               	lda (z80_ix),y		; x coordinate.
002DD9  3               	sta dispx
002DD9  3               
002DD9  3               	ldy #8
002DD9  3               	lda (z80_ix),y		; y coordinate.
002DD9  3               	and #254 		; make it even.
002DD9  3               	sta (z80_ix),y		; reset it.
002DD9  3               	clc 			; look 2 pixels above feet.
002DD9  3               numsp6:
002DD9  3               	adc #SPR_HGT-2
002DD9  3               	sta dispy		; coords in dispx,dispy.
002DD9  3               laddv:
002DD9  3               	jsr tstbl 		; get map address.
002DD9  3               	jsr ldchk 		; standard ladder check.
002DD9  3               	beq :+
002DD9  3               	rts 			; no way through.
002DD9  3               :
002DD9  3               	inc bufaddr 		; look right one cell.
002DD9  3               	bne :+
002DD9  3               	inc bufaddr+1
002DD9  3               :
002DD9  3               	jsr ldchk 		; do the check.
002DD9  3               	beq :+
002DD9  3               	rts 			; impassable.
002DD9  3               :
002DD9  3               	lda dispx 		; y coordinate.
002DD9  3               	and #7 			; position straddling block cells.
002DD9  3               	bne :+
002DD9  3               	rts 			; no more checks needed.
002DD9  3               :
002DD9  3               	inc bufaddr 		; look to third cell.
002DD9  3               	bne :+
002DD9  3               	inc bufaddr+1
002DD9  3               :
002DD9  3               	jsr ldchk 		; do the check.
002DD9  3               	rts  			; return with zero flag set accordingly.
002DD9  3               .endif
002DD9  3               
002DD9  3               ;---------------------------------------------------------
002DD9  3               ; Can go up check.
002DD9  3               ;
002DD9  3               ; Input:
002DD9  3               ;  IX = sprite pointer
002DD9  3               ;
002DD9  3               ; Output:
002DD9  3               ;  A  = 0 is ok, A <>0 is not ok
002DD9  3               ;---------------------------------------------------------
002DD9  3               
002DD9  3               cangu:
002DD9  3  A0 09        	ldy #9
002DDB  3  B1 68        	lda (z80_ix),y		; x coordinate.
002DDD  3  85 rr        	sta dispx
002DDF  3  A0 08        	ldy #8
002DE1  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002DE3  3  38           	sec
002DE4  3  E9 02        	sbc #2
002DE6  3  85 rr        	sta dispy		; coords in dispx,dispy.
002DE8  3  20 83 30     	jsr tstbl 		; get map address.
002DEB  3  20 9B 2F     	jsr lrchk 		; standard left/right check.
002DEE  3  F0 01        	beq :+
002DF0  3  60           	rts			; no way through.
002DF1  3               :
002DF1  3  E6 rr        	inc bufaddr		; look right one cell.
002DF3  3  D0 02        	bne :+
002DF5  3  E6 rr        	inc bufaddr+1
002DF7  3               :
002DF7  3  20 9B 2F     	jsr lrchk 		; do the check.
002DFA  3  F0 01        	beq :+
002DFC  3  60           	rts			; impassable.
002DFD  3               :
002DFD  3  A5 rr        	lda dispx		; x coordinate.
002DFF  3  29 07        	and #7			; position straddling block cells.
002E01  3  D0 01        	bne :+
002E03  3  60           	rts			; no more checks needed.
002E04  3               :
002E04  3  E6 rr        	inc bufaddr		; look to third cell.
002E06  3  D0 02        	bne :+
002E08  3  E6 rr        	inc bufaddr+1
002E0A  3               :
002E0A  3  20 9B 2F     	jsr lrchk		; do the check.
002E0D  3  60           	rts 			; return with zero flag set accordingly.
002E0E  3               
002E0E  3               ;---------------------------------------------------------
002E0E  3               ; Can go down check.
002E0E  3               ;
002E0E  3               ; Input:
002E0E  3               ;  IX = sprite pointer
002E0E  3               ;
002E0E  3               ; Output:
002E0E  3               ;  A  = 0 is ok, A <>0 is not ok
002E0E  3               ;---------------------------------------------------------
002E0E  3               
002E0E  3               ;.repeat 264
002E0E  3               ;  .byte 0
002E0E  3               ;.endrep
002E0E  3               
002E0E  3               cangd:
002E0E  3  A0 09        	ldy #9
002E10  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E12  3  85 rr        	sta dispx
002E14  3  A0 08        	ldy #8
002E16  3  B1 68        	lda (z80_ix),y		; y coordinate.
002E18  3  18           	clc
002E19  3               numsp3:
002E19  3  69 09        	adc #SPR_HGT 		; look down 16 pixels.
002E1B  3  85 rr        	sta dispy		; coords in dispx,dispy.
002E1D  3  20 83 30     	jsr tstbl 		; get map address.
002E20  3  20 B0 2F     	jsr plchk 		; block, platform check.
002E23  3  F0 01        	beq :+
002E25  3  60           	rts			; no way through.
002E26  3               :
002E26  3  E6 rr        	inc bufaddr		; look right one cell.
002E28  3  D0 02        	bne :+
002E2A  3  E6 rr        	inc bufaddr+1
002E2C  3               :
002E2C  3  20 B0 2F     	jsr plchk		; block, platform check.
002E2F  3  F0 01        	beq :+
002E31  3  60           	rts			; impassable.
002E32  3               :
002E32  3  A5 rr        	lda dispx		; x coordinate.
002E34  3  29 07        	and #7			; position straddling block cells.
002E36  3  D0 01        	bne :+
002E38  3  60           	rts			; no more checks needed.
002E39  3               :
002E39  3  E6 rr        	inc bufaddr		; look to third cell.
002E3B  3  D0 02        	bne :+
002E3D  3  E6 rr        	inc bufaddr+1
002E3F  3               :
002E3F  3  20 B0 2F     	jsr plchk		; block, platform check.
002E42  3  60           	rts			; return with zero flag set accordingly.
002E43  3               
002E43  3               ;---------------------------------------------------------
002E43  3               ; Can go left check.
002E43  3               ;
002E43  3               ; Input:
002E43  3               ;  IX = sprite pointer
002E43  3               ;
002E43  3               ; Output:
002E43  3               ;  A  = 0 is ok, A <>0 is not ok
002E43  3               ;---------------------------------------------------------
002E43  3               
002E43  3               cangl:
002E43  3  A0 08        	ldy #8
002E45  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002E47  3  85 rr        	sta dispy
002E49  3  A0 09        	ldy #9
002E4B  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002E4D  3  38           	sec
002E4E  3  E9 02        	sbc #2			; look left 2 pixels.
002E50  3  85 rr        	sta dispx		; coords in dispx,dispy.
002E52  3  4C 74 2F     	jmp cangh		; test if we can go there.
002E55  3               
002E55  3               ;---------------------------------------------------------
002E55  3               ; Can go right check.
002E55  3               ;
002E55  3               ; Input:
002E55  3               ;  IX = sprite pointer
002E55  3               ;
002E55  3               ; Output:
002E55  3               ;  A  = 0 is ok, A <>0 is not ok
002E55  3               ;---------------------------------------------------------
002E55  3               
002E55  3  00 00 00 00  .repeat 272
002E59  3  00 00 00 00  
002E5D  3  00 00 00 00  
002F65  3                 .byte 0
002F65  3               .endrep
002F65  3               
002F65  3               cangr:
002F65  3  A0 08        	ldy #8
002F67  3  B1 68        	lda (z80_ix),y		; y coordinate.
002F69  3  85 rr        	sta dispy
002F6B  3  A0 09        	ldy #9
002F6D  3  B1 68        	lda (z80_ix),y		; x coordinate.
002F6F  3  18           	clc
002F70  3  69 10        	adc #16			; look right 16 pixels.
002F72  3  85 rr        	sta dispx		; coords in dispx,dispy.
002F74  3               cangh:
002F74  3               cangh2:
002F74  3  A9 02        	lda #(SPR_HGT/8+1)	; default rows to write.
002F76  3  85 63        	sta z80_b
002F78  3  A5 rr        	lda dispy		; y position.
002F7A  3  29 07        	and #7			; does x straddle cells?
002F7C  3  D0 02        	bne cangh0		; yes, loop counter is good.
002F7E  3  C6 63        	dec z80_b		; one less row to write.
002F80  3               cangh0:
002F80  3  20 83 30     	jsr tstbl		; get map address.
002F83  3               cangh1:
002F83  3  20 9B 2F     	jsr lrchk		; standard left/right check.
002F86  3  F0 01        	beq :+
002F88  3  60           	rts			; no way through.
002F89  3               :
002F89  3  48           	pha
002F8A  3  18           	clc
002F8B  3  A5 rr        	lda bufaddr
002F8D  3  69 20        	adc #32			; look down.
002F8F  3  85 rr        	sta bufaddr
002F91  3  90 02        	bcc :+
002F93  3  E6 rr        	inc bufaddr+1
002F95  3               :
002F95  3  68           	pla
002F96  3               
002F96  3  C6 63        	dec z80_b
002F98  3  D0 E9        	bne cangh1
002F9A  3  60           	rts
002F9B  3               
002F9B  3               ;-------------------------------------
002F9B  3               ; Check left/right movement is okay.
002F9B  3               ;
002F9B  3               ; Input:
002F9B  3               ;  bufaddr = MAP + x/8 + y/8*32
002F9B  3               ;
002F9B  3               ; Output:
002F9B  3               ;  A  = 0 is ok, A <>0 is not ok
002F9B  3               ;-------------------------------------
002F9B  3               
002F9B  3               lrchk:
002F9B  3  A0 00        	ldy #0
002F9D  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
002F9F  3  C9 02        	cmp #WALL 		; is it passable?
002FA1  3  F0 0A        	beq lrchkx		; no.
002FA3  3               
002FA3  3  C9 04        	cmp #FODDER		; fodder has to be dug.
002FA5  3  F0 06        	beq lrchkx		; not passable.
002FA7  3  A9 00        	lda #0
002FA9  3  60           	rts
002FAA  3               
002FAA  3               ;--------------------------------------------------------------
002FAA  3               ; Called by mmenu
002FAA  3               ;--------------------------------------------------------------
002FAA  3               
002FAA  3               always:
002FAA  3  A9 FF        	lda #255		; report it as okay.
002FAC  3  60           	rts
002FAD  3               
002FAD  3               lrchkx:
002FAD  3  A9 01        	lda #1 			; reset all bits.
002FAF  3  60           	rts
002FB0  3               
002FB0  3               
002FB0  3               ;--------------------------------------------------------------
002FB0  3               ; Check platform or solid item is not in way.
002FB0  3               ;
002FB0  3               ; Input:
002FB0  3               ;  bufaddr = MAP + x/8 + y/8*32
002FB0  3               ;
002FB0  3               ; Output:
002FB0  3               ;  A  = 0 is ok, A <>0 is not ok
002FB0  3               ;--------------------------------------------------------------
002FB0  3               
002FB0  3               plchk:
002FB0  3  A0 00        	ldy #0
002FB2  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
002FB4  3  C9 02        	cmp #WALL 		; is it passable?
002FB6  3  F0 F5        	beq lrchkx		; no.
002FB8  3               .if pflag .or dflag
002FB8  3               	cmp #FODDER		; fodder has to be dug.
002FB8  3               	beq lrchkx		; not passable.
002FB8  3               .endif
002FB8  3  C9 01        	cmp #PLATFM		; platform is solid.
002FBA  3  F0 03        	beq plchkx		; not passable.
002FBC  3               .if lflag
002FBC  3               	cmp #LADDER		; is it a ladder?
002FBC  3               	beq lrchkx		; on ladder, deny movement.
002FBC  3               .endif
002FBC  3               plchk0:
002FBC  3  A9 00        	lda #0			; report as ok
002FBE  3  60           	rts
002FBF  3               plchkx:
002FBF  3  A5 rr        	lda dispy		; x coordinate.
002FC1  3  29 07        	and #7			; position straddling blocks.
002FC3  3  F0 E8        	beq lrchkx		; on platform, deny movement.
002FC5  3  4C BC 2F     	jmp plchk0
002FC8  3               
002FC8  3               ;--------------------------------------------------------------
002FC8  3               ; Check ladder is available.
002FC8  3               ;
002FC8  3               ; Input:
002FC8  3               ;  bufaddr = MAP + x/8 + y/8*32
002FC8  3               ;
002FC8  3               ; Output:
002FC8  3               ;  A  = 0 is ok, A <>0 is not ok
002FC8  3               ;--------------------------------------------------------------
002FC8  3               
002FC8  3               .if lflag
002FC8  3               ldchk:
002FC8  3               	ldy #0
002FC8  3               	lda (bufaddr),y 	; fetch cell.
002FC8  3               	cmp #LADDER 		; is it a ladder?
002FC8  3               	beq :+
002FC8  3               	lda #1
002FC8  3               	rts  			; return with zero flag set accordingly.
002FC8  3               :
002FC8  3               	lda #0
002FC8  3               	rts
002FC8  3               .endif
002FC8  3               
002FC8  3               ;--------------------------------------------------------------
002FC8  3               ; Get collectables.
002FC8  3               ;--------------------------------------------------------------
002FC8  3               
002FC8  3               .if cflag
002FC8  3               getcol:
002FC8  3                       lda #COLECT             ; collectable blocks.
002FC8  3                       sta z80_b
002FC8  3                       jsr tded                ; test for collectable blocks.
002FC8  3                       cmp z80_b               ; did we find one?
002FC8  3                       beq :+
002FC8  3                       rts                     ; none were found, job done.
002FC8  3               :
002FC8  3                       jsr gtblk               ; get block.
002FC8  3                       jsr evnt20              ; collected block event.
002FC8  3                       jmp getcol              ; repeat until none left.
002FC8  3               
002FC8  3               ; Get collectable block.
002FC8  3               
002FC8  3               gtblk:
002FC8  3               	ldy #0
002FC8  3               	lda (bufaddr),y
002FC8  3               	sta z80_a
002FC8  3                       lda #0
002FC8  3                       sta (bufaddr),y		; make it empty now.
002FC8  3               
002FC8  3               	lda bufaddr		; set dispx
002FC8  3               	and #31
002FC8  3               	sta dispx
002FC8  3               
002FC8  3               	lda bufaddr+1		; Set dispy
002FC8  3               	sec
002FC8  3               	sbc #>MAP
002FC8  3               	sta bufaddr+1
002FC8  3               	asl bufaddr
002FC8  3               	rol bufaddr+1
002FC8  3               	asl bufaddr
002FC8  3               	rol bufaddr+1
002FC8  3               	asl bufaddr
002FC8  3               	rol bufaddr+1
002FC8  3               	lda bufaddr+1
002FC8  3               	sta dispy
002FC8  3               
002FC8  3               	lda colpatt		; get blocknr
002FC8  3               	sta z80_e		; displacement in e.
002FC8  3               	lda #0
002FC8  3               	sta z80_d		; no high byte.
002FC8  3               	asl z80_e  		; multiply char by 8.
002FC8  3               	rol z80_d
002FC8  3               	asl z80_e
002FC8  3               	rol z80_d
002FC8  3               	asl z80_e
002FC8  3               	rol z80_d
002FC8  3               	clc
002FC8  3               	lda z80_e
002FC8  3               	adc #<chgfx 		; address of graphics.
002FC8  3               	sta tileaddr
002FC8  3               	lda z80_d
002FC8  3               	adc #>chgfx
002FC8  3               	sta tileaddr+1
002FC8  3               	jsr gprad 		; get screen address.
002FC8  3               	ldx #7			; number of pixel rows to write.
002FC8  3               gtblk0:
002FC8  3               	ldy #0
002FC8  3               	lda (tileaddr),y 	; get image byte.
002FC8  3               	ldy scrtab,x
002FC8  3               	eor (scraddr),y 	; XOR tile on screen
002FC8  3               	sta (scraddr),y 	; copy to screen.
002FC8  3               	inc tileaddr 		; next image byte.
002FC8  3               	bne :+
002FC8  3               	inc tileaddr+1
002FC8  3               :
002FC8  3               	dex	 		; repeat for 8 pixel rows.
002FC8  3               	bpl gtblk0
002FC8  3               	rts
002FC8  3               .endif
002FC8  3               
002FC8  3               ;--------------------------------------------------------------
002FC8  3               ; Touched deadly block check.
002FC8  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
002FC8  3               ;
002FC8  3               ; Input:
002FC8  3               ;  IX = sprite address
002FC8  3               ;
002FC8  3               ; Output:
002FC8  3               ;  A  = 0 is ok, A=5 is not ok
002FC8  3               ;--------------------------------------------------------------
002FC8  3               
002FC8  3               tded:
002FC8  3  A0 08        	ldy #8
002FCA  3  B1 68        	lda (z80_ix),y 		; y coordinate.
002FCC  3  85 rr        	sta dispy
002FCE  3  C8           	iny
002FCF  3  B1 68        	lda (z80_ix),y 		; x coordinate.
002FD1  3  85 rr        	sta dispx		; coords in dispx,dispy.
002FD3  3  20 83 30     	jsr tstbl		; get map address.
002FD6  3  48           	pha
002FD7  3  A9 1F        	lda #31			; default distance to next line down.
002FD9  3  85 64        	sta z80_e
002FDB  3  68           	pla
002FDC  3  C5 63        	cmp z80_b		; is this the required block?
002FDE  3  D0 01        	bne :+
002FE0  3  60           	rts			; yes.
002FE1  3               :
002FE1  3  E6 rr        	inc bufaddr 		; next cell.
002FE3  3  D0 02        	bne :+
002FE5  3  E6 rr        	inc bufaddr+1
002FE7  3               :
002FE7  3  A0 00        	ldy #0
002FE9  3  B1 rr        	lda (bufaddr),y		; fetch type.
002FEB  3  C5 63        	cmp z80_b 		; is this deadly/custom?
002FED  3  D0 01        	bne :+
002FEF  3  60           	rts			; yes.
002FF0  3               :
002FF0  3  A5 rr        	lda dispx		; horizontal position.
002FF2  3  85 62        	sta z80_c 		; store column in c register.
002FF4  3  29 07        	and #7			; is it straddling cells?
002FF6  3  D0 03        	bne :+
002FF8  3  4C 0C 30     	jmp tded0		; no.
002FFB  3               :
002FFB  3  E6 rr        	inc bufaddr 		; last cell.
002FFD  3  D0 02        	bne :+
002FFF  3  E6 rr        	inc bufaddr+1
003001  3               :
003001  3  A0 00        	ldy #0
003003  3  B1 rr        	lda (bufaddr),y 	; fetch type.
003005  3  C5 63        	cmp z80_b		; is this the block?
003007  3  D0 01        	bne :+
003009  3  60           	rts			; yes.
00300A  3               :
00300A  3  C6 64        	dec z80_e		; one less cell to next row down.
00300C  3               tded0:
00300C  3  18           	clc 			; point to next row.
00300D  3  A5 rr        	lda bufaddr
00300F  3  65 64        	adc z80_e
003011  3  85 rr        	sta bufaddr
003013  3  90 02        	bcc :+
003015  3  E6 rr        	inc bufaddr+1
003017  3               :
003017  3  A0 00        	ldy #0
003019  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
00301B  3  C5 63        	cmp z80_b		; is this fatal?
00301D  3  D0 01        	bne :+
00301F  3  60           	rts			; yes.
003020  3               :
003020  3  E6 rr        	inc bufaddr 		; next cell.
003022  3  D0 02        	bne :+
003024  3  E6 rr        	inc bufaddr+1
003026  3               :
003026  3  A0 00        	ldy #0
003028  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00302A  3  C5 63        	cmp z80_b		; is this fatal?
00302C  3  D0 01        	bne :+
00302E  3  60           	rts			; yes.
00302F  3               :
00302F  3  A5 62        	lda z80_c		; horizontal position.
003031  3  29 07        	and #7			; is it straddling cells?
003033  3  D0 03        	bne :+
003035  3  4C 47 30     	jmp tded1 		; no.
003038  3               :
003038  3  E6 rr        	inc bufaddr		; last cell.
00303A  3  D0 02        	bne :+
00303C  3  E6 rr        	inc bufaddr+1
00303E  3               :
00303E  3  A0 00        	ldy #0
003040  3  B1 rr        	lda (bufaddr),y		; fetch type.
003042  3  C5 63        	cmp z80_b		; is this fatal?
003044  3  D0 01        	bne :+
003046  3  60           	rts			; yes.
003047  3               :
003047  3               tded1:
003047  3  A5 rr        	lda dispy		; vertical position.
003049  3  29 07        	and #7 			; is it straddling cells?
00304B  3  D0 01        	bne :+
00304D  3  60           	rts			; no, job done.
00304E  3               :
00304E  3  18           	clc			; point to next row.
00304F  3  A5 rr        	lda bufaddr
003051  3  65 64        	adc z80_e
003053  3  85 rr        	sta bufaddr
003055  3  90 02        	bcc :+
003057  3  E6 rr        	inc bufaddr+1
003059  3               :
003059  3  A0 00        	ldy #0
00305B  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
00305D  3  C5 63        	cmp z80_b		; is this fatal?
00305F  3  D0 01        	bne :+
003061  3  60           	rts			; yes.
003062  3               :
003062  3  E6 rr        	inc bufaddr		; next cell.
003064  3  D0 02        	bne :+
003066  3  E6 rr        	inc bufaddr+1
003068  3               :
003068  3  A0 00        	ldy #0
00306A  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00306C  3  C5 63        	cmp z80_b		; is this fatal?
00306E  3  D0 01        	bne :+
003070  3  60           	rts			; yes.
003071  3               :
003071  3  A5 62        	lda z80_c		; horizontal position.
003073  3  29 07        	and #7			; is it straddling cells?
003075  3  D0 01        	bne :+
003077  3  60           	rts			; no.
003078  3               :
003078  3  E6 rr        	inc bufaddr		; last cell.
00307A  3  D0 02        	bne :+
00307C  3  E6 rr        	inc bufaddr+1
00307E  3               :
00307E  3  A0 00        	ldy #0
003080  3  B1 rr        	lda (bufaddr),y		; fetch final type.
003082  3  60           	rts 			; return with final type in accumulator.
003083  3               
003083  3               ;---------------------------------------------------
003083  3               ; Fetch block type at (dispx, dispy).
003083  3               ;
003083  3               ; Output:
003083  3               ;  A = block type
003083  3               ;---------------------------------------------------
003083  3               
003083  3               tstbl:
003083  3  A5 rr        	lda dispy 		; fetch y coord.
003085  3  4A           	lsr a			; bufaddr = y/8
003086  3  4A           	lsr a
003087  3  4A           	lsr a
003088  3  85 rr        	sta chary
00308A  3               
00308A  3  85 rr        	sta bufaddr
00308C  3  A9 00        	lda #0
00308E  3  85 rr        	sta bufaddr+1
003090  3               
003090  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
003092  3  26 rr        	rol bufaddr+1
003094  3  06 rr        	asl bufaddr
003096  3  26 rr        	rol bufaddr+1
003098  3  06 rr        	asl bufaddr
00309A  3  26 rr        	rol bufaddr+1
00309C  3  06 rr        	asl bufaddr
00309E  3  26 rr        	rol bufaddr+1
0030A0  3  06 rr        	asl bufaddr
0030A2  3  26 rr        	rol bufaddr+1
0030A4  3               
0030A4  3  A5 rr        	lda dispx		; x/8
0030A6  3  4A           	lsr a
0030A7  3  4A           	lsr a
0030A8  3  4A           	lsr a
0030A9  3  85 rr        	sta charx
0030AB  3               
0030AB  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0030AC  3  65 rr        	adc bufaddr
0030AE  3  69 00        	adc #<MAP
0030B0  3  85 rr        	sta bufaddr
0030B2  3  A5 rr        	lda bufaddr+1
0030B4  3  69 D8        	adc #>MAP
0030B6  3  85 rr        	sta bufaddr+1
0030B8  3               
0030B8  3  A0 00        	ldy #0
0030BA  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0030BC  3  60           	rts
0030BD  3               
0030BD  3               
0030BD  3               ;-------------------------------------------------------------------
0030BD  3               ; Jump - if we can.
0030BD  3               ; Requires initial speed to be set up in accumulator prior to call.
0030BD  3               ;
0030BD  3               ; Input:
0030BD  3               ;  IX = sprite address
0030BD  3               ;-------------------------------------------------------------------
0030BD  3               
0030BD  3               jump:
0030BD  3  A0 0D        	ldy #13
0030BF  3  B1 68        	lda (z80_ix),y		; jump table low.
0030C1  3  A0 0E        	ldy #14
0030C3  3  11 68        	ora (z80_ix),y		; jump table high.
0030C5  3  F0 01        	beq :+
0030C7  3  60           	rts			; already in the air.
0030C8  3               :
0030C8  3  A9 44        	lda #>jtab
0030CA  3  A0 0E        	ldy #14
0030CC  3  91 68        	sta (z80_ix),y		; set jump high.
0030CE  3  A9 BD        	lda #<jtab		; jump table start.
0030D0  3  A0 0D        	ldy #13
0030D2  3  91 68        	sta (z80_ix),y		; set jump low.
0030D4  3  60           	rts
0030D5  3               
0030D5  3               ; Jump table.
0030D5  3               
0030D5  3               ;jtab:
0030D5  3               ;	.byte 248,250,252
0030D5  3               ;	.byte 254,254,255
0030D5  3               ;	.byte 255,255,0,0
0030D5  3               ;	.byte 0,1,1,1,2,2
0030D5  3               ;	.byte 4,6,8,8,8,99
0030D5  3               
0030D5  3               ;------------------------------------------------
0030D5  3               ; Random numbers code.
0030D5  3               ; Pseudo-random number generator, 8-bit.
0030D5  3               ;
0030D5  3               ; Output:
0030D5  3               ;  RND = random number
0030D5  3               ;------------------------------------------------
0030D5  3               
0030D5  3               random:
0030D5  3  A5 rr        	lda seed
0030D7  3  F0 05        	beq doEor
0030D9  3  0A           	asl a
0030DA  3  F0 04        	beq noEor
0030DC  3  90 02        	bcc noEor
0030DE  3  49 1D        doEor:	eor #$1d
0030E0  3  85 rr        noEor:	sta seed
0030E2  3  60           	rts
0030E3  3               
0030E3  3  A5 rr        	lda seed		; get last random number.
0030E5  3  0A           	asl a
0030E6  3  0A           	asl a
0030E7  3  18           	clc
0030E8  3  65 rr        	adc seed
0030EA  3  18           	clc
0030EB  3  69 45        	adc #$45
0030ED  3  85 rr        	sta seed		; store new seed.
0030EF  3  85 rr        	sta varrnd		; return number in variable.
0030F1  3  60           	rts
0030F2  3               
0030F2  3               ;--------------------------------------------------------
0030F2  3               ; Keys
0030F2  3               ;
0030F2  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0030F2  3               ;             ||||||||
0030F2  3               ;             |||||||+> Right    KEY 0  - X
0030F2  3               ;             ||||||+-> Left     KEY 1  - Z
0030F2  3               ;             |||||+--> Down     KEY 2  - .
0030F2  3               ;             ||||+---> Up       KEY 3  - ;
0030F2  3               ;             |||+----> Fire1    KEY 4  - SPC
0030F2  3               ;             ||+-----> Fire2    KEY 5  - Q
0030F2  3               ;             |+------> Fire3    KEY 6  - P
0030F2  3               ;             +-------> Not used
0030F2  3               ;
0030F2  3               ;                       Option1  KEY 7  - 1
0030F2  3               ;                       Option2  KEY 8  - 2
0030F2  3               ;                       Option3  KEY 9  - 3
0030F2  3               ;                       Option4  KEY 10 - 4
0030F2  3               ;--------------------------------------------------------
0030F2  3               
0030F2  3               ;              X   Z   .   ;  SPC  Q   P
0030F2  3               ;keys:   .byte $35,$15,$93,$22,$90,$04,$14       ; Keys defined by game designer.
0030F2  3               ;        .byte $21,$11,$01,$92                   ; menu options.
0030F2  3  03 01 02 04  jkeys:  .byte $03,$01,$02,$04,$00,$04,$14       ; Joykey keys
0030F6  3  00 04 14     
0030F9  3  21 11 01 92          .byte $21,$11,$01,$92                   ; menu options.
0030FD  3               
0030FD  3               ;-------------------------------------------------------
0030FD  3               ; Joystick and keyboard reading routines.
0030FD  3               ;
0030FD  3               ; contrl = 0, Keyboard
0030FD  3               ;          1, JoyKeyb
0030FD  3               ;          2, JoyMMC
0030FD  3               ;-------------------------------------------------------
0030FD  3               
0030FD  3               joykey:
0030FD  3  A5 rr        	lda contrl 		; control flag.
0030FF  3  C9 01        	cmp #1
003101  3  D0 03        	bne :+
003103  3  4C 06 45     	jmp joy1 		; read keyboard joystick
003106  3               :
003106  3  C9 02        	cmp #2
003108  3  D0 03        	bne :+
00310A  3  4C 07 45     	jmp joy2 		; read MMC joystick.
00310D  3               :
00310D  3               ; Keyboard controls.
00310D  3               
00310D  3  A9 00        	lda #0		 	; zero reading.
00310F  3  85 64        	sta z80_e
003111  3               
003111  3  A0 06        	ldy #6	 		; address of last key.
003113  3               joyke0:
003113  3  B9 BE 44     	lda keys,y 		; get key from table.
003116  3  20 08 45     	jsr ktest		; being pressed?
003119  3  26 64        	rol z80_e 		; rotate into reading.
00311B  3               
00311B  3  88           	dey		 	; next key.
00311C  3  10 F5        	bpl joyke0 		; repeat for all keys.
00311E  3  A5 64        	lda z80_e 		; copy e register to accumulator.
003120  3  85 rr        	sta joyval		; remember value.
003122  3  60           	rts
003123  3               
003123  3               ;---------------------------------------------------------------
003123  3               ; Getkey in column,row format
003123  3               ;
003123  3               ; Output:
003123  3               ;  A = high nibble=row and low nibble=column key in matrix
003123  3               ;---------------------------------------------------------------
003123  3               
003123  3               kget:
003123  3  A9 F0        	lda #ScrMode		; high-mono mode.
003125  3  8D 00 B0     	sta ScrSelAddr		; screen select port
003128  3  86 rr        	stx xtmp
00312A  3               kget4:
00312A  3  20 F4 FF     	jsr READKEY		; read key until pressed
00312D  3  C0 FF        	cpy #255
00312F  3  F0 F9        	beq kget4
003131  3  85 rr        	sta rcol		; save column
003133  3  86 rr        	stx rrow		; determine row
003135  3               kget3:
003135  3  20 F4 FF     	jsr READKEY		; wait until key released
003138  3  C0 FF        	cpy #255
00313A  3  D0 F9        	bne kget3
00313C  3               
00313C  3  38           	sec			; calculate matrix row
00313D  3  A9 0A        	lda #10
00313F  3  E5 rr        	sbc rrow
003141  3  0A           	asl a
003142  3  0A           	asl a
003143  3  0A           	asl a
003144  3  0A           	asl a
003145  3  85 rr        	sta rrow
003147  3               
003147  3  A0 FF        	ldy #255		; find column mask
003149  3               kget1:
003149  3  C8           	iny
00314A  3  B9 C9 44     	lda keymask,y
00314D  3  C5 rr        	cmp rcol
00314F  3  F0 03        	beq kget2
003151  3  4C 49 31     	jmp kget1
003154  3               kget2:
003154  3  98           	tya			; determine column
003155  3  18           	clc
003156  3  65 rr        	adc rrow
003158  3  A6 rr        	ldx xtmp
00315A  3  60           	rts
00315B  3               
00315B  3               ;---------------------------------------------------------------
00315B  3               ; Display message.
00315B  3               ;
00315B  3               ; Input:
00315B  3               ;  A = message number
00315B  3               ;---------------------------------------------------------------
00315B  3               
00315B  3               dmsg:
00315B  3  AA           	tax
00315C  3  A9 8D        	lda #<msgdat		; pointer to messages.
00315E  3  85 66        	sta z80_l
003160  3  A9 3F        	lda #>msgdat
003162  3  85 67        	sta z80_h
003164  3  20 5D 32     	jsr getwrd		; get message number.
003167  3               dmsg3:
003167  3  20 4A 32     	jsr preprt		; pre-printing stuff.
00316A  3  20 66 2B     	jsr checkx		; make sure we"re in a printable range.
00316D  3  A5 rr        	lda prtmod		; print mode.
00316F  3  D0 50        	bne bmsg1		; no, double-height text.
003171  3               
003171  3  AD CD 3A     	lda fcolour		; Set textcolour
003174  3  20 F2 2C     	jsr pchar
003177  3  20 37 32     	jsr nexpos
00317A  3               dmsg0:
00317A  3  A5 67        	lda z80_h		; store string pointer.
00317C  3  48           	pha
00317D  3  A5 66        	lda z80_l
00317F  3  48           	pha
003180  3               
003180  3  A0 00        	ldy #0
003182  3  B1 66        	lda (z80_hl),y		; fetch byte to display.
003184  3  29 7F        	and #127		; remove any end marker.
003186  3  C9 0D        	cmp #13
003188  3  F0 24        	beq dmsg1
00318A  3  20 F2 2C     	jsr pchar		; display character.
00318D  3  20 37 32     	jsr nexpos 		; display position.
003190  3  D0 03        	bne dmsg2		; not on a new line.
003192  3  20 3C 32     	jsr nexlin		; next line down.
003195  3               dmsg2:
003195  3  68           	pla			; retrieve string pointer
003196  3  85 66        	sta z80_l
003198  3  68           	pla
003199  3  85 67        	sta z80_h
00319B  3               
00319B  3  A0 00        	ldy #0
00319D  3  B1 66        	lda (z80_hl),y		; fetch last character.
00319F  3  0A           	asl a  			; was it the end?
0031A0  3  90 03        	bcc :+
0031A2  3  4C B9 2B     	jmp dscor2		; yes, job done.
0031A5  3               :
0031A5  3  E6 66        	inc z80_l		; next character to display.
0031A7  3  D0 02        	bne :+
0031A9  3  E6 67        	inc z80_h
0031AB  3               :
0031AB  3  4C 7A 31     	jmp dmsg0
0031AE  3               dmsg1:
0031AE  3  E6 rr        	inc dispy
0031B0  3  A5 rr        	lda dispy
0031B2  3  C9 19        	cmp #ScrHeight
0031B4  3  90 04        	bcc dmsg4
0031B6  3  A9 00        	lda #0
0031B8  3  85 rr        	sta dispy
0031BA  3               dmsg4:
0031BA  3  A9 00        	lda #0
0031BC  3  85 rr        	sta dispx
0031BE  3  4C 95 31     	jmp dmsg2
0031C1  3               
0031C1  3               ;prtmod:	.byte 0            	; print mode, 0 = standard, 1 = double-height.
0031C1  3               
0031C1  3               ;----------------------------------------------------------
0031C1  3               ; Display message in big text.
0031C1  3               ;
0031C1  3               ; Input:
0031C1  3               ;  HL = string pointer
0031C1  3               ;----------------------------------------------------------
0031C1  3               
0031C1  3               bmsg1:
0031C1  3  AD CD 3A     	lda fcolour		; Set textcolour
0031C4  3  20 F2 2C     	jsr pchar
0031C7  3  E6 rr        	inc dispy
0031C9  3  20 F2 2C     	jsr pchar
0031CC  3  C6 rr        	dec dispy
0031CE  3  20 37 32     	jsr nexpos
0031D1  3  A9 0D        	lda #13			; Set double height
0031D3  3  20 08 32     	jsr bchar
0031D6  3               
0031D6  3               bmsg4:
0031D6  3  A0 00        	ldy #0
0031D8  3  B1 66        	lda (z80_hl),y 		; get character to display.
0031DA  3  29 7F        	and #127		; only want 7 bits.
0031DC  3  C9 0D        	cmp #13
0031DE  3  F0 13        	beq bmsg2
0031E0  3  20 08 32     	jsr bchar 		; display big char.
0031E3  3               ;	jsr nexpos
0031E3  3               bmsg3:
0031E3  3  A0 00        	ldy #0
0031E5  3  B1 66        	lda (z80_hl),y 		; look at last character.
0031E7  3  48           	pha
0031E8  3  E6 66        	inc z80_l 		; next character in list.
0031EA  3  D0 02        	bne :+
0031EC  3  E6 67        	inc z80_h
0031EE  3               :
0031EE  3  68           	pla
0031EF  3  0A           	asl a  			; was terminator flag set?
0031F0  3  90 E4        	bcc bmsg4		; no, keep going.
0031F2  3  60           	rts
0031F3  3               
0031F3  3               bmsg2:
0031F3  3  A9 00        	lda #0
0031F5  3  85 rr        	sta dispx
0031F7  3  E6 rr        	inc dispy
0031F9  3  E6 rr        	inc dispy
0031FB  3  A5 rr        	lda dispy
0031FD  3  C9 17        	cmp #23
0031FF  3  90 E2        	bcc bmsg3
003201  3  A9 00        	lda #0
003203  3  85 rr        	sta dispy
003205  3  4C E3 31     	jmp bmsg3
003208  3               
003208  3               ;----------------------------------------------------------
003208  3               ; Big character display.
003208  3               ;
003208  3               ; Input:
003208  3               ;  A = character
003208  3               ;----------------------------------------------------------
003208  3               
003208  3               bchar:
003208  3  20 F2 2C     	jsr pchar 		; display big char.
00320B  3  E6 rr        	inc dispy
00320D  3  20 F2 2C     	jsr pchar
003210  3  C6 rr        	dec dispy
003212  3  20 37 32     	jsr nexpos		; display position.
003215  3  60           	rts
003216  3               
003216  3               ;	sta z80_e		; save char in lb
003216  3               
003216  3               
003216  3               ;	lda #0
003216  3               ;	sta z80_d		; reset hb
003216  3               
003216  3               ;	asl z80_e 		; multiply char by 8.
003216  3               ;	rol z80_d
003216  3               ;	asl z80_e
003216  3               ;	rol z80_d
003216  3               ;	asl z80_e
003216  3               ;	rol z80_d		; de = a*8
003216  3               
003216  3               ;	clc			; de = Fontpointer + a*8
003216  3               ;	lda z80_e
003216  3               ;	adc #<(FONT-256) 		; address of font.
003216  3               ;	sta z80_e
003216  3               ;	lda z80_d
003216  3               ;	adc #>(FONT-256)
003216  3               ;	sta z80_d
003216  3               
003216  3               ;	jsr gprad 		; get screen address.
003216  3               
003216  3               ;	ldx #0			; height of character in font.
003216  3               ;bchar0:
003216  3               ;	ldy #0
003216  3               ;	lda (z80_de),y 		; get a bit of the font.
003216  3               
003216  3               ;.if gflag
003216  3               ;	and andeor
003216  3               ;	eor andeor+1
003216  3               ;.endif
003216  3               ;.if iflag
003216  3               ;	eor #$ff
003216  3               ;.endif
003216  3               
003216  3               ;	sta (scraddr),y
003216  3               ;	pha
003216  3               ;	jsr nline 		; next line down.
003216  3               ;	pla
003216  3               ;	sta (scraddr),y
003216  3               ;	jsr nline 		; next line down.
003216  3               ;
003216  3               ;	clc
003216  3               ;	inc z80_e 		; next line of font.
003216  3               ;	bne :+
003216  3               ;	inc z80_d
003216  3               ;:
003216  3               ;	inx
003216  3               ;	cpx #8
003216  3               ;	bne bchar0
003216  3               
003216  3               ;	jsr nexpos		; display position.
003216  3               ;	bne bchar2 		; not on a new line.
003216  3               bchar3:
003216  3  E6 rr        	inc dispy
003218  3  20 3C 32     	jsr nexlin 		; next line check.
00321B  3               bchar2:
00321B  3  4C B9 2B     	jmp dscor2		; tidy up line and column variables.
00321E  3               
00321E  3               
00321E  3               ;-------------------------------------------------
00321E  3               ; Display a character.
00321E  3               ;
00321E  3               ; Input:
00321E  3               ;  A = character
00321E  3               ;-------------------------------------------------
00321E  3               
00321E  3               achar:
00321E  3  85 63        	sta z80_b 		; copy to b.
003220  3  20 4A 32     	jsr preprt 		; get ready to print.
003223  3  A5 63        	lda z80_b		; character in accumulator.
003225  3  A6 rr        	ldx prtmod 		; print mode.
003227  3  F0 03        	beq :+
003229  3  4C 08 32     	jmp bchar 		; no, double-height text.
00322C  3               :
00322C  3  20 F2 2C     	jsr pchar 		; display character.
00322F  3  20 37 32     	jsr nexpos 		; display position.
003232  3  F0 E2        	beq bchar3		; next line down.
003234  3  4C 1B 32     	jmp bchar2 		; tidy up.
003237  3               
003237  3               
003237  3               ;-------------------------------------------------
003237  3               ; Get next print column position.
003237  3               ;-------------------------------------------------
003237  3               
003237  3               nexpos:
003237  3  E6 rr        	inc dispx		; move along one position.
003239  3  A5 rr        	lda dispx 		; get coordinate.
00323B  3               ;	and #31
00323B  3  60           	rts 			; return with status in zero flag.
00323C  3               
00323C  3               ;-------------------------------------------------
00323C  3               ; Get next print line position.
00323C  3               ;-------------------------------------------------
00323C  3               
00323C  3               nexlin:
00323C  3  E6 rr        	inc dispy 		; newline.
00323E  3  A5 rr        	lda dispy		; vertical position.
003240  3  C9 18        	cmp #24			; past screen edge?
003242  3  B0 01        	bcs :+
003244  3  60           	rts			; no, still okay.
003245  3               :
003245  3  A9 00        	lda #0			; restart at top.
003247  3  85 rr        	sta dispy
003249  3  60           	rts
00324A  3               
00324A  3               ;--------------------------------------------------------
00324A  3               ; Pre-print preliminaries.
00324A  3               ;--------------------------------------------------------
00324A  3               
00324A  3               preprt:
00324A  3  A9 BD        	lda #<(FONT-256)		; font pointer.
00324C  3  8D 64 2B     	sta grbase		; set up graphics base.
00324F  3  A9 40        	lda #>(FONT-256)
003251  3  8D 65 2B     	sta grbase+1
003254  3               prescr:
003254  3  A5 rr        	lda charx 		; display coordinates.
003256  3  85 rr        	sta dispx		; set up general coordinates.
003258  3  A5 rr        	lda chary
00325A  3  85 rr        	sta dispy
00325C  3  60           	rts
00325D  3               
00325D  3               ;--------------------------------------------------------------
00325D  3               ; Get messagenr x in hl
00325D  3               ;
00325D  3               ; Input:
00325D  3               ;  HL = pointer to message list
00325D  3               ;  X  = message number.
00325D  3               ;--------------------------------------------------------------
00325D  3               
00325D  3               getwrd:
00325D  3  E0 00        	cpx #0
00325F  3  D0 01        	bne:+ 			; first word in list?
003261  3  60           	rts 			; yep, don't search.
003262  3               :
003262  3  A0 00        	ldy #0
003264  3               getwd0:
003264  3  B1 66        	lda (z80_hl),y
003266  3  48           	pha
003267  3  E6 66        	inc z80_l
003269  3  D0 02        	bne :+
00326B  3  E6 67        	inc z80_h
00326D  3               :
00326D  3  68           	pla
00326E  3  C9 80        	cmp #128		; found end?
003270  3  30 F2        	bmi getwd0		; no, carry on.
003272  3  CA           	dex			; until we have right number.
003273  3  D0 EF        	bne getwd0
003275  3  60           	rts
003276  3               
003276  3               ;-----------------------------------------------------------
003276  3               ; Bubble sort.
003276  3               ;-----------------------------------------------------------
003276  3               
003276  3               bsort:
003276  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
003278  3  85 rr        	sta qscnt
00327A  3               
00327A  3  A9 DF        	lda #<sprtab 		; sprite table.
00327C  3  85 68        	sta z80_x
00327E  3  A9 39        	lda #>sprtab
003280  3  85 69        	sta z80_i
003282  3               bsort0:
003282  3  A0 00        	ldy #0
003284  3  B1 68        	lda (z80_ix),y 		; first sprite type.
003286  3  C9 FF        	cmp #255 		; is it switched off?
003288  3  F0 30        	beq swemp		; yes, may need to switch another in here.
00328A  3               
00328A  3  A0 11        	ldy #TABSIZ
00328C  3  B1 68        	lda (z80_ix),y 		; check next slot exists.
00328E  3  C9 FF        	cmp #255 		; is it enabled?
003290  3  F0 0A        	beq bsort2 		; no, nothing to swap.
003292  3               
003292  3  A0 14        	ldy #TABSIZ+3
003294  3  B1 68        	lda (z80_ix),y 		; fetch next sprite's coordinate.
003296  3  A0 03        	ldy #3
003298  3  D1 68        	cmp (z80_ix),y 		; compare with this x coordinate.
00329A  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
00329C  3               bsort2:
00329C  3  18           	clc
00329D  3  A5 68        	lda z80_x
00329F  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0032A1  3  85 68        	sta z80_x
0032A3  3  90 02        	bcc :+
0032A5  3  E6 69        	inc z80_i
0032A7  3               :
0032A7  3  C6 rr        	dec qscnt
0032A9  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0032AB  3  60           	rts
0032AC  3               
0032AC  3               ;qscnt:	.byte 0
0032AC  3               
0032AC  3               bsort1:
0032AC  3  A0 11        	ldy #TABSIZ
0032AE  3  B1 68        	lda (z80_ix),y		; sprite on/off flag.
0032B0  3  C9 FF        	cmp #255		; is it enabled?
0032B2  3  F0 E8        	beq bsort2		; no, nothing to swap.
0032B4  3  20 C8 32     	jsr swspr		; swap positions.
0032B7  3  4C 9C 32     	jmp bsort2
0032BA  3               swemp:
0032BA  3  A0 11        	ldy #TABSIZ
0032BC  3  B1 68        	lda (z80_ix),y		; next table entry.
0032BE  3  C9 FF        	cmp #255		; is that one on?
0032C0  3  F0 DA        	beq bsort2		; no, nothing to swap.
0032C2  3  20 C8 32     	jsr swspr		; swap positions.
0032C5  3  4C 9C 32     	jmp bsort2
0032C8  3               
0032C8  3               ; Swap sprites.
0032C8  3               
0032C8  3               swspr:
0032C8  3  A5 68        	lda z80_x		; table address
0032CA  3  85 64        	sta z80_e		; copy to de pair.
0032CC  3  85 66        	sta z80_l		; copy to hl pair.
0032CE  3  A5 69        	lda z80_i
0032D0  3  85 67        	sta z80_h
0032D2  3  85 65        	sta z80_d
0032D4  3               
0032D4  3  18           	clc
0032D5  3  A5 66        	lda z80_l
0032D7  3  69 11        	adc #TABSIZ		; distance to second entry.
0032D9  3  85 66        	sta z80_l
0032DB  3  90 02        	bcc :+
0032DD  3  E6 67        	inc z80_h
0032DF  3               :
0032DF  3  A9 11        	lda #TABSIZ		; bytes to swap.
0032E1  3  85 63        	sta z80_b
0032E3  3  A0 00        	ldy #0
0032E5  3               swspr0:
0032E5  3  B1 66        	lda (z80_hl),y		; fetch second byte.
0032E7  3  48           	pha
0032E8  3  B1 64        	lda (z80_de),y 		; fetch first byte.
0032EA  3  91 66        	sta (z80_hl),y 		; copy to second.
0032EC  3  68           	pla
0032ED  3  91 64        	sta (z80_de),y 		; copy to first sprite entry.
0032EF  3               
0032EF  3  E6 64        	inc z80_e 		; next byte.
0032F1  3  D0 02        	bne :+
0032F3  3  E6 65        	inc z80_d
0032F5  3               :
0032F5  3  E6 66        	inc z80_l 		; next byte.
0032F7  3  D0 02        	bne :+
0032F9  3  E6 67        	inc z80_h
0032FB  3               :
0032FB  3  C6 63        	dec z80_b
0032FD  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0032FF  3  60           	rts
003300  3               
003300  3               ;----------------------------------------------------
003300  3               ; Process sprites.
003300  3               ;----------------------------------------------------
003300  3               
003300  3               pspr:
003300  3  A9 0C        	lda #NUMSPR		; sprites to process.
003302  3  85 rr        	sta sprptr
003304  3               
003304  3  A9 DF        	lda #<sprtab 		; sprite table.
003306  3  85 68        	sta z80_x
003308  3  A9 39        	lda #>sprtab
00330A  3  85 69        	sta z80_i
00330C  3               pspr1:
00330C  3  A0 00        	ldy #0
00330E  3  B1 68        	lda (z80_ix),y		; fetch sprite type.
003310  3  C9 09        	cmp #9 			; within range of sprite types?
003312  3  B0 03        	bcs :+
003314  3  20 27 33     	jsr pspr2 		; yes, process this one.
003317  3               :
003317  3  18           	clc
003318  3  A5 68        	lda z80_x
00331A  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00331C  3  85 68        	sta z80_x
00331E  3  90 02        	bcc :+
003320  3  E6 69        	inc z80_i		; next sprite.
003322  3               :
003322  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
003324  3  D0 E6        	bne pspr1
003326  3  60           	rts
003327  3               
003327  3               ;sprptr:	.byte 0
003327  3               
003327  3               pspr2:
003327  3  A5 68        	lda z80_x 		; store original sprite pointer.
003329  3  85 rr        	sta ogptr
00332B  3  A5 69        	lda z80_i
00332D  3  85 rr        	sta ogptr+1
00332F  3  20 3B 33     	jsr pspr3		; do the routine.
003332  3               rtorg:
003332  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
003334  3  85 68        	sta z80_x
003336  3  A5 rr        	lda ogptr+1
003338  3  85 69        	sta z80_i
00333A  3               rtorg0:
00333A  3  60           	rts
00333B  3               
00333B  3               pspr3:
00333B  3  A9 70        	lda #<evtyp0		; sprite type events list.
00333D  3  85 66        	sta z80_l
00333F  3  A9 33        	lda #>evtyp0
003341  3  85 67        	sta z80_h
003343  3               pspr4:
003343  3  B1 68        	lda (z80_ix),y
003345  3  0A           	asl a			; double accumulator.
003346  3  18           	clc
003347  3  65 66        	adc z80_l
003349  3  85 66        	sta z80_l
00334B  3  90 02        	bcc :+
00334D  3  E6 67        	inc z80_h
00334F  3               :
00334F  3  B1 66        	lda (z80_hl),y
003351  3  85 64        	sta z80_e 		; copy to de.
003353  3  48           	pha
003354  3               
003354  3  E6 66        	inc z80_l 		; next byte of address.
003356  3  D0 02        	bne :+
003358  3  E6 67        	inc z80_h
00335A  3               :
00335A  3  B1 66        	lda (z80_hl),y 		; address high.
00335C  3  85 65        	sta z80_d
00335E  3               
00335E  3  48           	pha	 		; swap address into hl.
00335F  3  A5 67        	lda z80_h
003361  3  85 65        	sta z80_d
003363  3  68           	pla
003364  3  85 67        	sta z80_h
003366  3  68           	pla
003367  3  85 66        	sta z80_l
003369  3  A5 66        	lda z80_l
00336B  3  85 64        	sta z80_e
00336D  3               
00336D  3  6C 66 00     	jmp (z80_hl) 		; go there.
003370  3               
003370  3               ;ogptr:	.word 0			; original sprite pointer.
003370  3               
003370  3               ; Address of each sprite type's routine.
003370  3               
003370  3  DA 3A        evtyp0:	.word evnt00
003372  3  DB 3A        evtyp1:	.word evnt01
003374  3  DC 3A        evtyp2:	.word evnt02
003376  3  DD 3A        evtyp3:	.word evnt03
003378  3  DE 3A        evtyp4:	.word evnt04
00337A  3  DF 3A        evtyp5:	.word evnt05
00337C  3  E0 3A        evtyp6:	.word evnt06
00337E  3  E1 3A        evtyp7:	.word evnt07
003380  3  E2 3A        evtyp8:	.word evnt08
003382  3               
003382  3               ;--------------------------------------------------------------
003382  3               ; Display sprites.
003382  3               ;
003382  3               ; Input:
003382  3               ;  IX = sprite table
003382  3               ;--------------------------------------------------------------
003382  3               
003382  3               dspr:
003382  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003384  3  85 rr        	sta sprcnt
003386  3               dspr0:
003386  3  A0 00        	ldy #0
003388  3  B1 68        	lda (z80_ix),y 		; get sprite type.
00338A  3  C9 FF        	cmp #255 		; is it enabled?
00338C  3  D0 42        	bne dspr1 		; yes, it needs deleting.
00338E  3               dspr5:
00338E  3  A0 05        	ldy #5
003390  3  B1 68        	lda (z80_ix),y 		; new type.
003392  3  C9 FF        	cmp #255		; is it enabled?
003394  3  D0 77        	bne dspr3 		; yes, it needs drawing.
003396  3               dspr2:
003396  3  A0 05        	ldy #5
003398  3  B1 68        	lda (z80_ix),y 		; copy new type.
00339A  3  A0 00        	ldy #0
00339C  3  91 68        	sta (z80_ix),y
00339E  3  A0 06        	ldy #6
0033A0  3  B1 68        	lda (z80_ix),y 		; copy new image number.
0033A2  3  A0 01        	ldy #1
0033A4  3  91 68        	sta (z80_ix),y
0033A6  3  A0 07        	ldy #7
0033A8  3  B1 68        	lda (z80_ix),y 		; copy new frame.
0033AA  3  A0 02        	ldy #2
0033AC  3  91 68        	sta (z80_ix),y
0033AE  3  A0 08        	ldy #8
0033B0  3  B1 68        	lda (z80_ix),y 		; copy new y.
0033B2  3  A0 03        	ldy #3
0033B4  3  91 68        	sta (z80_ix),y
0033B6  3  A0 09        	ldy #9
0033B8  3  B1 68        	lda (z80_ix),y 		; copy new x.
0033BA  3  A0 04        	ldy #4
0033BC  3  91 68        	sta (z80_ix),y
0033BE  3               
0033BE  3  18           	clc
0033BF  3  A5 68        	lda z80_x
0033C1  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
0033C3  3  85 68        	sta z80_x
0033C5  3  A5 69        	lda z80_i
0033C7  3  69 00        	adc #0
0033C9  3  85 69        	sta z80_i 		; next sprite.
0033CB  3  C6 rr        	dec sprcnt
0033CD  3  D0 B7        	bne dspr0		; repeat for remaining sprites.
0033CF  3  60           	rts
0033D0  3               dspr1:
0033D0  3  A0 05        	ldy #5
0033D2  3  B1 68        	lda (z80_ix),y 		; type of new sprite.
0033D4  3  C9 FF        	cmp #255		; is this enabled?
0033D6  3  D0 06        	bne dspr4 		; yes, display both.
0033D8  3               dspr6:
0033D8  3  20 A8 34     	jsr sspria 		; show single sprite.
0033DB  3  4C 96 33     	jmp dspr2
0033DE  3               
0033DE  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
0033DE  3               
0033DE  3               dspr4:
0033DE  3  A0 04        	ldy #4
0033E0  3  B1 68        	lda (z80_ix),y		; old x.
0033E2  3  A0 09        	ldy #9
0033E4  3  D1 68        	cmp (z80_ix),y 		; compare with new value.
0033E6  3  D0 1F        	bne dspr7 		; they differ, need to redraw.
0033E8  3               
0033E8  3  A0 03        	ldy #3
0033EA  3  B1 68        	lda (z80_ix),y		; old y.
0033EC  3  A0 08        	ldy #8
0033EE  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0033F0  3  D0 15        	bne dspr7		; they differ, need to redraw.
0033F2  3               
0033F2  3  A0 02        	ldy #2
0033F4  3  B1 68        	lda (z80_ix),y 		; old frame.
0033F6  3  A0 07        	ldy #7
0033F8  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
0033FA  3  4C 07 34     	jmp dspr7 		; they differ, need to redraw.
0033FD  3               
0033FD  3  A0 01        	ldy #1
0033FF  3  B1 68        	lda (z80_ix),y 		; old image.
003401  3  A0 06        	ldy #6
003403  3  D1 68        	cmp (z80_ix),y 		; compare against new value.
003405  3  F0 8F        	beq dspr2		; everything is the same, don't redraw.
003407  3               dspr7:
003407  3  20 D5 34     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00340A  3  4C 96 33     	jmp dspr2
00340D  3               dspr3:
00340D  3  20 CF 34     	jsr ssprib 		; show single sprite.
003410  3  4C 96 33     	jmp dspr2
003413  3               
003413  3               ;sprcnt:	.byte 0
003413  3               
003413  3               ;-----------------------------------------
003413  3               ; Get sprite address calculations.
003413  3               ; gspran = new sprite, gsprad = old sprite.
003413  3               ;
003413  3               ; Input:
003413  3               ;  IX = sprite address
003413  3               ;-----------------------------------------
003413  3               
003413  3               gspran:
003413  3  A0 08        	ldy #8
003415  3  B1 68        	lda (z80_ix),y 		; new y coordinate.
003417  3  85 rr        	sta dispy
003419  3  A0 09        	ldy #9
00341B  3  B1 68        	lda (z80_ix),y 		; new x coordinate.
00341D  3  85 rr        	sta dispx
00341F  3  A0 06        	ldy #6
003421  3  B1 68        	lda (z80_ix),y 		; new sprite image.
003423  3  20 01 38     	jsr gfrm		; fetch start frame for this sprite.
003426  3               
003426  3  A0 00        	ldy #0
003428  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
00342A  3  A0 07        	ldy #7
00342C  3  18           	clc
00342D  3  71 68        	adc (z80_ix),y 		; new add frame number.
00342F  3  4C 4E 34     	jmp gspra0
003432  3               
003432  3               ;-----------------------------------------
003432  3               ; Calculate old sprite address
003432  3               ;
003432  3               ; Input:
003432  3               ;  IX = sprite address
003432  3               ;
003432  3               ; Output:
003432  3               ;  B  = right byte mask
003432  3               ;  C  = left byte mask
003432  3               ;  DE = spriteframe address
003432  3               ;  scraddr = screenaddress(dispx,dispy)
003432  3               ;-----------------------------------------
003432  3               
003432  3               gsprad:
003432  3  A0 03        	ldy #3
003434  3  B1 68        	lda (z80_ix),y		; y coordinate.
003436  3  85 rr        	sta dispy
003438  3  A0 04        	ldy #4
00343A  3  B1 68        	lda (z80_ix),y		; x coordinate.
00343C  3  85 rr        	sta dispx
00343E  3  A0 01        	ldy #1
003440  3  B1 68        	lda (z80_ix),y 		; sprite image.
003442  3  20 01 38     	jsr gfrm 		; fetch start frame for this sprite.
003445  3               
003445  3  A0 00        	ldy #0
003447  3  B1 66        	lda (z80_hl),y 		; frame in accumulator.
003449  3  A0 02        	ldy #2
00344B  3  18           	clc
00344C  3  71 68        	adc (z80_ix),y 		; add frame number.
00344E  3               gspra0:
00344E  3  4A           	lsr a	  		; multiply by 128.
00344F  3  85 65        	sta z80_d 		; store in d.
003451  3  8D A6 34     	sta tmp1
003454  3  A9 00        	lda #0
003456  3  6A           	ror a
003457  3  85 64        	sta z80_e 		; got low byte.
003459  3  8D A7 34     	sta tmp2
00345C  3               .if bflag
00345C  3               	lsr tmp1
00345C  3               	ror tmp2
00345C  3               	clc
00345C  3               	lda tmp2
00345C  3               	adc z80_e
00345C  3               	sta z80_e
00345C  3               	lda tmp1
00345C  3               	adc z80_d
00345C  3               	sta z80_d
00345C  3               .endif
00345C  3  18           	clc 			; address of play sprites.
00345D  3  A5 64        	lda z80_e
00345F  3  69 02        	adc #<sprgfx
003461  3  85 64        	sta z80_e
003463  3  A5 65        	lda z80_d
003465  3  69 41        	adc #>sprgfx
003467  3  85 65        	sta z80_d
003469  3               
003469  3  A5 rr        	lda dispx 		; y coordinate.
00346B  3  29 06        	and #6 			; position within byte boundary.
00346D  3  AA           	tax	 		; low byte of table displacement.
00346E  3               
00346E  3  0A           	asl a	  		; multiply by 32.
00346F  3  0A           	asl a  			; already a multiple
003470  3  0A           	asl a  			; of 2, so just 4
003471  3               .if bflag
003471  3               	sta tmp1
003471  3               	asl a  			; shifts needed.
003471  3               	clc
003471  3               	adc tmp1
003471  3               .else
003471  3  0A           	asl a  			; shifts needed.
003472  3               .endif
003472  3  18           	clc 			; add to sprite address.
003473  3  65 64        	adc z80_e
003475  3  85 64        	sta z80_e
003477  3  90 02        	bcc :+
003479  3  E6 65        	inc z80_d
00347B  3               :
00347B  3  BD 9E 34     	lda spmask,x		 ; pointer to mask table.
00347E  3  85 62        	sta z80_c 		; left mask.
003480  3  BD 9F 34     	lda spmask+1,x
003483  3  85 63        	sta z80_b 		; right mask.
003485  3               
003485  3               ;------------------------------------------------------------------
003485  3               ; Drop into screen address routine.
003485  3               ; This routine returns a screen address for (dispx, dispy) in scraddr.
003485  3               ;------------------------------------------------------------------
003485  3               
003485  3               scadd:
003485  3  A6 rr        	ldx dispy
003487  3  E0 C0        	cpx #192
003489  3  90 02        	bcc :+
00348B  3  A2 C0        	ldx #192
00348D  3               :
00348D  3  A5 rr        	lda dispx
00348F  3  4A           	lsr a
003490  3  4A           	lsr a
003491  3  4A           	lsr a
003492  3  18           	clc
003493  3  7D 00 DC     	adc SCADTB_lb,x
003496  3  85 rr        	sta scraddr
003498  3  BD 00 DD     	lda SCADTB_hb,x
00349B  3  85 rr        	sta scraddr+1
00349D  3  60           	rts
00349E  3               
00349E  3  FF 00        spmask:	.byte $ff,$00
0034A0  3  3F C0        	.byte $3f,$c0
0034A2  3  0F F0        	.byte $0f,$f0
0034A4  3  03 FC        	.byte $03,$fc
0034A6  3               
0034A6  3  00           tmp1:	.byte 0
0034A7  3  00           tmp2:	.byte 0
0034A8  3               
0034A8  3               ;-----------------------------------------------------------------
0034A8  3               ; These are the sprite routines.
0034A8  3               ; sspria = single sprite, old (ix).
0034A8  3               ; ssprib = single sprite, new (ix+5).
0034A8  3               ; sspric = both sprites, old (ix) and new (ix+5).
0034A8  3               ;-----------------------------------------------------------------
0034A8  3               
0034A8  3               sspria:
0034A8  3  20 32 34     	jsr gsprad		; get old sprite address.
0034AB  3               sspri2:
0034AB  3  A5 64        	lda z80_e
0034AD  3  8D 1D 35     	sta dline1+1		; Set spritedata address
0034B0  3  8D 2C 35     	sta dline2+1
0034B3  3  A5 65        	lda z80_d
0034B5  3  8D 1E 35     	sta dline1+2
0034B8  3  8D 2D 35     	sta dline2+2
0034BB  3  86 rr        	stx xtmp
0034BD  3  A2 00        	ldx #0			; vertical lines.
0034BF  3               sspri0:
0034BF  3  20 19 35     	jsr dline		; draw a line.
0034C2  3  E0 10        	cpx #16			; detect block boundery
0034C4  3  D0 02        	bne :+			; skip if not
0034C6  3  E6 rr        	inc scraddr+1		; jump to next blockline
0034C8  3               :
0034C8  3  E0 20        	cpx #32			; check finished
0034CA  3               .if bflag
0034CA  3               	bne :+			; skip if not
0034CA  3               	inc scraddr+1		; jump to next blockline
0034CA  3               	inc z80_hlp+1		; jump to next blockline
0034CA  3               :
0034CA  3               	cpx #48			; check finished
0034CA  3               .endif
0034CA  3  D0 F3        	bne sspri0		; no, repeat
0034CC  3  A6 rr        	ldx xtmp
0034CE  3  60           	rts
0034CF  3               
0034CF  3               ;-----------------------------------------------------------------
0034CF  3               
0034CF  3               ssprib:
0034CF  3  20 13 34     	jsr gspran 		; get new sprite address.
0034D2  3  4C AB 34     	jmp sspri2
0034D5  3               
0034D5  3               ;-----------------------------------------------------------------
0034D5  3               
0034D5  3               sspric:
0034D5  3  20 32 34     	jsr gsprad 		; get old sprite address.
0034D8  3  A5 64        	lda z80_e
0034DA  3  8D 41 35     	sta ddline1+1		; Set spritedata address
0034DD  3  8D 50 35     	sta ddline2+1
0034E0  3  A5 65        	lda z80_d
0034E2  3  8D 42 35     	sta ddline1+2
0034E5  3  8D 51 35     	sta ddline2+2
0034E8  3  20 25 45     	jsr exx  		; store addresses.
0034EB  3               
0034EB  3  20 13 34     	jsr gspran 		; get new sprite addresses.
0034EE  3  A5 64        	lda z80_e
0034F0  3  8D 1D 35     	sta dline1+1		; Set spritedata address
0034F3  3  8D 2C 35     	sta dline2+1
0034F6  3  A5 65        	lda z80_d
0034F8  3  8D 1E 35     	sta dline1+2
0034FB  3  8D 2D 35     	sta dline2+2
0034FE  3               
0034FE  3  86 rr        	stx xtmp
003500  3  A2 00        	ldx #0			; vertical lines.
003502  3               lloop:
003502  3  20 19 35     	jsr dline 		; draw a line.
003505  3  CA           	dex
003506  3  CA           	dex
003507  3  20 3D 35     	jsr ddline 		; delete a line.
00350A  3  E0 10        	cpx #16			; detect block boundery
00350C  3  D0 04        	bne :+			; skip if not
00350E  3  E6 rr        	inc scraddr+1		; jump to next blockline
003510  3  E6 73        	inc z80_hlp+1		; jump to next blockline
003512  3               :
003512  3  E0 20        	cpx #32			; check finished
003514  3               .if bflag
003514  3               	bne :+			; skip if not
003514  3               	inc scraddr+1		; jump to next blockline
003514  3               	inc z80_hlp+1		; jump to next blockline
003514  3               :
003514  3               	cpx #48			; check finished
003514  3               .endif
003514  3  D0 EC        	bne lloop		; no, repeat
003516  3  A6 rr        	ldx xtmp
003518  3  60           	rts
003519  3               
003519  3               
003519  3               ;-----------------------------------------------------------------
003519  3               
003519  3               dline:
003519  3  BC 61 35     	ldy sprline,x		; point to screenleft
00351C  3               dline1:
00351C  3  BD 97 41     	lda objdta,x		; fetch spriteleft byte
00351F  3  85 61        	sta z80_a		; save spriteright byte
003521  3               .if hflag
003521  3               	sty ytmp
003521  3               	lda scraddr
003521  3               	and #31
003521  3               	sta dispx
003521  3               	lda scraddr+1
003521  3               	and #31
003521  3               	sta dispy
003521  3               	jsr pradd
003521  3               	ldy #0
003521  3               	lda (bufaddr),y
003521  3               	cmp #CUSTOM
003521  3               	beq sline
003521  3               	ldy ytmp
003521  3               .endif
003521  3  A5 61        	lda z80_a
003523  3  25 62        	and z80_c		; mask left
003525  3  51 rr        	eor (scraddr),y		; merge with screenleft
003527  3  91 rr        	sta (scraddr),y		; write screenleft
003529  3               sline:
003529  3               .if hflag
003529  3               	ldy ytmp
003529  3               .endif
003529  3  E8           	inx			; next spritebyte
00352A  3  C8           	iny			; point to screenmiddle
00352B  3               .if hflag
00352B  3               	sty ytmp
00352B  3               	ldy #1
00352B  3               	lda (bufaddr),y
00352B  3               	cmp #CUSTOM
00352B  3               	beq sline2
00352B  3               	ldy ytmp
00352B  3               .endif
00352B  3               dline2:
00352B  3  BD 97 41     	lda objdta,x		; fetch spritemiddle byte
00352E  3  51 rr        	eor (scraddr),y		; merge with screenmiddle
003530  3  91 rr        	sta (scraddr),y		; write screenmiddle
003532  3               sline2:
003532  3               .if hflag
003532  3               	ldy ytmp
003532  3               .endif
003532  3  C8           	iny			; point to screenright
003533  3               .if hflag
003533  3               	sty ytmp
003533  3               	ldy #2
003533  3               	lda (bufaddr),y
003533  3               	cmp #CUSTOM
003533  3               	beq sline3
003533  3               	ldy ytmp
003533  3               .endif
003533  3  A5 61        	lda z80_a		; fetch spriteright byte
003535  3  25 63        	and z80_b		; mask right
003537  3  51 rr        	eor (scraddr),y		; merge with screenright
003539  3  91 rr        	sta (scraddr),y		; write screenright
00353B  3               sline3:
00353B  3               .if hflag
00353B  3               	ldy ytmp
00353B  3               .endif
00353B  3  E8           	inx			; next spritebyte
00353C  3               
00353C  3  60           	rts
00353D  3               
00353D  3               ;-----------------------------------------------------------------
00353D  3               
00353D  3               ddline:
00353D  3  BC 61 35     	ldy sprline,x		; point to screenleft
003540  3               ddline1:
003540  3  BD 97 41     	lda objdta,x		; fetch spriteleft byte
003543  3  85 61        	sta z80_a		; save spriteright byte
003545  3               .if hflag
003545  3               	sty ytmp
003545  3               	lda z80_hlp
003545  3               	and #31
003545  3               	sta dispx
003545  3               	lda z80_hlp+1
003545  3               	and #31
003545  3               	sta dispy
003545  3               	jsr pradd
003545  3               	ldy #0
003545  3               	lda (bufaddr),y
003545  3               	cmp #CUSTOM
003545  3               	beq dsline
003545  3               	ldy ytmp
003545  3               .endif
003545  3  A5 61        	lda z80_a
003547  3  25 6E        	and z80_cp		; mask left
003549  3  51 72        	eor (z80_hlp),y		; merge with screenleft
00354B  3  91 72        	sta (z80_hlp),y		; write screenleft
00354D  3               dsline:
00354D  3               .if hflag
00354D  3               	ldy ytmp
00354D  3               .endif
00354D  3  E8           	inx			; next spritebyte
00354E  3  C8           	iny			; point to screenmiddle
00354F  3               .if hflag
00354F  3               	sty ytmp
00354F  3               	ldy #1
00354F  3               	lda (bufaddr),y
00354F  3               	cmp #CUSTOM
00354F  3               	beq dsline2
00354F  3               	ldy ytmp
00354F  3               .endif
00354F  3               ddline2:
00354F  3  BD 97 41     	lda objdta,x		; fetch spritemiddle byte
003552  3  51 72        	eor (z80_hlp),y		; merge with screenmiddle
003554  3  91 72        	sta (z80_hlp),y		; write screenmiddle
003556  3               dsline2:
003556  3               .if hflag
003556  3               	ldy ytmp
003556  3               .endif
003556  3  C8           	iny			; point to screenright
003557  3               .if hflag
003557  3               	sty ytmp
003557  3               	ldy #2
003557  3               	lda (bufaddr),y
003557  3               	cmp #CUSTOM
003557  3               	beq dsline3
003557  3               	ldy ytmp
003557  3               .endif
003557  3  A5 61        	lda z80_a		; fetch spriteright byte
003559  3  25 6F        	and z80_bp		; mask right
00355B  3  51 72        	eor (z80_hlp),y		; merge with screenright
00355D  3  91 72        	sta (z80_hlp),y		; write screenright
00355F  3               dsline3:
00355F  3               .if hflag
00355F  3               	ldy ytmp
00355F  3               .endif
00355F  3  E8           	inx			; next spritebyte
003560  3               
003560  3  60           	rts
003561  3               
003561  3               sprline:
003561  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003565  3  40 41 60 61  
003569  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00356D  3  C0 C1 E0 E1  
003571  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003575  3  40 41 60 61  
003579  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00357D  3  C0 C1 E0 E1  
003581  3  00 01 20 21  	.byte $00,$01,$20,$21,$40,$41,$60,$61
003585  3  40 41 60 61  
003589  3  80 81 A0 A1  	.byte $80,$81,$a0,$a1,$c0,$c1,$e0,$e1
00358D  3  C0 C1 E0 E1  
003591  3               
003591  3               ;----------------------------------------------------------------------
003591  3               ; Line drawn, now work out next target address.
003591  3               ;----------------------------------------------------------------------
003591  3               
003591  3               nline:
003591  3  18           	clc
003592  3  A5 rr        	lda scraddr 		; get low byte of address.
003594  3  69 28        	adc #ScrWidth
003596  3  85 rr        	sta scraddr 		; new low byte of address.
003598  3  90 02        	bcc :+
00359A  3  E6 rr        	inc scraddr+1 		; new high byte of address.
00359C  3               :
00359C  3  60           	rts
00359D  3               
00359D  3               ;-------------------------------------------------------------
00359D  3               ; Line drawn, now work out next target address.
00359D  3               ;
00359D  3               ; Input:
00359D  3               ;  BP  = right mask
00359D  3               ;  CP  = left mask
00359D  3               ;  DEP = spriteaddress
00359D  3               ;  z80_hlp = screen address
00359D  3               ;-------------------------------------------------------------
00359D  3               
00359D  3               
00359D  3               ;-----------------------------------------------------------
00359D  3               ; Animates a sprite.
00359D  3               ;
00359D  3               ; Input:
00359D  3               ;  IX = sprite address
00359D  3               ;  HL = last sprite address
00359D  3               ;-----------------------------------------------------------
00359D  3               
00359D  3               animsp:
00359D  3  25 rr        	and frmno
00359F  3  F0 01        	beq :+
0035A1  3  60           	rts
0035A2  3               :
0035A2  3  A0 06        	ldy #6
0035A4  3  B1 68        	lda (z80_ix),y		; sprite image
0035A6  3  20 01 38     	jsr gfrm		; get frame data.
0035A9  3               
0035A9  3  E6 66        	inc z80_l		; point to frames.
0035AB  3  D0 02        	bne :+
0035AD  3  E6 67        	inc z80_h
0035AF  3               :
0035AF  3  A0 07        	ldy #7
0035B1  3  B1 68        	lda (z80_ix),y		; sprite frame.
0035B3  3  18           	clc
0035B4  3  69 01        	adc #1			; next one along.
0035B6  3  A0 00        	ldy #0
0035B8  3  D1 66        	cmp (z80_hl),y		; reached the last frame?
0035BA  3  90 02        	bcc anims0		; no, not yet.
0035BC  3  A9 00        	lda #0			; start at first frame.
0035BE  3               anims0:
0035BE  3  A0 07        	ldy #7
0035C0  3  91 68        	sta (z80_ix),y		; new frame.
0035C2  3  60           	rts
0035C3  3               
0035C3  3               ;--------------------------------------------------------------
0035C3  3               ; Animate back
0035C3  3               ;
0035C3  3               ; Input:
0035C3  3               ;  IX = sprite address
0035C3  3               ;  HL = last sprite address
0035C3  3               ;--------------------------------------------------------------
0035C3  3               
0035C3  3               animbk:
0035C3  3  25 rr        	and frmno
0035C5  3  F0 01        	beq :+
0035C7  3  60           	rts
0035C8  3               :
0035C8  3  A0 06        	ldy #6
0035CA  3  B1 68        	lda (z80_ix),y		; sprite image.
0035CC  3  20 01 38     	jsr gfrm		; get frame data.
0035CF  3               
0035CF  3  E6 66        	inc z80_l 		; point to frames.
0035D1  3  D0 02        	bne :+
0035D3  3  E6 67        	inc z80_h
0035D5  3               :
0035D5  3  A0 07        	ldy #7
0035D7  3  B1 68        	lda (z80_ix),y 		; sprite frame.
0035D9  3  F0 03        	beq :+
0035DB  3  4C E2 35     	jmp rtanb0 		; yes, start at end.
0035DE  3               :
0035DE  3  A0 00        	ldy #0
0035E0  3  B1 66        	lda (z80_hl),y 		; last sprite.
0035E2  3               rtanb0:
0035E2  3  38           	sec
0035E3  3  E9 01        	sbc #1			; next one along.
0035E5  3  4C BE 35     	jmp anims0		; set new frame.
0035E8  3               
0035E8  3               ;--------------------------------------------------------------
0035E8  3               ; Check for collision with other sprite, strict enforcement.
0035E8  3               ;
0035E8  3               ; Input:
0035E8  3               ;  b		= sprite to test for
0035E8  3               ;  ix		= current sprite pointer
0035E8  3               ;
0035E8  3               ; global:	b
0035E8  3               ; local:	x,y,hl,de,skptr
0035E8  3               ; calls:	-
0035E8  3               ;--------------------------------------------------------------
0035E8  3               
0035E8  3               sktyp:
0035E8  3  A9 DF        	lda #<sprtab				; sprite table.
0035EA  3  85 66        	sta z80_l
0035EC  3  A9 39        	lda #>sprtab
0035EE  3  85 67        	sta z80_h
0035F0  3               numsp2:
0035F0  3  A9 0C        	lda #NUMSPR				; number of sprites.
0035F2  3  85 rr        	sta sktptr
0035F4  3               sktyp0:
0035F4  3  A5 66        	lda z80_l 				; store pointer to sprite.
0035F6  3  85 rr        	sta skptr
0035F8  3  A5 67        	lda z80_h
0035FA  3  85 rr        	sta skptr+1
0035FC  3               
0035FC  3  A0 00        	ldy #0
0035FE  3  B1 66        	lda (z80_hl),y 				; get sprite type.
003600  3  C5 63        	cmp z80_b				; is it the type we seek?
003602  3  F0 1D        	beq coltyp				; yes, we can use this one.
003604  3               sktyp1:
003604  3  18           	clc
003605  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003607  3  69 11        	adc #TABSIZ				; size of each entry.
003609  3  85 66        	sta z80_l
00360B  3  A5 rr        	lda skptr+1
00360D  3  69 00        	adc #0
00360F  3  85 67        	sta z80_h
003611  3  C6 rr        	dec sktptr					; one less iteration.
003613  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
003615  3  A9 00        	lda #0					; default to ROM address - no sprite.
003617  3  85 66        	sta z80_l
003619  3  85 67        	sta z80_h
00361B  3  85 rr        	sta skptr				; store pointer to sprite.
00361D  3  85 rr        	sta skptr+1
00361F  3               
00361F  3  18           	clc					; don't return with zero flag set.
003620  3  60           	rts 					; didn't find one.
003621  3               
003621  3               ;skptr:	.word 0					; search pointer.
003621  3               ;sktptr:	.byte 0
003621  3               
003621  3               coltyp:
003621  3  A0 00        	ldy #0
003623  3  B1 68        	lda (z80_ix),y				; current sprite type.
003625  3  C5 63        	cmp z80_b				; seeking sprite of same type?
003627  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
003629  3               colty0:
003629  3  A0 09        	ldy #9					; distance to x position in table.
00362B  3  B1 66        	lda (z80_hl),y				; fetch x coordinate.
00362D  3  85 64        	sta z80_e
00362F  3  88           	dey
003630  3  B1 66        	lda (z80_hl),y				; fetch y coordinate.
003632  3  85 65        	sta z80_d
003634  3               
003634  3               ; Drop into collision detection.
003634  3               
003634  3               colc16:
003634  3  A0 09        	ldy #9
003636  3  B1 68        	lda (z80_ix),y			 	; x coord.
003638  3  38           	sec					; subtract x.
003639  3  E5 64        	sbc z80_e
00363B  3  B0 05        	bcs  colc1a 				; result is positive.
00363D  3  49 FF        	eor #$ff				; make negative positive.
00363F  3  18           	clc
003640  3  69 01        	adc #1
003642  3               colc1a:
003642  3  C9 10        	cmp #16 				; within x range?
003644  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
003646  3  85 62        	sta z80_c				; store difference.
003648  3               
003648  3  A0 08        	ldy #8
00364A  3  B1 68        	lda (z80_ix),y				; y coord.
00364C  3  38           	sec
00364D  3  E5 65        	sbc z80_d				; subtract y.
00364F  3  B0 05        	bcs colc1b				; result is positive.
003651  3  49 FF        	eor #$ff				; make negative positive.
003653  3  18           	clc
003654  3  69 01        	adc #1
003656  3               colc1b:
003656  3  C9 10        	cmp #16					; within y range?
003658  3  B0 AA        	bcs sktyp1 				; no - they've missed.
00365A  3  18           	clc					; add x difference.
00365B  3  65 62        	adc z80_c
00365D  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
00365F  3  B0 02        	bcs :+
003661  3  38           	sec
003662  3  60           	rts 					; carry set if there's a collision.
003663  3               :
003663  3  4C 04 36     	jmp sktyp1				; try next sprite in table.
003666  3               colty1:
003666  3  A5 68        	lda z80_x  				; compare the two.
003668  3  C5 66        	cmp z80_l
00366A  3  D0 09        	bne end_col
00366C  3  A5 69        	lda z80_i
00366E  3  C5 67        	cmp z80_h
003670  3  D0 03        	bne end_col
003672  3  4C 04 36     	jmp sktyp1 				; addresses are identical.
003675  3               end_col:
003675  3  4C 29 36     	jmp colty0
003678  3               
003678  3               ;-----------------------------------------------------------
003678  3               ; Display number, left aligned
003678  3               ;
003678  3               ; Input:
003678  3               ;  a		= number
003678  3               ;
003678  3               ; global:	-
003678  3               ; local:	a,y,bc,hl,displ0
003678  3               ; calls:	num2ch,dmsg3
003678  3               ;-----------------------------------------------------------
003678  3               
003678  3               disply:
003678  3  85 61        	sta z80_a
00367A  3  A9 A0        	lda #<displ0				; display workspace.
00367C  3  85 62        	sta z80_c
00367E  3  A9 36        	lda #>displ0
003680  3  85 63        	sta z80_b
003682  3  A5 61        	lda z80_a
003684  3  20 14 2A     	jsr num2ch				; convert accumulator to string.
003687  3               displ1:
003687  3  C6 62        	dec z80_c				; back one character.
003689  3  D0 02        	bne :+
00368B  3  C6 63        	dec z80_b
00368D  3               :
00368D  3  A0 00        	ldy #0
00368F  3  B1 62        	lda (z80_bc),y				; fetch digit.
003691  3  09 80        	ora #128				; insert end marker.
003693  3  91 62        	sta (z80_bc),y				; new value.
003695  3               
003695  3  A9 A0        	lda #<displ0				; display space.
003697  3  85 66        	sta z80_l
003699  3  A9 36        	lda #>displ0
00369B  3  85 67        	sta z80_h
00369D  3               
00369D  3  4C 67 31     	jmp dmsg3				; display the string.
0036A0  3               
0036A0  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0036A4  3               
0036A4  3               ;----------------------------------------------------------------
0036A4  3               ; Initialise screen.
0036A4  3               ;
0036A4  3               ; global:	roomtb,scno
0036A4  3               ; local:	-
0036A4  3               ; calls:	tstcs
0036A4  3               ;----------------------------------------------------------------
0036A4  3               
0036A4  3               initsc:
0036A4  3  AD BC 3A     	lda roomtb 			; whereabouts in the map are we?
0036A7  3  20 B1 36     	jsr tstsc 			; find displacement.
0036AA  3  C9 FF        	cmp #255 			; is it valid?
0036AC  3  F0 02        	beq init_end 			; no, it's rubbish.
0036AE  3  85 rr        	sta scno			; store new room number.
0036B0  3               init_end:
0036B0  3  60           	rts
0036B1  3               
0036B1  3               ;----------------------------------------------------------------
0036B1  3               ; Test screen.
0036B1  3               ;
0036B1  3               ; global:	-
0036B1  3               ; local:	x
0036B1  3               ; calls:	-
0036B1  3               ;----------------------------------------------------------------
0036B1  3               
0036B1  3               tstsc:
0036B1  3  85 rr        	sta tmproom
0036B3  3  18           	clc
0036B4  3  69 03        	adc #MAPWID 			; add width in case we"re negative.
0036B6  3  AA           	tax 				; add displacement to map data.
0036B7  3  BD D0 3A     	lda mapdat-MAPWID,x 		; find room number there.
0036BA  3  60           	rts
0036BB  3               
0036BB  3               ;tmproom:	.byte 0
0036BB  3               
0036BB  3               ;--------------------------
0036BB  3               ; Screen left.
0036BB  3               ;--------------------------
0036BB  3               
0036BB  3               scrl:
0036BB  3  AD BC 3A     	lda roomtb 			; present room table pointer.
0036BE  3  38           	sec
0036BF  3  E9 01        	sbc #1				; room left.
0036C1  3               scrl0:
0036C1  3  20 B1 36     	jsr tstsc			; test screen.
0036C4  3  C9 FF        	cmp #255			; is there a screen this way?
0036C6  3  D0 01        	bne :+
0036C8  3  60           	rts				; no, return to loop.
0036C9  3               :
0036C9  3  A5 rr        	lda tmproom			; restore room displacement.
0036CB  3  8D BC 3A     	sta roomtb			; new room table position.
0036CE  3               scrl1:
0036CE  3  20 A4 36     	jsr initsc 			; set new screen.
0036D1  3  A9 02        	lda #2
0036D3  3  85 rr        	sta restfl 			; set it.
0036D5  3  60           	rts
0036D6  3               scrr:
0036D6  3  AD BC 3A     	lda roomtb 			; room table pointer.
0036D9  3  18           	clc
0036DA  3  69 01        	adc #1				; room right.
0036DC  3  4C C1 36     	jmp scrl0
0036DF  3               scru:
0036DF  3  AD BC 3A     	lda roomtb 			; room table pointer.
0036E2  3  38           	sec
0036E3  3  E9 03        	sbc #MAPWID 			; room up.
0036E5  3  4C C1 36     	jmp scrl0
0036E8  3               scrd:
0036E8  3  AD BC 3A     	lda roomtb 			; room table pointer.
0036EB  3  18           	clc
0036EC  3  69 03        	adc #MAPWID 			; room down.
0036EE  3  4C C1 36     	jmp scrl0
0036F1  3               
0036F1  3               ;-----------------------------------------
0036F1  3               ; Jump to new screen.
0036F1  3               ;-----------------------------------------
0036F1  3               
0036F1  3               nwscr:
0036F1  3  A2 00        	ldx #0				; start of map data.
0036F3  3               nwscr0:
0036F3  3  DD D3 3A     	cmp mapdat,x
0036F6  3  F0 06        	beq nwscr1			; have we found a match for screen?
0036F8  3  E8           	inx 				; next room.
0036F9  3  E0 50        	cpx #80				; zero room count, 80 to search.
0036FB  3  D0 F6        	bne nwscr0			; keep looking.
0036FD  3  60           	rts
0036FE  3               nwscr1:
0036FE  3  8E BC 3A     	stx roomtb			; set the map position.
003701  3  4C CE 36     	jmp scrl1			; draw new room.
003704  3               
003704  3               
003704  3               ;----------------------------------------------------------
003704  3               ; Gravity processing.
003704  3               ;----------------------------------------------------------
003704  3               
003704  3               grav:
003704  3  A0 0D        	ldy #13
003706  3  B1 68        	lda (z80_ix),y			; jump pointer low.
003708  3  85 66        	sta z80_l
00370A  3  A0 0E        	ldy #14
00370C  3  B1 68        	lda (z80_ix),y			; jump pointer high.
00370E  3  85 67        	sta z80_h
003710  3  05 66        	ora z80_l			; merge in low byte.
003712  3  D0 01        	bne :+
003714  3  60           	rts				; if neither is set, we're not in the air.
003715  3               :
003715  3  A0 00        	ldy #0
003717  3  B1 66        	lda (z80_hl),y			; pixels to move.
003719  3  85 61        	sta z80_a
00371B  3  C9 63        	cmp #99				; reached the end?
00371D  3  D0 0C        	bne grav0			; no, continue.
00371F  3               grav2:
00371F  3  C6 66        	dec z80_l			; go back to previous value.
003721  3  C9 FF        	cmp #$ff
003723  3  D0 02        	bne :+
003725  3  C6 67        	dec z80_h
003727  3               :
003727  3  B1 66        	lda (z80_hl),y			; fetch that from table.
003729  3  85 61        	sta z80_a
00372B  3               grav0:
00372B  3  E6 66        	inc z80_l			; point to next table entry.
00372D  3  D0 02        	bne :+
00372F  3  E6 67        	inc z80_h
003731  3               :
003731  3  A5 66        	lda z80_l
003733  3  A0 0D        	ldy #13
003735  3  91 68        	sta (z80_ix),y			; store new pointer low.
003737  3  A5 67        	lda z80_h
003739  3  A0 0E        	ldy #14
00373B  3  91 68        	sta (z80_ix),y			; store new pointer high.
00373D  3               grav1:
00373D  3  A5 61        	lda z80_a
00373F  3  D0 01        	bne :+				; any movement required?
003741  3  60           	rts				; no, not this time.
003742  3               :
003742  3  A5 61        	lda z80_a
003744  3  C9 80        	cmp #128			; is it up or down?
003746  3  B0 15        	bcs gravu			; it's up.
003748  3               gravd:
003748  3  85 63        	sta z80_b			; set pixels to move.
00374A  3               gravd0:
00374A  3  20 0E 2E     	jsr cangd			; can we go down?
00374D  3  D0 28        	bne gravst			; can't move down, so stop.
00374F  3  A0 08        	ldy #8
003751  3  B1 68        	lda (z80_ix),y			; adjust new x coord.
003753  3  18           	clc
003754  3  69 01        	adc #1
003756  3  91 68        	sta (z80_ix),y
003758  3  C6 63        	dec z80_b
00375A  3  D0 EE        	bne gravd0
00375C  3  60           	rts
00375D  3               gravu:
00375D  3  49 FF        	eor #$ff			; flip the sign so it's positive.
00375F  3  18           	clc
003760  3  69 01        	adc #1
003762  3  85 63        	sta z80_b			; set pixels to move.
003764  3               gravu0:
003764  3  20 D9 2D     	jsr cangu			; can we go up?
003767  3  D0 6E        	bne ifalls			; can't move up, go down next.
003769  3  A0 08        	ldy #8
00376B  3  B1 68        	lda (z80_ix),y
00376D  3  38           	sec
00376E  3  E9 01        	sbc #1
003770  3  91 68        	sta (z80_ix),y			; adjust new x coord.
003772  3  C6 63        	dec z80_b
003774  3  D0 EE        	bne gravu0
003776  3  60           	rts
003777  3               gravst:
003777  3  A0 0D        	ldy #13
003779  3  B1 68        	lda (z80_ix),y			; jump pointer low.
00377B  3  85 66        	sta z80_l
00377D  3  A0 0E        	ldy #14
00377F  3  B1 68        	lda (z80_ix),y			; jump pointer high.
003781  3  85 67        	sta z80_h
003783  3               
003783  3  A9 00        	lda #0				; null value in pointer.
003785  3  A0 0D        	ldy #13
003787  3  91 68        	sta (z80_ix),y			; store new pointer low.
003789  3  C8           	iny
00378A  3  91 68        	sta (z80_ix),y			; store new pointer high.
00378C  3               
00378C  3  A0 00        	ldy #0
00378E  3  B1 66        	lda (z80_hl),y			; fetch byte from table.
003790  3  C9 63        	cmp #99				; is it the end marker?
003792  3               evftf:
003792  3  F0 01        	beq :+				; yes, fallen too far.
003794  3  60           	rts
003795  3               :
003795  3  4C 86 3F     	jmp evnt15			; EVENT FELLTOOFAR
003798  3               
003798  3               ;------------------------------------------------
003798  3               ; Initiate fall check.
003798  3               ;------------------------------------------------
003798  3               
003798  3               ifall:
003798  3  A0 0D        	ldy #13
00379A  3  B1 68        	lda (z80_ix),y 			; jump pointer low.
00379C  3  85 66        	sta z80_l
00379E  3  A0 0E        	ldy #14
0037A0  3  B1 68        	lda (z80_ix),y 			; jump pointer high.
0037A2  3  85 67        	sta z80_h			; high byte in accumulator.
0037A4  3  05 66        	ora z80_l			; merge in low byte.
0037A6  3  F0 01        	beq :+
0037A8  3  60           	rts				; if either is set, we're already in the air.
0037A9  3               :
0037A9  3  A0 09        	ldy #9
0037AB  3  B1 68        	lda (z80_ix),y			; y coordinate.
0037AD  3  85 rr        	sta dispx
0037AF  3  A0 08        	ldy #8
0037B1  3  B1 68        	lda (z80_ix),y			; look x coordinate.
0037B3  3  18           	clc
0037B4  3               numsp7:
0037B4  3  69 09        	adc #SPR_HGT			; add 16 pixels.
0037B6  3  85 rr        	sta dispy			; set up test coordinates.
0037B8  3  20 83 30     	jsr tstbl			; get map address.
0037BB  3  20 B0 2F     	jsr plchk			; block, platform check.
0037BE  3  F0 01        	beq :+
0037C0  3  60           	rts				; it's solid, don't fall.
0037C1  3               :
0037C1  3  E6 rr        	inc bufaddr			; look right one cell.
0037C3  3  20 B0 2F     	jsr plchk			; block, platform check.
0037C6  3  F0 01        	beq :+
0037C8  3  60           	rts				; it's solid, don't fall.
0037C9  3               :
0037C9  3  A5 rr        	lda dispx			; y coordinate.
0037CB  3  29 07        	and #7				; position straddling block cells.
0037CD  3  F0 08        	beq ifalls			; no more checks needed.
0037CF  3  E6 rr        	inc bufaddr			; look to third cell.
0037D1  3  20 B0 2F     	jsr plchk			; block, platform check.
0037D4  3  F0 01        	beq :+
0037D6  3  60           	rts				; it's solid, don't fall.
0037D7  3               :
0037D7  3               ifalls:
0037D7  3  A9 BD        	lda #<jtab			; jump table start.
0037D9  3  85 66        	sta z80_l
0037DB  3  A9 44        	lda #>jtab
0037DD  3  85 67        	sta z80_h
0037DF  3               ifal0:
0037DF  3  E6 66        	inc z80_l			; point to next value.
0037E1  3  D0 02        	bne :+
0037E3  3  E6 67        	inc z80_h
0037E5  3               :
0037E5  3  A0 00        	ldy #0
0037E7  3  B1 66        	lda (z80_hl),y			; fetch value.
0037E9  3  F0 F4        	beq ifal0			; no, get next value.
0037EB  3  C9 63        	cmp #99				; reached end of table?
0037ED  3  D0 01        	bne :+
0037EF  3  60           	rts				; yes, don't fall.
0037F0  3               :
0037F0  3  C9 80        	cmp #128			; is it going up?
0037F2  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0037F4  3               
0037F4  3  A0 0D        	ldy #13
0037F6  3  A5 66        	lda z80_l
0037F8  3  91 68        	sta (z80_ix),y 			; set jump low.
0037FA  3  A0 0E        	ldy #14
0037FC  3  A5 67        	lda z80_h
0037FE  3  91 68        	sta (z80_ix),y 			; set jump high.
003800  3  60           	rts
003801  3               
003801  3               
003801  3               ;----------------------------------------------------
003801  3               ; Get frame data for a particular sprite.
003801  3               ; Input:
003801  3               ;  a		= framenumer
003801  3               ; Output:
003801  3               ;  hl		= frame address
003801  3               ;
003801  3               ; global:	hl,frmptr
003801  3               ; local:	-
003801  3               ; calls:	-
003801  3               ;----------------------------------------------------
003801  3               
003801  3               gfrm:
003801  3  0A           	asl a	 		 	; multiple of 2.
003802  3  18           	clc
003803  3  6D 17 28     	adc frmptr 			; frames used by game.
003806  3  85 66        	sta z80_l
003808  3  AD 18 28     	lda frmptr+1
00380B  3  69 00        	adc #0
00380D  3  85 67        	sta z80_h 			; point to frame start.
00380F  3  60           	rts
003810  3               
003810  3               ;----------------------------------------------------
003810  3               ; Find sprite list for current room.
003810  3               ;
003810  3               ; global:	hl
003810  3               ; local:	x,y
003810  3               ; calls:	-
003810  3               ;----------------------------------------------------
003810  3               
003810  3               sprlst:
003810  3  A9 92        	lda #<nmedat 			; list of enemy sprites.
003812  3  85 66        	sta z80_l
003814  3  A9 41        	lda #>nmedat
003816  3  85 67        	sta z80_h
003818  3  A6 rr        	ldx scno 			; screen number.
00381A  3  D0 01        	bne sprls2 			; is it the first screen?
00381C  3  60           	rts 				; yes, don't need to search data.
00381D  3               sprls2:
00381D  3  A0 00        	ldy #0
00381F  3               sprls1:
00381F  3  B1 66        	lda (z80_hl),y 			; fetch type of sprite.
003821  3  C9 FF        	cmp #255			; is it an end marker?
003823  3  F0 0E        	beq sprls0 			; yes, end of this room.
003825  3               
003825  3  18           	clc 				; point to next sprite in list.
003826  3  A5 66        	lda z80_l
003828  3  69 04        	adc #NMESIZ
00382A  3  85 66        	sta z80_l
00382C  3  90 02        	bcc :+
00382E  3  E6 67        	inc z80_h
003830  3               :
003830  3  4C 1F 38     	jmp sprls1 			; continue until end of room.
003833  3               sprls0:
003833  3  E6 66        	inc z80_l 			; point to start of next screen.s
003835  3  D0 02        	bne :+
003837  3  E6 67        	inc z80_h
003839  3               :
003839  3  CA           	dex
00383A  3  D0 E3        	bne sprls1 			; continue until room found.
00383C  3  60           	rts
00383D  3               
00383D  3               
00383D  3               ;----------------------------------------------------
00383D  3               ; Clear all but a single player sprite.
00383D  3               ;
00383D  3               ; global:	-
00383D  3               ; local:	x,y,ix
00383D  3               ; calls:	-
00383D  3               ;----------------------------------------------------
00383D  3               
00383D  3               nspr:
00383D  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00383F  3  85 rr        	sta sprcnt
003841  3  A9 DF        	lda #<sprtab 			; sprite table.
003843  3  85 68        	sta z80_x
003845  3  A9 39        	lda #>sprtab
003847  3  85 69        	sta z80_i
003849  3               nspr0:
003849  3  A0 00        	ldy #0 				; fetch sprite type.
00384B  3  B1 68        	lda (z80_ix),y 			; is it a player?
00384D  3  F0 1A        	beq nspr1 			; yes, keep this one.
00384F  3               
00384F  3  A9 FF        	lda #255
003851  3  A0 00        	ldy #0 				; fetch sprite type.
003853  3  91 68        	sta (z80_ix),y 			; delete sprite.
003855  3  A0 05        	ldy #5
003857  3  91 68        	sta (z80_ix),y 			; remove next type.
003859  3               
003859  3  18           	clc	 			; next sprite.
00385A  3  A5 68        	lda z80_x
00385C  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00385E  3  85 68        	sta z80_x
003860  3  90 02        	bcc :+
003862  3  E6 69        	inc z80_i
003864  3               :
003864  3  C6 rr        	dec sprcnt	 			; one less space in the table.
003866  3  D0 E1        	bne nspr0
003868  3  60           	rts
003869  3               nspr1:
003869  3  A9 FF        	lda #255
00386B  3  A0 00        	ldy #0
00386D  3  91 68        	sta (z80_ix),y 			; delete sprite.
00386F  3               
00386F  3  18           	clc	 			; point to next sprite.
003870  3  A5 68        	lda z80_x
003872  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003874  3  85 68        	sta z80_x
003876  3  90 02        	bcc :+
003878  3  E6 69        	inc z80_i
00387A  3               :
00387A  3  C6 rr        	dec sprcnt	 			; one less to do.
00387C  3  D0 01        	bne nspr2
00387E  3  60           	rts
00387F  3               nspr2:
00387F  3  A9 FF        	lda #255
003881  3  A0 00        	ldy #0
003883  3  91 68        	sta (z80_ix),y 			; delete sprite.
003885  3  A0 05        	ldy #5
003887  3  91 68        	sta (z80_ix),y 			; remove next type.
003889  3               
003889  3  18           	clc	 			; next sprite.
00388A  3  A5 68        	lda z80_x
00388C  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00388E  3  85 68        	sta z80_x
003890  3  90 02        	bcc :+
003892  3  E6 69        	inc z80_i
003894  3               :
003894  3  C6 rr        	dec sprcnt	 			; one less space in table.
003896  3  D0 E7        	bne nspr2
003898  3  60           	rts
003899  3               
003899  3               ;----------------------------------------------------------
003899  3               ; Two initialisation routines.
003899  3               ; Initialise sprites - copy everything from list to table.
003899  3               ;
003899  3               ; global:	-
003899  3               ; local:	x,y,ix
003899  3               ; calls:	cpsp
003899  3               ;----------------------------------------------------------
003899  3               
003899  3               ispr:
003899  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00389B  3  85 rr        	sta sprcnt
00389D  3  A9 DF        	lda #<sprtab			; sprite table.
00389F  3  85 68        	sta z80_x
0038A1  3  A9 39        	lda #>sprtab
0038A3  3  85 69        	sta z80_i
0038A5  3               ispr2:
0038A5  3  A0 00        	ldy #0
0038A7  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0038A9  3  C9 FF        	cmp #255 			; is it an end marker?
0038AB  3  D0 01        	bne :+
0038AD  3  60           	rts 				; yes, no more to do.
0038AE  3               :
0038AE  3               ispr1:
0038AE  3  A0 00        	ldy #0
0038B0  3  B1 68        	lda (z80_ix),y 			; fetch sprite type.
0038B2  3  C9 FF        	cmp #255 			; is it enabled yet?
0038B4  3  D0 08        	bne ispr4			; yes, try another slot.
0038B6  3               
0038B6  3  A0 05        	ldy #5
0038B8  3  B1 68        	lda (z80_ix),y		 	; next type.
0038BA  3  C9 FF        	cmp #255 			; is it enabled yet?
0038BC  3  F0 10        	beq ispr3 			; no, process this one.
0038BE  3               ispr4:
0038BE  3  18           	clc 				; next sprite.
0038BF  3  A5 68        	lda z80_x
0038C1  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0038C3  3  85 68        	sta z80_x
0038C5  3  90 02        	bcc :+
0038C7  3  E6 69        	inc z80_i
0038C9  3               :
0038C9  3  C6 rr        	dec sprcnt
0038CB  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0038CD  3  60           	rts  				; no more room in table.
0038CE  3               ispr3:
0038CE  3  20 21 39     	jsr cpsp			; initialise a sprite.
0038D1  3  C6 rr        	dec sprcnt			; one less space in the table.
0038D3  3  D0 D0        	bne ispr2
0038D5  3  60           	rts
0038D6  3               
0038D6  3               
0038D6  3               ;-----------------------------------------------------------------------
0038D6  3               ; Initialise sprites - but not player, we're keeping the old one.
0038D6  3               ;
0038D6  3               ; global:	-
0038D6  3               ; local:	x,y,ix
0038D6  3               ; calls:	cpsp
0038D6  3               ;-----------------------------------------------------------------------
0038D6  3               
0038D6  3               kspr:
0038D6  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0038D8  3  A9 DF        	lda #<sprtab 			; sprite table.
0038DA  3  85 68        	sta z80_x
0038DC  3  A9 39        	lda #>sprtab
0038DE  3  85 69        	sta z80_i
0038E0  3               kspr2:
0038E0  3  A0 00        	ldy #0
0038E2  3  B1 66        	lda (z80_hl),y 			; fetch byte.
0038E4  3  C9 FF        	cmp #255 			; is it an end marker?
0038E6  3  D0 01        	bne :+
0038E8  3  60           	rts 				; yes, no more to do.
0038E9  3               :
0038E9  3  C9 00        	cmp #0
0038EB  3  D0 0E        	bne kspr1 			; no, add to table as normal.
0038ED  3               
0038ED  3  18           	clc 				; next sprite.
0038EE  3  A5 66        	lda z80_l
0038F0  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0038F2  3  85 66        	sta z80_l
0038F4  3  90 02        	bcc :+
0038F6  3  E6 67        	inc z80_h
0038F8  3               :
0038F8  3  4C E0 38     	jmp kspr2
0038FB  3               kspr1:
0038FB  3  A0 00        	ldy #0 				; fetch sprite type.
0038FD  3  B1 68        	lda (z80_ix),y
0038FF  3  C9 FF        	cmp #255 			; is it enabled yet?
003901  3  D0 08        	bne kspr4 			; yes, try another slot.
003903  3               
003903  3  A0 05        	ldy #5 				; next type.
003905  3  B1 68        	lda (z80_ix),y
003907  3  C9 FF        	cmp #255 			; is it enabled yet?
003909  3  F0 0F        	beq kspr3 			; no, process this one.
00390B  3               kspr4:
00390B  3  18           	clc 				; next sprite.
00390C  3  A5 68        	lda z80_x
00390E  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003910  3  85 68        	sta z80_x
003912  3  90 02        	bcc :+
003914  3  E6 69        	inc z80_i
003916  3               :
003916  3  CA           	dex	 			; repeat for remaining sprites.
003917  3  D0 E2        	bne kspr1
003919  3  60           	rts  				; no more room in table.
00391A  3               kspr3:
00391A  3  20 21 39     	jsr cpsp 			; copy sprite to table.
00391D  3  CA           	dex	 			; one less space in the table.
00391E  3  D0 C0        	bne kspr2
003920  3  60           	rts
003921  3               
003921  3               ;----------------------------------------------
003921  3               ; Copy sprite from list to table.
003921  3               ;
003921  3               ; global:	hl,ix
003921  3               ; local:	y
003921  3               ; calls:	evnt09
003921  3               ;----------------------------------------------
003921  3               
003921  3               cpsp:
003921  3  A0 00        	ldy #0				; fetch byte from table.
003923  3  B1 66        	lda (z80_hl),y
003925  3  91 68        	sta (z80_ix),y			; set up type.
003927  3  A0 05        	ldy #PAM1ST
003929  3  91 68        	sta (z80_ix),y 			; set up type.
00392B  3               
00392B  3  E6 66        	inc z80_l 			; move to next byte.
00392D  3  D0 02        	bne :+
00392F  3  E6 67        	inc z80_h
003931  3               :
003931  3  A0 00        	ldy #0 				; fetch byte from table.
003933  3  B1 66        	lda (z80_hl),y
003935  3  A0 06        	ldy #6
003937  3  91 68        	sta (z80_ix),y			; set up image.
003939  3               
003939  3  E6 66        	inc z80_l 			; move to next byte.
00393B  3  D0 02        	bne :+
00393D  3  E6 67        	inc z80_h
00393F  3               :
00393F  3  A0 00        	ldy #0
003941  3  B1 66        	lda (z80_hl),y 			; fetch byte from table.
003943  3  A0 08        	ldy #8
003945  3  91 68        	sta (z80_ix),y 			; set up coordinate.
003947  3               
003947  3  A9 C8        	lda #200 			; set initial coordinate off screen.
003949  3  A0 03        	ldy #3
00394B  3  91 68        	sta (z80_ix),y
00394D  3               
00394D  3  E6 66        	inc z80_l 			; move to next byte.
00394F  3  D0 02        	bne :+
003951  3  E6 67        	inc z80_h
003953  3               :
003953  3  A0 00        	ldy #0 				; fetch byte from table.
003955  3  B1 66        	lda (z80_hl),y
003957  3  A0 09        	ldy #9
003959  3  91 68        	sta (z80_ix),y 			; set up coordinate.
00395B  3               
00395B  3  E6 66        	inc z80_l 			; move to next byte.
00395D  3  D0 02        	bne :+
00395F  3  E6 67        	inc z80_h
003961  3               :
003961  3  A9 00        	lda #0				; zeroes in accumulator.
003963  3  A0 07        	ldy #7 				; reset frame number.
003965  3  91 68        	sta (z80_ix),y
003967  3  A0 0A        	ldy #10 			; reset direction.
003969  3  91 68        	sta (z80_ix),y
00396B  3  A0 0D        	ldy #13				; reset jump pointer low.
00396D  3  91 68        	sta (z80_ix),y
00396F  3  A0 0E        	ldy #14	 			; reset jump pointer high.
003971  3  91 68        	sta (z80_ix),y
003973  3               
003973  3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
003975  3  A0 10        	ldy #16
003977  3  91 68        	sta (z80_ix),y
003979  3               evis0:
003979  3  A5 69        	lda z80_i
00397B  3  48           	pha
00397C  3  A5 68        	lda z80_x
00397E  3  48           	pha
00397F  3  A5 67        	lda z80_h
003981  3  48           	pha
003982  3  A5 66        	lda z80_l
003984  3  48           	pha
003985  3               
003985  3  20 E3 3A     	jsr evnt09 			; perform event.
003988  3               
003988  3  68           	pla
003989  3  85 66        	sta z80_l
00398B  3  68           	pla
00398C  3  85 67        	sta z80_h
00398E  3  68           	pla
00398F  3  85 68        	sta z80_x
003991  3  68           	pla
003992  3  85 69        	sta z80_i
003994  3               
003994  3  18           	clc
003995  3  A5 68        	lda z80_x 			; distance to next odd/even entry.
003997  3  69 11        	adc #TABSIZ		 	; next sprite.
003999  3  85 68        	sta z80_x
00399B  3  90 02        	bcc :+
00399D  3  E6 69        	inc z80_i
00399F  3               :
00399F  3  60           	rts
0039A0  3               
0039A0  3               
0039A0  3               ;-------------------------------------
0039A0  3               ; Clear the play area window.
0039A0  3               ;-------------------------------------
0039A0  3               
0039A0  3               clw:
0039A0  3  AD 23 28     	lda wintop			; get coordinates of window.
0039A3  3  85 rr        	sta dispy			; put into dispx for calculation.
0039A5  3  AD 24 28     	lda winlft
0039A8  3  85 rr        	sta dispx
0039AA  3               
0039AA  3  AD 25 28     	lda winhgt			; height of window.
0039AD  3  85 rr        	sta rrow			; copy to b register.
0039AF  3               clw3:
0039AF  3  AD 26 28     	lda winwid 			; width of window.
0039B2  3  85 rr        	sta rcol
0039B4  3               clw2:
0039B4  3  20 B4 2C     	jsr gprad 			; get print address.
0039B7  3  A9 00        	lda #0				; zero byte to write.
0039B9  3  A2 07        	ldx #7				; pixel height of each cell.
0039BB  3               clw1:
0039BB  3  BC FC 2C     	ldy scrtab,x
0039BE  3  91 rr        	sta (scraddr),y 			; copy to screen.
0039C0  3  CA           	dex				; next screen row down.
0039C1  3  10 F8        	bpl clw1
0039C3  3               
0039C3  3  E6 rr        	inc dispx			; next column.
0039C5  3  C6 rr        	dec rcol			; one less to do.
0039C7  3  D0 EB        	bne clw2			; repeat for remaining columns.
0039C9  3               
0039C9  3  AD 24 28     	lda winlft			; get left edge.
0039CC  3  85 rr        	sta dispx 			; reset x.
0039CE  3  E6 rr        	inc dispy 			; next line down.
0039D0  3               
0039D0  3  C6 rr        	dec rrow
0039D2  3  D0 DB        	bne clw3			; repeat down the screen.
0039D4  3               
0039D4  3  AD 23 28     	lda wintop			; get coordinates of window.
0039D7  3  85 rr        	sta chary			; put into display position.
0039D9  3  AD 24 28     	lda winlft
0039DC  3  85 rr        	sta charx
0039DE  3  60           	rts
0039DF  3               
0039DF  3               
0039DF  3               ;----------------------------------------------------------
0039DF  3               ; Effects code.
0039DF  3               ; Ticker routine is called 25 times per second.
0039DF  3               ;
0039DF  3               ; HL = txtscr = left text screen address
0039DF  3               ; DE = txtscr+txtwid-1 = right text screen address
0039DF  3               ; BC = txtpos = text scroller position
0039DF  3               ;
0039DF  3               ;----------------------------------------------------------
0039DF  3               
0039DF  3               .if sflag
0039DF  3               scrly:
0039DF  3               	rts
0039DF  3               	.word txtscr         	; get left screen address.
0039DF  3               	sta scr_l
0039DF  3               	lda txtscr+1
0039DF  3               	sta scr_l+1
0039DF  3               	sta scr_r+1
0039DF  3               
0039DF  3               	stx xtmp
0039DF  3               
0039DF  3               	clc         		; get right screen address.
0039DF  3               	lda scr_l
0039DF  3               	adc txtwid
0039DF  3               	sta scr_r
0039DF  3               	dec scr_r
0039DF  3               scrly1:
0039DF  3               	ldy txtwid		; set txtwide
0039DF  3               	dey
0039DF  3               	clc
0039DF  3               scrly0:
0039DF  3               	lda (scr_l),y		; scroll 1 line
0039DF  3               	rol a
0039DF  3               	sta (scr_l),y
0039DF  3               	dey
0039DF  3               	bpl scrly0
0039DF  3               
0039DF  3               	clc			; point to next line
0039DF  3               	lda scr_l
0039DF  3               	adc #32
0039DF  3               	sta scr_l
0039DF  3               	bcc scrly1		; repeat 8 times
0039DF  3               
0039DF  3               	lda txtpos 		; get text pointer.
0039DF  3               	sta scr_txt
0039DF  3               	lda txtpos+1
0039DF  3               	sta scr_txt+1
0039DF  3               
0039DF  3               	ldy #0
0039DF  3               	lda (scr_txt),y 		; find character we're displaying.
0039DF  3               	and #127 		; remove end marker bit if applicable.
0039DF  3               	cmp #13			; is it newline?
0039DF  3               	bne scrly5 		; no, it's okay.
0039DF  3               	lda #32			; convert to a space instead.
0039DF  3               scrly5:
0039DF  3               	sta fntaddr		; calculate char address
0039DF  3               	lda #0
0039DF  3               	sta fntaddr+1
0039DF  3               	asl fntaddr  		; multiply char by 8.
0039DF  3               	rol fntaddr+1
0039DF  3               	asl fntaddr
0039DF  3               	rol fntaddr+1
0039DF  3               	asl fntaddr
0039DF  3               	rol fntaddr+1
0039DF  3               	lda fntaddr
0039DF  3               	clc
0039DF  3               	adc #<(FONT-256)
0039DF  3               	sta scrly3+1		; that's the low byte.
0039DF  3               	lda fntaddr+1
0039DF  3               	adc #>(FONT-256)
0039DF  3               	sta scrly3+2		; add displacement.
0039DF  3               
0039DF  3               	ldx #0
0039DF  3               scrly3:
0039DF  3               	lda $3333,x		; get image of char line.
0039DF  3               	and txtbit
0039DF  3               	beq scrly2		; don't plot pixel
0039DF  3               	ldy scrline,x
0039DF  3               	lda (scr_r),y
0039DF  3               	clc
0039DF  3               	ora #1
0039DF  3               	sta (scr_r),y		; plot pixel
0039DF  3               scrly2:
0039DF  3               	inx			; next line of char.
0039DF  3               	cpx #8
0039DF  3               	bne scrly3
0039DF  3               
0039DF  3               	lsr txtbit		; bit of text to display.
0039DF  3               	bcs :+
0039DF  3               	rts
0039DF  3               :
0039DF  3               	ldy #0
0039DF  3               	lda (scr_txt),y 	; what was the character?
0039DF  3               	asl a	  		; end of message?
0039DF  3               	bcs scrly4
0039DF  3               	inc txtpos
0039DF  3               	bne :+
0039DF  3               	inc txtpos+1
0039DF  3               :
0039DF  3               	jmp scrly6 		; not yet - continue.
0039DF  3               scrly4:
0039DF  3               	lda txtini 		; start of scrolling message.
0039DF  3               	sta txtpos
0039DF  3               	lda txtini+1
0039DF  3               	sta txtpos+1
0039DF  3               scrly6:
0039DF  3               	lda #128
0039DF  3               	sta txtbit
0039DF  3               	ldx xtmp
0039DF  3               	rts
0039DF  3               
0039DF  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0039DF  3               
0039DF  3               ;-------------------------------------------------------
0039DF  3               ; Entry TICKER command
0039DF  3               ;
0039DF  3               ; Entry:
0039DF  3               ;  z80_b = message nr
0039DF  3               ;  z80_c = width
0039DF  3               ;-------------------------------------------------------
0039DF  3               
0039DF  3               iscrly:
0039DF  3               	jsr prescr 		; set up display position.
0039DF  3               
0039DF  3               	lda #<msgdat 		; text messages.
0039DF  3               	sta z80_l
0039DF  3               	lda #>msgdat
0039DF  3               	sta z80_h
0039DF  3               
0039DF  3               	lda z80_c 		; width.
0039DF  3               	sec
0039DF  3               	sbc #1			; subtract one.
0039DF  3               	cmp #32 		; is it between 1 and 32?
0039DF  3               	bcc :+
0039DF  3               	lda #$60
0039DF  3               	jmp iscrl0		; no, disable messages.
0039DF  3               :
0039DF  3               	ldx z80_b		; message number.
0039DF  3               	jsr getwrd 		; find message start.
0039DF  3               
0039DF  3               	lda z80_l		; set initial text position.
0039DF  3               	sta txtini
0039DF  3               	lda z80_h
0039DF  3               	sta txtini+1
0039DF  3               
0039DF  3               	lda #$ad		; code for lda adrr
0039DF  3               iscrl0:
0039DF  3               	sta scrly		; enable/disable scrolling routine.
0039DF  3               
0039DF  3               	jsr prescr 		; set up display position.
0039DF  3               	jsr gprad 		; get print address.
0039DF  3               
0039DF  3               	lda scraddr 		; set text screen address.
0039DF  3               	sta txtscr
0039DF  3               	lda scraddr+1
0039DF  3               	sta txtscr+1
0039DF  3               
0039DF  3               	lda z80_c		; width.
0039DF  3               	sta txtwid		; set width in working storage.
0039DF  3               
0039DF  3               	lda #128 		; start with leftmost bit.
0039DF  3               	sta txtbit
0039DF  3               
0039DF  3               	jmp scrly4
0039DF  3               .endif
0039DF  3               
0039DF  3               ;------------------------------------------------------------------
0039DF  3               ; Dig routine, conditional assembly depending on dflag
0039DF  3               ;------------------------------------------------------------------
0039DF  3               .if dflag
0039DF  3               dig:
0039DF  3               	and #3
0039DF  3               	beq digr		; dig right
0039DF  3               	cmp #1
0039DF  3               	beq digl		; dig left
0039DF  3               	cmp #2
0039DF  3               	beq digd		; dig down
0039DF  3               
0039DF  3               ; Dig up.
0039DF  3               
0039DF  3               digu:				; dig up
0039DF  3               	ldy #8
0039DF  3               	lda (z80_ix),y
0039DF  3               	sec
0039DF  3               	sbc #2
0039DF  3               	sta dispy		; set y
0039DF  3               
0039DF  3               	iny
0039DF  3               	lda (z80_ix),y
0039DF  3               	sta dispx		; set x
0039DF  3               	jmp digv
0039DF  3               
0039DF  3               ; Dig down.
0039DF  3               
0039DF  3               digd:
0039DF  3               	ldy #9
0039DF  3               	lda (z80_ix),y
0039DF  3               	sta dispx		; set y
0039DF  3               
0039DF  3               	dey
0039DF  3               	clc
0039DF  3               	lda (z80_ix),y
0039DF  3               	adc #16
0039DF  3               	sta dispy		; set y
0039DF  3               	jmp digv
0039DF  3               
0039DF  3               ; Dig left.
0039DF  3               
0039DF  3               digl:
0039DF  3               	ldy #8
0039DF  3               	lda (z80_ix),y
0039DF  3               	sta dispy		; set y
0039DF  3               
0039DF  3               	iny
0039DF  3               	lda (z80_ix),y
0039DF  3               	sec
0039DF  3               	sbc #2			; x=x-2
0039DF  3               	sta dispx		; set x
0039DF  3               	jmp digh
0039DF  3               
0039DF  3               ; Dig right.
0039DF  3               
0039DF  3               digr:
0039DF  3               	ldy #8
0039DF  3               	lda (z80_ix),y
0039DF  3               	sta dispy		; set y
0039DF  3               
0039DF  3               	iny
0039DF  3               	lda (z80_ix),y
0039DF  3               	clc
0039DF  3               	adc #16
0039DF  3               	sta dispx		; set x+16
0039DF  3               	jmp digh
0039DF  3               
0039DF  3               ; Vertical digging
0039DF  3               
0039DF  3               digv:
0039DF  3               	jsr tstbl		; check blocktype in MAP
0039DF  3               	jsr fdchk		; test if FODDER
0039DF  3               
0039DF  3               	clc
0039DF  3               	lda dispx		; look 1 cell down
0039DF  3               	adc #8
0039DF  3               	sta dispx
0039DF  3               	jsr tstbl		; check blocktype in MAP
0039DF  3               	jsr fdchk
0039DF  3               	lda dispx
0039DF  3               	and #7
0039DF  3               	bne :+
0039DF  3               	rts
0039DF  3               :
0039DF  3               	clc
0039DF  3               	lda dispx		; look 1 cell down
0039DF  3               	adc #8
0039DF  3               	sta dispx
0039DF  3               	jsr tstbl		; check blocktype in MAP
0039DF  3               	jmp fdchk
0039DF  3               
0039DF  3               ; Horizontal digging
0039DF  3               
0039DF  3               digh:
0039DF  3               	jsr tstbl		; check blocktype in MAP
0039DF  3               	jsr fdchk		; test if FODDER
0039DF  3               
0039DF  3               	clc
0039DF  3               	lda dispy		; look 1 cell down
0039DF  3               	adc #8
0039DF  3               	sta dispy
0039DF  3               	jsr tstbl		; check blocktype in MAP
0039DF  3               	jsr fdchk
0039DF  3               	lda dispy
0039DF  3               	and #7
0039DF  3               	bne :+
0039DF  3               	rts
0039DF  3               :
0039DF  3               	clc
0039DF  3               	lda dispy		; look 1 cell down
0039DF  3               	adc #8
0039DF  3               	sta dispy
0039DF  3               	jsr tstbl		; check blocktype in MAP
0039DF  3               	jmp fdchk
0039DF  3               
0039DF  3               digcnt:	.byte 0
0039DF  3               
0039DF  3               .endif
0039DF  3               
0039DF  3               ;------------------------------------------------------------------
0039DF  3               ; Sprite table
0039DF  3               ;------------------------------------------------------------------
0039DF  3               
0039DF  3               
0039DF  3               ; ix+0  = type.
0039DF  3               ; ix+1  = sprite image number.
0039DF  3               ; ix+2  = frame.
0039DF  3               ; ix+3  = y coord.
0039DF  3               ; ix+4  = x coord.
0039DF  3               
0039DF  3               ; ix+5  = new type.
0039DF  3               ; ix+6  = new image number.
0039DF  3               ; ix+7  = new frame.
0039DF  3               ; ix+8  = new y coord.
0039DF  3               ; ix+9  = new x coord.
0039DF  3               
0039DF  3               ; ix+10 = direction.
0039DF  3               ; ix+11 = parameter 1.
0039DF  3               ; ix+12 = parameter 2.
0039DF  3               ; ix+13 = jump pointer low.
0039DF  3               ; ix+14 = jump pointer high.
0039DF  3               ; ix+15 = data pointer low.
0039DF  3               ; ix+16 = data pointer high.
0039DF  3               
0039DF  3               ; block NUMSPR * TABSIZ,255
0039DF  3               
0039DF  3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0039E3  3  FF FF FF FF  
0039E7  3  FF FF FF FF  
003AAB  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003AAF  3  FF FF FF 00  
003AB3  3  C0 78 00 00  
003ABC  3  07           roomtb:	.byte 7                      ; start room map offset.
003ABD  3               
003ABD  3               ; User routine.  Put your own code in here to be called with USER instruction.
003ABD  3               ; if USER has an argument it will be passed in the accumulator.
003ABD  3               
003ABD  3               user:
003ABD  3               	.include "user.inc"
003ABD  4  60           	rts
003ABE  4               
003ABE  3               
003ABE  3               setfgcol:
003ABE  3  29 07        	and #7
003AC0  3  8D CD 3A     	sta fcolour
003AC3  3  60           	rts
003AC4  3               
003AC4  3               setbgcol:
003AC4  3  29 07        	and #7
003AC6  3  18           	clc
003AC7  3  69 10        	adc #16
003AC9  3  8D CE 3A     	sta bcolour
003ACC  3  60           	rts
003ACD  3               
003ACD  3  07           fcolour:	.byte t_white
003ACE  3  17           bcolour:	.byte g_white
003ACF  3               
003ACF  3               ; Everything below here will be generated by the editors.
003ACF  3               
003ACF  3  60                   rts
003AD0  3               WINDOWTOP = 1
003AD0  3               WINDOWLFT = 1
003AD0  3               WINDOWHGT = 22
003AD0  3               WINDOWWID = 30 ;a
003AD0  3               MAPWID = 3
003AD0  3  FF FF FF             .byte 255,255,255
003AD3  3               mapdat:
003AD3  3  FF 00 FF             .byte 255,0,255
003AD6  3  FF FF FF             .byte 255,255,255
003AD9  3  01           stmap:  .byte 1
003ADA  3               
003ADA  3               evnt00:
003ADA  3  60                   rts
003ADB  3               evnt01:
003ADB  3  60                   rts
003ADC  3               evnt02:
003ADC  3  60                   rts
003ADD  3               evnt03:
003ADD  3  60                   rts
003ADE  3               evnt04:
003ADE  3  60                   rts
003ADF  3               evnt05:
003ADF  3  60                   rts
003AE0  3               evnt06:
003AE0  3  60                   rts
003AE1  3               evnt07:
003AE1  3  60                   rts
003AE2  3               evnt08:
003AE2  3  60                   rts
003AE3  3               evnt09:
003AE3  3  60                   rts
003AE4  3               evnt10:
003AE4  3  A9 00                lda #0		; AT
003AE6  3  85 rr                sta chary
003AE8  3  A9 01                lda #1
003AEA  3  85 rr                sta charx
003AEC  3  A9 01                lda #1		; PRINTMODE
003AEE  3  85 rr                sta prtmod
003AF0  3  A9 00                lda #0		; PRINT
003AF2  3  20 5B 31             jsr dmsg
003AF5  3  A9 00                lda #0		; PRINTMODE
003AF7  3  85 rr                sta prtmod
003AF9  3  A9 03                lda #3		; AT
003AFB  3  85 rr                sta chary
003AFD  3  A9 01                lda #1
003AFF  3  85 rr                sta charx
003B01  3  A9 01                lda #1		; PRINT
003B03  3  20 5B 31             jsr dmsg
003B06  3  A9 05                lda #5		; AT
003B08  3  85 rr                sta chary
003B0A  3  A9 01                lda #1
003B0C  3  85 rr                sta charx
003B0E  3  A9 02                lda #2		; PRINT
003B10  3  20 5B 31             jsr dmsg
003B13  3  A9 7B                lda #123
003B15  3  85 rr                sta varl
003B17  3  A5 rr                lda varl
003B19  3  A5 rr                lda varl	; DISPLAY
003B1B  3  20 78 36             jsr disply
003B1E  3  A9 05                lda #5		; AT
003B20  3  85 rr                sta chary
003B22  3  A9 12                lda #18
003B24  3  85 rr                sta charx
003B26  3  A9 7B                lda #123
003B28  3  C5 rr                cmp varl
003B2A  3  F0 03                beq *+5
003B2C  3  4C 37 3B             jmp k00185
003B2F  3  A9 03                lda #3		; PRINT
003B31  3  20 5B 31             jsr dmsg
003B34  3  4C 3C 3B             jmp k00195
003B37  3  A9 04        k00185: lda #4		; PRINT
003B39  3  20 5B 31             jsr dmsg
003B3C  3  A9 06        k00195: lda #6		; AT
003B3E  3  85 rr                sta chary
003B40  3  A9 01                lda #1
003B42  3  85 rr                sta charx
003B44  3  A9 05                lda #5		; PRINT
003B46  3  20 5B 31             jsr dmsg
003B49  3  A9 7B                lda #123
003B4B  3  85 rr                sta varl
003B4D  3  A5 rr                lda varl
003B4F  3  4A                   lsr a
003B50  3  85 rr                sta varl
003B52  3  A5 rr                lda varl	; DISPLAY
003B54  3  20 78 36             jsr disply
003B57  3  A9 06                lda #6		; AT
003B59  3  85 rr                sta chary
003B5B  3  A9 12                lda #18
003B5D  3  85 rr                sta charx
003B5F  3  A9 3D                lda #61
003B61  3  C5 rr                cmp varl
003B63  3  F0 03                beq *+5
003B65  3  4C 70 3B             jmp k00305
003B68  3  A9 06                lda #6		; PRINT
003B6A  3  20 5B 31             jsr dmsg
003B6D  3  4C 75 3B             jmp k00316
003B70  3  A9 07        k00305: lda #7		; PRINT
003B72  3  20 5B 31             jsr dmsg
003B75  3  A9 07        k00316: lda #7		; AT
003B77  3  85 rr                sta chary
003B79  3  A9 01                lda #1
003B7B  3  85 rr                sta charx
003B7D  3  A9 08                lda #8		; PRINT
003B7F  3  20 5B 31             jsr dmsg
003B82  3  A9 7B                lda #123
003B84  3  85 rr                sta varl
003B86  3  A5 rr                lda varl
003B88  3  85 65                sta z80_d
003B8A  3  A9 03                lda #3
003B8C  3  85 64                sta z80_e
003B8E  3  20 A5 2A             jsr idiv
003B91  3  A5 65                lda z80_d
003B93  3  85 rr                sta varl
003B95  3  A5 rr                lda varl	; DISPLAY
003B97  3  20 78 36             jsr disply
003B9A  3  A9 07                lda #7		; AT
003B9C  3  85 rr                sta chary
003B9E  3  A9 12                lda #18
003BA0  3  85 rr                sta charx
003BA2  3  A9 29                lda #41
003BA4  3  C5 rr                cmp varl
003BA6  3  F0 03                beq *+5
003BA8  3  4C B3 3B             jmp k00444
003BAB  3  A9 09                lda #9		; PRINT
003BAD  3  20 5B 31             jsr dmsg
003BB0  3  4C B8 3B             jmp k00455
003BB3  3  A9 0A        k00444: lda #10		; PRINT
003BB5  3  20 5B 31             jsr dmsg
003BB8  3  A9 08        k00455: lda #8		; AT
003BBA  3  85 rr                sta chary
003BBC  3  A9 01                lda #1
003BBE  3  85 rr                sta charx
003BC0  3  A9 0B                lda #11		; PRINT
003BC2  3  20 5B 31             jsr dmsg
003BC5  3  A9 7B                lda #123
003BC7  3  85 rr                sta varl
003BC9  3  A5 rr                lda varl
003BCB  3  4A                   lsr a
003BCC  3  4A                   lsr a
003BCD  3  85 rr                sta varl
003BCF  3  A5 rr                lda varl	; DISPLAY
003BD1  3  20 78 36             jsr disply
003BD4  3  A9 08                lda #8		; AT
003BD6  3  85 rr                sta chary
003BD8  3  A9 12                lda #18
003BDA  3  85 rr                sta charx
003BDC  3  A9 1E                lda #30
003BDE  3  C5 rr                cmp varl
003BE0  3  F0 03                beq *+5
003BE2  3  4C ED 3B             jmp k00569
003BE5  3  A9 0C                lda #12		; PRINT
003BE7  3  20 5B 31             jsr dmsg
003BEA  3  4C F2 3B             jmp k00580
003BED  3  A9 0D        k00569: lda #13		; PRINT
003BEF  3  20 5B 31             jsr dmsg
003BF2  3  A9 09        k00580: lda #9		; AT
003BF4  3  85 rr                sta chary
003BF6  3  A9 01                lda #1
003BF8  3  85 rr                sta charx
003BFA  3  A9 0E                lda #14		; PRINT
003BFC  3  20 5B 31             jsr dmsg
003BFF  3  A9 7B                lda #123
003C01  3  85 rr                sta varl
003C03  3  A5 rr                lda varl
003C05  3  85 65                sta z80_d
003C07  3  A9 05                lda #5
003C09  3  85 64                sta z80_e
003C0B  3  20 A5 2A             jsr idiv
003C0E  3  A5 65                lda z80_d
003C10  3  85 rr                sta varl
003C12  3  A5 rr                lda varl	; DISPLAY
003C14  3  20 78 36             jsr disply
003C17  3  A9 09                lda #9		; AT
003C19  3  85 rr                sta chary
003C1B  3  A9 12                lda #18
003C1D  3  85 rr                sta charx
003C1F  3  A9 18                lda #24
003C21  3  C5 rr                cmp varl
003C23  3  F0 03                beq *+5
003C25  3  4C 30 3C             jmp k00709
003C28  3  A9 0F                lda #15		; PRINT
003C2A  3  20 5B 31             jsr dmsg
003C2D  3  4C 35 3C             jmp k00719
003C30  3  A9 10        k00709: lda #16		; PRINT
003C32  3  20 5B 31             jsr dmsg
003C35  3  A9 0A        k00719: lda #10		; AT
003C37  3  85 rr                sta chary
003C39  3  A9 01                lda #1
003C3B  3  85 rr                sta charx
003C3D  3  A9 11                lda #17		; PRINT
003C3F  3  20 5B 31             jsr dmsg
003C42  3  A9 7B                lda #123
003C44  3  85 rr                sta varl
003C46  3  A5 rr                lda varl
003C48  3  85 65                sta z80_d
003C4A  3  A9 06                lda #6
003C4C  3  85 64                sta z80_e
003C4E  3  20 A5 2A             jsr idiv
003C51  3  A5 65                lda z80_d
003C53  3  85 rr                sta varl
003C55  3  A5 rr                lda varl	; DISPLAY
003C57  3  20 78 36             jsr disply
003C5A  3  A9 0A                lda #10		; AT
003C5C  3  85 rr                sta chary
003C5E  3  A9 12                lda #18
003C60  3  85 rr                sta charx
003C62  3  A9 14                lda #20
003C64  3  C5 rr                cmp varl
003C66  3  F0 03                beq *+5
003C68  3  4C 73 3C             jmp k00849
003C6B  3  A9 12                lda #18		; PRINT
003C6D  3  20 5B 31             jsr dmsg
003C70  3  4C 78 3C             jmp k00859
003C73  3  A9 13        k00849: lda #19		; PRINT
003C75  3  20 5B 31             jsr dmsg
003C78  3  A9 0B        k00859: lda #11		; AT
003C7A  3  85 rr                sta chary
003C7C  3  A9 01                lda #1
003C7E  3  85 rr                sta charx
003C80  3  A9 14                lda #20		; PRINT
003C82  3  20 5B 31             jsr dmsg
003C85  3  A9 7B                lda #123
003C87  3  85 rr                sta varl
003C89  3  A5 rr                lda varl
003C8B  3  85 65                sta z80_d
003C8D  3  A9 07                lda #7
003C8F  3  85 64                sta z80_e
003C91  3  20 A5 2A             jsr idiv
003C94  3  A5 65                lda z80_d
003C96  3  85 rr                sta varl
003C98  3  A5 rr                lda varl	; DISPLAY
003C9A  3  20 78 36             jsr disply
003C9D  3  A9 0B                lda #11		; AT
003C9F  3  85 rr                sta chary
003CA1  3  A9 12                lda #18
003CA3  3  85 rr                sta charx
003CA5  3  A9 11                lda #17
003CA7  3  C5 rr                cmp varl
003CA9  3  F0 03                beq *+5
003CAB  3  4C B6 3C             jmp k00989
003CAE  3  A9 15                lda #21		; PRINT
003CB0  3  20 5B 31             jsr dmsg
003CB3  3  4C BB 3C             jmp k00999
003CB6  3  A9 16        k00989: lda #22		; PRINT
003CB8  3  20 5B 31             jsr dmsg
003CBB  3  A9 0C        k00999: lda #12		; AT
003CBD  3  85 rr                sta chary
003CBF  3  A9 01                lda #1
003CC1  3  85 rr                sta charx
003CC3  3  A9 17                lda #23		; PRINT
003CC5  3  20 5B 31             jsr dmsg
003CC8  3  A9 7B                lda #123
003CCA  3  85 rr                sta varl
003CCC  3  A5 rr                lda varl
003CCE  3  4A                   lsr a
003CCF  3  4A                   lsr a
003CD0  3  4A                   lsr a
003CD1  3  85 rr                sta varl
003CD3  3  A5 rr                lda varl	; DISPLAY
003CD5  3  20 78 36             jsr disply
003CD8  3  A9 0C                lda #12		; AT
003CDA  3  85 rr                sta chary
003CDC  3  A9 12                lda #18
003CDE  3  85 rr                sta charx
003CE0  3  A9 0F                lda #15
003CE2  3  C5 rr                cmp varl
003CE4  3  F0 03                beq *+5
003CE6  3  4C F1 3C             jmp k01118
003CE9  3  A9 18                lda #24		; PRINT
003CEB  3  20 5B 31             jsr dmsg
003CEE  3  4C F6 3C             jmp k01128
003CF1  3  A9 19        k01118: lda #25		; PRINT
003CF3  3  20 5B 31             jsr dmsg
003CF6  3  A9 0D        k01128: lda #13		; AT
003CF8  3  85 rr                sta chary
003CFA  3  A9 01                lda #1
003CFC  3  85 rr                sta charx
003CFE  3  A9 1A                lda #26		; PRINT
003D00  3  20 5B 31             jsr dmsg
003D03  3  A9 7B                lda #123
003D05  3  85 rr                sta varl
003D07  3  A5 rr                lda varl
003D09  3  85 65                sta z80_d
003D0B  3  A9 09                lda #9
003D0D  3  85 64                sta z80_e
003D0F  3  20 A5 2A             jsr idiv
003D12  3  A5 65                lda z80_d
003D14  3  85 rr                sta varl
003D16  3  A5 rr                lda varl	; DISPLAY
003D18  3  20 78 36             jsr disply
003D1B  3  A9 0D                lda #13		; AT
003D1D  3  85 rr                sta chary
003D1F  3  A9 12                lda #18
003D21  3  85 rr                sta charx
003D23  3  A9 0D                lda #13
003D25  3  C5 rr                cmp varl
003D27  3  F0 03                beq *+5
003D29  3  4C 34 3D             jmp k01258
003D2C  3  A9 1B                lda #27		; PRINT
003D2E  3  20 5B 31             jsr dmsg
003D31  3  4C 39 3D             jmp k01268
003D34  3  A9 1C        k01258: lda #28		; PRINT
003D36  3  20 5B 31             jsr dmsg
003D39  3  A9 0E        k01268: lda #14		; AT
003D3B  3  85 rr                sta chary
003D3D  3  A9 01                lda #1
003D3F  3  85 rr                sta charx
003D41  3  A9 1D                lda #29		; PRINT
003D43  3  20 5B 31             jsr dmsg
003D46  3  A9 7B                lda #123
003D48  3  85 rr                sta varl
003D4A  3  A5 rr                lda varl
003D4C  3  85 65                sta z80_d
003D4E  3  A9 0A                lda #10
003D50  3  85 64                sta z80_e
003D52  3  20 A5 2A             jsr idiv
003D55  3  A5 65                lda z80_d
003D57  3  85 rr                sta varl
003D59  3  A5 rr                lda varl	; DISPLAY
003D5B  3  20 78 36             jsr disply
003D5E  3  A9 0E                lda #14		; AT
003D60  3  85 rr                sta chary
003D62  3  A9 12                lda #18
003D64  3  85 rr                sta charx
003D66  3  A9 0C                lda #12
003D68  3  C5 rr                cmp varl
003D6A  3  F0 03                beq *+5
003D6C  3  4C 77 3D             jmp k01398
003D6F  3  A9 1E                lda #30		; PRINT
003D71  3  20 5B 31             jsr dmsg
003D74  3  4C 7C 3D             jmp k01408
003D77  3  A9 1F        k01398: lda #31		; PRINT
003D79  3  20 5B 31             jsr dmsg
003D7C  3  A9 0F        k01408: lda #15		; AT
003D7E  3  85 rr                sta chary
003D80  3  A9 01                lda #1
003D82  3  85 rr                sta charx
003D84  3  A9 20                lda #32		; PRINT
003D86  3  20 5B 31             jsr dmsg
003D89  3  A9 7B                lda #123
003D8B  3  85 rr                sta varl
003D8D  3  A5 rr                lda varl
003D8F  3  85 65                sta z80_d
003D91  3  A9 0B                lda #11
003D93  3  85 64                sta z80_e
003D95  3  20 A5 2A             jsr idiv
003D98  3  A5 65                lda z80_d
003D9A  3  85 rr                sta varl
003D9C  3  A5 rr                lda varl	; DISPLAY
003D9E  3  20 78 36             jsr disply
003DA1  3  A9 0F                lda #15		; AT
003DA3  3  85 rr                sta chary
003DA5  3  A9 12                lda #18
003DA7  3  85 rr                sta charx
003DA9  3  A9 0B                lda #11
003DAB  3  C5 rr                cmp varl
003DAD  3  F0 03                beq *+5
003DAF  3  4C BA 3D             jmp k01538
003DB2  3  A9 21                lda #33		; PRINT
003DB4  3  20 5B 31             jsr dmsg
003DB7  3  4C BF 3D             jmp k01549
003DBA  3  A9 22        k01538: lda #34		; PRINT
003DBC  3  20 5B 31             jsr dmsg
003DBF  3  A9 10        k01549: lda #16		; AT
003DC1  3  85 rr                sta chary
003DC3  3  A9 01                lda #1
003DC5  3  85 rr                sta charx
003DC7  3  A9 23                lda #35		; PRINT
003DC9  3  20 5B 31             jsr dmsg
003DCC  3  A9 7B                lda #123
003DCE  3  85 rr                sta varl
003DD0  3  A5 rr                lda varl
003DD2  3  85 65                sta z80_d
003DD4  3  A9 0C                lda #12
003DD6  3  85 64                sta z80_e
003DD8  3  20 A5 2A             jsr idiv
003DDB  3  A5 65                lda z80_d
003DDD  3  85 rr                sta varl
003DDF  3  A5 rr                lda varl	; DISPLAY
003DE1  3  20 78 36             jsr disply
003DE4  3  A9 10                lda #16		; AT
003DE6  3  85 rr                sta chary
003DE8  3  A9 12                lda #18
003DEA  3  85 rr                sta charx
003DEC  3  A9 0A                lda #10
003DEE  3  C5 rr                cmp varl
003DF0  3  F0 03                beq *+5
003DF2  3  4C FD 3D             jmp k01678
003DF5  3  A9 24                lda #36		; PRINT
003DF7  3  20 5B 31             jsr dmsg
003DFA  3  4C 02 3E             jmp k01689
003DFD  3  A9 25        k01678: lda #37		; PRINT
003DFF  3  20 5B 31             jsr dmsg
003E02  3  A9 11        k01689: lda #17		; AT
003E04  3  85 rr                sta chary
003E06  3  A9 01                lda #1
003E08  3  85 rr                sta charx
003E0A  3  A9 26                lda #38		; PRINT
003E0C  3  20 5B 31             jsr dmsg
003E0F  3  A9 7B                lda #123
003E11  3  85 rr                sta varl
003E13  3  A5 rr                lda varl
003E15  3  85 65                sta z80_d
003E17  3  A9 0D                lda #13
003E19  3  85 64                sta z80_e
003E1B  3  20 A5 2A             jsr idiv
003E1E  3  A5 65                lda z80_d
003E20  3  85 rr                sta varl
003E22  3  A5 rr                lda varl	; DISPLAY
003E24  3  20 78 36             jsr disply
003E27  3  A9 11                lda #17		; AT
003E29  3  85 rr                sta chary
003E2B  3  A9 12                lda #18
003E2D  3  85 rr                sta charx
003E2F  3  A9 09                lda #9
003E31  3  C5 rr                cmp varl
003E33  3  F0 03                beq *+5
003E35  3  4C 40 3E             jmp k01818
003E38  3  A9 27                lda #39		; PRINT
003E3A  3  20 5B 31             jsr dmsg
003E3D  3  4C 45 3E             jmp k01829
003E40  3  A9 28        k01818: lda #40		; PRINT
003E42  3  20 5B 31             jsr dmsg
003E45  3  A9 12        k01829: lda #18		; AT
003E47  3  85 rr                sta chary
003E49  3  A9 01                lda #1
003E4B  3  85 rr                sta charx
003E4D  3  A9 29                lda #41		; PRINT
003E4F  3  20 5B 31             jsr dmsg
003E52  3  A9 7B                lda #123
003E54  3  85 rr                sta varl
003E56  3  A5 rr                lda varl
003E58  3  85 65                sta z80_d
003E5A  3  A9 0E                lda #14
003E5C  3  85 64                sta z80_e
003E5E  3  20 A5 2A             jsr idiv
003E61  3  A5 65                lda z80_d
003E63  3  85 rr                sta varl
003E65  3  A5 rr                lda varl	; DISPLAY
003E67  3  20 78 36             jsr disply
003E6A  3  A9 12                lda #18		; AT
003E6C  3  85 rr                sta chary
003E6E  3  A9 12                lda #18
003E70  3  85 rr                sta charx
003E72  3  A9 08                lda #8
003E74  3  C5 rr                cmp varl
003E76  3  F0 03                beq *+5
003E78  3  4C 83 3E             jmp k01958
003E7B  3  A9 2A                lda #42		; PRINT
003E7D  3  20 5B 31             jsr dmsg
003E80  3  4C 88 3E             jmp k01969
003E83  3  A9 2B        k01958: lda #43		; PRINT
003E85  3  20 5B 31             jsr dmsg
003E88  3  A9 13        k01969: lda #19		; AT
003E8A  3  85 rr                sta chary
003E8C  3  A9 01                lda #1
003E8E  3  85 rr                sta charx
003E90  3  A9 2C                lda #44		; PRINT
003E92  3  20 5B 31             jsr dmsg
003E95  3  A9 7B                lda #123
003E97  3  85 rr                sta varl
003E99  3  A5 rr                lda varl
003E9B  3  4A                   lsr a
003E9C  3  4A                   lsr a
003E9D  3  4A                   lsr a
003E9E  3  4A                   lsr a
003E9F  3  85 rr                sta varl
003EA1  3  A5 rr                lda varl	; DISPLAY
003EA3  3  20 78 36             jsr disply
003EA6  3  A9 13                lda #19		; AT
003EA8  3  85 rr                sta chary
003EAA  3  A9 12                lda #18
003EAC  3  85 rr                sta charx
003EAE  3  A9 07                lda #7
003EB0  3  C5 rr                cmp varl
003EB2  3  F0 03                beq *+5
003EB4  3  4C BF 3E             jmp k02091
003EB7  3  A9 2D                lda #45		; PRINT
003EB9  3  20 5B 31             jsr dmsg
003EBC  3  4C C4 3E             jmp k02101
003EBF  3  A9 2E        k02091: lda #46		; PRINT
003EC1  3  20 5B 31             jsr dmsg
003EC4  3  A9 14        k02101: lda #20		; AT
003EC6  3  85 rr                sta chary
003EC8  3  A9 01                lda #1
003ECA  3  85 rr                sta charx
003ECC  3  A9 2F                lda #47		; PRINT
003ECE  3  20 5B 31             jsr dmsg
003ED1  3  A9 7B                lda #123
003ED3  3  85 rr                sta varl
003ED5  3  A5 rr                lda varl
003ED7  3  4A                   lsr a
003ED8  3  4A                   lsr a
003ED9  3  4A                   lsr a
003EDA  3  4A                   lsr a
003EDB  3  4A                   lsr a
003EDC  3  85 rr                sta varl
003EDE  3  A5 rr                lda varl	; DISPLAY
003EE0  3  20 78 36             jsr disply
003EE3  3  A9 14                lda #20		; AT
003EE5  3  85 rr                sta chary
003EE7  3  A9 12                lda #18
003EE9  3  85 rr                sta charx
003EEB  3  A9 03                lda #3
003EED  3  C5 rr                cmp varl
003EEF  3  F0 03                beq *+5
003EF1  3  4C FC 3E             jmp k02226
003EF4  3  A9 30                lda #48		; PRINT
003EF6  3  20 5B 31             jsr dmsg
003EF9  3  4C 01 3F             jmp k02237
003EFC  3  A9 31        k02226: lda #49		; PRINT
003EFE  3  20 5B 31             jsr dmsg
003F01  3  A9 15        k02237: lda #21		; AT
003F03  3  85 rr                sta chary
003F05  3  A9 01                lda #1
003F07  3  85 rr                sta charx
003F09  3  A9 32                lda #50		; PRINT
003F0B  3  20 5B 31             jsr dmsg
003F0E  3  A9 7B                lda #123
003F10  3  85 rr                sta varl
003F12  3  A5 rr                lda varl
003F14  3  4A                   lsr a
003F15  3  4A                   lsr a
003F16  3  4A                   lsr a
003F17  3  4A                   lsr a
003F18  3  4A                   lsr a
003F19  3  4A                   lsr a
003F1A  3  85 rr                sta varl
003F1C  3  A5 rr                lda varl	; DISPLAY
003F1E  3  20 78 36             jsr disply
003F21  3  A9 15                lda #21		; AT
003F23  3  85 rr                sta chary
003F25  3  A9 12                lda #18
003F27  3  85 rr                sta charx
003F29  3  A9 01                lda #1
003F2B  3  C5 rr                cmp varl
003F2D  3  F0 03                beq *+5
003F2F  3  4C 3A 3F             jmp k02366
003F32  3  A9 33                lda #51		; PRINT
003F34  3  20 5B 31             jsr dmsg
003F37  3  4C 3F 3F             jmp k02376
003F3A  3  A9 34        k02366: lda #52		; PRINT
003F3C  3  20 5B 31             jsr dmsg
003F3F  3  A9 16        k02376: lda #22		; AT
003F41  3  85 rr                sta chary
003F43  3  A9 01                lda #1
003F45  3  85 rr                sta charx
003F47  3  A9 35                lda #53		; PRINT
003F49  3  20 5B 31             jsr dmsg
003F4C  3  A9 7B                lda #123
003F4E  3  85 rr                sta varl
003F50  3  A5 rr                lda varl
003F52  3  0A                   asl a
003F53  3  2A                   rol a
003F54  3  29 01                and #1
003F56  3  85 rr                sta varl
003F58  3  A5 rr                lda varl	; DISPLAY
003F5A  3  20 78 36             jsr disply
003F5D  3  A9 16                lda #22		; AT
003F5F  3  85 rr                sta chary
003F61  3  A9 12                lda #18
003F63  3  85 rr                sta charx
003F65  3  A9 00                lda #0
003F67  3  C5 rr                cmp varl
003F69  3  F0 03                beq *+5
003F6B  3  4C 76 3F             jmp k02495
003F6E  3  A9 36                lda #54		; PRINT
003F70  3  20 5B 31             jsr dmsg
003F73  3  4C 7B 3F             jmp k02505
003F76  3  A9 37        k02495: lda #55		; PRINT
003F78  3  20 5B 31             jsr dmsg
003F7B  3  20 1A 45     k02505: jsr prskey	; WAITKEY
003F7E  3  60                   rts
003F7F  3               evnt11:
003F7F  3  60                   rts
003F80  3               evnt12:
003F80  3  20 CE 44             jsr cls		; CLS
003F83  3  60                   rts
003F84  3               evnt13:
003F84  3  60                   rts
003F85  3               evnt14:
003F85  3  60                   rts
003F86  3               evnt15:
003F86  3  60                   rts
003F87  3               evnt16:
003F87  3  60                   rts
003F88  3               evnt17:
003F88  3  60                   rts
003F89  3               evnt18:
003F89  3  60                   rts
003F8A  3               evnt19:
003F8A  3  60                   rts
003F8B  3               evnt20:
003F8B  3  60                   rts
003F8C  3  60           ptcusr: rts
003F8D  3               msgdat:
003F8D  3  43 41 4C 43          .byte "CALCULATIONS TEST",186
003F91  3  55 4C 41 54  
003F95  3  49 4F 4E 53  
003F9F  3  44 49 56 49          .byte "DIVISION",186
003FA3  3  53 49 4F 4E  
003FA7  3  BA           
003FA8  3  31 32 33 20          .byte "123 /  1 =",160
003FAC  3  2F 20 20 31  
003FB0  3  20 3D A0     
003FB3  3  4F CB                .byte "O",203
003FB5  3  4E 4F 54 20          .byte "NOT O",203
003FB9  3  4F CB        
003FBB  3  31 32 33 20          .byte "123 /  2 =",160
003FBF  3  2F 20 20 32  
003FC3  3  20 3D A0     
003FC6  3  4F CB                .byte "O",203
003FC8  3  4E 4F 54 20          .byte "NOT O",203
003FCC  3  4F CB        
003FCE  3  31 32 33 20          .byte "123 /  3 =",160
003FD2  3  2F 20 20 33  
003FD6  3  20 3D A0     
003FD9  3  4F CB                .byte "O",203
003FDB  3  4E 4F 54 20          .byte "NOT O",203
003FDF  3  4F CB        
003FE1  3  31 32 33 20          .byte "123 /  4 =",160
003FE5  3  2F 20 20 34  
003FE9  3  20 3D A0     
003FEC  3  4F CB                .byte "O",203
003FEE  3  4E 4F 54 20          .byte "NOT O",203
003FF2  3  4F CB        
003FF4  3  31 32 33 20          .byte "123 /  5 =",160
003FF8  3  2F 20 20 35  
003FFC  3  20 3D A0     
003FFF  3  4F CB                .byte "O",203
004001  3  4E 4F 54 20          .byte "NOT O",203
004005  3  4F CB        
004007  3  31 32 33 20          .byte "123 /  6 =",160
00400B  3  2F 20 20 36  
00400F  3  20 3D A0     
004012  3  4F CB                .byte "O",203
004014  3  4E 4F 54 20          .byte "NOT O",203
004018  3  4F CB        
00401A  3  31 32 33 20          .byte "123 /  7 =",160
00401E  3  2F 20 20 37  
004022  3  20 3D A0     
004025  3  4F CB                .byte "O",203
004027  3  4E 4F 54 20          .byte "NOT O",203
00402B  3  4F CB        
00402D  3  31 32 33 20          .byte "123 /  8 =",160
004031  3  2F 20 20 38  
004035  3  20 3D A0     
004038  3  4F CB                .byte "O",203
00403A  3  4E 4F 54 20          .byte "NOT O",203
00403E  3  4F CB        
004040  3  31 32 33 20          .byte "123 /  9 =",160
004044  3  2F 20 20 39  
004048  3  20 3D A0     
00404B  3  4F CB                .byte "O",203
00404D  3  4E 4F 54 20          .byte "NOT O",203
004051  3  4F CB        
004053  3  31 32 33 20          .byte "123 / 10 =",160
004057  3  2F 20 31 30  
00405B  3  20 3D A0     
00405E  3  4F CB                .byte "O",203
004060  3  4E 4F 54 20          .byte "NOT O",203
004064  3  4F CB        
004066  3  31 32 33 20          .byte "123 / 11 =",160
00406A  3  2F 20 31 31  
00406E  3  20 3D A0     
004071  3  4F CB                .byte "O",203
004073  3  4E 4F 54 20          .byte "NOT O",203
004077  3  4F CB        
004079  3  31 32 33 20          .byte "123 / 12 =",160
00407D  3  2F 20 31 32  
004081  3  20 3D A0     
004084  3  4F CB                .byte "O",203
004086  3  4E 4F 54 20          .byte "NOT O",203
00408A  3  4F CB        
00408C  3  31 32 33 20          .byte "123 / 13 =",160
004090  3  2F 20 31 33  
004094  3  20 3D A0     
004097  3  4F CB                .byte "O",203
004099  3  4E 4F 54 20          .byte "NOT O",203
00409D  3  4F CB        
00409F  3  31 32 33 20          .byte "123 / 14 =",160
0040A3  3  2F 20 31 34  
0040A7  3  20 3D A0     
0040AA  3  4F CB                .byte "O",203
0040AC  3  4E 4F 54 20          .byte "NOT O",203
0040B0  3  4F CB        
0040B2  3  31 32 33 20          .byte "123 / 16 =",160
0040B6  3  2F 20 31 36  
0040BA  3  20 3D A0     
0040BD  3  4F CB                .byte "O",203
0040BF  3  4E 4F 54 20          .byte "NOT O",203
0040C3  3  4F CB        
0040C5  3  31 32 33 20          .byte "123 / 32 =",160
0040C9  3  2F 20 33 32  
0040CD  3  20 3D A0     
0040D0  3  4F CB                .byte "O",203
0040D2  3  4E 4F 54 20          .byte "NOT O",203
0040D6  3  4F CB        
0040D8  3  31 32 33 20          .byte "123 / 64 =",160
0040DC  3  2F 20 36 34  
0040E0  3  20 3D A0     
0040E3  3  4F CB                .byte "O",203
0040E5  3  4E 4F 54 20          .byte "NOT O",203
0040E9  3  4F CB        
0040EB  3  31 32 33 20          .byte "123 /128 =",160
0040EF  3  2F 31 32 38  
0040F3  3  20 3D A0     
0040F6  3  4F CB                .byte "O",203
0040F8  3  4E 4F 54 20          .byte "NOT O",203
0040FC  3  4F CB        
0040FE  3               nummsg:
0040FE  3  38                   .byte 56
0040FF  3               chgfx:
0040FF  3  00 00                .byte 0,0
004101  3               bprop:
004101  3  00                   .byte 0
004102  3               sprgfx:
004102  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004106  3  00 00 00 00  
00410A  3  00 00 00 00  
004122  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004126  3  00 00 00 00  
00412A  3  00 00 00 00  
004142  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004146  3  00 00 00 00  
00414A  3  00 00 00 00  
004162  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004166  3  00 00 00 00  
00416A  3  00 00 00 00  
004182  3               frmlst:
004182  3  00 01 01 00          .byte 0,1,1,0
004186  3               scdat:
004186  3  09 00                .word 9
004188  3  FF 00 00 FF          .byte 255,0,0,255,0,0,255,0,148
00418C  3  00 00 FF 00  
004190  3  94           
004191  3               numsc:
004191  3  01                   .byte 1
004192  3               nmedat:
004192  3  00 00 58 80          .byte 0,0,88,128,255
004196  3  FF           
004197  3               NUMOBJ = 1
004197  3               objdta:
004197  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
00419B  3  00 00 00 00  
00419F  3  00 00 00 00  
0041BD  3               font:
0041BD  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0041C1  3  00 00 00 00  
0041C5  3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0041C9  3  30 00 30 00  
0041CD  3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0041D1  3  00 00 00 00  
0041D5  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0041D9  3  6C FE 6C 00  
0041DD  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0041E1  3  7E 1E 7E 18  
0041E5  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0041E9  3  30 6E CE 00  
0041ED  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0041F1  3  7E CC 7E 00  
0041F5  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0041F9  3  00 00 00 00  
0041FD  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
004201  3  18 18 0C 00  
004205  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
004209  3  30 30 60 00  
00420D  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
004211  3  7E 18 3C 00  
004215  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
004219  3  7E 18 18 00  
00421D  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
004221  3  00 18 18 30  
004225  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
004229  3  7E 00 00 00  
00422D  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
004231  3  00 38 38 00  
004235  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
004239  3  18 30 60 00  
00423D  3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
004241  3  F6 E6 7C 00  
004245  3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
004249  3  18 18 7E 00  
00424D  3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
004251  3  7C C0 FE 00  
004255  3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
004259  3  06 C6 7C 00  
00425D  3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
004261  3  D8 FE 18 00  
004265  3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
004269  3  06 C6 7C 00  
00426D  3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
004271  3  C6 C6 7C 00  
004275  3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
004279  3  18 30 30 00  
00427D  3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
004281  3  C6 C6 7C 00  
004285  3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
004289  3  7E 06 7C 00  
00428D  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
004291  3  00 00 30 00  
004295  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
004299  3  00 30 30 60  
00429D  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
0042A1  3  30 18 0C 00  
0042A5  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
0042A9  3  00 7E 00 00  
0042AD  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
0042B1  3  0C 18 30 00  
0042B5  3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
0042B9  3  18 00 18 00  
0042BD  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
0042C1  3  FE C0 7C 00  
0042C5  3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
0042C9  3  FE C6 C6 00  
0042CD  3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0042D1  3  C6 C6 FC 00  
0042D5  3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0042D9  3  C0 C6 7C 00  
0042DD  3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0042E1  3  C6 CC F8 00  
0042E5  3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0042E9  3  C0 C0 FE 00  
0042ED  3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0042F1  3  C0 C0 C0 00  
0042F5  3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0042F9  3  DE C6 7C 00  
0042FD  3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
004301  3  C6 C6 C6 00  
004305  3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
004309  3  18 18 7E 00  
00430D  3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
004311  3  C6 C6 7C 00  
004315  3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
004319  3  D8 CC C6 00  
00431D  3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
004321  3  C0 C0 FE 00  
004325  3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
004329  3  C6 C6 C6 00  
00432D  3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
004331  3  DE CE C6 00  
004335  3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
004339  3  C6 C6 7C 00  
00433D  3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
004341  3  FC C0 C0 00  
004345  3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
004349  3  F6 DE 7C 00  
00434D  3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
004351  3  FC CC C6 00  
004355  3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
004359  3  06 C6 7C 00  
00435D  3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
004361  3  30 30 30 00  
004365  3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
004369  3  C6 C6 7C 00  
00436D  3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
004371  3  C6 6C 38 00  
004375  3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
004379  3  C6 FE 6C 00  
00437D  3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
004381  3  38 6C C6 00  
004385  3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
004389  3  30 30 30 00  
00438D  3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
004391  3  30 60 FE 00  
004395  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
004399  3  18 18 1E 00  
00439D  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
0043A1  3  30 18 0C 00  
0043A5  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
0043A9  3  30 30 F0 00  
0043AD  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
0043B1  3  30 30 30 00  
0043B5  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0043B9  3  00 00 00 FF  
0043BD  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0043C1  3  60 60 FE 00  
0043C5  3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0043C9  3  7C CC 7C 00  
0043CD  3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0043D1  3  66 66 7C 00  
0043D5  3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0043D9  3  60 60 3C 00  
0043DD  3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0043E1  3  CC CC 7C 00  
0043E5  3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0043E9  3  F8 C0 7C 00  
0043ED  3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0043F1  3  30 30 30 00  
0043F5  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0043F9  3  CC 7C 0C 78  
0043FD  3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
004401  3  CC CC CC 00  
004405  3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
004409  3  30 30 78 00  
00440D  3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
004411  3  0C 0C 6C 38  
004415  3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
004419  3  70 78 6C 00  
00441D  3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
004421  3  30 30 1C 00  
004425  3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
004429  3  FC FC FC 00  
00442D  3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
004431  3  CC CC CC 00  
004435  3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
004439  3  CC CC 78 00  
00443D  3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
004441  3  CC F8 C0 C0  
004445  3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
004449  3  CC 7C 0C 0E  
00444D  3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
004451  3  60 60 60 00  
004455  3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
004459  3  78 0C F8 00  
00445D  3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
004461  3  30 30 1C 00  
004465  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
004469  3  CC CC 78 00  
00446D  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
004471  3  78 78 30 00  
004475  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
004479  3  FC FC 78 00  
00447D  3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
004481  3  30 78 CC 00  
004485  3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
004489  3  CC 7C 0C 78  
00448D  3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
004491  3  30 60 FC 00  
004495  3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
004499  3  18 18 1E 00  
00449D  3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
0044A1  3  18 18 18 00  
0044A5  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0044A9  3  30 30 F0 00  
0044AD  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0044B1  3  00 00 00 00  
0044B5  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0044B9  3  E3 BB C6 7C  
0044BD  3               jtab:
0044BD  3  63                   .byte 99
0044BE  3  50 4F 41 51  keys:   .byte 80,79,65,81,32,78,77,49,50,51,52
0044C2  3  20 4E 4D 31  
0044C6  3  32 33 34     
0044C9  3               
0044C9  2               
0044C9  1               	.include "lib.inc"
0044C9  2               ;----------------------------------------------------------------------
0044C9  2               ; System 5 depending variables and routines
0044C9  2               ;----------------------------------------------------------------------
0044C9  2               
0044C9  2               ; Global variables
0044C9  2               
0044C9  2               	t_red		= 1	; Text colour definition filters
0044C9  2               	t_green		= 2
0044C9  2               	t_yellow	= 3
0044C9  2               	t_blue		= 4
0044C9  2               	t_magenta	= 5
0044C9  2               	t_cyan		= 6
0044C9  2               	t_white		= 7
0044C9  2               
0044C9  2               	g_red		= 17	; Graphics colour definition filters
0044C9  2               	g_green		= 18
0044C9  2               	g_yellow	= 19
0044C9  2               	g_blue		= 20
0044C9  2               	g_magenta	= 21
0044C9  2               	g_cyan		= 22
0044C9  2               	g_white		= 23
0044C9  2               
0044C9  2               	ScrWidth	= 40
0044C9  2               	ScrHeight	= 25
0044C9  2               
0044C9  2               ; System constants
0044C9  2               
0044C9  2               	ScreenAddr	= $0400	; Startaddress video RAM
0044C9  2               	MAP 		= $D800	; properties map buffer (4x256 bytes)
0044C9  2               	SCADTB_lb 	= $DC00	; screen address table lo-byte (256 bytes)
0044C9  2               	SCADTB_hb 	= $DD00	; screen address table hi-byte (256 bytes)
0044C9  2               	SHRAPN 		= $DE00	; shrapnel table (55x6 bytes)
0044C9  2               	PORT_A		= $0E21	; Keyboard
0044C9  2               
0044C9  2               	ScrSelAddr	= $b000	; Screen selection address
0044C9  2               	KeyRowAddr	= $b000	; PIA key matrix row
0044C9  2               	KeyColAddr	= $b001	; PIA key matrix column
0044C9  2               	SpeakerBit	= $b002	; Speaker bit
0044C9  2               	CmdReg		= $b400	; Command register AtoMMC
0044C9  2               	DatReg		= $b401	; Data register AtoMMC
0044C9  2               	Timer2_Low	= $b808	; Timer 2 low byte
0044C9  2               	Timer2_High	= $b809	; Timer 2 high byte
0044C9  2               
0044C9  2               ; System calls
0044C9  2               
0044C9  2               	OS_CLI   = $FFF7
0044C9  2               	OSBYTE   = $FFF4
0044C9  2               	OSWORD   = $FFF1
0044C9  2               	OSWRCH   = $FFEE
0044C9  2               	OSWRCR   = $FFEC
0044C9  2               	OSNEWL   = $FFE7
0044C9  2               	OSASCI   = $FFE3
0044C9  2               	OSRDCH   = $FFE0
0044C9  2               	OSFILE   = $FFDD
0044C9  2               	OSARGS   = $FFDA
0044C9  2               	OSBGET   = $FFD7
0044C9  2               	OSBPUT   = $FFD4
0044C9  2               	OSGBPB   = $FFD1
0044C9  2               	OSFIND   = $FFCE
0044C9  2               
0044C9  2               ; To be removed
0044C9  2               
0044C9  2               	SCRSYNC	= $fff4
0044C9  2               	READKEY	= $fff4
0044C9  2               	red    = 1
0044C9  2               	blue   = 2
0044C9  2               	yellow = 3
0044C9  2               	green  = 4
0044C9  2               keymask:
0044C9  2  00           	.byte 0
0044CA  2               
0044CA  2               ;----------------------------------------------------------------------
0044CA  2               ; System depending routines
0044CA  2               ;----------------------------------------------------------------------
0044CA  2               
0044CA  2               init:
0044CA  2  20 CE 44     	jsr cls
0044CD  2  60           	rts
0044CE  2               
0044CE  2               ;----------------------------------------------------------------------
0044CE  2               ; Clear screen routine.
0044CE  2               ;
0044CE  2               ; Fill screenmem $0400-$07ff with ScrFillByte
0044CE  2               ; Set semigraphics white at 1st column every line
0044CE  2               ;----------------------------------------------------------------------
0044CE  2               
0044CE  2               cls:
0044CE  2  A9 00        	lda #0
0044D0  2  A0 00        	ldy #0
0044D2  2               clsloop:
0044D2  2  99 00 04     	sta ScreenAddr,y
0044D5  2  99 00 05     	sta ScreenAddr+256,y
0044D8  2  99 00 06     	sta ScreenAddr+512,y
0044DB  2  99 00 07     	sta ScreenAddr+768,y
0044DE  2  C8           	iny
0044DF  2  D0 F1        	bne clsloop
0044E1  2               
0044E1  2  A0 00        	ldy #0
0044E3  2  A2 19        	ldx #ScrHeight
0044E5  2  AD 00 DC     	lda SCADTB_lb
0044E8  2  85 rr        	sta scraddr
0044EA  2  AD 00 DD     	lda SCADTB_hb
0044ED  2  85 rr        	sta scraddr+1
0044EF  2  AD CE 3A     	lda bcolour
0044F2  2               colloop:
0044F2  2  91 rr        	sta (scraddr),y
0044F4  2  48           	pha
0044F5  2  A5 rr        	lda scraddr
0044F7  2  18           	clc
0044F8  2  69 28        	adc #ScrWidth
0044FA  2  85 rr        	sta scraddr
0044FC  2  90 02        	bcc :+
0044FE  2  E6 rr        	inc scraddr+1
004500  2               :
004500  2  68           	pla
004501  2  CA           	dex
004502  2  D0 EE        	bne colloop
004504  2  60           	rts
004505  2               
004505  2               ;----------------------------------------------------------------------
004505  2               ; Joystick routines
004505  2               ;----------------------------------------------------------------------
004505  2               
004505  2               joyinit:
004505  2  60           	rts
004506  2               joy1:
004506  2  60           	rts
004507  2               joy2:
004507  2  60           	rts
004508  2               
004508  2               ;----------------------------------------------------------------------
004508  2               ; Keyboard routines
004508  2               ;----------------------------------------------------------------------
004508  2               
004508  2               ktest:
004508  2  85 rr        	sta tmp
00450A  2  2C 21 0E     	bit PORT_A
00450D  2  30 09        	bmi not_pressed
00450F  2  AD 21 0E     	lda PORT_A
004512  2  C5 rr        	cmp tmp
004514  2  D0 02        	bne not_pressed
004516  2               pressed:
004516  2  18           	clc
004517  2  60           	rts
004518  2               not_pressed:
004518  2  38           	sec
004519  2  60           	rts
00451A  2               
00451A  2               prskey:
00451A  2  2C 21 0E     	bit PORT_A
00451D  2  30 FB        	bmi prskey
00451F  2               relkey:
00451F  2  2C 21 0E     	bit PORT_A
004522  2  10 FB        	bpl relkey
004524  2  60           	rts
004525  2               
004525  1               	.include "z80.asm"
004525  2               ;------------------------------------------------------
004525  2               ; z80.asm
004525  2               ; spectrum stuff
004525  2               ; adresses
004525  2               
004525  2               
004525  2               ; Contains seperatly 1 bit set
004525  2               
004525  2               _bitmem0	= $f8
004525  2               _bitmem1	= $f9
004525  2               _bitmem2	= $fa
004525  2               _bitmem3	= $fb
004525  2               _bitmem4	= $fc
004525  2               _bitmem5	= $fd
004525  2               _bitmem6	= $fe
004525  2               _bitmem7	= $ff
004525  2               
004525  2               ; constants
004525  2               _bitvalue0	= $01
004525  2               _bitvalue1	= $02
004525  2               _bitvalue2	= $04
004525  2               _bitvalue3	= $08
004525  2               _bitvalue4	= $10
004525  2               _bitvalue5	= $20
004525  2               _bitvalue6	= $40
004525  2               _bitvalue7	= $80
004525  2               
004525  2               _notbitvalue0	= $fe
004525  2               _notbitvalue1	= $fd
004525  2               _notbitvalue2	= $fb
004525  2               _notbitvalue3	= $f7
004525  2               _notbitvalue4	= $ef
004525  2               _notbitvalue5	= $df
004525  2               _notbitvalue6	= $bf
004525  2               _notbitvalue7	= $7f
004525  2               
004525  2               
004525  2               exx:
004525  2  A5 62        		lda z80_c
004527  2  A4 6E        		ldy z80_cp
004529  2  84 62        		sty z80_c
00452B  2  85 6E        		sta z80_cp
00452D  2  A5 63        		lda z80_b
00452F  2  A4 6F        		ldy z80_bp
004531  2  84 63        		sty z80_b
004533  2  85 6F        		sta z80_bp
004535  2  A5 64        		lda z80_e
004537  2  A4 70        		ldy z80_ep
004539  2  84 64        		sty z80_e
00453B  2  85 70        		sta z80_ep
00453D  2  A5 65        		lda z80_d
00453F  2  A4 71        		ldy z80_dp
004541  2  84 65        		sty z80_d
004543  2  85 71        		sta z80_dp
004545  2  A5 rr        		lda scraddr
004547  2  A4 72        		ldy z80_lp
004549  2  84 rr        		sty scraddr
00454B  2  85 72        		sta z80_lp
00454D  2  A5 rr        		lda scraddr+1
00454F  2  A4 73        		ldy z80_hp
004551  2  84 rr        		sty scraddr+1
004553  2  85 73        		sta z80_hp
004555  2  60           		rts
004556  2               
004556  2               
004556  1               eind_asm:
004556  1               eop:					; End Of Program
004556  1               
004556  1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - start_asm),(49152-eind_asm + start_asm))
004556  1               
